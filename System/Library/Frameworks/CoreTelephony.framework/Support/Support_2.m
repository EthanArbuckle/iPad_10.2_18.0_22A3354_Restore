void sub_2169686F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;

  ctu::cf::assign();
  v3 = 0uLL;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
    v3 = 0uLL;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v3;
  *(_QWORD *)(a2 + 16) = 0;
}

void sub_2169687A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_216968A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  const void **v8;
  uint64_t v9;
  void *v11;
  va_list va;

  va_start(va, a8);
  v11 = *(void **)(v9 - 80);
  if (v11)
  {
    *(_QWORD *)(v9 - 72) = v11;
    operator delete(v11);
  }
  _Block_object_dispose(va, 8);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(v8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

const void **__Block_byref_object_dispose__41(uint64_t a1)
{
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)(a1 + 40));
}

void ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_42(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  void *v6;
  __CFDictionary *v7;
  const void *v8;
  const void *v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  void *v15;
  _BYTE *v16;
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;
  const void *v21;
  const void *v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v6 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = Mutable;
    __p = v6;
    ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&__p);
  }
  v7 = *(__CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v11 = 0;
  v12 = 0;
  v10 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v10, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  v16 = 0;
  v17 = 0;
  v15 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v15, v10, (uint64_t)v11, v11 - (_BYTE *)v10);
  v14 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v15, (uint64_t)v16, v16 - (_BYTE *)v15);
  v21 = 0;
  if (ctu::cf::convert_copy())
  {
    v8 = v14;
    v14 = v21;
    v22 = v8;
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v22);
  }
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  v9 = v14;
  v13 = v14;
  v14 = 0;
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v14);
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  CFDictionaryAddValue(v7, CFSTR("bbinfo"), v9);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v13);
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
}

void sub_216968BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, const void *a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const void **ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t *std::shared_ptr<QMIP2PCommandDriver>::shared_ptr[abi:ne180100]<QMIP2PCommandDriver,std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D14B0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_216968CDC(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver*)#1}::operator() const(QMIP2PCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_216968CFC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIP2PCommandDriver *,std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver *)#1},std::allocator<QMIP2PCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIP2PCommandDriver *,std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver *)#1},std::allocator<QMIP2PCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver*)#1}::operator() const(QMIP2PCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIP2PCommandDriver *,std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver *)#1},std::allocator<QMIP2PCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver*)#1}::operator() const(QMIP2PCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3p2p10P2PMessage10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216968E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::ProximityIndicator>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::ProximityIndicator>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::ProximityIndicator>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::ProximityIndicator>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D1550;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SubscriptionType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SubscriptionType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SubscriptionType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::IPPref>((_BYTE **)a2, (_DWORD *)(a1 + 12));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SubscriptionType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D15A0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::HWVersion>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5D15F0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::HWVersion>::~TlvWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D5D15F0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::HWVersion>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::HWVersion>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<p2p::tlv::HWVersion>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  void *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<p2p::tlv::HWVersion>((_BYTE **)a2, (_BYTE *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::HWVersion>::clone(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5D15F0;
  v3 = (std::string *)(v2 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_216969184(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SWVersion>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SWVersion>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SWVersion>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SWVersion>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D1640;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D1690;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D1690;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::MessageData>((_QWORD *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  void *result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<p2p::tlv::MessageData>((_WORD **)a2, a1 + 16);
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D1690;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_2169693BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3p2p21ProximityNotification8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21696949C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Timestamp>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Timestamp>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Timestamp>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Timestamp>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D1708;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageType>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  _WORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D1758;
  *(_WORD *)(result + 10) = *(_WORD *)(a1 + 10);
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageData>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D17A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageData>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D17A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageData>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::MessageData>((_QWORD *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageData>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  void *result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<p2p::tlv::MessageData>((_WORD **)a2, a1 + 16);
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageData>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D17A8;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_2169697B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info_Req>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info_Req>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info_Req>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info_Req>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D17F8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Companion_OS_Type>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Companion_OS_Type>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Companion_OS_Type>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  _WORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<p2p::tlv::Companion_OS_Type>((_WORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Companion_OS_Type>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D1848;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3p2p18P2PMessageDelivery8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216969A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t QMIAudioCommandDriver::QMIAudioCommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  NSObject *object;

  object = *a3;
  if (*a3)
    dispatch_retain(*a3);
  AudioCommandDriver::AudioCommandDriver();
  if (object)
    dispatch_release(object);
  *(_QWORD *)a1 = &off_24D5D18A8;
  *(_QWORD *)(a1 + 88) = &unk_24D5D1918;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

void sub_216969ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void QMIAudioCommandDriver::~QMIAudioCommandDriver(QMIAudioCommandDriver *this)
{
  *(_QWORD *)this = &off_24D5D18A8;
  *((_QWORD *)this + 11) = &unk_24D5D1918;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  AudioCommandDriver::~AudioCommandDriver(this);
}

{
  QMIAudioCommandDriver::~QMIAudioCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void `non-virtual thunk to'QMIAudioCommandDriver::~QMIAudioCommandDriver(QMIAudioCommandDriver *this)
{
  QMIAudioCommandDriver::~QMIAudioCommandDriver((QMIAudioCommandDriver *)((char *)this - 88));
}

{
  QMIAudioCommandDriver::~QMIAudioCommandDriver((QMIAudioCommandDriver *)((char *)this - 88));
  JUMPOUT(0x2199FEAC4);
}

void QMIAudioCommandDriver::create(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  dispatch_object_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v6 = operator new();
  v7 = (std::__shared_weak_count *)a1[1];
  v15 = *a1;
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *a2;
  v14 = v10;
  if (v10)
    dispatch_retain(v10);
  QMIAudioCommandDriver::QMIAudioCommandDriver(v6, (uint64_t)&v15, &v14);
  *a3 = 0;
  a3[1] = 0;
  std::shared_ptr<QMIAudioCommandDriver>::shared_ptr[abi:ne180100]<QMIAudioCommandDriver,std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver*)#1},void>(a3, v6);
  if (v10)
    dispatch_release(v10);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_216969C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  NSObject *v12;
  int v13;

  if (v12)
    dispatch_release(v12);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (v13)
    MEMORY[0x2199FEAC4](v11, 0xF1C40199CE48CLL);
  _Unwind_Resume(a1);
}

void QMIAudioCommandDriver::bootstrap(_QWORD *a1, dispatch_object_t *a2, uint64_t *a3, xpc_object_t *a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  NSObject *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  v8 = *a3;
  v9 = a3[1];
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *a4;
  if (*a4)
    xpc_retain(*a4);
  else
    v12 = xpc_null_create();
  v13 = a4[1];
  if (v13)
    xpc_retain(a4[1]);
  else
    v13 = xpc_null_create();
  v14 = (std::__shared_weak_count *)a1[2];
  if (!v14 || (v15 = a1[1], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = (_QWORD *)operator new();
  *v18 = a1;
  v18[1] = v7;
  v18[2] = v8;
  v18[3] = v9;
  v18[4] = v12;
  v19 = xpc_null_create();
  v18[5] = v13;
  v20 = xpc_null_create();
  v21 = a1[3];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  v24 = (_QWORD *)operator new();
  *v24 = v18;
  v24[1] = v15;
  v24[2] = v17;
  v26 = 0;
  v27 = 0;
  dispatch_async_f(v21, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0>(QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0,std::default_delete<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v26);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v27);
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v20);
  xpc_release(v19);
}

void QMIAudioCommandDriver::shutdown(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (_QWORD *)operator new();
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[3];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (_QWORD *)operator new();
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  v14 = 0;
  v15 = 0;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::shutdown(dispatch::group_session)::$_0>(QMIAudioCommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMIAudioCommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v14);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v15);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void QMIAudioCommandDriver::registered(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = a1[1], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = (_QWORD *)operator new();
  *v6 = a1;
  v7 = a1[3];
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (_QWORD *)operator new();
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  v12 = 0;
  v13 = 0;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIAudioCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIAudioCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v12);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v13);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void `non-virtual thunk to'QMIAudioCommandDriver::registered(uint64_t a1)
{
  QMIAudioCommandDriver::registered((_QWORD *)(a1 - 88));
}

void QMIAudioCommandDriver::deregistered(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = a1[1], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = (_QWORD *)operator new();
  *v6 = a1;
  v7 = a1[3];
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (_QWORD *)operator new();
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  v12 = 0;
  v13 = 0;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIAudioCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIAudioCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v12);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v13);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void `non-virtual thunk to'QMIAudioCommandDriver::deregistered(uint64_t a1)
{
  QMIAudioCommandDriver::deregistered((_QWORD *)(a1 - 88));
}

uint64_t QMIAudioCommandDriver::queryVocoderInfo(QMIAudioCommandDriver *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  _OWORD v15[2];
  _QWORD v16[5];
  std::__shared_weak_count *v17;
  QMIAudioCommandDriver *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  _QWORD aBlock[5];

  v2 = *((_QWORD *)this + 12);
  memset(v15, 0, sizeof(v15));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v15);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v3 || (v4 = *((_QWORD *)this + 1), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (!*(_BYTE *)(v2 + 72) || !*(_QWORD *)(v2 + 56))
    __TUAssertTrigger();
  v19 = v2 + 40;
  v20 = QMIServiceMsg::create();
  v21 = 25000;
  v22 = 0;
  v23 = 0;
  v11 = MEMORY[0x24BDAC760];
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 1174405120;
  v16[2] = ___ZN16QMIVirtualClient4sendIN5audio14GetVocoderType7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver16queryVocoderInfoEvE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS7_8weak_ptrIT0_EES9__block_invoke;
  v16[3] = &__block_descriptor_tmp_38_2;
  v16[4] = v4;
  v17 = v6;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v18 = this;
  aBlock[0] = v11;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_10;
  aBlock[3] = &unk_24D5D1C80;
  aBlock[4] = v16;
  v13 = _Block_copy(aBlock);
  v23 = v13;
  if (v20)
  {
    qmi::Client::send();
    v13 = v23;
  }
  if (v13)
    _Block_release(v13);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::__shared_weak_count::__release_weak(v6);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v15);
  return 1;
}

void sub_21696A378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;

  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a21);
  std::__shared_weak_count::__release_weak(v21);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21QMIAudioCommandDriver29handleGetVocoderTypeResp_syncERKN5audio14GetVocoderType8ResponseE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  unsigned int v5;
  unint64_t v6;
  int v7;

  result = convertFromQMIVocoderType(*a2);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  HIDWORD(v6) = a2[1];
  LODWORD(v6) = HIDWORD(v6) - 8;
  v5 = v6 >> 3;
  if (v5 > 5)
    v7 = 0;
  else
    v7 = dword_216AA81B4[v5];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v7;
  return result;
}

uint64_t ___ZN21QMIAudioCommandDriver29handleGetVocoderTypeResp_syncERKN5audio14GetVocoderType8ResponseE_block_invoke_3(uint64_t result, unsigned __int8 *a2)
{
  unsigned int v2;
  unint64_t v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  int v7;

  HIDWORD(v3) = *a2;
  LODWORD(v3) = HIDWORD(v3) - 8;
  v2 = v3 >> 3;
  if (v2 > 5)
    v4 = 0;
  else
    v4 = dword_216AA81B4[v2];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v4;
  HIDWORD(v6) = a2[1];
  LODWORD(v6) = HIDWORD(v6) - 8;
  v5 = v6 >> 3;
  if (v5 > 5)
    v7 = 0;
  else
    v7 = dword_216AA81B4[v5];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = v7;
  return result;
}

uint64_t QMIAudioCommandDriver::audioRateSwitchComplete(_QWORD *a1, unsigned int *a2)
{
  int v3;
  char v4;
  int v5;
  char v6;
  unsigned int v7;
  int v8;
  int v9;
  const void **v10;
  const void **v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  const void **v21;
  char *v22;
  char *v23;
  char *v24;
  const void *v25;
  char v26;
  char v27;
  uint64_t v28;
  const void **i;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  const void **v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_weak_owners;
  unint64_t v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  _QWORD v72[2];
  uint64_t (*v73)(uint64_t, _BYTE *);
  void *v74;
  char v75;
  void *__p[2];
  __int128 v77;
  _QWORD v78[5];
  std::__shared_weak_count *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  void *v85;
  _QWORD aBlock[5];

  v3 = a2[3];
  if (v3 <= 23999)
  {
    if (v3 == 8000)
    {
      v4 = 8;
      goto LABEL_13;
    }
    if (v3 == 16000)
    {
      v4 = 16;
      goto LABEL_13;
    }
  }
  else
  {
    switch(v3)
    {
      case 24000:
        v4 = 24;
        goto LABEL_13;
      case 32000:
        v4 = 32;
        goto LABEL_13;
      case 48000:
        v4 = 48;
        goto LABEL_13;
    }
  }
  v4 = -1;
LABEL_13:
  v5 = a2[4];
  if (v5 <= 23999)
  {
    if (v5 == 8000)
    {
      v6 = 8;
      goto LABEL_25;
    }
    if (v5 == 16000)
    {
      v6 = 16;
      goto LABEL_25;
    }
  }
  else
  {
    switch(v5)
    {
      case 24000:
        v6 = 24;
        goto LABEL_25;
      case 32000:
        v6 = 32;
        goto LABEL_25;
      case 48000:
        v6 = 48;
        goto LABEL_25;
    }
  }
  v6 = -1;
LABEL_25:
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  *(_OWORD *)__p = 0u;
  v77 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v10 = (const void **)__p[1];
  v11 = (const void **)v77;
  if (__p[1] != (void *)v77)
  {
    while (*((_BYTE *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v77)
        goto LABEL_32;
    }
  }
  if (v10 == (const void **)v77)
  {
LABEL_32:
    v14 = operator new();
    v15 = v14;
    *(_WORD *)(v14 + 8) = 1;
    *(_QWORD *)v14 = &off_24D5D1CC8;
    *(_BYTE *)(v14 + 10) = 0;
    v16 = v77;
    if ((unint64_t)v77 >= *((_QWORD *)&v77 + 1))
    {
      v17 = (uint64_t)(v77 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        goto LABEL_143;
      v18 = (uint64_t)(*((_QWORD *)&v77 + 1) - (unint64_t)__p[1]) >> 2;
      if (v18 <= v17 + 1)
        v18 = v17 + 1;
      if (*((_QWORD *)&v77 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v77 + 8, v19);
      else
        v20 = 0;
      v21 = (const void **)&v20[8 * v17];
      v22 = &v20[8 * v19];
      *v21 = (const void *)v15;
      v11 = v21 + 1;
      v24 = (char *)__p[1];
      v23 = (char *)v77;
      if ((void *)v77 != __p[1])
      {
        do
        {
          v25 = (const void *)*((_QWORD *)v23 - 1);
          v23 -= 8;
          *--v21 = v25;
        }
        while (v23 != v24);
        v23 = (char *)__p[1];
      }
      __p[1] = v21;
      *(_QWORD *)&v77 = v11;
      *((_QWORD *)&v77 + 1) = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_QWORD *)v77 = v14;
      v11 = (const void **)(v16 + 8);
    }
    v13 = (_BYTE *)(v15 + 9);
    *(_QWORD *)&v77 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_142;
    v13 = v12 + 9;
  }
  if (v9 <= 23999)
  {
    if (v9 == 8000)
    {
      v26 = 8;
      goto LABEL_61;
    }
    if (v9 == 16000)
    {
      v26 = 16;
      goto LABEL_61;
    }
  }
  else
  {
    switch(v9)
    {
      case 24000:
        v26 = 24;
        goto LABEL_61;
      case 32000:
        v26 = 32;
        goto LABEL_61;
      case 48000:
        v26 = 48;
        goto LABEL_61;
    }
  }
  v26 = -1;
LABEL_61:
  if (v8 <= 23999)
  {
    if (v8 == 8000)
    {
      v27 = 8;
      goto LABEL_73;
    }
    if (v8 == 16000)
    {
      v27 = 16;
      goto LABEL_73;
    }
LABEL_72:
    v27 = -1;
    goto LABEL_73;
  }
  if (v8 == 24000)
  {
    v27 = 24;
    goto LABEL_73;
  }
  if (v8 == 32000)
  {
    v27 = 32;
    goto LABEL_73;
  }
  if (v8 != 48000)
    goto LABEL_72;
  v27 = 48;
LABEL_73:
  *v13 = convertToQMIVocoderType(v7);
  v13[1] = v27;
  v28 = MEMORY[0x24BDAC760];
  v72[0] = MEMORY[0x24BDAC760];
  v72[1] = 0x40000000;
  v73 = ___ZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfo_block_invoke_2;
  v74 = &__block_descriptor_tmp_9_6;
  v75 = v26;
  for (i = (const void **)__p[1]; ; ++i)
  {
    if (i == v11)
      goto LABEL_80;
    if (*((_BYTE *)*i + 8) == 16)
      break;
  }
  if (i == v11)
  {
LABEL_80:
    v31 = operator new();
    v32 = v31;
    *(_WORD *)(v31 + 8) = 16;
    *(_QWORD *)v31 = &off_24D5D1D18;
    v33 = v77;
    if ((unint64_t)v77 >= *((_QWORD *)&v77 + 1))
    {
      v35 = (uint64_t)(v77 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v35 + 1) >> 61)
        goto LABEL_143;
      v36 = (uint64_t)(*((_QWORD *)&v77 + 1) - (unint64_t)__p[1]) >> 2;
      if (v36 <= v35 + 1)
        v36 = v35 + 1;
      if (*((_QWORD *)&v77 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v77 + 8, v37);
      else
        v38 = 0;
      v39 = (uint64_t *)&v38[8 * v35];
      v40 = &v38[8 * v37];
      *v39 = v32;
      v34 = v39 + 1;
      v42 = (char *)__p[1];
      v41 = (char *)v77;
      if ((void *)v77 != __p[1])
      {
        do
        {
          v43 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *--v39 = v43;
        }
        while (v41 != v42);
        v41 = (char *)__p[1];
      }
      __p[1] = v39;
      *(_QWORD *)&v77 = v34;
      *((_QWORD *)&v77 + 1) = v40;
      if (v41)
        operator delete(v41);
    }
    else
    {
      *(_QWORD *)v77 = v31;
      v34 = (_QWORD *)(v33 + 8);
    }
    *(_QWORD *)&v77 = v34;
    v73((uint64_t)v72, (_BYTE *)(v32 + 9));
  }
  else
  {
    if (!v30)
      goto LABEL_142;
    ___ZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfo_block_invoke_2((uint64_t)v72, v30 + 9);
  }
  v44 = (const void **)__p[1];
  if (__p[1] != (void *)v77)
  {
    while (*((_BYTE *)*v44 + 8) != 17)
    {
      if (++v44 == (const void **)v77)
        goto LABEL_104;
    }
  }
  if (v44 == (const void **)v77)
  {
LABEL_104:
    v47 = operator new();
    v48 = v47;
    *(_WORD *)(v47 + 8) = 17;
    *(_QWORD *)v47 = &off_24D5D1D68;
    *(_BYTE *)(v47 + 10) = 0;
    v49 = v77;
    if ((unint64_t)v77 < *((_QWORD *)&v77 + 1))
    {
      *(_QWORD *)v77 = v47;
      v50 = (_QWORD *)(v49 + 8);
LABEL_120:
      v46 = (char *)(v48 + 9);
      *(_QWORD *)&v77 = v50;
      goto LABEL_121;
    }
    v51 = (uint64_t)(v77 - (unint64_t)__p[1]) >> 3;
    if (!((unint64_t)(v51 + 1) >> 61))
    {
      v52 = (uint64_t)(*((_QWORD *)&v77 + 1) - (unint64_t)__p[1]) >> 2;
      if (v52 <= v51 + 1)
        v52 = v51 + 1;
      if (*((_QWORD *)&v77 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v53 = v52;
      if (v53)
        v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v77 + 8, v53);
      else
        v54 = 0;
      v55 = (uint64_t *)&v54[8 * v51];
      v56 = &v54[8 * v53];
      *v55 = v48;
      v50 = v55 + 1;
      v58 = (char *)__p[1];
      v57 = (char *)v77;
      if ((void *)v77 != __p[1])
      {
        do
        {
          v59 = *((_QWORD *)v57 - 1);
          v57 -= 8;
          *--v55 = v59;
        }
        while (v57 != v58);
        v57 = (char *)__p[1];
      }
      __p[1] = v55;
      *(_QWORD *)&v77 = v50;
      *((_QWORD *)&v77 + 1) = v56;
      if (v57)
        operator delete(v57);
      goto LABEL_120;
    }
LABEL_143:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (!v45)
LABEL_142:
    __cxa_bad_cast();
  v46 = v45 + 9;
LABEL_121:
  *v46 = v4;
  v46[1] = v6;
  v60 = (std::__shared_weak_count *)a1[2];
  if (!v60 || (v61 = a1[12], v62 = a1[1], (v63 = std::__shared_weak_count::lock(v60)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v64 = v63;
  p_shared_weak_owners = (unint64_t *)&v63->__shared_weak_owners_;
  do
    v66 = __ldxr(p_shared_weak_owners);
  while (__stxr(v66 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v63->__shared_owners_;
  do
    v68 = __ldaxr(p_shared_owners);
  while (__stlxr(v68 - 1, p_shared_owners));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v64);
  }
  if (!*(_BYTE *)(v61 + 72) || !*(_QWORD *)(v61 + 56))
    __TUAssertTrigger();
  v81 = v61 + 40;
  v82 = QMIServiceMsg::create();
  v83 = 25000;
  v84 = 0;
  v85 = 0;
  v78[0] = v28;
  v78[1] = 1174405120;
  v78[2] = ___ZN16QMIVirtualClient4sendIN5audio23AudioRateSwitchComplete7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfoE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS8_8weak_ptrIT0_EESA__block_invoke;
  v78[3] = &__block_descriptor_tmp_41_4;
  v78[4] = v62;
  v79 = v64;
  do
    v69 = __ldxr(p_shared_weak_owners);
  while (__stxr(v69 + 1, p_shared_weak_owners));
  v80 = a1;
  aBlock[0] = v28;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_10;
  aBlock[3] = &unk_24D5D1C80;
  aBlock[4] = v78;
  v70 = _Block_copy(aBlock);
  v85 = v70;
  if (v82)
  {
    qmi::Client::send();
    v70 = v85;
  }
  if (v70)
    _Block_release(v70);
  if (v79)
    std::__shared_weak_count::__release_weak(v79);
  std::__shared_weak_count::__release_weak(v64);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return 1;
}

void sub_21696AC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;

  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfo_block_invoke_2(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

uint64_t ___ZN21QMIAudioCommandDriver36handleVocoderTypeInfoIndication_syncERKN5audio15VocoderTypeInfo10IndicationE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  unsigned int v5;
  unint64_t v6;
  int v7;

  result = convertFromQMIVocoderType(*a2);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  HIDWORD(v6) = a2[1];
  LODWORD(v6) = HIDWORD(v6) - 8;
  v5 = v6 >> 3;
  if (v5 > 5)
    v7 = 0;
  else
    v7 = dword_216AA81B4[v5];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v7;
  return result;
}

uint64_t ___ZN21QMIAudioCommandDriver36handleVocoderTypeInfoIndication_syncERKN5audio15VocoderTypeInfo10IndicationE_block_invoke_3(uint64_t result, unsigned __int8 *a2)
{
  unsigned int v2;
  unint64_t v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  int v7;

  HIDWORD(v3) = *a2;
  LODWORD(v3) = HIDWORD(v3) - 8;
  v2 = v3 >> 3;
  if (v2 > 5)
    v4 = 0;
  else
    v4 = dword_216AA81B4[v2];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v4;
  HIDWORD(v6) = a2[1];
  LODWORD(v6) = HIDWORD(v6) - 8;
  v5 = v6 >> 3;
  if (v5 > 5)
    v7 = 0;
  else
    v7 = dword_216AA81B4[v5];
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = v7;
  return result;
}

void AudioStats::~AudioStats(void **this)
{
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
}

void QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(_QWORD *a1, int a2, unsigned int a3)
{
  NSObject *v6;
  uint8_t *v7;
  NSObject *v8;
  __int16 v9;
  uint64_t v10;
  const void **v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_weak_owners;
  unint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  _QWORD v38[2];
  uint64_t (*v39)(uint64_t, _WORD *);
  void *v40;
  __int16 v41;
  void *__p[2];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *aBlock;
  uint8_t v49[8];
  uint64_t v50;
  void (*v51)(_QWORD *, uint64_t *);
  void *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  _QWORD *v55;
  __int128 buf;
  void (*v57)(uint64_t, uint64_t);
  void *v58;
  uint8_t *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v6 = a1[5];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)
    && ((capabilities::ct::asString(), SHIBYTE(v51) >= 0) ? (v7 = v49) : (v7 = *(uint8_t **)v49),
        LODWORD(buf) = 136315138,
        *(_QWORD *)((char *)&buf + 4) = v7,
        _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Command type to use to switch the antenna: %s", (uint8_t *)&buf, 0xCu), SHIBYTE(v51) < 0))
  {
    operator delete(*(void **)v49);
    if (a2)
    {
LABEL_7:
      v8 = a1[5];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v49 = 67109120;
        *(_DWORD *)&v49[4] = a2;
        _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#N Unhandled command type!: %u", v49, 8u);
      }
      return;
    }
  }
  else if (a2)
  {
    goto LABEL_7;
  }
  if (a3 >= 3)
    v9 = 255;
  else
    v9 = 0x200000001uLL >> (16 * a3);
  *(_OWORD *)__p = 0u;
  v43 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v10 = MEMORY[0x24BDAC760];
  v38[0] = MEMORY[0x24BDAC760];
  v38[1] = 0x40000000;
  v39 = ___ZN21QMIAudioCommandDriver30sendAudioIOStatePolicyDecisionEN12capabilities2ct24AntennaSwitchCommandTypeE17AntennaPreference_block_invoke;
  v40 = &__block_descriptor_tmp_17_5;
  v41 = v9;
  v11 = (const void **)__p[1];
  if (__p[1] != (void *)v43)
  {
    while (*((_BYTE *)*v11 + 8) != 1)
    {
      if (++v11 == (const void **)v43)
        goto LABEL_20;
    }
  }
  if (v11 == (const void **)v43)
  {
LABEL_20:
    v13 = operator new();
    v14 = v13;
    *(_BYTE *)(v13 + 8) = 1;
    *(_QWORD *)v13 = &off_24D5D1DE8;
    *(_WORD *)(v13 + 10) = 0;
    v15 = (_WORD *)(v13 + 10);
    v16 = v43;
    if ((unint64_t)v43 >= *((_QWORD *)&v43 + 1))
    {
      v18 = (uint64_t)(v43 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v19 = (uint64_t)(*((_QWORD *)&v43 + 1) - (unint64_t)__p[1]) >> 2;
      if (v19 <= v18 + 1)
        v19 = v18 + 1;
      if (*((_QWORD *)&v43 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v43 + 8, v20);
      else
        v21 = 0;
      v22 = (uint64_t *)&v21[8 * v18];
      v23 = &v21[8 * v20];
      *v22 = v14;
      v17 = v22 + 1;
      v25 = (char *)__p[1];
      v24 = (char *)v43;
      if ((void *)v43 != __p[1])
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *--v22 = v26;
        }
        while (v24 != v25);
        v24 = (char *)__p[1];
      }
      __p[1] = v22;
      *(_QWORD *)&v43 = v17;
      *((_QWORD *)&v43 + 1) = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_QWORD *)v43 = v13;
      v17 = (_QWORD *)(v16 + 8);
    }
    *(_QWORD *)&v43 = v17;
    v39((uint64_t)v38, v15);
  }
  else
  {
    if (!v12)
      __cxa_bad_cast();
    ___ZN21QMIAudioCommandDriver30sendAudioIOStatePolicyDecisionEN12capabilities2ct24AntennaSwitchCommandTypeE17AntennaPreference_block_invoke((uint64_t)v38, v12 + 5);
  }
  v27 = (std::__shared_weak_count *)a1[2];
  if (!v27 || (v28 = a1[14], v29 = a1[1], (v30 = std::__shared_weak_count::lock(v27)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v31 = v30;
  p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (!*(_BYTE *)(v28 + 72) || !*(_QWORD *)(v28 + 56))
    __TUAssertTrigger();
  v44 = v28 + 40;
  v45 = QMIServiceMsg::create();
  v46 = 25000;
  v47 = 0;
  aBlock = 0;
  *(_QWORD *)v49 = v10;
  v50 = 1174405120;
  v51 = ___ZN16QMIVirtualClient4sendIN3bsp20SetAntennaPreference7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver30sendAudioIOStatePolicyDecisionEN12capabilities2ct24AntennaSwitchCommandTypeE17AntennaPreferenceE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
  v52 = &__block_descriptor_tmp_84_1;
  v53 = v29;
  v54 = v31;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  v55 = a1;
  *(_QWORD *)&buf = v10;
  *((_QWORD *)&buf + 1) = 0x40000000;
  v57 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_10;
  v58 = &unk_24D5D1C80;
  v59 = v49;
  v37 = _Block_copy(&buf);
  aBlock = v37;
  if (v45)
  {
    qmi::Client::send();
    v37 = aBlock;
  }
  if (v37)
    _Block_release(v37);
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  std::__shared_weak_count::__release_weak(v31);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_21696B1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  std::__shared_weak_count *v30;

  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a20);
  std::__shared_weak_count::__release_weak(v30);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21QMIAudioCommandDriver30sendAudioIOStatePolicyDecisionEN12capabilities2ct24AntennaSwitchCommandTypeE17AntennaPreference_block_invoke(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void QMIAudioCommandDriver::sendAudioLoggingEnabled(QMIAudioCommandDriver *this, char a2)
{
  const void **v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  void *__p[2];
  __int128 v33;
  _QWORD v34[5];
  std::__shared_weak_count *v35;
  QMIAudioCommandDriver *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void *v41;
  _QWORD aBlock[5];

  *(_OWORD *)__p = 0u;
  v33 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v4 = (const void **)__p[1];
  if (__p[1] != (void *)v33)
  {
    while (*((_BYTE *)*v4 + 8) != 1)
    {
      if (++v4 == (const void **)v33)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v33)
  {
LABEL_8:
    v7 = operator new();
    v8 = v7;
    *(_WORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = &off_24D5D1E68;
    v9 = v33;
    if ((unint64_t)v33 >= *((_QWORD *)&v33 + 1))
    {
      v11 = (uint64_t)(v33 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(*((_QWORD *)&v33 + 1) - (unint64_t)__p[1]) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (*((_QWORD *)&v33 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v33 + 8, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v8;
      v10 = v15 + 1;
      v18 = (char *)__p[1];
      v17 = (char *)v33;
      if ((void *)v33 != __p[1])
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)__p[1];
      }
      __p[1] = v15;
      *(_QWORD *)&v33 = v10;
      *((_QWORD *)&v33 + 1) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v33 = v7;
      v10 = (_QWORD *)(v9 + 8);
    }
    v6 = (_BYTE *)(v8 + 9);
    *(_QWORD *)&v33 = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 9;
  }
  *v6 = a2;
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v20
    || (v21 = *((_QWORD *)this + 14), v22 = *((_QWORD *)this + 1), (v23 = std::__shared_weak_count::lock(v20)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v24 = v23;
  p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (!*(_BYTE *)(v21 + 72) || !*(_QWORD *)(v21 + 56))
    __TUAssertTrigger();
  v37 = v21 + 40;
  v38 = QMIServiceMsg::create();
  v39 = 25000;
  v40 = 0;
  v41 = 0;
  v29 = MEMORY[0x24BDAC760];
  v34[0] = MEMORY[0x24BDAC760];
  v34[1] = 1174405120;
  v34[2] = ___ZN16QMIVirtualClient4sendIN3bsp22SetAudioLoggingEnabled7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver23sendAudioLoggingEnabledEbE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS7_8weak_ptrIT0_EES9__block_invoke;
  v34[3] = &__block_descriptor_tmp_85;
  v34[4] = v22;
  v35 = v24;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v36 = this;
  aBlock[0] = v29;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_10;
  aBlock[3] = &unk_24D5D1C80;
  aBlock[4] = v34;
  v31 = _Block_copy(aBlock);
  v41 = v31;
  if (v38)
  {
    qmi::Client::send();
    v31 = v41;
  }
  if (v31)
    _Block_release(v31);
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
  std::__shared_weak_count::__release_weak(v24);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_21696B558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;

  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a21);
  std::__shared_weak_count::__release_weak(v21);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

void QMIAudioCommandDriver::sendAudioStatIndsDisabled(QMIAudioCommandDriver *this, int a2, int a3, int a4)
{
  const void **v8;
  char *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  void *__p[2];
  __int128 v37;
  _QWORD v38[5];
  std::__shared_weak_count *v39;
  QMIAudioCommandDriver *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *v45;
  _QWORD aBlock[5];

  *(_OWORD *)__p = 0u;
  v37 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v8 = (const void **)__p[1];
  if (__p[1] != (void *)v37)
  {
    while (*((_BYTE *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v37)
        goto LABEL_8;
    }
  }
  if (v8 == (const void **)v37)
  {
LABEL_8:
    v11 = operator new();
    v12 = v11;
    *(_BYTE *)(v11 + 8) = 1;
    *(_DWORD *)(v11 + 12) = 0;
    v10 = (_DWORD *)(v11 + 12);
    *(_QWORD *)v11 = &off_24D5D1EE8;
    *(_QWORD *)(v11 + 16) = 0;
    v13 = v37;
    if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
    {
      v15 = (uint64_t)(v37 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v16 = (uint64_t)(*((_QWORD *)&v37 + 1) - (unint64_t)__p[1]) >> 2;
      if (v16 <= v15 + 1)
        v16 = v15 + 1;
      if (*((_QWORD *)&v37 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v37 + 8, v17);
      else
        v18 = 0;
      v19 = (uint64_t *)&v18[8 * v15];
      v20 = &v18[8 * v17];
      *v19 = v12;
      v14 = v19 + 1;
      v22 = (char *)__p[1];
      v21 = (char *)v37;
      if ((void *)v37 != __p[1])
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v19 = v23;
        }
        while (v21 != v22);
        v21 = (char *)__p[1];
      }
      __p[1] = v19;
      *(_QWORD *)&v37 = v14;
      *((_QWORD *)&v37 + 1) = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v37 = v11;
      v14 = (_QWORD *)(v13 + 8);
    }
    *(_QWORD *)&v37 = v14;
  }
  else
  {
    if (!v9)
      __cxa_bad_cast();
    v10 = v9 + 12;
  }
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v24
    || (v25 = *((_QWORD *)this + 12), v26 = *((_QWORD *)this + 1), (v27 = std::__shared_weak_count::lock(v24)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v28 = v27;
  p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v28);
  }
  if (!*(_BYTE *)(v25 + 72) || !*(_QWORD *)(v25 + 56))
    __TUAssertTrigger();
  v41 = v25 + 40;
  v42 = QMIServiceMsg::create();
  v43 = 25000;
  v44 = 0;
  v45 = 0;
  v33 = MEMORY[0x24BDAC760];
  v38[0] = MEMORY[0x24BDAC760];
  v38[1] = 1174405120;
  v38[2] = ___ZN16QMIVirtualClient4sendIN5audio18SetAudioIndDisable7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver25sendAudioStatIndsDisabledEbbbE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS7_8weak_ptrIT0_EES9__block_invoke;
  v38[3] = &__block_descriptor_tmp_86_2;
  v38[4] = v26;
  v39 = v28;
  do
    v34 = __ldxr(p_shared_weak_owners);
  while (__stxr(v34 + 1, p_shared_weak_owners));
  v40 = this;
  aBlock[0] = v33;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_10;
  aBlock[3] = &unk_24D5D1C80;
  aBlock[4] = v38;
  v35 = _Block_copy(aBlock);
  v45 = v35;
  if (v42)
  {
    qmi::Client::send();
    v35 = v45;
  }
  if (v35)
    _Block_release(v35);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  std::__shared_weak_count::__release_weak(v28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_21696B8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;

  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a21);
  std::__shared_weak_count::__release_weak(v21);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<unsigned int,std::string> *>>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  __n128 result;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  void **v21;
  __int128 v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = a2 - 2;
  if (a2 >= 2)
  {
    v31 = v3;
    v32 = v4;
    v6 = a3;
    v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= ((uint64_t)a3 - a1) >> 5)
    {
      v10 = ((uint64_t)a3 - a1) >> 4;
      v11 = v10 | 1;
      v12 = (unsigned int *)(a1 + 32 * (v10 | 1));
      v13 = v10 + 2;
      if (v10 + 2 < a2)
      {
        v14 = v12[8];
        if (*v12 < v14)
          v15 = -1;
        else
          v15 = 1;
        if (*v12 == v14)
          v15 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 32 * v11 + 8), (void **)v12 + 5);
        if (v15 << 24 > 0)
        {
          v12 += 8;
          v11 = v13;
        }
      }
      if (*v12 < *v6)
        v17 = -1;
      else
        v17 = 1;
      if (*v12 == *v6)
        v17 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v12 + 1, (void **)v6 + 1);
      if (v17 << 24 <= 0)
      {
        v28 = *v6;
        v18 = *((_QWORD *)v6 + 3);
        v29 = *(__n128 *)(v6 + 2);
        v30 = v18;
        *((_QWORD *)v6 + 2) = 0;
        *((_QWORD *)v6 + 3) = 0;
        *((_QWORD *)v6 + 1) = 0;
        do
        {
          v19 = v6;
          v6 = v12;
          *v19 = *v12;
          v20 = v19 + 2;
          if (*((char *)v19 + 31) < 0)
            operator delete(*(void **)v20);
          v21 = (void **)(v12 + 2);
          v22 = *(_OWORD *)(v12 + 2);
          *((_QWORD *)v20 + 2) = *((_QWORD *)v12 + 3);
          *(_OWORD *)v20 = v22;
          *((_BYTE *)v12 + 31) = 0;
          *((_BYTE *)v12 + 8) = 0;
          if (v8 < v11)
          {
            *v12 = v28;
            goto LABEL_40;
          }
          v23 = (2 * v11) | 1;
          v12 = (unsigned int *)(a1 + 32 * v23);
          v11 = 2 * v11 + 2;
          if (v11 >= a2)
          {
            v11 = v23;
          }
          else
          {
            v24 = v12[8];
            if (*v12 < v24)
              v25 = -1;
            else
              v25 = 1;
            if (*v12 == v24)
              v25 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 32 * v23 + 8), (void **)v12 + 5);
            if (v25 << 24 <= 0)
              v11 = v23;
            else
              v12 += 8;
          }
          if (*v12 < v28)
            v26 = -1;
          else
            v26 = 1;
          if (*v12 == v28)
            v26 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v12 + 1, (void **)&v29);
        }
        while (v26 << 24 < 1);
        v27 = *((char *)v6 + 31);
        *v6 = v28;
        if (v27 < 0)
          operator delete(*v21);
LABEL_40:
        result = v29;
        *((_QWORD *)v6 + 3) = v30;
        *(__n128 *)v21 = result;
      }
    }
  }
  return result;
}

uint64_t *std::shared_ptr<QMIAudioCommandDriver>::shared_ptr[abi:ne180100]<QMIAudioCommandDriver,std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D1A70;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_21696BB90(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver*)#1}::operator() const(QMIAudioCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_21696BBB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIAudioCommandDriver *,std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver *)#1},std::allocator<QMIAudioCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIAudioCommandDriver *,std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver *)#1},std::allocator<QMIAudioCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver*)#1}::operator() const(QMIAudioCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIAudioCommandDriver *,std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver *)#1},std::allocator<QMIAudioCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver*)#1}::operator() const(QMIAudioCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0>(QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0,std::default_delete<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  unint64_t v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  void *v17;
  xpc_object_t v18;
  std::mutex *ServiceMap;
  _QWORD *v20;
  xpc_object_t v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::mutex *v29;
  _QWORD *v30;
  xpc_object_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _WORD *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t *v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  _WORD *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t **v72;
  uint64_t *v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  _WORD *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  BOOL v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t **v93;
  uint64_t *v94;
  unint64_t *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  _WORD *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  BOOL v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t **v114;
  uint64_t *v115;
  unint64_t *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  _WORD *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  BOOL v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t **v139;
  uint64_t *v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t *v147;
  uint64_t v148;
  _WORD *v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t *);
  unint64_t *v152;
  uint64_t v153;
  _WORD *v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t *);
  unint64_t *v157;
  uint64_t v158;
  _WORD *v159;
  uint64_t v160;
  void (*v161)(uint64_t, uint64_t *);
  unint64_t *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  void (*v166)(uint64_t, uint64_t *);
  void *v167;
  uint64_t v168;
  xpc_object_t v169;
  void *v170[2];
  char v171;
  xpc_object_t v172;
  void *__p[2];
  char v174;
  xpc_object_t v175;
  xpc_object_t object;
  uint64_t v177;
  std::__shared_weak_count *v178;
  dispatch_group_t v179;
  _WORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned __int16 v184;
  __int128 aBlock;
  void (*v186)(uint64_t, _QWORD *);
  void *v187;
  _QWORD *v188;
  _WORD *v189[2];
  unsigned __int16 v190[8];

  v1 = *a1;
  v147 = a1;
  v148 = v1;
  v3 = *(_QWORD *)v1;
  v2 = *(NSObject **)(v1 + 8);
  v179 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  v4 = *(std::__shared_weak_count **)(v1 + 24);
  v177 = *(_QWORD *)(v1 + 16);
  v178 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(void **)(v1 + 32);
  v175 = v7;
  if (v7)
    xpc_retain(v7);
  else
    v175 = xpc_null_create();
  v8 = *(void **)(v1 + 40);
  object = v8;
  if (v8)
    xpc_retain(v8);
  else
    object = xpc_null_create();
  AudioCommandDriver::bootstrap();
  xpc_release(object);
  object = 0;
  xpc_release(v175);
  v175 = 0;
  if (v178)
  {
    v9 = &v178->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)v9);
    while (__stlxr(v10 - 1, (unint64_t *)v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  if (v179)
  {
    dispatch_group_leave(v179);
    dispatch_release(v179);
  }
  v11 = xpc_null_create();
  v12 = MEMORY[0x2199FEDD0](*(_QWORD *)(v1 + 32));
  v13 = MEMORY[0x24BDACFB0];
  if (v12 == MEMORY[0x24BDACFB0])
  {
    v14 = xpc_connection_create_from_endpoint(*(xpc_endpoint_t *)(v1 + 32));
    if (!v14)
      v14 = xpc_null_create();
    v15 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v15);
  }
  else
  {
    v14 = v11;
  }
  v16 = xpc_null_create();
  if (MEMORY[0x2199FEDD0](*(_QWORD *)(v1 + 40)) == v13)
  {
    v17 = xpc_connection_create_from_endpoint(*(xpc_endpoint_t *)(v1 + 40));
    if (!v17)
      v17 = xpc_null_create();
    v18 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v18);
  }
  else
  {
    v17 = v16;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v3 + 48));
  ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<QMIClientPool>(ServiceMap, &v164);
  v20 = v164;
  std::string::basic_string[abi:ne180100]<0>(__p, "audio");
  v172 = v14;
  v21 = xpc_null_create();
  QMIClientPool::requestClient(v20, 0xE1u, (uint64_t *)__p, v3 + 88, (uint64_t)&v172, &aBlock);
  v22 = (uint64_t *)(v3 + 96);
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](v3 + 96, &aBlock);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&aBlock + 1);
  if (*((_QWORD *)&aBlock + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&aBlock + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  xpc_release(v172);
  v172 = 0;
  if (v174 < 0)
    operator delete(__p[0]);
  v26 = (std::__shared_weak_count *)v165;
  if (v165)
  {
    v27 = (unint64_t *)(v165 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::mutex *)Registry::getServiceMap(*(Registry **)(v3 + 48));
  ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<QMIClientPool>(v29, &v164);
  v30 = v164;
  std::string::basic_string[abi:ne180100]<0>(v170, "audio");
  v169 = v17;
  v31 = xpc_null_create();
  QMIClientPool::requestClient(v30, 0xE2u, (uint64_t *)v170, v3 + 88, (uint64_t)&v169, &aBlock);
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](v3 + 112, &aBlock);
  v32 = (std::__shared_weak_count *)*((_QWORD *)&aBlock + 1);
  if (*((_QWORD *)&aBlock + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&aBlock + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  xpc_release(v169);
  v169 = 0;
  if (v171 < 0)
    operator delete(v170[0]);
  v35 = (std::__shared_weak_count *)v165;
  if (v165)
  {
    v36 = (unint64_t *)(v165 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = *(_QWORD *)(v3 + 96);
  v39 = (_WORD *)MEMORY[0x24BDAC760];
  v164 = (_QWORD *)MEMORY[0x24BDAC760];
  v165 = 0x40000000;
  v166 = ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke;
  v167 = &__block_descriptor_tmp_26_2;
  v168 = v3;
  v40 = *(std::__shared_weak_count **)(v38 + 8);
  if (v40)
  {
    v40 = std::__shared_weak_count::lock(v40);
    v155 = (uint64_t)v40;
    if (v40)
    {
      v42 = v40;
      v43 = *(_QWORD *)v38;
      v154 = (_WORD *)v43;
      if (v43)
      {
        v159 = (_WORD *)(v38 + 88);
        v160 = 1;
        MEMORY[0x2199FDF3C](v38 + 88, v41);
        v44 = *(_QWORD *)(v38 + 24);
        if (v44)
        {
          v45 = v38 + 24;
          do
          {
            v46 = *(unsigned __int16 *)(v44 + 32);
            v47 = v46 >= 0x30;
            if (v46 >= 0x30)
              v48 = (uint64_t *)v44;
            else
              v48 = (uint64_t *)(v44 + 8);
            if (v47)
              v45 = v44;
            v44 = *v48;
          }
          while (*v48);
          if (v45 != v38 + 24 && *(unsigned __int16 *)(v45 + 32) <= 0x30u)
            __TUAssertTrigger();
        }
        *(_QWORD *)&aBlock = v39;
        *((_QWORD *)&aBlock + 1) = 0x40000000;
        v186 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio15VocoderTypeInfo10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
        v187 = &unk_24D5D1B88;
        v188 = &v164;
        v49 = (uint64_t *)_Block_copy(&aBlock);
        LOWORD(v180) = 48;
        v149 = &v180;
        v50 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v38 + 16), (unsigned __int16 *)&v180, (uint64_t)&std::piecewise_construct, &v149);
        v51 = v50[5];
        v50[5] = v49;
        if (v51)
          _Block_release(v51);
        std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v159);
        v159 = 0;
        v160 = 0;
        v52 = *(unint64_t **)(v38 + 64);
        v161 = *(void (**)(uint64_t, uint64_t *))(v38 + 56);
        v162 = v52;
        if (v52)
        {
          v53 = v52 + 1;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        QMIClientPool::registerUnsolicitedHandler(v43, (uint64_t)&v159, v38, 0x30u);
        qmi::Client::~Client((qmi::Client *)&v159);
      }
      v55 = (unint64_t *)&v42->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  v57 = capabilities::ct::supports5G((capabilities::ct *)v40);
  v58 = *v22;
  if (v57)
  {
    v159 = v39;
    v160 = 0x40000000;
    v161 = ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke_2;
    v162 = (unint64_t *)&__block_descriptor_tmp_27_2;
    v163 = v3;
    v59 = *(std::__shared_weak_count **)(v58 + 8);
    if (v59)
    {
      v60 = std::__shared_weak_count::lock(v59);
      v150 = (uint64_t)v60;
      if (v60)
      {
        v64 = v60;
        v65 = *(_WORD **)v58;
        v149 = v65;
        if (v65)
        {
          v154 = (_WORD *)(v58 + 88);
          v155 = 1;
          MEMORY[0x2199FDF3C](v58 + 88, v61, v62, v63);
          v66 = *(_QWORD *)(v58 + 24);
          if (v66)
          {
            v67 = v58 + 24;
            do
            {
              v68 = *(unsigned __int16 *)(v66 + 32);
              v69 = v68 >= 0x36;
              if (v68 >= 0x36)
                v70 = (uint64_t *)v66;
              else
                v70 = (uint64_t *)(v66 + 8);
              if (v69)
                v67 = v66;
              v66 = *v70;
            }
            while (*v70);
            if (v67 != v58 + 24 && *(unsigned __int16 *)(v67 + 32) <= 0x36u)
              __TUAssertTrigger();
          }
          *(_QWORD *)&aBlock = v39;
          *((_QWORD *)&aBlock + 1) = 0x40000000;
          v186 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio18AudioDistortionInd10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
          v187 = &unk_24D5D1BB0;
          v188 = &v159;
          v71 = (uint64_t *)_Block_copy(&aBlock);
          LOWORD(v189[0]) = 54;
          v180 = v189;
          v72 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v58 + 16), (unsigned __int16 *)v189, (uint64_t)&std::piecewise_construct, &v180);
          v73 = v72[5];
          v72[5] = v71;
          if (v73)
            _Block_release(v73);
          std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v154);
          v154 = 0;
          v155 = 0;
          v74 = *(unint64_t **)(v58 + 64);
          v156 = *(void (**)(uint64_t, uint64_t *))(v58 + 56);
          v157 = v74;
          if (v74)
          {
            v75 = v74 + 1;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          QMIClientPool::registerUnsolicitedHandler((uint64_t)v65, (uint64_t)&v154, v58, 0x36u);
          qmi::Client::~Client((qmi::Client *)&v154);
        }
        v77 = (unint64_t *)&v64->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
    }
    v79 = *v22;
    v80 = *(std::__shared_weak_count **)(*v22 + 8);
    if (v80)
    {
      v81 = std::__shared_weak_count::lock(v80);
      v150 = (uint64_t)v81;
      if (v81)
      {
        v85 = v81;
        v86 = *(_WORD **)v79;
        v149 = v86;
        if (v86)
        {
          v154 = (_WORD *)(v79 + 88);
          v155 = 1;
          MEMORY[0x2199FDF3C](v79 + 88, v82, v83, v84);
          v87 = *(_QWORD *)(v79 + 24);
          if (v87)
          {
            v88 = v79 + 24;
            do
            {
              v89 = *(unsigned __int16 *)(v87 + 32);
              v90 = v89 >= 0x2D;
              if (v89 >= 0x2D)
                v91 = (uint64_t *)v87;
              else
                v91 = (uint64_t *)(v87 + 8);
              if (v90)
                v88 = v87;
              v87 = *v91;
            }
            while (*v91);
            if (v88 != v79 + 24 && *(unsigned __int16 *)(v88 + 32) <= 0x2Du)
              __TUAssertTrigger();
          }
          *(_QWORD *)&aBlock = v39;
          *((_QWORD *)&aBlock + 1) = 0x40000000;
          v186 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio20AudioInterfaceStatus10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
          v187 = &unk_24D5D1BD8;
          v188 = &__block_literal_global;
          v92 = (uint64_t *)_Block_copy(&aBlock);
          LOWORD(v189[0]) = 45;
          v180 = v189;
          v93 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v79 + 16), (unsigned __int16 *)v189, (uint64_t)&std::piecewise_construct, &v180);
          v94 = v93[5];
          v93[5] = v92;
          if (v94)
            _Block_release(v94);
          std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v154);
          v154 = 0;
          v155 = 0;
          v95 = *(unint64_t **)(v79 + 64);
          v156 = *(void (**)(uint64_t, uint64_t *))(v79 + 56);
          v157 = v95;
          if (v95)
          {
            v96 = v95 + 1;
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
          }
          QMIClientPool::registerUnsolicitedHandler((uint64_t)v86, (uint64_t)&v154, v79, 0x2Du);
          qmi::Client::~Client((qmi::Client *)&v154);
        }
        v98 = (unint64_t *)&v85->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
    }
    v100 = *(_QWORD *)(v3 + 96);
    v154 = v39;
    v155 = 0x40000000;
    v156 = ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke_4;
    v157 = (unint64_t *)&__block_descriptor_tmp_29_0;
    v158 = v3;
    v101 = *(std::__shared_weak_count **)(v100 + 8);
    if (v101)
    {
      v102 = std::__shared_weak_count::lock(v101);
      v181 = (uint64_t)v102;
      if (v102)
      {
        v106 = v102;
        v180 = *(_WORD **)v100;
        v107 = v180;
        if (v180)
        {
          v149 = (_WORD *)(v100 + 88);
          v150 = 1;
          MEMORY[0x2199FDF3C](v100 + 88, v103, v104, v105);
          v108 = *(_QWORD *)(v100 + 24);
          if (v108)
          {
            v109 = v100 + 24;
            do
            {
              v110 = *(unsigned __int16 *)(v108 + 32);
              v111 = v110 >= 0x35;
              if (v110 >= 0x35)
                v112 = (uint64_t *)v108;
              else
                v112 = (uint64_t *)(v108 + 8);
              if (v111)
                v109 = v108;
              v108 = *v112;
            }
            while (*v112);
            if (v109 != v100 + 24 && *(unsigned __int16 *)(v109 + 32) <= 0x35u)
              __TUAssertTrigger();
          }
          *(_QWORD *)&aBlock = v39;
          *((_QWORD *)&aBlock + 1) = 0x40000000;
          v186 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio18AudioStatisticsInd10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
          v187 = &unk_24D5D1C00;
          v188 = &v154;
          v113 = (uint64_t *)_Block_copy(&aBlock);
          v190[0] = 53;
          v189[0] = v190;
          v114 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v100 + 16), v190, (uint64_t)&std::piecewise_construct, v189);
          v115 = v114[5];
          v114[5] = v113;
          if (v115)
            _Block_release(v115);
          std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v149);
          v149 = 0;
          v150 = 0;
          v116 = *(unint64_t **)(v100 + 64);
          v151 = *(void (**)(uint64_t, uint64_t *))(v100 + 56);
          v152 = v116;
          if (v116)
          {
            v117 = v116 + 1;
            do
              v118 = __ldxr(v117);
            while (__stxr(v118 + 1, v117));
          }
          QMIClientPool::registerUnsolicitedHandler((uint64_t)v107, (uint64_t)&v149, v100, 0x35u);
          qmi::Client::~Client((qmi::Client *)&v149);
        }
        v119 = (unint64_t *)&v106->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
    }
    v121 = *(_QWORD *)(v3 + 96);
    v149 = v39;
    v150 = 0x40000000;
    v151 = ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke_5;
    v152 = (unint64_t *)&__block_descriptor_tmp_30_1;
    v153 = v3;
    v122 = *(std::__shared_weak_count **)(v121 + 8);
    if (v122)
    {
      v123 = std::__shared_weak_count::lock(v122);
      v189[1] = v123;
      if (v123)
      {
        v131 = v123;
        v189[0] = *(_WORD **)v121;
        v132 = v189[0];
        if (v189[0])
        {
          v180 = (_WORD *)(v121 + 88);
          v181 = 1;
          MEMORY[0x2199FDF3C](v121 + 88, v124, v125, v126, v127, v128, v129, v130, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157,
            v158,
            v159,
            v160,
            v161);
          v133 = *(_QWORD *)(v121 + 24);
          if (v133)
          {
            v134 = v121 + 24;
            do
            {
              v135 = *(unsigned __int16 *)(v133 + 32);
              v136 = v135 >= 0x37;
              if (v135 >= 0x37)
                v137 = (uint64_t *)v133;
              else
                v137 = (uint64_t *)(v133 + 8);
              if (v136)
                v134 = v133;
              v133 = *v137;
            }
            while (*v137);
            if (v134 != v121 + 24 && *(unsigned __int16 *)(v134 + 32) <= 0x37u)
              __TUAssertTrigger();
          }
          *(_QWORD *)&aBlock = v39;
          *((_QWORD *)&aBlock + 1) = 0x40000000;
          v186 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio24AudioPSCallStatisticsInd10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
          v187 = &unk_24D5D1C28;
          v188 = &v149;
          v138 = (uint64_t *)_Block_copy(&aBlock);
          v184 = 55;
          *(_QWORD *)v190 = &v184;
          v139 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v121 + 16), &v184, (uint64_t)&std::piecewise_construct, (_WORD **)v190);
          v140 = v139[5];
          v139[5] = v138;
          if (v140)
            _Block_release(v140);
          std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v180);
          v180 = 0;
          v181 = 0;
          v141 = *(_QWORD *)(v121 + 64);
          v182 = *(_QWORD *)(v121 + 56);
          v183 = v141;
          if (v141)
          {
            v142 = (unint64_t *)(v141 + 8);
            do
              v143 = __ldxr(v142);
            while (__stxr(v143 + 1, v142));
          }
          QMIClientPool::registerUnsolicitedHandler((uint64_t)v132, (uint64_t)&v180, v121, 0x37u);
          qmi::Client::~Client((qmi::Client *)&v180);
        }
        v144 = (unint64_t *)&v131->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
    }
    v58 = *v22;
  }
  QMIVirtualClient::addToPowerMode((QMIVirtualClient *)v58);
  xpc_release(v31);
  xpc_release(v21);
  std::unique_ptr<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0,std::default_delete<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0>>::~unique_ptr[abi:ne180100](&v148);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v147);
}

void sub_21696C7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,xpc_object_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,xpc_object_t a47,xpc_object_t a48)
{
  void *v48;
  void *v49;
  uint64_t v50;

  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100](v50 - 216);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v50 - 136);
  xpc_release(v49);
  xpc_release(v48);
  std::unique_ptr<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0,std::default_delete<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0,std::default_delete<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 40));
    *(_QWORD *)(v2 + 40) = 0;
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(_QWORD *)(v2 + 32) = 0;
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(NSObject **)(v2 + 8);
    if (v6)
    {
      dispatch_group_leave(v6);
      v7 = *(NSObject **)(v2 + 8);
      if (v7)
        dispatch_release(v7);
    }
    MEMORY[0x2199FEAC4](v2, 0xA0C40DF581522);
  }
  return a1;
}

void ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v20[0] = *a2;
  v5 = a2[2];
  v20[1] = v4;
  v20[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)v2[2];
  if (!v8 || (v9 = v2[1], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = (_QWORD *)operator new();
  *v12 = v2;
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  if (v5)
  {
    v13 = (unint64_t *)(v5 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v2[3];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = (_QWORD *)operator new();
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18AudioCommandDriverE15execute_wrappedIZZZN21QMIAudioCommandDriver9bootstrapENS_13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEENS3_15ServerEndpointsEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISF_NS8_14default_deleteISF_EEEEENUlPvE_8__invokeESO_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v20);
}

void ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v20[0] = *a2;
  v5 = a2[2];
  v20[1] = v4;
  v20[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)v2[2];
  if (!v8 || (v9 = v2[1], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = (_QWORD *)operator new();
  *v12 = v2;
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  if (v5)
  {
    v13 = (unint64_t *)(v5 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v2[3];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = (_QWORD *)operator new();
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18AudioCommandDriverE15execute_wrappedIZZZN21QMIAudioCommandDriver9bootstrapENS_13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEENS3_15ServerEndpointsEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISF_NS8_14default_deleteISF_EEEEENUlPvE_8__invokeESO_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v20);
}

void ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke_4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v20[0] = *a2;
  v5 = a2[2];
  v20[1] = v4;
  v20[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)v2[2];
  if (!v8 || (v9 = v2[1], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = (_QWORD *)operator new();
  *v12 = v2;
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  if (v5)
  {
    v13 = (unint64_t *)(v5 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v2[3];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = (_QWORD *)operator new();
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18AudioCommandDriverE15execute_wrappedIZZZN21QMIAudioCommandDriver9bootstrapENS_13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEENS3_15ServerEndpointsEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISF_NS8_14default_deleteISF_EEEEENUlPvE_8__invokeESO_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v20);
}

void ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke_5(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v20[0] = *a2;
  v5 = a2[2];
  v20[1] = v4;
  v20[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)v2[2];
  if (!v8 || (v9 = v2[1], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = (_QWORD *)operator new();
  *v12 = v2;
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  if (v5)
  {
    v13 = (unint64_t *)(v5 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v2[3];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = (_QWORD *)operator new();
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18AudioCommandDriverE15execute_wrappedIZZZN21QMIAudioCommandDriver9bootstrapENS_13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEENS3_15ServerEndpointsEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISF_NS8_14default_deleteISF_EEEEENUlPvE_8__invokeESO_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v20);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio15VocoderTypeInfo10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a2[2];
  v7[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
  (*(void (**)(uint64_t, _QWORD *))(v2 + 16))(v2, v7);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_21696D1D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18AudioCommandDriverE15execute_wrappedIZZZN21QMIAudioCommandDriver9bootstrapENS_13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEENS3_15ServerEndpointsEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISF_NS8_14default_deleteISF_EEEEENUlPvE_8__invokeESO_(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  qmi::MessageBase *v5;
  unint64_t v6;
  uint64_t TlvValue;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31[6];
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  uint8_t buf[8];
  __int128 v54;
  void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v25 = a1;
  v26 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v3;
      LOWORD(v54) = 2080;
      *(_QWORD *)((char *)&v54 + 2) = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#N Received vocoder info indication with error code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    v5 = (qmi::MessageBase *)(v1 + 8);
    v48 = 0;
    v49 = &v48;
    v50 = 0x2000000000;
    v51 = 18;
    v44 = 0;
    v45 = &v44;
    v46 = 0x2000000000;
    v47 = 0;
    v6 = MEMORY[0x24BDAC760];
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&v54 = 0x40000000;
    *((_QWORD *)&v54 + 1) = ___ZN21QMIAudioCommandDriver36handleVocoderTypeInfoIndication_syncERKN5audio15VocoderTypeInfo10IndicationE_block_invoke;
    v55 = &unk_24D5D19C0;
    v56 = &v48;
    v57 = &v44;
    v31[0] = (unint64_t)buf;
    qmi::MessageBase::applyTlv<audio::tlv::VocoderInfo,void({block_pointer}&)(audio::tlv::VocoderInfo const&)>((qmi::MessageBase *)(v1 + 8), (uint64_t)v31);
    v40 = 0;
    v41 = &v40;
    v42 = 0x2000000000;
    v43 = 0;
    v43 = *((_DWORD *)v45 + 6);
    TlvValue = qmi::MessageBase::findTlvValue(v5);
    v9 = TlvValue;
    if (TlvValue)
    {
      v10 = v8;
      v31[0] = TlvValue;
      v11 = tlv::parseV<audio::tlv::I2SClockRateInfo>(v31, v8);
      if (v31[0])
      {
        HIDWORD(v13) = v11;
        LODWORD(v13) = v11 - 8;
        v12 = v13 >> 3;
        if (v12 > 5)
          v14 = 0;
        else
          v14 = dword_216AA81B4[v12];
        *((_DWORD *)v41 + 6) = v14;
      }
      else
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)v5, 16, v9, v10);
      }
    }
    v36 = 0;
    v37 = &v36;
    v38 = 0x2000000000;
    v39 = 8000;
    v32 = 0;
    v33 = &v32;
    v34 = 0x2000000000;
    v35 = 8000;
    v31[0] = v6;
    v31[1] = 0x40000000;
    v31[2] = (unint64_t)___ZN21QMIAudioCommandDriver36handleVocoderTypeInfoIndication_syncERKN5audio15VocoderTypeInfo10IndicationE_block_invoke_3;
    v31[3] = (unint64_t)&unk_24D5D19E8;
    v31[4] = (unint64_t)&v36;
    v31[5] = (unint64_t)&v32;
    v15 = qmi::MessageBase::findTlvValue(v5);
    v17 = v15;
    if (v15)
    {
      v18 = v16;
      v27 = v15;
      v52 = tlv::parseV<audio::tlv::EVSCodecInfo>((unint64_t *)&v27, v16);
      if (v27)
        ___ZN21QMIAudioCommandDriver36handleVocoderTypeInfoIndication_syncERKN5audio15VocoderTypeInfo10IndicationE_block_invoke_3((uint64_t)v31, (unsigned __int8 *)&v52);
      else
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)v5, 17, v17, v18);
    }
    v19 = *((_DWORD *)v45 + 6);
    v20 = *((_DWORD *)v41 + 6);
    v21 = *((_DWORD *)v37 + 6);
    v22 = *((_DWORD *)v33 + 6);
    v23 = *(_QWORD *)(v2 + 64);
    LODWORD(v27) = *((_DWORD *)v49 + 6);
    HIDWORD(v27) = v19;
    v28 = v20;
    v29 = v21;
    v30 = v22;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v23 + 32))(v23, &v27, 1);
    _Block_object_dispose(&v32, 8);
    _Block_object_dispose(&v36, 8);
    _Block_object_dispose(&v40, 8);
    _Block_object_dispose(&v44, 8);
    _Block_object_dispose(&v48, 8);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v26);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v25);
}

void sub_21696D514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio18AudioDistortionInd10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a2[2];
  v7[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
  (*(void (**)(uint64_t, _QWORD *))(v2 + 16))(v2, v7);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_21696D5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18AudioCommandDriverE15execute_wrappedIZZZN21QMIAudioCommandDriver9bootstrapENS_13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEENS3_15ServerEndpointsEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISF_NS8_14default_deleteISF_EEEEENUlPvE_8__invokeESO_(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  qmi::MessageBase *v5;
  uint64_t TlvValue;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  _DWORD *v23;
  int v24;
  uint8_t v25;
  unsigned int v26;
  __int128 v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v32;
  uint64_t v33;
  _DWORD *v34;
  uint8_t buf[44];
  __int128 v36;
  char v37;
  __int16 v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v32 = a1;
  v33 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v3;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = qmi::asString();
      _os_log_error_impl(&dword_216897000, v4, OS_LOG_TYPE_ERROR, "Received distortion indication with error code = 0x%x (%s)", buf, 0x12u);
    }
    goto LABEL_23;
  }
  v5 = (qmi::MessageBase *)(v1 + 8);
  TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)(v1 + 8));
  v8 = TlvValue;
  if (!TlvValue)
    goto LABEL_8;
  v9 = v7;
  *(_QWORD *)buf = TlvValue;
  v10 = tlv::parseV<audio::tlv::AudioDistortionInfo>((_DWORD **)buf, v7);
  if (!*(_QWORD *)buf)
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)v5, 1, v8, v9);
LABEL_8:
    v12 = 0;
    v13 = 0;
    goto LABEL_9;
  }
  v12 = v10;
  v13 = v11;
LABEL_9:
  v14 = qmi::MessageBase::findTlvValue(v5);
  v16 = v14;
  if (v14)
  {
    v17 = v15;
    *(_QWORD *)buf = v14;
    v18 = tlv::parseV<audio::tlv::AudioDistortionRatAndVocoderInfo>((_DWORD **)buf, v15);
    if (*(_QWORD *)buf)
    {
      v20 = v18;
      v21 = v19;
      if (HIDWORD(v18) <= 0xD)
        LODWORD(v16) = HIDWORD(v18);
      else
        LODWORD(v16) = 0;
      v22 = HIDWORD(v19);
    }
    else
    {
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)v5, 16, v16, v17);
      v20 = 0;
      LODWORD(v16) = 0;
      v21 = 8000;
      LODWORD(v22) = 8000;
    }
  }
  else
  {
    v20 = 0;
    v21 = 8000;
    LODWORD(v22) = 8000;
  }
  v23 = (_DWORD *)qmi::MessageBase::findTlvValue(v5);
  if (v23)
  {
    v34 = v23;
    memset(buf, 0, sizeof(buf));
    tlv::parseV<audio::tlv::RadioMetrics>(&v34, v24, (uint64_t)buf);
    v25 = v34;
    if (v34)
    {
      v25 = buf[0];
      v26 = *(_DWORD *)buf & 0xFFFFFF00;
      v27 = *(_OWORD *)&buf[4];
      v28 = 1;
      v29 = *(_OWORD *)&buf[20];
    }
    else
    {
      v26 = 0;
      v28 = 0;
      v29 = 0uLL;
      v27 = 0uLL;
    }
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v28 = 0;
    v27 = 0uLL;
    v29 = 0uLL;
  }
  v30 = *(_QWORD *)(v2 + 64);
  *(_DWORD *)buf = v12;
  *(_DWORD *)&buf[4] = v13;
  *(_DWORD *)&buf[8] = v20;
  *(_DWORD *)&buf[12] = v16;
  *(_DWORD *)&buf[16] = v21;
  *(_DWORD *)&buf[20] = v22;
  *(_DWORD *)&buf[24] = v26 & 0xFFFFFF00 | v25;
  *(_OWORD *)&buf[28] = v27;
  v36 = v29;
  v37 = v28;
  v38 = 0;
  v39 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v30 + 40))(v30, buf);
LABEL_23:
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v33);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v32);
}

void sub_21696D894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)va1);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio20AudioInterfaceStatus10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a2[2];
  v7[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
  (*(void (**)(uint64_t, _QWORD *))(v2 + 16))(v2, v7);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_21696D920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio18AudioStatisticsInd10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a2[2];
  v7[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
  (*(void (**)(uint64_t, _QWORD *))(v2 + 16))(v2, v7);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_21696D9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18AudioCommandDriverE15execute_wrappedIZZZN21QMIAudioCommandDriver9bootstrapENS_13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEENS3_15ServerEndpointsEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISF_NS8_14default_deleteISF_EEEEENUlPvE_8__invokeESO_(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  qmi::MessageBase *v5;
  uint64_t TlvValue;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t i;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  _OWORD *v23;
  unsigned int *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  int v39;
  void **v40;
  char v41;
  void **v42;
  __int128 v43;
  unsigned int *v44;
  __int128 *v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  int v50;
  __int128 v51;
  unsigned int *v52;
  void **v53;
  void **v54;
  __int128 v55;
  int v56;
  int v57;
  __int128 v58;
  unsigned int *v60;
  _DWORD *v61;
  int v62;
  int v63;
  _DWORD *v64;
  int v65;
  char *v66;
  char *v67;
  char *v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  int v73;
  int v74;
  char *v75;
  int v76;
  uint64_t v77;
  qmi::MessageBase *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  char v83;
  uint64_t *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  _BYTE v92[192];
  _DWORD *v93[5];
  __int128 v94;
  __int128 v95;
  _OWORD v96[2];
  uint8_t buf[40];
  std::string v98;
  std::string v99;
  std::string __p;
  __int128 v101;
  _OWORD v102[2];
  _BYTE v103[28];
  int v104;
  _QWORD v105[3];
  int v106;
  _QWORD v107[3];
  int v108;
  _QWORD v109[3];
  int v110;
  uint64_t v111[3];
  int v112;
  uint64_t v113[3];
  int v114;
  uint64_t v115[3];
  int v116;
  uint64_t v117[3];
  int v118;
  uint64_t v119[3];
  int v120;
  uint64_t v121[3];
  int v122;
  uint64_t v123[3];
  int v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v84 = a1;
  v85 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v3;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = qmi::asString();
      _os_log_error_impl(&dword_216897000, v4, OS_LOG_TYPE_ERROR, "Received audio statistics indication with error code = 0x%x (%s)", buf, 0x12u);
    }
    goto LABEL_144;
  }
  v5 = (qmi::MessageBase *)(v1 + 8);
  *(_OWORD *)v92 = 0u;
  *(_QWORD *)&v92[184] = 0;
  *(int32x2_t *)&v92[12] = vdup_n_s32(0x1F40u);
  memset(&v92[20], 0, 156);
  *(_QWORD *)&v92[176] = "No Distortion";
  TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)(v1 + 8));
  v8 = TlvValue;
  if (TlvValue)
  {
    v9 = v7;
    *(_QWORD *)&v94 = TlvValue;
    memset(buf, 0, sizeof(buf));
    tlv::parseV<audio::tlv::AudioInterfaceStatus>((_DWORD **)&v94, v7, (uint64_t)buf);
    if ((_QWORD)v94)
    {
      *(_QWORD *)v92 = *(_QWORD *)buf;
      v10 = *(_DWORD *)&buf[8];
      if (*(_DWORD *)&buf[8] > 0xDu)
        v10 = 0;
      *(_DWORD *)&v92[8] = v10;
      *(_OWORD *)&v92[12] = *(_OWORD *)&buf[12];
      *(_QWORD *)&v92[28] = *(_QWORD *)&buf[28];
      *(_DWORD *)&v92[36] = *(_DWORD *)&buf[36];
    }
    else
    {
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)v5, 1, v8, v9);
    }
  }
  v89 = 0;
  v90 = 0;
  v91 = 0;
  switch(*(_DWORD *)&v92[8])
  {
    case 3:
      v14 = (_DWORD *)qmi::MessageBase::findTlvValue(v5);
      if (v14)
      {
        v93[0] = v14;
        v94 = 0u;
        v95 = 0u;
        tlv::parseV<audio::tlv::AMRNBBitRateDistInfo>(v93, v15, (uint64_t)&v94);
        if (v93[0])
        {
          *(_DWORD *)buf = v94;
          std::string::basic_string[abi:ne180100]<0>(&buf[8], "AMR-NB 4.75");
          *(_DWORD *)&buf[32] = DWORD1(v94);
          std::string::basic_string[abi:ne180100]<0>(&v98, "AMR-NB 5.15");
          LODWORD(v99.__r_.__value_.__l.__data_) = DWORD2(v94);
          std::string::basic_string[abi:ne180100]<0>(&v99.__r_.__value_.__l.__size_, "AMR-NB 5.9");
          LODWORD(__p.__r_.__value_.__r.__words[1]) = HIDWORD(v94);
          std::string::basic_string[abi:ne180100]<0>(&__p.__r_.__value_.__r.__words[2], "AMR-NB 6.7");
          LODWORD(v102[0]) = v95;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)v102 + 1, "AMR-NB 7.4");
          *(_DWORD *)v103 = DWORD1(v95);
          std::string::basic_string[abi:ne180100]<0>(&v103[8], "AMR-NB 7.95");
          v104 = DWORD2(v95);
          std::string::basic_string[abi:ne180100]<0>(v105, "AMR-NB 10.2");
          v106 = HIDWORD(v95);
          std::string::basic_string[abi:ne180100]<0>(v107, "AMR-NB 12.2");
          std::vector<std::pair<unsigned int,std::string>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*>((uint64_t *)&v89, buf, &v108, 8uLL);
          for (i = 0; i != -32; i -= 4)
          {
            if (SHIBYTE(v107[i + 2]) < 0)
              operator delete((void *)v107[i]);
          }
        }
      }
      break;
    case 0xB:
      v17 = (_DWORD *)qmi::MessageBase::findTlvValue(v5);
      if (v17)
      {
        v93[0] = v17;
        LODWORD(v96[0]) = 0;
        v94 = 0u;
        v95 = 0u;
        tlv::parseV<audio::tlv::AMRWBBitRateDistInfo>(v93, v18, (uint64_t)&v94);
        if (v93[0])
        {
          *(_DWORD *)buf = v94;
          std::string::basic_string[abi:ne180100]<0>(&buf[8], "AMR-WB 6.6");
          *(_DWORD *)&buf[32] = DWORD1(v94);
          std::string::basic_string[abi:ne180100]<0>(&v98, "AMR-WB 8.85");
          LODWORD(v99.__r_.__value_.__l.__data_) = DWORD2(v94);
          std::string::basic_string[abi:ne180100]<0>(&v99.__r_.__value_.__l.__size_, "AMR-WB 12.65");
          LODWORD(__p.__r_.__value_.__r.__words[1]) = HIDWORD(v94);
          std::string::basic_string[abi:ne180100]<0>(&__p.__r_.__value_.__r.__words[2], "AMR-WB 14.25");
          LODWORD(v102[0]) = v95;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)v102 + 1, "AMR-WB 15.85");
          *(_DWORD *)v103 = DWORD1(v95);
          std::string::basic_string[abi:ne180100]<0>(&v103[8], "AMR-WB 18.25");
          v104 = DWORD2(v95);
          std::string::basic_string[abi:ne180100]<0>(v105, "AMR-WB 19.85");
          v106 = HIDWORD(v95);
          std::string::basic_string[abi:ne180100]<0>(v107, "AMR-WB 23.05");
          v108 = v96[0];
          std::string::basic_string[abi:ne180100]<0>(v109, "AMR-WB 23.85");
          std::vector<std::pair<unsigned int,std::string>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*>((uint64_t *)&v89, buf, &v110, 9uLL);
          v19 = 18;
          do
          {
            if ((char)buf[v19 * 16 - 1] < 0)
              operator delete(*((void **)&v96[v19] + 1));
            v19 -= 2;
          }
          while (v19 * 16);
        }
      }
      break;
    case 0xD:
      v11 = (_DWORD *)qmi::MessageBase::findTlvValue(v5);
      if (v11)
      {
        v93[0] = v11;
        memset(v96, 0, sizeof(v96));
        v94 = 0u;
        v95 = 0u;
        tlv::parseV<audio::tlv::EVSBitRateDistInfo>(v93, v12, (uint64_t)&v94);
        if (v93[0])
        {
          *(_DWORD *)buf = v94;
          std::string::basic_string[abi:ne180100]<0>(&buf[8], "EVS IO 6.6");
          *(_DWORD *)&buf[32] = DWORD1(v94);
          std::string::basic_string[abi:ne180100]<0>(&v98, "EVS IO 8.85");
          LODWORD(v99.__r_.__value_.__l.__data_) = DWORD2(v94);
          std::string::basic_string[abi:ne180100]<0>(&v99.__r_.__value_.__l.__size_, "EVS IO 12.65");
          LODWORD(__p.__r_.__value_.__r.__words[1]) = HIDWORD(v94);
          std::string::basic_string[abi:ne180100]<0>(&__p.__r_.__value_.__r.__words[2], "EVS IO 14.25");
          LODWORD(v102[0]) = v95;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)v102 + 1, "EVS IO 15.85");
          *(_DWORD *)v103 = DWORD1(v95);
          std::string::basic_string[abi:ne180100]<0>(&v103[8], "EVS IO 18.25");
          v104 = DWORD2(v95);
          std::string::basic_string[abi:ne180100]<0>(v105, "EVS IO 19.85");
          v106 = HIDWORD(v95);
          std::string::basic_string[abi:ne180100]<0>(v107, "EVS IO 23.05");
          v108 = v96[0];
          std::string::basic_string[abi:ne180100]<0>(v109, "EVS IO 23.85");
          v110 = DWORD1(v96[0]);
          std::string::basic_string[abi:ne180100]<0>(v111, "EVS PRI 2.8");
          v112 = DWORD2(v96[0]);
          std::string::basic_string[abi:ne180100]<0>(v113, "EVS PRI 7.2");
          v114 = HIDWORD(v96[0]);
          std::string::basic_string[abi:ne180100]<0>(v115, "EVS PRI 8");
          v116 = v96[1];
          std::string::basic_string[abi:ne180100]<0>(v117, "EVS PRI 9.6");
          v118 = DWORD1(v96[1]);
          std::string::basic_string[abi:ne180100]<0>(v119, "EVS PRI 13.2");
          v120 = DWORD2(v96[1]);
          std::string::basic_string[abi:ne180100]<0>(v121, "EVS PRI 16.4");
          v122 = HIDWORD(v96[1]);
          std::string::basic_string[abi:ne180100]<0>(v123, "EVS PRI 24.4");
          std::vector<std::pair<unsigned int,std::string>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*>((uint64_t *)&v89, buf, &v124, 0x10uLL);
          v13 = 32;
          do
          {
            if ((char)buf[v13 * 16 - 1] < 0)
              operator delete(*((void **)&v96[v13] + 1));
            v13 -= 2;
          }
          while (v13 * 16);
        }
      }
      break;
  }
  v21 = v89;
  v20 = v90;
  if ((unint64_t)((char *)v90 - (char *)v89) >= 0x41)
  {
    v80 = v2;
    std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<unsigned int,std::string> *>>((uint64_t)v89, 3, v89);
    v22 = v21 + 24;
    if (v21 + 24 != v20)
    {
      v23 = v21 + 2;
      v24 = v21 + 24;
      do
      {
        if (*v24 < *v21)
          v25 = -1;
        else
          v25 = 1;
        if (*v24 == *v21)
          v25 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v24 + 1, (void **)v21 + 1);
        if (v25 << 24 >= 1)
        {
          v26 = *v24;
          *v24 = *v21;
          *v21 = v26;
          v27 = *((_QWORD *)v24 + 3);
          v28 = *(_OWORD *)(v24 + 2);
          v29 = *((_QWORD *)v21 + 3);
          *(_OWORD *)(v24 + 2) = *v23;
          *((_QWORD *)v24 + 3) = v29;
          *v23 = v28;
          *((_QWORD *)v21 + 3) = v27;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<unsigned int,std::string> *>>((uint64_t)v21, 3, v21);
        }
        v24 += 8;
      }
      while (v24 != v20);
    }
    v79 = v5;
    v30 = 3;
    do
    {
      v31 = 0;
      v32 = *v21;
      v81 = *((_QWORD *)v21 + 1);
      *(_QWORD *)&v94 = *((_QWORD *)v21 + 2);
      *(_QWORD *)((char *)&v94 + 7) = *(_QWORD *)((char *)v21 + 23);
      v82 = v32;
      v83 = *((_BYTE *)v21 + 31);
      *((_QWORD *)v21 + 2) = 0;
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 1) = 0;
      v33 = v21;
      do
      {
        v34 = v31 + 1;
        v35 = &v33[8 * v31 + 8];
        v36 = (2 * v31) | 1;
        v31 = 2 * v31 + 2;
        if (v31 >= (uint64_t)v30)
        {
          *v33 = *v35;
          v40 = (void **)(v33 + 2);
          v31 = v36;
          v33 = v35;
        }
        else
        {
          v38 = v35 + 8;
          v37 = v35[8];
          if (*v35 < v37)
            v39 = -1;
          else
            v39 = 1;
          if (*v35 == v37)
          {
            v39 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v33[8 * v34 + 2], (void **)v35 + 5);
            v41 = *((_BYTE *)v33 + 31);
          }
          else
          {
            v41 = 0;
          }
          if (v39 << 24 <= 0)
          {
            v38 = v35;
            v31 = v36;
          }
          *v33 = v35[8 * (v39 << 24 > 0)];
          v42 = (void **)(v33 + 2);
          if (v41 < 0)
            operator delete(*v42);
          v40 = v42;
          v33 = v38;
        }
        v43 = *(_OWORD *)(v33 + 2);
        v40[2] = (void *)*((_QWORD *)v33 + 3);
        *(_OWORD *)v40 = v43;
        *((_BYTE *)v33 + 31) = 0;
        *((_BYTE *)v33 + 8) = 0;
      }
      while (v31 <= (uint64_t)((v30 - 2) >> 1));
      v44 = v22 - 8;
      if (v22 - 8 == v33)
      {
        *v33 = v82;
        *((_QWORD *)v33 + 1) = v81;
        *((_QWORD *)v33 + 2) = v94;
        *(_QWORD *)((char *)v33 + 23) = *(_QWORD *)((char *)&v94 + 7);
        *((_BYTE *)v33 + 31) = v83;
      }
      else
      {
        v45 = (__int128 *)(v33 + 2);
        *v33 = *(v22 - 8);
        v46 = *(_OWORD *)(v22 - 6);
        *((_QWORD *)v33 + 3) = *((_QWORD *)v22 - 1);
        *(_OWORD *)(v33 + 2) = v46;
        *(v22 - 8) = v82;
        *((_QWORD *)v22 - 3) = v81;
        *((_QWORD *)v22 - 2) = v94;
        *(_QWORD *)((char *)v22 - 9) = *(_QWORD *)((char *)&v94 + 7);
        *((_BYTE *)v22 - 1) = v83;
        v47 = (char *)v33 - (char *)v21 + 32;
        if (v47 >= 33)
        {
          v48 = (((unint64_t)v47 >> 5) - 2) >> 1;
          v49 = &v21[8 * v48];
          if (*v49 < *v33)
            v50 = -1;
          else
            v50 = 1;
          if (*v49 == *v33)
            v50 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v49 + 1, (void **)v33 + 1);
          if (v50 << 24 >= 1)
          {
            *(_QWORD *)buf = 0;
            *(_DWORD *)buf = *v33;
            v51 = *v45;
            *(_QWORD *)&buf[24] = *((_QWORD *)v33 + 3);
            *(_OWORD *)&buf[8] = v51;
            *((_QWORD *)v33 + 2) = 0;
            *((_QWORD *)v33 + 3) = 0;
            *(_QWORD *)v45 = 0;
            do
            {
              v52 = v49;
              *v33 = *v49;
              v53 = (void **)(v33 + 2);
              if (*((char *)v33 + 31) < 0)
                operator delete(*v53);
              v54 = (void **)(v52 + 2);
              v55 = *(_OWORD *)(v52 + 2);
              *((_QWORD *)v33 + 3) = *((_QWORD *)v52 + 3);
              *(_OWORD *)v53 = v55;
              *((_BYTE *)v52 + 31) = 0;
              *((_BYTE *)v52 + 8) = 0;
              if (!v48)
              {
                *v52 = *(_DWORD *)buf;
                goto LABEL_82;
              }
              v48 = (v48 - 1) >> 1;
              v49 = &v21[8 * v48];
              if (*v49 < *(_DWORD *)buf)
                v56 = -1;
              else
                v56 = 1;
              if (*v49 == *(_DWORD *)buf)
                v56 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v49 + 1, (void **)&buf[8]);
              v33 = v52;
            }
            while (v56 << 24 > 0);
            v57 = *((char *)v52 + 31);
            *v52 = *(_DWORD *)buf;
            if (v57 < 0)
              operator delete(*v54);
LABEL_82:
            v58 = *(_OWORD *)&buf[8];
            *((_QWORD *)v52 + 3) = *(_QWORD *)&buf[24];
            *(_OWORD *)v54 = v58;
          }
        }
      }
      v22 = v44;
    }
    while (v30-- > 2);
    v60 = v89;
    if (*v89)
    {
      std::string::operator=((std::string *)&v92[40], (const std::string *)(v89 + 2));
      v5 = v79;
      v2 = v80;
      v60 = v89;
    }
    else
    {
      v5 = v79;
      v2 = v80;
    }
    if (v60[8])
    {
      std::string::operator=((std::string *)&v92[64], (const std::string *)(v60 + 10));
      v60 = v89;
    }
    if (v60[16])
      std::string::operator=((std::string *)&v92[88], (const std::string *)v60 + 3);
  }
  v86 = 0;
  v87 = 0;
  v88 = 0;
  if (*(_DWORD *)&v92[4])
  {
    v61 = (_DWORD *)qmi::MessageBase::findTlvValue(v5);
    if (!v61)
      goto LABEL_99;
    v93[0] = v61;
    v95 = 0u;
    memset(v96, 0, 28);
    v94 = 0u;
    tlv::parseV<audio::tlv::DistortionTypesDistDL>(v93, v62, (uint64_t)&v94);
    if (!v93[0])
      goto LABEL_99;
    v92[132] = 1;
    *(_DWORD *)&v92[136] = HIDWORD(v95);
    *(_DWORD *)&v92[140] = DWORD1(v96[0]);
    *(_DWORD *)&v92[152] = DWORD1(v94);
    *(_DWORD *)&v92[156] = HIDWORD(v94);
    *(_DWORD *)&v92[164] = v94;
    *(_DWORD *)&v92[160] = DWORD1(v95);
    *(_DWORD *)&v92[144] = HIDWORD(v96[0]);
    *(_DWORD *)&v92[148] = DWORD1(v96[1]);
    *(_DWORD *)buf = v96[0];
    *(_QWORD *)&buf[8] = "AudioDistortionRxHighNoise";
    *(_DWORD *)&buf[16] = DWORD2(v96[0]);
    *(_QWORD *)&buf[24] = "AudioDistortionRxLowEnergy";
    *(_DWORD *)&buf[32] = DWORD2(v96[1]);
    v98.__r_.__value_.__r.__words[0] = (std::string::size_type)"AudioDistortionRxZeros";
    LODWORD(v98.__r_.__value_.__r.__words[1]) = DWORD2(v94);
    v98.__r_.__value_.__r.__words[2] = (std::string::size_type)"AudioDistortionAverageSpeechLoss";
    LODWORD(v99.__r_.__value_.__l.__data_) = v95;
    v99.__r_.__value_.__l.__size_ = (std::string::size_type)"AudioDistortionContinuousSpeechLoss";
    LODWORD(v99.__r_.__value_.__r.__words[2]) = DWORD2(v95);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"AudioDistortionRxLinkBroken";
    std::vector<std::pair<unsigned int,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,char const*> const*,std::pair<unsigned int,char const*> const*>((uint64_t)&v86, (char *)buf, &__p.__r_.__value_.__s.__data_[8], 6uLL);
    v63 = v96[1];
  }
  else
  {
    v64 = (_DWORD *)qmi::MessageBase::findTlvValue(v5);
    if (!v64)
      goto LABEL_99;
    v93[0] = v64;
    LODWORD(v96[0]) = 0;
    v94 = 0u;
    v95 = 0u;
    tlv::parseV<audio::tlv::DistortionTypesDistUL>(v93, v65, (uint64_t)&v94);
    if (!v93[0])
      goto LABEL_99;
    v92[112] = 1;
    *(_DWORD *)&v92[116] = DWORD1(v94);
    *(_DWORD *)&v92[164] = v94;
    *(_DWORD *)&v92[120] = HIDWORD(v94);
    *(_DWORD *)&v92[124] = DWORD1(v95);
    *(_DWORD *)&v92[128] = HIDWORD(v95);
    *(_DWORD *)buf = v96[0];
    *(_QWORD *)&buf[8] = "AudioDistortionTxZeros";
    *(_DWORD *)&buf[16] = v95;
    *(_QWORD *)&buf[24] = "AudioDistortionTxLowEnergy";
    *(_DWORD *)&buf[32] = DWORD2(v94);
    v98.__r_.__value_.__r.__words[0] = (std::string::size_type)"AudioDistortionTxHighNoise";
    std::vector<std::pair<unsigned int,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,char const*> const*,std::pair<unsigned int,char const*> const*>((uint64_t)&v86, (char *)buf, &v98.__r_.__value_.__s.__data_[8], 3uLL);
    v63 = DWORD2(v95);
  }
  *(_DWORD *)&v92[168] = v63 != 0;
LABEL_99:
  v66 = v86;
  if (v86 != v87)
  {
    v67 = v86 + 16;
    v68 = v86;
    if (v86 + 16 != v87)
    {
      v68 = v86;
      do
      {
        if (*(_DWORD *)v68 >= *(_DWORD *)v67)
          v69 = 1;
        else
          v69 = -1;
        if (*(_DWORD *)v68 == *(_DWORD *)v67)
        {
          v70 = *((_QWORD *)v68 + 1);
          v71 = *((_QWORD *)v67 + 1);
          v72 = v70 == v71;
          v69 = v70 >= v71 ? 1 : -1;
          if (v72)
            v69 = 0;
        }
        if (v69 < 0)
          v68 = v67;
        v67 += 16;
      }
      while (v67 != v87);
    }
    v73 = *(_DWORD *)v68;
    if (*(_DWORD *)v68 >= 0x105u)
    {
      *(_QWORD *)&v92[176] = *((_QWORD *)v68 + 1);
      *(_DWORD *)&v92[184] = v73;
    }
    v74 = 0;
    v75 = v86;
    do
    {
      v76 = *(_DWORD *)v75;
      v75 += 16;
      if (v76)
        ++v74;
    }
    while (v75 != v87);
    *(_DWORD *)&v92[168] += v74;
  }
  v77 = *(_QWORD *)(v2 + 64);
  *(_OWORD *)buf = *(_OWORD *)v92;
  *(_OWORD *)&buf[16] = *(_OWORD *)&v92[16];
  *(_QWORD *)&buf[32] = *(_QWORD *)&v92[32];
  if ((v92[63] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)&v92[40], *(std::string::size_type *)&v92[48]);
  else
    v98 = *(std::string *)&v92[40];
  if ((v92[87] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)&v92[64], *(std::string::size_type *)&v92[72]);
  else
    v99 = *(std::string *)&v92[64];
  if ((v92[111] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v92[88], *(std::string::size_type *)&v92[96]);
  else
    __p = *(std::string *)&v92[88];
  v102[1] = *(_OWORD *)&v92[144];
  *(_OWORD *)v103 = *(_OWORD *)&v92[160];
  *(_OWORD *)&v103[12] = *(_OWORD *)&v92[172];
  v101 = *(_OWORD *)&v92[112];
  v102[0] = *(_OWORD *)&v92[128];
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v77 + 48))(v77, buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (v66)
    operator delete(v66);
  *(_QWORD *)&v94 = &v89;
  std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
  if ((v92[111] & 0x80000000) != 0)
    operator delete(*(void **)&v92[88]);
  if ((v92[87] & 0x80000000) != 0)
    operator delete(*(void **)&v92[64]);
  if ((v92[63] & 0x80000000) != 0)
    operator delete(*(void **)&v92[40]);
LABEL_144:
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v85);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v84);
}

void sub_21696E8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v64;

  v64 = 288;
  while (1)
  {
    if (*(&a63 + v64 - 1) < 0)
      operator delete(*(void **)((char *)&a60 + v64));
    v64 -= 32;
    if (!v64)
    {
      a19 = &a22;
      std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
      AudioStats::~AudioStats(&a25);
      _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a18);
      std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a17);
      _Unwind_Resume(a1);
    }
  }
}

void sub_21696EA5C()
{
  JUMPOUT(0x21696EA44);
}

void sub_21696EA64()
{
  JUMPOUT(0x21696EA3CLL);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio24AudioPSCallStatisticsInd10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a2[2];
  v7[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
  (*(void (**)(uint64_t, _QWORD *))(v2 + 16))(v2, v7);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_21696EADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18AudioCommandDriverE15execute_wrappedIZZZN21QMIAudioCommandDriver9bootstrapENS_13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEENS3_15ServerEndpointsEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISF_NS8_14default_deleteISF_EEEEENUlPvE_8__invokeESO_(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  _DWORD *TlvValue;
  int v7;
  int v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _DWORD *v14;
  uint8_t buf[40];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v12 = a1;
  v13 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v3;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = qmi::asString();
      _os_log_error_impl(&dword_216897000, v4, OS_LOG_TYPE_ERROR, "Received PS Call Statistcs indication with error code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    TlvValue = (_DWORD *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)(v1 + 8));
    if (TlvValue)
    {
      v14 = TlvValue;
      memset(buf, 0, 32);
      tlv::parseV<audio::tlv::AudioJBMStat>(&v14, v7, (uint64_t)buf);
      if (v14)
      {
        v8 = *(_DWORD *)&buf[28];
        if (*(_DWORD *)&buf[28] > 0xDu)
          v8 = 0;
        v9 = *(_DWORD *)&buf[16];
        v10 = *(_OWORD *)buf;
        v11 = *(_QWORD *)(v2 + 64);
        *(_DWORD *)buf = *(_DWORD *)&buf[24];
        *(_DWORD *)&buf[4] = v8;
        *(_DWORD *)&buf[8] = *(_DWORD *)&buf[20];
        *(_OWORD *)&buf[12] = v10;
        *(_DWORD *)&buf[28] = v9;
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v11 + 56))(v11, buf);
      }
    }
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v13);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v12);
}

void sub_21696EC30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)va1);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::shutdown(dispatch::group_session)::$_0>(QMIAudioCommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMIAudioCommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v9 = a1;
  v10 = v4;
  v5 = *(_QWORD *)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 96);
  if (v6)
  {
    v11 = v6 + 88;
    v12 = 1;
    MEMORY[0x2199FDF3C](v6 + 88, a2, a3, a4);
    *(_BYTE *)(v6 + 74) = 0;
    std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v11);
  }
  v7 = *(_QWORD *)(v5 + 112);
  if (v7)
  {
    v11 = v7 + 88;
    v12 = 1;
    MEMORY[0x2199FDF3C](v7 + 88, a2, a3, a4);
    *(_BYTE *)(v7 + 74) = 0;
    std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v11);
  }
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&v10);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v9);
}

void sub_21696ECD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIAudioCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIAudioCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = *(_QWORD *)a1;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(**(_QWORD **)a1 + 64) + 16))(*(_QWORD *)(**(_QWORD **)a1 + 64), 1);
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_21696ED4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIAudioCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIAudioCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = *(_QWORD *)a1;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(**(_QWORD **)a1 + 64) + 16))(*(_QWORD *)(**(_QWORD **)a1 + 64), 0);
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_21696EDD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient4sendIN5audio14GetVocoderType7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver16queryVocoderInfoEvE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS7_8weak_ptrIT0_EES9__block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;

  v3 = (std::__shared_weak_count *)a1[5];
  if (!v3)
    return;
  v5 = std::__shared_weak_count::lock(v3);
  v35 = v5;
  if (!v5)
    return;
  if (!a1[4])
  {
    v28 = v5;
LABEL_24:
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    return;
  }
  v6 = a2[1];
  v31 = *a2;
  v32 = v6;
  v7 = a2[2];
  v33 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v31);
  v10 = (_QWORD *)a1[6];
  v11 = v31;
  v12 = v32;
  v36 = v10;
  v37[0] = v31;
  v13 = v33;
  v37[1] = v32;
  v37[2] = v33;
  if (v33)
  {
    v14 = (unint64_t *)(v33 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)v10[2];
  if (!v16 || (v17 = v10[1], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = (_QWORD *)operator new();
  *v20 = v10;
  v20[1] = v11;
  v20[2] = v12;
  v20[3] = v13;
  if (v13)
  {
    v21 = (unint64_t *)(v13 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = v10[3];
  v24 = (unint64_t *)&v19->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = (_QWORD *)operator new();
  *v26 = v20;
  v26[1] = v17;
  v26[2] = v19;
  v39 = 0;
  v38 = 0;
  dispatch_async_f(v23, v26, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::queryVocoderInfo(void)::$_0::operator() const(audio::GetVocoderType::Response const&)::{lambda(void)#1}>(QMIAudioCommandDriver::queryVocoderInfo(void)::$_0::operator() const(audio::GetVocoderType::Response const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::queryVocoderInfo(void)::$_0::operator() const(audio::GetVocoderType::Response const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::queryVocoderInfo(void)::$_0::operator() const(audio::GetVocoderType::Response const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v38);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v39);
  do
    v27 = __ldaxr(v24);
  while (__stlxr(v27 - 1, v24));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v37);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&v31);
  v28 = v35;
  if (v35)
    goto LABEL_24;
}

void sub_21696F00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c43_ZTSNSt3__18weak_ptrI18AudioCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSNSt3__18weak_ptrI18AudioCommandDriverEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::queryVocoderInfo(void)::$_0::operator() const(audio::GetVocoderType::Response const&)::{lambda(void)#1}>(QMIAudioCommandDriver::queryVocoderInfo(void)::$_0::operator() const(audio::GetVocoderType::Response const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::queryVocoderInfo(void)::$_0::operator() const(audio::GetVocoderType::Response const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::queryVocoderInfo(void)::$_0::operator() const(audio::GetVocoderType::Response const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  qmi::MessageBase *v5;
  unint64_t v6;
  int v7;
  uint64_t TlvValue;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  void *v16;
  int v17;
  void *v18;
  int v19;
  int v20;
  int v21;
  NSObject *v22;
  void **v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  void *__p[2];
  int v29;
  char v30;
  __int128 v31;
  int v32;
  unint64_t v33[6];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  uint8_t v54[4];
  void **v55;
  uint8_t buf[8];
  __int128 v57;
  void *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v26 = a1;
  v27 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v3;
      LOWORD(v57) = 2080;
      *(_QWORD *)((char *)&v57 + 2) = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#N Could not get vocoder type with code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    v5 = (qmi::MessageBase *)(v1 + 8);
    v50 = 0;
    v51 = &v50;
    v52 = 0x2000000000;
    v53 = 18;
    v46 = 0;
    v47 = &v46;
    v48 = 0x2000000000;
    v49 = 0;
    v6 = MEMORY[0x24BDAC760];
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&v57 = 0x40000000;
    *((_QWORD *)&v57 + 1) = ___ZN21QMIAudioCommandDriver29handleGetVocoderTypeResp_syncERKN5audio14GetVocoderType8ResponseE_block_invoke;
    v58 = &unk_24D5D1950;
    v59 = &v50;
    v60 = &v46;
    v33[0] = (unint64_t)buf;
    v7 = qmi::MessageBase::applyTlv<audio::tlv::VocoderInfo,void({block_pointer}&)(audio::tlv::VocoderInfo const&)>((qmi::MessageBase *)(v1 + 8), (uint64_t)v33);
    v42 = 0;
    v43 = &v42;
    v44 = 0x2000000000;
    v45 = 0;
    v45 = *((_DWORD *)v47 + 6);
    TlvValue = qmi::MessageBase::findTlvValue(v5);
    v10 = TlvValue;
    if (TlvValue)
    {
      v11 = v9;
      v33[0] = TlvValue;
      v12 = tlv::parseV<audio::tlv::I2SClockRateInfo>(v33, v9);
      if (v33[0])
      {
        HIDWORD(v14) = v12;
        LODWORD(v14) = v12 - 8;
        v13 = v14 >> 3;
        if (v13 > 5)
          v15 = 0;
        else
          v15 = dword_216AA81B4[v13];
        *((_DWORD *)v43 + 6) = v15;
      }
      else
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)v5, 16, v10, v11);
      }
    }
    v38 = 0;
    v39 = &v38;
    v40 = 0x2000000000;
    v41 = 8000;
    v34 = 0;
    v35 = &v34;
    v36 = 0x2000000000;
    v37 = 8000;
    v33[0] = v6;
    v33[1] = 0x40000000;
    v33[2] = (unint64_t)___ZN21QMIAudioCommandDriver29handleGetVocoderTypeResp_syncERKN5audio14GetVocoderType8ResponseE_block_invoke_3;
    v33[3] = (unint64_t)&unk_24D5D1978;
    v33[4] = (unint64_t)&v38;
    v33[5] = (unint64_t)&v34;
    v16 = (void *)qmi::MessageBase::findTlvValue(v5);
    v18 = v16;
    if (v16)
    {
      v19 = v17;
      __p[0] = v16;
      LOWORD(v31) = tlv::parseV<audio::tlv::EVSCodecInfo>((unint64_t *)__p, v17);
      if (__p[0])
        ___ZN21QMIAudioCommandDriver29handleGetVocoderTypeResp_syncERKN5audio14GetVocoderType8ResponseE_block_invoke_3((uint64_t)v33, (unsigned __int8 *)&v31);
      else
        ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)v5, 17, v18, v19);
    }
    if (v7)
    {
      v20 = *((_DWORD *)v47 + 6);
      LODWORD(v31) = *((_DWORD *)v51 + 6);
      DWORD1(v31) = v20;
      v21 = *((_DWORD *)v39 + 6);
      DWORD2(v31) = *((_DWORD *)v43 + 6);
      HIDWORD(v31) = v21;
      v32 = *((_DWORD *)v35 + 6);
      v22 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        VocoderInfo::asString((VocoderInfo *)&v31, __p);
        v23 = v30 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v54 = 136315138;
        v55 = v23;
        _os_log_impl(&dword_216897000, v22, OS_LOG_TYPE_DEFAULT, "#I Got Vocoder Info: %s", v54, 0xCu);
        if (v30 < 0)
          operator delete(__p[0]);
      }
      v24 = *(_QWORD *)(v2 + 64);
      *(_OWORD *)__p = v31;
      v29 = v32;
      (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v24 + 32))(v24, __p, 0);
    }
    _Block_object_dispose(&v34, 8);
    _Block_object_dispose(&v38, 8);
    _Block_object_dispose(&v42, 8);
    _Block_object_dispose(&v46, 8);
    _Block_object_dispose(&v50, 8);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v27);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v26);
}

void sub_21696F420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MessageBase::applyTlv<audio::tlv::VocoderInfo,void({block_pointer}&)(audio::tlv::VocoderInfo const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<audio::tlv::VocoderInfo>((unint64_t *)&v9, v5);
    if (v9)
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      return 1;
    }
    else
    {
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 1, v6, v7);
    }
  }
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::VocoderInfo>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::VocoderInfo>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<audio::tlv::VocoderInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::ProfileIdentifer>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::VocoderInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D1CC8;
  *(_WORD *)(result + 9) = *(_WORD *)(a1 + 9);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::I2SClockRateInfo>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::I2SClockRateInfo>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<audio::tlv::I2SClockRateInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::I2SClockRateInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D1D18;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::EVSCodecInfo>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::EVSCodecInfo>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<audio::tlv::EVSCodecInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::ProfileIdentifer>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::EVSCodecInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D1D68;
  *(_WORD *)(result + 9) = *(_WORD *)(a1 + 9);
  return result;
}

void ___ZN16QMIVirtualClient4sendIN5audio23AudioRateSwitchComplete7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfoE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS8_8weak_ptrIT0_EESA__block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[4])
      {
        v7 = (_QWORD *)a1[6];
        v8 = *a2;
        v9 = a2[1];
        v27[0] = *a2;
        v10 = a2[2];
        v27[1] = v9;
        v27[2] = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = (std::__shared_weak_count *)v7[2];
        if (!v13 || (v14 = v7[1], (v15 = std::__shared_weak_count::lock(v13)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v16 = v15;
        v17 = (_QWORD *)operator new();
        *v17 = v7;
        v17[1] = v8;
        v17[2] = v9;
        v17[3] = v10;
        if (v10)
        {
          v18 = (unint64_t *)(v10 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = v7[3];
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
        v23 = (_QWORD *)operator new();
        *v23 = v17;
        v23[1] = v14;
        v23[2] = v16;
        v28 = 0;
        v29 = 0;
        dispatch_async_f(v20, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::audioRateSwitchComplete(VocoderInfo)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIAudioCommandDriver::audioRateSwitchComplete(VocoderInfo)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::audioRateSwitchComplete(VocoderInfo)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::audioRateSwitchComplete(VocoderInfo)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v28);
        std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v29);
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v27);
      }
      v25 = (unint64_t *)&v6->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::audioRateSwitchComplete(VocoderInfo)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIAudioCommandDriver::audioRateSwitchComplete(VocoderInfo)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::audioRateSwitchComplete(VocoderInfo)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::audioRateSwitchComplete(VocoderInfo)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v8 = a1;
  v9 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v11 = v3;
      v12 = 2080;
      v13 = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#N Could not set audio rate switch complete with code = 0x%x (%s)", buf, 0x12u);
      v3 = *(_DWORD *)(v1 + 12);
    }
    if (v3)
      v5 = v3 == 26;
    else
      v5 = 1;
    v6 = v5;
  }
  else
  {
    v6 = 1;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 64) + 64))(*(_QWORD *)(v2 + 64), v6);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v9);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_21696FA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned int,std::string>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*>(uint64_t *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  void **v17;
  void **i;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = (_DWORD *)*a1;
  if (a4 > (v8 - *a1) >> 5)
  {
    if (v10)
    {
      std::vector<vs::tlv::RemoteNumberListItem>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    v11 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12 >> 59)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = operator new(32 * v12);
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v13;
    a1[2] = (uint64_t)v13 + 32 * v12;
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned int,std::string>>,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string>*>(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)v13);
    goto LABEL_13;
  }
  v15 = (a1[1] - (uint64_t)v10) >> 5;
  if (v15 < a4)
  {
    v16 = &a2[8 * v15];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string>*,0>(a2, v16, v10);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned int,std::string>>,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string>*>(v9, (uint64_t)v16, (uint64_t)a3, a1[1]);
LABEL_13:
    a1[1] = v14;
    return;
  }
  v17 = (void **)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string>*,0>(a2, a3, v10);
  for (i = (void **)a1[1]; i != v17; i -= 4)
  {
    if (*((char *)i - 1) < 0)
      operator delete(*(i - 3));
  }
  a1[1] = (uint64_t)v17;
}

void sub_21696FBA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21696FBB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned int,std::string>>,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 8);
    do
    {
      v7 = (uint64_t)v6 - 8;
      *(_DWORD *)v4 = *((_DWORD *)v6 - 2);
      v8 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v14;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 24) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4 += 32;
      v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  LOBYTE(v12) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cat::tlv::Item>,cat::tlv::Item*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_21696FC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cat::tlv::Item>,cat::tlv::Item*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string>*,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v5;
  const std::string *v6;
  int v7;
  std::string *v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = (const std::string *)(v5 + 2);
      v7 = *v5;
      v5 += 8;
      v8 = (std::string *)(a3 + 2);
      *a3 = v7;
      a3 += 8;
      std::string::operator=(v8, v6);
    }
    while (v5 != a2);
  }
  return a3;
}

char *std::vector<std::pair<unsigned int,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,char const*> const*,std::pair<unsigned int,char const*> const*>(uint64_t a1, char *a2, char *a3, unint64_t a4)
{
  char *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(char **)a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v16 = *(char **)(a1 + 8);
    v15 = (_QWORD *)(a1 + 8);
    v12 = v16;
    v17 = (v16 - result) >> 4;
    if (v17 >= a4)
    {
      v22 = result;
      if (a2 != a3)
      {
        v23 = result;
        do
        {
          *(_DWORD *)v23 = *(_DWORD *)v6;
          *((_QWORD *)v23 + 1) = *((_QWORD *)v6 + 1);
          v22 += 16;
          v6 += 16;
          v23 += 16;
        }
        while (v6 != a3);
      }
      v14 = v22 - result;
      v12 = result;
    }
    else
    {
      v18 = &a2[16 * v17];
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)result = *(_DWORD *)v6;
          *((_QWORD *)result + 1) = *((_QWORD *)v6 + 1);
          v6 += 16;
          result += 16;
        }
        while (v6 != v18);
      }
      v19 = v12;
      if (v18 != a3)
      {
        v20 = v12;
        do
        {
          v21 = *(_OWORD *)v18;
          v18 += 16;
          *(_OWORD *)v20 = v21;
          v20 += 16;
          v19 += 16;
        }
        while (v18 != a3);
      }
      v14 = v19 - v12;
    }
  }
  else
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11 >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = (char *)operator new(16 * v11);
    v12 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[16 * v11];
    v13 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, ((a3 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      v13 = &v12[((a3 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16];
    }
    v14 = v13 - v12;
    v15 = (_QWORD *)(a1 + 8);
  }
  *v15 = &v12[v14];
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AntennaPreference>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AntennaPreference>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AntennaPreference>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  _WORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AntennaPreference>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D1DE8;
  *(_WORD *)(result + 10) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN16QMIVirtualClient4sendIN3bsp20SetAntennaPreference7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver30sendAudioIOStatePolicyDecisionEN12capabilities2ct24AntennaSwitchCommandTypeE17AntennaPreferenceE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[4])
      {
        v7 = (_QWORD *)a1[6];
        v8 = *a2;
        v9 = a2[1];
        v27[0] = *a2;
        v10 = a2[2];
        v27[1] = v9;
        v27[2] = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = (std::__shared_weak_count *)v7[2];
        if (!v13 || (v14 = v7[1], (v15 = std::__shared_weak_count::lock(v13)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v16 = v15;
        v17 = (_QWORD *)operator new();
        *v17 = v7;
        v17[1] = v8;
        v17[2] = v9;
        v17[3] = v10;
        if (v10)
        {
          v18 = (unint64_t *)(v10 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = v7[3];
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
        v23 = (_QWORD *)operator new();
        *v23 = v17;
        v23[1] = v14;
        v23[2] = v16;
        v28 = 0;
        v29 = 0;
        dispatch_async_f(v20, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(capabilities::ct::AntennaSwitchCommandType,AntennaPreference)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(capabilities::ct::AntennaSwitchCommandType,AntennaPreference)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(capabilities::ct::AntennaSwitchCommandType,AntennaPreference)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(capabilities::ct::AntennaSwitchCommandType,AntennaPreference)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v28);
        std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v29);
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v27);
      }
      v25 = (unint64_t *)&v6->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(capabilities::ct::AntennaSwitchCommandType,AntennaPreference)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(capabilities::ct::AntennaSwitchCommandType,AntennaPreference)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(capabilities::ct::AntennaSwitchCommandType,AntennaPreference)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(capabilities::ct::AntennaSwitchCommandType,AntennaPreference)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_DWORD **a1)
{
  _DWORD *v1;
  int v2;
  NSObject *v3;
  _DWORD **v5;
  _DWORD *v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v5 = a1;
  v6 = v1;
  v2 = v1[3];
  if (v2)
  {
    v3 = *(NSObject **)(*(_QWORD *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v8 = v2;
      v9 = 2080;
      v10 = qmi::asString();
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#N SetAntennaPreference failed with error code = 0x%x (%s)", buf, 0x12u);
    }
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v6);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
}

void sub_2169701C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AudioLoggingEnabled>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AudioLoggingEnabled>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AudioLoggingEnabled>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AudioLoggingEnabled>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D1E68;
  return result;
}

void ___ZN16QMIVirtualClient4sendIN3bsp22SetAudioLoggingEnabled7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver23sendAudioLoggingEnabledEbE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS7_8weak_ptrIT0_EES9__block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[4])
      {
        v7 = (_QWORD *)a1[6];
        v8 = *a2;
        v9 = a2[1];
        v27[0] = *a2;
        v10 = a2[2];
        v27[1] = v9;
        v27[2] = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = (std::__shared_weak_count *)v7[2];
        if (!v13 || (v14 = v7[1], (v15 = std::__shared_weak_count::lock(v13)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v16 = v15;
        v17 = (_QWORD *)operator new();
        *v17 = v7;
        v17[1] = v8;
        v17[2] = v9;
        v17[3] = v10;
        if (v10)
        {
          v18 = (unint64_t *)(v10 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = v7[3];
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
        v23 = (_QWORD *)operator new();
        *v23 = v17;
        v23[1] = v14;
        v23[2] = v16;
        v28 = 0;
        v29 = 0;
        dispatch_async_f(v20, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::sendAudioLoggingEnabled(BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIAudioCommandDriver::sendAudioLoggingEnabled(BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::sendAudioLoggingEnabled(BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::sendAudioLoggingEnabled(BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v28);
        std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v29);
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v27);
      }
      v25 = (unint64_t *)&v6->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::sendAudioLoggingEnabled(BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIAudioCommandDriver::sendAudioLoggingEnabled(BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::sendAudioLoggingEnabled(BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::sendAudioLoggingEnabled(BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_DWORD **a1)
{
  _DWORD *v1;
  int v2;
  NSObject *v3;
  _DWORD **v5;
  _DWORD *v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v5 = a1;
  v6 = v1;
  v2 = v1[3];
  if (v2)
  {
    v3 = *(NSObject **)(*(_QWORD *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v8 = v2;
      v9 = 2080;
      v10 = qmi::asString();
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#N Could not send audio logging enabled with code = 0x%x (%s)", buf, 0x12u);
    }
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v6);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
}

void sub_216970528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::DisableStatus>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::DisableStatus>::getSize()
{
  return tlv::size<wds::tlv::Ipv4Address>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<audio::tlv::DisableStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<awd::tlv::Metrics>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::DisableStatus>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D1EE8;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a1 + 20);
  return result;
}

void ___ZN16QMIVirtualClient4sendIN5audio18SetAudioIndDisable7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver25sendAudioStatIndsDisabledEbbbE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS7_8weak_ptrIT0_EES9__block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[4])
      {
        v7 = (_QWORD *)a1[6];
        v8 = *a2;
        v9 = a2[1];
        v27[0] = *a2;
        v10 = a2[2];
        v27[1] = v9;
        v27[2] = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = (std::__shared_weak_count *)v7[2];
        if (!v13 || (v14 = v7[1], (v15 = std::__shared_weak_count::lock(v13)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v16 = v15;
        v17 = (_QWORD *)operator new();
        *v17 = v7;
        v17[1] = v8;
        v17[2] = v9;
        v17[3] = v10;
        if (v10)
        {
          v18 = (unint64_t *)(v10 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = v7[3];
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
        v23 = (_QWORD *)operator new();
        *v23 = v17;
        v23[1] = v14;
        v23[2] = v16;
        v28 = 0;
        v29 = 0;
        dispatch_async_f(v20, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::sendAudioStatIndsDisabled(BOOL,BOOL,BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIAudioCommandDriver::sendAudioStatIndsDisabled(BOOL,BOOL,BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::sendAudioStatIndsDisabled(BOOL,BOOL,BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::sendAudioStatIndsDisabled(BOOL,BOOL,BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v28);
        std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v29);
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v27);
      }
      v25 = (unint64_t *)&v6->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::sendAudioStatIndsDisabled(BOOL,BOOL,BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIAudioCommandDriver::sendAudioStatIndsDisabled(BOOL,BOOL,BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::sendAudioStatIndsDisabled(BOOL,BOOL,BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::sendAudioStatIndsDisabled(BOOL,BOOL,BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_DWORD **a1)
{
  _DWORD *v1;
  int v2;
  NSObject *v3;
  _DWORD **v5;
  _DWORD *v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v5 = a1;
  v6 = v1;
  v2 = v1[3];
  if (v2)
  {
    v3 = *(NSObject **)(*(_QWORD *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v8 = v2;
      v9 = 2080;
      v10 = qmi::asString();
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#N Could not send audio stat disabled with code = 0x%x (%s)", buf, 0x12u);
    }
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v6);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
}

void sub_2169708A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void QMIWiFiSettingsCommandDriver::create(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  NSObject *v7;
  dispatch_object_t v8;

  v6 = (_QWORD *)operator new();
  v7 = *a2;
  v8 = v7;
  if (v7)
    dispatch_retain(v7);
  QMIWiFiSettingsCommandDriver::QMIWiFiSettingsCommandDriver(v6, a1, &v8);
  *a3 = 0;
  a3[1] = 0;
  std::shared_ptr<QMIWiFiSettingsCommandDriver>::shared_ptr[abi:ne180100]<QMIWiFiSettingsCommandDriver,std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver*)#1},void>(a3, (uint64_t)v6);
  if (v7)
    dispatch_release(v7);
}

void sub_216970970(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v2;
  int v3;

  if (v2)
    dispatch_release(v2);
  if (v3)
    MEMORY[0x2199FEAC4](v1, 0xF1C4020D9610FLL);
  _Unwind_Resume(exception_object);
}

_QWORD *QMIWiFiSettingsCommandDriver::QMIWiFiSettingsCommandDriver(_QWORD *a1, uint64_t a2, dispatch_object_t *a3)
{
  NSObject *object;

  object = *a3;
  if (*a3)
    dispatch_retain(*a3);
  WiFiSettingsCommandDriver::WiFiSettingsCommandDriver();
  if (object)
    dispatch_release(object);
  *a1 = &off_24D5D1F50;
  a1[12] = 0;
  a1[13] = 0;
  a1[11] = &unk_24D5D1FA0;
  return a1;
}

void sub_216970A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void QMIWiFiSettingsCommandDriver::registered(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = a1[1], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = (_QWORD *)operator new();
  *v6 = a1;
  v7 = a1[3];
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (_QWORD *)operator new();
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  v12 = 0;
  v13 = 0;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::execute_wrapped<QMIWiFiSettingsCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIWiFiSettingsCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIWiFiSettingsCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v12);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v13);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void `non-virtual thunk to'QMIWiFiSettingsCommandDriver::registered(uint64_t a1)
{
  QMIWiFiSettingsCommandDriver::registered((_QWORD *)(a1 - 88));
}

void QMIWiFiSettingsCommandDriver::deregistered(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = a1[1], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = (_QWORD *)operator new();
  *v6 = a1;
  v7 = a1[3];
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (_QWORD *)operator new();
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  v12 = 0;
  v13 = 0;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::execute_wrapped<QMIWiFiSettingsCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIWiFiSettingsCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIWiFiSettingsCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v12);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v13);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void `non-virtual thunk to'QMIWiFiSettingsCommandDriver::deregistered(uint64_t a1)
{
  QMIWiFiSettingsCommandDriver::deregistered((_QWORD *)(a1 - 88));
}

void QMIWiFiSettingsCommandDriver::bootstrap(_QWORD *a1, dispatch_object_t *a2, xpc_object_t *a3, uint64_t *a4)
{
  NSObject *v7;
  xpc_object_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  xpc_object_t v18;
  unint64_t *p_shared_owners;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  v8 = *a3;
  if (v8)
    xpc_retain(v8);
  else
    v8 = xpc_null_create();
  v9 = *a4;
  v10 = a4[1];
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)a1[2];
  if (!v13 || (v14 = a1[1], (v15 = std::__shared_weak_count::lock(v13)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v16 = v15;
  v17 = (_QWORD *)operator new();
  *v17 = a1;
  v17[1] = v7;
  v17[2] = v8;
  v18 = xpc_null_create();
  v17[3] = v9;
  v17[4] = v10;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v20 = a1[3];
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  v22 = (_QWORD *)operator new();
  *v22 = v17;
  v22[1] = v14;
  v22[2] = v16;
  v24 = 0;
  v25 = 0;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::execute_wrapped<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0>(QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v24);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v25);
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  xpc_release(v18);
}

void QMIWiFiSettingsCommandDriver::stop(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (_QWORD *)operator new();
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[3];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (_QWORD *)operator new();
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  v14 = 0;
  v15 = 0;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::execute_wrapped<QMIWiFiSettingsCommandDriver::stop(dispatch::group_session)::$_0>(QMIWiFiSettingsCommandDriver::stop(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIWiFiSettingsCommandDriver::stop(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMIWiFiSettingsCommandDriver::stop(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v14);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v15);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void QMIWiFiSettingsCommandDriver::sendNetworkInfo(uint64_t a1, uint64_t a2, const std::string::value_type *a3)
{
  NSObject *v6;
  const std::string::value_type *v7;
  const std::string::value_type *v8;
  unint64_t v9;
  unsigned int v10;
  NSObject *v11;
  const std::string::value_type *v12;
  const std::string::value_type *v13;
  char v14;
  char v15;
  const void **v16;
  const void **v17;
  char *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  const void **v27;
  char *v28;
  char *v29;
  char *v30;
  const void *v31;
  uint64_t v32;
  const void **i;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  _QWORD v51[5];
  _QWORD v52[2];
  size_t *(*v53)(size_t *, char *);
  void *v54;
  std::string v55;
  int v56;
  __int16 v57;
  void *__p[2];
  __int128 v59;
  std::string v60;
  int v61;
  __int16 v62;
  _QWORD v63[6];
  uint64_t v64;
  int v65;
  uint64_t v66;
  void *v67;
  _BYTE buf[24];
  void *v69;
  _QWORD *v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (const std::string::value_type *)a2;
    if (*(char *)(a2 + 23) < 0)
      v7 = *(const std::string::value_type **)a2;
    v8 = a3;
    if (a3[23] < 0)
      v8 = *(const std::string::value_type **)a3;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v8;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending network info bssid: %s ssid: %s", buf, 0x16u);
  }
  if (a3[23] < 0)
    v9 = *((_QWORD *)a3 + 1);
  else
    v9 = *((unsigned __int8 *)a3 + 23);
  if (v9 >= 0x21)
  {
    v10 = *((unsigned __int8 *)a3 + 23);
    v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = a3;
      if ((v10 & 0x80) != 0)
        v12 = *(const std::string::value_type **)a3;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = 32;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#N Truncating SSID (%s) to %zu bytes", buf, 0x16u);
      v10 = *((unsigned __int8 *)a3 + 23);
    }
    if ((v10 & 0x80) != 0)
    {
      if (*((_QWORD *)a3 + 1) >= 0x20uLL)
      {
        v13 = *(const std::string::value_type **)a3;
        *((_QWORD *)a3 + 1) = 32;
        goto LABEL_20;
      }
    }
    else if (v10 > 0x1F)
    {
      *((_BYTE *)a3 + 23) = 32;
      v13 = a3;
LABEL_20:
      *((_BYTE *)v13 + 32) = 0;
      goto LABEL_21;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_21:
  v62 = 0;
  v61 = 0;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v60 = *(std::string *)a2;
  v14 = WiFiSettingsCommandDriver::parseBssid();
  v15 = v14;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v60.__r_.__value_.__l.__data_);
    if ((v15 & 1) == 0)
      return;
  }
  else if ((v14 & 1) == 0)
  {
    return;
  }
  *(_OWORD *)__p = 0u;
  v59 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v16 = (const void **)__p[1];
  v17 = (const void **)v59;
  if (__p[1] != (void *)v59)
  {
    while (*((_BYTE *)*v16 + 8) != 1)
    {
      if (++v16 == (const void **)v59)
        goto LABEL_35;
    }
  }
  if (v16 == (const void **)v59)
  {
LABEL_35:
    v20 = operator new();
    v21 = v20;
    *(_WORD *)(v20 + 8) = 1;
    *(_QWORD *)v20 = &off_24D5D20E0;
    v22 = v59;
    if ((unint64_t)v59 >= *((_QWORD *)&v59 + 1))
    {
      v23 = (uint64_t)(v59 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v24 = (uint64_t)(*((_QWORD *)&v59 + 1) - (unint64_t)__p[1]) >> 2;
      if (v24 <= v23 + 1)
        v24 = v23 + 1;
      if (*((_QWORD *)&v59 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v59 + 8, v25);
      else
        v26 = 0;
      v27 = (const void **)&v26[8 * v23];
      v28 = &v26[8 * v25];
      *v27 = (const void *)v21;
      v17 = v27 + 1;
      v30 = (char *)__p[1];
      v29 = (char *)v59;
      if ((void *)v59 != __p[1])
      {
        do
        {
          v31 = (const void *)*((_QWORD *)v29 - 1);
          v29 -= 8;
          *--v27 = v31;
        }
        while (v29 != v30);
        v29 = (char *)__p[1];
      }
      __p[1] = v27;
      *(_QWORD *)&v59 = v17;
      *((_QWORD *)&v59 + 1) = v28;
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_QWORD *)v59 = v20;
      v17 = (const void **)(v22 + 8);
    }
    v19 = (_BYTE *)(v21 + 9);
    *(_QWORD *)&v59 = v17;
  }
  else
  {
    if (!v18)
      __cxa_bad_cast();
    v19 = v18 + 9;
  }
  *v19 = 1;
  v32 = MEMORY[0x24BDAC760];
  v52[0] = MEMORY[0x24BDAC760];
  v52[1] = 1174405120;
  v53 = ___ZN28QMIWiFiSettingsCommandDriver15sendNetworkInfoENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6__block_invoke_2;
  v54 = &__block_descriptor_tmp_5_2;
  if (a3[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    v17 = (const void **)v59;
  }
  else
  {
    v55 = *(std::string *)a3;
  }
  v56 = v61;
  v57 = v62;
  for (i = (const void **)__p[1]; i != v17; ++i)
  {
    if (*((_BYTE *)*i + 8) == 2)
    {
      if (i != v17)
      {
        if (!v34)
          __cxa_bad_cast();
        v35 = v34 + 9;
        goto LABEL_79;
      }
      break;
    }
  }
  v36 = operator new();
  v37 = v36;
  *(_BYTE *)(v36 + 8) = 2;
  *(_OWORD *)(v36 + 9) = 0u;
  v35 = (char *)(v36 + 9);
  *(_QWORD *)v36 = &off_24D5D2130;
  *(_OWORD *)(v36 + 25) = 0u;
  *(_QWORD *)(v36 + 39) = 0;
  v38 = v59;
  if ((unint64_t)v59 >= *((_QWORD *)&v59 + 1))
  {
    v40 = (uint64_t)(v59 - (unint64_t)__p[1]) >> 3;
    if ((unint64_t)(v40 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v41 = (uint64_t)(*((_QWORD *)&v59 + 1) - (unint64_t)__p[1]) >> 2;
    if (v41 <= v40 + 1)
      v41 = v40 + 1;
    if (*((_QWORD *)&v59 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v59 + 8, v42);
    else
      v43 = 0;
    v44 = (uint64_t *)&v43[8 * v40];
    v45 = &v43[8 * v42];
    *v44 = v37;
    v39 = v44 + 1;
    v47 = (char *)__p[1];
    v46 = (char *)v59;
    if ((void *)v59 != __p[1])
    {
      do
      {
        v48 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *--v44 = v48;
      }
      while (v46 != v47);
      v46 = (char *)__p[1];
    }
    __p[1] = v44;
    *(_QWORD *)&v59 = v39;
    *((_QWORD *)&v59 + 1) = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *(_QWORD *)v59 = v36;
    v39 = (_QWORD *)(v38 + 8);
  }
  *(_QWORD *)&v59 = v39;
LABEL_79:
  v53(v52, v35);
  v49 = *(_QWORD *)(a1 + 96);
  v51[0] = v32;
  v51[1] = 0x40000000;
  v51[2] = ___ZN28QMIWiFiSettingsCommandDriver15sendNetworkInfoENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6__block_invoke_6;
  v51[3] = &__block_descriptor_tmp_8_8;
  v51[4] = a1;
  if (!*(_BYTE *)(v49 + 72) || !*(_QWORD *)(v49 + 56))
    __TUAssertTrigger();
  v63[5] = v49 + 40;
  v64 = QMIServiceMsg::create();
  v65 = 25000;
  v66 = 0;
  v67 = 0;
  v63[0] = v32;
  v63[1] = 0x40000000;
  v63[2] = ___ZN16QMIVirtualClient4sendIN3nas15WiFiNetworkInfo7RequestEU13block_pointerFvRKN3qmi12ResponseBaseEEEEvRKT_T0__block_invoke;
  v63[3] = &unk_24D5D2160;
  v63[4] = v51;
  *(_QWORD *)buf = v32;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_11;
  v69 = &unk_24D5D2188;
  v70 = v63;
  v50 = _Block_copy(buf);
  v67 = v50;
  if (v64)
  {
    qmi::Client::send();
    v50 = v67;
  }
  if (v50)
    _Block_release(v50);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_216971558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)(v35 - 168));
  if (a24 < 0)
    operator delete(__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a26);
  _Unwind_Resume(a1);
}

uint64_t ___ZN28QMIWiFiSettingsCommandDriver15sendNetworkInfoENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6__block_invoke_6(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  int v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(a2 + 4);
  v5 = *(NSObject **)(v3 + 40);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      v7 = qmi::asString();
      v8 = *(_DWORD *)(a2 + 4);
      v13 = 136315394;
      v14 = v7;
      v15 = 1024;
      v16 = v8;
      v9 = "#N Send WiFi network info failed: %s (%d)";
      v10 = v5;
      v11 = 18;
LABEL_6:
      _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v13, v11);
    }
  }
  else if (v6)
  {
    LOWORD(v13) = 0;
    v9 = "#I Send WiFi network info was successful";
    v10 = v5;
    v11 = 2;
    goto LABEL_6;
  }
  return (*(uint64_t (**)(_QWORD, BOOL))(**(_QWORD **)(v3 + 48) + 24))(*(_QWORD *)(v3 + 48), *(_DWORD *)(a2 + 4) == 0);
}

void QMIWiFiSettingsCommandDriver::~QMIWiFiSettingsCommandDriver(QMIWiFiSettingsCommandDriver *this)
{
  *(_QWORD *)this = &off_24D5D1F50;
  *((_QWORD *)this + 11) = &unk_24D5D1FA0;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  WiFiSettingsCommandDriver::~WiFiSettingsCommandDriver(this);
}

{
  *(_QWORD *)this = &off_24D5D1F50;
  *((_QWORD *)this + 11) = &unk_24D5D1FA0;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  WiFiSettingsCommandDriver::~WiFiSettingsCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void `non-virtual thunk to'QMIWiFiSettingsCommandDriver::~QMIWiFiSettingsCommandDriver(QMIWiFiSettingsCommandDriver *this)
{
  WiFiSettingsCommandDriver *v1;

  *((_QWORD *)this - 11) = &off_24D5D1F50;
  v1 = (QMIWiFiSettingsCommandDriver *)((char *)this - 88);
  *(_QWORD *)this = &unk_24D5D1FA0;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  WiFiSettingsCommandDriver::~WiFiSettingsCommandDriver(v1);
}

{
  WiFiSettingsCommandDriver *v1;

  *((_QWORD *)this - 11) = &off_24D5D1F50;
  v1 = (QMIWiFiSettingsCommandDriver *)((char *)this - 88);
  *(_QWORD *)this = &unk_24D5D1FA0;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  WiFiSettingsCommandDriver::~WiFiSettingsCommandDriver(v1);
  JUMPOUT(0x2199FEAC4);
}

uint64_t *std::shared_ptr<QMIWiFiSettingsCommandDriver>::shared_ptr[abi:ne180100]<QMIWiFiSettingsCommandDriver,std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D2068;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2169718B4(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver*)#1}::operator() const(QMIWiFiSettingsCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2169718D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIWiFiSettingsCommandDriver *,std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver *)#1},std::allocator<QMIWiFiSettingsCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIWiFiSettingsCommandDriver *,std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver *)#1},std::allocator<QMIWiFiSettingsCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver*)#1}::operator() const(QMIWiFiSettingsCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIWiFiSettingsCommandDriver *,std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver *)#1},std::allocator<QMIWiFiSettingsCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver*)#1}::operator() const(QMIWiFiSettingsCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::execute_wrapped<QMIWiFiSettingsCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIWiFiSettingsCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIWiFiSettingsCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = *(_QWORD *)a1;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(**(_QWORD **)a1 + 48) + 16))(*(_QWORD *)(**(_QWORD **)a1 + 48), 1);
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_2169719D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::execute_wrapped<QMIWiFiSettingsCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIWiFiSettingsCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIWiFiSettingsCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = *(_QWORD *)a1;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(**(_QWORD **)a1 + 48) + 16))(*(_QWORD *)(**(_QWORD **)a1 + 48), 0);
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_216971A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::execute_wrapped<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0>(QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::mutex *ServiceMap;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  xpc_object_t object;
  void *__p[2];
  char v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  __int128 v24;

  v1 = *a1;
  v17 = a1;
  v18 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  v4 = *(std::__shared_weak_count **)(v2 + 56);
  *(_OWORD *)(v2 + 48) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 64));
  ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<QMIClientPool>(ServiceMap, &v22);
  v8 = v22;
  std::string::basic_string[abi:ne180100]<0>(__p, "registration");
  v9 = *(void **)(v1 + 16);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  QMIClientPool::requestClient(v8, 3u, (uint64_t *)__p, v2 + 88, (uint64_t)&object, &v24);
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](v2 + 96, &v24);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  xpc_release(object);
  object = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  v13 = v23;
  if (v23)
  {
    v14 = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::unique_ptr<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](&v18);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v17);
}

void sub_216971C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  xpc_release(object);
  object = 0;
  if (a17 < 0)
    operator delete(__p);
  v20 = a19;
  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::unique_ptr<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    xpc_release(*(xpc_object_t *)(v2 + 16));
    *(_QWORD *)(v2 + 16) = 0;
    v6 = *(NSObject **)(v2 + 8);
    if (v6)
    {
      dispatch_group_leave(v6);
      v7 = *(NSObject **)(v2 + 8);
      if (v7)
        dispatch_release(v7);
    }
    MEMORY[0x2199FEAC4](v2, 0xA0C4074E99163);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::execute_wrapped<QMIWiFiSettingsCommandDriver::stop(dispatch::group_session)::$_0>(QMIWiFiSettingsCommandDriver::stop(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIWiFiSettingsCommandDriver::stop(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMIWiFiSettingsCommandDriver::stop(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[2];

  v4 = *a1;
  v7 = a1;
  v8 = v4;
  v5 = *(_QWORD *)(*(_QWORD *)v4 + 96);
  if (v5)
  {
    v9[0] = v5 + 88;
    v9[1] = 1;
    MEMORY[0x2199FDF3C](v5 + 88, a2, a3, a4);
    *(_BYTE *)(v5 + 74) = 0;
    std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v9);
  }
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&v8);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_216971DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkVersion>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkVersion>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkVersion>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkVersion>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D20E0;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkDescription>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkDescription>::getSize()
{
  return tlv::size<nas::tlv::WiFiNetworkDescription>();
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkDescription>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  tlv::writeV<nas::tlv::WiFiNetworkDescription>(a2, a1 + 9);
  v6 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v6;
}

__n128 qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkDescription>::clone(uint64_t a1)
{
  uint64_t v2;
  __n128 result;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D2130;
  *(_OWORD *)(v2 + 9) = *(_OWORD *)(a1 + 9);
  result = *(__n128 *)(a1 + 25);
  *(__n128 *)(v2 + 25) = result;
  *(_QWORD *)(v2 + 39) = *(_QWORD *)(a1 + 39);
  return result;
}

uint64_t ___ZN16QMIVirtualClient4sendIN3nas15WiFiNetworkInfo7RequestEU13block_pointerFvRKN3qmi12ResponseBaseEEEEvRKT_T0__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t QMIDataContextIPAggregator::QMIDataContextIPAggregator(uint64_t a1, _QWORD *a2, NSObject **a3, char *a4, _QWORD *a5)
{
  NSObject *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t i;
  uint64_t v20;
  _BYTE v22[16];
  _BYTE v23[8];

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_24D5C4118;
  *(_QWORD *)(a1 + 16) = off_24D5D9038;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v22, (const char *)*MEMORY[0x24BDC3E90], a4);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v9 = *a3;
  *(_QWORD *)(a1 + 40) = *a3;
  if (v9)
    dispatch_retain(v9);
  *(_QWORD *)(a1 + 48) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x2199FDF6C](v23);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
  *(_QWORD *)a1 = &off_24D5D21B8;
  *(_QWORD *)(a1 + 16) = &unk_24D5D2498;
  *(_QWORD *)(a1 + 64) = *a2;
  v10 = a2[1];
  *(_QWORD *)(a1 + 72) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 80) = *a5;
  v13 = a5[1];
  *(_QWORD *)(a1 + 88) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 16);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 176));
  v16 = operator new();
  *(_QWORD *)v16 = &off_24D5D11F8;
  *(_BYTE *)(v16 + 8) = 0;
  v17 = QMIDataContextActivationGuard::fIdCounter++;
  *(_DWORD *)(v16 + 12) = 0;
  *(_DWORD *)(v16 + 16) = v17;
  *(_QWORD *)(a1 + 200) = v16;
  v18 = (_QWORD *)operator new();
  *v18 = &off_24D5D2880;
  v18[1] = 0;
  v18[2] = 0;
  v18[3] = v16;
  *(_QWORD *)(a1 + 208) = v18;
  *(_BYTE *)(a1 + 216) = 0;
  for (i = 224; i != 288; i += 32)
  {
    v20 = a1 + i;
    *(_QWORD *)v20 = 0;
    *(_QWORD *)(v20 + 8) = 0;
    *(_BYTE *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 16) = 0;
  }
  return a1;
}

void sub_216972158(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v9 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v11 = *v8;
  if (*v8 == (_QWORD *)(v5 + 40))
  {
    v12 = 4;
    v11 = (_QWORD *)(v5 + 40);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v7);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v5);
  v13 = *(std::__shared_weak_count **)(v1 + 88);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v4);
  MEMORY[0x2199FDF6C](v3);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v2);
  _Unwind_Resume(a1);
}

void QMIDataContextIPAggregator::~QMIDataContextIPAggregator(QMIDataContextIPAggregator *this)
{
  uint64_t i;
  QMIDataContextIPAggregator *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  void **v6;

  *(_QWORD *)this = &off_24D5D21B8;
  *((_QWORD *)this + 2) = &unk_24D5D2498;
  for (i = 256; i != 192; i -= 32)
  {
    v6 = (void **)((char *)this + i);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v3 = (QMIDataContextIPAggregator *)*((_QWORD *)this + 20);
  if (v3 == (QMIDataContextIPAggregator *)((char *)this + 136))
  {
    v4 = 4;
    v3 = (QMIDataContextIPAggregator *)((char *)this + 136);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  MEMORY[0x2199FDF6C]((char *)this + 56);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 3);
}

{
  QMIDataContextIPAggregator::~QMIDataContextIPAggregator(this);
  JUMPOUT(0x2199FEAC4);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::~QMIDataContextIPAggregator(QMIDataContextIPAggregator *this)
{
  QMIDataContextIPAggregator::~QMIDataContextIPAggregator((QMIDataContextIPAggregator *)((char *)this - 16));
}

{
  QMIDataContextIPAggregator::~QMIDataContextIPAggregator((QMIDataContextIPAggregator *)((char *)this - 16));
  JUMPOUT(0x2199FEAC4);
}

void QMIDataContextIPAggregator::initialize(_QWORD *a1, char a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  NSObject *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  dispatch_object_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  dispatch_object_t object;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  __int128 v86;

  v8 = (std::__shared_weak_count *)a1[9];
  v84 = a1[8];
  v85 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v80, a1 + 3);
  if (v80)
    v11 = v80 + 16;
  else
    v11 = 0;
  v82 = v11;
  v83 = v81;
  v80 = 0;
  v81 = 0;
  v12 = a3[1];
  v78 = *a3;
  v79 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = a1[5];
  object = v15;
  if (v15)
    dispatch_retain(v15);
  v16 = a4[1];
  v75 = *a4;
  v76 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  QMIDataContextIP::create((uint64_t)&v86, &v84, &v82, a2, &v78, 1, &object, &v75);
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100]((uint64_t)(a1 + 12), &v86);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v76;
  if (v76)
  {
    v23 = (unint64_t *)&v76->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (object)
    dispatch_release(object);
  v25 = v79;
  if (v79)
  {
    v26 = (unint64_t *)&v79->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v83;
  if (v83)
  {
    v29 = (unint64_t *)&v83->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v81;
  if (v81)
  {
    v32 = (unint64_t *)&v81->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v85;
  if (v85)
  {
    v35 = (unint64_t *)&v85->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)a1[9];
  v73 = a1[8];
  v74 = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v80, a1 + 3);
  if (v80)
    v40 = v80 + 16;
  else
    v40 = 0;
  v71 = v40;
  v72 = v81;
  v80 = 0;
  v81 = 0;
  v41 = a3[1];
  v69 = *a3;
  v70 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    v42 = (unint64_t *)(v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = a1[5];
  v68 = v44;
  if (v44)
    dispatch_retain(v44);
  v45 = a4[1];
  v66 = *a4;
  v67 = (std::__shared_weak_count *)v45;
  if (v45)
  {
    v46 = (unint64_t *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  QMIDataContextIP::create((uint64_t)&v86, &v73, &v71, 0, &v69, 2, &v68, &v66);
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100]((uint64_t)(a1 + 14), &v86);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v67;
  if (v67)
  {
    v52 = (unint64_t *)&v67->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v68)
    dispatch_release(v68);
  v54 = v70;
  if (v70)
  {
    v55 = (unint64_t *)&v70->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v72;
  if (v72)
  {
    v58 = (unint64_t *)&v72->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v81;
  if (v81)
  {
    v61 = (unint64_t *)&v81->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v74;
  if (v74)
  {
    v64 = (unint64_t *)&v74->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
}

void sub_2169727C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  NSObject *v23;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v23)
    dispatch_release(v23);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void QMIDataContextIP::create(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4, uint64_t *a5, int a6, NSObject **a7, uint64_t *a8)
{
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v33;
  unint64_t *p_shared_weak_owners;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  dispatch_object_t object;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v16 = (std::__shared_weak_count_vtbl *)operator new();
  v17 = a2[1];
  v59 = *a2;
  v60 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = a3[1];
  v57 = *a3;
  v58 = (std::__shared_weak_count *)v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = a5[1];
  v55 = *a5;
  v56 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *a7;
  object = v26;
  if (v26)
    dispatch_retain(v26);
  v27 = a8[1];
  v52 = *a8;
  v53 = (std::__shared_weak_count *)v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  QMIDataContextIP::QMIDataContextIP(v16, &v59, &v57, a4, &v55, a6, &object, &v52);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = 0;
  v30 = (std::__shared_weak_count *)operator new();
  v30->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D2730;
  v30->__shared_weak_owners_ = 0;
  v30[1].__vftable = v16;
  *(_QWORD *)(a1 + 8) = v30;
  on_zero_shared = (std::__shared_weak_count *)v16->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1)
      goto LABEL_28;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
    do
      v35 = __ldxr(p_shared_weak_owners);
    while (__stxr(v35 + 1, p_shared_weak_owners));
    v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v16;
    v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v30;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
    v37 = (unint64_t *)&v30->__shared_weak_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v16;
    v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v30;
  }
  do
    v39 = __ldaxr(p_shared_owners);
  while (__stlxr(v39 - 1, p_shared_owners));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_28:
  v40 = v53;
  if (v53)
  {
    v41 = (unint64_t *)&v53->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (object)
    dispatch_release(object);
  v43 = v56;
  if (v56)
  {
    v44 = (unint64_t *)&v56->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v58;
  if (v58)
  {
    v47 = (unint64_t *)&v58->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v60;
  if (v60)
  {
    v50 = (unint64_t *)&v60->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  QMIDataContextIPBase::initialize(*(QMIDataContextIPBase **)a1, 0);
}

void sub_216972B50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t QMIDataContextIPAggregator::bootstrapBBCtxCmdDriver(QMIDataContextIPAggregator *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 12);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  result = *((_QWORD *)this + 14);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t QMIDataContextIPAggregator::startBBCtxCmdDriver(QMIDataContextIPAggregator *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 12);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  result = *((_QWORD *)this + 14);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t QMIDataContextIPAggregator::stopBBCtxCmdDriver(QMIDataContextIPAggregator *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 12);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  result = *((_QWORD *)this + 14);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t QMIDataContextIPAggregator::getName(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[11]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__on_zero_shared)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

void sub_216972D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIDataContextIPAggregator::getIPAddress(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_216972DA0()
{
  uint64_t v0;
  int v2;
  const char *v3;

  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v2 = 136315138;
    v3 = "called with wrong protocolFamily";
    _os_log_error_impl(&dword_216897000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT\n %s\n**********", (uint8_t *)&v2, 0xCu);
  }
  return v0 + 176;
}

uint64_t QMIDataContextIPAggregator::getOriginalIPv6Address(QMIDataContextIPAggregator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 112))(*((_QWORD *)this + 14));
}

uint64_t QMIDataContextIPAggregator::getLinkLocalIPAddress(QMIDataContextIPAggregator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 120))(*((_QWORD *)this + 14));
}

uint64_t QMIDataContextIPAggregator::getDNSAddresses(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 0:
    case 3:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v4 = 136315138;
        v5 = "called with wrong protocolFamily";
        _os_log_error_impl(&dword_216897000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT\n %s\n**********", (uint8_t *)&v4, 0xCu);
      }
      goto LABEL_4;
    case 1:
      v3 = *(_QWORD *)(a1 + 96);
      goto LABEL_7;
    case 2:
      v3 = *(_QWORD *)(a1 + 112);
LABEL_7:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 128))(v3);
      break;
    default:
LABEL_4:
      result = sGetEmptyAddrs();
      break;
  }
  return result;
}

uint64_t QMIDataContextIPAggregator::getPDPMetricInfo(uint64_t a1, int a2)
{
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  switch(a2)
  {
    case 0:
    case 3:
      v2 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v4 = 0;
        _os_log_error_impl(&dword_216897000, v2, OS_LOG_TYPE_ERROR, "called with wrong ip family", v4, 2u);
      }
      goto LABEL_4;
    case 1:
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 208))(*(_QWORD *)(a1 + 96));
      break;
    case 2:
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 208))(*(_QWORD *)(a1 + 112));
      break;
    default:
LABEL_4:
      result = sGetEmptyPDPMetricInfo();
      break;
  }
  return result;
}

uint64_t QMIDataContextIPAggregator::activateDataContextIP(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  int v68;
  NSObject *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unsigned int v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  _BYTE buf[24];
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v12 = *(std::__shared_weak_count **)(a1 + 88);
  if (v12)
  {
    v13 = std::__shared_weak_count::lock(v12);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)(a1 + 80);
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (v17)
      {
        if (v15)
          goto LABEL_20;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v14);
        if (v15)
          goto LABEL_20;
      }
    }
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "should have observer here";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDrivers/Data/Q"
                          "MI/Context/QMIDataContextIPAggregator.cpp";
    *(_WORD *)&buf[22] = 1024;
    v92 = 125;
    _os_log_error_impl(&dword_216897000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT getObserver()\n %s\n at %s:%d\n**********", buf, 0x1Cu);
  }
  v18 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v18)
    goto LABEL_19;
  v19 = std::__shared_weak_count::lock(v18);
  if (!v19)
    goto LABEL_19;
  v20 = v19;
  v21 = *(_QWORD *)(a1 + 80);
  v22 = (unint64_t *)&v19->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
    if (!v21)
      goto LABEL_19;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
    if (!v21)
LABEL_19:
      __TUAssertTrigger();
  }
LABEL_20:
  v24 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v24)
    return 0;
  v25 = std::__shared_weak_count::lock(v24);
  if (!v25)
    return 0;
  v26 = v25;
  v27 = *(_QWORD *)(a1 + 80);
  v28 = (unint64_t *)&v25->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
    if (v27)
      goto LABEL_26;
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v26);
  if (!v27)
    return 0;
LABEL_26:
  v30 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    v31 = *(_QWORD *)(a1 + 200);
    v32 = *(unsigned __int8 *)(v31 + 8);
    LODWORD(v31) = *(_DWORD *)(v31 + 12);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "activateDataContextIP";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v32;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v31;
    _os_log_impl(&dword_216897000, v30, OS_LOG_TYPE_DEFAULT, "#I %s: fActivationGuard : semaphore=%d, family=%d", buf, 0x18u);
  }
  v87 = 0;
  v88 = 0;
  v34 = *(_QWORD *)(a1 + 200);
  v33 = *(std::__shared_weak_count **)(a1 + 208);
  v85 = v34;
  v86 = v33;
  if (v33)
  {
    v35 = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  if (a4)
    v37 = a4;
  else
    v37 = 3;
  v87 = 0;
  v88 = 0;
  v38 = *(_DWORD *)(v34 + 12);
  v39 = v38 == 3 || v37 == v38;
  if (!v39 && *(unsigned __int8 *)(v34 + 8) <= 1u)
  {
    v40 = operator new();
    *(_QWORD *)v40 = &off_24D5D11B8;
    *(_OWORD *)(v40 + 8) = 0u;
    *(_OWORD *)(v40 + 24) = 0u;
    v41 = (std::__shared_weak_count *)operator new();
    v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D2790;
    v41->__shared_owners_ = 0;
    v41->__shared_weak_owners_ = 0;
    v41[1].__vftable = (std::__shared_weak_count_vtbl *)v40;
    v87 = v40;
    v88 = v41;
    if ((v37 & 1) != 0 && (*(_BYTE *)(v34 + 12) & 1) == 0)
    {
      v42 = operator new();
      *(_QWORD *)buf = v34;
      *(_QWORD *)&buf[8] = v33;
      if (v33)
      {
        v43 = (unint64_t *)&v33->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        *(_QWORD *)v42 = &off_24D5D11D8;
        *(_QWORD *)(v42 + 8) = v34;
        *(_QWORD *)(v42 + 16) = v33;
        do
          v45 = __ldxr(v43);
        while (__stxr(v45 + 1, v43));
      }
      else
      {
        *(_QWORD *)v42 = &off_24D5D11D8;
        *(_QWORD *)(v42 + 8) = v34;
        *(_QWORD *)(v42 + 16) = 0;
      }
      *(_DWORD *)(v42 + 24) = 1;
      ++*(_BYTE *)(v34 + 8);
      std::shared_ptr<QMIDataContextIPActivationLock>::reset[abi:ne180100]<QMIDataContextIPActivationLock,void>((_QWORD *)(v40 + 8), v42);
      if (v33)
      {
        v48 = (unint64_t *)&v33->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v34 = v85;
      *(_DWORD *)(v85 + 12) |= 1u;
    }
    if ((v37 & 2) != 0 && (*(_BYTE *)(v34 + 12) & 2) == 0)
    {
      v50 = operator new();
      v51 = (_QWORD *)(v87 + 24);
      v52 = v86;
      v89 = v34;
      v90 = v86;
      if (v86)
      {
        v53 = &v86->__shared_owners_;
        do
          v54 = __ldxr((unint64_t *)v53);
        while (__stxr(v54 + 1, (unint64_t *)v53));
        *(_QWORD *)v50 = &off_24D5D11D8;
        *(_QWORD *)(v50 + 8) = v34;
        *(_QWORD *)(v50 + 16) = v52;
        do
          v55 = __ldxr((unint64_t *)v53);
        while (__stxr(v55 + 1, (unint64_t *)v53));
      }
      else
      {
        *(_QWORD *)v50 = &off_24D5D11D8;
        *(_QWORD *)(v50 + 8) = v34;
        *(_QWORD *)(v50 + 16) = 0;
      }
      *(_DWORD *)(v50 + 24) = 2;
      ++*(_BYTE *)(v34 + 8);
      std::shared_ptr<QMIDataContextIPActivationLock>::reset[abi:ne180100]<QMIDataContextIPActivationLock,void>(v51, v50);
      if (v52)
      {
        v56 = (unint64_t *)&v52->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      *(_DWORD *)(v85 + 12) |= 2u;
    }
  }
  if (v86)
  {
    v58 = &v86->__shared_owners_;
    do
      v59 = __ldaxr((unint64_t *)v58);
    while (__stlxr(v59 - 1, (unint64_t *)v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (!v87)
  {
    v69 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "activateDataContextIP";
      _os_log_impl(&dword_216897000, v69, OS_LOG_TYPE_DEFAULT, "#I %s: Cannot activate. Another activation in process", buf, 0xCu);
    }
    v46 = 1;
    goto LABEL_110;
  }
  *(_DWORD *)(a1 + 168) = 0;
  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"initial cleaning");
  if ((a2 & 1) != 0)
  {
    v60 = *(_QWORD *)(a1 + 96);
    v83 = v87;
    v84 = v88;
    if (v88)
    {
      v61 = (unint64_t *)&v88->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v60 + 40))(v60, a3, a6, a5, &v83, 0);
    v64 = v84;
    if (v84)
    {
      v65 = (unint64_t *)&v84->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v63)
      goto LABEL_90;
    *(_DWORD *)(a1 + 168) |= 1u;
  }
  v63 = 1;
LABEL_90:
  if ((a2 & 2) != 0)
  {
    v70 = *(_QWORD *)(a1 + 112);
    v81 = v87;
    v82 = v88;
    if (v88)
    {
      v71 = (unint64_t *)&v88->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v70 + 40))(v70, a3, a6, a5, &v81, 0);
    v74 = v82;
    if (v82)
    {
      v75 = (unint64_t *)&v82->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    if (v73)
    {
      *(_DWORD *)(a1 + 168) |= 2u;
      v68 = 1;
    }
    else
    {
      v68 = 0;
    }
    v67 = 1;
  }
  else
  {
    v67 = a2 & 1;
    v68 = 1;
  }
  v77 = v68 & v67;
  if (v63)
    v46 = v77;
  else
    v46 = 0;
LABEL_110:
  v78 = v88;
  if (v88)
  {
    v79 = (unint64_t *)&v88->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  return v46;
}

void sub_21697374C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMIDataContextIPAggregator::clearPending(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return;
  v6 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 136315906;
    v14 = a3;
    v15 = 2080;
    v16 = asString();
    v17 = 2080;
    v18 = asString();
    v19 = 2080;
    v20 = asString();
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I qmiOnline(clear pending 1 <%s>): %s for pending %s, activation %s", (uint8_t *)&v13, 0x2Au);
  }
  if (a2 == 3 || (v7 = *(_DWORD *)(a1 + 128), v7 == a2))
  {
    v8 = "clear 1";
LABEL_7:
    QMIDataContextIPAggregator::clearPending(a1, v8);
    return;
  }
  if (a2 == 1)
    v9 = 2;
  else
    v9 = 1;
  v10 = *(_DWORD *)(a1 + 168);
  v11 = v9;
  if (v10 == 3)
    goto LABEL_15;
  if (v10 == a2)
  {
    v11 = 0;
LABEL_15:
    *(_DWORD *)(a1 + 168) = v11;
  }
  if (v7 == 3 || v7 == (_DWORD)v9)
  {
    v12 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I qmiOnline(pending1)", (uint8_t *)&v13, 2u);
    }
    QMIDataContextIPAggregator::activateProcedure(a1, v9, a1 + 136);
    v8 = "clear 2";
    goto LABEL_7;
  }
}

uint64_t QMIDataContextIPAggregator::getDataContextState(uint64_t a1, int a2)
{
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  switch(a2)
  {
    case 0:
    case 3:
      v3 = (_QWORD *)(a1 + 96);
      v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 96))(*(_QWORD *)(a1 + 96));
      v6 = *(_QWORD *)(a1 + 112);
      v5 = (_QWORD *)(a1 + 112);
      if (v4 <= (*(int (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6))
        v7 = v5;
      else
        v7 = v3;
      goto LABEL_8;
    case 1:
      v7 = (_QWORD *)(a1 + 96);
      goto LABEL_8;
    case 2:
      v7 = (_QWORD *)(a1 + 112);
LABEL_8:
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 96))(*v7);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL QMIDataContextIPAggregator::isActivating(QMIDataContextIPAggregator *this)
{
  return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 12) + 96))(*((_QWORD *)this + 12)) == 4
      || (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 14) + 96))(*((_QWORD *)this + 14)) == 4;
}

void QMIDataContextIPAggregator::cleanupActivationFull(uint64_t a1, int a2)
{
  char v2;
  const CSIPacketAddress *v4;
  const CSIPacketAddress *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *p_p;
  void *__p;
  char v11;
  void *v12;
  char v13;
  _QWORD v14[3];
  _QWORD v15[3];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v2 = a2;
  v24 = *MEMORY[0x24BDAC8D0];
  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"cleanup");
  memset(v15, 0, sizeof(v15));
  v4 = (const CSIPacketAddress *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 104))(*(_QWORD *)(a1 + 96));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v15, v4);
  memset(v14, 0, sizeof(v14));
  v5 = (const CSIPacketAddress *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 104))(*(_QWORD *)(a1 + 112));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v14, v5);
  v6 = *(NSObject **)(a1 + 56);
  if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    goto LABEL_10;
  v7 = asString();
  CSIPacketAddress::operator std::string();
  CSIPacketAddress::operator std::string();
  v8 = &v12;
  if (v13 < 0)
    v8 = v12;
  if (v11 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  *(_DWORD *)buf = 136315906;
  v17 = "cleanupActivationFull";
  v18 = 2080;
  v19 = v7;
  v20 = 2080;
  v21 = v8;
  v22 = 2080;
  v23 = p_p;
  _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: for %s: v4.ip=%s, v6.ip=%s", buf, 0x2Au);
  if (v11 < 0)
    operator delete(__p);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  operator delete(v12);
  if ((v2 & 1) != 0)
  {
LABEL_11:
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 256));
    *(_BYTE *)(a1 + 280) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 184))(*(_QWORD *)(a1 + 96));
  }
LABEL_12:
  if ((v2 & 2) != 0)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 224));
    *(_BYTE *)(a1 + 248) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 184))(*(_QWORD *)(a1 + 112));
  }
}

void sub_216973C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void QMIDataContextIPAggregator::activateFailureHandlingCompleteIP(uint64_t a1, int a2)
{
  char v2;

  v2 = a2;
  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"activation failure 1");
  if ((v2 & 1) != 0)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 256));
    *(_BYTE *)(a1 + 280) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 88))(*(_QWORD *)(a1 + 96));
  }
  if ((v2 & 2) != 0)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 224));
    *(_BYTE *)(a1 + 248) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 88))(*(_QWORD *)(a1 + 112));
  }
}

uint64_t QMIDataContextIPAggregator::shouldReportActivation(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "shouldReportActivation";
    v19 = 2080;
    v20 = asString();
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: for %s", buf, 0x16u);
  }
  v5 = a1 + 112;
  v6 = 96;
  if (a2 == 1)
    v6 = 112;
  v7 = *(_QWORD *)(a1 + v6);
  if (a2 != 1)
    v5 = a1 + 96;
  v8 = *(std::__shared_weak_count **)(v5 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 216))(v7);
  if ((v11 & 1) == 0)
  {
    v12 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = asString();
      *(_DWORD *)buf = 136315394;
      v18 = "shouldReportActivation";
      v19 = 2080;
      v20 = v13;
      _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: %s is still in activating, don't report.", buf, 0x16u);
    }
  }
  if (v8)
  {
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v11;
}

void sub_216973E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t QMIDataContextIPAggregator::isOnlyIPFamily(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "isOnlyIPFamily";
    v19 = 2080;
    v20 = asString();
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: for %s", buf, 0x16u);
  }
  v5 = a1 + 112;
  v6 = 96;
  if (a2 == 1)
    v6 = 112;
  else
    v5 = a1 + 96;
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(std::__shared_weak_count **)(v5 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 224))(v7);
  if (v11)
  {
    v12 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 232))(v7);
      v13 = asString();
      *(_DWORD *)buf = 136315394;
      v18 = "isOnlyIPFamily";
      v19 = 2080;
      v20 = v13;
      _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: %s is active", buf, 0x16u);
    }
  }
  if (v8)
  {
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v11 ^ 1u;
}

void sub_216974070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::isOnlyIPFamily(uint64_t a1, int a2)
{
  return QMIDataContextIPAggregator::isOnlyIPFamily(a1 - 16, a2);
}

uint64_t QMIDataContextIPAggregator::deactivateDataContextIP(QMIDataContextIPAggregator *this, uint64_t a2, uint64_t a3)
{
  int v6;

  QMIDataContextIPAggregator::clearPending((uint64_t)this, "deactivate");
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 48))(*((_QWORD *)this + 12), a2, a3);
  return v6 | (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 14) + 48))(*((_QWORD *)this + 14), a2, a3);
}

uint64_t QMIDataContextIPAggregator::clearPending(uint64_t this, const char *a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v3 = this;
  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(this + 128) || *(_DWORD *)(this + 168))
  {
    v4 = *(NSObject **)(this + 56);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 136315650;
      v7 = a2;
      v8 = 2080;
      v9 = asString();
      v10 = 2080;
      v11 = asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I qmiOnline(clear pending 2 <%s>): %s / %s", (uint8_t *)&v6, 0x20u);
    }
    *(_DWORD *)(v3 + 168) = 0;
    *(_DWORD *)(v3 + 128) = 0;
    this = *(_QWORD *)(v3 + 160);
    *(_QWORD *)(v3 + 160) = 0;
    if (this == v3 + 136)
    {
      v5 = 4;
      this = v3 + 136;
    }
    else
    {
      if (!this)
        return this;
      v5 = 5;
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)this + 8 * v5))();
  }
  return this;
}

uint64_t QMIDataContextIPAggregator::transitionalStateMaskIP(QMIDataContextIPAggregator *this)
{
  int v2;
  int v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  uint8_t v8[16];
  uint8_t buf[16];

  v2 = *((_DWORD *)this + 32);
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_7;
  }
  v4 = *((_QWORD *)this + 7);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I we are processing IPv4 now, and we are still waiting for IPv6 processing to complete", buf, 2u);
    v2 = *((_DWORD *)this + 32);
  }
  v3 = 1;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    v5 = *((_QWORD *)this + 7);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I we are processing IPv6 now, and we are still waiting for IPv4 processing to complete", v8, 2u);
    }
    v3 |= 8u;
  }
LABEL_10:
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 56))(*((_QWORD *)this + 12)) | v3;
  return v6 | (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 14) + 56))(*((_QWORD *)this + 14));
}

uint64_t QMIDataContextIPAggregator::suspendDataContextIP(QMIDataContextIPAggregator *this)
{
  NSObject *v2;
  unsigned int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 7);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v9) = 136315138;
    *(_QWORD *)((char *)&v9 + 4) = "suspendDataContextIP";
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v9, 0xCu);
  }
  QMIDataContextIPAggregator::clearPending((uint64_t)this, "suspend");
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 64))(*((_QWORD *)this + 12));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 64))(*((_QWORD *)this + 14));
  v5 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)this + 11));
  *(_QWORD *)&v9 = *((_QWORD *)this + 10);
  *((_QWORD *)&v9 + 1) = v5;
  (*(void (**)(_QWORD))(*(_QWORD *)v9 + 72))(v9);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v4 | v3;
}

void sub_21697443C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t QMIDataContextIPAggregator::resumeDataContextIP(QMIDataContextIPAggregator *this)
{
  NSObject *v2;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 7);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315138;
    v5 = "resumeDataContextIP";
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v4, 0xCu);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 72))(*((_QWORD *)this + 12));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 72))(*((_QWORD *)this + 14));
}

void QMIDataContextIPAggregator::resetDataContextIP(QMIDataContextIPAggregator *this)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 7);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136315138;
    v6 = "resetDataContextIP";
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v5, 0xCu);
  }
  QMIDataContextIPAggregator::clearPending((uint64_t)this, "reset");
  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 80))(*((_QWORD *)this + 12));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
  v3 = (uint64_t *)((char *)this + 224);
  v4 = (uint64_t *)((char *)this + 288);
  do
  {
    std::vector<std::string>::__clear[abi:ne180100](v3);
    *((_BYTE *)v3 + 24) = 0;
    v3 += 4;
  }
  while (v3 != v4);
}

const void **QMIDataContextIPAggregator::setPacketNotificationFilter(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v6;
  uint64_t v7;
  const void *v9;
  const void *v10;

  v6 = *(_QWORD *)(a1 + 96);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v10, a3);
  (*(void (**)(uint64_t, uint64_t, const void **))(*(_QWORD *)v6 + 136))(v6, a2, &v10);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v10);
  v7 = *(_QWORD *)(a1 + 112);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v9, a3);
  (*(void (**)(uint64_t, uint64_t, const void **))(*(_QWORD *)v7 + 136))(v7, a2, &v9);
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v9);
}

void sub_21697469C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&a9);
  _Unwind_Resume(a1);
}

const void **QMIDataContextIPAggregator::dropIPPackets(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const void *v9;
  const void *v10;

  v6 = *(_QWORD *)(a1 + 96);
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(&v10, a2);
  (*(void (**)(uint64_t, const void **, uint64_t))(*(_QWORD *)v6 + 144))(v6, &v10, a3);
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&v10);
  v7 = *(_QWORD *)(a1 + 112);
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(&v9, a2);
  (*(void (**)(uint64_t, const void **, uint64_t))(*(_QWORD *)v7 + 144))(v7, &v9, a3);
  return ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&v9);
}

void sub_21697474C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t QMIDataContextIPAggregator::dropIMSPackets(QMIDataContextIPAggregator *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 152))(*((_QWORD *)this + 12));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 152))(*((_QWORD *)this + 14));
}

uint64_t QMIDataContextIPAggregator::setQuality(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  v3 = 96;
  if (a3 == 2)
    v3 = 112;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + v3) + 160))(*(_QWORD *)(a1 + v3));
}

uint64_t QMIDataContextIPAggregator::shutDownContextIP(QMIDataContextIPAggregator *this)
{
  NSObject *v2;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 7);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315138;
    v5 = "shutDownContextIP";
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v4, 0xCu);
  }
  QMIDataContextIPAggregator::clearPending((uint64_t)this, "shutdown");
  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 192))(*((_QWORD *)this + 12));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 192))(*((_QWORD *)this + 14));
}

uint64_t QMIDataContextIPAggregator::ipv6ServiceUp(QMIDataContextIPAggregator *this, const CSIPacketAddress *a2)
{
  NSObject *v4;
  void *p_p;
  void *__p;
  char v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 7);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CSIPacketAddress::operator std::string();
    if (v8 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    v10 = "ipv6ServiceUp";
    v11 = 2080;
    v12 = p_p;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I %s:  %s ", buf, 0x16u);
    if (v8 < 0)
      operator delete(__p);
  }
  return (*(uint64_t (**)(_QWORD, const CSIPacketAddress *))(**((_QWORD **)this + 14) + 168))(*((_QWORD *)this + 14), a2);
}

uint64_t QMIDataContextIPAggregator::ipv4ServiceUp(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 176))(*(_QWORD *)(a1 + 96));
}

uint64_t QMIDataContextIPAggregator::getPdpId(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[11]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[1].__on_zero_shared)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

void sub_216974A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::getPdpId(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::getPdpId(this - 2);
}

uint64_t QMIDataContextIPAggregator::isDadRequired(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v15 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(uint64_t *__return_ptr, std::__shared_weak_count *))this[10]->__on_zero_shared_weak)(&v17, this[10]);
  v3 = v17;
  v2 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (!v15)
    goto LABEL_10;
  v6 = (unint64_t *)&v15->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
  {
LABEL_10:
    if (v3)
      goto LABEL_11;
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!v3)
    return 0;
LABEL_11:
  v16 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(uint64_t *__return_ptr, std::__shared_weak_count *))this[10]->__on_zero_shared_weak)(&v17, this[10]);
  v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 112))(v17, 0);
  v9 = v18;
  if (v18)
  {
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v8;
}

void sub_216974BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::isDadRequired(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::isDadRequired(this - 2);
}

void QMIDataContextIPAggregator::handleDataContextIPActivated(uint64_t a1, int a2, char a3)
{
  NSObject *v6;
  int shouldReportActivation;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE v21[22];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v21 = 136315394;
    *(_QWORD *)&v21[4] = "handleDataContextIPActivated";
    *(_WORD *)&v21[12] = 2080;
    *(_QWORD *)&v21[14] = asString();
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: for %s", v21, 0x16u);
  }
  *(_BYTE *)(a1 + 216) = 0;
  if ((a3 & 1) != 0)
    shouldReportActivation = 1;
  else
    shouldReportActivation = QMIDataContextIPAggregator::shouldReportActivation(a1, a2);
  v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  *(_QWORD *)v21 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v21[8] = v8;
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v21 + 40))(*(_QWORD *)v21, 0);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v9 == 0x10000)
    goto LABEL_14;
  v12 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  *(_QWORD *)v21 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v21[8] = v12;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v21 + 48))(*(_QWORD *)v21, 1);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_14:
    if (!shouldReportActivation)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!shouldReportActivation)
      return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 480))(a1);
  v15 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  *(_QWORD *)v21 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v21[8] = v15;
  (*(void (**)(_QWORD))(**(_QWORD **)v21 + 64))(*(_QWORD *)v21);
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v18 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  *(_QWORD *)v21 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v21[8] = v18;
  (*(void (**)(_QWORD))(**(_QWORD **)v21 + 344))(*(_QWORD *)v21);
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_216974E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPActivated(uint64_t a1, int a2, char a3)
{
  QMIDataContextIPAggregator::handleDataContextIPActivated(a1 - 16, a2, a3);
}

uint64_t QMIDataContextIPAggregator::isPendingChannelInitialization(QMIDataContextIPAggregator *this)
{
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 240))(*((_QWORD *)this + 12)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 240))(*((_QWORD *)this + 14));
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::isPendingChannelInitialization(QMIDataContextIPAggregator *this)
{
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 240))(*((_QWORD *)this + 10)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 240))(*((_QWORD *)this + 12));
}

void QMIDataContextIPAggregator::handleDataContextIPActivateFailure(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7)
{
  uint64_t v10;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  const char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _BYTE buf[22];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  LODWORD(v10) = a3;
  v44 = *MEMORY[0x24BDAC8D0];
  if ((a2 - 1) >= 2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "called with wrong ipFamily";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDrivers/Data"
                            "/QMI/Context/QMIDataContextIPAggregator.cpp";
      v38 = 1024;
      LODWORD(v39) = 404;
      _os_log_error_impl(&dword_216897000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT kDataProtocolFamilyIPv4 == ipFamily || kDataProtocolFamilyIPv6 == ipFamily\n %s\n at %s:%d\n**********", buf, 0x1Cu);
    }
    __TUAssertTrigger();
  }
  v13 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = asString();
    v15 = CSIErrorString();
    if (v10 <= 1)
      v10 = 1;
    else
      v10 = v10;
    v16 = CSIErrorString();
    v17 = asStringBool();
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "handleDataContextIPActivateFailure";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v14;
    v38 = 2080;
    v39 = v15;
    v40 = 2080;
    v41 = v16;
    v42 = 2080;
    v43 = v17;
    _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: for %s with %s, converted to %s (retry %s)", buf, 0x34u);
  }
  else if (v10 <= 1)
  {
    v10 = 1;
  }
  else
  {
    v10 = v10;
  }
  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"activation failure 2");
  if (a7)
    *(_BYTE *)(a1 + 216) = 1;
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 96))(*(_QWORD *)(a1 + 96));
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 96))(*(_QWORD *)(a1 + 112));
  v20 = 112;
  if (v18 > v19)
    v20 = 96;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + v20) + 96))(*(_QWORD *)(a1 + v20)) == 1
    || ((v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 96))(*(_QWORD *)(a1 + 96)),
         v21 <= (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 96))(*(_QWORD *)(a1 + 112)))
      ? (v22 = (_QWORD *)(a1 + 112))
      : (v22 = (_QWORD *)(a1 + 96)),
        (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v22 + 96))(*v22) == 2))
  {
    v23 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "handleDataContextIPActivateFailure";
      _os_log_impl(&dword_216897000, v23, OS_LOG_TYPE_DEFAULT, "#I %s: Reporting error since we are done with this context", buf, 0xCu);
    }
    v24 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
    *(_QWORD *)buf = *(_QWORD *)(a1 + 80);
    *(_QWORD *)&buf[8] = v24;
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)buf + 80))(*(_QWORD *)buf, a2, v10, a4, a5, a6, *(unsigned __int8 *)(a1 + 216));
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    *(_BYTE *)(a1 + 216) = 0;
    goto LABEL_29;
  }
  if (QMIDataContextIPAggregator::shouldReportActivation(a1, a2))
  {
    if ((_DWORD)a2 == 1)
      v27 = 2;
    else
      v27 = 1;
    if (QMIDataContextIPAggregator::getDataContextState(a1, v27) - 7 > 0xFFFFFFFD)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 344))(a1, v27, 1);
      if (QMIDataContextIPAggregator::getDataContextState(a1, a2) == 2)
      {
        v28 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
        *(_QWORD *)buf = *(_QWORD *)(a1 + 80);
        *(_QWORD *)&buf[8] = v28;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)buf + 208))(*(_QWORD *)buf, a2);
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    else
    {
      QMIDataContextIPAggregator::getDataContextState(a1, a2);
    }
    if ((_DWORD)a2 == 2)
    {
      v31 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "handleDataContextIPActivateFailure";
        v32 = "#I %s: Ignoring v6 error";
        goto LABEL_47;
      }
    }
    else if ((_DWORD)a2 == 1)
    {
      v31 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "handleDataContextIPActivateFailure";
        v32 = "#I %s: Ignoring v4 error";
LABEL_47:
        _os_log_impl(&dword_216897000, v31, OS_LOG_TYPE_DEFAULT, v32, buf, 0xCu);
      }
    }
  }
  v33 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  *(_QWORD *)buf = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&buf[8] = v33;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)buf + 88))(*(_QWORD *)buf, a2);
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_29:
  QMIDataContextIPAggregator::activateFailureHandlingCompleteIP(a1, a2);
  QMIDataContextIPAggregator::cleanupActivationFull(a1, a2);
}

void sub_216975420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPActivateFailure(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7)
{
  QMIDataContextIPAggregator::handleDataContextIPActivateFailure(a1 - 16, a2, a3, a4, a5, a6, a7);
}

void QMIDataContextIPAggregator::handleDataContextIPDeactivated(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"deactivated");
  v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 96))(*(_QWORD *)(a1 + 80), a2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_2169754EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPDeactivated(uint64_t a1, uint64_t a2)
{
  QMIDataContextIPAggregator::handleDataContextIPDeactivated(a1 - 16, a2);
}

void QMIDataContextIPAggregator::handleDataContextIpDeactivatedContextDisappeared(uint64_t a1, int a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"disappeared");
  v3 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 104))(*(_QWORD *)(a1 + 80));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_216975594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIpDeactivatedContextDisappeared(uint64_t a1, int a2)
{
  QMIDataContextIPAggregator::handleDataContextIpDeactivatedContextDisappeared(a1 - 16, a2);
}

void QMIDataContextIPAggregator::updateBbThrottlingTimer(std::__shared_weak_count **this, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *, uint64_t))this[10]->__vftable[11].__on_zero_shared)(this[10], a2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_216975644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::updateBbThrottlingTimer(std::__shared_weak_count **this, uint64_t a2)
{
  QMIDataContextIPAggregator::updateBbThrottlingTimer(this - 2, a2);
}

void QMIDataContextIPAggregator::handleDataContextIpDeactivatedNetworkDisconnect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"disconnect");
  v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 112))(*(_QWORD *)(a1 + 80), a2, a3, a4);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_21697571C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIpDeactivatedNetworkDisconnect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  QMIDataContextIPAggregator::handleDataContextIpDeactivatedNetworkDisconnect(a1 - 16, a2, a3, a4);
}

void QMIDataContextIPAggregator::handleDataContextIPFailedCleaningDone(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *))this[10]->__vftable[3].~__shared_weak_count)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_2169757B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPFailedCleaningDone(std::__shared_weak_count **this)
{
  QMIDataContextIPAggregator::handleDataContextIPFailedCleaningDone(this - 2);
}

void QMIDataContextIPAggregator::sendAnbrActivationState(std::__shared_weak_count **this, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *, uint64_t))this[10]->__vftable[3].~__shared_weak_count_0)(this[10], a2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_216975868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::sendAnbrActivationState(std::__shared_weak_count **this, uint64_t a2)
{
  QMIDataContextIPAggregator::sendAnbrActivationState(this - 2, a2);
}

void QMIDataContextIPAggregator::sendAnbrBitrateRecommendation(std::__shared_weak_count **this, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v6 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))this[10]->__vftable[3].__on_zero_shared)(this[10], a2, a3);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_216975920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::sendAnbrBitrateRecommendation(std::__shared_weak_count **this, uint64_t a2, uint64_t a3)
{
  QMIDataContextIPAggregator::sendAnbrBitrateRecommendation(this - 2, a2, a3);
}

void QMIDataContextIPAggregator::handleDataContextIPAborted(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *))this[10]->__vftable[3].__get_deleter)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_2169759BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPAborted(std::__shared_weak_count **this)
{
  QMIDataContextIPAggregator::handleDataContextIPAborted(this - 2);
}

void QMIDataContextIPAggregator::handleDataContextIPIdle(QMIDataContextIPAggregator *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *((_BYTE *)this + 216) = 0;
  v2 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)this + 11));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 10) + 152))(*((_QWORD *)this + 10));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_216975A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPIdle(QMIDataContextIPAggregator *this)
{
  QMIDataContextIPAggregator::handleDataContextIPIdle((QMIDataContextIPAggregator *)((char *)this - 16));
}

uint64_t QMIDataContextIPAggregator::handleDataContextIPResume(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v6 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 160))(*(_QWORD *)(a1 + 80), a2, a3);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7;
}

void sub_216975B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPResume(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return QMIDataContextIPAggregator::handleDataContextIPResume(a1 - 16, a2, a3);
}

void QMIDataContextIPAggregator::handleDataContextIPResumed(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *))this[10]->__vftable[4].~__shared_weak_count_0)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_216975BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPResumed(std::__shared_weak_count **this)
{
  QMIDataContextIPAggregator::handleDataContextIPResumed(this - 2);
}

void QMIDataContextIPAggregator::handleDataContextIPDidGetPcoInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v6 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 176))(*(_QWORD *)(a1 + 80), a2, a3);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_216975C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPDidGetPcoInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  QMIDataContextIPAggregator::handleDataContextIPDidGetPcoInfo(a1 - 16, a2, a3);
}

void QMIDataContextIPAggregator::handleDataContextIPDidGetMTU(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v6 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 184))(*(_QWORD *)(a1 + 80), a2, a3);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_216975D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPDidGetMTU(uint64_t a1, uint64_t a2, uint64_t a3)
{
  QMIDataContextIPAggregator::handleDataContextIPDidGetMTU(a1 - 16, a2, a3);
}

void QMIDataContextIPAggregator::activateProcedure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  int v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;

  v6 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 200))(*(_QWORD *)(a1 + 80), a2, 0, 1);
  v8 = v7;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (!v7)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v8)
      return;
  }
  v11 = *(_QWORD *)(a3 + 24);
  if (!v11)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
}

void sub_216975DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  NSObject *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE buf[12];
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = asString();
    v36 = 2080;
    v37 = asString();
    v38 = 2080;
    v39 = asString();
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: ipFamily = %s, fActivationIpFamily = %s, pendingFamily = %s", buf, 0x20u);
  }
  v7 = *(_DWORD *)(a1 + 168);
  if ((v7 - 1) >= 2)
  {
    if (v7)
    {
      if (v7 != 3)
        goto LABEL_31;
      v8 = *(_DWORD *)(a1 + 128);
      if (!v8)
      {
        v17 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: pend", buf, 2u);
        }
        std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v33, a3);
        *(_DWORD *)(a1 + 128) = a2;
        std::function<void ()(void)>::operator=((_QWORD *)(a1 + 136), (uint64_t)v33);
        v18 = v34;
        if (v34 == v33)
        {
          v19 = 4;
          v18 = v33;
        }
        else
        {
          if (!v34)
            return;
          v19 = 5;
        }
        (*(void (**)(void))(*v18 + 8 * v19))();
        return;
      }
      if ((v8 | a2) == 3)
      {
        if ((_DWORD)a2 == 1)
        {
          v9 = *(NSObject **)(a1 + 56);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: go(2.1)", buf, 2u);
          }
          QMIDataContextIPAggregator::activateProcedure(a1, 1, a3);
          v10 = *(_DWORD *)(a1 + 128);
          v11 = *(NSObject **)(a1 + 56);
          v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          if ((v10 & 2) != 0)
          {
            if (v12)
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: go(2.2)", buf, 2u);
            }
            QMIDataContextIPAggregator::activateProcedure(a1, 2, a1 + 136);
          }
          else if (v12)
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: go(2.3)", buf, 2u);
          }
        }
        else
        {
          v30 = *(NSObject **)(a1 + 56);
          if ((v8 & 1) != 0)
          {
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_216897000, v30, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: go(3.1)", buf, 2u);
            }
            QMIDataContextIPAggregator::activateProcedure(a1, 1, a1 + 136);
          }
          else if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_216897000, v30, OS_LOG_TYPE_ERROR, "qmiOnline: go(3.2): activation of IPv4 was already initiated ?! Incorrect pending family", buf, 2u);
          }
          v31 = *(NSObject **)(a1 + 56);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_216897000, v31, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: go(3.3)", buf, 2u);
          }
          QMIDataContextIPAggregator::activateProcedure(a1, 2, a3);
        }
        QMIDataContextIPAggregator::clearPending(a1, "online");
        return;
      }
      v14 = *(NSObject **)(a1 + 56);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        goto LABEL_31;
      *(_WORD *)buf = 0;
      v15 = "qmiOnline: Wrong ipFamily";
    }
    else
    {
      v14 = *(NSObject **)(a1 + 56);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        goto LABEL_31;
      *(_WORD *)buf = 0;
      v15 = "qmiOnline: we are not expecting any activation ?";
    }
    v16 = v14;
    goto LABEL_30;
  }
  v13 = *(NSObject **)(a1 + 56);
  if (v7 != (_DWORD)a2)
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_31;
    *(_WORD *)buf = 0;
    v15 = "qmiOnline: Unexpected ipFamily";
    v16 = v13;
LABEL_30:
    _os_log_error_impl(&dword_216897000, v16, OS_LOG_TYPE_ERROR, v15, buf, 2u);
LABEL_31:
    v20 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v20 || (v21 = *(_QWORD *)(a1 + 24), (v22 = std::__shared_weak_count::lock(v20)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v23 = v22;
    v24 = operator new();
    *(_QWORD *)v24 = a1;
    *(_DWORD *)(v24 + 8) = a2;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    v26 = *(NSObject **)(a1 + 40);
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    v28 = (_QWORD *)operator new();
    *v28 = v24;
    v28[1] = v21;
    v28[2] = v23;
    *(_QWORD *)buf = 0;
    v32 = 0;
    dispatch_async_f(v26, v28, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIDataContextIPAggregator>::execute_wrapped<QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(DataProtocolFamily,std::function<void ()(void)> const&)::$_0>(QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(DataProtocolFamily,std::function<void ()(void)> const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(DataProtocolFamily,std::function<void ()(void)> const&)::$_0,std::default_delete<QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(DataProtocolFamily,std::function<void ()(void)> const&)::$_0>>)::{lambda(void *)#1}::__invoke);
    std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v32);
    std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: go(1)", buf, 2u);
  }
  QMIDataContextIPAggregator::activateProcedure(a1, a2, a3);
  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"online 1");
}

void sub_216976344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(a1 - 16, a2, a3);
}

uint64_t QMIDataContextIPAggregator::ipFamilyMustBeConfigured(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 192))(*(_QWORD *)(a1 + 80), a2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

void sub_216976430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::ipFamilyMustBeConfigured(uint64_t a1, uint64_t a2)
{
  return QMIDataContextIPAggregator::ipFamilyMustBeConfigured(a1 - 16, a2);
}

void QMIDataContextIPAggregator::reportProxyUpdate(QMIDataContextIPAggregator *this)
{
  std::string *v2;
  _BOOL8 v3;
  char v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string *v19;
  std::string *v20;
  unint64_t v21;
  _BYTE buf[18];
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v2 = 0;
  LOBYTE(v3) = 0;
  v4 = 0;
  v5 = 0;
  v25 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v20 = 0;
  v21 = 0;
  *(_QWORD *)buf = 0x100000002;
  do
  {
    v6 = v4;
    if (*(int *)&buf[4 * v5] >= 0)
      v7 = *(_DWORD *)&buf[4 * v5] & 1;
    else
      v7 = -(*(_DWORD *)&buf[4 * v5] & 1);
    v8 = v7;
    v9 = (char *)this + 32 * v7;
    v10 = *((_QWORD *)v9 + 28);
    v11 = *((_QWORD *)v9 + 29);
    while (v10 != v11)
    {
      if ((unint64_t)v2 >= v21)
      {
        v2 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v19, (__int128 *)v10);
      }
      else
      {
        if (*(char *)(v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          v12 = *(_OWORD *)v10;
          v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
          *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v12;
        }
        ++v2;
      }
      v20 = v2;
      v10 += 24;
    }
    v3 = v3 || *((_BYTE *)this + 32 * v8 + 248) != 0;
    v4 = 1;
    v5 = 1;
  }
  while ((v6 & 1) == 0);
  v13 = (uint64_t)v19;
  if (v19 != v2)
  {
    v14 = *((_QWORD *)this + 7);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = asStringBool();
      *(_QWORD *)&buf[4] = "reportProxyUpdate";
      *(_DWORD *)buf = 136315650;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = -1431655765 * (((unint64_t)v2 - v13) >> 3);
      v23 = 2080;
      v24 = v15;
      _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I %s: reporting combined PCSCF list of size %u, handover %s", buf, 0x1Cu);
    }
    v16 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)this + 11));
    *(_QWORD *)buf = *((_QWORD *)this + 10);
    *(_QWORD *)&buf[8] = v16;
    (*(void (**)(_QWORD, std::string **, _BOOL8))(**(_QWORD **)buf + 216))(*(_QWORD *)buf, &v19, v3);
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)buf = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_21697667C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::reportProxyUpdate(QMIDataContextIPAggregator *this)
{
  QMIDataContextIPAggregator::reportProxyUpdate((QMIDataContextIPAggregator *)((char *)this - 16));
}

void QMIDataContextIPAggregator::proxyUpdate(uint64_t a1, int a2, uint64_t a3, char a4)
{
  std::string *v6;
  __int128 *v7;
  int v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *(std::string **)a3;
  v7 = *(__int128 **)(a3 + 8);
  if (v6 != (std::string *)v7)
  {
    v10 = a2 & 1;
    if (a2 < 0)
      v10 = -v10;
    v11 = a1 + 32 * v10;
    if (v11 + 224 != a3)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v11 + 224), v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
    *(_BYTE *)(v11 + 248) = a4;
    v12 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = asString();
      v14 = -1431655765 * ((*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v15 = 136315906;
      v16 = "proxyUpdate";
      v17 = 2080;
      v18 = v13;
      v19 = 1024;
      v20 = v14;
      v21 = 2080;
      v22 = asStringBool();
      _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: family %s PCSCF list of size %u, handover %s", (uint8_t *)&v15, 0x26u);
    }
  }
}

void `non-virtual thunk to'QMIDataContextIPAggregator::proxyUpdate(uint64_t a1, int a2, uint64_t a3, char a4)
{
  QMIDataContextIPAggregator::proxyUpdate(a1 - 16, a2, a3, a4);
}

void QMIDataContextIPAggregator::applicationIDUpdate(std::__shared_weak_count **this, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *, uint64_t))this[10]->__vftable[5].__get_deleter)(this[10], a2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_2169768AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::applicationIDUpdate(std::__shared_weak_count **this, uint64_t a2)
{
  QMIDataContextIPAggregator::applicationIDUpdate(this - 2, a2);
}

void QMIDataContextIPAggregator::getInterfaceAddress(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 232))(*(_QWORD *)(a1 + 80), a2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_216976964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::getInterfaceAddress(uint64_t a1, uint64_t a2)
{
  QMIDataContextIPAggregator::getInterfaceAddress(a1 - 16, a2);
}

uint64_t QMIDataContextIPAggregator::isInEnteringLowPowerForNoWowIP(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[11]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[6].~__shared_weak_count)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

void sub_2169769FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::isInEnteringLowPowerForNoWowIP(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::isInEnteringLowPowerForNoWowIP(this - 2);
}

void QMIDataContextIPAggregator::submitIpv4AddressChangeMetric(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *))this[10]->__vftable[6].~__shared_weak_count_0)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_216976A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::submitIpv4AddressChangeMetric(std::__shared_weak_count **this)
{
  QMIDataContextIPAggregator::submitIpv4AddressChangeMetric(this - 2);
}

void QMIDataContextIPAggregator::getDataSettingsInfo(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *))this[10]->__on_zero_shared_weak)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_216976B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::getDataSettingsInfo(std::__shared_weak_count **this)
{
  QMIDataContextIPAggregator::getDataSettingsInfo(this - 2);
}

uint64_t QMIDataContextIPAggregator::getCellularDataTechnology(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[11]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[6].__on_zero_shared)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

void sub_216976BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::getCellularDataTechnology(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::getCellularDataTechnology(this - 2);
}

void QMIDataContextIPAggregator::setOutgoingTrafficEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 264))(*(_QWORD *)(a1 + 80), a2, a3, a4);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_216976CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::setOutgoingTrafficEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  QMIDataContextIPAggregator::setOutgoingTrafficEnabled(a1 - 16, a2, a3, a4);
}

uint64_t QMIDataContextIPAggregator::getHandoverPduSessionId(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[11]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[7].~__shared_weak_count)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

void sub_216976D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::getHandoverPduSessionId(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::getHandoverPduSessionId(this - 2);
}

void QMIDataContextIPAggregator::freePduSessionId(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *))this[10]->__vftable[7].~__shared_weak_count_0)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_216976DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::freePduSessionId(std::__shared_weak_count **this)
{
  QMIDataContextIPAggregator::freePduSessionId(this - 2);
}

uint64_t QMIDataContextIPAggregator::getIwlanSnssai(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[11]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[7].__on_zero_shared)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

void sub_216976E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::getIwlanSnssai(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::getIwlanSnssai(this - 2);
}

void QMIDataContextIPAggregator::updateHandoverPduSessionId(std::__shared_weak_count **this, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *, uint64_t))this[10]->__vftable[7].__get_deleter)(this[10], a2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_216976F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::updateHandoverPduSessionId(std::__shared_weak_count **this, uint64_t a2)
{
  QMIDataContextIPAggregator::updateHandoverPduSessionId(this - 2, a2);
}

void QMIDataContextIPAggregator::reportContextConnectionError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v6 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 272))(*(_QWORD *)(a1 + 80), a2, a3);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_216976FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::reportContextConnectionError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  QMIDataContextIPAggregator::reportContextConnectionError(a1 - 16, a2, a3);
}

uint64_t QMIDataContextIPAggregator::isOnProbation(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[11]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[8].~__shared_weak_count)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

void sub_216977078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::isOnProbation(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::isOnProbation(this - 2);
}

void QMIDataContextIPAggregator::sendServiceDisconnectionStatus_sync(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 432))(*(_QWORD *)(a1 + 80), a2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_216977128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::sendServiceDisconnectionStatus_sync(uint64_t a1, uint64_t a2)
{
  QMIDataContextIPAggregator::sendServiceDisconnectionStatus_sync(a1 - 16, a2);
}

uint64_t QMIDataContextIPAggregator::isOnDNSProbation(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[11]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[8].~__shared_weak_count_0)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

void sub_2169771C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::isOnDNSProbation(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::isOnDNSProbation(this - 2);
}

void QMIDataContextIPAggregator::setProbation(uint64_t a1, int a2)
{
  int v4;
  int DataContextState;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[5];
  int v23;
  _BYTE buf[24];
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a2 == 1)
    v4 = 2;
  else
    v4 = 1;
  DataContextState = QMIDataContextIPAggregator::getDataContextState(a1, v4);
  v6 = *(NSObject **)(a1 + 56);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (DataContextState == 6)
  {
    if (v7)
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "setProbation";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = asString();
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: %s: other family has already dealt with probation", buf, 0x16u);
    }
    v8 = MEMORY[0x24BDAC760];
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 0x40000000;
    v22[2] = ___ZN26QMIDataContextIPAggregator12setProbationE18DataProtocolFamily_block_invoke;
    v22[3] = &__block_descriptor_tmp_17;
    v22[4] = a1;
    v23 = a2;
    v9 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v9 || (v10 = *(_QWORD *)(a1 + 24), (v11 = std::__shared_weak_count::lock(v9)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v12 = v11;
    v13 = *(NSObject **)(a1 + 40);
    *(_QWORD *)buf = v8;
    *(_QWORD *)&buf[8] = 1174405120;
    *(_QWORD *)&buf[16] = ___ZNK3ctu20SharedSynchronizableI26QMIDataContextIPAggregatorE15execute_wrappedEU13block_pointerFvvE_block_invoke;
    v25 = &unk_24D5D28F0;
    v27 = v10;
    v28 = v12;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v26 = v22;
    dispatch_async(v13, buf);
    v16 = v28;
    if (v28)
    {
      v17 = (unint64_t *)&v28->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
LABEL_24:
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    if (v7)
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "setProbation";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = asString();
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: %s", buf, 0x16u);
    }
    v12 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
    *(_QWORD *)buf = *(_QWORD *)(a1 + 80);
    *(_QWORD *)&buf[8] = v12;
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 336))(*(_QWORD *)buf);
    v20 = (unint64_t *)&v12->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
      goto LABEL_24;
  }
}

void sub_216977450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN26QMIDataContextIPAggregator12setProbationE18DataProtocolFamily_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v6[22];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 56);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v6 = 136315394;
    *(_QWORD *)&v6[4] = "setProbation_block_invoke";
    *(_WORD *)&v6[12] = 2080;
    *(_QWORD *)&v6[14] = asString();
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: %s: check if already ready", v6, 0x16u);
  }
  v3 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v1 + 88));
  *(_QWORD *)v6 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)&v6[8] = v3;
  (*(void (**)(_QWORD))(**(_QWORD **)v6 + 344))(*(_QWORD *)v6);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_216977588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::setProbation(uint64_t a1, int a2)
{
  QMIDataContextIPAggregator::setProbation(a1 - 16, a2);
}

void QMIDataContextIPAggregator::submitPDPContextStateChangeMetrics(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *))this[10]->__vftable[9].~__shared_weak_count)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_216977624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::submitPDPContextStateChangeMetrics(std::__shared_weak_count **this)
{
  QMIDataContextIPAggregator::submitPDPContextStateChangeMetrics(this - 2);
}

void QMIDataContextIPAggregator::setDeactivating(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *))this[10]->__vftable[8].__on_zero_shared_weak)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_2169776C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::setDeactivating(std::__shared_weak_count **this)
{
  QMIDataContextIPAggregator::setDeactivating(this - 2);
}

void QMIDataContextIPAggregator::getAPNObserver(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *))this[10]->__vftable[7].__on_zero_shared_weak)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_216977770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::getAPNObserver(std::__shared_weak_count **this)
{
  QMIDataContextIPAggregator::getAPNObserver(this - 2);
}

void QMIDataContextIPAggregator::resetBaseband(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  QMIDataContextIPAggregator::clearPending(a1, "reset BB");
  v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 392))(*(_QWORD *)(a1 + 80), a2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_21697782C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::resetBaseband(uint64_t a1, uint64_t a2)
{
  QMIDataContextIPAggregator::resetBaseband(a1 - 16, a2);
}

void QMIDataContextIPAggregator::updateResetBasebandTimer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 400))(*(_QWORD *)(a1 + 80), a2, a3, a4);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_2169778F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::updateResetBasebandTimer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  QMIDataContextIPAggregator::updateResetBasebandTimer(a1 - 16, a2, a3, a4);
}

void QMIDataContextIPAggregator::submitCommCenterIPSetupFailure(std::__shared_weak_count **this, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v6 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))this[10]->__vftable[10].~__shared_weak_count_0)(this[10], a2, a3);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_2169779B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataContextIPAggregator::submitCommCenterIPSetupFailure(std::__shared_weak_count **this, uint64_t a2, uint64_t a3)
{
  QMIDataContextIPAggregator::submitCommCenterIPSetupFailure(this - 2, a2, a3);
}

uint64_t QMIDataContextIPAggregator::dumpState(QMIDataContextIPAggregator *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t p_buf;
  uint64_t v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  std::locale::__imp *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  _OWORD v27[4];
  void *__p[2];
  __int128 v29;
  __int128 v30;
  _OWORD v31[9];
  uint64_t v32;
  std::locale v33[2];
  __int128 buf;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 7);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)this + 11));
    *(_QWORD *)&v27[0] = *((_QWORD *)this + 10);
    *((_QWORD *)&v27[0] + 1) = v3;
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v27[0] + 16))(*(_QWORD *)&v27[0]);
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: ------- %s (driver) -------", (uint8_t *)&buf, 0xCu);
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v32 = 0;
  v30 = 0u;
  memset(v31, 0, sizeof(v31));
  *(_OWORD *)__p = 0u;
  v29 = 0u;
  memset(v27, 0, sizeof(v27));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
  buf = 0uLL;
  v35 = 0;
  std::stringbuf::str[abi:ne180100]((uint64_t)v27 + 8, &buf);
  if (SHIBYTE(v35) < 0)
    operator delete((void *)buf);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\t", 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"fActivationGuard=", 17);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  v26[0] = *((_QWORD *)this + 25);
  v26[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  asString(v26, &buf);
  if (v35 >= 0)
    p_buf = (uint64_t)&buf;
  else
    p_buf = buf;
  if (v35 >= 0)
    v13 = HIBYTE(v35);
  else
    v13 = *((_QWORD *)&buf + 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, p_buf, v13);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(v33, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(v33);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v35) < 0)
    operator delete((void *)buf);
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v18 = *((_QWORD *)this + 7);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v27 + 8, &buf);
    if (v35 >= 0)
      v19 = (std::locale::__imp *)&buf;
    else
      v19 = (std::locale::__imp *)buf;
    LODWORD(v33[0].__locale_) = 136315138;
    *(std::locale::__imp **)((char *)&v33[0].__locale_ + 4) = v19;
    _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)v33, 0xCu);
    if (SHIBYTE(v35) < 0)
      operator delete((void *)buf);
    v18 = *((_QWORD *)this + 7);
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v20 = asString();
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v20;
    _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, "#I DATA:: fPendingFamily = %s", (uint8_t *)&buf, 0xCu);
    v18 = *((_QWORD *)this + 7);
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v21 = asString();
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v21;
    _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, "#I DATA:: fActivationIpFamily = %s", (uint8_t *)&buf, 0xCu);
    v18 = *((_QWORD *)this + 7);
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *((_DWORD *)this + 43);
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v22;
    _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, "#I DATA:: fNumOfActiveContext = %d", (uint8_t *)&buf, 8u);
  }
  v23 = *((_QWORD *)this + 12);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 200))(v23);
  v24 = *((_QWORD *)this + 14);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 200))(v24);
  *(_QWORD *)&v27[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v27 + *(_QWORD *)(*(_QWORD *)&v27[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *((_QWORD *)&v27[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v29) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2199FEA70](v31);
}

void sub_216977E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t QMIDataContextIPAggregator::isInLoopBackMode(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[11]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[10].__on_zero_shared)(this[10]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

void sub_216977F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataContextIPAggregator::isInLoopBackMode(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::isInLoopBackMode(this - 2);
}

void QMIDataContextIPAggregator::resetfActivationGuard(QMIDataContextIPAggregator *this)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 7);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I fActivationGuard reset", v4, 2u);
  }
  v3 = *((_QWORD *)this + 25);
  *(_BYTE *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 12) = 0;
}

uint64_t QMIDataContextIPAggregator::convertConnectionMaskToApnTypeMask(QMIDataContextIPAggregator *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = 2;
  v3 = 1;
  v4 = 4;
  v5 = 16;
  if ((*(_QWORD *)&a2 & 0x400000) == 0)
    v5 = 1;
  v6 = 8;
  if ((a2 & 0x8000010) == 0)
    v6 = v5;
  if ((a2 & 4) == 0)
    v4 = v6;
  if ((a2 & 1) == 0)
    v3 = v4;
  if ((a2 & 0x20000) == 0)
    v2 = v3;
  if ((a2 & 0x40000) != 0)
    return 512;
  else
    return v2;
}

uint64_t QMIDataContextIPAggregator::updateVoLTEDataCallType(QMIDataContextIPAggregator *this, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t result;
  __int16 v10;
  __int16 v11;

  v5 = (char *)this + 112;
  v4 = *((_QWORD *)this + 14);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 224))(v4))
  {
    v6 = *((_QWORD *)this + 7);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 0;
      v7 = "#I Sending VoLTE data type from IP v6";
      v8 = (uint8_t *)&v11;
LABEL_9:
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v5 + 312))(*(_QWORD *)v5, a2);
    }
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v5 + 312))(*(_QWORD *)v5, a2);
  }
  v5 = (char *)this + 96;
  result = *((_QWORD *)this + 12);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 224))(result);
    if ((_DWORD)result)
    {
      v6 = *((_QWORD *)this + 7);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 0;
        v7 = "#I Sending VoLTE data type from IP v4";
        v8 = (uint8_t *)&v10;
        goto LABEL_9;
      }
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v5 + 312))(*(_QWORD *)v5, a2);
    }
  }
  return result;
}

uint64_t QMIDataContextIPAggregator::getAnbr(QMIDataContextIPAggregator *this)
{
  return 0;
}

uint64_t QMIDataContextIPAggregator::getAnbrActivationState(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(BOOL,BOOL)>::operator()(a2, 0, 0);
}

uint64_t QMIDataContextIPAggregator::queryAnbrBitrate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v6;

  v6 = 0;
  v4 = *(_QWORD *)(a4 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 48))(v4, &v6);
}

void std::__shared_ptr_pointer<QMIDataContextIP *,std::shared_ptr<QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<QMIDataContextIP>(QMIDataContextIP*)::{lambda(QMIDataContextIP *)#1},std::allocator<QMIDataContextIP>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIDataContextIP *,std::shared_ptr<QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<QMIDataContextIP>(QMIDataContextIP*)::{lambda(QMIDataContextIP *)#1},std::allocator<QMIDataContextIP>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<QMIDataContextIP>(QMIDataContextIP*)::{lambda(QMIDataContextIP*)#1}::operator() const(QMIDataContextIP*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIDataContextIP *,std::shared_ptr<QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<QMIDataContextIP>(QMIDataContextIP*)::{lambda(QMIDataContextIP *)#1},std::allocator<QMIDataContextIP>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<QMIDataContextIP>(QMIDataContextIP*)::{lambda(QMIDataContextIP*)#1}::operator() const(QMIDataContextIP*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::shared_ptr<QMIDataContextIPActivationLock>::reset[abi:ne180100]<QMIDataContextIPActivationLock,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D2808;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2169782AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<QMIActivationLock *,std::shared_ptr<QMIActivationLock>::__shared_ptr_default_delete<QMIActivationLock,QMIActivationLock>,std::allocator<QMIActivationLock>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

uint64_t std::__shared_ptr_pointer<QMIActivationLock *,std::shared_ptr<QMIActivationLock>::__shared_ptr_default_delete<QMIActivationLock,QMIActivationLock>,std::allocator<QMIActivationLock>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<QMIActivationLock *,std::shared_ptr<QMIActivationLock>::__shared_ptr_default_delete<QMIActivationLock,QMIActivationLock>,std::allocator<QMIActivationLock>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<QMIDataContextIPActivationLock *,std::shared_ptr<QMIDataContextIPActivationLock>::__shared_ptr_default_delete<QMIDataContextIPActivationLock,QMIDataContextIPActivationLock>,std::allocator<QMIDataContextIPActivationLock>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

uint64_t std::__shared_ptr_pointer<QMIDataContextIPActivationLock *,std::shared_ptr<QMIDataContextIPActivationLock>::__shared_ptr_default_delete<QMIDataContextIPActivationLock,QMIDataContextIPActivationLock>,std::allocator<QMIDataContextIPActivationLock>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<QMIDataContextIPActivationLock *,std::shared_ptr<QMIDataContextIPActivationLock>::__shared_ptr_default_delete<QMIDataContextIPActivationLock,QMIDataContextIPActivationLock>,std::allocator<QMIDataContextIPActivationLock>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

const void **ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(const void **a1, const void **a2)
{
  const void *v3;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
    CFRetain(v3);
  return a1;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_21697850C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIDataContextActivationGuard *,std::shared_ptr<QMIDataContextActivationGuard>::__shared_ptr_default_delete<QMIDataContextActivationGuard,QMIDataContextActivationGuard>,std::allocator<QMIDataContextActivationGuard>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

uint64_t std::__shared_ptr_pointer<QMIDataContextActivationGuard *,std::shared_ptr<QMIDataContextActivationGuard>::__shared_ptr_default_delete<QMIDataContextActivationGuard,QMIDataContextActivationGuard>,std::allocator<QMIDataContextActivationGuard>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<QMIDataContextActivationGuard *,std::shared_ptr<QMIDataContextActivationGuard>::__shared_ptr_default_delete<QMIDataContextActivationGuard,QMIDataContextActivationGuard>,std::allocator<QMIDataContextActivationGuard>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIDataContextIPAggregator>::execute_wrapped<QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(DataProtocolFamily,std::function<void ()(void)> const&)::$_0>(QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(DataProtocolFamily,std::function<void ()(void)> const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(DataProtocolFamily,std::function<void ()(void)> const&)::$_0,std::default_delete<QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(DataProtocolFamily,std::function<void ()(void)> const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t **v18;
  uint8_t v19[16];
  uint8_t v20[16];
  uint8_t buf[16];

  v18 = a1;
  v1 = *a1;
  v2 = **a1;
  v3 = *(NSObject **)(v2 + 56);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#N qmiOnline: cleaning on error", buf, 2u);
  }
  if (*((_DWORD *)v1 + 2) == 1)
    v4 = 2;
  else
    v4 = 1;
  v5 = (_QWORD *)(v2 + 96);
  v6 = 96;
  if (*((_DWORD *)v1 + 2) == 1)
  {
    v6 = 112;
    v7 = v2 + 112;
  }
  else
  {
    v7 = v2 + 96;
  }
  v8 = *(_QWORD *)(v2 + v6);
  v9 = *(std::__shared_weak_count **)(v7 + 8);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if ((*(_DWORD *)(v2 + 128) & v4) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8) == 5)
  {
    v12 = *(NSObject **)(v2 + 56);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: deactivate otherFamily", v20, 2u);
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 48))(v8, 0, 0);
  }
  v13 = *((_DWORD *)v1 + 2);
  if (v13 == 1)
    goto LABEL_20;
  if (v13 == 2)
  {
    v5 = (_QWORD *)(v2 + 112);
LABEL_20:
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v5 + 48))(*v5, 0, 0);
    goto LABEL_22;
  }
  v14 = *(NSObject **)(v2 + 56);
  if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
LABEL_22:
    if (!v9)
      goto LABEL_27;
    goto LABEL_23;
  }
  *(_WORD *)v19 = 0;
  _os_log_error_impl(&dword_216897000, v14, OS_LOG_TYPE_ERROR, "qmiOnline: Unexpected ipFamily: something is very very wrong (2)", v19, 2u);
  if (!v9)
    goto LABEL_27;
LABEL_23:
  v15 = (unint64_t *)&v9->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_27:
  MEMORY[0x2199FEAC4](v1, 0x1020C403A5D3213);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v18);
}

void sub_2169787AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  MEMORY[0x2199FEAC4](v2, 0x1020C403A5D3213);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI26QMIDataContextIPAggregatorE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIK26QMIDataContextIPAggregatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIK26QMIDataContextIPAggregatorEE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 40);
}

void std::stringbuf::str[abi:ne180100](uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = a1 + 64;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)v4);
  v5 = *a2;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v4 = v5;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t QMISignalStrengthCommandDriver::QMISignalStrengthCommandDriver(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE v10[16];

  *(_QWORD *)a1 = MEMORY[0x24BDC4628] + 16;
  *(_QWORD *)(a1 + 8) = &unk_24D5DDF30;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, (const char *)*MEMORY[0x24BDC3E90], "sig.qmi");
  ctu::SharedLoggable<QMISignalStrengthCommandDriver,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>((_QWORD *)(a1 + 16), a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *(_QWORD *)a1 = off_24D5D2930;
  *(_QWORD *)(a1 + 8) = &unk_24D5D29B0;
  *(_QWORD *)(a1 + 56) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

void sub_216978A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SignalStrengthCommandDriver *v9;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  SignalStrengthCommandDriver::~SignalStrengthCommandDriver(v9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<QMISignalStrengthCommandDriver,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>(_QWORD *a1, NSObject **a2)
{
  NSObject *v3;
  _BYTE v5[8];

  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  a1[2] = *a2;
  if (v3)
    dispatch_retain(v3);
  a1[3] = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x2199FDF6C](v5);
  return a1;
}

void QMISignalStrengthCommandDriver::~QMISignalStrengthCommandDriver(QMISignalStrengthCommandDriver *this)
{
  *(_QWORD *)this = off_24D5D2930;
  *((_QWORD *)this + 1) = &unk_24D5D29B0;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  MEMORY[0x2199FDF6C]((char *)this + 48);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 2);
  SignalStrengthCommandDriver::~SignalStrengthCommandDriver(this);
}

void QMISignalStrengthCommandDriver::bootstrap(uint64_t a1, dispatch_object_t *a2, xpc_object_t *a3, uint64_t *a4)
{
  NSObject *v7;
  xpc_object_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  xpc_object_t v14;
  NSObject *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  v8 = *a3;
  if (v8)
    xpc_retain(v8);
  else
    v8 = xpc_null_create();
  v9 = *a4;
  v10 = a4[1];
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v24 = 0;
  v25 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v24, (_QWORD *)(a1 + 16));
  v13 = (_QWORD *)operator new();
  *v13 = a1;
  v13[1] = v7;
  v13[2] = v8;
  v14 = xpc_null_create();
  v13[3] = v9;
  v13[4] = v10;
  v15 = *(NSObject **)(a1 + 32);
  v16 = v24;
  v17 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (_QWORD *)operator new();
  *v20 = v13;
  v20[1] = v16;
  v20[2] = v17;
  v26 = 0;
  v27 = 0;
  dispatch_async_f(v15, v20, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMISignalStrengthCommandDriver>::execute_wrapped<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0>(QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0,std::default_delete<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v26);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v27);
  v21 = v25;
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  xpc_release(v14);
}

void QMISignalStrengthCommandDriver::shutdown(uint64_t a1, dispatch_object_t *a2)
{
  _QWORD *v3;
  NSObject *v4;
  _QWORD *v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = (_QWORD *)(a1 + 16);
  v4 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v4);
  }
  v15 = 0;
  v16 = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v15, v3);
  v5 = (_QWORD *)operator new();
  *v5 = a1;
  v5[1] = v4;
  v6 = *(NSObject **)(a1 + 32);
  v7 = v15;
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (_QWORD *)operator new();
  *v11 = v5;
  v11[1] = v7;
  v11[2] = v8;
  v17 = 0;
  v18 = 0;
  dispatch_async_f(v6, v11, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMISignalStrengthCommandDriver>::execute_wrapped<QMISignalStrengthCommandDriver::shutdown(dispatch::group_session)::$_0>(QMISignalStrengthCommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMISignalStrengthCommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMISignalStrengthCommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v17);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v18);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

uint64_t QMISignalStrengthCommandDriver::poll(_QWORD *a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = a1[6];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I poll", v4, 2u);
  }
  return (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 104))(a1, 0);
}

void QMISignalStrengthCommandDriver::start(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint8_t buf[16];

  v5 = a1[6];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I start", buf, 2u);
  }
  v6 = (std::__shared_weak_count *)a3[1];
  v12 = *a3;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(_QWORD *, uint64_t *, _QWORD))(*a1 + 96))(a1, &v12, 0);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_216978F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMISignalStrengthCommandDriver::update(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint8_t buf[16];

  v5 = a1[6];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I update", buf, 2u);
  }
  v6 = (std::__shared_weak_count *)a3[1];
  v12 = *a3;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 96))(a1, &v12, 2);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_21697907C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMISignalStrengthCommandDriver::stop(_QWORD *a1)
{
  NSObject *v2;
  unsigned __int8 v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[16];

  v2 = a1[6];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I stop", buf, 2u);
  }
  v3 = atomic_load((unsigned __int8 *)&_MergedGlobals);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals))
  {
    v9 = operator new();
    *(_BYTE *)v9 = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 8) = v9 + 16;
    std::shared_ptr<InputThresholds const>::shared_ptr[abi:ne180100]<InputThresholds,void>(v9);
    __cxa_atexit((void (*)(void *))std::shared_ptr<InputThresholds const>::~shared_ptr[abi:ne180100], &qword_253DEA058, &dword_216897000);
    __cxa_guard_release(&_MergedGlobals);
  }
  v10 = qword_253DEA058;
  v11 = qword_253DEA060;
  if (qword_253DEA060)
  {
    v4 = (unint64_t *)(qword_253DEA060 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 96))(a1, &v10, 1);
  v6 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v7 = (unint64_t *)(v11 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2169791E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals);
  _Unwind_Resume(a1);
}

uint64_t QMISignalStrengthCommandDriver::registered(uint64_t a1, QMIVirtualClient **a2)
{
  if (QMIVirtualClient::getServiceType(*a2) != 3)
    __TUAssertTrigger();
  QMIVirtualClient::disableNasServingSystemIndications(*a2, (const ctu::OsLogLogger *)(a1 + 48));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), 1, 1);
}

uint64_t `non-virtual thunk to'QMISignalStrengthCommandDriver::registered(uint64_t a1, QMIVirtualClient **a2)
{
  return QMISignalStrengthCommandDriver::registered(a1 - 8, a2);
}

uint64_t QMISignalStrengthCommandDriver::deregistered(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), 1, 0);
}

uint64_t `non-virtual thunk to'QMISignalStrengthCommandDriver::deregistered(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), 1, 0);
}

uint64_t QMISignalStrengthCommandDriver::exitPowerMode(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, 0);
}

uint64_t `non-virtual thunk to'QMISignalStrengthCommandDriver::exitPowerMode(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 - 8) + 104))(a1 - 8, 0);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMISignalStrengthCommandDriver>::execute_wrapped<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0>(QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0,std::default_delete<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::mutex *ServiceMap;
  _QWORD *v11;
  xpc_object_t v12;
  void *v13;
  xpc_object_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  xpc_object_t object;
  void *__p[2];
  char v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  __int128 v29;

  v1 = *a1;
  v22 = a1;
  v23 = v1;
  v2 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(std::__shared_weak_count **)(v2 + 96);
  *(_QWORD *)(v2 + 88) = v4;
  *(_QWORD *)(v2 + 96) = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 56));
  ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<QMIClientPool>(ServiceMap, &v27);
  v11 = v27;
  std::string::basic_string[abi:ne180100]<0>(__p, "registration");
  v12 = xpc_null_create();
  object = v12;
  if (MEMORY[0x2199FEDD0](*(_QWORD *)(v1 + 16)) == MEMORY[0x24BDACFB0])
  {
    v13 = xpc_connection_create_from_endpoint(*(xpc_endpoint_t *)(v1 + 16));
    if (!v13)
      v13 = xpc_null_create();
    v14 = xpc_null_create();
    object = v13;
    xpc_release(v12);
    xpc_release(v14);
  }
  QMIClientPool::requestClient(v11, 3u, (uint64_t *)__p, v2 + 8, (uint64_t)&object, &v29);
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](v2 + 72, &v29);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  xpc_release(object);
  object = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::unique_ptr<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0,std::default_delete<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](&v23);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v22);
}

void sub_2169794A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  xpc_release(object);
  object = 0;
  if (a17 < 0)
    operator delete(__p);
  v20 = a19;
  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::unique_ptr<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0,std::default_delete<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0,std::default_delete<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2 + 24);
    xpc_release(*(xpc_object_t *)(v2 + 16));
    *(_QWORD *)(v2 + 16) = 0;
    v3 = *(NSObject **)(v2 + 8);
    if (v3)
    {
      dispatch_group_leave(v3);
      v4 = *(NSObject **)(v2 + 8);
      if (v4)
        dispatch_release(v4);
    }
    MEMORY[0x2199FEAC4](v2, 0xA0C4074E99163);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMISignalStrengthCommandDriver>::execute_wrapped<QMISignalStrengthCommandDriver::shutdown(dispatch::group_session)::$_0>(QMISignalStrengthCommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMISignalStrengthCommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMISignalStrengthCommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[2];

  v4 = *a1;
  v7 = a1;
  v8 = v4;
  v5 = *(_QWORD *)(*(_QWORD *)v4 + 72);
  if (v5)
  {
    v9[0] = v5 + 88;
    v9[1] = 1;
    MEMORY[0x2199FDF3C](v5 + 88, a2, a3, a4);
    *(_BYTE *)(v5 + 74) = 0;
    std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v9);
  }
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&v8);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_216979608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<InputThresholds const>::shared_ptr[abi:ne180100]<InputThresholds,void>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v4;

  qword_253DEA058 = a1;
  v2 = (_QWORD *)operator new();
  *v2 = &off_24D5D2AA8;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = a1;
  qword_253DEA060 = (uint64_t)v2;
  v4 = 0;
  return std::unique_ptr<InputThresholds>::reset[abi:ne180100](&v4);
}

void sub_216979690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<InputThresholds>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<InputThresholds *,std::shared_ptr<InputThresholds const>::__shared_ptr_default_delete<InputThresholds const,InputThresholds>,std::allocator<InputThresholds>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

uint64_t std::__shared_ptr_pointer<InputThresholds *,std::shared_ptr<InputThresholds const>::__shared_ptr_default_delete<InputThresholds const,InputThresholds>,std::allocator<InputThresholds>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy(v1 + 8, *(_QWORD **)(v1 + 16));
    JUMPOUT(0x2199FEAC4);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<InputThresholds *,std::shared_ptr<InputThresholds const>::__shared_ptr_default_delete<InputThresholds const,InputThresholds>,std::allocator<InputThresholds>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::unique_ptr<InputThresholds>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy(v1 + 8, *(_QWORD **)(v1 + 16));
    JUMPOUT(0x2199FEAC4);
  }
  return result;
}

uint64_t dms::convertSubscriptionType(int a1)
{
  if (a1 == 2)
    return 2;
  else
    return 1;
}

_QWORD *convertCallEndReasonToString@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 140)
  {
    switch(a1)
    {
      case 141:
        v2 = "QMI_FAILURE_CAUSE_UNASSIGNED_NUMBER";
        break;
      case 142:
        v2 = "QMI_FAILURE_CAUSE_NO_ROUTE_TO_DESTINATION";
        break;
      case 143:
        v2 = "QMI_FAILURE_CAUSE_CHANNEL_UNACCEPTABLE";
        break;
      case 144:
        v2 = "QMI_FAILURE_CAUSE_OPERATOR_DETERMINED_BARRING";
        break;
      case 145:
        v2 = "QMI_FAILURE_CAUSE_NORMAL_CALL_CLEARING";
        break;
      case 146:
        v2 = "QMI_FAILURE_CAUSE_END_USER_BUSY";
        break;
      case 147:
        v2 = "QMI_FAILURE_CAUSE_NO_USER_RESPONDING";
        break;
      case 148:
        v2 = "QMI_FAILURE_CAUSE_USER_ALERTING_NO_ANSWER";
        break;
      case 149:
        v2 = "QMI_FAILURE_CAUSE_CALL_REJECTED";
        break;
      case 150:
        v2 = "QMI_FAILURE_CAUSE_NUMBER_CHANGED";
        break;
      case 151:
        v2 = "QMI_FAILURE_CAUSE_PREEMPTION";
        break;
      case 152:
        v2 = "QMI_FAILURE_CAUSE_DESTINATION_OUT_OF_ORDER";
        break;
      case 153:
        v2 = "QMI_FAILURE_CAUSE_INVALID_NUMBER_FORMAT";
        break;
      case 154:
        v2 = "QMI_FAILURE_CAUSE_FACILITY_REJECTED";
        break;
      case 155:
        v2 = "QMI_FAILURE_CAUSE_RESP_TO_STATUS_ENQUIRY";
        break;
      case 156:
        v2 = "QMI_FAILURE_CAUSE_NORMAL_UNSPECIFIED";
        break;
      case 157:
        v2 = "QMI_FAILURE_CAUSE_NO_CIRCUIT_OR_CHANNEL_AVAILABLE";
        break;
      case 158:
        v2 = "QMI_FAILURE_CAUSE_NETWORK_OUT_OF_ORDER";
        break;
      case 159:
        v2 = "QMI_FAILURE_CAUSE_TEMPORARY_FAILURE";
        break;
      case 160:
      case 161:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 210:
      case 211:
      case 213:
      case 214:
      case 215:
      case 217:
      case 218:
      case 219:
      case 221:
      case 227:
      case 231:
      case 232:
      case 237:
        goto LABEL_12;
      case 162:
        v2 = "QMI_FAILURE_CAUSE_REQ_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE";
        break;
      case 186:
        v2 = "QMI_FAILURE_CAUSE_RECOVERY_ON_TIMER_EXPIRED";
        break;
      case 187:
        v2 = "QMI_FAILURE_CAUSE_PROTOCOL_ERROR_UNSPECIFIED";
        break;
      case 209:
        v2 = "QMI_FAILURE_CAUSE_NETWORK_CONGESTION";
        break;
      case 212:
        v2 = "QMI_FAILURE_CAUSE_SERVICE_TEMPORARILY_OUT_OF_ORDER";
        break;
      case 216:
        v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_FAILURE";
        break;
      case 220:
        v2 = "QMI_FAILURE_CAUSE_NO_RESOURCES";
        break;
      case 222:
        v2 = "QMI_FAILURE_CAUSE_TIMER_T3230_EXPIRED";
        break;
      case 223:
        v2 = "QMI_FAILURE_CAUSE_NO_CELL_AVAILABLE";
        break;
      case 224:
        v2 = "QMI_FAILURE_CAUSE_ABORT_MSG_RECEIVED";
        break;
      case 225:
        v2 = "QMI_FAILURE_CAUSE_RADIO_LINK_LOST";
        break;
      case 226:
        v2 = "QMI_FAILURE_CAUSE_TIMER_T303_EXPIRED";
        break;
      case 228:
        v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_RR_REL_IND";
        break;
      case 229:
        v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_RR_RANDOM_ACCESS_FAILURE";
        break;
      case 230:
        v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_RRC_REL_IND";
        break;
      case 233:
        v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_LOW_LEVEL_FAIL";
        break;
      case 234:
        v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_LOW_LEVEL_FAIL_REDIAL_NOT_ALLOWED";
        break;
      case 235:
        v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_LOW_LEVEL_IMMED_RETRY";
        break;
      case 236:
        v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_ABORT_RADIO_UNAVAILABLE";
        break;
      case 238:
        v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_RRC_REL_UNSPEC_IND";
        break;
      case 239:
        v2 = "QMI_FAILURE_CAUSE_RRC_REL_UNSPEC_IND";
        break;
      default:
        if (a1 == 378)
        {
          v2 = "CALL_END_CAUSE_CS_HARD_FAILURE";
        }
        else if (a1 == 379)
        {
          v2 = "CALL_END_CAUSE_CS_ACQ_FAILURE";
        }
        else
        {
LABEL_12:
          v2 = "Unknown";
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 20:
        v2 = "QMI_FAILURE_CAUSE_CDMA_LOCK";
        break;
      case 21:
        v2 = "QMI_FAILURE_CAUSE_NO_SRV";
        break;
      case 22:
        v2 = "QMI_FAILURE_CAUSE_FADE";
        break;
      case 23:
        v2 = "QMI_FAILURE_CAUSE_INTERCEPT";
        break;
      case 24:
        v2 = "QMI_FAILURE_CAUSE_REORDER";
        break;
      case 25:
        v2 = "QMI_FAILURE_CAUSE_REL_NORMAL";
        break;
      case 26:
        v2 = "QMI_FAILURE_CAUSE_REL_SO_REJ";
        break;
      case 27:
        v2 = "QMI_FAILURE_CAUSE_INCOM_CALL";
        break;
      case 28:
        v2 = "QMI_FAILURE_CAUSE_ALERT_STOP";
        break;
      case 29:
        v2 = "QMI_FAILURE_CAUSE_CLIENT_END";
        break;
      case 30:
        v2 = "QMI_FAILURE_CAUSE_ACTIVATION";
        break;
      case 31:
        v2 = "QMI_FAILURE_CAUSE_MC_ABORT";
        break;
      case 32:
        v2 = "QMI_FAILURE_CAUSE_MAX_ACCESS_PROBE";
        break;
      case 33:
        v2 = "QMI_FAILURE_CAUSE_PSIST_N";
        break;
      case 34:
        v2 = "QMI_FAILURE_CAUSE_UIM_NOT_PRESENT";
        break;
      case 35:
        v2 = "QMI_FAILURE_CAUSE_ACC_IN_PROG";
        break;
      case 36:
        v2 = "QMI_FAILURE_CAUSE_ACC_FAIL";
        break;
      case 37:
        v2 = "QMI_FAILURE_CAUSE_RETRY_ORDER";
        break;
      case 38:
        v2 = "QMI_FAILURE_CAUSE_CCS_NOT_SUPPORTED_BY_BS";
        break;
      case 39:
        v2 = "QMI_FAILURE_CAUSE_NO_RESPONSE_FROM_BS";
        break;
      case 40:
        v2 = "QMI_FAILURE_CAUSE_REJECTED_BY_BS";
        break;
      case 41:
        v2 = "QMI_FAILURE_CAUSE_INCOMPATIBLE";
        break;
      case 42:
        v2 = "QMI_FAILURE_CAUSE_ACCESS_BLOCK";
        break;
      case 43:
        v2 = "QMI_FAILURE_CAUSE_ALREADY_IN_TC";
        break;
      case 44:
        v2 = "QMI_FAILURE_CAUSE_EMERGENCY_FLASHED";
        break;
      case 45:
        v2 = "QMI_FAILURE_CAUSE_USER_CALL_ORIG_GPS";
        break;
      case 46:
        v2 = "QMI_FAILURE_CAUSE_USER_CALL_ORIG_SMS";
        break;
      case 47:
        v2 = "QMI_FAILURE_CAUSE_USER_CALL_ORIG_DATA";
        break;
      case 48:
        v2 = "QMI_FAILURE_CAUSE_REDIR_OR_HANDOFF";
        break;
      case 49:
        v2 = "QMI_FAILURE_CAUSE_ACCESS_BLOCK_ALL";
        break;
      case 50:
        v2 = "QMI_FAILURE_CAUSE_OTASP_SPC_ERR";
        break;
      case 51:
        v2 = "QMI_FAILURE_CAUSE_IS707B_MAX_ACC";
        break;
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
        goto LABEL_12;
      case 102:
        v2 = "QMI_FAILURE_CAUSE_INCOM_REJ";
        break;
      case 103:
        v2 = "QMI_FAILURE_CAUSE_SETUP_REJ";
        break;
      case 104:
        v2 = "QMI_FAILURE_CAUSE_NETWORK_END";
        break;
      case 105:
        v2 = "QMI_FAILURE_CAUSE_NO_FUNDS";
        break;
      case 106:
        v2 = "QMI_FAILURE_CAUSE_NO_GW_SRV";
        break;
      case 107:
        v2 = "QMI_FAILURE_CAUSE_NO_CDMA_SRV";
        break;
      case 108:
        v2 = "QMI_FAILURE_CAUSE_NO_FULL_SRV";
        break;
      case 109:
        v2 = "QMI_FAILURE_CAUSE_MAX_PS_CALLS";
        break;
      case 115:
        v2 = "QMI_FAILURE_CAUSE_CALL_BARRED";
        break;
      default:
        if (a1)
          goto LABEL_12;
        v2 = "QMI_FAILURE_CAUSE_OFFLINE";
        break;
    }
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t convertCallEndBBCodeToCSIError(int a1)
{
  uint64_t result;
  uint64_t v2;
  int v3;

  if (a1 > 186)
  {
    v2 = (a1 - 187);
    if (v2 > 0x31)
      return (a1 - 378) >= 2;
    if (((1 << (a1 + 69)) & 0x3C6F822400001) != 0)
      return 24;
    if (v2 == 33)
      return 18;
    else
      return (a1 - 378) >= 2;
  }
  else
  {
    switch(a1)
    {
      case 106:
      case 107:
      case 108:
      case 157:
      case 158:
      case 159:
      case 162:
        return 24;
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 160:
      case 161:
        return 1;
      case 115:
      case 144:
        result = 26;
        break;
      case 141:
      case 142:
      case 143:
      case 145:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
        return 0;
      case 146:
        result = 28;
        break;
      default:
        v3 = a1 - 20;
        result = 32;
        switch(v3)
        {
          case 0:
            result = 71;
            break;
          case 1:
            return 24;
          case 2:
            result = 72;
            break;
          case 4:
            result = 33;
            break;
          case 5:
          case 8:
          case 9:
          case 10:
          case 18:
          case 21:
            return 0;
          case 20:
            return result;
          default:
            return 1;
        }
        break;
    }
  }
  return result;
}

uint64_t *QMIDataSubscriptionCommandDriver::create@<X0>(capabilities::ct *a1@<X0>, uint64_t *a2@<X8>)
{
  capabilities::ct *v3;
  capabilities::ct *v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;
  __int128 v8;

  v3 = (capabilities::ct *)capabilities::ct::supportsDynamicSID(a1);
  if ((_DWORD)v3 || (v4 = (capabilities::ct *)capabilities::ct::supportsHydra(v3), (_DWORD)v4))
  {
    v5 = operator new();
    DataSubscriptionBaseCommandDriver::DataSubscriptionBaseCommandDriver();
    *(_QWORD *)v5 = &off_24D5D2B20;
    *(_BYTE *)(v5 + 128) = 0;
    *(_BYTE *)(v5 + 160) = 0;
    *(_BYTE *)(v5 + 168) = 0;
    *(_BYTE *)(v5 + 200) = 0;
    *(_QWORD *)(v5 + 224) = 0;
    *(_QWORD *)(v5 + 216) = 0;
    *(_QWORD *)(v5 + 208) = v5 + 216;
    *(_DWORD *)(v5 + 232) = 0;
    *a2 = 0;
    a2[1] = 0;
    return std::shared_ptr<QMIDataSubscriptionCommandDriver>::shared_ptr[abi:ne180100]<QMIDataSubscriptionCommandDriver,std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver*)#1},void>(a2, v5);
  }
  else
  {
    result = (uint64_t *)capabilities::ct::supportsDisableICCIDCommand(v4);
    if ((_DWORD)result)
    {
      v7 = operator new();
      DataSubscriptionBaseCommandDriver::DataSubscriptionBaseCommandDriver();
      *(_BYTE *)(v7 + 128) = 0;
      *(_BYTE *)(v7 + 160) = 0;
      *(_BYTE *)(v7 + 168) = 0;
      *(_BYTE *)(v7 + 200) = 0;
      *(_QWORD *)(v7 + 224) = 0;
      *(_QWORD *)(v7 + 216) = 0;
      *(_QWORD *)(v7 + 208) = v7 + 216;
      *(_DWORD *)(v7 + 232) = 0;
      *(_QWORD *)v7 = &off_24D5CA420;
      *(_BYTE *)(v7 + 240) = 0;
      *(_BYTE *)(v7 + 264) = 0;
      *(_QWORD *)(v7 + 296) = 0;
      v8 = 0uLL;
      result = std::shared_ptr<QMIMav20DataSubscriptionCommandDriver>::shared_ptr[abi:ne180100]<QMIMav20DataSubscriptionCommandDriver,std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver*)#1},void>((uint64_t *)&v8, v7);
      *(_OWORD *)a2 = v8;
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
  }
  return result;
}

void sub_216979EF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10F3C40C6CAB3ECLL);
  _Unwind_Resume(a1);
}

void QMIDataSubscriptionCommandDriver::~QMIDataSubscriptionCommandDriver(QMIDataSubscriptionCommandDriver *this)
{
  *(_QWORD *)this = &off_24D5D2B20;
  std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy((uint64_t)this + 208, *((_QWORD **)this + 27));
  if (*((_BYTE *)this + 200))
    qmi::Client::~Client((QMIDataSubscriptionCommandDriver *)((char *)this + 168));
  if (*((_BYTE *)this + 160))
    qmi::Client::~Client((QMIDataSubscriptionCommandDriver *)((char *)this + 128));
  DataSubscriptionBaseCommandDriver::~DataSubscriptionBaseCommandDriver(this);
}

{
  QMIDataSubscriptionCommandDriver::~QMIDataSubscriptionCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void QMIDataSubscriptionCommandDriver::bootstrap(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  qmi::Client *v8;
  uint8_t v9[16];
  __int128 v10;
  unsigned __int8 v11;

  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Initializing command driver", v9, 2u);
  }
  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v6;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(v9, a1);
  if (*(unsigned __int8 *)(a1 + 160) == v11)
  {
    if (!*(_BYTE *)(a1 + 160))
      goto LABEL_13;
    std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](a1 + 144, &v10);
  }
  else
  {
    v8 = (qmi::Client *)(a1 + 128);
    if (*(_BYTE *)(a1 + 160))
    {
      qmi::Client::~Client(v8);
      *(_BYTE *)(a1 + 160) = 0;
    }
    else
    {
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(a1 + 136) = 0;
      *(_OWORD *)(a1 + 144) = v10;
      v10 = 0uLL;
      *(_BYTE *)(a1 + 160) = 1;
    }
  }
  if (v11)
    qmi::Client::~Client((qmi::Client *)v9);
LABEL_13:
  if (*(_BYTE *)(a1 + 160))
    ++*(_DWORD *)(a1 + 232);
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 120))(v9, a1);
  if (*(_BYTE *)(a1 + 200))
  {
    std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](a1 + 184, &v10);
  }
  else
  {
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 184) = v10;
    v10 = 0uLL;
    *(_BYTE *)(a1 + 200) = 1;
  }
  qmi::Client::~Client((qmi::Client *)v9);
  if (*(_BYTE *)(a1 + 200))
    ++*(_DWORD *)(a1 + 232);
}

void QMIDataSubscriptionCommandDriver::start(QMIDataSubscriptionCommandDriver *this)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", v3, 2u);
  }
  if (*((_BYTE *)this + 160))
    qmi::Client::start((QMIDataSubscriptionCommandDriver *)((char *)this + 128));
  if (*((_BYTE *)this + 200))
    qmi::Client::start((QMIDataSubscriptionCommandDriver *)((char *)this + 168));
}

void QMIDataSubscriptionCommandDriver::stop(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping", v3, 2u);
  }
  if (*(_BYTE *)(a1 + 160))
    qmi::Client::stop((qmi::Client *)(a1 + 128));
  if (*(_BYTE *)(a1 + 200))
    qmi::Client::stop((qmi::Client *)(a1 + 168));
}

uint64_t QMIDataSubscriptionCommandDriver::basebandRequireAirplaneMode(QMIDataSubscriptionCommandDriver *this)
{
  if (capabilities::ct::supportsDynamicSID(this))
    return 2;
  else
    return 0;
}

uint64_t QMIDataSubscriptionCommandDriver::requireSimInfoForConfiguration(QMIDataSubscriptionCommandDriver *this)
{
  return 1;
}

void QMIDataSubscriptionCommandDriver::registered(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v18) = 136315138;
    *(_QWORD *)((char *)&v18 + 4) = qmi::asShortString();
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I QMI Client (%s) registered", (uint8_t *)&v18, 0xCu);
  }
  QMIDataSubscriptionCommandDriver::verifyClientService_sync((_BYTE *)a1, a2);
  v6 = (_QWORD *)(a1 + 216);
  v5 = *(_QWORD *)(a1 + 216);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v5;
        v8 = *(unsigned __int8 *)(v5 + 25);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_11;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_11;
      }
    }
    v11 = *(_QWORD *)(a1 + 224);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 216);
LABEL_11:
    v9 = operator new(0x20uLL);
    v9[25] = a2;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = v9;
    v10 = **(_QWORD **)(a1 + 208);
    if (v10)
    {
      *(_QWORD *)(a1 + 208) = v10;
      v9 = (_BYTE *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 216), (uint64_t *)v9);
    v11 = *(_QWORD *)(a1 + 224) + 1;
    *(_QWORD *)(a1 + 224) = v11;
  }
  if (v11 == *(_DWORD *)(a1 + 232))
  {
    v12 = *(std::__shared_weak_count **)(a1 + 56);
    if (v12)
    {
      v13 = std::__shared_weak_count::lock(v12);
      *((_QWORD *)&v18 + 1) = v13;
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)&v18 = v15;
        if (v15)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, 1);
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 160) && qmi::Client::getSvcType((qmi::Client *)(a1 + 128)) == a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if (*(_BYTE *)(a1 + 200))
  {
    if (qmi::Client::getSvcType((qmi::Client *)(a1 + 168)) == a2)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  }
}

void sub_21697A44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t QMIDataSubscriptionCommandDriver::verifyClientService_sync(_BYTE *a1, int a2)
{
  uint64_t result;

  if (!a1[160] || (result = qmi::Client::getSvcType((qmi::Client *)(a1 + 128)), (_DWORD)result != a2))
  {
    if (!a1[200])
      return __TUAssertTrigger();
    result = qmi::Client::getSvcType((qmi::Client *)(a1 + 168));
    if ((_DWORD)result != a2)
      return __TUAssertTrigger();
  }
  return result;
}

void QMIDataSubscriptionCommandDriver::deregistered(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v21) = 136315138;
    *(_QWORD *)((char *)&v21 + 4) = qmi::asShortString();
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I QMI Client (%s) deregistered", (uint8_t *)&v21, 0xCu);
  }
  QMIDataSubscriptionCommandDriver::verifyClientService_sync((_BYTE *)a1, a2);
  if (a2 == 42)
    DataSubscriptionBaseCommandDriver::operationCompleted_sync();
  v5 = *(uint64_t **)(a1 + 216);
  if (v5)
  {
    v6 = a1 + 216;
    v7 = *(_QWORD *)(a1 + 216);
    do
    {
      v8 = *(unsigned __int8 *)(v7 + 25);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (uint64_t *)v7;
      else
        v10 = (uint64_t *)(v7 + 8);
      if (v9)
        v6 = v7;
      v7 = *v10;
    }
    while (*v10);
    if (v6 != a1 + 216 && *(unsigned __int8 *)(v6 + 25) <= a2)
    {
      v11 = *(_QWORD **)(v6 + 8);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        v13 = (_QWORD *)v6;
        do
        {
          v12 = (_QWORD *)v13[2];
          v14 = *v12 == (_QWORD)v13;
          v13 = v12;
        }
        while (!v14);
      }
      if (*(_QWORD *)(a1 + 208) == v6)
        *(_QWORD *)(a1 + 208) = v12;
      --*(_QWORD *)(a1 + 224);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, (uint64_t *)v6);
      operator delete((void *)v6);
    }
  }
  if (!*(_QWORD *)(a1 + 224))
  {
    v15 = *(std::__shared_weak_count **)(a1 + 56);
    if (v15)
    {
      v16 = std::__shared_weak_count::lock(v15);
      *((_QWORD *)&v21 + 1) = v16;
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)&v21 = v18;
        if (v18)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0);
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
}

void sub_21697A6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIDataSubscriptionCommandDriver::handleDataSubscriptionRegistered_sync(QMIDataSubscriptionCommandDriver *this)
{
  const void **v2;
  char *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  _QWORD v28[6];
  std::__shared_weak_count *v29;
  _QWORD v30[6];
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  uint64_t aBlock;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  void *v40;
  _QWORD *v41;

  v35 = 0u;
  v36 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v35);
  v2 = (const void **)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1) != (_QWORD)v36)
  {
    while (*((_BYTE *)*v2 + 8) != 24)
    {
      if (++v2 == (const void **)v36)
        goto LABEL_8;
    }
  }
  if (v2 == (const void **)v36)
  {
LABEL_8:
    v5 = operator new();
    v6 = v5;
    *(_WORD *)(v5 + 8) = 24;
    *(_QWORD *)v5 = &off_24D5D2F10;
    v7 = v36;
    if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
    {
      v9 = (uint64_t)(v36 - *((_QWORD *)&v35 + 1)) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v10 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v35 + 1)) >> 2;
      if (v10 <= v9 + 1)
        v10 = v9 + 1;
      if (*((_QWORD *)&v36 + 1) - *((_QWORD *)&v35 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v36 + 8, v11);
      else
        v12 = 0;
      v13 = (uint64_t *)&v12[8 * v9];
      v14 = &v12[8 * v11];
      *v13 = v6;
      v8 = v13 + 1;
      v16 = (char *)*((_QWORD *)&v35 + 1);
      v15 = (char *)v36;
      if ((_QWORD)v36 != *((_QWORD *)&v35 + 1))
      {
        do
        {
          v17 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v13 = v17;
        }
        while (v15 != v16);
        v15 = (char *)*((_QWORD *)&v35 + 1);
      }
      *((_QWORD *)&v35 + 1) = v13;
      *(_QWORD *)&v36 = v8;
      *((_QWORD *)&v36 + 1) = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v36 = v5;
      v8 = (_QWORD *)(v7 + 8);
    }
    v4 = (_BYTE *)(v6 + 9);
    *(_QWORD *)&v36 = v8;
  }
  else
  {
    if (!v3)
      __cxa_bad_cast();
    v4 = v3 + 9;
  }
  *v4 = 1;
  v30[5] = (char *)this + 128;
  v31 = QMIServiceMsg::create();
  v32 = 25000;
  v33 = 0;
  v34 = 0;
  v18 = MEMORY[0x24BDAC760];
  v30[0] = MEMORY[0x24BDAC760];
  v30[1] = 0x40000000;
  v30[2] = ___ZN32QMIDataSubscriptionCommandDriver46sendRegisterForCurrentDataSubscriptionInd_syncEv_block_invoke;
  v30[3] = &__block_descriptor_tmp_22_5;
  v30[4] = this;
  aBlock = MEMORY[0x24BDAC760];
  v38 = 0x40000000;
  v39 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dsd18RegisterIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
  v40 = &unk_24D5D2F40;
  v41 = v30;
  v19 = _Block_copy(&aBlock);
  v34 = v19;
  if (v31)
  {
    qmi::Client::send();
    v19 = v34;
  }
  if (v19)
    _Block_release(v19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v35);
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&aBlock, (_QWORD *)this + 1);
  v21 = aBlock;
  v20 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v22 = (unint64_t *)(v38 + 16);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v28[0] = v18;
  v28[1] = 1174405120;
  v28[2] = ___ZN32QMIDataSubscriptionCommandDriver37handleDataSubscriptionRegistered_syncEv_block_invoke;
  v28[3] = &__block_descriptor_tmp_18;
  v28[4] = this;
  v28[5] = v21;
  v29 = v20;
  if (v20)
  {
    p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
  }
  (*(void (**)(QMIDataSubscriptionCommandDriver *, _QWORD *))(*(_QWORD *)this + 104))(this, v28);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
}

void sub_21697A9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::__shared_weak_count *v22;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(exception_object);
}

void ___ZN32QMIDataSubscriptionCommandDriver37handleDataSubscriptionRegistered_syncEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v16 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v13 = v6;
LABEL_15:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  v7 = *(std::__shared_weak_count **)(v5 + 56);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)(v5 + 48);
      if (v10)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, a2);
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v13 = v16;
  if (v16)
    goto LABEL_15;
}

void sub_21697AB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void QMIDataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(QMIDataSubscriptionCommandDriver *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v10 = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 6);
      v9 = v5;
      if (v5)
      {
        SubscriptionSlotConfiguration::SubscriptionSlotConfiguration((SubscriptionSlotConfiguration *)v8);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 40))(v5, v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_21697ABDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t QMIDataSubscriptionCommandDriver::isDriverReady_sync(QMIDataSubscriptionCommandDriver *this)
{
  unsigned int SvcType;
  uint64_t **i;
  unsigned int v4;
  unsigned int v5;
  uint64_t **j;
  unsigned int v7;

  if (*((_BYTE *)this + 160))
  {
    SvcType = qmi::Client::getSvcType((QMIDataSubscriptionCommandDriver *)((char *)this + 128));
    for (i = (uint64_t **)*((_QWORD *)this + 27); i; i = (uint64_t **)*i)
    {
      v4 = *((unsigned __int8 *)i + 25);
      if (SvcType >= v4)
      {
        if (v4 >= SvcType)
          goto LABEL_8;
        ++i;
      }
    }
    return 0;
  }
LABEL_8:
  if (*((_BYTE *)this + 200))
  {
    v5 = qmi::Client::getSvcType((QMIDataSubscriptionCommandDriver *)((char *)this + 168));
    for (j = (uint64_t **)*((_QWORD *)this + 27); j; j = (uint64_t **)*j)
    {
      v7 = *((unsigned __int8 *)j + 25);
      if (v5 >= v7)
      {
        if (v7 >= v5)
          return 1;
        ++j;
      }
    }
    return 0;
  }
  return 1;
}

void QMIDataSubscriptionCommandDriver::handleQueryCurrentDataSubscription_sync(uint64_t a1, uint64_t a2)
{
  void *v4;
  _QWORD v5[6];
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  _OWORD v10[2];
  _QWORD aBlock[5];

  memset(v10, 0, sizeof(v10));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v10);
  v5[5] = a1 + 128;
  v6 = QMIServiceMsg::create();
  v7 = 25000;
  v8 = 0;
  v9 = 0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZN32QMIDataSubscriptionCommandDriver39handleQueryCurrentDataSubscription_syncEU13block_pointerFvN10subscriber7SimSlotEE_block_invoke;
  v5[3] = &unk_24D5D2BE8;
  v5[4] = a2;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dsd23CurrentDataSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5D2E78;
  aBlock[4] = v5;
  v4 = _Block_copy(aBlock);
  v9 = v4;
  if (v6)
  {
    qmi::Client::send();
    v4 = v9;
  }
  if (v4)
    _Block_release(v4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
}

void sub_21697AD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN32QMIDataSubscriptionCommandDriver39handleQueryCurrentDataSubscription_syncEU13block_pointerFvN10subscriber7SimSlotEE_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t TlvValue;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v9 = TlvValue;
    tlv::parseV<dsd::tlv::CurrentDataSubscription>((unint64_t *)&v9, v5);
    if (!v9)
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 16, v6, v7);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void QMIDataSubscriptionCommandDriver::handleConfigureSubscription_sync(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  const void **v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  _QWORD v42[5];
  int v43;
  _QWORD v44[8];
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  void *__p[2];
  __int128 v50;
  uint64_t v51;
  _QWORD aBlock[5];

  v5 = *a2;
  v6 = MEMORY[0x24BDAC760];
  v42[0] = MEMORY[0x24BDAC760];
  v42[1] = 0x40000000;
  v42[2] = ___ZN32QMIDataSubscriptionCommandDriver32handleConfigureSubscription_syncERK29SubscriptionSlotConfigurationRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN10subscriber7SimSlotE_block_invoke;
  v42[3] = &__block_descriptor_tmp_7_6;
  v42[4] = a1;
  v43 = a4;
  v51 = v5;
  if ((SubscriptionSlotConfiguration::isValid() & 1) != 0)
  {
    *(_OWORD *)__p = 0u;
    v50 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    if (DataSubscriptionBaseCommandDriver::isValidSlot_sync())
    {
      v7 = v51;
      v8 = (const void **)__p[1];
      if (__p[1] != (void *)v50)
      {
        while (*((_BYTE *)*v8 + 8) != 16)
        {
          if (++v8 == (const void **)v50)
            goto LABEL_11;
        }
      }
      if (v8 == (const void **)v50)
      {
LABEL_11:
        v11 = operator new();
        v12 = v11;
        *(_WORD *)(v11 + 8) = 16;
        *(_QWORD *)v11 = &off_24D5D3050;
        v13 = v50;
        if ((unint64_t)v50 >= *((_QWORD *)&v50 + 1))
        {
          v15 = (uint64_t)(v50 - (unint64_t)__p[1]) >> 3;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v16 = (uint64_t)(*((_QWORD *)&v50 + 1) - (unint64_t)__p[1]) >> 2;
          if (v16 <= v15 + 1)
            v16 = v15 + 1;
          if (*((_QWORD *)&v50 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v50 + 8, v17);
          else
            v18 = 0;
          v19 = (uint64_t *)&v18[8 * v15];
          v20 = &v18[8 * v17];
          *v19 = v12;
          v14 = v19 + 1;
          v22 = (char *)__p[1];
          v21 = (char *)v50;
          if ((void *)v50 != __p[1])
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v19 = v23;
            }
            while (v21 != v22);
            v21 = (char *)__p[1];
          }
          __p[1] = v19;
          *(_QWORD *)&v50 = v14;
          *((_QWORD *)&v50 + 1) = v20;
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v50 = v11;
          v14 = (_QWORD *)(v13 + 8);
        }
        v10 = (_BYTE *)(v12 + 9);
        *(_QWORD *)&v50 = v14;
      }
      else
      {
        if (!v9)
          __cxa_bad_cast();
        v10 = v9 + 9;
      }
      if ((v7 - 1) <= 2)
        *v10 = v7;
    }
    if (DataSubscriptionBaseCommandDriver::isValidSlot_sync())
    {
      v24 = HIDWORD(v51);
      v25 = (const void **)__p[1];
      if (__p[1] != (void *)v50)
      {
        while (*((_BYTE *)*v25 + 8) != 17)
        {
          if (++v25 == (const void **)v50)
            goto LABEL_38;
        }
      }
      if (v25 == (const void **)v50)
      {
LABEL_38:
        v28 = operator new();
        v29 = v28;
        *(_WORD *)(v28 + 8) = 17;
        *(_QWORD *)v28 = &off_24D5D30A0;
        v30 = v50;
        if ((unint64_t)v50 >= *((_QWORD *)&v50 + 1))
        {
          v32 = (uint64_t)(v50 - (unint64_t)__p[1]) >> 3;
          if ((unint64_t)(v32 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v33 = (uint64_t)(*((_QWORD *)&v50 + 1) - (unint64_t)__p[1]) >> 2;
          if (v33 <= v32 + 1)
            v33 = v32 + 1;
          if (*((_QWORD *)&v50 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v50 + 8, v34);
          else
            v35 = 0;
          v36 = (uint64_t *)&v35[8 * v32];
          v37 = &v35[8 * v34];
          *v36 = v29;
          v31 = v36 + 1;
          v39 = (char *)__p[1];
          v38 = (char *)v50;
          if ((void *)v50 != __p[1])
          {
            do
            {
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *--v36 = v40;
            }
            while (v38 != v39);
            v38 = (char *)__p[1];
          }
          __p[1] = v36;
          *(_QWORD *)&v50 = v31;
          *((_QWORD *)&v50 + 1) = v37;
          if (v38)
            operator delete(v38);
        }
        else
        {
          *(_QWORD *)v50 = v28;
          v31 = (_QWORD *)(v30 + 8);
        }
        v27 = (_BYTE *)(v29 + 9);
        *(_QWORD *)&v50 = v31;
      }
      else
      {
        if (!v26)
          __cxa_bad_cast();
        v27 = v26 + 9;
      }
      if ((v24 - 1) <= 2)
        *v27 = v24;
    }
    v44[7] = a1 + 168;
    v45 = QMIServiceMsg::create();
    v46 = 25000;
    v47 = 0;
    v48 = 0;
    v44[0] = v6;
    v44[1] = 0x40000000;
    v44[2] = ___ZN32QMIDataSubscriptionCommandDriver35sendProvisioningSessionToSlots_syncE29SubscriptionSlotConfigurationU13block_pointerFvbE_block_invoke;
    v44[3] = &unk_24D5D2D90;
    v44[5] = a1;
    v44[6] = v51;
    v44[4] = v42;
    aBlock[0] = v6;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim28MapProvisioningSessionToSlot8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_24D5D30D0;
    aBlock[4] = v44;
    v41 = _Block_copy(aBlock);
    v48 = v41;
    if (v45)
    {
      qmi::Client::send();
      v41 = v48;
    }
    if (v41)
      _Block_release(v41);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    ___ZN32QMIDataSubscriptionCommandDriver32handleConfigureSubscription_syncERK29SubscriptionSlotConfigurationRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN10subscriber7SimSlotE_block_invoke((uint64_t)v42, 1);
  }
}

void sub_21697B280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,char a27)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

uint64_t ___ZN32QMIDataSubscriptionCommandDriver32handleConfigureSubscription_syncERK29SubscriptionSlotConfigurationRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN10subscriber7SimSlotE_block_invoke(uint64_t a1, char a2)
{
  _BYTE *v3;

  v3 = *(_BYTE **)(a1 + 32);
  if ((a2 & 1) != 0 && v3[160])
    return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)v3 + 96))(v3, *(unsigned int *)(a1 + 40), 1);
  else
    return DataSubscriptionBaseCommandDriver::operationCompleted_sync();
}

void QMIDataSubscriptionCommandDriver::handleChangeDefaultDataSubscription_sync(uint64_t a1, int a2, int a3)
{
  const void **v6;
  const void **v7;
  char *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  const void **v17;
  char *v18;
  char *v19;
  char *v20;
  const void *v21;
  const void **i;
  char *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  _QWORD v39[6];
  uint64_t v40;
  int v41;
  uint64_t v42;
  void *v43;
  void *__p[2];
  __int128 v45;
  _QWORD aBlock[5];

  if (*(_BYTE *)(a1 + 160) && (subscriber::isValidSimSlot() & 1) != 0)
  {
    *(_OWORD *)__p = 0u;
    v45 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v6 = (const void **)__p[1];
    v7 = (const void **)v45;
    if (__p[1] != (void *)v45)
    {
      while (*((_BYTE *)*v6 + 8) != 1)
      {
        if (++v6 == (const void **)v45)
          goto LABEL_11;
      }
    }
    if (v6 == (const void **)v45)
    {
LABEL_11:
      v10 = operator new();
      v11 = v10;
      *(_BYTE *)(v10 + 8) = 1;
      *(_QWORD *)v10 = &off_24D5D2F88;
      *(_DWORD *)(v10 + 12) = 0;
      v9 = (_DWORD *)(v10 + 12);
      v12 = v45;
      if ((unint64_t)v45 >= *((_QWORD *)&v45 + 1))
      {
        v13 = (uint64_t)(v45 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = (uint64_t)(*((_QWORD *)&v45 + 1) - (unint64_t)__p[1]) >> 2;
        if (v14 <= v13 + 1)
          v14 = v13 + 1;
        if (*((_QWORD *)&v45 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v45 + 8, v15);
        else
          v16 = 0;
        v17 = (const void **)&v16[8 * v13];
        v18 = &v16[8 * v15];
        *v17 = (const void *)v11;
        v7 = v17 + 1;
        v20 = (char *)__p[1];
        v19 = (char *)v45;
        if ((void *)v45 != __p[1])
        {
          do
          {
            v21 = (const void *)*((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v17 = v21;
          }
          while (v19 != v20);
          v19 = (char *)__p[1];
        }
        __p[1] = v17;
        *(_QWORD *)&v45 = v7;
        *((_QWORD *)&v45 + 1) = v18;
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v45 = v10;
        v7 = (const void **)(v12 + 8);
      }
      *(_QWORD *)&v45 = v7;
    }
    else
    {
      if (!v8)
        __cxa_bad_cast();
      v9 = v8 + 12;
    }
    if ((a2 - 1) <= 1)
      *v9 = a2;
    for (i = (const void **)__p[1]; i != v7; ++i)
    {
      if (*((_BYTE *)*i + 8) == 16)
      {
        if (i != v7)
        {
          if (!v23)
            __cxa_bad_cast();
          v24 = v23 + 12;
          goto LABEL_54;
        }
        break;
      }
    }
    v25 = operator new();
    v26 = v25;
    *(_BYTE *)(v25 + 8) = 16;
    *(_QWORD *)v25 = &off_24D5D2FD8;
    *(_DWORD *)(v25 + 12) = 0;
    v24 = (_DWORD *)(v25 + 12);
    v27 = v45;
    if ((unint64_t)v45 >= *((_QWORD *)&v45 + 1))
    {
      v29 = (uint64_t)(v45 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v29 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v30 = (uint64_t)(*((_QWORD *)&v45 + 1) - (unint64_t)__p[1]) >> 2;
      if (v30 <= v29 + 1)
        v30 = v29 + 1;
      if (*((_QWORD *)&v45 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      if (v31)
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v45 + 8, v31);
      else
        v32 = 0;
      v33 = (uint64_t *)&v32[8 * v29];
      v34 = &v32[8 * v31];
      *v33 = v26;
      v28 = v33 + 1;
      v36 = (char *)__p[1];
      v35 = (char *)v45;
      if ((void *)v45 != __p[1])
      {
        do
        {
          v37 = *((_QWORD *)v35 - 1);
          v35 -= 8;
          *--v33 = v37;
        }
        while (v35 != v36);
        v35 = (char *)__p[1];
      }
      __p[1] = v33;
      *(_QWORD *)&v45 = v28;
      *((_QWORD *)&v45 + 1) = v34;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *(_QWORD *)v45 = v25;
      v28 = (_QWORD *)(v27 + 8);
    }
    *(_QWORD *)&v45 = v28;
LABEL_54:
    *v24 = a3 != 1;
    v39[5] = a1 + 128;
    v40 = QMIServiceMsg::create();
    v41 = 25000;
    v42 = 0;
    v43 = 0;
    v39[0] = MEMORY[0x24BDAC760];
    v39[1] = 0x40000000;
    v39[2] = ___ZN32QMIDataSubscriptionCommandDriver41sendDefaultDataSubscriptionSwitchReq_syncEN10subscriber7SimSlotEb_block_invoke;
    v39[3] = &__block_descriptor_tmp_23_2;
    v39[4] = a1;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dsd22SwitchDataSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_24D5D3008;
    aBlock[4] = v39;
    v38 = _Block_copy(aBlock);
    v43 = v38;
    if (v40)
    {
      qmi::Client::send();
      v38 = v43;
    }
    if (v38)
      _Block_release(v38);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    DataSubscriptionBaseCommandDriver::operationCompleted_sync();
  }
}

void sub_21697B714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

void QMIDataSubscriptionCommandDriver::registerDataSubscriptionClient_sync(QMIDataSubscriptionCommandDriver *this@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[6];
  std::__shared_weak_count *v28;
  _QWORD v29[6];
  std::__shared_weak_count *v30;
  void *v31;
  uint64_t v32;
  void (*v33)(_QWORD *);
  void *v34;
  QMIDataSubscriptionCommandDriver *v35;
  void *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD *);
  void *v41;
  QMIDataSubscriptionCommandDriver *v42;
  void *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  void *v50;
  char v51;
  dispatch_object_t v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  uint64_t v56;
  void (*v57)(uint64_t, QMIServiceMsg *);
  void *v58;
  _QWORD *v59;

  if (capabilities::ct::supportsDynamicSID(this))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
    std::string::basic_string[abi:ne180100]<0>(&v55, *((char **)this + 10));
    v4 = *((_QWORD *)this + 3);
    v52 = v4;
    if (v4)
      dispatch_retain(v4);
    std::string::basic_string[abi:ne180100]<0>(&v50, "dsd");
    std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v46, (_QWORD *)this + 1);
    v48 = v46;
    v49 = v47;
    if (v47)
    {
      p_shared_weak_owners = (unint64_t *)&v47->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
    }
    Registry::getServerConnection(*((Registry **)this + 8));
    qmi::Client::createWithQueueLocal();
    if (v45)
    {
      p_shared_owners = &v45->__shared_owners_;
      do
        v8 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v8 - 1, (unint64_t *)p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v49)
      std::__shared_weak_count::__release_weak(v49);
    v9 = v47;
    if (v47)
    {
      v10 = (unint64_t *)&v47->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v51 < 0)
      operator delete(v50);
    if (v52)
      dispatch_release(v52);
    if (SHIBYTE(v57) < 0)
      operator delete(v55);
    std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v55, (_QWORD *)this + 1);
    v13 = v55;
    v12 = (std::__shared_weak_count *)v56;
    if (v56)
    {
      v14 = (unint64_t *)(v56 + 16);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v18 = (void *)MEMORY[0x24BDAC760];
    v38 = MEMORY[0x24BDAC760];
    v39 = 1174405120;
    v40 = ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke;
    v41 = &__block_descriptor_tmp_10_6;
    v42 = this;
    v43 = v13;
    v44 = v12;
    if (v12)
    {
      v19 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    qmi::Client::setHandler();
    v31 = v18;
    v32 = 1174405120;
    v33 = ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke_11;
    v34 = &__block_descriptor_tmp_12_8;
    v35 = this;
    v36 = v13;
    v37 = v12;
    if (v12)
    {
      v21 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    qmi::Client::setHandler();
    v29[0] = v18;
    v29[1] = 1174405120;
    v29[2] = ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke_13;
    v29[3] = &__block_descriptor_tmp_14_6;
    v29[4] = this;
    v29[5] = v13;
    v30 = v12;
    if (v12)
    {
      v23 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v55 = v18;
    v56 = 0x40000000;
    v57 = ___ZNK3qmi6Client13setIndHandlerIRKN3dsd27CurrentDataSubscriptionInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    v58 = &unk_24D5D2EA0;
    v59 = v29;
    qmi::Client::setIndHandler();
    v27[0] = v18;
    v27[1] = 1174405120;
    v27[2] = ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke_15;
    v27[3] = &__block_descriptor_tmp_16_6;
    v27[4] = this;
    v27[5] = v13;
    v28 = v12;
    if (v12)
    {
      v25 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v55 = v18;
    v56 = 0x40000000;
    v57 = ___ZNK3qmi6Client13setIndHandlerIRKN3dsd22SwitchDataSubscription10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    v58 = &unk_24D5D2EC8;
    v59 = v27;
    qmi::Client::setIndHandler();
    qmi::Client::setIndShouldWake((qmi::Client *)&v53);
    qmi::Client::setIndShouldWake((qmi::Client *)&v53);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = v54;
    v54 = 0uLL;
    *(_BYTE *)(a2 + 32) = 1;
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
    if (v30)
      std::__shared_weak_count::__release_weak(v30);
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
    if (v44)
      std::__shared_weak_count::__release_weak(v44);
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    qmi::Client::~Client((qmi::Client *)&v53);
  }
}

void sub_21697BB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,char a37)
{
  std::__shared_weak_count *v37;
  uint64_t v38;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a22)
    std::__shared_weak_count::__release_weak(a22);
  if (a29)
    std::__shared_weak_count::__release_weak(a29);
  if (a36)
    std::__shared_weak_count::__release_weak(a36);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  qmi::Client::~Client((qmi::Client *)(v38 - 144));
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        QMIDataSubscriptionCommandDriver::registered(v3, 0x2Au);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21697BCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke_11(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        QMIDataSubscriptionCommandDriver::deregistered(v3, 0x2Au);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21697BD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke_13(uint64_t a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t TlvValue;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;

  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (*(_QWORD *)(a1 + 40))
      {
        TlvValue = qmi::MessageBase::findTlvValue(a2);
        v9 = TlvValue;
        if (TlvValue)
        {
          v10 = v8;
          v13 = TlvValue;
          tlv::parseV<dsd::tlv::CurrentDataSubscription>((unint64_t *)&v13, v8);
          if (!v13)
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 1, v9, v10);
        }
        DataSubscriptionBaseCommandDriver::operationCompleted_sync();
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_21697BEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke_15(uint64_t a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t TlvValue;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;

  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_10;
      TlvValue = qmi::MessageBase::findTlvValue(a2);
      v9 = TlvValue;
      if (TlvValue)
      {
        v10 = v8;
        v14 = TlvValue;
        v11 = tlv::parseV<dsd::tlv::DefaultDataSwitchResult>((unint64_t *)&v14, v8);
        if (v14)
        {
          if (!v11)
          {
LABEL_10:
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        else
        {
          ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 1, v9, v10);
        }
      }
      DataSubscriptionBaseCommandDriver::operationCompleted_sync();
      goto LABEL_10;
    }
  }
}

void sub_21697BFCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMIDataSubscriptionCommandDriver::registerSubscriptionConfigurationClient_sync(QMIDataSubscriptionCommandDriver *this@<X0>, _OWORD *a2@<X8>)
{
  NSObject *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  char v26;
  dispatch_object_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  char v30;

  *a2 = 0u;
  a2[1] = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v28, *((char **)this + 10));
  v3 = *((_QWORD *)this + 3);
  v27 = v3;
  if (v3)
    dispatch_retain(v3);
  std::string::basic_string[abi:ne180100]<0>(&v25, "sim");
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v21, (_QWORD *)this + 1);
  v23 = v21;
  v24 = v22;
  if (v22)
  {
    p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  Registry::getServerConnection(*((Registry **)this + 8));
  qmi::Client::createWithQueueLocal();
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)())v20->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v26 < 0)
    operator delete(v25);
  if (v27)
    dispatch_release(v27);
  if (v30 < 0)
    operator delete(v28);
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v28, (_QWORD *)this + 1);
  v11 = v29;
  if (v29)
  {
    v12 = (unint64_t *)&v29->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v11)
  {
    v16 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  qmi::Client::setHandler();
  if (v11)
  {
    v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  qmi::Client::setHandler();
  if (v11)
  {
    std::__shared_weak_count::__release_weak(v11);
    std::__shared_weak_count::__release_weak(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_21697C27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,char a26)
{
  qmi::Client *v26;
  std::__shared_weak_count *v27;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  qmi::Client::~Client(v26);
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        QMIDataSubscriptionCommandDriver::registered(v3, 0xBu);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21697C3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke_19(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        QMIDataSubscriptionCommandDriver::deregistered(v3, 0xBu);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_21697C480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver46sendRegisterForCurrentDataSubscriptionInd_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (*(_DWORD *)(a2 + 4))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v3 = 0;
      _os_log_error_impl(&dword_216897000, v2, OS_LOG_TYPE_ERROR, "Failed to register for current data subscription ind", v3, 2u);
    }
  }
}

uint64_t ___ZN32QMIDataSubscriptionCommandDriver41sendDefaultDataSubscriptionSwitchReq_syncEN10subscriber7SimSlotEb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a2 + 4))
    return DataSubscriptionBaseCommandDriver::operationCompleted_sync();
  return result;
}

uint64_t ___ZN32QMIDataSubscriptionCommandDriver35sendProvisioningSessionToSlots_syncE29SubscriptionSlotConfigurationU13block_pointerFvbE_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = subscriber::asString();
      v7 = subscriber::asString();
      v8 = *(_DWORD *)(a2 + 4);
      v9 = 136315906;
      v10 = v6;
      v11 = 2080;
      v12 = v7;
      v13 = 1024;
      v14 = v8;
      v15 = 2080;
      v16 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v4, OS_LOG_TYPE_ERROR, "Configuration (%s, %s) falled 0x%04x (%s)", (uint8_t *)&v9, 0x26u);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t *std::shared_ptr<QMIDataSubscriptionCommandDriver>::shared_ptr[abi:ne180100]<QMIDataSubscriptionCommandDriver,std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D2DC0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_21697C6AC(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver*)#1}::operator() const(QMIDataSubscriptionCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_21697C6CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIDataSubscriptionCommandDriver *,std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver *)#1},std::allocator<QMIDataSubscriptionCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIDataSubscriptionCommandDriver *,std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver *)#1},std::allocator<QMIDataSubscriptionCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver*)#1}::operator() const(QMIDataSubscriptionCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIDataSubscriptionCommandDriver *,std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver *)#1},std::allocator<QMIDataSubscriptionCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver*)#1}::operator() const(QMIDataSubscriptionCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *std::shared_ptr<QMIMav20DataSubscriptionCommandDriver>::shared_ptr[abi:ne180100]<QMIMav20DataSubscriptionCommandDriver,std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D2E20;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_21697C7DC(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver*)#1}::operator() const(QMIMav20DataSubscriptionCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_21697C7FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIMav20DataSubscriptionCommandDriver *,std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver *)#1},std::allocator<QMIMav20DataSubscriptionCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIMav20DataSubscriptionCommandDriver *,std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver *)#1},std::allocator<QMIMav20DataSubscriptionCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver*)#1}::operator() const(QMIMav20DataSubscriptionCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIMav20DataSubscriptionCommandDriver *,std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver *)#1},std::allocator<QMIMav20DataSubscriptionCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver*)#1}::operator() const(QMIMav20DataSubscriptionCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dsd23CurrentDataSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21697C95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3dsd27CurrentDataSubscriptionInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21697CA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3dsd22SwitchDataSubscription10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21697CB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<dsd::tlv::ReportCurrentDefaultSubscription>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dsd::tlv::ReportCurrentDefaultSubscription>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dsd::tlv::ReportCurrentDefaultSubscription>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dsd::tlv::ReportCurrentDefaultSubscription>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D2F10;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dsd18RegisterIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<dsd::RegisterIndication::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_21697CC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSubscription>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSubscription>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSubscription>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSubscription>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D2F88;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSwitchType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSwitchType>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSwitchType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSwitchType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D2FD8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dsd22SwitchDataSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21697CEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::PrimarySlot>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::PrimarySlot>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<uim::tlv::PrimarySlot>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::PrimarySlot>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D3050;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::SecondarySlot>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::SecondarySlot>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<uim::tlv::SecondarySlot>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::SecondarySlot>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D30A0;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim28MapProvisioningSessionToSlot8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_21697D178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void Mav20QMIAttachApnCommandDriver::create(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  uint8_t buf[24];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  v4 = operator new();
  v5 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  v25 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)buf = v5;
    *(_QWORD *)&buf[8] = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_OWORD *)buf = *a1;
  }
  AttachApnCommandDriver::AttachApnCommandDriver();
  *(_QWORD *)v4 = off_24D5C33B0;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_BYTE *)(v4 + 128) = 0;
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 16))(*(_QWORD *)&buf[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  *(_QWORD *)v4 = &off_24D5D3118;
  *a2 = v4;
  a2[1] = 0;
  v12 = (std::__shared_weak_count *)operator new();
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D3408;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = (uint64_t)v12;
  v14 = *(std::__shared_weak_count **)(v4 + 16);
  if (v14)
  {
    if (v14->__shared_owners_ != -1)
      goto LABEL_26;
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    *(_QWORD *)(v4 + 8) = v4;
    *(_QWORD *)(v4 + 16) = v12;
    std::__shared_weak_count::__release_weak(v14);
  }
  else
  {
    do
      v18 = __ldxr(v13);
    while (__stxr(v18 + 1, v13));
    v19 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)(v4 + 8) = v4;
    *(_QWORD *)(v4 + 16) = v12;
  }
  do
    v21 = __ldaxr(v13);
  while (__stlxr(v21 - 1, v13));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_26:
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v24 = *(NSObject **)(*a2 + 40);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = subscriber::asString();
    _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, "#I Mav20QMIAttachApnCommandDriver created for %s", buf, 0xCu);
  }
}

void sub_21697D450(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Mav20QMIAttachApnCommandDriver::~Mav20QMIAttachApnCommandDriver(Mav20QMIAttachApnCommandDriver *this)
{
  *(_QWORD *)this = off_24D5C33B0;
  qmi::Client::~Client((Mav20QMIAttachApnCommandDriver *)((char *)this + 96));
  AttachApnCommandDriver::~AttachApnCommandDriver(this);
}

{
  *(_QWORD *)this = off_24D5C33B0;
  qmi::Client::~Client((Mav20QMIAttachApnCommandDriver *)((char *)this + 96));
  AttachApnCommandDriver::~AttachApnCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void Mav20QMIAttachApnCommandDriver::handleBasebandOn_sync(Mav20QMIAttachApnCommandDriver *this)
{
  qmi::Client *v2;
  const char *v3;
  _DWORD *v4;
  int v5;
  void *v6;
  _QWORD v7[6];
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  _OWORD v12[2];
  _QWORD aBlock[5];

  v2 = (Mav20QMIAttachApnCommandDriver *)((char *)this + 96);
  v3 = (const char *)*MEMORY[0x24BED1E20];
  subscriber::simSlotAsInstance();
  qmi::Client::set(v2, v3);
  memset(v12, 0, sizeof(v12));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12);
  LODWORD(v3) = *((_DWORD *)this + 16);
  v4 = (_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::SubscriptionType>(v12, 1);
  if ((_DWORD)v3 == 2)
    v5 = 2;
  else
    v5 = 1;
  *v4 = v5;
  v7[5] = v2;
  v8 = QMIServiceMsg::create();
  v9 = 25000;
  v10 = 0;
  v11 = 0;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = ___ZN30Mav20QMIAttachApnCommandDriver21bindSubscription_syncEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_19;
  v7[4] = this;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_12;
  aBlock[3] = &unk_24D5D34B0;
  aBlock[4] = v7;
  v6 = _Block_copy(aBlock);
  v11 = v6;
  if (v8)
  {
    qmi::Client::send();
    v6 = v11;
  }
  if (v6)
    _Block_release(v6);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
  QMIAttachApnCommandDriverBase::handleBasebandOn_sync(this);
}

void sub_21697D688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

void ___ZN30Mav20QMIAttachApnCommandDriver21bindSubscription_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = qmi::asString();
      v5 = *(_DWORD *)(a2 + 4);
      v6 = 136315394;
      v7 = v4;
      v8 = 1024;
      v9 = v5;
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Binding subscription: %s (0x%x)", (uint8_t *)&v6, 0x12u);
    }
  }
}

__int128 *Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  unint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  char isa;
  uint64_t (*v12)(uint64_t);
  unint64_t v13;
  const void **v14;
  const void **v15;
  char v16;
  uint64_t v17;
  const void *v18;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t);
  std::string *p_p;
  std::string::size_type size;
  Class v23;
  int *v24;
  int Int;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  uint64_t v35;
  int Bool;
  _QWORD *v37;
  uint64_t v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  char *v42;
  uint64_t v43;
  int *v44;
  int *v45;
  CFTypeID v46;
  const __CFNumber *v47;
  int v48;
  uint64_t v49;
  BOOL *v50;
  BOOL *v51;
  CFTypeID v52;
  const __CFBoolean *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  void *v63;
  dispatch_group_t *v64;
  uint64_t v65;
  NSObject *v66;
  const void **v67;
  char *v68;
  char *v69;
  NSObject *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  std::string *v74;
  std::string::size_type v75;
  _QWORD *v76;
  const void *v77;
  _QWORD *v78;
  uint64_t (*v79)(uint64_t);
  std::string *p_aBlock;
  std::string::size_type v81;
  Class v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  const void **v87;
  const void **v88;
  char v89;
  uint64_t v90;
  const void *v91;
  _QWORD *v92;
  uint64_t (*v93)(uint64_t);
  std::string *v94;
  std::string::size_type v95;
  Class v96;
  const void **v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  dispatch_group_t *v112;
  NSObject *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  std::string *v117;
  std::string::size_type v118;
  _QWORD *v119;
  const void *v120;
  _QWORD *v121;
  uint64_t (*v122)(uint64_t);
  std::string *v123;
  std::string::size_type v124;
  Class v125;
  uint64_t v126;
  NSObject *v127;
  uint64_t v128;
  uint8_t *v129;
  NSObject *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *p_shared_owners;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  NSObject *v138;
  char *v139;
  uint8_t *v140;
  char *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  __int128 *result;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  int v153;
  char v154;
  char *v155;
  char *v156;
  const void **v157;
  uint64_t v158;
  char *v159;
  unsigned int v160;
  NSObject *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  CFTypeRef v166[3];
  CFTypeRef cf;
  NSObject *v168;
  NSObject *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  CFTypeRef v173;
  const void **v174;
  const void **v175;
  uint64_t v176;
  _QWORD v177[2];
  uint64_t (*v178)(uint64_t, _BYTE *);
  void *v179;
  char v180;
  xpc_object_t v181[2];
  uint64_t (*v182)(uint64_t, _BYTE *);
  void *v183;
  char v184;
  char v185;
  const void *v186[2];
  uint64_t (*v187)(uint64_t, _BYTE *);
  void *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, _BYTE *);
  void *v193;
  _BYTE v194[16];
  __int128 v195;
  __int128 v196;
  std::string v197;
  void *v198[2];
  uint64_t v199;
  std::string v200;
  void *v201;
  std::string v202;
  std::string __s;
  __int128 v204;
  __int128 v205;
  _BYTE v206[24];
  std::string __p;
  uint64_t v208;
  unint64_t v209;
  xpc_object_t v210[2];
  void (*v211)(uint64_t, _DWORD *);
  void *v212;
  int v213;
  __CFDictionary *v214[2];
  void (*v215)(uint64_t, _DWORD *);
  void *v216;
  int v217;
  xpc_object_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _BYTE v222[16];
  _OWORD v223[2];
  _QWORD v224[2];
  xpc_object_t object;
  __CFDictionary *v226;
  uint64_t v227;
  std::string aBlock;
  void *v229;
  std::string v230;
  _QWORD v231[3];
  NSObject *v232;
  _QWORD v233[3];
  _QWORD *v234;
  __int128 v235;
  __int128 v236;
  std::string buf;
  uint8_t v238[16];
  __int128 v239;
  dispatch_group_t v240[6];
  void *v241[2];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;

  v254 = *MEMORY[0x24BDAC8D0];
  v236 = 0u;
  v235 = 0u;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v235, a3);
  v6 = *(unsigned __int8 *)(a3 + 32);
  v7 = (char *)operator new(0x20uLL);
  *((_QWORD *)v7 + 1) = 0;
  v8 = (unint64_t *)(v7 + 8);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_24D5D34E0;
  v7[24] = 0;
  v168 = (v7 + 24);
  v169 = v7;
  v9 = dispatch_group_create();
  v10 = v9;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v10);
    dispatch_release(v10);
  }
  isa = (char)a1[16].isa;
  if (!isa)
  {
    v7[24] = 1;
    goto LABEL_283;
  }
  if (!*(_BYTE *)(a2 + 8)
    || (*(_QWORD *)a2
      ? (v12 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      : (v12 = 0),
        !v12))
  {
    v70 = a1[5].isa;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v238 = 0;
      _os_log_impl(&dword_216897000, v70, OS_LOG_TYPE_DEFAULT, "#I dummy push complete", v238, 2u);
    }
    goto LABEL_283;
  }
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&cf, (const void **)a2);
  v160 = *(unsigned __int16 *)(a3 + 64);
  do
    v13 = __ldxr(v8);
  while (__stxr(v13 + 1, v8));
  v233[0] = &off_24D5D3530;
  v233[1] = v7 + 24;
  v166[1] = 0;
  v166[2] = 0;
  v233[2] = v7;
  v234 = v233;
  v174 = 0;
  v175 = 0;
  v176 = 0;
  v173 = cf;
  if (cf)
    CFRetain(cf);
  v153 = v6;
  v154 = isa;
  v155 = v7 + 24;
  v156 = v7;
  v157 = (const void **)a2;
  v161 = v10;
  AttachApnCommandDriver::getApnListForType_sync();
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v173);
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v14 = v174;
  v165 = a1;
  if (v174 == v175)
    goto LABEL_136;
  v15 = v175;
  v16 = 0;
  v159 = (char *)*MEMORY[0x24BDC3DA8];
  v163 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v164 = *MEMORY[0x24BEDB7F0];
  v162 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v17 = 32;
  v158 = MEMORY[0x24BEDB848] + 16;
  do
  {
    v226 = 0;
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)&v226, v14);
    v253 = 0;
    v252 = 0u;
    v251 = 0u;
    v250 = 0u;
    v249 = 0u;
    v248 = 0u;
    v247 = 0u;
    v246 = 0u;
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    *(_OWORD *)v241 = 0u;
    memset(v240, 0, sizeof(v240));
    v239 = 0u;
    *(_OWORD *)v238 = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v238);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v239, (uint64_t)"trying to push 3GPP attach APN ", 31);
    if (v226)
      v20 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v20 = 0;
    if (v20)
    {
      ctu::cf_to_xpc(v226, v18);
      xpc::object::to_string((xpc::object *)&object);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "empty");
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v20)
        goto LABEL_34;
LABEL_33:
      xpc_release(object);
      goto LABEL_34;
    }
    if (v20)
      goto LABEL_33;
LABEL_34:
    v23 = v165[11].isa;
    if (v23)
      (*(void (**)(Class, uint8_t *))(*(_QWORD *)v23 + 48))(v23, v238);
    v224[1] = 0;
    v224[0] = 0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v224, v226);
    memset(v223, 0, sizeof(v223));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v223);
    v218 = (xpc_object_t)MEMORY[0x24BDAC760];
    v219 = 1174405120;
    v220 = (uint64_t)___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke;
    v221 = (uint64_t)&__block_descriptor_tmp_11_5;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v222, (const ctu::cf::dict_adapter *)v224);
    v24 = (int *)qmi::MutableMessageBase::getTLV<wds::tlv::PdpType3GPP>(v223, 17);
    ((void (*)(uint64_t, int *))v220)((uint64_t)&v218, v24);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "AllowedProtocolMaskInRoamingLTE");
    Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v224, (const __CFString *)__p.__r_.__value_.__l.__data_);
    MEMORY[0x2199FDFFC](&__p);
    if ((Int - 1) <= 2)
    {
      v214[0] = (__CFDictionary *)MEMORY[0x24BDAC760];
      v214[1] = (__CFDictionary *)0x40000000;
      v215 = (void (*)(uint64_t, _DWORD *))___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2;
      v216 = &__block_descriptor_tmp_17_6;
      v217 = Int - 1;
      v26 = (_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::LTERoamingPdpType>(v223, 65);
      v215((uint64_t)v214, v26);
    }
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "AllowedProtocolMaskInRoamingUMTS");
    v27 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v224, (const __CFString *)__p.__r_.__value_.__l.__data_);
    MEMORY[0x2199FDFFC](&__p);
    if ((v27 - 1) <= 2)
    {
      v210[0] = (xpc_object_t)MEMORY[0x24BDAC760];
      v210[1] = (xpc_object_t)0x40000000;
      v211 = (void (*)(uint64_t, _DWORD *))___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3;
      v212 = &__block_descriptor_tmp_20_6;
      v213 = v27 - 1;
      v28 = (_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::UMTSRoamingPdpType>(v223, 66);
      v211((uint64_t)v210, v28);
    }
    v29 = *(const void **)(a3 + 40);
    v30 = *(_QWORD *)(a3 + 48);
    v31 = v30 - (_QWORD)v29;
    if ((const void *)v30 != v29)
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v165;
      v32 = v31 >> 1;
      __p.__r_.__value_.__r.__words[2] = 0;
      v208 = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p.__r_.__value_.__l.__size_, v29, v30, v31 >> 1);
      v209 = v32;
      v33 = (_QWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::PcoContainerIds>(v223, 71);
      if (v209 >= 0xB)
      {
        v34 = *(NSObject **)(__p.__r_.__value_.__r.__words[0] + 40);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 10;
          _os_log_impl(&dword_216897000, v34, OS_LOG_TYPE_DEFAULT, "#E Too many container IDs. Using only the first %lu IDs", (uint8_t *)&buf, 0xCu);
        }
      }
      *v33 = 0;
      v33[1] = 0;
      *((_DWORD *)v33 + 4) = 0;
      v35 = v209;
      if (v209 >= 0xA)
        v35 = 10;
      if (v35)
        memmove(v33, (const void *)__p.__r_.__value_.__l.__size_, 2 * v35);
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
    }
    if (v160 >= 0x100)
      *(_BYTE *)qmi::MutableMessageBase::getTLV<wds::tlv::RequestMSISDNUsingPco>(v223, 72) = v160;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "PcscfAddressRequired");
    Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v224, (const __CFString *)__p.__r_.__value_.__l.__data_);
    MEMORY[0x2199FDFFC](&__p);
    v37 = (_QWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::ApnTypeMask>(v223, 221);
    v38 = 1;
    if (Bool)
      v38 = 2;
    *v37 = v38;
    *(_QWORD *)&v204 = MEMORY[0x24BDAC760];
    *((_QWORD *)&v204 + 1) = 1174405120;
    *(_QWORD *)&v205 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_4;
    *((_QWORD *)&v205 + 1) = &__block_descriptor_tmp_24_5;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v206, (const ctu::cf::dict_adapter *)v224);
    v39 = (std::string *)qmi::MutableMessageBase::getTLV<wds::tlv::ApnName>(v223, 20);
    ((void (*)(uint64_t, std::string *))v205)((uint64_t)&v204, v39);
    memset(&__p, 0, sizeof(__p));
    memset(&buf, 0, sizeof(buf));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__s, "username");
    ctu::cf::map_adapter::getString();
    MEMORY[0x2199FDFFC](&__s);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_63;
      aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
      aBlock.__r_.__value_.__l.__size_ = 1174405120;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_26;
      v229 = &__block_descriptor_tmp_27_4;
      std::string::__init_copy_ctor_external(&v230, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
        goto LABEL_63;
      aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
      aBlock.__r_.__value_.__l.__size_ = 1174405120;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_26;
      v229 = &__block_descriptor_tmp_27_4;
      v230 = __p;
    }
    v40 = (std::string *)qmi::MutableMessageBase::getTLV<wds::tlv::UserName>(v223, 27);
    ((void (*)(uint64_t, std::string *))aBlock.__r_.__value_.__r.__words[2])((uint64_t)&aBlock, v40);
    if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v230.__r_.__value_.__l.__data_);
LABEL_63:
    memset(&buf, 0, sizeof(buf));
    memset(&__s, 0, sizeof(__s));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v198, "password");
    ctu::cf::map_adapter::getString();
    MEMORY[0x2199FDFFC](v198);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!buf.__r_.__value_.__l.__size_)
        goto LABEL_72;
      v200.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
      v200.__r_.__value_.__l.__size_ = 1174405120;
      v200.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_29;
      v201 = &__block_descriptor_tmp_30_3;
      std::string::__init_copy_ctor_external(&v202, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((_BYTE *)&buf.__r_.__value_.__s + 23))
        goto LABEL_72;
      v200.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
      v200.__r_.__value_.__l.__size_ = 1174405120;
      v200.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_29;
      v201 = &__block_descriptor_tmp_30_3;
      v202 = buf;
    }
    v41 = (std::string *)qmi::MutableMessageBase::getTLV<wds::tlv::Password>(v223, 28);
    ((void (*)(uint64_t, std::string *))v200.__r_.__value_.__r.__words[2])((uint64_t)&v200, v41);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
LABEL_72:
    memset(&__s, 0, sizeof(__s));
    v198[1] = 0;
    v198[0] = 0;
    v199 = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v227, "auth_type");
    ctu::cf::map_adapter::getString();
    MEMORY[0x2199FDFFC](&v227);
    if (SHIBYTE(v199) < 0)
      operator delete(v198[0]);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__s.__r_.__value_.__l.__size_)
        goto LABEL_81;
      *(_QWORD *)&v195 = MEMORY[0x24BDAC760];
      *((_QWORD *)&v195 + 1) = 1174405120;
      *(_QWORD *)&v196 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_32;
      *((_QWORD *)&v196 + 1) = &__block_descriptor_tmp_34_5;
      std::string::__init_copy_ctor_external(&v197, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
        goto LABEL_81;
      *(_QWORD *)&v195 = MEMORY[0x24BDAC760];
      *((_QWORD *)&v195 + 1) = 1174405120;
      *(_QWORD *)&v196 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_32;
      *((_QWORD *)&v196 + 1) = &__block_descriptor_tmp_34_5;
      v197 = __s;
    }
    v42 = (char *)qmi::MutableMessageBase::getTLV<wds::tlv::AuthPref>(v223, 29);
    ((void (*)(uint64_t, char *))v196)((uint64_t)&v195, v42);
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v197.__r_.__value_.__l.__data_);
LABEL_81:
    v190 = MEMORY[0x24BDAC760];
    v191 = 1174405120;
    v192 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_35;
    v193 = &__block_descriptor_tmp_39_4;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v194, (const ctu::cf::dict_adapter *)v224);
    v43 = qmi::MutableMessageBase::getTLV<wds::tlv::ProxyAddrUsingPco>(v223, 31);
    v192((uint64_t)&v190, (_BYTE *)v43);
    LODWORD(v227) = -1;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v198, "APNClass");
    v44 = (int *)(*(uint64_t (**)(_QWORD *, void *))v224[0])(v224, v198[0]);
    v45 = v44;
    if (v44)
    {
      v46 = CFGetTypeID(v44);
      if (v46 == CFNumberGetTypeID())
        v48 = ctu::cf::assign((ctu::cf *)&v227, v45, v47);
      else
        v48 = 0;
      CFRelease(v45);
    }
    else
    {
      v48 = 0;
    }
    MEMORY[0x2199FDFFC](v198);
    if (v48 && (v227 & 0x80000000) == 0)
    {
      v186[0] = (const void *)MEMORY[0x24BDAC760];
      v186[1] = (const void *)0x40000000;
      v187 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_41;
      v188 = &__block_descriptor_tmp_43_4;
      v189 = v227;
      v49 = qmi::MutableMessageBase::getTLV<wds::tlv::APNClass>(v223, 49);
      v187((uint64_t)v186, (_BYTE *)v49);
    }
    v185 = 1;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v198, v159);
    v50 = (BOOL *)(*(uint64_t (**)(_QWORD *, void *))v224[0])(v224, v198[0]);
    v51 = v50;
    if (v50)
    {
      v52 = CFGetTypeID(v50);
      if (v52 == CFBooleanGetTypeID())
        v54 = ctu::cf::assign((ctu::cf *)&v185, v51, v53);
      else
        v54 = 0;
      CFRelease(v51);
      MEMORY[0x2199FDFFC](v198);
      if (v54)
      {
        v181[0] = (xpc_object_t)MEMORY[0x24BDAC760];
        v181[1] = (xpc_object_t)0x40000000;
        v182 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2_44;
        v183 = &__block_descriptor_tmp_46_4;
        v184 = v185;
        v55 = qmi::MutableMessageBase::getTLV<wds::tlv::RoamingDisallow>(v223, 62);
        v182((uint64_t)v181, (_BYTE *)v55);
      }
    }
    else
    {
      MEMORY[0x2199FDFFC](v198);
    }
    v177[0] = MEMORY[0x24BDAC760];
    v177[1] = 0x40000000;
    v178 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3_47;
    v179 = &__block_descriptor_tmp_49_4;
    v180 = v16 & 1;
    v56 = qmi::MutableMessageBase::getTLV<wds::tlv::Append>(v223, 144);
    v178((uint64_t)v177, (_BYTE *)v56);
    *(_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>(v223, 145) = 0;
    std::vector<wds::SetAttachProfileInfo3GPP::Request>::push_back[abi:ne180100](&v170);
    MEMORY[0x2199FE02C](v194);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MEMORY[0x2199FE02C](v206);
    MEMORY[0x2199FE02C](v222);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v223);
    MEMORY[0x2199FE02C](v224);
    *(_QWORD *)v238 = v164;
    *(_QWORD *)&v238[*(_QWORD *)(v164 - 24)] = v163;
    *(_QWORD *)&v239 = v162;
    *((_QWORD *)&v239 + 1) = v158;
    if (SHIBYTE(v242) < 0)
      operator delete(v241[1]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2199FEA70](&v244);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v226);
    ++v14;
    v17 -= 32;
    v16 = 1;
  }
  while (v14 != v15);
  v57 = (_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>((_QWORD *)(v170 - v17), 145);
  a1 = v165;
  if (v153)
    v58 = 2;
  else
    v58 = 1;
  *v57 = v58;
  v59 = v170;
  v60 = v171;
  if (v170 != v171)
  {
    v61 = 0;
    *(_QWORD *)&v195 = 0;
    *((_QWORD *)&v195 + 1) = &v195;
    *(_QWORD *)&v196 = 0x2000000000;
    BYTE8(v196) = 0;
    v218 = 0;
    v219 = (uint64_t)&v218;
    v220 = 0x2000000000;
    v221 = (v171 - v170) >> 5;
    while (1)
    {
      v204 = 0u;
      v205 = 0u;
      qmi::MutableMessageBase::MutableMessageBase();
      v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165[12];
      v200.__r_.__value_.__l.__size_ = QMIServiceMsg::create();
      LODWORD(v200.__r_.__value_.__r.__words[2]) = 25000;
      v201 = 0;
      v202.__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v238 = MEMORY[0x24BDAC760];
      *(_QWORD *)&v238[8] = 1174405120;
      *(_QWORD *)&v239 = ___ZN30Mav20QMIAttachApnCommandDriver19pushAttachApns_syncEN8dispatch13group_sessionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEbRKNSt3__16vectorItNS8_9allocatorItEEEENS8_8optionalIbEENS8_8functionIFvbEEE_block_invoke;
      *((_QWORD *)&v239 + 1) = &unk_24D5D3190;
      v240[2] = v165;
      v240[3] = v161;
      if (v161)
      {
        dispatch_retain(v161);
        if (v240[3])
          dispatch_group_enter(v240[3]);
      }
      LODWORD(v242) = v61;
      v240[0] = (dispatch_group_t)&v195;
      v240[1] = (dispatch_group_t)&v218;
      v62 = v234;
      if (!v234)
        goto LABEL_117;
      if (v234 != v233)
        break;
      v241[1] = &v240[4];
      (*(void (**)(uint64_t, _QWORD *))(v233[0] + 24))((uint64_t)v233, &v240[4]);
LABEL_119:
      aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
      aBlock.__r_.__value_.__l.__size_ = 0x40000000;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_12;
      v229 = &unk_24D5D34B0;
      v230.__r_.__value_.__r.__words[0] = (std::string::size_type)v238;
      v63 = _Block_copy(&aBlock);
      v202.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
      if (v200.__r_.__value_.__l.__size_)
      {
        qmi::Client::send();
        v63 = (void *)v202.__r_.__value_.__r.__words[0];
      }
      if (v63)
        _Block_release(v63);
      v64 = (dispatch_group_t *)v241[1];
      if (v241[1] == &v240[4])
      {
        v64 = &v240[4];
        v65 = 4;
      }
      else
      {
        if (!v241[1])
          goto LABEL_128;
        v65 = 5;
      }
      ((void (*)(void))(*v64)[v65].isa)();
LABEL_128:
      if (v240[3])
      {
        dispatch_group_leave(v240[3]);
        if (v240[3])
          dispatch_release(v240[3]);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v204);
      v59 += 32;
      ++v61;
      if (v59 == v60)
      {
        _Block_object_dispose(&v218, 8);
        _Block_object_dispose(&v195, 8);
        v66 = v161;
        a1 = v165;
        v68 = v156;
        v67 = v157;
        v69 = v155;
        goto LABEL_168;
      }
    }
    v62 = (void *)(*(uint64_t (**)(void))(*v234 + 16))();
LABEL_117:
    v241[1] = v62;
    goto LABEL_119;
  }
LABEL_136:
  v253 = 0;
  v252 = 0u;
  v251 = 0u;
  v250 = 0u;
  v249 = 0u;
  v248 = 0u;
  v247 = 0u;
  v246 = 0u;
  v245 = 0u;
  v244 = 0u;
  v243 = 0u;
  v242 = 0u;
  *(_OWORD *)v241 = 0u;
  memset(v240, 0, sizeof(v240));
  v239 = 0u;
  *(_OWORD *)v238 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v238);
  v66 = v161;
  v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v239, (uint64_t)"Nothing found to push for ", 26);
  v72 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v68 = v156;
  v67 = v157;
  v69 = v155;
  v73 = v71;
  memset(&aBlock, 0, sizeof(aBlock));
  ctu::cf::assign();
  v200 = aBlock;
  if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v74 = &v200;
  else
    v74 = (std::string *)aBlock.__r_.__value_.__r.__words[0];
  if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v75 = HIBYTE(aBlock.__r_.__value_.__r.__words[2]);
  else
    v75 = aBlock.__r_.__value_.__l.__size_;
  v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, v75);
  v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" in value ", 10);
  if (cf)
    v79 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v79 = 0;
  if (v79)
  {
    ctu::cf_to_xpc((ctu *)cf, v77);
    xpc::object::to_string((xpc::object *)v181);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "empty");
  }
  if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_aBlock = &aBlock;
  else
    p_aBlock = (std::string *)aBlock.__r_.__value_.__r.__words[0];
  if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v81 = HIBYTE(aBlock.__r_.__value_.__r.__words[2]);
  else
    v81 = aBlock.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)p_aBlock, v81);
  if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(aBlock.__r_.__value_.__l.__data_);
    if (v79)
      goto LABEL_158;
  }
  else
  {
    if (!v79)
      goto LABEL_159;
LABEL_158:
    xpc_release(v181[0]);
  }
LABEL_159:
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  v82 = a1[11].isa;
  if (v82)
    (*(void (**)(Class, uint8_t *))(*(_QWORD *)v82 + 48))(v82, v238);
  if (v234)
  {
    aBlock.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(_QWORD *, std::string *))(*v234 + 48))(v234, &aBlock);
  }
  *(_QWORD *)v238 = *v72;
  v164 = *(_QWORD *)v238;
  v83 = v72[9];
  v163 = v72[8];
  *(_QWORD *)&v238[*(_QWORD *)(*(_QWORD *)v238 - 24)] = v163;
  v162 = v83;
  *(_QWORD *)&v239 = v83;
  *((_QWORD *)&v239 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v242) < 0)
    operator delete(v241[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199FEA70](&v244);
LABEL_168:
  aBlock.__r_.__value_.__r.__words[0] = (std::string::size_type)&v170;
  std::vector<wds::ModifyProfileSettings3GPP::Request>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
  aBlock.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
  std::vector<ctu::cf::CFSharedRef<__CFDictionary const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
  v84 = v234;
  if (v234 == v233)
  {
    v85 = 4;
    v84 = v233;
LABEL_172:
    (*(void (**)(void))(*v84 + 8 * v85))();
  }
  else if (v234)
  {
    v85 = 5;
    goto LABEL_172;
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
  if (v66)
  {
    dispatch_group_leave(v66);
    dispatch_release(v66);
    dispatch_retain(v66);
    dispatch_group_enter(v66);
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(v166, v67);
  do
    v86 = __ldxr(v8);
  while (__stxr(v86 + 1, v8));
  v231[0] = &off_24D5D35C0;
  v231[1] = v69;
  v231[2] = v68;
  v232 = v231;
  v204 = 0uLL;
  *(_QWORD *)&v205 = 0;
  v186[0] = v166[0];
  if (v166[0])
    CFRetain(v166[0]);
  AttachApnCommandDriver::getApnListForType_sync();
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(v186);
  v195 = 0u;
  v196 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v195);
  v87 = (const void **)*((_QWORD *)&v204 + 1);
  v88 = (const void **)v204;
  if ((_QWORD)v204 == *((_QWORD *)&v204 + 1))
  {
LABEL_244:
    v253 = 0;
    v252 = 0u;
    v251 = 0u;
    v250 = 0u;
    v249 = 0u;
    v248 = 0u;
    v247 = 0u;
    v246 = 0u;
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    *(_OWORD *)v241 = 0u;
    memset(v240, 0, sizeof(v240));
    v239 = 0u;
    *(_OWORD *)v238 = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v238);
    v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v239, (uint64_t)"No fallback APNs found for ", 27);
    isa = v154;
    v115 = (_QWORD *)MEMORY[0x24BEDB7F0];
    v116 = v114;
    memset(&aBlock, 0, sizeof(aBlock));
    ctu::cf::assign();
    v200 = aBlock;
    if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v117 = &v200;
    else
      v117 = (std::string *)aBlock.__r_.__value_.__r.__words[0];
    if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v118 = HIBYTE(aBlock.__r_.__value_.__r.__words[2]);
    else
      v118 = aBlock.__r_.__value_.__l.__size_;
    v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)v117, v118);
    v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)" in value ", 10);
    if (v166[0])
      v122 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v122 = 0;
    if (v122)
    {
      ctu::cf_to_xpc((ctu *)v166[0], v120);
      xpc::object::to_string((xpc::object *)&v218);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&aBlock, "empty");
    }
    if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v123 = &aBlock;
    else
      v123 = (std::string *)aBlock.__r_.__value_.__r.__words[0];
    if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v124 = HIBYTE(aBlock.__r_.__value_.__r.__words[2]);
    else
      v124 = aBlock.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)v123, v124);
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(aBlock.__r_.__value_.__l.__data_);
      if (!v122)
      {
LABEL_267:
        if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v200.__r_.__value_.__l.__data_);
        v125 = a1[11].isa;
        if (v125)
          (*(void (**)(Class, uint8_t *))(*(_QWORD *)v125 + 48))(v125, v238);
        if (v232)
        {
          aBlock.__r_.__value_.__s.__data_[0] = 0;
          (*((void (**)(NSObject *, std::string *))v232->isa + 6))(v232, &aBlock);
        }
        *(_QWORD *)v238 = *v115;
        v126 = v115[9];
        *(_QWORD *)&v238[*(_QWORD *)(*(_QWORD *)v238 - 24)] = v115[8];
        *(_QWORD *)&v239 = v126;
        *((_QWORD *)&v239 + 1) = MEMORY[0x24BEDB848] + 16;
        if (SHIBYTE(v242) < 0)
          operator delete(v241[1]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2199FEA70](&v244);
        v10 = v161;
        goto LABEL_276;
      }
    }
    else if (!v122)
    {
      goto LABEL_267;
    }
    xpc_release(v218);
    goto LABEL_267;
  }
  v89 = 0;
  v90 = MEMORY[0x24BEDB848] + 16;
  while (2)
  {
    v214[0] = 0;
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)v214, v88);
    v253 = 0;
    v252 = 0u;
    v251 = 0u;
    v250 = 0u;
    v249 = 0u;
    v248 = 0u;
    v247 = 0u;
    v246 = 0u;
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    *(_OWORD *)v241 = 0u;
    memset(v240, 0, sizeof(v240));
    v239 = 0u;
    *(_OWORD *)v238 = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v238);
    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v239, (uint64_t)"trying to push fallback APN ", 28);
    if (v214[0])
      v93 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v93 = 0;
    if (v93)
    {
      ctu::cf_to_xpc(v214[0], v91);
      xpc::object::to_string((xpc::object *)v210);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v200, "empty");
    }
    if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = &v200;
    else
      v94 = (std::string *)v200.__r_.__value_.__r.__words[0];
    if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v95 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
    else
      v95 = v200.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v94, v95);
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v200.__r_.__value_.__l.__data_);
      if (!v93)
        goto LABEL_198;
      goto LABEL_197;
    }
    if (v93)
LABEL_197:
      xpc_release(v210[0]);
LABEL_198:
    v96 = v165[11].isa;
    if (v96)
      (*(void (**)(Class, uint8_t *))(*(_QWORD *)v96 + 48))(v96, v238);
    v190 = 0;
    v191 = 0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v190, v214[0]);
    memset(&v200, 0, sizeof(v200));
    v219 = 0;
    v218 = 0;
    v220 = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "apn");
    ctu::cf::map_adapter::getString();
    MEMORY[0x2199FDFFC](&__p);
    if (SHIBYTE(v220) < 0)
      operator delete(v218);
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v200.__r_.__value_.__l.__size_)
        goto LABEL_234;
      aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
      aBlock.__r_.__value_.__l.__size_ = 1174405120;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN30Mav20QMIAttachApnCommandDriver41createSetFallbackProfile3GPP2Request_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERN3wds23SetEHRPDFallbackApnList7RequestE_block_invoke;
      v229 = &__block_descriptor_tmp_56_1;
      std::string::__init_copy_ctor_external(&v230, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
LABEL_207:
      v97 = (const void **)*((_QWORD *)&v195 + 1);
      if (*((_QWORD *)&v195 + 1) != (_QWORD)v196)
      {
        while (*((_BYTE *)*v97 + 8) != 1)
        {
          if (++v97 == (const void **)v196)
            goto LABEL_214;
        }
      }
      if (v97 == (const void **)v196)
      {
LABEL_214:
        v100 = operator new();
        v101 = v100;
        *(_BYTE *)(v100 + 8) = 1;
        *(_QWORD *)(v100 + 16) = 0;
        v99 = v100 + 16;
        *(_QWORD *)v100 = off_24D5D3748;
        *(_QWORD *)(v100 + 24) = 0;
        *(_QWORD *)(v100 + 32) = 0;
        v102 = v196;
        if ((unint64_t)v196 >= *((_QWORD *)&v196 + 1))
        {
          v104 = (uint64_t)(v196 - *((_QWORD *)&v195 + 1)) >> 3;
          if ((unint64_t)(v104 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v105 = (uint64_t)(*((_QWORD *)&v196 + 1) - *((_QWORD *)&v195 + 1)) >> 2;
          if (v105 <= v104 + 1)
            v105 = v104 + 1;
          if (*((_QWORD *)&v196 + 1) - *((_QWORD *)&v195 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
            v106 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v106 = v105;
          if (v106)
            v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v196 + 8, v106);
          else
            v107 = 0;
          v108 = (uint64_t *)&v107[8 * v104];
          *v108 = v101;
          v103 = v108 + 1;
          v110 = (char *)*((_QWORD *)&v195 + 1);
          v109 = (char *)v196;
          if ((_QWORD)v196 != *((_QWORD *)&v195 + 1))
          {
            do
            {
              v111 = *((_QWORD *)v109 - 1);
              v109 -= 8;
              *--v108 = v111;
            }
            while (v109 != v110);
            v109 = (char *)*((_QWORD *)&v195 + 1);
          }
          *((_QWORD *)&v195 + 1) = v108;
          *(_QWORD *)&v196 = v103;
          *((_QWORD *)&v196 + 1) = &v107[8 * v106];
          if (v109)
            operator delete(v109);
        }
        else
        {
          *(_QWORD *)v196 = v100;
          v103 = (_QWORD *)(v102 + 8);
        }
        *(_QWORD *)&v196 = v103;
      }
      else
      {
        if (!v98)
          __cxa_bad_cast();
        v99 = (uint64_t)v98 + 16;
      }
      ((void (*)(uint64_t, uint64_t))aBlock.__r_.__value_.__r.__words[2])((uint64_t)&aBlock, v99);
      if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v230.__r_.__value_.__l.__data_);
      v89 = 1;
      if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
LABEL_234:
        operator delete(v200.__r_.__value_.__l.__data_);
    }
    else if (*((_BYTE *)&v200.__r_.__value_.__s + 23))
    {
      aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
      aBlock.__r_.__value_.__l.__size_ = 1174405120;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN30Mav20QMIAttachApnCommandDriver41createSetFallbackProfile3GPP2Request_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERN3wds23SetEHRPDFallbackApnList7RequestE_block_invoke;
      v229 = &__block_descriptor_tmp_56_1;
      v230 = v200;
      goto LABEL_207;
    }
    MEMORY[0x2199FE02C](&v190);
    *(_QWORD *)v238 = v164;
    *(_QWORD *)&v238[*(_QWORD *)(v164 - 24)] = v163;
    *(_QWORD *)&v239 = v162;
    *((_QWORD *)&v239 + 1) = v90;
    if (SHIBYTE(v242) < 0)
      operator delete(v241[1]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2199FEA70](&v244);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)v214);
    if (++v88 != v87)
      continue;
    break;
  }
  a1 = v165;
  if ((v89 & 1) == 0)
    goto LABEL_244;
  v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165[12];
  v200.__r_.__value_.__l.__size_ = QMIServiceMsg::create();
  LODWORD(v200.__r_.__value_.__r.__words[2]) = 25000;
  v202.__r_.__value_.__r.__words[0] = 0;
  v201 = 0;
  *(_QWORD *)v238 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v238[8] = 1174405120;
  *(_QWORD *)&v239 = ___ZN30Mav20QMIAttachApnCommandDriver21pushFallbackApns_syncEN8dispatch13group_sessionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENSt3__18functionIFvbEEE_block_invoke;
  *((_QWORD *)&v239 + 1) = &__block_descriptor_tmp_7_7;
  v240[0] = v165;
  v10 = v161;
  v240[1] = v161;
  if (v161)
  {
    dispatch_retain(v161);
    dispatch_group_enter(v161);
  }
  v112 = &v240[2];
  v113 = v232;
  if (v232)
  {
    isa = v154;
    if (v232 != v231)
    {
      v113 = (*((uint64_t (**)(void))v232->isa + 2))();
      goto LABEL_329;
    }
    v240[5] = (dispatch_group_t)&v240[2];
    (*(void (**)(uint64_t, _QWORD *))(v231[0] + 24))((uint64_t)v231, &v240[2]);
  }
  else
  {
    isa = v154;
LABEL_329:
    v240[5] = v113;
  }
  aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  aBlock.__r_.__value_.__l.__size_ = 0x40000000;
  aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_12;
  v229 = &unk_24D5D34B0;
  v230.__r_.__value_.__r.__words[0] = (std::string::size_type)v238;
  v151 = _Block_copy(&aBlock);
  v202.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  if (v200.__r_.__value_.__l.__size_)
  {
    qmi::Client::send();
    v151 = (void *)v202.__r_.__value_.__r.__words[0];
  }
  if (v151)
    _Block_release(v151);
  if ((dispatch_group_t *)v240[5] == &v240[2])
  {
    v152 = 4;
LABEL_339:
    ((void (*)(dispatch_group_t *))(*v112)[v152].isa)(v112);
  }
  else if (v240[5])
  {
    v152 = 5;
    v112 = (dispatch_group_t *)v240[5];
    goto LABEL_339;
  }
  if (v240[1])
  {
    dispatch_group_leave(v240[1]);
    if (v240[1])
      dispatch_release(v240[1]);
  }
LABEL_276:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v195);
  aBlock.__r_.__value_.__r.__words[0] = (std::string::size_type)&v204;
  std::vector<ctu::cf::CFSharedRef<__CFDictionary const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
  v127 = v232;
  if (v232 == v231)
  {
    v128 = 4;
    v127 = v231;
LABEL_280:
    (*((void (**)(void))v127->isa + v128))();
  }
  else if (v232)
  {
    v128 = 5;
    goto LABEL_280;
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(v166);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
LABEL_283:
  *(_QWORD *)v238 = a1;
  v129 = &v238[8];
  v130 = *((_QWORD *)&v236 + 1);
  if (*((_QWORD *)&v236 + 1))
  {
    if (*((__int128 **)&v236 + 1) != &v235)
    {
      v130 = (*(uint64_t (**)(void))(**((_QWORD **)&v236 + 1) + 16))();
      goto LABEL_286;
    }
    v240[0] = (dispatch_group_t)&v238[8];
    (*(void (**)(__int128 *, uint8_t *))(v235 + 24))(&v235, &v238[8]);
  }
  else
  {
LABEL_286:
    v240[0] = v130;
  }
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&aBlock, &a1[1].isa);
  v131 = (std::__shared_weak_count *)aBlock.__r_.__value_.__l.__size_;
  *(_OWORD *)&v240[1] = *(_OWORD *)&aBlock.__r_.__value_.__l.__data_;
  if (aBlock.__r_.__value_.__l.__size_)
  {
    v132 = (unint64_t *)(aBlock.__r_.__value_.__l.__size_ + 16);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
    p_shared_owners = (unint64_t *)&v131->__shared_owners_;
    do
      v135 = __ldaxr(p_shared_owners);
    while (__stlxr(v135 - 1, p_shared_owners));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v240[3] = v168;
  v240[4] = v169;
  if (v169)
  {
    v136 = (unint64_t *)&v169[1];
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 1, v136));
  }
  LOBYTE(v240[5]) = isa;
  v138 = a1[3].isa;
  v139 = (char *)operator new();
  v140 = (uint8_t *)v240[0];
  *(_QWORD *)v139 = *(_QWORD *)v238;
  v141 = v139 + 8;
  if (v140)
  {
    if (v140 != &v238[8])
    {
      v140 = (uint8_t *)(*(uint64_t (**)(uint8_t *, char *))(*(_QWORD *)v140 + 16))(v140, v141);
      goto LABEL_301;
    }
    *((_QWORD *)v139 + 4) = v141;
    (*(void (**)(uint8_t *))(*(_QWORD *)&v238[8] + 24))(&v238[8]);
  }
  else
  {
LABEL_301:
    *((_QWORD *)v139 + 4) = v140;
  }
  *(_OWORD *)(v139 + 40) = *(_OWORD *)&v240[1];
  v240[1] = 0;
  v240[2] = 0;
  *(_OWORD *)(v139 + 56) = *(_OWORD *)&v240[3];
  v240[3] = 0;
  v240[4] = 0;
  v139[72] = (char)v240[5];
  aBlock.__r_.__value_.__r.__words[0] = 0;
  dispatch_group_notify_f(v10, v138, v139, (dispatch_function_t)dispatch::detail::group_notify<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>(dispatch_group_s *,dispatch_queue_s *,Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100]((uint64_t *)&aBlock);
  v142 = (std::__shared_weak_count *)v240[4];
  if (v240[4])
  {
    v143 = (unint64_t *)&v240[4][1];
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  if (v240[2])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v240[2]);
  if ((uint8_t *)v240[0] == &v238[8])
  {
    v145 = 4;
LABEL_314:
    (*(void (**)(uint8_t *))(*(_QWORD *)v129 + 8 * v145))(v129);
  }
  else if (v240[0])
  {
    v145 = 5;
    v129 = (uint8_t *)v240[0];
    goto LABEL_314;
  }
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
  v146 = (std::__shared_weak_count *)v169;
  if (v169)
  {
    v147 = (unint64_t *)&v169[1];
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  result = (__int128 *)*((_QWORD *)&v236 + 1);
  if (*((__int128 **)&v236 + 1) == &v235)
  {
    v150 = 4;
    result = &v235;
    return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v150))();
  }
  else if (*((_QWORD *)&v236 + 1))
  {
    v150 = 5;
    return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v150))();
  }
  return result;
}

void sub_21697F544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,NSObject *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,const void *a37,uint64_t a38,uint64_t a39,uint64_t a40,__int16 a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,xpc_object_t object,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  unint64_t *v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;

  if (STACK[0x498])
  {
    dispatch_group_leave((dispatch_group_t)STACK[0x498]);
    if (STACK[0x498])
      dispatch_release((dispatch_object_t)STACK[0x498]);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&STACK[0x240]);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a71);
  STACK[0x240] = (unint64_t)&STACK[0x290];
  std::vector<ctu::cf::CFSharedRef<__CFDictionary const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  v72 = (unint64_t *)STACK[0x408];
  if ((unint64_t *)STACK[0x408] == &STACK[0x3F0])
  {
    v73 = 4;
    v72 = &STACK[0x3F0];
  }
  else
  {
    if (!v72)
      goto LABEL_9;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_9:
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&a37);
  if (a28)
  {
    dispatch_group_leave(a28);
    dispatch_release(a28);
    dispatch_group_leave(a28);
    dispatch_release(a28);
  }
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  v74 = (unint64_t *)STACK[0x448];
  if ((unint64_t *)STACK[0x448] == &STACK[0x430])
  {
    v75 = 4;
    v74 = &STACK[0x430];
  }
  else
  {
    if (!v74)
      goto LABEL_16;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_16:
  _Unwind_Resume(a1);
}

uint64_t Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2::~$_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  uint64_t v4;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 56);
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == (_QWORD *)(a1 + 8))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 8);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ___ZN30Mav20QMIAttachApnCommandDriver19pushAttachApns_syncEN8dispatch13group_sessionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEbRKNSt3__16vectorItNS8_9allocatorItEEEENS8_8optionalIbEENS8_8functionIFvbEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 67109378;
      v11 = v4;
      v12 = 2080;
      v13 = qmi::asString();
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#E Sending 3GPP APN failed with error %d (%s)", (uint8_t *)&v10, 0x12u);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 88);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v7 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_DWORD *)(a1 + 96);
      v10 = 67109120;
      v11 = v8;
      _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I 3GPP APN success response received (request order %d)", (uint8_t *)&v10, 8u);
    }
  }
  if (!--*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v9 = *(_QWORD *)(a1 + 88);
    if (v9)
    {
      LOBYTE(v10) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v10);
    }
  }
}

uint64_t __copy_helper_block_e8_56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;

  v4 = *(NSObject **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 56);
    if (v5)
      dispatch_group_enter(v5);
  }
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 64, a2 + 64);
}

void sub_21697FE44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(v1 + 56);
    if (v4)
      dispatch_release(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;

  v2 = (_QWORD *)(a1 + 64);
  v3 = *(_QWORD **)(a1 + 88);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(NSObject **)(a1 + 56);
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = *(NSObject **)(a1 + 56);
    if (v6)
      dispatch_release(v6);
  }
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver21pushFallbackApns_syncEN8dispatch13group_sessionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENSt3__18functionIFvbEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t result;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    v5 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_9;
    v12[0] = 67109378;
    v12[1] = v4;
    v13 = 2080;
    v14 = qmi::asString();
    v6 = "#E Sending fallback APN failed with error %d (%s)";
    v7 = v5;
    v8 = 18;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v3 + 88);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v10 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12[0]) = 0;
    v6 = "#I Fallback APN success response received";
    v7 = v10;
    v8 = 2;
LABEL_8:
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v12, v8);
  }
LABEL_9:
  result = *(_QWORD *)(a1 + 72);
  if (result)
  {
    LOBYTE(v12[0]) = v4 != 0;
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)result + 48))(result, v12);
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c31_ZTSKN8dispatch13group_sessionE48c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;

  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 40);
    if (v5)
      dispatch_group_enter(v5);
  }
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

void sub_216980050(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(v1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(v1 + 40);
    if (v4)
      dispatch_release(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c31_ZTSKN8dispatch13group_sessionE48c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;

  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(NSObject **)(a1 + 40);
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = *(NSObject **)(a1 + 40);
    if (v6)
      dispatch_release(v6);
  }
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke(uint64_t a1, int *a2)
{
  ctu::cf::map_adapter *v3;
  uint64_t result;
  int v5;
  __CFString *v6;

  v3 = (ctu::cf::map_adapter *)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, "AllowedProtocolMask");
  LODWORD(v3) = ctu::cf::map_adapter::getInt(v3, v6);
  result = MEMORY[0x2199FDFFC](&v6);
  v5 = 2 * ((_DWORD)v3 == 2);
  if ((_DWORD)v3 == 3)
    v5 = 3;
  *a2 = v5;
  return result;
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_4(uint64_t a1, std::string *a2)
{
  void *v3[2];
  uint64_t v4;
  uint64_t v5;

  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v5, "apn");
  ctu::cf::map_adapter::getString();
  MEMORY[0x2199FDFFC](&v5);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a2, (std::string::value_type *)v3, (std::string::value_type *)v3, 0);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_216980224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_26(uint64_t a1, std::string *this)
{
  std::string::value_type *v3;
  std::string::size_type v4;

  if (*(char *)(a1 + 55) < 0)
  {
    v3 = *(std::string::value_type **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v3 = (std::string::value_type *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_29(uint64_t a1, std::string *this)
{
  std::string::value_type *v3;
  std::string::size_type v4;

  if (*(char *)(a1 + 55) < 0)
  {
    v3 = *(std::string::value_type **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v3 = (std::string::value_type *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

size_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_32(uint64_t a1, char *a2)
{
  _QWORD *v3;
  int v4;
  size_t v5;
  _QWORD *v6;
  size_t result;
  _QWORD *v8;
  char v9;

  v3 = (_QWORD *)(a1 + 32);
  v4 = *(char *)(a1 + 55);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 55);
  else
    v5 = *(_QWORD *)(a1 + 40);
  if (v5 == strlen((const char *)*MEMORY[0x24BDC3DC8]))
  {
    v6 = v4 >= 0 ? v3 : (_QWORD *)*v3;
    result = memcmp(v6, (const void *)*MEMORY[0x24BDC3DC8], v5);
    if (!(_DWORD)result)
    {
      v9 = 1;
      goto LABEL_16;
    }
  }
  result = strlen((const char *)*MEMORY[0x24BDC3DC0]);
  if (v5 == result)
  {
    v8 = v4 >= 0 ? v3 : (_QWORD *)*v3;
    result = memcmp(v8, (const void *)*MEMORY[0x24BDC3DC0], v5);
    if (!(_DWORD)result)
    {
      v9 = 2;
LABEL_16:
      *a2 = v9;
    }
  }
  return result;
}

void ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_35(uint64_t a1, _BYTE *a2)
{
  std::string *p_p;
  char Bool;
  std::string __p;
  __CFString *v7;

  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Pcs");
  std::string::append(&__p, "cfAddressRequired", 0x11uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v7, (const char *)p_p);
  Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)(a1 + 32), v7);
  MEMORY[0x2199FDFFC](&v7);
  *a2 = Bool;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_41(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2_44(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32) ^ 1;
  return result;
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3_47(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

void ___ZN30Mav20QMIAttachApnCommandDriver41createSetFallbackProfile3GPP2Request_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERN3wds23SetEHRPDFallbackApnList7RequestE_block_invoke(uint64_t a1, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::__split_buffer<std::string> __v;

  if (*(char *)(a1 + 55) < 0)
  {
    v3 = *(char **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v3 = (char *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 55);
  }
  v5 = a2 + 16;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(_QWORD *)a2) >> 3);
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(_QWORD *)a2) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v12)
      v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v5, v12);
    else
      v13 = 0;
    __v.__first_ = v13;
    __v.__begin_ = v13 + v9;
    __v.__end_cap_.__value_ = &v13[v12];
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(__v.__begin_->__r_.__value_.__r.__words, v3, &v3[v4], v4);
    __v.__end_ = __v.__begin_ + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    v8 = *(_QWORD *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(*(_QWORD **)(a2 + 8), v3, &v3[v4], v4);
    v8 = v7 + 24;
    *(_QWORD *)(a2 + 8) = v7 + 24;
  }
  *(_QWORD *)(a2 + 8) = v8;
}

void sub_2169805B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void std::__shared_ptr_pointer<Mav20QMIAttachApnCommandDriver *,std::shared_ptr<Mav20QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav20QMIAttachApnCommandDriver>(Mav20QMIAttachApnCommandDriver*)::{lambda(Mav20QMIAttachApnCommandDriver *)#1},std::allocator<Mav20QMIAttachApnCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<Mav20QMIAttachApnCommandDriver *,std::shared_ptr<Mav20QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav20QMIAttachApnCommandDriver>(Mav20QMIAttachApnCommandDriver*)::{lambda(Mav20QMIAttachApnCommandDriver *)#1},std::allocator<Mav20QMIAttachApnCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<Mav20QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav20QMIAttachApnCommandDriver>(Mav20QMIAttachApnCommandDriver*)::{lambda(Mav20QMIAttachApnCommandDriver*)#1}::operator() const(Mav20QMIAttachApnCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<Mav20QMIAttachApnCommandDriver *,std::shared_ptr<Mav20QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav20QMIAttachApnCommandDriver>(Mav20QMIAttachApnCommandDriver*)::{lambda(Mav20QMIAttachApnCommandDriver *)#1},std::allocator<Mav20QMIAttachApnCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav20QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav20QMIAttachApnCommandDriver>(Mav20QMIAttachApnCommandDriver*)::{lambda(Mav20QMIAttachApnCommandDriver*)#1}::operator() const(Mav20QMIAttachApnCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<wds::tlv::SubscriptionType>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<wds::tlv::SubscriptionType>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<wds::tlv::SubscriptionType>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 12;
}

uint64_t qmi::MutableMessageBase::createTLV<wds::tlv::SubscriptionType>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_DWORD *)(v4 + 12) = 0;
  *(_QWORD *)v4 = &off_24D5D3480;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SubscriptionType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SubscriptionType>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::SubscriptionType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SubscriptionType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D3480;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D5D34E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D5D34E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D5D3530;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D5D3530;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24D5D3530;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24D5D3530;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::destroy(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::operator()(uint64_t result, _BYTE *a2)
{
  if (*a2)
    **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::target_type()
{
}

_QWORD *std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D5D35C0;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D5D35C0;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24D5D35C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24D5D35C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::destroy(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::operator()(uint64_t result, _BYTE *a2)
{
  if (*a2)
    **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::target_type()
{
}

uint64_t *std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2 + 56);
    v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = *(_QWORD **)(v2 + 32);
    if (v4 == (_QWORD *)(v2 + 8))
    {
      v5 = 4;
      v4 = (_QWORD *)(v2 + 8);
    }
    else
    {
      if (!v4)
      {
LABEL_9:
        MEMORY[0x2199FEAC4](v2, 0x1030C400424FB1CLL);
        return a1;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_9;
  }
  return a1;
}

uint64_t *dispatch::detail::group_notify<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>(dispatch_group_s *,dispatch_queue_s *,Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14 = a1;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    return std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](&v14);
  v3 = *(_QWORD *)a1;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    return std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](&v14);
  v5 = v4;
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD *)(v3 + 88);
    if (v6)
    {
      v7 = **(unsigned __int8 **)(a1 + 56);
      v8 = *(unsigned __int8 *)(a1 + 72);
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, a1 + 8);
      (*(void (**)(uint64_t, BOOL, _QWORD, BOOL, _BYTE *))(*(_QWORD *)v6 + 24))(v6, v7 != 0, 0, v8 != 0, v15);
      v9 = v16;
      if (v16 == v15)
      {
        v10 = 4;
        v9 = v15;
        goto LABEL_9;
      }
      if (v16)
      {
        v10 = 5;
LABEL_9:
        (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
      }
    }
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](&v14);
}

void sub_216980E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  char *v14;
  char *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
    {
LABEL_6:
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](&a9);
      _Unwind_Resume(a1);
    }
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  goto LABEL_6;
}

uint64_t qmi::MutableMessageBase::getTLV<wds::tlv::PcoContainerIds>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<wds::tlv::PcoContainerIds>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<wds::tlv::PcoContainerIds>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 10;
}

uint64_t qmi::MutableMessageBase::createTLV<wds::tlv::PcoContainerIds>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_QWORD *)v4 = &off_24D5D3658;
  *(_QWORD *)(v4 + 10) = 0;
  *(_QWORD *)(v4 + 18) = 0;
  *(_DWORD *)(v4 + 26) = 0;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 10;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PcoContainerIds>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PcoContainerIds>::getSize()
{
  return tlv::size<wds::tlv::PcoContainerIds>();
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PcoContainerIds>::write(uint64_t a1, __n128 **a2)
{
  unsigned __int8 v3;
  __n128 *v4;
  uint64_t v5;
  char *v6;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = (uint64_t)(*a2)->n128_i64 + 3;
  *a2 = (__n128 *)v5;
  tlv::writeV<wds::tlv::PcoContainerIds>(a2, (__n128 *)(a1 + 10));
  v6 = (char *)*a2 - v5;
  v4->n128_u8[0] = v3;
  *(unsigned __int16 *)((char *)v4->n128_u16 + 1) = (unsigned __int16)v6;
}

__n128 qmi::MutableMessageBase::TlvWrapper<wds::tlv::PcoContainerIds>::clone(uint64_t a1)
{
  uint64_t v2;
  __n128 result;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D3658;
  result = *(__n128 *)(a1 + 10);
  *(__n128 *)(v2 + 10) = result;
  *(_DWORD *)(v2 + 26) = *(_DWORD *)(a1 + 26);
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<wds::tlv::RequestMSISDNUsingPco>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<wds::tlv::RequestMSISDNUsingPco>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<wds::tlv::RequestMSISDNUsingPco>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<wds::tlv::RequestMSISDNUsingPco>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_24D5D36A8;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestMSISDNUsingPco>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestMSISDNUsingPco>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestMSISDNUsingPco>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestMSISDNUsingPco>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D36A8;
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<wds::tlv::ApnTypeMask>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<wds::tlv::ApnTypeMask>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<wds::tlv::ApnTypeMask>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 16;
}

uint64_t qmi::MutableMessageBase::createTLV<wds::tlv::ApnTypeMask>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &off_24D5D36F8;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 16;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ApnTypeMask>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ApnTypeMask>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

_QWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ApnTypeMask>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_QWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::ProfileTypeMask>((_QWORD **)a2, (_QWORD *)(a1 + 16));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ApnTypeMask>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D36F8;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FallbackApnList>::~TlvWrapper(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24D5D3748;
  v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_24D5D3748;
  v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x2199FEAC4](a1, 0x10A1C403082B835);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FallbackApnList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::FallbackApnList>((uint64_t *)(a1 + 16));
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FallbackApnList>::write(uint64_t a1, char **a2)
{
  char v3;
  char *v4;
  uint64_t v5;
  char *result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  result = tlv::writeV<wds::tlv::FallbackApnList>(a2, (_DWORD *)(a1 + 16));
  v7 = &(*a2)[-v5];
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FallbackApnList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5D3748;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 16), *(__int128 **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
  return v2;
}

void sub_216981708(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void EurekaCallFormatter::~EurekaCallFormatter(EurekaCallFormatter *this)
{
  char *v2;

  *(_QWORD *)this = off_24D5D3780;
  v2 = (char *)this + 8;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  MEMORY[0x2199FDF6C](v2);
}

void EurekaCallFormatter::createAnswerIncomingCallReq(uint64_t a1@<X0>, const CallInfo *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  qmi::MutableMessageBase *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  _BYTE *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21[51];
  qmi::MutableMessageBase *v22;
  std::__shared_weak_count *v23;
  _QWORD v24[4];
  void *v25[51];
  uint8_t buf[8];
  std::__shared_weak_count *v27;
  qmi::MutableMessageBase *v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Going to answer the incoming call!", buf, 2u);
  }
  v7 = (qmi::MutableMessageBase *)operator new();
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  qmi::MutableMessageBase::MutableMessageBase(v7);
  *(_QWORD *)buf = v7;
  v28 = v7;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D3898;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v27 = v8;
  v24[0] = MEMORY[0x24BDAC760];
  v24[1] = 1174405120;
  v24[2] = ___ZN19EurekaCallFormatter27createAnswerIncomingCallReqE8CallInfo_block_invoke;
  v24[3] = &__block_descriptor_tmp_20;
  CallInfo::CallInfo((CallInfo *)v25, a2);
  v10 = (_BYTE *)qmi::MutableMessageBase::getTLV<vs::tlv::CallIdentifier>(v7, 1);
  ___ZN19EurekaCallFormatter27createAnswerIncomingCallReqE8CallInfo_block_invoke((uint64_t)v24, v10);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 48) = 25000;
  v22 = v7;
  v23 = v8;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  std::shared_ptr<QMIDataContextIPActivationLock>::operator=[abi:ne180100]((_QWORD *)a3, (uint64_t *)&v22);
  v12 = v23;
  if (v23)
  {
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  CallInfo::CallInfo((CallInfo *)v21, a2);
  v30 = 0;
  v15 = operator new(0x1A8uLL);
  *v15 = &off_24D5D3910;
  v15[1] = a1;
  CallInfo::CallInfo((CallInfo *)(v15 + 2), (const CallInfo *)v21);
  v30 = v15;
  std::function<void ()(qmi::ResponseBase const&)>::operator=((_QWORD *)(a3 + 16), (uint64_t)v29);
  v16 = v30;
  if (v30 == v29)
  {
    v17 = 4;
    v16 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_15;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_15:
  CallInfo::~CallInfo(v21);
  CallInfo::~CallInfo(v25);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_216981A28(_Unwind_Exception *a1)
{
  EurekaVoiceRequestMessage *v1;
  void **v2;
  void **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;

  v7 = *(_QWORD **)(v5 - 80);
  if (v7 == v4)
  {
    v8 = 4;
    v7 = (_QWORD *)(v5 - 104);
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  CallInfo::~CallInfo(v3);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v1);
  CallInfo::~CallInfo(v2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v5 - 128);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19EurekaCallFormatter27createAnswerIncomingCallReqE8CallInfo_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 124);
  return result;
}

uint64_t EurekaCallFormatter::shouldValidateCallCollisionScenario(EurekaCallFormatter *this)
{
  return 0;
}

void std::__shared_ptr_pointer<vs::AnswerCall::Request *,std::shared_ptr<vs::AnswerCall::Request>::__shared_ptr_default_delete<vs::AnswerCall::Request,vs::AnswerCall::Request>,std::allocator<vs::AnswerCall::Request>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

qmi::MutableMessageBase *std::__shared_ptr_pointer<vs::AnswerCall::Request *,std::shared_ptr<vs::AnswerCall::Request>::__shared_ptr_default_delete<vs::AnswerCall::Request,vs::AnswerCall::Request>,std::allocator<vs::AnswerCall::Request>>::__on_zero_shared(uint64_t a1)
{
  qmi::MutableMessageBase *result;

  result = *(qmi::MutableMessageBase **)(a1 + 24);
  if (result)
  {
    qmi::MutableMessageBase::~MutableMessageBase(result);
    JUMPOUT(0x2199FEAC4);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<vs::AnswerCall::Request *,std::shared_ptr<vs::AnswerCall::Request>::__shared_ptr_default_delete<vs::AnswerCall::Request,vs::AnswerCall::Request>,std::allocator<vs::AnswerCall::Request>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D5D3910;
  CallInfo::~CallInfo((void **)(a1 + 16));
  return a1;
}

void std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24D5D3910;
  CallInfo::~CallInfo((void **)(a1 + 16));
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x1A8uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24D5D3910;
  v2[1] = v3;
  CallInfo::CallInfo((CallInfo *)(v2 + 2), (const CallInfo *)(a1 + 16));
  return v2;
}

void sub_216981C54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24D5D3910;
  a2[1] = v2;
  CallInfo::CallInfo((CallInfo *)(a2 + 2), (const CallInfo *)(a1 + 16));
}

void std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::destroy(uint64_t a1)
{
  CallInfo::~CallInfo((void **)(a1 + 16));
}

void std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::destroy_deallocate(void **a1)
{
  CallInfo::~CallInfo(a1 + 2);
  operator delete(a1);
}

const void **std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(const void **result, uint64_t a2)
{
  const void **v2;
  const void *v3;
  NSObject *v4;
  uint64_t v5;
  const void *v6;
  _BYTE __p[12];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v2 = result;
    v3 = result[1];
    v4 = *((_QWORD *)v3 + 1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = qmi::asString();
      _os_log_error_impl(&dword_216897000, v4, OS_LOG_TYPE_ERROR, "Got error when trying to answer incoming call. Error: %s", __p, 0xCu);
    }
    v5 = *((_QWORD *)v3 + 2);
    ctu::SharedRef<__CFUUID const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFUUID const>::SharedRef(&v6, v2 + 2);
    printUuid();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 80))(v5, __p);
    if (v8 < 0)
      operator delete(*(void **)__p);
    return ctu::SharedRef<__CFUUID const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFUUID const>::~SharedRef(&v6);
  }
  return result;
}

void sub_216981DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  ctu::SharedRef<__CFUUID const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFUUID const>::~SharedRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void QMIEnhancedLQMCommandDriver::create(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  dispatch_object_t v8;

  v6 = operator new();
  v7 = *a2;
  v8 = v7;
  if (v7)
    dispatch_retain(v7);
  QMIEnhancedLQMCommandDriver::QMIEnhancedLQMCommandDriver(v6, a1, &v8);
  *a3 = 0;
  a3[1] = 0;
  std::shared_ptr<QMIEnhancedLQMCommandDriver>::shared_ptr[abi:ne180100]<QMIEnhancedLQMCommandDriver,std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver*)#1},void>(a3, v6);
  if (v7)
    dispatch_release(v7);
}

void sub_216981EE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v2;
  int v3;

  if (v2)
    dispatch_release(v2);
  if (v3)
    MEMORY[0x2199FEAC4](v1, 0xF1C40E90A8BEFLL);
  _Unwind_Resume(exception_object);
}

void QMIEnhancedLQMCommandDriver::~QMIEnhancedLQMCommandDriver(QMIEnhancedLQMCommandDriver *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D5D39B8;
  qmi::Client::~Client((QMIEnhancedLQMCommandDriver *)((char *)this + 96));
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  EnhancedLQMCommandDriver::~EnhancedLQMCommandDriver(this);
}

{
  QMIEnhancedLQMCommandDriver::~QMIEnhancedLQMCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void QMIEnhancedLQMCommandDriver::bootstrap(_QWORD *a1, dispatch_object_t *a2, uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  unint64_t *p_shared_owners;
  NSObject *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v5);
  }
  v6 = *a3;
  v7 = a3[1];
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (std::__shared_weak_count *)a1[2];
  if (!v10 || (v11 = a1[1], (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  v14 = (_QWORD *)operator new();
  *v14 = a1;
  v14[1] = v5;
  v14[2] = v6;
  v14[3] = v7;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v16 = a1[3];
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = (_QWORD *)operator new();
  *v18 = v14;
  v18[1] = v11;
  v18[2] = v13;
  v20 = 0;
  v21 = 0;
  dispatch_async_f(v16, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::execute_wrapped<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0>(QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v20);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void QMIEnhancedLQMCommandDriver::start(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (_QWORD *)operator new();
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[3];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (_QWORD *)operator new();
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  v14 = 0;
  v15 = 0;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::execute_wrapped<QMIEnhancedLQMCommandDriver::start(dispatch::group_session)::$_0>(QMIEnhancedLQMCommandDriver::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEnhancedLQMCommandDriver::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMIEnhancedLQMCommandDriver::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v14);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v15);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void QMIEnhancedLQMCommandDriver::shutdown(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (_QWORD *)operator new();
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[3];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (_QWORD *)operator new();
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  v14 = 0;
  v15 = 0;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::execute_wrapped<QMIEnhancedLQMCommandDriver::shutdown(dispatch::group_session)::$_0>(QMIEnhancedLQMCommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEnhancedLQMCommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMIEnhancedLQMCommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v14);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v15);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t QMIEnhancedLQMCommandDriver::QMIEnhancedLQMCommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  NSObject *object;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  object = *a3;
  if (*a3)
    dispatch_retain(*a3);
  EnhancedLQMCommandDriver::EnhancedLQMCommandDriver();
  if (object)
    dispatch_release(object);
  v9[0] = &unk_24D5CCF40;
  v10 = v9;
  QmiSimInstanceLogger<QMIEnhancedLQMCommandDriver,ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::QmiSimInstanceLogger((capabilities::ct *)(a1 + 88), a2, (uint64_t)v9);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
    goto LABEL_9;
  }
  if (v10)
  {
    v6 = 5;
LABEL_9:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *(_QWORD *)a1 = &off_24D5D39B8;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

void sub_21698241C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  EnhancedLQMCommandDriver *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  EnhancedLQMCommandDriver::~EnhancedLQMCommandDriver(v13);
  _Unwind_Resume(a1);
}

capabilities::ct *QmiSimInstanceLogger<QMIEnhancedLQMCommandDriver,ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::QmiSimInstanceLogger(capabilities::ct *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
  SimInstanceLogger<QMIEnhancedLQMCommandDriver,ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLogger(a1, a2, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_216982548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN27QMIEnhancedLQMCommandDriver24handleClientStarted_syncEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I Entering low power", v3, 2u);
  }
  QMIEnhancedLQMCommandDriver::unregister_sync(v1, 3);
}

void QMIEnhancedLQMCommandDriver::unregister_sync(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  _QWORD **v5;
  _QWORD *v6[2];
  unsigned int *v7;
  unsigned int *v8;
  uint64_t (*v9)(_QWORD);

  if ((_DWORD)a2 == 3)
  {
    subscriber::makeSimSlotRange();
    v3 = v7;
    if (v7 != v8)
    {
      while ((v9(*v3) & 1) == 0)
      {
        if (++v3 == v8)
        {
          v3 = v8;
          break;
        }
      }
LABEL_6:
      while (v3 != v8)
      {
        v4 = v3 + 1;
        QMIEnhancedLQMCommandDriver::unregister_sync(a1, *v3);
        v3 = v8;
        if (v4 != v8)
        {
          v3 = v4;
          while ((v9(*v3) & 1) == 0)
          {
            if (++v3 == v8)
            {
              v3 = v8;
              goto LABEL_6;
            }
          }
        }
      }
    }
  }
  else
  {
    v6[0] = 0;
    v6[1] = 0;
    v5 = v6;
    (*(void (**)(uint64_t, uint64_t, _QWORD ***))(*(_QWORD *)a1 + 56))(a1, a2, &v5);
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v6[0]);
  }
}

void sub_2169826D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a10);
  _Unwind_Resume(a1);
}

void QMIEnhancedLQMCommandDriver::querySupportedIndications(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _OWORD v10[2];
  _QWORD aBlock[5];
  _QWORD v12[5];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v10);
  *qmi::MutableMessageBase::getTLV<elqm::tlv::Query>(v10) = 17;
  v8 = QMIServiceMsg::create();
  v4 = MEMORY[0x24BDAC760];
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1174405120;
  v12[2] = ___ZN27QMIEnhancedLQMCommandDriver25querySupportedIndicationsENSt3__18functionIFvNS0_3setI21EnhancedLQMIndicationNS0_4lessIS3_EENS0_9allocatorIS3_EEEEEEE_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_8_9;
  v12[4] = a1;
  v5 = v13;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, a2);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4elqm5Query8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5D3E30;
  aBlock[4] = v12;
  v6 = _Block_copy(aBlock);
  v9 = v6;
  if (v8)
  {
    qmi::Client::send();
    v6 = v9;
  }
  if (v6)
    _Block_release(v6);
  if (v14 == v13)
  {
    v7 = 4;
    goto LABEL_9;
  }
  if (v14)
  {
    v7 = 5;
    v5 = v14;
LABEL_9:
    (*(void (**)(_QWORD *))(*v5 + 8 * v7))(v5);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
}

void sub_21698285C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v5 = *(_QWORD **)(v3 - 48);
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v2 = *(_QWORD **)(v3 - 48);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
LABEL_6:
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN27QMIEnhancedLQMCommandDriver25querySupportedIndicationsENSt3__18functionIFvNS0_3setI21EnhancedLQMIndicationNS0_4lessIS3_EENS0_9allocatorIS3_EEEEEEE_block_invoke_2(uint64_t a1, qmi::MessageBase *this)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t TlvValue;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  capabilities::ct *v32;
  int v33;
  capabilities::ct *v34;
  int v35;
  uint64_t v36;
  _QWORD **v37;
  _QWORD *v38[2];
  uint8_t buf[8];
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD v43[2];
  uint64_t v44;

  if (*((_DWORD *)this + 1))
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#N Unable to query baseband for supported indications", buf, 2u);
    }
    v43[0] = 0;
    v43[1] = 0;
    v42 = v43;
    v4 = *(_QWORD *)(a1 + 64);
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 48))(v4, &v42);
    v5 = (_QWORD *)v43[0];
  }
  else
  {
    v40 = 0;
    v41 = 0;
    *(_QWORD *)buf = &v40;
    TlvValue = qmi::MessageBase::findTlvValue(this);
    v9 = TlvValue;
    if (TlvValue)
    {
      v10 = v8;
      v44 = TlvValue;
      v11 = tlv::parseV<elqm::tlv::LinkStateSupported>((unint64_t *)&v44, v8);
      if (v44 && v11)
      {
        std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 16, 16);
      }
      else if (!v44)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 32, v9, v10);
      }
    }
    v12 = qmi::MessageBase::findTlvValue(this);
    v14 = v12;
    if (v12)
    {
      v15 = v13;
      v44 = v12;
      v16 = tlv::parseV<elqm::tlv::LinkFingerprintSupported>((unint64_t *)&v44, v13);
      if (v44 && v16)
      {
        std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 17, 17);
      }
      else if (!v44)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 33, v14, v15);
      }
    }
    v17 = qmi::MessageBase::findTlvValue(this);
    v19 = v17;
    if (v17)
    {
      v20 = v18;
      v44 = v17;
      v21 = tlv::parseV<elqm::tlv::TrafficClassSupported>((unint64_t *)&v44, v18);
      if (v44 && v21)
      {
        std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 18, 18);
      }
      else if (!v44)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 34, v19, v20);
      }
    }
    v22 = qmi::MessageBase::findTlvValue(this);
    v24 = v22;
    if (v22)
    {
      v25 = v23;
      v44 = v22;
      v26 = tlv::parseV<elqm::tlv::DataTransferTimeSupported>((unint64_t *)&v44, v23);
      if (v44 && v26)
      {
        std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 19, 19);
      }
      else if (!v44)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 35, v24, v25);
      }
    }
    v27 = qmi::MessageBase::findTlvValue(this);
    v29 = v27;
    if (v27)
    {
      v30 = v28;
      v44 = v27;
      v31 = tlv::parseV<elqm::tlv::LinkPowerCostSupported>((unint64_t *)&v44, v28);
      if (v44 && v31)
      {
        std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 21, 21);
      }
      else if (!v44)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 36, v29, v30);
      }
    }
    v32 = (capabilities::ct *)qmi::MessageBase::findTlvValue(this);
    v34 = v32;
    if (v32)
    {
      v35 = v33;
      v44 = (uint64_t)v32;
      v32 = (capabilities::ct *)tlv::parseV<elqm::tlv::DataStallSupported>((unint64_t *)&v44, v33);
      if (v44 && (_BYTE)v32)
      {
        v32 = (capabilities::ct *)std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 22, 22);
      }
      else if (!v44)
      {
        v32 = (capabilities::ct *)((uint64_t (*)(_QWORD, uint64_t, capabilities::ct *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 37, v34, v35);
      }
    }
    if (capabilities::ct::supports5G(v32))
    {
      std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 23, 23);
      std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 24, 24);
    }
    v37 = *(_QWORD ***)buf;
    v38[0] = v40;
    v38[1] = v41;
    if (v41)
    {
      v40[2] = v38;
      *(_QWORD *)buf = &v40;
      v40 = 0;
      v41 = 0;
    }
    else
    {
      v37 = v38;
    }
    v36 = *(_QWORD *)(a1 + 64);
    if (!v36)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _QWORD ***))(*(_QWORD *)v36 + 48))(v36, &v37);
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v38[0]);
    v5 = v40;
  }
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v5);
}

void sub_216982CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a14);
  _Unwind_Resume(a1);
}

void sub_216982CF4()
{
  JUMPOUT(0x216982CE8);
}

uint64_t __copy_helper_block_e8_40c92_ZTSNSt3__18functionIFvNS_3setI21EnhancedLQMIndicationNS_4lessIS2_EENS_9allocatorIS2_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_e8_40c92_ZTSNSt3__18functionIFvNS_3setI21EnhancedLQMIndicationNS_4lessIS2_EENS_9allocatorIS2_EEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void QMIEnhancedLQMCommandDriver::queryMaxThroughput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  capabilities::ct *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _OWORD v12[2];
  _QWORD aBlock[5];
  _QWORD v14[4];
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  memset(v12, 0, sizeof(v12));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12);
  v4 = (capabilities::ct *)qmi::MutableMessageBase::getTLV<elqm::tlv::Query>(v12);
  *(_BYTE *)v4 = 16;
  if (capabilities::ct::supportsGemini(v4))
  {
    v5 = qmi::MutableMessageBase::getTLV<elqm::tlv::SubscriptionId>(v12);
    *v5 = subscriber::simSlotAsInstance();
  }
  v10 = QMIServiceMsg::create();
  v6 = MEMORY[0x24BDAC760];
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1174405120;
  v14[2] = ___ZN27QMIEnhancedLQMCommandDriver18queryMaxThroughputEN10subscriber7SimSlotENSt3__18functionIFviNS2_6vectorIhNS2_9allocatorIhEEEEEEE_block_invoke_2;
  v14[3] = &__block_descriptor_tmp_11_6;
  v7 = v15;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, a3);
  aBlock[0] = v6;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4elqm5Query8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5D3E30;
  aBlock[4] = v14;
  v8 = _Block_copy(aBlock);
  v11 = v8;
  if (v10)
  {
    qmi::Client::send();
    v8 = v11;
  }
  if (v8)
    _Block_release(v8);
  if (v16 == v15)
  {
    v9 = 4;
    goto LABEL_11;
  }
  if (v16)
  {
    v9 = 5;
    v7 = v16;
LABEL_11:
    (*(void (**)(_QWORD *))(*v7 + 8 * v9))(v7);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
}

void sub_216982ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v5 = *(_QWORD **)(v3 - 48);
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v2 = *(_QWORD **)(v3 - 48);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
LABEL_6:
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN27QMIEnhancedLQMCommandDriver18queryMaxThroughputEN10subscriber7SimSlotENSt3__18functionIFviNS2_6vectorIhNS2_9allocatorIhEEEEEEE_block_invoke_2(uint64_t a1, qmi::MessageBase *this)
{
  char *TlvValue;
  int v5;
  char *v6;
  int v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  uint64_t v18;
  void *__p;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  void **v23;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  TlvValue = (char *)qmi::MessageBase::findTlvValue(this);
  v6 = TlvValue;
  if (TlvValue)
  {
    v7 = v5;
    v21 = 0;
    v22 = TlvValue;
    __p = 0;
    v20 = 0;
    tlv::parseV<elqm::tlv::EstimatedThroughput>(&v22, v5, &__p);
    v8 = v22;
    v9 = __p;
    if (v22)
    {
      v10 = v20;
      v23 = &v16;
      if (__p != v20)
      {
        do
          std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100]((unint64_t **)&v23, v9++);
        while (v9 != v10);
        v9 = __p;
      }
    }
    if (v9)
    {
      v20 = v9;
      operator delete(v9);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, char *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 16, v6, v7);
  }
  v11 = *((_DWORD *)this + 1);
  v14 = 0;
  v15 = 0;
  v13 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v13, v16, (uint64_t)v17, v17 - (_BYTE *)v16);
  LODWORD(__p) = v11;
  v12 = *(_QWORD *)(a1 + 56);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v12 + 48))(v12, &__p, &v13);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
}

void sub_216983094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c58_ZTSNSt3__18functionIFviNS_6vectorIhNS_9allocatorIhEEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_e8_32c58_ZTSNSt3__18functionIFviNS_6vectorIhNS_9allocatorIhEEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void QMIEnhancedLQMCommandDriver::registrationRequest(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  capabilities::ct *v4;
  char *v5;
  const void **v6;
  char *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  const void **v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  const void **v41;
  char *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  const void **v57;
  char *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  const void **v73;
  char *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  const void **v89;
  char *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  capabilities::ct *v105;
  const void **v106;
  char *v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  int v124;
  const void **v125;
  char *v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  int v143;
  void *v144;
  uint64_t v145;
  void *v146;
  _QWORD v147[2];
  uint64_t (*v148)(uint64_t, _BYTE *);
  void *v149;
  _QWORD *v150[3];
  _QWORD v151[2];
  uint64_t (*v152)(uint64_t, _BYTE *);
  void *v153;
  _QWORD *v154[3];
  _QWORD v155[2];
  uint64_t (*v156)(uint64_t, _BYTE *);
  void *v157;
  _QWORD *v158[3];
  _QWORD v159[2];
  uint64_t (*v160)(uint64_t, _BYTE *);
  void *v161;
  _QWORD *v162[3];
  _QWORD v163[2];
  uint64_t (*v164)(uint64_t, _BYTE *);
  void *v165;
  _QWORD *v166[3];
  __int128 v167;
  __int128 v168;
  uint64_t aBlock;
  uint64_t v170;
  void (*v171)(uint64_t, QMIServiceMsg *);
  void *v172;
  void *v173;

  v167 = 0u;
  v168 = 0u;
  v4 = (capabilities::ct *)qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v167);
  if (capabilities::ct::supportsGemini(v4))
  {
    v5 = qmi::MutableMessageBase::getTLV<elqm::tlv::SubscriptionId>(&v167);
    *v5 = subscriber::simSlotAsInstance();
  }
  v6 = (const void **)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1) != (_QWORD)v168)
  {
    while (*((_BYTE *)*v6 + 8) != 16)
    {
      if (++v6 == (const void **)v168)
        goto LABEL_10;
    }
  }
  if (v6 == (const void **)v168)
  {
LABEL_10:
    v9 = operator new();
    v10 = v9;
    *(_WORD *)(v9 + 8) = 16;
    *(_QWORD *)v9 = &off_24D5D3EC8;
    v11 = v168;
    if ((unint64_t)v168 >= *((_QWORD *)&v168 + 1))
    {
      v13 = (uint64_t)(v168 - *((_QWORD *)&v167 + 1)) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = (uint64_t)(*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1)) >> 2;
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      if (*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v168 + 8, v15);
      else
        v16 = 0;
      v17 = (uint64_t *)&v16[8 * v13];
      v18 = &v16[8 * v15];
      *v17 = v10;
      v12 = v17 + 1;
      v20 = (char *)*((_QWORD *)&v167 + 1);
      v19 = (char *)v168;
      if ((_QWORD)v168 != *((_QWORD *)&v167 + 1))
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v17 = v21;
        }
        while (v19 != v20);
        v19 = (char *)*((_QWORD *)&v167 + 1);
      }
      *((_QWORD *)&v167 + 1) = v17;
      *(_QWORD *)&v168 = v12;
      *((_QWORD *)&v168 + 1) = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_QWORD *)v168 = v9;
      v12 = (_QWORD *)(v11 + 8);
    }
    v8 = (_BYTE *)(v10 + 9);
    *(_QWORD *)&v168 = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = v7 + 9;
  }
  v22 = (uint64_t *)a3[1];
  if (!v22)
    goto LABEL_34;
  while (1)
  {
    v23 = *((_DWORD *)v22 + 7);
    if (v23 <= 16)
      break;
LABEL_31:
    v22 = (uint64_t *)*v22;
    if (!v22)
      goto LABEL_34;
  }
  if (v23 != 16)
  {
    ++v22;
    goto LABEL_31;
  }
  LOBYTE(v22) = 1;
LABEL_34:
  *v8 = (_BYTE)v22;
  v24 = MEMORY[0x24BDAC760];
  v163[0] = MEMORY[0x24BDAC760];
  v163[1] = 1174405120;
  v164 = ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke;
  v165 = &__block_descriptor_tmp_13_8;
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)v166, a3);
  v25 = (const void **)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1) != (_QWORD)v168)
  {
    while (*((_BYTE *)*v25 + 8) != 17)
    {
      if (++v25 == (const void **)v168)
        goto LABEL_41;
    }
  }
  if (v25 == (const void **)v168)
  {
LABEL_41:
    v28 = operator new();
    v29 = v28;
    *(_WORD *)(v28 + 8) = 17;
    *(_QWORD *)v28 = &off_24D5D3F18;
    v30 = v168;
    if ((unint64_t)v168 >= *((_QWORD *)&v168 + 1))
    {
      v32 = (uint64_t)(v168 - *((_QWORD *)&v167 + 1)) >> 3;
      if ((unint64_t)(v32 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v33 = (uint64_t)(*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1)) >> 2;
      if (v33 <= v32 + 1)
        v33 = v32 + 1;
      if (*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v168 + 8, v34);
      else
        v35 = 0;
      v36 = (uint64_t *)&v35[8 * v32];
      v37 = &v35[8 * v34];
      *v36 = v29;
      v31 = v36 + 1;
      v39 = (char *)*((_QWORD *)&v167 + 1);
      v38 = (char *)v168;
      if ((_QWORD)v168 != *((_QWORD *)&v167 + 1))
      {
        do
        {
          v40 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v36 = v40;
        }
        while (v38 != v39);
        v38 = (char *)*((_QWORD *)&v167 + 1);
      }
      *((_QWORD *)&v167 + 1) = v36;
      *(_QWORD *)&v168 = v31;
      *((_QWORD *)&v168 + 1) = v37;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_QWORD *)v168 = v28;
      v31 = (_QWORD *)(v30 + 8);
    }
    v27 = (_BYTE *)(v29 + 9);
    *(_QWORD *)&v168 = v31;
  }
  else
  {
    if (!v26)
      __cxa_bad_cast();
    v27 = v26 + 9;
  }
  v164((uint64_t)v163, v27);
  v159[0] = v24;
  v159[1] = 1174405120;
  v160 = ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_14;
  v161 = &__block_descriptor_tmp_16_7;
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)v162, a3);
  v41 = (const void **)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1) != (_QWORD)v168)
  {
    while (*((_BYTE *)*v41 + 8) != 18)
    {
      if (++v41 == (const void **)v168)
        goto LABEL_65;
    }
  }
  if (v41 == (const void **)v168)
  {
LABEL_65:
    v44 = operator new();
    v45 = v44;
    *(_WORD *)(v44 + 8) = 18;
    *(_QWORD *)v44 = &off_24D5D3F68;
    v46 = v168;
    if ((unint64_t)v168 >= *((_QWORD *)&v168 + 1))
    {
      v48 = (uint64_t)(v168 - *((_QWORD *)&v167 + 1)) >> 3;
      if ((unint64_t)(v48 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v49 = (uint64_t)(*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1)) >> 2;
      if (v49 <= v48 + 1)
        v49 = v48 + 1;
      if (*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v168 + 8, v50);
      else
        v51 = 0;
      v52 = (uint64_t *)&v51[8 * v48];
      v53 = &v51[8 * v50];
      *v52 = v45;
      v47 = v52 + 1;
      v55 = (char *)*((_QWORD *)&v167 + 1);
      v54 = (char *)v168;
      if ((_QWORD)v168 != *((_QWORD *)&v167 + 1))
      {
        do
        {
          v56 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          *--v52 = v56;
        }
        while (v54 != v55);
        v54 = (char *)*((_QWORD *)&v167 + 1);
      }
      *((_QWORD *)&v167 + 1) = v52;
      *(_QWORD *)&v168 = v47;
      *((_QWORD *)&v168 + 1) = v53;
      if (v54)
        operator delete(v54);
    }
    else
    {
      *(_QWORD *)v168 = v44;
      v47 = (_QWORD *)(v46 + 8);
    }
    v43 = (_BYTE *)(v45 + 9);
    *(_QWORD *)&v168 = v47;
  }
  else
  {
    if (!v42)
      __cxa_bad_cast();
    v43 = v42 + 9;
  }
  v160((uint64_t)v159, v43);
  v155[0] = v24;
  v155[1] = 1174405120;
  v156 = ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_17;
  v157 = &__block_descriptor_tmp_19_5;
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)v158, a3);
  v57 = (const void **)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1) != (_QWORD)v168)
  {
    while (*((_BYTE *)*v57 + 8) != 19)
    {
      if (++v57 == (const void **)v168)
        goto LABEL_89;
    }
  }
  if (v57 == (const void **)v168)
  {
LABEL_89:
    v60 = operator new();
    v61 = v60;
    *(_WORD *)(v60 + 8) = 19;
    *(_QWORD *)v60 = &off_24D5D3FB8;
    v62 = v168;
    if ((unint64_t)v168 >= *((_QWORD *)&v168 + 1))
    {
      v64 = (uint64_t)(v168 - *((_QWORD *)&v167 + 1)) >> 3;
      if ((unint64_t)(v64 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v65 = (uint64_t)(*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1)) >> 2;
      if (v65 <= v64 + 1)
        v65 = v64 + 1;
      if (*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v66 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      if (v66)
        v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v168 + 8, v66);
      else
        v67 = 0;
      v68 = (uint64_t *)&v67[8 * v64];
      v69 = &v67[8 * v66];
      *v68 = v61;
      v63 = v68 + 1;
      v71 = (char *)*((_QWORD *)&v167 + 1);
      v70 = (char *)v168;
      if ((_QWORD)v168 != *((_QWORD *)&v167 + 1))
      {
        do
        {
          v72 = *((_QWORD *)v70 - 1);
          v70 -= 8;
          *--v68 = v72;
        }
        while (v70 != v71);
        v70 = (char *)*((_QWORD *)&v167 + 1);
      }
      *((_QWORD *)&v167 + 1) = v68;
      *(_QWORD *)&v168 = v63;
      *((_QWORD *)&v168 + 1) = v69;
      if (v70)
        operator delete(v70);
    }
    else
    {
      *(_QWORD *)v168 = v60;
      v63 = (_QWORD *)(v62 + 8);
    }
    v59 = (_BYTE *)(v61 + 9);
    *(_QWORD *)&v168 = v63;
  }
  else
  {
    if (!v58)
      __cxa_bad_cast();
    v59 = v58 + 9;
  }
  v156((uint64_t)v155, v59);
  v151[0] = v24;
  v151[1] = 1174405120;
  v152 = ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_20;
  v153 = &__block_descriptor_tmp_22_6;
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)v154, a3);
  v73 = (const void **)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1) != (_QWORD)v168)
  {
    while (*((_BYTE *)*v73 + 8) != 20)
    {
      if (++v73 == (const void **)v168)
        goto LABEL_113;
    }
  }
  if (v73 == (const void **)v168)
  {
LABEL_113:
    v76 = operator new();
    v77 = v76;
    *(_WORD *)(v76 + 8) = 20;
    *(_QWORD *)v76 = &off_24D5D4008;
    v78 = v168;
    if ((unint64_t)v168 >= *((_QWORD *)&v168 + 1))
    {
      v80 = (uint64_t)(v168 - *((_QWORD *)&v167 + 1)) >> 3;
      if ((unint64_t)(v80 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v81 = (uint64_t)(*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1)) >> 2;
      if (v81 <= v80 + 1)
        v81 = v80 + 1;
      if (*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v82 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v82 = v81;
      if (v82)
        v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v168 + 8, v82);
      else
        v83 = 0;
      v84 = (uint64_t *)&v83[8 * v80];
      v85 = &v83[8 * v82];
      *v84 = v77;
      v79 = v84 + 1;
      v87 = (char *)*((_QWORD *)&v167 + 1);
      v86 = (char *)v168;
      if ((_QWORD)v168 != *((_QWORD *)&v167 + 1))
      {
        do
        {
          v88 = *((_QWORD *)v86 - 1);
          v86 -= 8;
          *--v84 = v88;
        }
        while (v86 != v87);
        v86 = (char *)*((_QWORD *)&v167 + 1);
      }
      *((_QWORD *)&v167 + 1) = v84;
      *(_QWORD *)&v168 = v79;
      *((_QWORD *)&v168 + 1) = v85;
      if (v86)
        operator delete(v86);
    }
    else
    {
      *(_QWORD *)v168 = v76;
      v79 = (_QWORD *)(v78 + 8);
    }
    v75 = (_BYTE *)(v77 + 9);
    *(_QWORD *)&v168 = v79;
  }
  else
  {
    if (!v74)
      __cxa_bad_cast();
    v75 = v74 + 9;
  }
  v152((uint64_t)v151, v75);
  v147[0] = v24;
  v147[1] = 1174405120;
  v148 = ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_23;
  v149 = &__block_descriptor_tmp_25_0;
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)v150, a3);
  v89 = (const void **)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1) != (_QWORD)v168)
  {
    while (*((_BYTE *)*v89 + 8) != 21)
    {
      if (++v89 == (const void **)v168)
        goto LABEL_137;
    }
  }
  if (v89 == (const void **)v168)
  {
LABEL_137:
    v92 = operator new();
    v93 = v92;
    *(_WORD *)(v92 + 8) = 21;
    *(_QWORD *)v92 = &off_24D5D4058;
    v94 = v168;
    if ((unint64_t)v168 >= *((_QWORD *)&v168 + 1))
    {
      v96 = (uint64_t)(v168 - *((_QWORD *)&v167 + 1)) >> 3;
      if ((unint64_t)(v96 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v97 = (uint64_t)(*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1)) >> 2;
      if (v97 <= v96 + 1)
        v97 = v96 + 1;
      if (*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v98 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v98 = v97;
      if (v98)
        v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v168 + 8, v98);
      else
        v99 = 0;
      v100 = (uint64_t *)&v99[8 * v96];
      v101 = &v99[8 * v98];
      *v100 = v93;
      v95 = v100 + 1;
      v103 = (char *)*((_QWORD *)&v167 + 1);
      v102 = (char *)v168;
      if ((_QWORD)v168 != *((_QWORD *)&v167 + 1))
      {
        do
        {
          v104 = *((_QWORD *)v102 - 1);
          v102 -= 8;
          *--v100 = v104;
        }
        while (v102 != v103);
        v102 = (char *)*((_QWORD *)&v167 + 1);
      }
      *((_QWORD *)&v167 + 1) = v100;
      *(_QWORD *)&v168 = v95;
      *((_QWORD *)&v168 + 1) = v101;
      if (v102)
        operator delete(v102);
    }
    else
    {
      *(_QWORD *)v168 = v92;
      v95 = (_QWORD *)(v94 + 8);
    }
    v91 = (_BYTE *)(v93 + 9);
    *(_QWORD *)&v168 = v95;
  }
  else
  {
    if (!v90)
      __cxa_bad_cast();
    v91 = v90 + 9;
  }
  v105 = (capabilities::ct *)v148((uint64_t)v147, v91);
  if (!capabilities::ct::supports5G(v105))
    goto LABEL_222;
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)&aBlock, a3);
  v106 = (const void **)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1) != (_QWORD)v168)
  {
    while (*((_BYTE *)*v106 + 8) != 22)
    {
      if (++v106 == (const void **)v168)
        goto LABEL_162;
    }
  }
  if (v106 == (const void **)v168)
  {
LABEL_162:
    v109 = operator new();
    v110 = v109;
    *(_WORD *)(v109 + 8) = 22;
    *(_QWORD *)v109 = &off_24D5D40A8;
    v111 = v168;
    if ((unint64_t)v168 >= *((_QWORD *)&v168 + 1))
    {
      v113 = (uint64_t)(v168 - *((_QWORD *)&v167 + 1)) >> 3;
      if ((unint64_t)(v113 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v114 = (uint64_t)(*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1)) >> 2;
      if (v114 <= v113 + 1)
        v114 = v113 + 1;
      if (*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v115 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v115 = v114;
      if (v115)
        v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v168 + 8, v115);
      else
        v116 = 0;
      v117 = (uint64_t *)&v116[8 * v113];
      v118 = &v116[8 * v115];
      *v117 = v110;
      v112 = v117 + 1;
      v120 = (char *)*((_QWORD *)&v167 + 1);
      v119 = (char *)v168;
      if ((_QWORD)v168 != *((_QWORD *)&v167 + 1))
      {
        do
        {
          v121 = *((_QWORD *)v119 - 1);
          v119 -= 8;
          *--v117 = v121;
        }
        while (v119 != v120);
        v119 = (char *)*((_QWORD *)&v167 + 1);
      }
      *((_QWORD *)&v167 + 1) = v117;
      *(_QWORD *)&v168 = v112;
      *((_QWORD *)&v168 + 1) = v118;
      if (v119)
        operator delete(v119);
    }
    else
    {
      *(_QWORD *)v168 = v109;
      v112 = (_QWORD *)(v111 + 8);
    }
    v108 = (_BYTE *)(v110 + 9);
    *(_QWORD *)&v168 = v112;
  }
  else
  {
    if (!v107)
      __cxa_bad_cast();
    v108 = v107 + 9;
  }
  v122 = (_QWORD *)v170;
  if (!v170)
  {
    LOBYTE(v123) = 0;
    goto LABEL_188;
  }
  v123 = v170;
  while (2)
  {
    v124 = *(_DWORD *)(v123 + 28);
    if (v124 > 23)
    {
LABEL_184:
      v123 = *(_QWORD *)v123;
      if (!v123)
        goto LABEL_188;
      continue;
    }
    break;
  }
  if (v124 != 23)
  {
    v123 += 8;
    goto LABEL_184;
  }
  LOBYTE(v123) = 1;
LABEL_188:
  *v108 = v123;
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v122);
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)&aBlock, a3);
  v125 = (const void **)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1) != (_QWORD)v168)
  {
    while (*((_BYTE *)*v125 + 8) != 23)
    {
      if (++v125 == (const void **)v168)
        goto LABEL_195;
    }
  }
  if (v125 == (const void **)v168)
  {
LABEL_195:
    v128 = operator new();
    v129 = v128;
    *(_WORD *)(v128 + 8) = 23;
    *(_QWORD *)v128 = &off_24D5D40F8;
    v130 = v168;
    if ((unint64_t)v168 >= *((_QWORD *)&v168 + 1))
    {
      v132 = (uint64_t)(v168 - *((_QWORD *)&v167 + 1)) >> 3;
      if ((unint64_t)(v132 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v133 = (uint64_t)(*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1)) >> 2;
      if (v133 <= v132 + 1)
        v133 = v132 + 1;
      if (*((_QWORD *)&v168 + 1) - *((_QWORD *)&v167 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v134 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v134 = v133;
      if (v134)
        v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v168 + 8, v134);
      else
        v135 = 0;
      v136 = (uint64_t *)&v135[8 * v132];
      v137 = &v135[8 * v134];
      *v136 = v129;
      v131 = v136 + 1;
      v139 = (char *)*((_QWORD *)&v167 + 1);
      v138 = (char *)v168;
      if ((_QWORD)v168 != *((_QWORD *)&v167 + 1))
      {
        do
        {
          v140 = *((_QWORD *)v138 - 1);
          v138 -= 8;
          *--v136 = v140;
        }
        while (v138 != v139);
        v138 = (char *)*((_QWORD *)&v167 + 1);
      }
      *((_QWORD *)&v167 + 1) = v136;
      *(_QWORD *)&v168 = v131;
      *((_QWORD *)&v168 + 1) = v137;
      if (v138)
        operator delete(v138);
    }
    else
    {
      *(_QWORD *)v168 = v128;
      v131 = (_QWORD *)(v130 + 8);
    }
    v127 = (_BYTE *)(v129 + 9);
    *(_QWORD *)&v168 = v131;
  }
  else
  {
    if (!v126)
      __cxa_bad_cast();
    v127 = v126 + 9;
  }
  v141 = (_QWORD *)v170;
  if (!v170)
  {
    LOBYTE(v142) = 0;
    goto LABEL_221;
  }
  v142 = v170;
  while (2)
  {
    v143 = *(_DWORD *)(v142 + 28);
    if (v143 > 24)
    {
LABEL_217:
      v142 = *(_QWORD *)v142;
      if (!v142)
        goto LABEL_221;
      continue;
    }
    break;
  }
  if (v143 != 24)
  {
    v142 += 8;
    goto LABEL_217;
  }
  LOBYTE(v142) = 1;
LABEL_221:
  *v127 = v142;
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v141);
LABEL_222:
  v145 = QMIServiceMsg::create();
  aBlock = v24;
  v170 = 0x40000000;
  v171 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4elqm10BBRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v172 = &unk_24D5D4128;
  v173 = &__block_literal_global_28;
  v144 = _Block_copy(&aBlock);
  v146 = v144;
  if (v145)
  {
    qmi::Client::send();
    v144 = v146;
  }
  if (v144)
    _Block_release(v144);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v150[1]);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v154[1]);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v158[1]);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v162[1]);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v166[1]);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v167);
}

void sub_216983EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_QWORD *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,_QWORD *a40)
{
  uint64_t v40;

  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a19);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a26);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a33);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a40);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*(_QWORD **)(v40 - 176));
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v40 - 160));
  _Unwind_Resume(a1);
}

uint64_t ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke(uint64_t result, _BYTE *a2)
{
  uint64_t *i;
  int v3;

  for (i = *(uint64_t **)(result + 40); i; i = (uint64_t *)*i)
  {
    v3 = *((_DWORD *)i + 7);
    if (v3 <= 17)
    {
      if (v3 == 17)
      {
        LOBYTE(i) = 1;
        break;
      }
      ++i;
    }
  }
  *a2 = (_BYTE)i;
  return result;
}

uint64_t __copy_helper_block_e8_32c74_ZTSNSt3__13setI21EnhancedLQMIndicationNS_4lessIS1_EENS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  return std::set<EnhancedLQMIndication>::set[abi:ne180100](a1 + 32, (_QWORD *)(a2 + 32));
}

void __destroy_helper_block_e8_32c74_ZTSNSt3__13setI21EnhancedLQMIndicationNS_4lessIS1_EENS_9allocatorIS1_EEEE(uint64_t a1)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*(_QWORD **)(a1 + 40));
}

uint64_t ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_14(uint64_t result, _BYTE *a2)
{
  uint64_t *i;
  int v3;

  for (i = *(uint64_t **)(result + 40); i; i = (uint64_t *)*i)
  {
    v3 = *((_DWORD *)i + 7);
    if (v3 <= 18)
    {
      if (v3 == 18)
      {
        LOBYTE(i) = 1;
        break;
      }
      ++i;
    }
  }
  *a2 = (_BYTE)i;
  return result;
}

uint64_t ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_17(uint64_t result, _BYTE *a2)
{
  uint64_t *i;
  int v3;

  for (i = *(uint64_t **)(result + 40); i; i = (uint64_t *)*i)
  {
    v3 = *((_DWORD *)i + 7);
    if (v3 <= 19)
    {
      if (v3 == 19)
      {
        LOBYTE(i) = 1;
        break;
      }
      ++i;
    }
  }
  *a2 = (_BYTE)i;
  return result;
}

uint64_t ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_20(uint64_t result, _BYTE *a2)
{
  uint64_t *i;
  int v3;

  for (i = *(uint64_t **)(result + 40); i; i = (uint64_t *)*i)
  {
    v3 = *((_DWORD *)i + 7);
    if (v3 <= 21)
    {
      if (v3 == 21)
      {
        LOBYTE(i) = 1;
        break;
      }
      ++i;
    }
  }
  *a2 = (_BYTE)i;
  return result;
}

uint64_t ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_23(uint64_t result, _BYTE *a2)
{
  uint64_t *i;
  int v3;

  for (i = *(uint64_t **)(result + 40); i; i = (uint64_t *)*i)
  {
    v3 = *((_DWORD *)i + 7);
    if (v3 <= 22)
    {
      if (v3 == 22)
      {
        LOBYTE(i) = 1;
        break;
      }
      ++i;
    }
  }
  *a2 = (_BYTE)i;
  return result;
}

void QMIEnhancedLQMCommandDriver::unregistrationRequest(QMIEnhancedLQMCommandDriver *this)
{
  QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3);
}

CFIndex ___ZN27QMIEnhancedLQMCommandDriver15sendTrafficInfoEN10subscriber7SimSlotEtN3ctu2cf11CFSharedRefIK8__CFDataEE_block_invoke_31(uint64_t a1, unint64_t *a2)
{
  UInt8 *BytePtr;
  CFIndex result;
  CFIndex v6;
  unint64_t *v7;

  BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 32));
  result = CFDataGetLength(*(CFDataRef *)(a1 + 32));
  v7 = a2;
  if (result)
  {
    v6 = result;
    do
    {
      result = (CFIndex)std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](&v7, BytePtr++);
      --v6;
    }
    while (v6);
  }
  return result;
}

CFIndex ___ZN27QMIEnhancedLQMCommandDriver15sendTrafficInfoEN10subscriber7SimSlotEtN3ctu2cf11CFSharedRefIK8__CFDataEE_block_invoke_33(uint64_t a1, unint64_t *a2)
{
  UInt8 *BytePtr;
  CFIndex result;
  CFIndex v6;
  unint64_t *v7;

  BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 32));
  result = CFDataGetLength(*(CFDataRef *)(a1 + 32));
  v7 = a2;
  if (result)
  {
    v6 = result;
    do
    {
      result = (CFIndex)std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](&v7, BytePtr++);
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t QMIEnhancedLQMCommandDriver::sendTaggedInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v7;

  v7 = 0;
  v5 = *(_QWORD *)(a5 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, &v7);
}

uint64_t *std::shared_ptr<QMIEnhancedLQMCommandDriver>::shared_ptr[abi:ne180100]<QMIEnhancedLQMCommandDriver,std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D3CE0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2169841F8(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver*)#1}::operator() const(QMIEnhancedLQMCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_216984218(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIEnhancedLQMCommandDriver *,std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver *)#1},std::allocator<QMIEnhancedLQMCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIEnhancedLQMCommandDriver *,std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver *)#1},std::allocator<QMIEnhancedLQMCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver*)#1}::operator() const(QMIEnhancedLQMCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIEnhancedLQMCommandDriver *,std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver *)#1},std::allocator<QMIEnhancedLQMCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver*)#1}::operator() const(QMIEnhancedLQMCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::execute_wrapped<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0>(QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD **v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *__p;
  char v34;
  dispatch_object_t object;
  void *v36;
  char v37;
  _BYTE v38[16];
  __int128 v39;

  v1 = *a1;
  v28 = a1;
  v29 = v1;
  v2 = *v1;
  std::string::basic_string[abi:ne180100]<0>(&v36, "QMIEnhancedLQMCommandDriver");
  v3 = *(NSObject **)(v2 + 24);
  object = v3;
  if (v3)
    dispatch_retain(v3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "elqm");
  v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v4 || (v5 = *(_QWORD *)(v2 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = std::__shared_weak_count::lock(v7);
  if (!v12)
  {
    v31 = 0;
    v32 = 0;
    goto LABEL_19;
  }
  v13 = v12;
  v14 = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v31 = v5;
  v32 = v12;
  std::__shared_weak_count::__release_weak(v7);
  v16 = (unint64_t *)&v13->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    v7 = v13;
LABEL_19:
    std::__shared_weak_count::__release_weak(v7);
  }
  Registry::getServerConnection(*(Registry **)(v2 + 48));
  qmi::Client::createWithQueueLocal();
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](v2 + 112, &v39);
  qmi::Client::~Client((qmi::Client *)v38);
  if (v30)
  {
    v18 = &v30->__shared_owners_;
    do
      v19 = __ldaxr((unint64_t *)v18);
    while (__stlxr(v19 - 1, (unint64_t *)v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v32)
    std::__shared_weak_count::__release_weak(v32);
  if (v34 < 0)
    operator delete(__p);
  if (object)
    dispatch_release(object);
  if (v37 < 0)
    operator delete(v36);
  v21 = v1[2];
  v20 = v1[3];
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(std::__shared_weak_count **)(v2 + 80);
  *(_QWORD *)(v2 + 72) = v21;
  *(_QWORD *)(v2 + 80) = v20;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::unique_ptr<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v29);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v28);
}

void sub_216984514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_object_t object,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v29 = a13;
  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a21 < 0)
    operator delete(__p);
  if (object)
    dispatch_release(object);
  if (a28 < 0)
    operator delete(a23);
  std::unique_ptr<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](&a11);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(NSObject **)(v2 + 8);
    if (v6)
    {
      dispatch_group_leave(v6);
      v7 = *(NSObject **)(v2 + 8);
      if (v7)
        dispatch_release(v7);
    }
    MEMORY[0x2199FEAC4](v2, 0x20C40DC1BFBCFLL);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::execute_wrapped<QMIEnhancedLQMCommandDriver::start(dispatch::group_session)::$_0>(QMIEnhancedLQMCommandDriver::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEnhancedLQMCommandDriver::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMIEnhancedLQMCommandDriver::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  qmi::Client *v4;
  uint64_t **v6;
  uint64_t v7[11];

  v1 = *a1;
  v6 = a1;
  v7[0] = (uint64_t)v1;
  v2 = *v1;
  v3 = MEMORY[0x24BDAC760];
  v4 = (qmi::Client *)(*v1 + 96);
  v7[6] = MEMORY[0x24BDAC760];
  v7[7] = 0x40000000;
  v7[8] = (uint64_t)___ZZN27QMIEnhancedLQMCommandDriver5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  v7[9] = (uint64_t)&__block_descriptor_tmp_41_5;
  v7[10] = v2;
  qmi::Client::setHandler();
  v7[1] = v3;
  v7[2] = 0x40000000;
  v7[3] = (uint64_t)___ZZN27QMIEnhancedLQMCommandDriver5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  v7[4] = (uint64_t)&__block_descriptor_tmp_42_3;
  v7[5] = v2;
  qmi::Client::setHandler();
  qmi::Client::start(v4);
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](v7);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v6);
}

void sub_216984724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN27QMIEnhancedLQMCommandDriver5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = MEMORY[0x24BDAC760];
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZN27QMIEnhancedLQMCommandDriver24handleClientStarted_syncEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_21;
  v4[4] = v1;
  v5 = MEMORY[0x24BDAC760];
  v6 = 0x40000000;
  v7 = ___ZNK3qmi6Client13setIndHandlerIRKN4elqm12BBIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  v8 = &unk_24D5D3DB8;
  v9 = v4;
  qmi::Client::setIndHandler();
  v5 = v2;
  v6 = 0x40000000;
  v7 = ___ZN27QMIEnhancedLQMCommandDriver24handleClientStarted_syncEv_block_invoke_2;
  v8 = &__block_descriptor_tmp_5_5;
  v9 = (_QWORD *)v1;
  qmi::Client::setHandler();
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 72) + 16))(*(_QWORD *)(v1 + 72), 1);
}

uint64_t ___ZZN27QMIEnhancedLQMCommandDriver5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 72) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72), 0);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::execute_wrapped<QMIEnhancedLQMCommandDriver::shutdown(dispatch::group_session)::$_0>(QMIEnhancedLQMCommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEnhancedLQMCommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMIEnhancedLQMCommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD **v4;
  _QWORD *v5;

  v1 = *a1;
  v4 = a1;
  v5 = v1;
  v2 = *v1;
  if (*(_QWORD *)(v2 + 112))
    qmi::Client::stop((qmi::Client *)(v2 + 96));
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_216984880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

capabilities::ct *SimInstanceLogger<QMIEnhancedLQMCommandDriver,ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLogger(capabilities::ct *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  if ((capabilities::ct::supportsGemini(a1) & 1) == 0)
  {
    v5 = (_QWORD *)operator new();
    v6 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v5;
    *v5 = &off_24D5D3D80;
    v5[1] = (char *)a1 - 88;
    if (!v6)
      return a1;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (*(_QWORD *)a1)
    return a1;
  v7 = (_QWORD *)operator new();
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
  SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLoggerDefault(v7);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_10;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_10:
  v10 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v7;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

void sub_2169849E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  MEMORY[0x2199FEAC4](v14, 0x10A1C40FF1576FELL);
  v19 = *v13;
  *v13 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  _Unwind_Resume(a1);
}

void SimInstanceLoggable<QMIEnhancedLQMCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t SimInstanceLoggable<QMIEnhancedLQMCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 40;
}

char *qmi::MutableMessageBase::getTLV<elqm::tlv::Query>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  char *result;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 1)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_WORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = &off_24D5D3E00;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    result = (char *)(v7 + 9);
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 9;
  }
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::Query>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::Query>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::Query>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::Query>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D3E00;
  return result;
}

uint64_t *std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>(uint64_t *result, int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4elqm5Query8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_216984DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::SubscriptionId>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D3E78;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkState>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkState>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkState>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkState>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D3EC8;
  return result;
}

uint64_t std::set<EnhancedLQMIndication>::set[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = 0;
    v7 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v8 = *((_DWORD *)v5 + 7);
      v9 = v3;
      if (v7 == v3)
        goto LABEL_9;
      v10 = v6;
      v11 = v3;
      if (v6)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 7) < v8)
      {
LABEL_9:
        if (v6)
          v13 = (uint64_t **)v9;
        else
          v13 = (uint64_t **)v3;
        if (v6)
          v14 = (uint64_t **)(v9 + 1);
        else
          v14 = (uint64_t **)v3;
        if (!*v14)
        {
LABEL_25:
          v17 = (uint64_t *)operator new(0x20uLL);
          *((_DWORD *)v17 + 7) = v8;
          std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v13, v14, v17);
        }
      }
      else
      {
        v14 = (uint64_t **)v3;
        v13 = (uint64_t **)v3;
        if (!v6)
          goto LABEL_25;
        v15 = v6;
        while (1)
        {
          while (1)
          {
            v13 = (uint64_t **)v15;
            v16 = *((_DWORD *)v15 + 7);
            if (v16 <= v8)
              break;
            v15 = *v13;
            v14 = v13;
            if (!*v13)
              goto LABEL_25;
          }
          if (v16 >= v8)
            break;
          v15 = v13[1];
          if (!v15)
          {
            v14 = v13 + 1;
            goto LABEL_25;
          }
        }
      }
      v18 = (_QWORD *)v5[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v5[2];
          v12 = *v19 == (_QWORD)v5;
          v5 = v19;
        }
        while (!v12);
      }
      if (v19 == v4)
        return a1;
      v7 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
      v5 = v19;
    }
  }
  return a1;
}

void sub_2169850B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v1);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkFingerPrint>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkFingerPrint>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkFingerPrint>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkFingerPrint>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D3F18;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportTrafficClass>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportTrafficClass>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportTrafficClass>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportTrafficClass>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D3F68;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataTransferTime>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataTransferTime>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataTransferTime>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataTransferTime>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D3FB8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkPowerCost>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkPowerCost>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkPowerCost>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkPowerCost>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D4008;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataStall>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataStall>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataStall>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataStall>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D4058;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportHighThroughput>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportHighThroughput>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportHighThroughput>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportHighThroughput>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D40A8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportNRServingCellType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportNRServingCellType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportNRServingCellType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportNRServingCellType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D40F8;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4elqm10BBRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169856C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<elqm::tlv::TrafficClassReport>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D4170;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::TrafficClassReport>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D4170;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_2169857A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<elqm::tlv::JobSizeReport>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D41C0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::JobSizeReport>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D41C0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::JobSizeReport>::getSize(uint64_t a1)
{
  return tlv::size<vs::tlv::CallingNumber>((_QWORD *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<elqm::tlv::JobSizeReport>::write(uint64_t a1, void **a2)
{
  char v3;
  char *v4;
  uint64_t v5;
  void *result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (char *)*a2;
  v5 = (uint64_t)*a2 + 3;
  *a2 = (void *)v5;
  result = tlv::writeV<vs::tlv::CallingNumber>(a2, a1 + 16);
  v7 = (char *)*a2 - v5;
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::JobSizeReport>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D41C0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_216985910(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void QMICellMonitorCommandDriver::create(uint64_t a1@<X0>, NSObject **a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  dispatch_object_t v8;
  __int128 v9;

  v6 = operator new();
  v7 = *a2;
  v8 = v7;
  if (v7)
    dispatch_retain(v7);
  QMICellMonitorCommandDriver::QMICellMonitorCommandDriver(v6, a1, &v8);
  v9 = 0uLL;
  std::shared_ptr<QMICellMonitorCommandDriver>::shared_ptr[abi:ne180100]<QMICellMonitorCommandDriver,std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver*)#1},void>((uint64_t *)&v9, v6);
  *a3 = v9;
  v9 = 0uLL;
  if (v7)
    dispatch_release(v7);
}

void sub_2169859E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v2;
  int v3;

  if (v2)
    dispatch_release(v2);
  if (v3)
    MEMORY[0x2199FEAC4](v1, 0xF1C40985F9F7CLL);
  _Unwind_Resume(exception_object);
}

uint64_t QMICellMonitorCommandDriver::QMICellMonitorCommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  capabilities::ct *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *object;
  _QWORD v17[3];
  _QWORD *v18;
  _BYTE v19[24];
  _BYTE *v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  object = *a3;
  if (*a3)
    dispatch_retain(*a3);
  CellMonitorCommandDriver::CellMonitorCommandDriver();
  if (object)
    dispatch_release(object);
  v17[0] = &unk_24D5CCF40;
  v18 = v17;
  v4 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v17);
  *(_QWORD *)(a1 + 88) = 0;
  if ((capabilities::ct::supportsGemini(v4) & 1) == 0)
  {
    v5 = (_QWORD *)operator new();
    *v5 = &off_24D5D45A0;
    v5[1] = a1;
    v6 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v5;
    if (!v6)
      goto LABEL_16;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (!*(_QWORD *)(a1 + 88))
  {
    v7 = (_QWORD *)operator new();
    std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v19);
    SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLoggerDefault(v7);
    v8 = v22;
    if (v22 == v21)
    {
      v9 = 4;
      v8 = v21;
    }
    else
    {
      if (!v22)
        goto LABEL_14;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_14:
    v10 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_16:
  v11 = v20;
  if (v20 == v19)
  {
    v12 = 4;
    v11 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_21;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_21:
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
    goto LABEL_25;
  }
  if (v18)
  {
    v14 = 5;
LABEL_25:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  *(_QWORD *)a1 = &off_24D5D41F8;
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 96), *(os_log_s **)(a1 + 40));
  ctu::enable_make_unique<qmi::NotifyHelper>::make_unique<std::shared_ptr<Registry const> const&>((uint64_t *)(a1 + 112));
  return a1;
}

void sub_216985C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  CellMonitorCommandDriver *v21;
  uint64_t v22;
  char *v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v25 = a21;
  if (a21 == v23)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  MEMORY[0x2199FEAC4](v22, 0x10A1C40FF1576FELL);
  v27 = *((_QWORD *)v21 + 11);
  *((_QWORD *)v21 + 11) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = a17;
  if (a17 == &a14)
  {
    v29 = 4;
    v28 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_13:
  v30 = a13;
  if (a13 == &a10)
  {
    v31 = 4;
    v30 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_18;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_18:
  CellMonitorCommandDriver::~CellMonitorCommandDriver(v21);
  _Unwind_Resume(a1);
}

void sub_216985D40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  JUMPOUT(0x216985D38);
}

void QMICellMonitorCommandDriver::~QMICellMonitorCommandDriver(qmi::NotifyHelper **this)
{
  qmi::NotifyHelper *v2;

  *this = (qmi::NotifyHelper *)&off_24D5D41F8;
  std::unique_ptr<qmi::NotifyHelper>::reset[abi:ne180100](this + 14, 0);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)(this + 12));
  v2 = this[11];
  this[11] = 0;
  if (v2)
    (*(void (**)(qmi::NotifyHelper *))(*(_QWORD *)v2 + 8))(v2);
  CellMonitorCommandDriver::~CellMonitorCommandDriver((CellMonitorCommandDriver *)this);
}

{
  QMICellMonitorCommandDriver::~QMICellMonitorCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void QMICellMonitorCommandDriver::bootstrap(_QWORD *a1, uint64_t *a2)
{
  _DWORD *v3;
  char *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _DWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  Registry **v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t (*v41)(_QWORD);
  __int128 v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  void *__p;
  char v46;
  dispatch_object_t object;
  void *v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v38 = (Registry **)(a1 + 8);
  subscriber::makeSimSlotRange();
  v3 = v39;
  if (v39 != v40)
  {
    while ((v41(*v3) & 1) == 0)
    {
      if (++v3 == v40)
      {
        v3 = v40;
        break;
      }
    }
    while (v3 != v40)
    {
      if (*v3 == 1)
      {
        v4 = "QMICellMonitor.1";
      }
      else if (*v3 == 2)
      {
        v4 = "QMICellMonitor.2";
      }
      else
      {
        v4 = 0;
      }
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5 || (v6 = std::__shared_weak_count::lock(v5)) == 0)
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v7 = v6;
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      Registry::getServerConnection(*v38);
      v51 = 0u;
      v52 = 0u;
      std::string::basic_string[abi:ne180100]<0>(&v48, v4);
      v12 = a1[3];
      object = v12;
      if (v12)
        dispatch_retain(v12);
      std::string::basic_string[abi:ne180100]<0>(&__p, "cellmonitor");
      v13 = std::__shared_weak_count::lock(v7);
      if (v13)
      {
        v14 = v13;
        v15 = (unint64_t *)&v13->__shared_weak_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        v44 = v13;
        std::__shared_weak_count::__release_weak(v7);
        v17 = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (v18)
          goto LABEL_30;
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        v7 = v14;
      }
      else
      {
        v44 = 0;
      }
      std::__shared_weak_count::__release_weak(v7);
LABEL_30:
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      v42 = 0uLL;
      qmi::Client::createWithQueueLocal();
      if (v43)
      {
        v19 = (unint64_t *)&v43->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v44)
        std::__shared_weak_count::__release_weak(v44);
      if (v46 < 0)
        operator delete(__p);
      if (object)
        dispatch_release(object);
      if (SBYTE7(v50) < 0)
        operator delete(v48);
      v48 = 0;
      v49 = 0;
      v50 = v52;
      v52 = 0uLL;
      qmi::ClientRouter::addClient();
      qmi::Client::~Client((qmi::Client *)&v48);
      qmi::ClientRouter::get();
      qmi::Client::~Client((qmi::Client *)&v51);
      v21 = v3 + 1;
      v3 = v40;
      if (v21 != v40)
      {
        v3 = v21;
        while ((v41(*v3) & 1) == 0)
        {
          if (++v3 == v40)
          {
            v3 = v40;
            break;
          }
        }
      }
    }
  }
  *(_QWORD *)&v51 = &off_24D5D45E0;
  *((_QWORD *)&v51 + 1) = a1;
  *((_QWORD *)&v52 + 1) = &v51;
  qmi::ClientRouter::setIndHandlerInternal();
  v22 = (__int128 *)*((_QWORD *)&v52 + 1);
  if (*((__int128 **)&v52 + 1) == &v51)
  {
    v23 = 4;
    v22 = &v51;
  }
  else
  {
    if (!*((_QWORD *)&v52 + 1))
      goto LABEL_54;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_54:
  *(_QWORD *)&v51 = &off_24D5D4820;
  *((_QWORD *)&v51 + 1) = a1;
  *((_QWORD *)&v52 + 1) = &v51;
  qmi::ClientRouter::setIndHandlerInternal();
  v24 = (__int128 *)*((_QWORD *)&v52 + 1);
  if (*((__int128 **)&v52 + 1) == &v51)
  {
    v25 = 4;
    v24 = &v51;
  }
  else
  {
    if (!*((_QWORD *)&v52 + 1))
      goto LABEL_59;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_59:
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 12));
  *(_QWORD *)&v51 = &off_24D5D48A0;
  *((_QWORD *)&v51 + 1) = a1;
  *((_QWORD *)&v52 + 1) = &v51;
  qmi::ClientRouter::setHandler();
  v26 = (__int128 *)*((_QWORD *)&v52 + 1);
  if (*((__int128 **)&v52 + 1) == &v51)
  {
    v27 = 4;
    v26 = &v51;
  }
  else
  {
    if (!*((_QWORD *)&v52 + 1))
      goto LABEL_64;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_64:
  v48 = &off_24D5D4920;
  v49 = a1;
  *((_QWORD *)&v50 + 1) = &v48;
  qmi::ClientRouter::setHandler();
  v28 = (void **)*((_QWORD *)&v50 + 1);
  if (*((void ***)&v50 + 1) == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!*((_QWORD *)&v50 + 1))
      goto LABEL_69;
    v29 = 5;
  }
  (*((void (**)(void))*v28 + v29))();
LABEL_69:
  v31 = *a2;
  v30 = a2[1];
  if (v30)
  {
    v32 = (unint64_t *)(v30 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = (std::__shared_weak_count *)a1[7];
  a1[6] = v31;
  a1[7] = v30;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_216986324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,dispatch_object_t object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void **a36)
{
  void **v36;
  void **p_p;
  uint64_t v39;

  p_p = a36;
  if (a36 == v36)
  {
    v39 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a36)
      goto LABEL_6;
    v39 = 5;
  }
  (*((void (**)(void))*p_p + v39))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t QMICellMonitorCommandDriver::start(QMICellMonitorCommandDriver *this)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I Starting", v3, 2u);
  }
  return qmi::ClientRouter::start();
}

uint64_t QMICellMonitorCommandDriver::shutdown(QMICellMonitorCommandDriver *this)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I Shutting down", v3, 2u);
  }
  return qmi::ClientRouter::stop();
}

uint64_t QMICellMonitorCommandDriver::getCellInformationForSlot(subscriber::SimSlot,CellInfoSource,dispatch::group_session)::$_0::~$_0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 8);
    if (v3)
      dispatch_release(v3);
  }
  return a1;
}

void ___ZN27QMICellMonitorCommandDriver31process5GCellV1Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke(uint64_t a1, uint64_t *a2)
{
  int64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  void *v14;
  char v15;
  uint64_t v16;
  void *__p;
  char v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[28];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  std::optional<NrCellInformation>::operator=[abi:ne180100]<NrCellInformation,void>(*(_QWORD *)(a1 + 32) + 192, (uint64_t)v13);
  *(_QWORD *)&v24 = v13;
  std::vector<NrCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v4 = *(int64x2_t **)(a1 + 32);
  if (!v4[13].i8[8]
    || (std::vector<NrCell>::resize(v4 + 12, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4)),
        v5 = *(_QWORD *)(a1 + 32),
        !*(_BYTE *)(v5 + 216)))
  {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = *(_WORD **)(v5 + 192);
    do
    {
      v24 = 0u;
      v25 = 0u;
      MEMORY[0x2199FDEAC](&v24, *(unsigned __int16 *)(v6 + 2));
      v22 = 0u;
      v23 = 0u;
      MEMORY[0x2199FDEE8](&v22, *(unsigned __int16 *)(v6 + 4), &v24);
      LOWORD(v13[0]) = *(_WORD *)v6;
      MCC::MCC();
      MCC::MCC((MCC *)&v16, (const MCC *)&v22);
      LOWORD(v19) = *(_WORD *)(v6 + 6);
      DWORD1(v19) = *(_DWORD *)(v6 + 8);
      *((_QWORD *)&v19 + 1) = *(_QWORD *)(v6 + 16);
      LODWORD(v20) = *(_DWORD *)(v6 + 24);
      WORD2(v20) = *(_WORD *)(v6 + 28);
      *((_QWORD *)&v20 + 1) = *(_QWORD *)(v6 + 32);
      *(_WORD *)v21 = *(_WORD *)(v6 + 40);
      v21[2] = *(_BYTE *)(v6 + 42);
      *(_DWORD *)&v21[4] = *(_DWORD *)(v6 + 44);
      v21[8] = 0;
      *(_DWORD *)&v21[12] = 0;
      *(_WORD *)&v21[16] = 0;
      *(_DWORD *)&v21[20] = 0;
      *(_DWORD *)&v21[24] = 0;
      if (SHIBYTE(v23) < 0)
        operator delete(*((void **)&v22 + 1));
      if (SHIBYTE(v25) < 0)
        operator delete(*((void **)&v24 + 1));
      *v8 = v13[0];
      MCC::operator=();
      v9 = v8 + 20;
      MCC::operator=();
      v10 = v19;
      v11 = v20;
      v12 = *(_OWORD *)v21;
      *(_OWORD *)((char *)v9 + 76) = *(_OWORD *)&v21[12];
      v9[3] = v11;
      v9[4] = v12;
      v9[2] = v10;
      if (v18 < 0)
        operator delete(__p);
      if (v15 < 0)
        operator delete(v14);
      v6 += 48;
      v8 = v9 + 6;
    }
    while (v6 != v7);
  }
}

void sub_21698675C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 97) < 0)
    operator delete(*(void **)(v17 - 120));
  if (*(char *)(v17 - 65) < 0)
    operator delete(*(void **)(v17 - 88));
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<NrCellInformation>::operator=[abi:ne180100]<NrCellInformation,void>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      v5 = *(_QWORD *)(a1 + 8);
      v6 = *(void **)a1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 136;
          std::__destroy_at[abi:ne180100]<NrCell,0>(v5);
        }
        while ((void *)v5 != v4);
        v6 = *(void **)a1;
      }
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v6);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void std::vector<NrCell>::resize(int64x2_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int64x2_t v31;
  char *v32;
  int64x2_t *v33;

  v4 = a1->i64[0];
  v5 = a1->i64[1];
  v6 = 0xF0F0F0F0F0F0F0F1 * ((v5 - a1->i64[0]) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v26 = v4 + 136 * a2;
      while (v5 != v26)
      {
        v5 -= 136;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v5);
      }
      a1->i64[1] = v26;
    }
  }
  else
  {
    v8 = a1[1].i64[0];
    if (0xF0F0F0F0F0F0F0F1 * ((v8 - v5) >> 3) >= v7)
    {
      v27 = v5 + 136 * v7;
      v28 = 136 * a2 - 8 * ((v5 - a1->i64[0]) >> 3);
      do
      {
        _ZNSt3__112construct_atB8ne180100I6NrCellJEPS1_EEPT_S4_DpOT0_(v5);
        v5 += 136;
        v28 -= 136;
      }
      while (v28);
      a1->i64[1] = v27;
    }
    else
    {
      if (a2 > 0x1E1E1E1E1E1E1E1)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v9 = 0xF0F0F0F0F0F0F0F1 * ((v8 - v4) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0xF0F0F0F0F0F0F0)
        v11 = 0x1E1E1E1E1E1E1E1;
      else
        v11 = v10;
      v33 = a1 + 1;
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NrCell>>(v11);
      v13 = (uint64_t)&v12[136 * v6];
      v30 = v12;
      v31.i64[0] = v13;
      v31.i64[1] = v13;
      v32 = &v12[136 * v14];
      v15 = &v12[136 * a2];
      v16 = 136 * a2 - 136 * v6;
      do
      {
        _ZNSt3__112construct_atB8ne180100I6NrCellJEPS1_EEPT_S4_DpOT0_(v13);
        v13 += 136;
        v16 -= 136;
      }
      while (v16);
      v31.i64[1] = (uint64_t)v15;
      v18 = a1->i64[0];
      v17 = a1->u64[1];
      v19 = v31.i64[0];
      if (v17 == a1->i64[0])
      {
        v25 = vdupq_n_s64(v17);
      }
      else
      {
        v20 = 0;
        do
        {
          *(_WORD *)(v19 + v20 - 136) = *(_WORD *)(v17 + v20 - 136);
          MCC::MCC();
          MCC::MCC((MCC *)(v19 + v20 - 96), (const MCC *)(v17 + v20 - 96));
          v21 = v19 + v20;
          v22 = *(_OWORD *)(v17 + v20 - 64);
          v23 = *(_OWORD *)(v17 + v20 - 48);
          v24 = *(_OWORD *)(v17 + v20 - 32);
          *(_OWORD *)(v21 - 20) = *(_OWORD *)(v17 + v20 - 20);
          *(_OWORD *)(v21 - 48) = v23;
          *(_OWORD *)(v21 - 32) = v24;
          *(_OWORD *)(v21 - 64) = v22;
          v20 -= 136;
        }
        while (v17 + v20 != v18);
        v25 = *a1;
        v15 = (char *)v31.i64[1];
        v19 += v20;
      }
      a1->i64[0] = v19;
      a1->i64[1] = (uint64_t)v15;
      v31 = v25;
      v29 = (char *)a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)v32;
      v32 = v29;
      v30 = (char *)v25.i64[0];
      std::__split_buffer<NrCell>::~__split_buffer((uint64_t)&v30);
    }
  }
}

void ___ZN27QMICellMonitorCommandDriver31process5GCellV3Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke(uint64_t a1, uint64_t *a2)
{
  int64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  void *v14;
  char v15;
  uint64_t v16;
  void *__p;
  char v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[28];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  std::optional<NrCellInformation>::operator=[abi:ne180100]<NrCellInformation,void>(*(_QWORD *)(a1 + 32) + 192, (uint64_t)v13);
  *(_QWORD *)&v24 = v13;
  std::vector<NrCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v4 = *(int64x2_t **)(a1 + 32);
  if (!v4[13].i8[8]
    || (std::vector<NrCell>::resize(v4 + 12, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3)),
        v5 = *(_QWORD *)(a1 + 32),
        !*(_BYTE *)(v5 + 216)))
  {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = *(_WORD **)(v5 + 192);
    do
    {
      v24 = 0u;
      v25 = 0u;
      MEMORY[0x2199FDEAC](&v24, *(unsigned __int16 *)(v6 + 2));
      v22 = 0u;
      v23 = 0u;
      MEMORY[0x2199FDEE8](&v22, *(unsigned __int16 *)(v6 + 4), &v24);
      LOWORD(v13[0]) = *(_WORD *)v6;
      MCC::MCC();
      MCC::MCC((MCC *)&v16, (const MCC *)&v22);
      LOWORD(v19) = *(_WORD *)(v6 + 6);
      DWORD1(v19) = *(_DWORD *)(v6 + 8);
      *((_QWORD *)&v19 + 1) = *(_QWORD *)(v6 + 16);
      LODWORD(v20) = *(_DWORD *)(v6 + 24);
      WORD2(v20) = *(_WORD *)(v6 + 28);
      *((_QWORD *)&v20 + 1) = *(_QWORD *)(v6 + 32);
      *(_WORD *)v21 = *(_WORD *)(v6 + 40);
      v21[2] = *(_BYTE *)(v6 + 42);
      *(_DWORD *)&v21[4] = *(_DWORD *)(v6 + 44);
      v21[8] = *(_BYTE *)(v6 + 48);
      *(_DWORD *)&v21[12] = *(_DWORD *)(v6 + 52);
      *(_WORD *)&v21[16] = *(_WORD *)(v6 + 56);
      *(_DWORD *)&v21[20] = 0;
      *(_DWORD *)&v21[24] = 0;
      if (SHIBYTE(v23) < 0)
        operator delete(*((void **)&v22 + 1));
      if (SHIBYTE(v25) < 0)
        operator delete(*((void **)&v24 + 1));
      *v8 = v13[0];
      MCC::operator=();
      v9 = v8 + 20;
      MCC::operator=();
      v10 = v19;
      v11 = v20;
      v12 = *(_OWORD *)v21;
      *(_OWORD *)((char *)v9 + 76) = *(_OWORD *)&v21[12];
      v9[3] = v11;
      v9[4] = v12;
      v9[2] = v10;
      if (v18 < 0)
        operator delete(__p);
      if (v15 < 0)
        operator delete(v14);
      v6 += 72;
      v8 = v9 + 6;
    }
    while (v6 != v7);
  }
}

void sub_216986CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 97) < 0)
    operator delete(*(void **)(v17 - 120));
  if (*(char *)(v17 - 65) < 0)
    operator delete(*(void **)(v17 - 88));
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<LteCellInformation>::operator=[abi:ne180100]<LteCellInformation,void>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      v5 = *(_QWORD *)(a1 + 8);
      v6 = *(void **)a1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 128;
          std::__destroy_at[abi:ne180100]<NrCell,0>(v5);
        }
        while ((void *)v5 != v4);
        v6 = *(void **)a1;
      }
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v6);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void ___ZN27QMICellMonitorCommandDriver32processLTECellV3Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke(uint64_t a1, uint64_t *a2)
{
  int64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  void *v14;
  char v15;
  uint64_t v16;
  void *v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *__p[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  std::optional<LteCellInformation>::operator=[abi:ne180100]<LteCellInformation,void>(*(_QWORD *)(a1 + 32) + 128, (uint64_t)v13);
  *(_QWORD *)&v25 = v13;
  std::vector<LteCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  v4 = *(int64x2_t **)(a1 + 32);
  if (!v4[9].i8[8]
    || (std::vector<LteCell>::resize(v4 + 8, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2)),
        v5 = *(_QWORD *)(a1 + 32),
        !*(_BYTE *)(v5 + 152)))
  {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = *(_WORD **)(v5 + 128);
    do
    {
      v25 = 0u;
      v26 = 0u;
      MEMORY[0x2199FDEAC](&v25, *(unsigned __int16 *)(v6 + 2));
      *(_OWORD *)__p = 0u;
      v24 = 0u;
      MEMORY[0x2199FDEE8](__p, *(unsigned __int16 *)(v6 + 4), &v25);
      LOWORD(v13[0]) = *(_WORD *)v6;
      MCC::MCC();
      MCC::MCC((MCC *)&v16, (const MCC *)__p);
      LOBYTE(v19) = *(_BYTE *)(v6 + 6) + 1;
      *(_QWORD *)((char *)&v19 + 4) = *(_QWORD *)(v6 + 8);
      HIDWORD(v19) = *(_DWORD *)(v6 + 16);
      LOWORD(v20) = *(_WORD *)(v6 + 20);
      *(_QWORD *)((char *)&v20 + 4) = *(_QWORD *)(v6 + 24);
      WORD6(v20) = *(_WORD *)(v6 + 32);
      BYTE14(v20) = 1;
      LODWORD(v21) = 0;
      BYTE4(v21) = 0;
      DWORD2(v21) = 0;
      WORD6(v21) = 0;
      v22 = 0;
      if (SHIBYTE(v24) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(v26) < 0)
        operator delete(*((void **)&v25 + 1));
      *v8 = v13[0];
      MCC::operator=();
      v9 = v8 + 20;
      MCC::operator=();
      v10 = v19;
      v11 = v20;
      v12 = v21;
      *((_QWORD *)v9 + 10) = v22;
      *((_OWORD *)v9 + 3) = v11;
      *((_OWORD *)v9 + 4) = v12;
      *((_OWORD *)v9 + 2) = v10;
      if (v18 < 0)
        operator delete(v17);
      if (v15 < 0)
        operator delete(v14);
      v6 += 36;
      v8 = v9 + 44;
    }
    while (v6 != v7);
  }
}

void sub_216986FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a16 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v34 - 65) < 0)
    operator delete(*(void **)(v34 - 88));
  _Unwind_Resume(exception_object);
}

void ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_25(uint64_t a1, unint64_t **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  char *v14;
  char *v15;
  unint64_t v16;

  v2 = *(unsigned __int8 **)(a1 + 32);
  v3 = *(unsigned __int8 **)(a1 + 40);
  if (v2 != v3)
  {
    v5 = a2 + 2;
    v6 = a2[1];
    do
    {
      v7 = *v2 | ((unint64_t)*((unsigned __int16 *)v2 + 1) << 16) | ((unint64_t)*((unsigned int *)v2 + 1) << 32);
      if ((unint64_t)v6 >= *v5)
      {
        v8 = v6 - *a2;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v9 = *v5 - (_QWORD)*a2;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)v5, v11);
        else
          v12 = 0;
        v13 = (unint64_t *)&v12[8 * v8];
        *v13 = v7;
        v6 = v13 + 1;
        v15 = (char *)*a2;
        v14 = (char *)a2[1];
        if (v14 != (char *)*a2)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = (char *)*a2;
        }
        *a2 = v13;
        a2[1] = v6;
        a2[2] = (unint64_t *)&v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v6++ = v7;
      }
      a2[1] = v6;
      v2 += 8;
    }
    while (v2 != v3);
  }
}

_QWORD *__copy_helper_block_e8_32c56_ZTSNSt3__16vectorI14SystemRecord1xNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<SystemRecord1x>::__init_with_size[abi:ne180100]<SystemRecord1x*,SystemRecord1x*>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
}

void __destroy_helper_block_e8_32c56_ZTSNSt3__16vectorI14SystemRecord1xNS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_28(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  void *__p[2];
  uint64_t v19;
  _QWORD v20[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v2 != v3)
  {
    v5 = (uint64_t)(a2 + 2);
    do
    {
      HintConverter::operator()(v2, (uint64_t)&v17);
      v6 = a2[1];
      v7 = a2[2];
      if (v6 >= v7)
      {
        v8 = (uint64_t)(v6 - *a2) >> 5;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 59)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v10 = v7 - *a2;
        if (v10 >> 4 > v9)
          v9 = v10 >> 4;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
          v11 = 0x7FFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        v20[4] = v5;
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>(v5, v11);
        v13 = &v12[32 * v8];
        v20[0] = v12;
        v20[1] = v13;
        v20[3] = &v12[32 * v14];
        *(_DWORD *)v13 = v17;
        *((_QWORD *)v13 + 2) = 0;
        *((_QWORD *)v13 + 3) = 0;
        *((_QWORD *)v13 + 1) = 0;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)__p;
        *((_QWORD *)v13 + 3) = v19;
        __p[0] = 0;
        __p[1] = 0;
        v19 = 0;
        v20[2] = v13 + 32;
        std::vector<nas::tlv::C2KEVDOHintItem>::__swap_out_circular_buffer(a2, v20);
        v15 = a2[1];
        std::__split_buffer<at::tlv::CommandCallback>::~__split_buffer((uint64_t)v20);
        v16 = __p[0];
        a2[1] = v15;
        if (v16)
        {
          __p[1] = v16;
          operator delete(v16);
        }
      }
      else
      {
        *(_DWORD *)v6 = v17;
        *(_QWORD *)(v6 + 16) = 0;
        *(_QWORD *)(v6 + 24) = 0;
        *(_QWORD *)(v6 + 8) = 0;
        *(_OWORD *)(v6 + 8) = *(_OWORD *)__p;
        *(_QWORD *)(v6 + 24) = v19;
        a2[1] = v6 + 32;
      }
      v2 += 20;
    }
    while (v2 != v3);
  }
}

void sub_2169872F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__split_buffer<at::tlv::CommandCallback>::~__split_buffer((uint64_t)&a14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c58_ZTSNSt3__16vectorI16SystemRecordEVDONS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<SystemRecordEVDO>::__init_with_size[abi:ne180100]<SystemRecordEVDO*,SystemRecordEVDO*>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2));
}

void __destroy_helper_block_e8_32c58_ZTSNSt3__16vectorI16SystemRecordEVDONS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

_QWORD *__copy_helper_block_e8_32c57_ZTSNSt3__16vectorI15SystemRecordGSMNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<SystemRecordGSM>::__init_with_size[abi:ne180100]<SystemRecordGSM*,SystemRecordGSM*>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 1));
}

void __destroy_helper_block_e8_32c57_ZTSNSt3__16vectorI15SystemRecordGSMNS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_34(uint64_t a1, unint64_t **a2)
{
  unsigned int *v2;
  unsigned int *v3;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;

  v2 = *(unsigned int **)(a1 + 32);
  v3 = *(unsigned int **)(a1 + 40);
  if (v2 != v3)
  {
    v5 = a2 + 2;
    v6 = a2[1];
    do
    {
      if (*((_BYTE *)v2 + 14))
        v7 = (unint64_t)*((unsigned __int8 *)v2 + 13) << 40;
      else
        v7 = 0;
      v8 = v2[2] | ((unint64_t)*((unsigned __int8 *)v2 + 12) << 32) | v7;
      v9 = *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
      if ((unint64_t)v6 >= *v5)
      {
        v10 = ((char *)v6 - (char *)*a2) >> 4;
        if ((unint64_t)(v10 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v11 = *v5 - (_QWORD)*a2;
        v12 = v11 >> 3;
        if (v11 >> 3 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,16ul>>>((uint64_t)v5, v13);
        else
          v14 = 0;
        v15 = (unint64_t *)&v14[16 * v10];
        *v15 = v9;
        v15[1] = v8;
        v17 = *a2;
        v16 = a2[1];
        v18 = v15;
        if (v16 != *a2)
        {
          do
          {
            v19 = *(v16 - 2);
            v16 -= 2;
            v20 = *(unint64_t *)((char *)v16 + 6);
            *(v18 - 2) = v19;
            v18 -= 2;
            *(unint64_t *)((char *)v18 + 6) = v20;
          }
          while (v16 != v17);
          v16 = *a2;
        }
        v6 = v15 + 2;
        *a2 = v18;
        a2[1] = v15 + 2;
        a2[2] = (unint64_t *)&v14[16 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v6 = v9;
        v6[1] = v8;
        v6 += 2;
      }
      a2[1] = v6;
      v2 += 4;
    }
    while (v2 != v3);
  }
}

_QWORD *__copy_helper_block_e8_32c57_ZTSNSt3__16vectorI15SystemRecordLTENS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<SystemRecordLTE>::__init_with_size[abi:ne180100]<SystemRecordLTE*,SystemRecordLTE*>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
}

void __destroy_helper_block_e8_32c57_ZTSNSt3__16vectorI15SystemRecordLTENS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

_QWORD *__copy_helper_block_e8_32c56_ZTSNSt3__16vectorI14SystemRecordNRNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<SystemRecordNR>::__init_with_size[abi:ne180100]<SystemRecordNR*,SystemRecordNR*>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2));
}

void __destroy_helper_block_e8_32c56_ZTSNSt3__16vectorI14SystemRecordNRNS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void QMICellMonitorCommandDriver::sendStatusHint(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t (*v19)(_QWORD);
  char *v20;
  char *v21;
  char *v22;
  void **v23[2];

  subscriber::makeSimSlotRange();
  v5 = v17;
  if (v17 != v18)
  {
    while ((v19(*v5) & 1) == 0)
    {
      if (++v5 == v18)
      {
        v5 = v18;
        break;
      }
    }
    while (v5 != v18)
    {
      v6 = *v5 == 1;
      if (*v5 == 2)
        v6 = 2;
      if (*v5 == 3)
        v7 = 3;
      else
        v7 = v6;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23[0] = (void **)&v20;
      v9 = *a4;
      v8 = a4[1];
      v10 = v8 - *a4;
      if (v8 != *a4)
      {
        v23[1] = 0;
        if (v10 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v11 = (char *)operator new(v10);
        v12 = 0;
        v20 = v11;
        v21 = v11;
        v22 = &v11[64 * (v10 >> 6)];
        do
        {
          v13 = MCC::MCC();
          MCC::MCC((MCC *)(v13 + 32), (const MCC *)(v9 + v12 + 32));
          v12 += 64;
        }
        while (v9 + v12 != v8);
        v21 = &v11[v12];
      }
      (*(void (**)(uint64_t, uint64_t, _QWORD, char **))(*(_QWORD *)a1 + 80))(a1, v7, a3, &v20);
      v23[0] = (void **)&v20;
      std::vector<MCCAndMNC>::__destroy_vector::operator()[abi:ne180100](v23);
      v14 = v5 + 1;
      v5 = v18;
      if (v14 != v18)
      {
        v5 = v14;
        while ((v19(*v5) & 1) == 0)
        {
          if (++v5 == v18)
          {
            v5 = v18;
            break;
          }
        }
      }
    }
  }
}

void sub_2169879F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::vector<MCCAndMNC>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void QMICellMonitorCommandDriver::sendStatusHintForSlot(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  uint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  int v24;
  _OWORD v25[2];
  _QWORD v26[5];
  std::__shared_weak_count *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  _QWORD aBlock[5];

  memset(v25, 0, sizeof(v25));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v25);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), a2);
  v7 = MEMORY[0x24BDAC760];
  v23[0] = MEMORY[0x24BDAC760];
  v23[1] = 0x40000000;
  v23[2] = ___ZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNSt3__16vectorI9MCCAndMNCNS3_9allocatorIS5_EEEE_block_invoke;
  v23[3] = &__block_descriptor_tmp_40_2;
  v24 = a3;
  v23[4] = v6;
  v8 = qmi::MutableMessageBase::getTLV<nas::tlv::StatusType>(v25);
  ___ZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNSt3__16vectorI9MCCAndMNCNS3_9allocatorIS5_EEEE_block_invoke((uint64_t)v23, v8);
  if ((a2 - 1) >= 3)
    LODWORD(a2) = 0;
  v9 = qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::FrequencyHints::Request>((uint64_t)&v21, a2, v9);
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D5058;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  v28 = &v10[1].__vftable;
  v29 = v10;
  v12 = v22;
  v26[0] = v7;
  v26[1] = 1174405120;
  v26[2] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNSt3__16vectorI9MCCAndMNCNS7_9allocatorIS9_EEEEE3__0EEOS1_OT__block_invoke;
  v26[3] = &__block_descriptor_tmp_74_2;
  v26[4] = v10 + 1;
  v27 = v10;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  aBlock[0] = v7;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_13;
  aBlock[3] = &unk_24D5D4C08;
  aBlock[4] = v26;
  *(_QWORD *)(v12 + 32) = _Block_copy(aBlock);
  v14 = v27;
  if (v27)
  {
    v15 = (unint64_t *)&v27->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v22;
  v22 = 0;
  if (v20)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v22, v20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v25);
}

void sub_216987C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v3 - 120);
  v5 = v6;
  v6 = 0;
  if (v5)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)va, v5);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNSt3__16vectorI9MCCAndMNCNS3_9allocatorIS5_EEEE_block_invoke(uint64_t a1, _BYTE *a2)
{
  unsigned int v3;
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 40) - 1;
  if (v3 <= 5)
    *a2 = 0x40305020100uLL >> (8 * v3);
  v4 = **(NSObject ***)(a1 + 32);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = nas::asString(*a2);
    v6 = 136315138;
    v7 = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Sending LASD status hint %s", (uint8_t *)&v6, 0xCu);
  }
}

void std::__destroy_at[abi:ne180100]<NrCell,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void NrCell::~NrCell(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void std::vector<NrCell>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t _ZNSt3__112construct_atB8ne180100I6NrCellJEPS1_EEPT_S4_DpOT0_(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  MCC::MCC((MCC *)(a1 + 8));
  MNC::MNC((MNC *)(a1 + 40));
  *(_BYTE *)(a1 + 106) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  return a1;
}

void sub_216987ED0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NrCell>>(unint64_t a1)
{
  if (a1 >= 0x1E1E1E1E1E1E1E2)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(136 * a1);
}

uint64_t std::__split_buffer<NrCell>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 136;
    std::__destroy_at[abi:ne180100]<NrCell,0>(i - 136);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<LteCell>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 128;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t _ZNSt3__112construct_atB8ne180100I7LteCellJEPS1_EEPT_S4_DpOT0_(uint64_t a1)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  MCC::MCC((MCC *)(a1 + 8));
  MNC::MNC((MNC *)(a1 + 40));
  *(_BYTE *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 100) = 0;
  *(_BYTE *)(a1 + 102) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_216988040(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<LteCell>>(unint64_t a1)
{
  if (a1 >> 57)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 7);
}

_QWORD *std::vector<SystemRecord1x>::__init_with_size[abi:ne180100]<SystemRecord1x*,SystemRecord1x*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = operator new(8 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_216988114(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageComplete>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D4508;
  return result;
}

_QWORD *std::vector<SystemRecordEVDO>::__init_with_size[abi:ne180100]<SystemRecordEVDO*,SystemRecordEVDO*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = operator new(20 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = (char *)result + 20 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_216988214(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char ***std::back_insert_iterator<std::vector<nas::tlv::GSMHintItem>>::operator=[abi:ne180100](char ***a1, uint64_t *a2)
{
  char **v4;
  unint64_t v5;
  char **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int16 v23;

  v4 = *a1;
  v5 = (unint64_t)(*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)*v4) >> 1);
    v13 = v12 + 1;
    if (v12 + 1 > 0x1999999999999999)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)*v4) >> 1);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0xCCCCCCCCCCCCCCCLL)
      v15 = 0x1999999999999999;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nas::tlv::GSMHintItem>>(v7, v15);
    else
      v16 = 0;
    v17 = &v16[10 * v12];
    v18 = &v16[10 * v15];
    v19 = *a2;
    *((_WORD *)v17 + 4) = *((_WORD *)a2 + 4);
    *(_QWORD *)v17 = v19;
    v11 = v17 + 10;
    v21 = *v4;
    v20 = v4[1];
    if (v20 != *v4)
    {
      do
      {
        v22 = *(_QWORD *)(v20 - 10);
        v20 -= 10;
        v23 = *((_WORD *)v20 + 4);
        *(_QWORD *)(v17 - 10) = v22;
        v17 -= 10;
        *((_WORD *)v17 + 4) = v23;
      }
      while (v20 != v21);
      v20 = *v4;
    }
    *v4 = v17;
    v4[1] = v11;
    v4[2] = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v10 = *a2;
    *(_WORD *)(v5 + 8) = *((_WORD *)a2 + 4);
    *(_QWORD *)v5 = v10;
    v11 = (char *)(v5 + 10);
  }
  v4[1] = v11;
  return a1;
}

_QWORD *std::vector<SystemRecordGSM>::__init_with_size[abi:ne180100]<SystemRecordGSM*,SystemRecordGSM*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x199999999999999ALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = operator new(10 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = (char *)result + 10 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_2169883EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<SystemRecordLTE>::__init_with_size[abi:ne180100]<SystemRecordLTE*,SystemRecordLTE*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = operator new(16 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9 - 1);
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_21698848C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<SystemRecordNR>::__init_with_size[abi:ne180100]<SystemRecordNR*,SystemRecordNR*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = operator new(20 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = (char *)result + 20 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_216988540(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<QMICellMonitorCommandDriver>::shared_ptr[abi:ne180100]<QMICellMonitorCommandDriver,std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D4540;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2169885C8(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver*)#1}::operator() const(QMICellMonitorCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2169885E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMICellMonitorCommandDriver *,std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver *)#1},std::allocator<QMICellMonitorCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMICellMonitorCommandDriver *,std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver *)#1},std::allocator<QMICellMonitorCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver*)#1}::operator() const(QMICellMonitorCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMICellMonitorCommandDriver *,std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver *)#1},std::allocator<QMICellMonitorCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver*)#1}::operator() const(QMICellMonitorCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void SimInstanceLoggable<QMICellMonitorCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t SimInstanceLoggable<QMICellMonitorCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 40;
}

qmi::NotifyHelper *std::unique_ptr<qmi::NotifyHelper>::reset[abi:ne180100](qmi::NotifyHelper **a1, qmi::NotifyHelper *a2)
{
  qmi::NotifyHelper *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    qmi::NotifyHelper::~NotifyHelper(result);
    JUMPOUT(0x2199FEAC4);
  }
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_2>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_2 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_2>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D45E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_2>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D45E0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_2>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_2 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  capabilities::ct *v14;
  capabilities::ct *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  void *__p;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t *);
  void *v27;
  _BYTE *v28;
  char v29;
  _QWORD v30[3];
  _BYTE v31[496];
  uint64_t v32;
  void **p_p;

  v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v25 = 0;
    v26 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)&v20, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v20);
    if (__p)
    {
      v25 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v20);
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = v20;
  v8 = v21;
  v23[0] = v20;
  v23[1] = v21;
  v9 = v22;
  v23[2] = v22;
  if (v22)
  {
    v10 = (unint64_t *)(v22 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  memset(v30, 0, sizeof(v30));
  __p = v7;
  v25 = v8;
  v26 = (void (*)(uint64_t, uint64_t *))v9;
  if (v9)
  {
    v12 = (unint64_t *)(v9 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)&__p);
  qmi::RespInd<(unsigned short)21846,nas::GetCellInfo::RespIndTLVList>::RespInd((qmi::MessageBase *)v30, &__p);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&__p);
  v14 = (capabilities::ct *)QMICellMonitorCommandDriver::processCommonCellInformation_sync<nas::GetCellInfo::RespInd>((qmi::MessageBase *)v30, (uint64_t)v31);
  v15 = (capabilities::ct *)capabilities::ct::supportsEnhanced5GCellularHarvesting(v14);
  if ((_DWORD)v15)
  {
    v16 = (void *)MEMORY[0x24BDAC760];
    __p = (void *)MEMORY[0x24BDAC760];
    v25 = 0x40000000;
    v26 = ___ZN27QMICellMonitorCommandDriver32processLTECellV4Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke;
    v27 = &__block_descriptor_tmp_16_8;
    v28 = v31;
    p_p = &__p;
    qmi::MessageBase::applyTlv<nas::tlv::LteCellInformation_V4,void({block_pointer}&)(nas::tlv::LteCellInformation_V4 const&)>((qmi::MessageBase *)v30, (uint64_t)&p_p);
    __p = v16;
    v25 = 0x40000000;
    v26 = ___ZN27QMICellMonitorCommandDriver31process5GCellV3Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke;
    v27 = &__block_descriptor_tmp_15_10;
    v28 = v31;
    p_p = &__p;
    qmi::MessageBase::applyTlv<nas::tlv::NrCellInformation_V3,void({block_pointer}&)(nas::tlv::NrCellInformation_V3 const&)>((qmi::MessageBase *)v30, (uint64_t)&p_p);
  }
  else if (capabilities::ct::supports5G(v15))
  {
    v17 = (void *)MEMORY[0x24BDAC760];
    __p = (void *)MEMORY[0x24BDAC760];
    v25 = 0x40000000;
    v26 = ___ZN27QMICellMonitorCommandDriver32processLTECellV3Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke;
    v27 = &__block_descriptor_tmp_17_7;
    v28 = v31;
    p_p = &__p;
    qmi::MessageBase::applyTlv<nas::tlv::LteCellInformation_V3,void({block_pointer}&)(nas::tlv::LteCellInformation_V3 const&)>((qmi::MessageBase *)v30, (uint64_t)&p_p);
    __p = v17;
    v25 = 0x40000000;
    v26 = ___ZN27QMICellMonitorCommandDriver31process5GCellV1Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke;
    v27 = &__block_descriptor_tmp_14_7;
    v28 = v31;
    p_p = &__p;
    qmi::MessageBase::applyTlv<nas::tlv::NrCellInformation_V2,void({block_pointer}&)(nas::tlv::NrCellInformation_V2 const&)>((qmi::MessageBase *)v30, (uint64_t)&p_p);
  }
  v18 = *(_QWORD *)(v6 + 48);
  CellInfoUpdate::CellInfoUpdate((CellInfoUpdate *)&__p, (const CellInfoUpdate *)v31);
  if (v4 - 1 >= 3)
    v19 = 0;
  else
    v19 = v4;
  v29 = 1;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v18 + 24))(v18, v19, &__p, 4);
  if (v29)
    CellInfoUpdate::~CellInfoUpdate((CellInfoUpdate *)&__p);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v30);
  CellInfoUpdate::~CellInfoUpdate((CellInfoUpdate *)v31);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v23);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&v20);
}

void sub_216988A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_2>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_2 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_2>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_2 &&,QMIServiceMsg const)>::target_type()
{
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char **v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  _WORD *v40;
  __int128 v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  char **v46;
  uint64_t v47;
  void *v48;
  char v49;
  _BYTE v50[26];
  void *__p[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v4 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v4 + 24))
  {
    v5 = *(void **)v4;
    if (*(_QWORD *)v4)
    {
      v6 = *(_QWORD *)(v4 + 8);
      v7 = *(void **)v4;
      if ((void *)v6 != v5)
      {
        do
        {
          v6 -= 104;
          std::__destroy_at[abi:ne180100]<NrCell,0>(v6);
        }
        while ((void *)v6 != v5);
        v7 = *(void **)v4;
      }
      *(_QWORD *)(v4 + 8) = v5;
      operator delete(v7);
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
    }
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
  }
  else
  {
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    *(_BYTE *)(v4 + 24) = 1;
  }
  *(_QWORD *)&v53 = &v42;
  std::vector<Cdma1xCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  v8 = *(char ***)(a1 + 32);
  if (!*((_BYTE *)v8 + 24))
    goto LABEL_47;
  v9 = a2[1] - *a2;
  v10 = v9 >> 5;
  v11 = *v8;
  v12 = (uint64_t)v8[1];
  v13 = 0x4EC4EC4EC4EC4EC5 * ((v12 - (uint64_t)*v8) >> 3);
  v14 = (v9 >> 5) - v13;
  if (v9 >> 5 <= v13)
  {
    if (v9 >> 5 < v13)
    {
      v32 = &v11[104 * v10];
      while ((char *)v12 != v32)
      {
        v12 -= 104;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v12);
      }
      v8[1] = v32;
    }
  }
  else
  {
    v15 = v8[2];
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v15[-v12] >> 3) >= v14)
    {
      v33 = v12 + 104 * v14;
      v34 = 104 * v10 - 8 * ((v12 - (uint64_t)*v8) >> 3);
      do
      {
        _ZNSt3__112construct_atB8ne180100I10Cdma1xCellJEPS1_EEPT_S4_DpOT0_(v12);
        v12 += 104;
        v34 -= 104;
      }
      while (v34);
      v8[1] = (char *)v33;
    }
    else
    {
      if ((unint64_t)v9 >= 0x4EC4EC4EC4EC4EC1)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v16 = 0x4EC4EC4EC4EC4EC5 * ((v15 - v11) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v10)
        v17 = v10;
      v18 = v16 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v17;
      v46 = v8 + 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Cdma1xCell>>(v18);
      v20 = &v19[104 * v13];
      v42 = v19;
      v43 = v20;
      v44 = v20;
      v45 = &v19[104 * v21];
      v22 = 104 * v10;
      v23 = &v19[104 * v10];
      v24 = v22 - 104 * v13;
      do
      {
        _ZNSt3__112construct_atB8ne180100I10Cdma1xCellJEPS1_EEPT_S4_DpOT0_((uint64_t)v20);
        v20 += 104;
        v24 -= 104;
      }
      while (v24);
      v44 = v23;
      v26 = *v8;
      v25 = v8[1];
      v27 = v43;
      if (v25 == *v8)
      {
        v31 = v8[1];
      }
      else
      {
        v28 = 0;
        do
        {
          *(_WORD *)&v27[v28 - 104] = *(_WORD *)&v25[v28 - 104];
          MCC::MCC();
          MCC::MCC((MCC *)&v27[v28 - 64], (const MCC *)&v25[v28 - 64]);
          v29 = &v27[v28];
          v30 = *(_OWORD *)&v25[v28 - 32];
          *(_OWORD *)(v29 - 22) = *(_OWORD *)&v25[v28 - 22];
          *((_OWORD *)v29 - 2) = v30;
          v28 -= 104;
        }
        while (&v25[v28] != v26);
        v31 = *v8;
        v25 = v8[1];
        v27 += v28;
        v23 = (char *)v44;
      }
      *v8 = v27;
      v42 = v31;
      v43 = v31;
      v8[1] = v23;
      v44 = v25;
      v35 = v8[2];
      v8[2] = v45;
      v45 = v35;
      std::__split_buffer<Cdma1xCell>::~__split_buffer((uint64_t)&v42);
    }
  }
  v36 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v36 + 24))
LABEL_47:
    std::__throw_bad_optional_access[abi:ne180100]();
  v37 = *a2;
  v38 = a2[1];
  if (*a2 != v38)
  {
    v39 = *(_WORD **)v36;
    do
    {
      v53 = 0u;
      v54 = 0u;
      MEMORY[0x2199FDEAC](&v53, *(unsigned __int16 *)(v37 + 2));
      *(_OWORD *)__p = 0u;
      v52 = 0u;
      MEMORY[0x2199FDEE8](__p, *(unsigned __int16 *)(v37 + 4), &v53);
      LOWORD(v42) = *(_WORD *)v37;
      MCC::MCC();
      MCC::MCC((MCC *)&v47, (const MCC *)__p);
      v50[0] = *(_BYTE *)(v37 + 6);
      *(_QWORD *)&v50[2] = *(_QWORD *)(v37 + 8);
      *(_QWORD *)&v50[12] = *(_QWORD *)(v37 + 16);
      *(_WORD *)&v50[20] = *(_WORD *)(v37 + 24);
      *(_DWORD *)&v50[22] = *(_DWORD *)(v37 + 26);
      if (SHIBYTE(v52) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(v54) < 0)
        operator delete(*((void **)&v53 + 1));
      *v39 = (_WORD)v42;
      MCC::operator=();
      v40 = v39 + 20;
      MCC::operator=();
      v41 = *(_OWORD *)v50;
      *(_OWORD *)(v40 + 21) = *(_OWORD *)&v50[10];
      *((_OWORD *)v40 + 2) = v41;
      if (v49 < 0)
        operator delete(v48);
      if (SHIBYTE(v46) < 0)
        operator delete(v44);
      v37 += 32;
      v39 = v40 + 32;
    }
    while (v37 != v38);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int128 v38;
  void *__p[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  _BYTE v44[24];
  uint64_t v45;
  _BYTE v46[30];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (uint64_t *)(v4 + 32);
  if (*(_BYTE *)(v4 + 56))
  {
    if (*v5)
    {
      std::vector<CdmaEvdoCell>::__clear[abi:ne180100](v5);
      operator delete((void *)*v5);
      *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    *(_QWORD *)v44 = 0;
    *(_QWORD *)&v44[8] = 0;
    v43 = 0;
  }
  else
  {
    *v5 = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)v44 = 0;
    *(_QWORD *)&v44[8] = 0;
    v43 = 0;
    *(_BYTE *)(v4 + 56) = 1;
  }
  __p[0] = &v43;
  std::vector<CdmaEvdoCell>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v6 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v6 + 56))
    std::__throw_bad_optional_access[abi:ne180100]();
  v7 = 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2);
  v8 = *(_QWORD *)(v6 + 32);
  v9 = *(_QWORD *)(v6 + 40);
  v10 = 0x8E38E38E38E38E39 * ((v9 - v8) >> 3);
  v11 = v7 - v10;
  if (v7 <= v10)
  {
    if (v7 >= v10)
      goto LABEL_30;
    v31 = v8 + 8 * ((a2[1] - *a2) >> 2);
    while (v9 != v31)
    {
      if (*(char *)(v9 - 33) < 0)
        operator delete(*(void **)(v9 - 56));
      v9 -= 72;
    }
    goto LABEL_29;
  }
  v12 = *(_QWORD *)(v6 + 48);
  if (0x8E38E38E38E38E39 * ((v12 - v9) >> 3) >= v11)
  {
    v31 = v9 + 72 * v11;
    v32 = 8 * ((a2[1] - *a2) >> 2) - 8 * ((v9 - v8) >> 3);
    do
    {
      *(_QWORD *)(v9 + 64) = 0;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      MCC::MCC((MCC *)(v9 + 8));
      *(_BYTE *)(v9 + 40) = 0;
      v9 += 72;
      v32 -= 72;
    }
    while (v32);
LABEL_29:
    *(_QWORD *)(v6 + 40) = v31;
    goto LABEL_30;
  }
  if (v7 > 0x38E38E38E38E38ELL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v13 = 0x8E38E38E38E38E39 * ((v12 - v8) >> 3);
  v14 = 2 * v13;
  if (2 * v13 <= v7)
    v14 = 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2);
  if (v13 >= 0x1C71C71C71C71C7)
    v15 = 0x38E38E38E38E38ELL;
  else
    v15 = v14;
  v45 = v6 + 48;
  v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CdmaEvdoCell>>(v15);
  v17 = &v16[72 * v10];
  *(_QWORD *)v44 = v17;
  *(_QWORD *)&v44[8] = v17;
  v43 = v16;
  *(_QWORD *)&v44[16] = &v16[72 * v18];
  v19 = 9 * v7;
  v20 = &v16[72 * v7];
  v21 = 8 * v19 - 72 * v10;
  do
  {
    *((_QWORD *)v17 + 8) = 0;
    *((_OWORD *)v17 + 2) = 0u;
    *((_OWORD *)v17 + 3) = 0u;
    *(_OWORD *)v17 = 0u;
    *((_OWORD *)v17 + 1) = 0u;
    MCC::MCC((MCC *)(v17 + 8));
    v17[40] = 0;
    v17 += 72;
    v21 -= 72;
  }
  while (v21);
  *(_QWORD *)&v44[8] = v20;
  v22 = *(_QWORD *)(v6 + 32);
  v23 = *(_QWORD *)(v6 + 40);
  v24 = *(_QWORD *)v44;
  *(_QWORD *)&v42 = *(_QWORD *)v44;
  *((_QWORD *)&v42 + 1) = *(_QWORD *)v44;
  v41 = v42;
  __p[0] = (void *)(v6 + 48);
  __p[1] = &v41;
  v40 = (unint64_t)&v42;
  if (v23 != v22)
  {
    v25 = v23;
    do
    {
      v26 = *(_WORD *)(v25 - 72);
      v25 -= 72;
      *(_WORD *)(v24 - 72) = v26;
      MCC::MCC();
      v27 = *(_OWORD *)(v23 - 18);
      *(_OWORD *)(v24 - 32) = *(_OWORD *)(v23 - 32);
      *(_OWORD *)(v24 - 18) = v27;
      v24 = *((_QWORD *)&v42 + 1) - 72;
      *((_QWORD *)&v42 + 1) -= 72;
      v23 = v25;
    }
    while (v25 != v22);
  }
  BYTE8(v40) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CdmaEvdoCell>,std::reverse_iterator<CdmaEvdoCell*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)__p);
  v28 = *(_QWORD *)(v6 + 48);
  v29 = *(_OWORD *)&v44[8];
  v30 = *(_OWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v24;
  *(_OWORD *)v44 = v30;
  *(_OWORD *)(v6 + 40) = v29;
  *(_QWORD *)&v44[16] = v28;
  v43 = (char *)v30;
  std::__split_buffer<CdmaEvdoCell>::~__split_buffer((uint64_t)&v43);
LABEL_30:
  v33 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v33 + 56))
    std::__throw_bad_optional_access[abi:ne180100]();
  v34 = *a2;
  v35 = a2[1];
  if (*a2 != v35)
  {
    v36 = *(_WORD **)(v33 + 32);
    do
    {
      *(_OWORD *)__p = 0u;
      v40 = 0u;
      MEMORY[0x2199FDEAC](__p, *(unsigned __int16 *)(v34 + 2));
      LOWORD(v43) = *(_WORD *)v34;
      MCC::MCC();
      v46[0] = *(_BYTE *)(v34 + 4);
      *(_WORD *)&v46[2] = *(_WORD *)(v34 + 6);
      *(_OWORD *)&v46[4] = *(_OWORD *)(v34 + 8);
      *(_QWORD *)&v46[20] = *(_QWORD *)(v34 + 24);
      *(_WORD *)&v46[28] = *(_WORD *)(v34 + 32);
      if (SHIBYTE(v40) < 0)
        operator delete(__p[1]);
      *v36 = (_WORD)v43;
      v37 = v36 + 4;
      MCC::operator=();
      v38 = *(_OWORD *)v46;
      *(_OWORD *)(v37 + 23) = *(_OWORD *)&v46[14];
      *((_OWORD *)v37 + 2) = v38;
      if (SHIBYTE(v45) < 0)
        operator delete(*(void **)&v44[8]);
      v34 += 36;
      v36 = v37 + 32;
    }
    while (v34 != v35);
  }
}

void sub_2169893C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CdmaEvdoCell>,std::reverse_iterator<CdmaEvdoCell*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  std::__split_buffer<CdmaEvdoCell>::~__split_buffer((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_3(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int64x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  int64x2_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int128 v40;
  char *v41;
  void *v42[2];
  char *v43;
  int64x2_t *v44;
  uint64_t v45;
  void *v46;
  char v47;
  _BYTE v48[20];
  void *__p[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void **)(v4 + 64);
  if (*(_BYTE *)(v4 + 88))
  {
    v6 = *v5;
    if (*v5)
    {
      v7 = *(_QWORD *)(v4 + 72);
      v8 = *v5;
      if ((void *)v7 != v6)
      {
        do
        {
          v7 -= 96;
          std::__destroy_at[abi:ne180100]<NrCell,0>(v7);
        }
        while ((void *)v7 != v6);
        v8 = *v5;
      }
      *(_QWORD *)(v4 + 72) = v6;
      operator delete(v8);
      *v5 = 0;
      *(_QWORD *)(v4 + 72) = 0;
      *(_QWORD *)(v4 + 80) = 0;
    }
    *v5 = 0;
    *(_QWORD *)(v4 + 72) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    v42[0] = 0;
    v42[1] = 0;
    v41 = 0;
  }
  else
  {
    *v5 = 0;
    *(_QWORD *)(v4 + 72) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    v42[0] = 0;
    v42[1] = 0;
    v41 = 0;
    *(_BYTE *)(v4 + 88) = 1;
  }
  *(_QWORD *)&v51 = &v41;
  std::vector<UmtsCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  v9 = *(int64x2_t **)(a1 + 32);
  if (!v9[5].i8[8])
    goto LABEL_47;
  v10 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2);
  v11 = v9[4].i64[0];
  v12 = v9[4].i64[1];
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 5);
  v14 = v10 - v13;
  if (v10 <= v13)
  {
    if (v10 < v13)
    {
      v31 = v11 + 0x24924924924924A0 * ((a2[1] - *a2) >> 2);
      while (v12 != v31)
      {
        v12 -= 96;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v12);
      }
      v9[4].i64[1] = v31;
    }
  }
  else
  {
    v15 = v9[5].i64[0];
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v12) >> 5) >= v14)
    {
      v32 = v12 + 96 * v14;
      v33 = 0x24924924924924A0 * ((a2[1] - *a2) >> 2) - 32 * ((v12 - v11) >> 5);
      do
      {
        _ZNSt3__112construct_atB8ne180100I8UmtsCellJEPS1_EEPT_S4_DpOT0_(v12);
        v12 += 96;
        v33 -= 96;
      }
      while (v33);
      v9[4].i64[1] = v32;
    }
    else
    {
      if (v10 > 0x2AAAAAAAAAAAAAALL)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v11) >> 5);
      v17 = 2 * v16;
      if (2 * v16 <= v10)
        v17 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2);
      v18 = v16 >= 0x155555555555555 ? 0x2AAAAAAAAAAAAAALL : v17;
      v44 = v9 + 5;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<UmtsCell>>(v18);
      v20 = &v19[96 * v13];
      v41 = v19;
      v42[0] = v20;
      v42[1] = v20;
      v43 = &v19[96 * v21];
      v22 = &v19[96 * v10];
      v23 = 96 * v10 - 96 * v13;
      do
      {
        _ZNSt3__112construct_atB8ne180100I8UmtsCellJEPS1_EEPT_S4_DpOT0_((uint64_t)v20);
        v20 += 96;
        v23 -= 96;
      }
      while (v23);
      v42[1] = v22;
      v25 = v9[4].i64[0];
      v24 = v9[4].u64[1];
      v26 = (char *)v42[0];
      if (v24 == v25)
      {
        v30 = vdupq_n_s64(v24);
      }
      else
      {
        v27 = 0;
        do
        {
          *(_WORD *)&v26[v27 - 96] = *(_WORD *)(v24 + v27 - 96);
          MCC::MCC();
          MCC::MCC((MCC *)&v26[v27 - 56], (const MCC *)(v24 + v27 - 56));
          v28 = &v26[v27];
          v29 = *(_OWORD *)(v24 + v27 - 24);
          *((_DWORD *)v28 - 2) = *(_DWORD *)(v24 + v27 - 8);
          *(_OWORD *)(v28 - 24) = v29;
          v27 -= 96;
        }
        while (v24 + v27 != v25);
        v30 = v9[4];
        v22 = (char *)v42[1];
        v26 += v27;
      }
      v9[4].i64[0] = (uint64_t)v26;
      v9[4].i64[1] = (uint64_t)v22;
      *(int64x2_t *)v42 = v30;
      v34 = (char *)v9[5].i64[0];
      v9[5].i64[0] = (uint64_t)v43;
      v43 = v34;
      v41 = (char *)v30.i64[0];
      std::__split_buffer<UmtsCell>::~__split_buffer((uint64_t)&v41);
    }
  }
  v35 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v35 + 88))
LABEL_47:
    std::__throw_bad_optional_access[abi:ne180100]();
  v36 = *a2;
  v37 = a2[1];
  if (*a2 != v37)
  {
    v38 = *(_WORD **)(v35 + 64);
    do
    {
      v51 = 0u;
      v52 = 0u;
      MEMORY[0x2199FDEAC](&v51, *(unsigned __int16 *)(v36 + 2));
      *(_OWORD *)__p = 0u;
      v50 = 0u;
      MEMORY[0x2199FDEE8](__p, *(unsigned __int16 *)(v36 + 4), &v51);
      LOWORD(v41) = *(_WORD *)v36;
      MCC::MCC();
      MCC::MCC((MCC *)&v45, (const MCC *)__p);
      v48[0] = *(_BYTE *)(v36 + 6);
      *(_WORD *)&v48[2] = *(_WORD *)(v36 + 8);
      *(_DWORD *)&v48[4] = *(_DWORD *)(v36 + 12);
      *(_DWORD *)&v48[8] = *(_DWORD *)(v36 + 16);
      *(_QWORD *)&v48[12] = *(_QWORD *)(v36 + 20);
      if (SHIBYTE(v50) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(v52) < 0)
        operator delete(*((void **)&v51 + 1));
      *v38 = (_WORD)v41;
      MCC::operator=();
      v39 = v38 + 20;
      MCC::operator=();
      v40 = *(_OWORD *)v48;
      *((_DWORD *)v39 + 12) = *(_DWORD *)&v48[16];
      *((_OWORD *)v39 + 2) = v40;
      if (v47 < 0)
        operator delete(v46);
      if (SHIBYTE(v44) < 0)
        operator delete(v42[1]);
      v36 += 28;
      v38 = v39 + 28;
    }
    while (v36 != v37);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int64x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  _WORD *v38;
  char *v39;
  void *v40[2];
  char *v41;
  int64x2_t *v42;
  uint64_t v43;
  void *v44;
  char v45;
  __int128 v46;
  void *__p[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void **)(v4 + 96);
  if (*(_BYTE *)(v4 + 120))
  {
    v6 = *v5;
    if (*v5)
    {
      v7 = *(_QWORD *)(v4 + 104);
      v8 = *v5;
      if ((void *)v7 != v6)
      {
        do
        {
          v7 -= 88;
          std::__destroy_at[abi:ne180100]<NrCell,0>(v7);
        }
        while ((void *)v7 != v6);
        v8 = *v5;
      }
      *(_QWORD *)(v4 + 104) = v6;
      operator delete(v8);
      *v5 = 0;
      *(_QWORD *)(v4 + 104) = 0;
      *(_QWORD *)(v4 + 112) = 0;
    }
    *v5 = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_QWORD *)(v4 + 112) = 0;
    v40[0] = 0;
    v40[1] = 0;
    v39 = 0;
  }
  else
  {
    *v5 = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_QWORD *)(v4 + 112) = 0;
    v40[0] = 0;
    v40[1] = 0;
    v39 = 0;
    *(_BYTE *)(v4 + 120) = 1;
  }
  *(_QWORD *)&v49 = &v39;
  std::vector<GsmCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  v9 = *(int64x2_t **)(a1 + 32);
  if (!v9[7].i8[8])
    goto LABEL_47;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v11 = v9[6].i64[0];
  v12 = v9[6].i64[1];
  v13 = 0x2E8BA2E8BA2E8BA3 * ((v12 - v11) >> 3);
  v14 = v10 - v13;
  if (v10 <= v13)
  {
    if (v10 < v13)
    {
      v30 = v11 - 0x5555555555555538 * ((a2[1] - *a2) >> 3);
      while (v12 != v30)
      {
        v12 -= 88;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v12);
      }
      v9[6].i64[1] = v30;
    }
  }
  else
  {
    v15 = v9[7].i64[0];
    if (0x2E8BA2E8BA2E8BA3 * ((v15 - v12) >> 3) >= v14)
    {
      v31 = v12 + 88 * v14;
      v32 = 0xAAAAAAAAAAAAAAC8 * ((a2[1] - *a2) >> 3) - 8 * ((v12 - v11) >> 3);
      do
      {
        _ZNSt3__112construct_atB8ne180100I7GsmCellJEPS1_EEPT_S4_DpOT0_(v12);
        v12 += 88;
        v32 -= 88;
      }
      while (v32);
      v9[6].i64[1] = v31;
    }
    else
    {
      if (v10 > 0x2E8BA2E8BA2E8BALL)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v16 = 0x2E8BA2E8BA2E8BA3 * ((v15 - v11) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v10)
        v17 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
      v18 = v16 >= 0x1745D1745D1745DLL ? 0x2E8BA2E8BA2E8BALL : v17;
      v42 = v9 + 7;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GsmCell>>(v18);
      v20 = 88 * v13;
      v21 = &v19[88 * v13];
      v39 = v19;
      v40[0] = v21;
      v40[1] = v21;
      v41 = &v19[88 * v22];
      v23 = &v19[88 * v10];
      v24 = 88 * v10 - v20;
      do
      {
        _ZNSt3__112construct_atB8ne180100I7GsmCellJEPS1_EEPT_S4_DpOT0_((uint64_t)v21);
        v21 += 88;
        v24 -= 88;
      }
      while (v24);
      v40[1] = v23;
      v26 = v9[6].i64[0];
      v25 = v9[6].u64[1];
      v27 = (char *)v40[0];
      if (v25 == v26)
      {
        v29 = vdupq_n_s64(v25);
      }
      else
      {
        v28 = 0;
        do
        {
          *(_WORD *)&v27[v28 - 88] = *(_WORD *)(v25 + v28 - 88);
          MCC::MCC();
          MCC::MCC((MCC *)&v27[v28 - 48], (const MCC *)(v25 + v28 - 48));
          *(_OWORD *)&v27[v28 - 16] = *(_OWORD *)(v25 + v28 - 16);
          v28 -= 88;
        }
        while (v25 + v28 != v26);
        v29 = v9[6];
        v23 = (char *)v40[1];
        v27 += v28;
      }
      v9[6].i64[0] = (uint64_t)v27;
      v9[6].i64[1] = (uint64_t)v23;
      *(int64x2_t *)v40 = v29;
      v33 = (char *)v9[7].i64[0];
      v9[7].i64[0] = (uint64_t)v41;
      v41 = v33;
      v39 = (char *)v29.i64[0];
      std::__split_buffer<GsmCell>::~__split_buffer((uint64_t)&v39);
    }
  }
  v34 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v34 + 120))
LABEL_47:
    std::__throw_bad_optional_access[abi:ne180100]();
  v35 = *a2;
  v36 = a2[1];
  if (*a2 != v36)
  {
    v37 = *(_WORD **)(v34 + 96);
    do
    {
      v49 = 0u;
      v50 = 0u;
      MEMORY[0x2199FDEAC](&v49, *(unsigned __int16 *)(v35 + 2));
      *(_OWORD *)__p = 0u;
      v48 = 0u;
      MEMORY[0x2199FDEE8](__p, *(unsigned __int16 *)(v35 + 4), &v49);
      LOWORD(v39) = *(_WORD *)v35;
      MCC::MCC();
      MCC::MCC((MCC *)&v43, (const MCC *)__p);
      LOBYTE(v46) = *(_BYTE *)(v35 + 6);
      WORD1(v46) = *(_WORD *)(v35 + 8);
      DWORD1(v46) = *(_DWORD *)(v35 + 10);
      *((_QWORD *)&v46 + 1) = *(_QWORD *)(v35 + 16);
      if (SHIBYTE(v48) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(v50) < 0)
        operator delete(*((void **)&v49 + 1));
      *v37 = (_WORD)v39;
      MCC::operator=();
      v38 = v37 + 20;
      MCC::operator=();
      *((_OWORD *)v38 + 2) = v46;
      if (v45 < 0)
        operator delete(v44);
      if (SHIBYTE(v42) < 0)
        operator delete(v40[1]);
      v35 += 24;
      v37 = v38 + 24;
    }
    while (v35 != v36);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_5(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int64x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  int64x2_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int128 v40;
  char *v41;
  void *v42[2];
  char *v43;
  int64x2_t *v44;
  uint64_t v45;
  void *v46;
  char v47;
  _BYTE v48[20];
  void *__p[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void **)(v4 + 160);
  if (*(_BYTE *)(v4 + 184))
  {
    v6 = *v5;
    if (*v5)
    {
      v7 = *(_QWORD *)(v4 + 168);
      v8 = *v5;
      if ((void *)v7 != v6)
      {
        do
        {
          v7 -= 96;
          std::__destroy_at[abi:ne180100]<NrCell,0>(v7);
        }
        while ((void *)v7 != v6);
        v8 = *v5;
      }
      *(_QWORD *)(v4 + 168) = v6;
      operator delete(v8);
      *v5 = 0;
      *(_QWORD *)(v4 + 168) = 0;
      *(_QWORD *)(v4 + 176) = 0;
    }
    *v5 = 0;
    *(_QWORD *)(v4 + 168) = 0;
    *(_QWORD *)(v4 + 176) = 0;
    v42[0] = 0;
    v42[1] = 0;
    v41 = 0;
  }
  else
  {
    *v5 = 0;
    *(_QWORD *)(v4 + 168) = 0;
    *(_QWORD *)(v4 + 176) = 0;
    v42[0] = 0;
    v42[1] = 0;
    v41 = 0;
    *(_BYTE *)(v4 + 184) = 1;
  }
  *(_QWORD *)&v51 = &v41;
  std::vector<UmtsCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  v9 = *(int64x2_t **)(a1 + 32);
  if (!v9[11].i8[8])
    goto LABEL_47;
  v10 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2);
  v11 = v9[10].i64[0];
  v12 = v9[10].i64[1];
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 5);
  v14 = v10 - v13;
  if (v10 <= v13)
  {
    if (v10 < v13)
    {
      v31 = v11 + 0x24924924924924A0 * ((a2[1] - *a2) >> 2);
      while (v12 != v31)
      {
        v12 -= 96;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v12);
      }
      v9[10].i64[1] = v31;
    }
  }
  else
  {
    v15 = v9[11].i64[0];
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v12) >> 5) >= v14)
    {
      v32 = v12 + 96 * v14;
      v33 = 0x24924924924924A0 * ((a2[1] - *a2) >> 2) - 32 * ((v12 - v11) >> 5);
      do
      {
        _ZNSt3__112construct_atB8ne180100I11TDSCDMACellJEPS1_EEPT_S4_DpOT0_(v12);
        v12 += 96;
        v33 -= 96;
      }
      while (v33);
      v9[10].i64[1] = v32;
    }
    else
    {
      if (v10 > 0x2AAAAAAAAAAAAAALL)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v11) >> 5);
      v17 = 2 * v16;
      if (2 * v16 <= v10)
        v17 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2);
      v18 = v16 >= 0x155555555555555 ? 0x2AAAAAAAAAAAAAALL : v17;
      v44 = v9 + 11;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<UmtsCell>>(v18);
      v20 = &v19[96 * v13];
      v41 = v19;
      v42[0] = v20;
      v42[1] = v20;
      v43 = &v19[96 * v21];
      v22 = &v19[96 * v10];
      v23 = 96 * v10 - 96 * v13;
      do
      {
        _ZNSt3__112construct_atB8ne180100I11TDSCDMACellJEPS1_EEPT_S4_DpOT0_((uint64_t)v20);
        v20 += 96;
        v23 -= 96;
      }
      while (v23);
      v42[1] = v22;
      v25 = v9[10].i64[0];
      v24 = v9[10].u64[1];
      v26 = (char *)v42[0];
      if (v24 == v25)
      {
        v30 = vdupq_n_s64(v24);
      }
      else
      {
        v27 = 0;
        do
        {
          *(_WORD *)&v26[v27 - 96] = *(_WORD *)(v24 + v27 - 96);
          MCC::MCC();
          MCC::MCC((MCC *)&v26[v27 - 56], (const MCC *)(v24 + v27 - 56));
          v28 = &v26[v27];
          v29 = *(_OWORD *)(v24 + v27 - 24);
          *((_DWORD *)v28 - 2) = *(_DWORD *)(v24 + v27 - 8);
          *(_OWORD *)(v28 - 24) = v29;
          v27 -= 96;
        }
        while (v24 + v27 != v25);
        v30 = v9[10];
        v22 = (char *)v42[1];
        v26 += v27;
      }
      v9[10].i64[0] = (uint64_t)v26;
      v9[10].i64[1] = (uint64_t)v22;
      *(int64x2_t *)v42 = v30;
      v34 = (char *)v9[11].i64[0];
      v9[11].i64[0] = (uint64_t)v43;
      v43 = v34;
      v41 = (char *)v30.i64[0];
      std::__split_buffer<UmtsCell>::~__split_buffer((uint64_t)&v41);
    }
  }
  v35 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v35 + 184))
LABEL_47:
    std::__throw_bad_optional_access[abi:ne180100]();
  v36 = *a2;
  v37 = a2[1];
  if (*a2 != v37)
  {
    v38 = *(_WORD **)(v35 + 160);
    do
    {
      v51 = 0u;
      v52 = 0u;
      MEMORY[0x2199FDEAC](&v51, *(unsigned __int16 *)(v36 + 2));
      *(_OWORD *)__p = 0u;
      v50 = 0u;
      MEMORY[0x2199FDEE8](__p, *(unsigned __int16 *)(v36 + 4), &v51);
      LOWORD(v41) = *(_WORD *)v36;
      MCC::MCC();
      MCC::MCC((MCC *)&v45, (const MCC *)__p);
      v48[0] = *(_BYTE *)(v36 + 6);
      *(_WORD *)&v48[2] = *(_WORD *)(v36 + 8);
      *(_DWORD *)&v48[4] = *(_DWORD *)(v36 + 12);
      *(_DWORD *)&v48[8] = *(_DWORD *)(v36 + 16);
      *(_QWORD *)&v48[12] = *(_QWORD *)(v36 + 20);
      if (SHIBYTE(v50) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(v52) < 0)
        operator delete(*((void **)&v51 + 1));
      *v38 = (_WORD)v41;
      MCC::operator=();
      v39 = v38 + 20;
      MCC::operator=();
      v40 = *(_OWORD *)v48;
      *((_DWORD *)v39 + 12) = *(_DWORD *)&v48[16];
      *((_OWORD *)v39 + 2) = v40;
      if (v47 < 0)
        operator delete(v46);
      if (SHIBYTE(v44) < 0)
        operator delete(v42[1]);
      v36 += 28;
      v38 = v39 + 28;
    }
    while (v36 != v37);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_6(uint64_t a1, int **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;
  _DWORD *v29;
  int v30;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = v4 + 256;
  if (*(_BYTE *)(v4 + 280))
  {
    v6 = *(void **)v5;
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)(v4 + 264) = v6;
      operator delete(v6);
    }
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v4 + 264) = 0;
    *(_QWORD *)(v4 + 272) = 0;
    *(_BYTE *)(v4 + 280) = 1;
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v7 + 280))
LABEL_29:
    std::__throw_bad_optional_access[abi:ne180100]();
  v8 = (char *)a2[1] - (char *)*a2;
  v9 = v8 >> 2;
  v10 = *(_QWORD *)(v7 + 256);
  v11 = *(_QWORD *)(v7 + 264);
  v12 = (v11 - v10) >> 2;
  if (v8 >> 2 <= v12)
  {
    if (v9 >= v12)
      goto LABEL_24;
    v25 = v10 + 4 * v9;
    goto LABEL_23;
  }
  v13 = v9 - v12;
  v14 = *(_QWORD *)(v7 + 272);
  if (v9 - v12 <= (v14 - v11) >> 2)
  {
    bzero(*(void **)(v7 + 264), 4 * v13);
    v25 = v11 + 4 * v13;
LABEL_23:
    *(_QWORD *)(v7 + 264) = v25;
    goto LABEL_24;
  }
  if (v8 < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v15 = v14 - v10;
  if (v15 >> 1 > v9)
    v9 = v15 >> 1;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
    v16 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v16 = v9;
  v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(v16);
  v18 = &v17[4 * v12];
  v20 = &v17[4 * v19];
  bzero(v18, 4 * v13);
  v21 = &v18[4 * v13];
  v23 = *(char **)(v7 + 256);
  v22 = *(char **)(v7 + 264);
  if (v22 != v23)
  {
    do
    {
      v24 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *((_DWORD *)v18 - 1) = v24;
      v18 -= 4;
    }
    while (v22 != v23);
    v22 = *(char **)(v7 + 256);
  }
  *(_QWORD *)(v7 + 256) = v18;
  *(_QWORD *)(v7 + 264) = v21;
  *(_QWORD *)(v7 + 272) = v20;
  if (v22)
    operator delete(v22);
LABEL_24:
  v26 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v26 + 280))
    goto LABEL_29;
  v28 = *a2;
  v27 = a2[1];
  if (*a2 != v27)
  {
    v29 = *(_DWORD **)(v26 + 256);
    do
    {
      v30 = *v28++;
      *v29++ = v30;
    }
    while (v28 != v27);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_7(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = v4 + 224;
  if (*(_BYTE *)(v4 + 248))
  {
    v6 = *(void **)v5;
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)(v4 + 232) = v6;
      operator delete(v6);
    }
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v4 + 232) = 0;
    *(_QWORD *)(v4 + 240) = 0;
    *(_BYTE *)(v4 + 248) = 1;
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v7 + 248))
LABEL_29:
    std::__throw_bad_optional_access[abi:ne180100]();
  v8 = (char *)a2[1] - (char *)*a2;
  v9 = v8 >> 3;
  v10 = *(_QWORD *)(v7 + 224);
  v11 = *(_QWORD *)(v7 + 232);
  v12 = (v11 - v10) >> 3;
  if (v8 >> 3 <= v12)
  {
    if (v9 >= v12)
      goto LABEL_24;
    v25 = v10 + 8 * v9;
    goto LABEL_23;
  }
  v13 = v9 - v12;
  v14 = *(_QWORD *)(v7 + 240);
  if (v9 - v12 <= (v14 - v11) >> 3)
  {
    bzero(*(void **)(v7 + 232), 8 * v13);
    v25 = v11 + 8 * v13;
LABEL_23:
    *(_QWORD *)(v7 + 232) = v25;
    goto LABEL_24;
  }
  if (v8 < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v15 = v14 - v10;
  if (v15 >> 2 > v9)
    v9 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v9;
  v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v16);
  v18 = &v17[8 * v12];
  v20 = &v17[8 * v19];
  bzero(v18, 8 * v13);
  v21 = &v18[8 * v13];
  v23 = *(char **)(v7 + 224);
  v22 = *(char **)(v7 + 232);
  if (v22 != v23)
  {
    do
    {
      v24 = *((_QWORD *)v22 - 1);
      v22 -= 8;
      *((_QWORD *)v18 - 1) = v24;
      v18 -= 8;
    }
    while (v22 != v23);
    v22 = *(char **)(v7 + 224);
  }
  *(_QWORD *)(v7 + 224) = v18;
  *(_QWORD *)(v7 + 232) = v21;
  *(_QWORD *)(v7 + 240) = v20;
  if (v22)
    operator delete(v22);
LABEL_24:
  v26 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v26 + 248))
    goto LABEL_29;
  v28 = *a2;
  v27 = a2[1];
  if (*a2 != v27)
  {
    v29 = *(_QWORD **)(v26 + 224);
    do
    {
      v30 = *v28++;
      *v29++ = v30;
    }
    while (v28 != v27);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_8(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unint64_t *v29;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = v4 + 400;
  if (*(_BYTE *)(v4 + 424))
  {
    v6 = *(void **)v5;
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)(v4 + 408) = v6;
      operator delete(v6);
    }
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v4 + 408) = 0;
    *(_QWORD *)(v4 + 416) = 0;
    *(_BYTE *)(v4 + 424) = 1;
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v7 + 424))
LABEL_29:
    std::__throw_bad_optional_access[abi:ne180100]();
  v8 = (char *)a2[1] - (char *)*a2;
  v9 = v8 >> 3;
  v10 = *(_QWORD *)(v7 + 400);
  v11 = *(_QWORD *)(v7 + 408);
  v12 = (v11 - v10) >> 3;
  if (v8 >> 3 <= v12)
  {
    if (v9 >= v12)
      goto LABEL_24;
    v25 = v10 + 8 * v9;
    goto LABEL_23;
  }
  v13 = v9 - v12;
  v14 = *(_QWORD *)(v7 + 416);
  if (v9 - v12 <= (v14 - v11) >> 3)
  {
    bzero(*(void **)(v7 + 408), 8 * v13);
    v25 = v11 + 8 * v13;
LABEL_23:
    *(_QWORD *)(v7 + 408) = v25;
    goto LABEL_24;
  }
  if (v8 < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v15 = v14 - v10;
  if (v15 >> 2 > v9)
    v9 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v9;
  v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v16);
  v18 = &v17[8 * v12];
  v20 = &v17[8 * v19];
  bzero(v18, 8 * v13);
  v21 = &v18[8 * v13];
  v23 = *(char **)(v7 + 400);
  v22 = *(char **)(v7 + 408);
  if (v22 != v23)
  {
    do
    {
      v24 = *((_QWORD *)v22 - 1);
      v22 -= 8;
      *((_QWORD *)v18 - 1) = v24;
      v18 -= 8;
    }
    while (v22 != v23);
    v22 = *(char **)(v7 + 400);
  }
  *(_QWORD *)(v7 + 400) = v18;
  *(_QWORD *)(v7 + 408) = v21;
  *(_QWORD *)(v7 + 416) = v20;
  if (v22)
    operator delete(v22);
LABEL_24:
  v26 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v26 + 424))
    goto LABEL_29;
  v28 = *a2;
  v27 = a2[1];
  if (*a2 != v27)
  {
    v29 = *(unint64_t **)(v26 + 400);
    do
    {
      *v29++ = *v28 | ((unint64_t)*((unsigned __int8 *)v28 + 2) << 16) | ((unint64_t)*((unsigned int *)v28 + 1) << 32);
      v28 += 4;
    }
    while (v28 != v27);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_10(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  void *__p[3];

  memset(__p, 0, sizeof(__p));
  std::optional<NrNeighborInformation>::operator=[abi:ne180100]<NrNeighborInformation,void>(*(_QWORD *)(a1 + 32) + 432, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
  v4 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v4 + 456)
    || (std::vector<NrNeighborCell>::resize((char **)(v4 + 432), 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2)),
        v5 = *(_QWORD *)(a1 + 32),
        !*(_BYTE *)(v5 + 456)))
  {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  v7 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v8 = *(_QWORD *)(v5 + 432);
    do
    {
      v9 = *(_DWORD *)(v7 + 4);
      v10 = *(_WORD *)(v7 + 8);
      v11 = *(_WORD *)(v7 + 10);
      v12 = *(_DWORD *)(v7 + 12);
      v13 = *(_WORD *)(v7 + 16);
      v14 = *(_DWORD *)(v7 + 20);
      *(_DWORD *)v8 = *(_DWORD *)v7;
      *(_DWORD *)(v8 + 4) = v9;
      *(_WORD *)(v8 + 8) = v10;
      *(_WORD *)(v8 + 10) = v11;
      *(_DWORD *)(v8 + 12) = v12;
      *(_WORD *)(v8 + 16) = v13;
      v7 += 28;
      *(_QWORD *)(v8 + 20) = v14;
      v8 += 28;
    }
    while (v7 != v6);
  }
}

uint64_t std::optional<NrNeighborInformation>::operator=[abi:ne180100]<NrNeighborInformation,void>(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

double ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_12(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *v17;
  double result;
  _BYTE v19[7];
  __int128 v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v9 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    bzero(v7, v4 - v5);
    v8 = 0;
    v9 = (uint64_t)&v7[v6];
    do
    {
      v10 = &v7[v8];
      v11 = v5 + v8;
      v12 = *(_WORD *)(v5 + v8 + 4);
      v13 = *(_BYTE *)(v5 + v8 + 6);
      *(_DWORD *)v10 = *(unsigned __int16 *)(v5 + v8) | (*(unsigned __int8 *)(v5 + v8 + 2) << 16);
      v10[6] = v13;
      *((_WORD *)v10 + 2) = v12;
      v8 += 8;
    }
    while (v11 + 8 != v4);
  }
  *(_WORD *)v19 = *(_WORD *)a2;
  v19[2] = *(_BYTE *)(a2 + 2);
  *(_WORD *)&v19[4] = *(_WORD *)(a2 + 4);
  v19[6] = *(_BYTE *)(a2 + 6);
  v21 = 0;
  v20 = 0uLL;
  std::vector<Cdma1xNeighborCell>::__init_with_size[abi:ne180100]<Cdma1xNeighborCell*,Cdma1xNeighborCell*>(&v20, v7, v9, (v9 - (uint64_t)v7) >> 3);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(unsigned __int8 *)(v14 + 352);
  *(_DWORD *)(v14 + 320) = *(_DWORD *)v19;
  *(_DWORD *)(v14 + 323) = *(_DWORD *)&v19[3];
  v16 = (void **)(v14 + 328);
  if (v15)
  {
    v17 = *v16;
    if (*v16)
    {
      *(_QWORD *)(v14 + 336) = v17;
      operator delete(v17);
      *v16 = 0;
      *(_QWORD *)(v14 + 336) = 0;
      *(_QWORD *)(v14 + 344) = 0;
    }
    result = *(double *)&v20;
    *(_OWORD *)v16 = v20;
    *(_QWORD *)(v14 + 344) = v21;
    if (v7)
      goto LABEL_11;
  }
  else
  {
    result = *(double *)&v20;
    *(_OWORD *)v16 = v20;
    *(_QWORD *)(v14 + 344) = v21;
    *(_BYTE *)(v14 + 352) = 1;
    if (v7)
LABEL_11:
      operator delete(v7);
  }
  return result;
}

void sub_21698A950(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

double ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_13(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  uint64_t v14;
  int v15;
  void *v16;
  double result;
  _BYTE v18[7];
  __int128 v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v9 = 0;
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    bzero(v7, v4 - v5);
    v8 = 0;
    v9 = (uint64_t)&v7[v6];
    do
    {
      v10 = &v7[v8];
      v11 = v5 + v8;
      v12 = *(_WORD *)(v5 + v8 + 4);
      v13 = *(_BYTE *)(v5 + v8 + 6);
      *(_DWORD *)v10 = *(unsigned __int16 *)(v5 + v8) | (*(unsigned __int8 *)(v5 + v8 + 2) << 16);
      v10[6] = v13;
      *((_WORD *)v10 + 2) = v12;
      v8 += 8;
    }
    while (v11 + 8 != v4);
  }
  *(_WORD *)v18 = *(_WORD *)a2;
  v18[2] = *(_BYTE *)(a2 + 2);
  *(_WORD *)&v18[4] = *(_WORD *)(a2 + 4);
  v18[6] = *(_BYTE *)(a2 + 6);
  v20 = 0;
  v19 = 0uLL;
  std::vector<CdmaEvdoNeighborCell>::__init_with_size[abi:ne180100]<CdmaEvdoNeighborCell*,CdmaEvdoNeighborCell*>(&v19, v7, v9, (v9 - (uint64_t)v7) >> 3);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(unsigned __int8 *)(v14 + 392);
  *(_DWORD *)(v14 + 360) = *(_DWORD *)v18;
  *(_DWORD *)(v14 + 363) = *(_DWORD *)&v18[3];
  if (v15)
  {
    v16 = *(void **)(v14 + 368);
    if (v16)
    {
      *(_QWORD *)(v14 + 376) = v16;
      operator delete(v16);
      *(_QWORD *)(v14 + 368) = 0;
      *(_QWORD *)(v14 + 376) = 0;
      *(_QWORD *)(v14 + 384) = 0;
    }
    result = *(double *)&v19;
    *(_OWORD *)(v14 + 368) = v19;
    *(_QWORD *)(v14 + 384) = v20;
    if (v7)
      goto LABEL_11;
  }
  else
  {
    result = *(double *)&v19;
    *(_OWORD *)(v14 + 368) = v19;
    *(_QWORD *)(v14 + 384) = v20;
    *(_BYTE *)(v14 + 392) = 1;
    if (v7)
LABEL_11:
      operator delete(v7);
  }
  return result;
}

void sub_21698AADC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = v4 + 464;
  if (*(_BYTE *)(v4 + 488))
  {
    v6 = *(void **)v5;
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)(v4 + 472) = v6;
      operator delete(v6);
    }
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v4 + 472) = 0;
    *(_QWORD *)(v4 + 480) = 0;
    *(_BYTE *)(v4 + 488) = 1;
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v7 + 488)
    || (std::vector<unsigned short>::resize(v7 + 464, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1),
        v8 = *(_QWORD *)(a1 + 32),
        !*(_BYTE *)(v8 + 488)))
  {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 != *(_QWORD *)a2)
    memmove(*(void **)(v8 + 464), *(const void **)a2, v9 - *(_QWORD *)a2);
}

void std::vector<Cdma1xCell>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t _ZNSt3__112construct_atB8ne180100I10Cdma1xCellJEPS1_EEPT_S4_DpOT0_(uint64_t a1)
{
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  MCC::MCC((MCC *)(a1 + 8));
  MNC::MNC((MNC *)(a1 + 40));
  *(_BYTE *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 96) = 0;
  return a1;
}

void sub_21698AC64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Cdma1xCell>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a1);
}

uint64_t std::__split_buffer<Cdma1xCell>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    std::__destroy_at[abi:ne180100]<NrCell,0>(i - 104);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<CdmaEvdoCell>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 33) < 0)
      operator delete(*(void **)(i - 56));
  }
  a1[1] = v2;
}

void std::vector<CdmaEvdoCell>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<CdmaEvdoCell>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CdmaEvdoCell>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CdmaEvdoCell>,std::reverse_iterator<CdmaEvdoCell*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    for (i = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8); i != v3; i += 72)
    {
      if (*(char *)(i + 39) < 0)
        operator delete(*(void **)(i + 16));
    }
  }
  return a1;
}

uint64_t std::__split_buffer<CdmaEvdoCell>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 72;
      *(_QWORD *)(a1 + 16) = v2 - 72;
      if (*(char *)(v2 - 33) < 0)
      {
        operator delete(*(void **)(v2 - 56));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<UmtsCell>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t _ZNSt3__112construct_atB8ne180100I8UmtsCellJEPS1_EEPT_S4_DpOT0_(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  MCC::MCC((MCC *)(a1 + 8));
  MNC::MNC((MNC *)(a1 + 40));
  *(_BYTE *)(a1 + 72) = 0;
  return a1;
}

void sub_21698AF58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<UmtsCell>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a1);
}

uint64_t std::__split_buffer<UmtsCell>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<NrCell,0>(i - 96);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<GsmCell>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t _ZNSt3__112construct_atB8ne180100I7GsmCellJEPS1_EEPT_S4_DpOT0_(uint64_t a1)
{
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  MCC::MCC((MCC *)(a1 + 8));
  MNC::MNC((MNC *)(a1 + 40));
  *(_BYTE *)(a1 + 72) = 0;
  return a1;
}

void sub_21698B0B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<GsmCell>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a1);
}

uint64_t std::__split_buffer<GsmCell>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    std::__destroy_at[abi:ne180100]<NrCell,0>(i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t _ZNSt3__112construct_atB8ne180100I11TDSCDMACellJEPS1_EEPT_S4_DpOT0_(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  MCC::MCC((MCC *)(a1 + 8));
  MNC::MNC((MNC *)(a1 + 40));
  *(_BYTE *)(a1 + 72) = 0;
  return a1;
}

void sub_21698B1AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<LteNeighborCell>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NrNeighborCell>>(unint64_t a1)
{
  if (a1 >= 0x924924924924925)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(28 * a1);
}

char *std::vector<Cdma1xNeighborCell>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

_QWORD *std::vector<Cdma1xNeighborCell>::__init_with_size[abi:ne180100]<Cdma1xNeighborCell*,Cdma1xNeighborCell*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<Cdma1xNeighborCell>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 1);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21698B2E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<CdmaEvdoNeighborCell>::__init_with_size[abi:ne180100]<CdmaEvdoNeighborCell*,CdmaEvdoNeighborCell*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<Cdma1xNeighborCell>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 1);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21698B358(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CdmaEvdoCell>,CdmaEvdoCell*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 72)
    {
      if (*(char *)(i - 33) < 0)
        operator delete(*(void **)(i - 56));
    }
  }
  return a1;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_3>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_3 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_3>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D4820;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_3>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D4820;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_3>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_3 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_3>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_3 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_0,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_0,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D48A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_0,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D48A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_0,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  std::__shared_weak_count_vtbl *v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  capabilities::ct *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const void **v21;
  char *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  const void **v37;
  char *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t result;
  int v65;
  uint64_t v66;
  void *__p[2];
  __int128 v68;
  uint8_t buf[8];
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  void *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  int v75;
  uint64_t aBlock;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  void *v79;
  uint8_t *v80;

  v2 = *a2;
  v3 = *(std::__shared_weak_count_vtbl **)(a1 + 8);
  v4 = *a2 - 1;
  if (v4 >= 3)
    v5 = 0;
  else
    v5 = v2;
  v6 = *(NSObject **)(*(uint64_t (**)(void (__cdecl *)(std::__shared_weak_count *__hidden), uint64_t))(*(_QWORD *)v3[2].~__shared_weak_count_0 + 16))(v3[2].~__shared_weak_count_0, v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I NAS Client has started", buf, 2u);
  }
  if (v4 >= 3)
    v7 = 0;
  else
    v7 = v2;
  v8 = (capabilities::ct *)(*(uint64_t (**)(void (__cdecl *)(std::__shared_weak_count *__hidden), uint64_t))(*(_QWORD *)v3[2].~__shared_weak_count_0 + 16))(v3[2].~__shared_weak_count_0, v7);
  v9 = capabilities::ct::supportsGemini(v8);
  v10 = MEMORY[0x24BDAC760];
  if (v9)
  {
    *(_OWORD *)__p = 0u;
    v68 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::SubType>(__p, 1) = v2 == 2;
    v11 = qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<nas::BindSubscription::Request>((uint64_t)&v65, v2, v11);
    v12 = (std::__shared_weak_count *)operator new(0x20uLL);
    v12->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D49D0;
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
    v14 = v66;
    *(_QWORD *)buf = v10;
    v70 = 1174405120;
    v71 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN27QMICellMonitorCommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
    v72 = &__block_descriptor_tmp_67_3;
    v73 = v12 + 1;
    v74 = v12;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    aBlock = v10;
    v77 = 0x40000000;
    v78 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
    v79 = &unk_24D5D4A18;
    v80 = buf;
    *(_QWORD *)(v14 + 32) = _Block_copy(&aBlock);
    v16 = v74;
    if (v74)
    {
      v17 = (unint64_t *)&v74->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    v20 = v66;
    v66 = 0;
    if (v20)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v66, v20);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  *(_OWORD *)__p = 0u;
  v68 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v21 = (const void **)__p[1];
  if (__p[1] != (void *)v68)
  {
    while (*((unsigned __int8 *)*v21 + 8) != 160)
    {
      if (++v21 == (const void **)v68)
        goto LABEL_30;
    }
  }
  if (v21 == (const void **)v68)
  {
LABEL_30:
    v24 = operator new();
    v25 = v24;
    *(_WORD *)(v24 + 8) = 160;
    *(_QWORD *)v24 = &off_24D5D4A60;
    v26 = v68;
    if ((unint64_t)v68 >= *((_QWORD *)&v68 + 1))
    {
      v28 = (uint64_t)(v68 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v28 + 1) >> 61)
        goto LABEL_87;
      v29 = (uint64_t)(*((_QWORD *)&v68 + 1) - (unint64_t)__p[1]) >> 2;
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      if (*((_QWORD *)&v68 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v68 + 8, v30);
      else
        v31 = 0;
      v32 = (uint64_t *)&v31[8 * v28];
      v33 = &v31[8 * v30];
      *v32 = v25;
      v27 = v32 + 1;
      v35 = (char *)__p[1];
      v34 = (char *)v68;
      if ((void *)v68 != __p[1])
      {
        do
        {
          v36 = *((_QWORD *)v34 - 1);
          v34 -= 8;
          *--v32 = v36;
        }
        while (v34 != v35);
        v34 = (char *)__p[1];
      }
      __p[1] = v32;
      *(_QWORD *)&v68 = v27;
      *((_QWORD *)&v68 + 1) = v33;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v68 = v24;
      v27 = (_QWORD *)(v26 + 8);
    }
    v23 = (_BYTE *)(v25 + 9);
    *(_QWORD *)&v68 = v27;
  }
  else
  {
    if (!v22)
      goto LABEL_86;
    v23 = v22 + 9;
  }
  *v23 = 1;
  *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::ServingSysEvents>(__p, 19) = 0;
  *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::SysInfoEvents>(__p, 24) = 0;
  v37 = (const void **)__p[1];
  if (__p[1] != (void *)v68)
  {
    while (*((unsigned __int8 *)*v37 + 8) != 208)
    {
      if (++v37 == (const void **)v68)
        goto LABEL_54;
    }
  }
  if (v37 == (const void **)v68)
  {
LABEL_54:
    v40 = operator new();
    v41 = v40;
    *(_WORD *)(v40 + 8) = 208;
    *(_QWORD *)v40 = &off_24D5D4AB0;
    v42 = v68;
    if ((unint64_t)v68 < *((_QWORD *)&v68 + 1))
    {
      *(_QWORD *)v68 = v40;
      v43 = (_QWORD *)(v42 + 8);
LABEL_70:
      v39 = (_BYTE *)(v41 + 9);
      *(_QWORD *)&v68 = v43;
      goto LABEL_71;
    }
    v44 = (uint64_t)(v68 - (unint64_t)__p[1]) >> 3;
    if (!((unint64_t)(v44 + 1) >> 61))
    {
      v45 = (uint64_t)(*((_QWORD *)&v68 + 1) - (unint64_t)__p[1]) >> 2;
      if (v45 <= v44 + 1)
        v45 = v44 + 1;
      if (*((_QWORD *)&v68 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v45;
      if (v46)
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v68 + 8, v46);
      else
        v47 = 0;
      v48 = (uint64_t *)&v47[8 * v44];
      v49 = &v47[8 * v46];
      *v48 = v41;
      v43 = v48 + 1;
      v51 = (char *)__p[1];
      v50 = (char *)v68;
      if ((void *)v68 != __p[1])
      {
        do
        {
          v52 = *((_QWORD *)v50 - 1);
          v50 -= 8;
          *--v48 = v52;
        }
        while (v50 != v51);
        v50 = (char *)__p[1];
      }
      __p[1] = v48;
      *(_QWORD *)&v68 = v43;
      *((_QWORD *)&v68 + 1) = v49;
      if (v50)
        operator delete(v50);
      goto LABEL_70;
    }
LABEL_87:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (!v38)
LABEL_86:
    __cxa_bad_cast();
  v39 = v38 + 9;
LABEL_71:
  *v39 = 1;
  v53 = qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>((uint64_t)&v65, v2, v53);
  v54 = v65;
  v55 = (std::__shared_weak_count *)operator new(0x20uLL);
  v55->__shared_owners_ = 0;
  v56 = (unint64_t *)&v55->__shared_owners_;
  v55->__shared_weak_owners_ = 0;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D4B18;
  v55[1].__vftable = v3;
  v57 = v66;
  *(_QWORD *)buf = v10;
  v70 = 1174405120;
  v71 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN27QMICellMonitorCommandDriver27registerForIndications_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
  v72 = &__block_descriptor_tmp_69_3;
  v73 = v55 + 1;
  v74 = v55;
  do
    v58 = __ldxr(v56);
  while (__stxr(v58 + 1, v56));
  v75 = v54;
  aBlock = v10;
  v77 = 0x40000000;
  v78 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v79 = &unk_24D5D4B60;
  v80 = buf;
  *(_QWORD *)(v57 + 32) = _Block_copy(&aBlock);
  v59 = v74;
  if (v74)
  {
    v60 = (unint64_t *)&v74->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  do
    v62 = __ldaxr(v56);
  while (__stlxr(v62 - 1, v56));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  v63 = v66;
  v66 = 0;
  if (v63)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v66, v63);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  result = qmi::NotifyHelper::shouldNotifyStart((_QWORD *)v3[2].__on_zero_shared_weak);
  if ((_DWORD)result)
    return (*(uint64_t (**)(void (__cdecl *)(std::__shared_weak_count *__hidden), uint64_t))(*(_QWORD *)v3[1].~__shared_weak_count_0 + 16))(v3[1].~__shared_weak_count_0, 1);
  return result;
}

void sub_21698BB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  std::__shared_weak_count *v20;
  unint64_t *v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v23 = a20;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  do
    v26 = __ldaxr(v21);
  while (__stlxr(v26 - 1, v21));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  v27 = a10;
  a10 = 0;
  if (v27)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_0,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_0,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_1,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_1,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D4920;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_1,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D4920;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_1,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t result;
  uint8_t v6[16];

  v2 = *(_QWORD *)(a1 + 8);
  if ((*a2 - 1) >= 3)
    v3 = 0;
  else
    v3 = *a2;
  v4 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 88) + 16))(*(_QWORD *)(v2 + 88), v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I NAS Client has stopped", v6, 2u);
  }
  result = qmi::NotifyHelper::shouldNotifyStop(*(unint64_t ***)(v2 + 112));
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 48) + 16))(*(_QWORD *)(v2 + 48), 0);
  return result;
}

uint64_t std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_1,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_1,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN27QMICellMonitorCommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = ***(NSObject ****)(a1 + 32);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = qmi::asString();
      v5 = *(_DWORD *)(a2 + 4);
      v6 = 136315394;
      v7 = v4;
      v8 = 1024;
      v9 = v5;
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Error binding subscription: %s (0x%x)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMICellMonitorCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D49D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMICellMonitorCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D49D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_21698BF8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::CellInfoChange>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::CellInfoChange>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::CellInfoChange>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::CellInfoChange>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D4A60;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::LAPSFetchReport>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::LAPSFetchReport>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::LAPSFetchReport>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::LAPSFetchReport>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D4AB0;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN27QMICellMonitorCommandDriver27registerForIndications_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  os_log_t *v6;
  int v7;
  NSObject *v8;
  _DWORD v9[2];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 48);
  if (v3 - 1 >= 3)
    v4 = 0;
  else
    v4 = v3;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 88);
  v6 = (os_log_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
  v7 = *(_DWORD *)(a2 + 4);
  if (v7)
  {
    v8 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      v9[0] = 67109378;
      v9[1] = v7;
      v10 = 2080;
      v11 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v8, OS_LOG_TYPE_ERROR, "Cell Monitor Indication Register failed: Error in response with code %d (%s)", (uint8_t *)v9, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver27registerForIndications_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver27registerForIndications_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::registerForIndications_sync(qmi::SubscriptionType)::$_0,std::allocator<QMICellMonitorCommandDriver::registerForIndications_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D4B18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::registerForIndications_sync(qmi::SubscriptionType)::$_0,std::allocator<QMICellMonitorCommandDriver::registerForIndications_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D4B18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::IndicationRegister::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_21698C2BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN27QMICellMonitorCommandDriver25getCellInformationForSlotEN10subscriber7SimSlotE14CellInfoSourceN8dispatch13group_sessionEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  os_log_t *v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  capabilities::ct *v19;
  capabilities::ct *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  _OWORD v26[31];
  uint64_t v27;
  uint8_t *v28;
  uint8_t buf[8];
  __int128 v30;
  void *v31;
  _OWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 48);
  v5 = *v3;
  v6 = v4 - 1;
  if (v4 - 1 >= 3)
    v7 = 0;
  else
    v7 = v4;
  v8 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 88) + 16))(*(_QWORD *)(v5 + 88), v7);
  v9 = *(_DWORD *)(a2 + 4);
  if (!v9)
  {
    v14 = *((unsigned int *)v3 + 4);
    v27 = 0;
    memset(v26, 0, sizeof(v26));
    memset(v25, 0, sizeof(v25));
    v15 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)buf = *(_QWORD *)a2;
    *(_QWORD *)&v30 = v15;
    v16 = *(_QWORD *)(a2 + 16);
    *((_QWORD *)&v30 + 1) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)buf);
    qmi::RespInd<(unsigned short)21846,nas::GetCellInfo::RespIndTLVList>::RespInd((qmi::MessageBase *)v25, buf);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    v19 = (capabilities::ct *)QMICellMonitorCommandDriver::processCommonCellInformation_sync<nas::GetCellInfo::RespInd>((qmi::MessageBase *)v25, (uint64_t)v26);
    v20 = (capabilities::ct *)capabilities::ct::supportsEnhanced5GCellularHarvesting(v19);
    if ((_DWORD)v20)
    {
      v21 = MEMORY[0x24BDAC760];
      *(_QWORD *)buf = MEMORY[0x24BDAC760];
      *(_QWORD *)&v30 = 0x40000000;
      *((_QWORD *)&v30 + 1) = ___ZN27QMICellMonitorCommandDriver32processLTECellV4Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke;
      v31 = &__block_descriptor_tmp_16_8;
      v32 = v26;
      v28 = buf;
      qmi::MessageBase::applyTlv<nas::tlv::LteCellInformation_V4,void({block_pointer}&)(nas::tlv::LteCellInformation_V4 const&)>((qmi::MessageBase *)v25, (uint64_t)&v28);
      *(_QWORD *)buf = v21;
      *(_QWORD *)&v30 = 0x40000000;
      *((_QWORD *)&v30 + 1) = ___ZN27QMICellMonitorCommandDriver31process5GCellV3Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke;
      v31 = &__block_descriptor_tmp_15_10;
      v32 = v26;
      v28 = buf;
      qmi::MessageBase::applyTlv<nas::tlv::NrCellInformation_V3,void({block_pointer}&)(nas::tlv::NrCellInformation_V3 const&)>((qmi::MessageBase *)v25, (uint64_t)&v28);
    }
    else if (capabilities::ct::supports5G(v20))
    {
      v22 = MEMORY[0x24BDAC760];
      *(_QWORD *)buf = MEMORY[0x24BDAC760];
      *(_QWORD *)&v30 = 0x40000000;
      *((_QWORD *)&v30 + 1) = ___ZN27QMICellMonitorCommandDriver32processLTECellV3Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke;
      v31 = &__block_descriptor_tmp_17_7;
      v32 = v26;
      v28 = buf;
      qmi::MessageBase::applyTlv<nas::tlv::LteCellInformation_V3,void({block_pointer}&)(nas::tlv::LteCellInformation_V3 const&)>((qmi::MessageBase *)v25, (uint64_t)&v28);
      *(_QWORD *)buf = v22;
      *(_QWORD *)&v30 = 0x40000000;
      *((_QWORD *)&v30 + 1) = ___ZN27QMICellMonitorCommandDriver31process5GCellV1Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke;
      v31 = &__block_descriptor_tmp_14_7;
      v32 = v26;
      v28 = buf;
      qmi::MessageBase::applyTlv<nas::tlv::NrCellInformation_V2,void({block_pointer}&)(nas::tlv::NrCellInformation_V2 const&)>((qmi::MessageBase *)v25, (uint64_t)&v28);
    }
    v23 = *(_QWORD *)(v5 + 48);
    CellInfoUpdate::CellInfoUpdate((CellInfoUpdate *)buf, (const CellInfoUpdate *)v26);
    if (v6 >= 3)
      v24 = 0;
    else
      v24 = v4;
    v33 = 1;
    (*(void (**)(uint64_t, uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v23 + 24))(v23, v24, buf, v14);
    if (v33)
      CellInfoUpdate::~CellInfoUpdate((CellInfoUpdate *)buf);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)v25);
    v13 = (uint8_t *)v26;
    goto LABEL_25;
  }
  v10 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v9;
    LOWORD(v30) = 2080;
    *(_QWORD *)((char *)&v30 + 2) = qmi::asString();
    _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#N Get Cell Info failed: Error in response with code %d (%s)", buf, 0x12u);
  }
  v11 = *(_QWORD *)(v5 + 48);
  if (v6 >= 3)
    v12 = 0;
  else
    v12 = v4;
  buf[0] = 0;
  v33 = 0;
  (*(void (**)(uint64_t, uint64_t, uint8_t *, _QWORD))(*(_QWORD *)v11 + 24))(v11, v12, buf, *((unsigned int *)v3 + 4));
  if (v33)
  {
    v13 = buf;
LABEL_25:
    CellInfoUpdate::~CellInfoUpdate((CellInfoUpdate *)v13);
  }
}

void sub_21698C624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  if (LOBYTE(STACK[0x418]))
    CellInfoUpdate::~CellInfoUpdate((CellInfoUpdate *)&STACK[0x220]);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  CellInfoUpdate::~CellInfoUpdate((CellInfoUpdate *)va1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver25getCellInformationForSlotEN10subscriber7SimSlotE14CellInfoSourceN8dispatch13group_sessionEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver25getCellInformationForSlotEN10subscriber7SimSlotE14CellInfoSourceN8dispatch13group_sessionEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::getCellInformationForSlot(subscriber::SimSlot,CellInfoSource,dispatch::group_session)::$_0,std::allocator<QMICellMonitorCommandDriver::getCellInformationForSlot(subscriber::SimSlot,CellInfoSource,dispatch::group_session)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D4BC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::getCellInformationForSlot(subscriber::SimSlot,CellInfoSource,dispatch::group_session)::$_0,std::allocator<QMICellMonitorCommandDriver::getCellInformationForSlot(subscriber::SimSlot,CellInfoSource,dispatch::group_session)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D4BC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::getCellInformationForSlot(subscriber::SimSlot,CellInfoSource,dispatch::group_session)::$_0,std::allocator<QMICellMonitorCommandDriver::getCellInformationForSlot(subscriber::SimSlot,CellInfoSource,dispatch::group_session)::$_0>>::__on_zero_shared(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
}

void qmi::MessageBase::applyTlv<nas::tlv::NrCellInformation_V2,void({block_pointer}&)(nas::tlv::NrCellInformation_V2 const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  unsigned __int8 *TlvValue;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  unsigned __int8 *v12;

  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v11 = 0;
    v12 = TlvValue;
    __p = 0;
    v10 = 0;
    tlv::parseV<nas::tlv::NrCellInformation_V2>(&v12, v5, (uint64_t *)&__p);
    v8 = v12;
    if (v12)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 226, v6, v7);
  }
}

void sub_21698C7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<nas::tlv::LteCellInformation_V3,void({block_pointer}&)(nas::tlv::LteCellInformation_V3 const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  unsigned __int8 *TlvValue;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  unsigned __int8 *v12;

  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v11 = 0;
    v12 = TlvValue;
    __p = 0;
    v10 = 0;
    tlv::parseV<nas::tlv::LteCellInformation_V3>(&v12, v5, (uint64_t *)&__p);
    v8 = v12;
    if (v12)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 210, v6, v7);
  }
}

void sub_21698C8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::HintType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D4C50;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::BorderInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D4CA0;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::StatusType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D4CF0;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2K1XHints>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D4D40;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2K1XHints>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D4D40;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2K1XHints>::getSize(uint64_t a1)
{
  return tlv::size<nas::tlv::C2K1XHints>((_QWORD *)(a1 + 16));
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2K1XHints>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<nas::tlv::C2K1XHints>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2K1XHints>::clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;

  v2 = operator new();
  v3 = (_QWORD *)v2;
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &off_24D5D4D40;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>(v2 + 32, v6 >> 3);
    v3[2] = v7;
    v3[4] = &v7[8 * v8];
    memmove(v7, v5, v6);
    v3[3] = &v7[8 * (v6 >> 3)];
  }
  return v3;
}

void sub_21698CB68(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2KEVDOHints>::~TlvWrapper(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24D5D4D90;
  v3 = (void **)(a1 + 16);
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_24D5D4D90;
  v3 = (void **)(a1 + 16);
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x2199FEAC4](a1, 0x10A1C403082B835);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2KEVDOHints>::getSize(uint64_t a1)
{
  return tlv::size<nas::tlv::C2KEVDOHints>((uint64_t *)(a1 + 16));
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2KEVDOHints>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<nas::tlv::C2KEVDOHints>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2KEVDOHints>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[3];
  uint64_t v11;
  char *v12;
  char *v13;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_24D5D4D90;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v5 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>(v2 + 32, v5 >> 5);
    *(_QWORD *)(v2 + 16) = v6;
    *(_QWORD *)(v2 + 24) = v6;
    *(_QWORD *)(v2 + 32) = &v6[32 * v7];
    v12 = v6;
    v13 = v6;
    v10[0] = v2 + 32;
    v10[1] = &v12;
    v8 = v6;
    v10[2] = &v13;
    v11 = 0;
    do
    {
      *(_DWORD *)v8 = *(_DWORD *)v3;
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 3) = 0;
      *((_QWORD *)v8 + 1) = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)v8 + 1, *(const void **)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8));
      v8 = v13 + 32;
      v13 += 32;
      v3 += 32;
    }
    while (v3 != v4);
    LOBYTE(v11) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<at::tlv::CommandCallback>,at::tlv::CommandCallback*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    *(_QWORD *)(v2 + 24) = v8;
  }
  return v2;
}

void sub_21698CDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&a9);
  MEMORY[0x2199FEAC4](v9, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::GSMHints>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D4DE0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::GSMHints>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D4DE0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<nas::tlv::GSMHintItem>::__init_with_size[abi:ne180100]<nas::tlv::GSMHintItem*,nas::tlv::GSMHintItem*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1));
  return v2;
}

void sub_21698CE9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nas::tlv::GSMHintItem>::__init_with_size[abi:ne180100]<nas::tlv::GSMHintItem*,nas::tlv::GSMHintItem*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x199999999999999ALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<nas::tlv::GSMHintItem>>((uint64_t)(result + 2), a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 10 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_21698CF50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::UMTSHints>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D4E30;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::UMTSHints>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D4E30;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<nas::tlv::GSMHintItem>::__init_with_size[abi:ne180100]<nas::tlv::GSMHintItem*,nas::tlv::GSMHintItem*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1));
  return v2;
}

void sub_21698D01C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEHints_V3>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D4E80;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEHints_V3>::clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v2 = operator new();
  v3 = (_QWORD *)v2;
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &off_24D5D4E80;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,16ul>>>(v2 + 32, v6 >> 4);
    v3[2] = v7;
    v3[4] = &v7[16 * v8];
    memmove(v7, v5, v6 - 2);
    v3[3] = &v7[16 * (v6 >> 4)];
  }
  return v3;
}

void sub_21698D138(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSHints>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D4ED0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSHints>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D4ED0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSHints>::getSize(uint64_t a1)
{
  return tlv::size<nas::tlv::GSMHints>((_QWORD *)(a1 + 16));
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSHints>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<nas::tlv::GSMHints>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSHints>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D4ED0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<nas::tlv::GSMHintItem>::__init_with_size[abi:ne180100]<nas::tlv::GSMHintItem*,nas::tlv::GSMHintItem*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1));
  return v2;
}

void sub_21698D2C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRHints>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D4F20;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRHints>::clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;

  v2 = operator new();
  v3 = (_QWORD *)v2;
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &off_24D5D4F20;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v6 >> 2) >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nas::tlv::NRHintItem>>(v2 + 32, 0xCCCCCCCCCCCCCCCDLL * (v6 >> 2));
    v3[2] = v7;
    v3[4] = &v7[20 * v8];
    memmove(v7, v5, v6);
    v3[3] = &v7[4 * (v6 >> 2)];
  }
  return v3;
}

void sub_21698D404(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::IsBootstrapDatabase>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D4F70;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS7_9allocatorIS9_EEEENS8_I16SystemRecordEVDONSA_ISD_EEEENS8_I15SystemRecordGSMNSA_ISG_EEEESI_NS8_I15SystemRecordLTENSA_ISJ_EEEESI_NS8_I14SystemRecordNRNSA_ISM_EEEEE3__2EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v3 = ***(NSObject ****)(a1 + 32);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      v5 = 2080;
      v6 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Bulk hints request failed: Error in response with code %d (%s)", (uint8_t *)v4, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c316_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNS_6vectorI14SystemRecord1xNS_9allocatorIS6_EEEENS5_I16SystemRecordEVDONS7_ISA_EEEENS5_I15SystemRecordGSMNS7_ISD_EEEESF_NS5_I15SystemRecordLTENS7_ISG_EEEESF_NS5_I14SystemRecordNRNS7_ISJ_EEEEE3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c316_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNS_6vectorI14SystemRecord1xNS_9allocatorIS6_EEEENS5_I16SystemRecordEVDONS7_ISA_EEEENS5_I15SystemRecordGSMNS7_ISD_EEEESF_NS5_I15SystemRecordLTENS7_ISG_EEEESF_NS5_I14SystemRecordNRNS7_ISJ_EEEEE3__2EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::sendRegistrationHintsForSlot(subscriber::SimSlot,FetchType,BOOL,std::vector<SystemRecord1x>,std::vector<SystemRecordEVDO>,std::vector<SystemRecordGSM>,std::vector<SystemRecordGSM>,std::vector<SystemRecordLTE>,std::vector<SystemRecordGSM>,std::vector<SystemRecordNR>)::$_2,std::allocator<QMICellMonitorCommandDriver::sendRegistrationHintsForSlot(subscriber::SimSlot,FetchType,BOOL,std::vector<SystemRecord1x>,std::vector<SystemRecordEVDO>,std::vector<SystemRecordGSM>,std::vector<SystemRecordGSM>,std::vector<SystemRecordLTE>,std::vector<SystemRecordGSM>,std::vector<SystemRecordNR>)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D4FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::sendRegistrationHintsForSlot(subscriber::SimSlot,FetchType,BOOL,std::vector<SystemRecord1x>,std::vector<SystemRecordEVDO>,std::vector<SystemRecordGSM>,std::vector<SystemRecordGSM>,std::vector<SystemRecordLTE>,std::vector<SystemRecordGSM>,std::vector<SystemRecordNR>)::$_2,std::allocator<QMICellMonitorCommandDriver::sendRegistrationHintsForSlot(subscriber::SimSlot,FetchType,BOOL,std::vector<SystemRecord1x>,std::vector<SystemRecordEVDO>,std::vector<SystemRecordGSM>,std::vector<SystemRecordGSM>,std::vector<SystemRecordLTE>,std::vector<SystemRecordGSM>,std::vector<SystemRecordNR>)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D4FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__destroy_at[abi:ne180100]<MCCAndMNC,0>(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void MCCAndMNC::~MCCAndMNC(void **this)
{
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void std::vector<MCCAndMNC>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<MCCAndMNC,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNSt3__16vectorI9MCCAndMNCNS7_9allocatorIS9_EEEEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v3 = ***(NSObject ****)(a1 + 32);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      v5 = 2080;
      v6 = qmi::asString();
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#N APACS status request failed: Error in response with code %d (%s)", (uint8_t *)v4, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c166_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNS_6vectorI9MCCAndMNCNS_9allocatorIS6_EEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c166_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNS_6vectorI9MCCAndMNCNS_9allocatorIS6_EEEEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::sendStatusHintForSlot(subscriber::SimSlot,LASDStatusHint,std::vector<MCCAndMNC>)::$_0,std::allocator<QMICellMonitorCommandDriver::sendStatusHintForSlot(subscriber::SimSlot,LASDStatusHint,std::vector<MCCAndMNC>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D5058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::sendStatusHintForSlot(subscriber::SimSlot,LASDStatusHint,std::vector<MCCAndMNC>)::$_0,std::allocator<QMICellMonitorCommandDriver::sendStatusHintForSlot(subscriber::SimSlot,LASDStatusHint,std::vector<MCCAndMNC>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D5058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void dormancy::QMIDormancyCommandDriver::create(uint64_t a1@<X0>, NSObject **a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  NSObject *v11;
  dispatch_object_t v12;

  *a5 = 0;
  a5[1] = 0;
  v10 = operator new();
  v11 = *a2;
  v12 = v11;
  if (v11)
    dispatch_retain(v11);
  dormancy::QMIDormancyCommandDriver::QMIDormancyCommandDriver(v10, a1, &v12, a3);
  *a5 = 0;
  a5[1] = 0;
  std::shared_ptr<dormancy::QMIDormancyCommandDriver>::shared_ptr[abi:ne180100]<dormancy::QMIDormancyCommandDriver,std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver*)#1},void>(a5, v10);
  if (v11)
    dispatch_release(v11);
  if (*a5)
    dormancy::QMIDormancyCommandDriver::initQMIDLFilterCommandDriver(*a5, a4);
}

void sub_21698D89C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void dormancy::QMIDormancyCommandDriver::initQMIDLFilterCommandDriver(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t (*v7)(_QWORD);
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  _OWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned int *v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  unint64_t v43;
  char *v44;
  float v45;
  float v46;
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  NSObject *v58;
  _QWORD *v59;
  uint64_t (*v60)(_QWORD);
  unsigned int *v61;
  unsigned int *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  dispatch_object_t object;
  unsigned int *v66;
  unsigned int *v67;
  uint64_t (*v68)(_QWORD);
  __int128 v69;
  char *v70;
  _BYTE buf[18];
  __int16 v72;
  uint64_t v73;
  _QWORD v74[3];

  v74[1] = *MEMORY[0x24BDAC8D0];
  if (!capabilities::ct::supportsDataQMIExtensions((capabilities::ct *)a1))
    return;
  if (!*a2)
  {
    v58 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v58, OS_LOG_TYPE_DEFAULT, "#E invaid factory", buf, 2u);
    }
    return;
  }
  if (*(int *)(a1 + 164) < 1)
    return;
  v4 = 0;
  v59 = (_QWORD *)(a1 + 128);
  do
  {
    v69 = 0uLL;
    v70 = 0;
    subscriber::makeSimSlotRange();
    v6 = v66;
    v5 = v67;
    if (v66 != v67)
    {
      v7 = v68;
      while ((v7(*v6) & 1) == 0)
      {
        if (++v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
      v62 = v67;
      if (v6 != v67)
      {
        v60 = v7;
        v61 = v5;
        do
        {
          v8 = 0;
          v9 = 0;
          v10 = *v6;
          v74[0] = 0x200000001;
          do
          {
            v11 = v8;
            v12 = *((unsigned int *)v74 + v9);
            v13 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              v14 = subscriber::asString();
              v15 = asString();
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)&buf[4] = v4;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = v14;
              v72 = 2080;
              v73 = v15;
              _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I create DFSClientDriver for pdpID %d, simSlot %s, ipFamily %s", buf, 0x1Cu);
            }
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            v16 = *a2;
            v17 = *(NSObject **)(a1 + 24);
            object = v17;
            if (v17)
              dispatch_retain(v17);
            v18 = *(std::__shared_weak_count **)(a1 + 80);
            v63 = *(_QWORD *)(a1 + 72);
            v64 = v18;
            if (v18)
            {
              p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
              do
                v20 = __ldxr(p_shared_weak_owners);
              while (__stxr(v20 + 1, p_shared_weak_owners));
            }
            (*(void (**)(_BYTE *__return_ptr, uint64_t, dispatch_object_t *, uint64_t, uint64_t, unint64_t, uint64_t *))(*(_QWORD *)v16 + 264))(buf, v16, &object, v10, v12, v4, &v63);
            if (v64)
              std::__shared_weak_count::__release_weak(v64);
            if (object)
              dispatch_release(object);
            v21 = (_QWORD *)*((_QWORD *)&v69 + 1);
            if (*((_QWORD *)&v69 + 1) >= (unint64_t)v70)
            {
              v22 = (_QWORD *)v69;
              v23 = (uint64_t)(*((_QWORD *)&v69 + 1) - v69) >> 4;
              v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 60)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v25 = (uint64_t)&v70[-v69];
              if ((uint64_t)&v70[-v69] >> 3 > v24)
                v24 = v25 >> 3;
              if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
                v26 = 0xFFFFFFFFFFFFFFFLL;
              else
                v26 = v24;
              if (v26 >> 60)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v27 = (char *)operator new(16 * v26);
              v28 = &v27[16 * v23];
              *(_OWORD *)v28 = *(_OWORD *)buf;
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = 0;
              if (v21 == v22)
              {
                v32 = v28 + 16;
                *(_QWORD *)&v69 = &v27[16 * v23];
                *((_QWORD *)&v69 + 1) = v28 + 16;
                v70 = &v27[16 * v26];
              }
              else
              {
                v29 = &v27[16 * v23];
                do
                {
                  v30 = *((_OWORD *)v21 - 1);
                  v21 -= 2;
                  *((_OWORD *)v29 - 1) = v30;
                  v29 -= 16;
                  *v21 = 0;
                  v21[1] = 0;
                }
                while (v21 != v22);
                v31 = *((_QWORD *)&v69 + 1);
                v21 = (_QWORD *)v69;
                v32 = v28 + 16;
                *(_QWORD *)&v69 = v29;
                *((_QWORD *)&v69 + 1) = v28 + 16;
                v70 = &v27[16 * v26];
                while ((_QWORD *)v31 != v21)
                {
                  v31 -= 16;
                  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v31);
                }
              }
              if (v21)
                operator delete(v21);
              v33 = *(std::__shared_weak_count **)&buf[8];
              *((_QWORD *)&v69 + 1) = v32;
              if (*(_QWORD *)&buf[8])
              {
                v34 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v35 = __ldaxr(v34);
                while (__stlxr(v35 - 1, v34));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
              }
            }
            else
            {
              **((_OWORD **)&v69 + 1) = *(_OWORD *)buf;
              *((_QWORD *)&v69 + 1) = v21 + 2;
            }
            v8 = 1;
            v9 = 1;
          }
          while ((v11 & 1) == 0);
          v36 = v6 + 1;
          v6 = v61;
          if (v36 != v61)
          {
            v6 = v36;
            while ((v60(*v6) & 1) == 0)
            {
              if (++v6 == v61)
              {
                v6 = v61;
                break;
              }
            }
          }
        }
        while (v6 != v62);
      }
    }
    v37 = *(_QWORD *)(a1 + 120);
    if (!v37)
    {
      v40 = 0;
      v39 = (uint64_t *)(a1 + 112);
LABEL_71:
      v44 = (char *)operator new(0x30uLL);
      *(_QWORD *)v44 = 0;
      *((_QWORD *)v44 + 1) = v4;
      *((_DWORD *)v44 + 4) = v4;
      *(_OWORD *)(v44 + 24) = v69;
      *((_QWORD *)v44 + 5) = v70;
      v69 = 0uLL;
      v70 = 0;
      v45 = (float)(unint64_t)(*(_QWORD *)(a1 + 136) + 1);
      v46 = *(float *)(a1 + 144);
      if (!v37 || (float)(v46 * (float)v37) < v45)
      {
        v47 = (v37 & (v37 - 1)) != 0;
        if (v37 < 3)
          v47 = 1;
        v48 = v47 | (2 * v37);
        v49 = vcvtps_u32_f32(v45 / v46);
        if (v48 <= v49)
          v50 = v49;
        else
          v50 = v48;
        std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::__rehash<true>((uint64_t)v39, v50);
        v37 = *(_QWORD *)(a1 + 120);
        if ((v37 & (v37 - 1)) != 0)
        {
          if (v37 <= v4)
            v40 = v4 % v37;
          else
            v40 = v4;
        }
        else
        {
          v40 = (v37 + 0x7FFFFFFF) & v4;
        }
      }
      v51 = *v39;
      v52 = *(_QWORD **)(*v39 + 8 * v40);
      if (v52)
      {
        *(_QWORD *)v44 = *v52;
      }
      else
      {
        *(_QWORD *)v44 = *v59;
        *v59 = v44;
        *(_QWORD *)(v51 + 8 * v40) = v59;
        if (!*(_QWORD *)v44)
        {
LABEL_92:
          ++*(_QWORD *)(a1 + 136);
          goto LABEL_93;
        }
        v53 = *(_QWORD *)(*(_QWORD *)v44 + 8);
        if ((v37 & (v37 - 1)) != 0)
        {
          if (v53 >= v37)
            v53 %= v37;
        }
        else
        {
          v53 &= v37 - 1;
        }
        v52 = (_QWORD *)(*v39 + 8 * v53);
      }
      *v52 = v44;
      goto LABEL_92;
    }
    v38 = (uint8x8_t)vcnt_s8((int8x8_t)v37);
    v38.i16[0] = vaddlv_u8(v38);
    v39 = (uint64_t *)(a1 + 112);
    if (v38.u32[0] > 1uLL)
    {
      v40 = v4;
      if (v37 <= v4)
        v40 = v4 % v37;
    }
    else
    {
      v40 = (v37 + 0x7FFFFFFF) & v4;
    }
    v41 = *(uint64_t ***)(*(_QWORD *)(a1 + 112) + 8 * v40);
    if (!v41)
      goto LABEL_71;
    v42 = *v41;
    if (!*v41)
      goto LABEL_71;
    while (1)
    {
      v43 = v42[1];
      if (v43 == v4)
        break;
      if (v38.u32[0] > 1uLL)
      {
        if (v43 >= v37)
          v43 %= v37;
      }
      else
      {
        v43 &= v37 - 1;
      }
      if (v43 != v40)
        goto LABEL_71;
LABEL_70:
      v42 = (uint64_t *)*v42;
      if (!v42)
        goto LABEL_71;
    }
    if (v4 != *((_DWORD *)v42 + 4))
      goto LABEL_70;
    v54 = (void **)(v42 + 3);
    v55 = v42[3];
    if (v55)
    {
      v56 = v42[4];
      v57 = (void *)v42[3];
      if (v56 != v55)
      {
        do
          v56 = std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v56 - 16);
        while (v56 != v55);
        v57 = *v54;
      }
      v42[4] = v55;
      operator delete(v57);
      *v54 = 0;
      v42[4] = 0;
      v42[5] = 0;
    }
    *(_OWORD *)(v42 + 3) = v69;
    v42[5] = (uint64_t)v70;
    v70 = 0;
    v69 = 0uLL;
LABEL_93:
    *(_QWORD *)buf = &v69;
    std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    ++v4;
  }
  while ((uint64_t)v4 < *(int *)(a1 + 164));
}

void sub_21698DF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, dispatch_object_t object, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;

  a27 = v27 + 24;
  std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  operator delete(v27);
  a27 = &a23;
  std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

uint64_t dormancy::QMIDormancyCommandDriver::QMIDormancyCommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3, int a4)
{
  capabilities::ct *v6;
  capabilities::ct *v7;
  NSObject *object;

  object = *a3;
  if (*a3)
    dispatch_retain(*a3);
  DormancyCommandDriver::DormancyCommandDriver();
  v6 = (capabilities::ct *)object;
  if (object)
    dispatch_release(object);
  *(_QWORD *)a1 = &off_24D5D50A8;
  *(_QWORD *)(a1 + 88) = &unk_24D5D5148;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_DWORD *)(a1 + 152) = a4;
  *(_BYTE *)(a1 + 156) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  v7 = (capabilities::ct *)capabilities::ct::supportedPDPContextCount(v6);
  *(_DWORD *)(a1 + 164) = (_DWORD)v7;
  *(_WORD *)(a1 + 168) = 0;
  if ((unint64_t)capabilities::ct::supportedPDPContextCount(v7) >> 31)
    __assert_rtn("QMIDormancyCommandDriver", "QMIDormancyCommandDriver.cpp", 74, "capabilities::ct::supportedPDPContextCount() <= std::numeric_limits<int>::max()");
  return a1;
}

void sub_21698E094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void dormancy::QMIDormancyCommandDriver::~QMIDormancyCommandDriver(dormancy::QMIDormancyCommandDriver *this)
{
  *(_QWORD *)this = &off_24D5D50A8;
  *((_QWORD *)this + 11) = &unk_24D5D5148;
  std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::~__hash_table((uint64_t)this + 112);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  DormancyCommandDriver::~DormancyCommandDriver(this);
}

{
  dormancy::QMIDormancyCommandDriver::~QMIDormancyCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void dormancy::QMIDormancyCommandDriver::setObserver(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  _QWORD *i;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)a1[10];
  a1[9] = v5;
  a1[10] = v4;
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  if (capabilities::ct::supportsDataQMIExtensions((capabilities::ct *)v8))
  {
    for (i = (_QWORD *)a1[16]; i; i = (_QWORD *)*i)
    {
      v10 = (uint64_t *)i[3];
      v11 = (uint64_t *)i[4];
      while (v10 != v11)
      {
        v12 = *v10;
        v13 = (std::__shared_weak_count *)a2[1];
        v16 = *a2;
        v17 = v13;
        if (v13)
        {
          p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v15 = __ldxr(p_shared_weak_owners);
          while (__stxr(v15 + 1, p_shared_weak_owners));
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 40))(v12, &v16);
        if (v17)
          std::__shared_weak_count::__release_weak(v17);
        v10 += 2;
      }
    }
  }
}

void sub_21698E1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void dormancy::QMIDormancyCommandDriver::handlePdpStateChanged_sync(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;

  v3 = a3 + 1;
  v4 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v6 = (_QWORD *)(a2 + 8);
    while (1)
    {
      v7 = *v6;
      if (!*v6)
        break;
      v8 = *((unsigned int *)v4 + 8);
      v9 = v6;
      do
      {
        v10 = *(_DWORD *)(v7 + 32);
        v11 = v10 < (int)v8;
        if (v10 >= (int)v8)
          v12 = (uint64_t *)v7;
        else
          v12 = (uint64_t *)(v7 + 8);
        if (!v11)
          v9 = (_QWORD *)v7;
        v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || (int)v8 < *((_DWORD *)v9 + 8))
        goto LABEL_49;
      v13 = v4 + 5;
      if (v9[7] != v4[7])
        goto LABEL_50;
      v14 = (_QWORD *)v9[5];
      v15 = v9 + 6;
      if (v14 != v15)
      {
        v16 = (_QWORD *)*v13;
        while (*((_DWORD *)v14 + 8) == *((_DWORD *)v16 + 8) && v14[7] == v16[7])
        {
          v17 = (_QWORD *)v14[5];
          if (v17 != v14 + 6)
          {
            v18 = (_QWORD *)v16[5];
            do
            {
              v19 = *((_DWORD *)v17 + 7) == *((_DWORD *)v18 + 7)
                 && *((unsigned __int8 *)v17 + 32) == *((unsigned __int8 *)v18 + 32);
              if (!v19)
                goto LABEL_50;
              v20 = (_QWORD *)v17[1];
              v21 = v17;
              if (v20)
              {
                do
                {
                  v17 = v20;
                  v20 = (_QWORD *)*v20;
                }
                while (v20);
              }
              else
              {
                do
                {
                  v17 = (_QWORD *)v21[2];
                  v19 = *v17 == (_QWORD)v21;
                  v21 = v17;
                }
                while (!v19);
              }
              v22 = (_QWORD *)v18[1];
              if (v22)
              {
                do
                {
                  v23 = v22;
                  v22 = (_QWORD *)*v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  v23 = (_QWORD *)v18[2];
                  v19 = *v23 == (_QWORD)v18;
                  v18 = v23;
                }
                while (!v19);
              }
              v18 = v23;
            }
            while (v17 != v14 + 6);
          }
          v24 = (_QWORD *)v14[1];
          if (v24)
          {
            do
            {
              v25 = v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (_QWORD *)v14[2];
              v19 = *v25 == (_QWORD)v14;
              v14 = v25;
            }
            while (!v19);
          }
          v26 = (_QWORD *)v16[1];
          if (v26)
          {
            do
            {
              v27 = v26;
              v26 = (_QWORD *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v27 = (_QWORD *)v16[2];
              v19 = *v27 == (_QWORD)v16;
              v16 = v27;
            }
            while (!v19);
          }
          v16 = v27;
          v14 = v25;
          if (v25 == v15)
            goto LABEL_51;
        }
        goto LABEL_50;
      }
LABEL_51:
      v28 = (_QWORD *)v4[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v4[2];
          v19 = *v29 == (_QWORD)v4;
          v4 = v29;
        }
        while (!v19);
      }
      v4 = v29;
      if (v29 == v3)
        return;
    }
    v8 = *((unsigned int *)v4 + 8);
LABEL_49:
    v13 = v4 + 5;
LABEL_50:
    dormancy::QMIDormancyCommandDriver::handlePdpStateChanged_sync(std::map<subscriber::SimSlot,std::map<int,std::map<DataContextType,BOOL>>> const&,std::map<subscriber::SimSlot,std::map<int,std::map<DataContextType,BOOL>>> const&)::$_0::operator()<subscriber::SimSlot,std::map<int,std::map<DataContextType,BOOL>>>(a1, v8, v13);
    goto LABEL_51;
  }
}

void dormancy::QMIDormancyCommandDriver::start(Registry **this)
{
  char *v2;
  std::__shared_weak_count *v3;
  Registry *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::mutex *ServiceMap;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  xpc_object_t object;
  void *__p[2];
  char v39;
  __int128 v40;
  void (*v41)(_QWORD *, uint64_t *);
  void *v42;
  Registry **v43;
  Registry *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  _QWORD *aBlock;
  uint64_t v52;
  void (*v53)(uint64_t, _QWORD *);
  void *v54;
  __int128 *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unsigned __int16 *v58;

  v2 = (char *)(this + 12);
  if (!this[12])
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(this[6]);
    ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<QMIClientPool>(ServiceMap, &aBlock);
    v30 = aBlock;
    std::string::basic_string[abi:ne180100]<0>(__p, "dormancy");
    object = xpc_null_create();
    QMIClientPool::requestClient(v30, 1u, (uint64_t *)__p, (uint64_t)(this + 11), (uint64_t)&object, &v40);
    std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100]((uint64_t)v2, &v40);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    xpc_release(object);
    object = 0;
    if (v39 < 0)
      operator delete(__p[0]);
    v34 = (std::__shared_weak_count *)v52;
    if (v52)
    {
      v35 = (unint64_t *)(v52 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  v3 = (std::__shared_weak_count *)this[2];
  if (!v3 || (v4 = this[1], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v11 = (uint64_t)this[12];
  v12 = (_QWORD *)MEMORY[0x24BDAC760];
  *(_QWORD *)&v40 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v40 + 1) = 1174405120;
  v41 = ___ZN8dormancy24QMIDormancyCommandDriver11startClientEv_block_invoke;
  v42 = &__block_descriptor_tmp_22;
  v43 = this;
  v44 = v4;
  v45 = v6;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = *(std::__shared_weak_count **)(v11 + 8);
  if (v14)
  {
    v15 = std::__shared_weak_count::lock(v14);
    v57 = v15;
    if (v15)
    {
      v16 = v15;
      v56 = *(_QWORD *)v11;
      v17 = v56;
      if (v56)
      {
        v46 = v11 + 88;
        v47 = 1;
        MEMORY[0x2199FDF3C]();
        v18 = *(_QWORD *)(v11 + 24);
        if (v18)
        {
          v19 = v11 + 24;
          do
          {
            if (*(_WORD *)(v18 + 32))
              v20 = (uint64_t *)v18;
            else
              v20 = (uint64_t *)(v18 + 8);
            if (*(_WORD *)(v18 + 32))
              v19 = v18;
            v18 = *v20;
          }
          while (*v20);
          if (v19 != v11 + 24 && *(unsigned __int16 *)(v19 + 32) <= 1u)
            __TUAssertTrigger();
        }
        aBlock = v12;
        v52 = 0x40000000;
        v53 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN3wds11EventReport10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
        v54 = &unk_24D5D5488;
        v55 = &v40;
        v21 = (uint64_t *)_Block_copy(&aBlock);
        v50 = 1;
        v58 = &v50;
        v22 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v11 + 16), &v50, (uint64_t)&std::piecewise_construct, &v58);
        v23 = v22[5];
        v22[5] = v21;
        if (v23)
          _Block_release(v23);
        std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v46);
        v46 = 0;
        v47 = 0;
        v24 = *(_QWORD *)(v11 + 64);
        v48 = *(_QWORD *)(v11 + 56);
        v49 = v24;
        if (v24)
        {
          v25 = (unint64_t *)(v24 + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        QMIClientPool::registerUnsolicitedHandler(v17, (uint64_t)&v46, v11, 1u);
        qmi::Client::~Client((qmi::Client *)&v46);
      }
      v27 = (unint64_t *)&v16->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_21698E75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__shared_weak_count *v29;
  uint64_t v30;

  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v30 - 96);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v29);
  _Unwind_Resume(a1);
}

void ___ZN8dormancy24QMIDormancyCommandDriver11startClientEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = a2[1];
        v27[0] = *a2;
        v10 = a2[2];
        v27[1] = v9;
        v27[2] = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = (std::__shared_weak_count *)v5[2];
        if (!v13 || (v14 = v5[1], (v15 = std::__shared_weak_count::lock(v13)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v16 = v15;
        v17 = (_QWORD *)operator new();
        *v17 = v5;
        v17[1] = v8;
        v17[2] = v9;
        v17[3] = v10;
        if (v10)
        {
          v18 = (unint64_t *)(v10 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = v5[3];
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
        v23 = (_QWORD *)operator new();
        *v23 = v17;
        v23[1] = v14;
        v23[2] = v16;
        v28 = 0;
        v29 = 0;
        dispatch_async_f(v20, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<DormancyCommandDriver>::execute_wrapped<dormancy::QMIDormancyCommandDriver::handleEventReportInd(wds::EventReport::Indication const&)::$_0>(dormancy::QMIDormancyCommandDriver::handleEventReportInd(wds::EventReport::Indication const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<dormancy::QMIDormancyCommandDriver::handleEventReportInd(wds::EventReport::Indication const&)::$_0,dispatch_queue_s *::default_delete<dormancy::QMIDormancyCommandDriver::handleEventReportInd(wds::EventReport::Indication const&)::$_0>>)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v28);
        std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v29);
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v27);
      }
      v25 = (unint64_t *)&v7->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrI21DormancyCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrI21DormancyCommandDriverEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void `non-virtual thunk to'dormancy::QMIDormancyCommandDriver::~QMIDormancyCommandDriver(dormancy::QMIDormancyCommandDriver *this)
{
  dormancy::QMIDormancyCommandDriver::~QMIDormancyCommandDriver((dormancy::QMIDormancyCommandDriver *)((char *)this - 88));
}

{
  dormancy::QMIDormancyCommandDriver::~QMIDormancyCommandDriver((dormancy::QMIDormancyCommandDriver *)((char *)this - 88));
  JUMPOUT(0x2199FEAC4);
}

uint64_t dormancy::QMIDormancyCommandDriver::shutdown(dormancy::QMIDormancyCommandDriver *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *i;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[2];

  v3 = *((_QWORD *)this + 12);
  v9[0] = v3 + 88;
  v9[1] = 1;
  MEMORY[0x2199FDF3C](v3 + 88, a2);
  *(_BYTE *)(v3 + 74) = 0;
  result = std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v9);
  for (i = (_QWORD *)*((_QWORD *)this + 16); i; i = (_QWORD *)*i)
  {
    v6 = (uint64_t *)i[3];
    v7 = (uint64_t *)i[4];
    while (v6 != v7)
    {
      v8 = *v6;
      v6 += 2;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
    }
  }
  return result;
}

void dormancy::QMIDormancyCommandDriver::registered(_QWORD *a1, QMIVirtualClient **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (QMIVirtualClient::getServiceType(*a2) != 1)
    __TUAssertTrigger();
  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (v4 = a1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  v7 = (_QWORD *)operator new();
  *v7 = a1;
  v8 = a1[3];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v11 = (_QWORD *)operator new();
  *v11 = v7;
  v11[1] = v4;
  v11[2] = v6;
  v13 = 0;
  v14 = 0;
  dispatch_async_f(v8, v11, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<DormancyCommandDriver>::execute_wrapped<dormancy::QMIDormancyCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(dormancy::QMIDormancyCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<dormancy::QMIDormancyCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<dormancy::QMIDormancyCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v13);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v14);
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void `non-virtual thunk to'dormancy::QMIDormancyCommandDriver::registered(uint64_t a1, QMIVirtualClient **a2)
{
  dormancy::QMIDormancyCommandDriver::registered((_QWORD *)(a1 - 88), a2);
}

void dormancy::QMIDormancyCommandDriver::deregistered(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = a1[1], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = (_QWORD *)operator new();
  *v6 = a1;
  v7 = a1[3];
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (_QWORD *)operator new();
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  v12 = 0;
  v13 = 0;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<DormancyCommandDriver>::execute_wrapped<dormancy::QMIDormancyCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(dormancy::QMIDormancyCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<dormancy::QMIDormancyCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<dormancy::QMIDormancyCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v12);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v13);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void `non-virtual thunk to'dormancy::QMIDormancyCommandDriver::deregistered(uint64_t a1)
{
  dormancy::QMIDormancyCommandDriver::deregistered((_QWORD *)(a1 - 88));
}

void dormancy::QMIDormancyCommandDriver::registerDormancyReports_sync(dormancy::QMIDormancyCommandDriver *this)
{
  uint64_t v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  _QWORD v17[5];
  _OWORD v18[2];
  uint8_t buf[8];
  uint64_t v20;
  void (*v21)(_QWORD *);
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  _QWORD aBlock[5];

  v2 = *((_QWORD *)this + 12);
  if (*(_BYTE *)(v2 + 72) && *(_QWORD *)(v2 + 56))
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I registerDormancyReports", buf, 2u);
    }
    memset(v18, 0, sizeof(v18));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
    *(_BYTE *)qmi::MutableMessageBase::getTLV<wds::tlv::ReportDormancyStatus>(v18, 19) = 1;
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v4
      || (v5 = *((_QWORD *)this + 12), v6 = *((_QWORD *)this + 1), (v7 = std::__shared_weak_count::lock(v4)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v8 = v7;
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v8);
    }
    v13 = MEMORY[0x24BDAC760];
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 0x40000000;
    v17[2] = ___ZN8dormancy24QMIDormancyCommandDriver28registerDormancyReports_syncEv_block_invoke_2;
    v17[3] = &__block_descriptor_tmp_10_7;
    v17[4] = this;
    if (!*(_BYTE *)(v5 + 72) || !*(_QWORD *)(v5 + 56))
      __TUAssertTrigger();
    v26 = v5 + 40;
    v27 = QMIServiceMsg::create();
    v28 = 25000;
    v29 = 0;
    v30 = 0;
    *(_QWORD *)buf = v13;
    v20 = 1174405120;
    v21 = ___ZN16QMIVirtualClient4sendIN3wds14SetEventReport7RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
    v22 = &unk_24D5D5628;
    v24 = v6;
    v25 = v8;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v23 = v17;
    aBlock[0] = v13;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
    aBlock[3] = &unk_24D5D5578;
    aBlock[4] = buf;
    v15 = _Block_copy(aBlock);
    v30 = v15;
    if (v27)
    {
      qmi::Client::send();
      v15 = v30;
    }
    if (v15)
      _Block_release(v15);
    if (v25)
      std::__shared_weak_count::__release_weak(v25);
    std::__shared_weak_count::__release_weak(v8);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
  }
  else
  {
    v16 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v16, OS_LOG_TYPE_DEFAULT, "#I registerDormancyReports, QMI Client is not valid", buf, 2u);
    }
  }
}

void sub_21698EF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;

  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN8dormancy24QMIDormancyCommandDriver28registerDormancyReports_syncEv_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v20[0] = *a2;
  v5 = a2[2];
  v20[1] = v4;
  v20[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)v2[2];
  if (!v8 || (v9 = v2[1], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = (_QWORD *)operator new();
  *v12 = v2;
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  if (v5)
  {
    v13 = (unint64_t *)(v5 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v2[3];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = (_QWORD *)operator new();
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver28registerDormancyReports_syncEvEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v20);
}

void dormancy::QMIDormancyCommandDriver::enterPowerMode(uint64_t a1, QMIVirtualClient **a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (a4 == 1 && QMIVirtualClient::getServiceType(*a2) == 1)
  {
    v6 = *(std::__shared_weak_count **)(a1 + 80);
    if (v6)
    {
      v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)(a1 + 72);
        if (v9)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, a3);
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_21698F1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'dormancy::QMIDormancyCommandDriver::enterPowerMode(uint64_t a1, QMIVirtualClient **a2, uint64_t a3, int a4)
{
  dormancy::QMIDormancyCommandDriver::enterPowerMode(a1 - 88, a2, a3, a4);
}

void dormancy::QMIDormancyCommandDriver::exitPowerMode(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 72);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_21698F29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'dormancy::QMIDormancyCommandDriver::exitPowerMode(uint64_t a1)
{
  dormancy::QMIDormancyCommandDriver::exitPowerMode(a1 - 88);
}

void dormancy::QMIDormancyCommandDriver::sendDormancyRequest_sync(_QWORD *a1, uint64_t *a2, uint64_t a3, NSObject **a4)
{
  uint64_t v5;
  NSObject *v9;
  capabilities::ct *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void **v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  const void **v27;
  char *v28;
  BOOL *v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const void **v64;
  char *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_weak_owners;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  NSObject *v93;
  unint64_t v94;
  void *v95;
  _QWORD v96[5];
  dispatch_group_t group;
  uint64_t v98;
  _QWORD v99[2];
  uint64_t (*v100)(uint64_t, _BYTE *);
  void *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  _QWORD v104[2];
  uint64_t (*v105)(uint64_t, _BYTE *);
  void *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  _QWORD v109[2];
  uint64_t (*v110)(uint64_t, BOOL *);
  void *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  void *v120;
  _QWORD aBlock[5];
  __int128 buf;
  void (*v123)(_QWORD *);
  void *v124;
  _QWORD *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  v5 = a1[12];
  if (*(_BYTE *)(v5 + 72) && *(_QWORD *)(v5 + 56))
  {
    v9 = a1[5];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = a3;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I QMI Client is valid, sending QMI_WDS_GO_DORMANT due to %s", (uint8_t *)&buf, 0xCu);
    }
    v114 = 0u;
    v115 = 0u;
    v10 = (capabilities::ct *)qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v114);
    v11 = capabilities::ct::supportsDataQMIExtensions(v10);
    v12 = MEMORY[0x24BDAC760];
    if (v11)
    {
      v109[0] = MEMORY[0x24BDAC760];
      v109[1] = 1174405120;
      v110 = ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke;
      v111 = &__block_descriptor_tmp_12_9;
      v13 = (std::__shared_weak_count *)a2[1];
      v112 = *a2;
      v113 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = (const void **)*((_QWORD *)&v114 + 1);
      if (*((_QWORD *)&v114 + 1) != (_QWORD)v115)
      {
        while (*((_BYTE *)*v16 + 8) != 17)
        {
          if (++v16 == (const void **)v115)
            goto LABEL_36;
        }
      }
      if (v16 == (const void **)v115)
      {
LABEL_36:
        v32 = operator new();
        v33 = v32;
        *(_WORD *)(v32 + 8) = 17;
        *(_QWORD *)v32 = &off_24D5D5680;
        v34 = v115;
        if ((unint64_t)v115 >= *((_QWORD *)&v115 + 1))
        {
          v40 = (uint64_t)(v115 - *((_QWORD *)&v114 + 1)) >> 3;
          if ((unint64_t)(v40 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v41 = (uint64_t)(*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1)) >> 2;
          if (v41 <= v40 + 1)
            v41 = v40 + 1;
          if (*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          if (v42)
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v115 + 8, v42);
          else
            v43 = 0;
          v48 = (uint64_t *)&v43[8 * v40];
          v49 = &v43[8 * v42];
          *v48 = v33;
          v35 = v48 + 1;
          v51 = (char *)*((_QWORD *)&v114 + 1);
          v50 = (char *)v115;
          if ((_QWORD)v115 != *((_QWORD *)&v114 + 1))
          {
            do
            {
              v52 = *((_QWORD *)v50 - 1);
              v50 -= 8;
              *--v48 = v52;
            }
            while (v50 != v51);
            v50 = (char *)*((_QWORD *)&v114 + 1);
          }
          *((_QWORD *)&v114 + 1) = v48;
          *(_QWORD *)&v115 = v35;
          *((_QWORD *)&v115 + 1) = v49;
          if (v50)
            operator delete(v50);
        }
        else
        {
          *(_QWORD *)v115 = v32;
          v35 = (_QWORD *)(v34 + 8);
        }
        v29 = (BOOL *)(v33 + 9);
        *(_QWORD *)&v115 = v35;
      }
      else
      {
        if (!v28)
          __cxa_bad_cast();
        v29 = (BOOL *)(v28 + 9);
      }
      v110((uint64_t)v109, v29);
      v53 = v113;
      if (!v113)
        goto LABEL_111;
      v54 = (unint64_t *)&v113->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
    }
    else
    {
      v104[0] = MEMORY[0x24BDAC760];
      v104[1] = 1174405120;
      v105 = ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke_13;
      v106 = &__block_descriptor_tmp_15_11;
      v24 = (std::__shared_weak_count *)a2[1];
      v107 = *a2;
      v108 = v24;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = (const void **)*((_QWORD *)&v114 + 1);
      if (*((_QWORD *)&v114 + 1) != (_QWORD)v115)
      {
        while (*((unsigned __int8 *)*v27 + 8) != 161)
        {
          if (++v27 == (const void **)v115)
            goto LABEL_38;
        }
      }
      if (v27 == (const void **)v115)
      {
LABEL_38:
        v36 = operator new();
        v37 = v36;
        *(_WORD *)(v36 + 8) = 161;
        *(_QWORD *)v36 = &off_24D5D56D0;
        v38 = v115;
        if ((unint64_t)v115 >= *((_QWORD *)&v115 + 1))
        {
          v44 = (uint64_t)(v115 - *((_QWORD *)&v114 + 1)) >> 3;
          if ((unint64_t)(v44 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v45 = (uint64_t)(*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1)) >> 2;
          if (v45 <= v44 + 1)
            v45 = v44 + 1;
          if (*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
            v46 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v46 = v45;
          if (v46)
            v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v115 + 8, v46);
          else
            v47 = 0;
          v56 = (uint64_t *)&v47[8 * v44];
          v57 = &v47[8 * v46];
          *v56 = v37;
          v39 = v56 + 1;
          v59 = (char *)*((_QWORD *)&v114 + 1);
          v58 = (char *)v115;
          if ((_QWORD)v115 != *((_QWORD *)&v114 + 1))
          {
            do
            {
              v60 = *((_QWORD *)v58 - 1);
              v58 -= 8;
              *--v56 = v60;
            }
            while (v58 != v59);
            v58 = (char *)*((_QWORD *)&v114 + 1);
          }
          *((_QWORD *)&v114 + 1) = v56;
          *(_QWORD *)&v115 = v39;
          *((_QWORD *)&v115 + 1) = v57;
          if (v58)
            operator delete(v58);
        }
        else
        {
          *(_QWORD *)v115 = v36;
          v39 = (_QWORD *)(v38 + 8);
        }
        v31 = (_BYTE *)(v37 + 9);
        *(_QWORD *)&v115 = v39;
      }
      else
      {
        if (!v30)
          __cxa_bad_cast();
        v31 = v30 + 9;
      }
      v105((uint64_t)v104, v31);
      v99[0] = v12;
      v99[1] = 1174405120;
      v100 = ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke_16;
      v101 = &__block_descriptor_tmp_18_9;
      v61 = (std::__shared_weak_count *)a2[1];
      v102 = *a2;
      v103 = v61;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      v64 = (const void **)*((_QWORD *)&v114 + 1);
      if (*((_QWORD *)&v114 + 1) != (_QWORD)v115)
      {
        while (*((unsigned __int8 *)*v64 + 8) != 162)
        {
          if (++v64 == (const void **)v115)
            goto LABEL_84;
        }
      }
      if (v64 == (const void **)v115)
      {
LABEL_84:
        v67 = operator new();
        v68 = v67;
        *(_WORD *)(v67 + 8) = 162;
        *(_QWORD *)v67 = &off_24D5D5720;
        v69 = v115;
        if ((unint64_t)v115 >= *((_QWORD *)&v115 + 1))
        {
          v71 = (uint64_t)(v115 - *((_QWORD *)&v114 + 1)) >> 3;
          if ((unint64_t)(v71 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v72 = (uint64_t)(*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1)) >> 2;
          if (v72 <= v71 + 1)
            v72 = v71 + 1;
          if (*((_QWORD *)&v115 + 1) - *((_QWORD *)&v114 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
            v73 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v73 = v72;
          if (v73)
            v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v115 + 8, v73);
          else
            v74 = 0;
          v75 = (uint64_t *)&v74[8 * v71];
          v76 = &v74[8 * v73];
          *v75 = v68;
          v70 = v75 + 1;
          v78 = (char *)*((_QWORD *)&v114 + 1);
          v77 = (char *)v115;
          if ((_QWORD)v115 != *((_QWORD *)&v114 + 1))
          {
            do
            {
              v79 = *((_QWORD *)v77 - 1);
              v77 -= 8;
              *--v75 = v79;
            }
            while (v77 != v78);
            v77 = (char *)*((_QWORD *)&v114 + 1);
          }
          *((_QWORD *)&v114 + 1) = v75;
          *(_QWORD *)&v115 = v70;
          *((_QWORD *)&v115 + 1) = v76;
          if (v77)
            operator delete(v77);
        }
        else
        {
          *(_QWORD *)v115 = v67;
          v70 = (_QWORD *)(v69 + 8);
        }
        v66 = (_BYTE *)(v68 + 9);
        *(_QWORD *)&v115 = v70;
      }
      else
      {
        if (!v65)
          __cxa_bad_cast();
        v66 = v65 + 9;
      }
      v100((uint64_t)v99, v66);
      v80 = v103;
      if (v103)
      {
        v81 = (unint64_t *)&v103->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v53 = v108;
      if (!v108)
        goto LABEL_111;
      v83 = (unint64_t *)&v108->__shared_owners_;
      do
        v55 = __ldaxr(v83);
      while (__stlxr(v55 - 1, v83));
    }
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
LABEL_111:
    v84 = (std::__shared_weak_count *)a1[2];
    if (!v84 || (v85 = a1[12], v86 = a1[1], (v87 = std::__shared_weak_count::lock(v84)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v88 = v87;
    p_shared_weak_owners = (unint64_t *)&v87->__shared_weak_owners_;
    do
      v90 = __ldxr(p_shared_weak_owners);
    while (__stxr(v90 + 1, p_shared_weak_owners));
    v91 = (unint64_t *)&v87->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v88);
    }
    v96[0] = v12;
    v96[1] = 1174405120;
    v96[2] = ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke_19;
    v96[3] = &__block_descriptor_tmp_20_7;
    v93 = *a4;
    v96[4] = a1;
    group = v93;
    if (v93)
    {
      dispatch_retain(v93);
      dispatch_group_enter(v93);
    }
    v98 = a3;
    if (!*(_BYTE *)(v85 + 72) || !*(_QWORD *)(v85 + 56))
      __TUAssertTrigger();
    v116 = v85 + 40;
    v117 = QMIServiceMsg::create();
    v118 = 25000;
    v119 = 0;
    v120 = 0;
    *(_QWORD *)&buf = v12;
    *((_QWORD *)&buf + 1) = 1174405120;
    v123 = ___ZN16QMIVirtualClient4sendIN3wds10DormantReq7RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
    v124 = &unk_24D5D5750;
    v126 = v86;
    v127 = v88;
    do
      v94 = __ldxr(p_shared_weak_owners);
    while (__stxr(v94 + 1, p_shared_weak_owners));
    v125 = v96;
    aBlock[0] = v12;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
    aBlock[3] = &unk_24D5D5578;
    aBlock[4] = &buf;
    v95 = _Block_copy(aBlock);
    v120 = v95;
    if (v117)
    {
      qmi::Client::send();
      v95 = v120;
    }
    if (v95)
      _Block_release(v95);
    if (v127)
      std::__shared_weak_count::__release_weak(v127);
    std::__shared_weak_count::__release_weak(v88);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v114);
    return;
  }
  v17 = a1[5];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#I QMI Client is not valid", (uint8_t *)&buf, 2u);
  }
  v18 = (std::__shared_weak_count *)a1[10];
  if (v18)
  {
    v19 = std::__shared_weak_count::lock(v18);
    *((_QWORD *)&buf + 1) = v19;
    if (v19)
    {
      v20 = v19;
      v21 = a1[9];
      *(_QWORD *)&buf = v21;
      if (v21)
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 56))(v21, 0, 0);
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_21698FB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v39 - 176);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke(uint64_t result, BOOL *a2)
{
  *a2 = *(_DWORD *)(*(_QWORD *)(result + 32) + 4) != 0;
  return result;
}

uint64_t __copy_helper_block_e8_32c51_ZTSNSt3__110shared_ptrIN8dormancy5Model7RequestEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c51_ZTSNSt3__110shared_ptrIN8dormancy5Model7RequestEEE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke_13(uint64_t result, _BYTE *a2)
{
  *a2 = **(_BYTE **)(result + 32);
  return result;
}

uint64_t ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke_16(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(*(_QWORD *)(result + 32) + 4);
  return result;
}

void ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke_19(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v22[0] = *a2;
  v5 = a2[2];
  v22[1] = v4;
  v22[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a1 + 48);
  v22[3] = v8;
  v9 = (std::__shared_weak_count *)v2[2];
  if (!v9 || (v10 = v2[1], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = (_QWORD *)operator new();
  v14 = v13;
  *v13 = v2;
  v13[1] = v3;
  v13[2] = v4;
  v13[3] = v5;
  if (v5)
  {
    v15 = (unint64_t *)(v5 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v13[4] = v8;
  v17 = v2[3];
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  v20 = (_QWORD *)operator new();
  *v20 = v14;
  v20[1] = v10;
  v20[2] = v12;
  v23 = 0;
  v24 = 0;
  dispatch_async_f(v17, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS6_5Model7RequestEEEPKcNS_13group_sessionEEUb0_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISH_NS8_14default_deleteISH_EEEEENUlPvE_8__invokeESQ_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v23);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v24);
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v22);
}

void __copy_helper_block_e8_40c31_ZTSKN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_40c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

void dormancy::QMIDormancyCommandDriver::requestCurrentDormancyStatus_sync(dormancy::QMIDormancyCommandDriver *this)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  _QWORD v17[5];
  _OWORD v18[2];
  uint8_t buf[8];
  uint64_t v20;
  void (*v21)(_QWORD *, _QWORD *);
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  _QWORD aBlock[5];

  v2 = *((_QWORD *)this + 12);
  v3 = *((_QWORD *)this + 5);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Getting current dormancy status", buf, 2u);
    }
    memset(v18, 0, sizeof(v18));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v5
      || (v6 = *((_QWORD *)this + 12), v7 = *((_QWORD *)this + 1), (v8 = std::__shared_weak_count::lock(v5)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v9 = v8;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    v14 = MEMORY[0x24BDAC760];
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 0x40000000;
    v17[2] = ___ZN8dormancy24QMIDormancyCommandDriver33requestCurrentDormancyStatus_syncEv_block_invoke;
    v17[3] = &__block_descriptor_tmp_21_5;
    v17[4] = this;
    if (!*(_BYTE *)(v6 + 72) || !*(_QWORD *)(v6 + 56))
      __TUAssertTrigger();
    v26 = v6 + 40;
    v27 = QMIServiceMsg::create();
    v28 = 25000;
    v29 = 0;
    v30 = 0;
    *(_QWORD *)buf = v14;
    v20 = 1174405120;
    v21 = ___ZN16QMIVirtualClient4sendIN3wds17GetDormancyStatus7RequestE21DormancyCommandDriverU13block_pointerFvRKNS2_8ResponseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke;
    v22 = &unk_24D5D57C8;
    v24 = v7;
    v25 = v9;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v23 = v17;
    aBlock[0] = v14;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
    aBlock[3] = &unk_24D5D5578;
    aBlock[4] = buf;
    v16 = _Block_copy(aBlock);
    v30 = v16;
    if (v27)
    {
      qmi::Client::send();
      v16 = v30;
    }
    if (v16)
      _Block_release(v16);
    if (v25)
      std::__shared_weak_count::__release_weak(v25);
    std::__shared_weak_count::__release_weak(v9);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
  }
  else if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I WDS Client is not ready", buf, 2u);
  }
}

void sub_2169900D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;

  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN8dormancy24QMIDormancyCommandDriver33requestCurrentDormancyStatus_syncEv_block_invoke(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v20[0] = *a2;
  v5 = a2[2];
  v20[1] = v4;
  v20[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)v2[2];
  if (!v8 || (v9 = v2[1], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = (_QWORD *)operator new();
  *v12 = v2;
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  if (v5)
  {
    v13 = (unint64_t *)(v5 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v2[3];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = (_QWORD *)operator new();
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver33requestCurrentDormancyStatus_syncEvEUb1_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v20);
}

_QWORD *__copy_helper_block_e8_32c36_ZTSKN3wds3tlv19FilteringPortsList1E(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<wds::tlv::FilteringPortInfo1>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo1*,wds::tlv::FilteringPortInfo1*>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
}

void __destroy_helper_block_e8_32c36_ZTSKN3wds3tlv19FilteringPortsList1E(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionE_block_invoke_26(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v22[3];
  char v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v22[0] = *a2;
  v5 = a2[2];
  v22[1] = v4;
  v22[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_BYTE *)(a1 + 48);
  v23 = v8;
  v9 = (std::__shared_weak_count *)v2[2];
  if (!v9 || (v10 = v2[1], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = operator new();
  v14 = v13;
  *(_QWORD *)v13 = v2;
  *(_QWORD *)(v13 + 8) = v3;
  *(_QWORD *)(v13 + 16) = v4;
  *(_QWORD *)(v13 + 24) = v5;
  if (v5)
  {
    v15 = (unint64_t *)(v5 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_BYTE *)(v13 + 32) = v8;
  v17 = v2[3];
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  v20 = (_QWORD *)operator new();
  *v20 = v14;
  v20[1] = v10;
  v20[2] = v12;
  v24 = 0;
  v25 = 0;
  dispatch_async_f(v17, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1ENS_13group_sessionEEUb2_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v24);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v25);
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v22);
}

_QWORD *__copy_helper_block_e8_32c36_ZTSKN3wds3tlv19FilteringPortsList2E(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<wds::tlv::FilteringPortInfo2>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo2*,wds::tlv::FilteringPortInfo2*>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 1));
}

void __destroy_helper_block_e8_32c36_ZTSKN3wds3tlv19FilteringPortsList2E(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList2EN8dispatch13group_sessionE_block_invoke_30(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v22[3];
  char v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v22[0] = *a2;
  v5 = a2[2];
  v22[1] = v4;
  v22[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_BYTE *)(a1 + 48);
  v23 = v8;
  v9 = (std::__shared_weak_count *)v2[2];
  if (!v9 || (v10 = v2[1], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = operator new();
  v14 = v13;
  *(_QWORD *)v13 = v2;
  *(_QWORD *)(v13 + 8) = v3;
  *(_QWORD *)(v13 + 16) = v4;
  *(_QWORD *)(v13 + 24) = v5;
  if (v5)
  {
    v15 = (unint64_t *)(v5 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_BYTE *)(v13 + 32) = v8;
  v17 = v2[3];
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  v20 = (_QWORD *)operator new();
  *v20 = v14;
  v20[1] = v10;
  v20[2] = v12;
  v24 = 0;
  v25 = 0;
  dispatch_async_f(v17, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList2ENS_13group_sessionEEUb3_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v24);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v25);
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v22);
}

_QWORD *__copy_helper_block_e8_32c36_ZTSKN3wds3tlv19FilteringPortsList3E(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  _QWORD *v3;

  v2 = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v3 = (_QWORD *)(a1 + 40);
  *((_WORD *)v3 - 4) = v2;
  v3[1] = 0;
  v3[2] = 0;
  return std::vector<wds::tlv::FilteringPortInfo3>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo3*,wds::tlv::FilteringPortInfo3*>(v3, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 1));
}

void __destroy_helper_block_e8_32c36_ZTSKN3wds3tlv19FilteringPortsList3E(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList3EN8dispatch13group_sessionE_block_invoke_34(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v22[3];
  char v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v22[0] = *a2;
  v5 = a2[2];
  v22[1] = v4;
  v22[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_BYTE *)(a1 + 48);
  v23 = v8;
  v9 = (std::__shared_weak_count *)v2[2];
  if (!v9 || (v10 = v2[1], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = operator new();
  v14 = v13;
  *(_QWORD *)v13 = v2;
  *(_QWORD *)(v13 + 8) = v3;
  *(_QWORD *)(v13 + 16) = v4;
  *(_QWORD *)(v13 + 24) = v5;
  if (v5)
  {
    v15 = (unint64_t *)(v5 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_BYTE *)(v13 + 32) = v8;
  v17 = v2[3];
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  v20 = (_QWORD *)operator new();
  *v20 = v14;
  v20[1] = v10;
  v20[2] = v12;
  v24 = 0;
  v25 = 0;
  dispatch_async_f(v17, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList3ENS_13group_sessionEEUb4_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v24);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v25);
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v22);
}

void dormancy::QMIDormancyCommandDriver::sendFilterUnsolicitedPacketsRequest_sync(uint64_t a1, int a2, NSObject **a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  const void *v28;
  _BYTE *v29;
  __int16 v30;
  const void *v31;
  uint64_t v32;
  const void *v33;
  _BYTE *v34;
  NSObject *v35;
  const void **v36;
  uint64_t v37;
  const void **v38;
  const void **v39;
  NSObject *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  void *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_weak_owners;
  unint64_t v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  void *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  void *v103;
  void *v104;
  uint64_t *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  void *v121;
  _BYTE *v122;
  uint64_t v123;
  void *v124[2];
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t *);
  void *v129;
  uint64_t v130;
  dispatch_group_t group;
  char v132;
  uint8_t buf[8];
  uint64_t v134;
  void (*v135)(uint8_t *, char *);
  void *v136;
  uint64_t *v137;
  void *v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  void *__p[2];
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t *, char *);
  void *v146;
  void *v147;
  void *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  void *v154;
  uint64_t aBlock;
  uint64_t v156;
  void (*v157)(uint64_t, uint64_t);
  void *v158;
  uint8_t *v159;

  if ((capabilities::ct::supportsDataQMIExtensions((capabilities::ct *)a1) & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 96);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 72) && *(_QWORD *)(v6 + 56))
      {
        v7 = 156;
        if (!*(_BYTE *)(a1 + 160))
          v7 = 152;
        switch(*(_DWORD *)(a1 + v7))
        {
          case 0:
            v8 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I Packet filtering is not supported", buf, 2u);
            }
            return;
          case 1:
            v9 = *a3;
            if (v9)
            {
              dispatch_retain(v9);
              dispatch_group_enter(v9);
            }
            v124[0] = 0;
            v124[1] = 0;
            *(_QWORD *)&v125 = 0;
            *(_DWORD *)buf = 0;
            v22 = *MEMORY[0x24BDC41F0];
            LODWORD(v143) = 0;
            if (!v22)
            {
              v34 = 0;
              v33 = 0;
              goto LABEL_97;
            }
            v23 = 0;
LABEL_54:
            if (dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList1>((_QWORD *)a1, (int **)v124, (unsigned int *)&v143, 5, (unsigned int *)buf))v24 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList1>((_QWORD *)a1, (int **)v124, (unsigned int *)&v143, 9, (unsigned int *)buf);
            else
              v24 = 0;
            break;
          case 2:
            v9 = *a3;
            if (v9)
            {
              dispatch_retain(v9);
              dispatch_group_enter(v9);
            }
            v124[0] = 0;
            v124[1] = 0;
            *(_QWORD *)&v125 = 0;
            *(_DWORD *)buf = 0;
            v10 = *MEMORY[0x24BDC41F0];
            LODWORD(v143) = 0;
            if (!v10)
            {
              v29 = 0;
              v28 = 0;
              goto LABEL_79;
            }
            v11 = 0;
            while (2)
            {
              if (dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList2>((_QWORD *)a1, v124, (unsigned int *)&v143, 5, (unsigned int *)buf))v12 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList2>((_QWORD *)a1, v124, (unsigned int *)&v143, 9, (unsigned int *)buf);
              else
                v12 = 0;
LABEL_17:
              if (*(_BYTE *)(a1 + 160))
                v13 = 156;
              else
                v13 = 152;
              v14 = *(_DWORD *)(a1 + v13);
              if (v14 == 2)
              {
                if ((v12 & 1) == 0)
                {
                  v15 = 0;
                  goto LABEL_27;
                }
              }
              else
              {
                v15 = (v14 != 3) & v12;
                if (v14 != 3 || ((v12 ^ 1) & 1) != 0)
                  goto LABEL_27;
              }
              v15 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList2>((_QWORD *)a1, v124, (unsigned int *)&v143, 6, (unsigned int *)buf);
              if (v15)
                v15 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList2>((_QWORD *)a1, v124, (unsigned int *)&v143, 10, (unsigned int *)buf);
LABEL_27:
              LODWORD(v143) = ++v11;
              if (v11 < v10)
              {
                v12 = 0;
                if (v15)
                  continue;
                goto LABEL_17;
              }
              break;
            }
            if (!v15)
            {
LABEL_76:
              v35 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_216897000, v35, OS_LOG_TYPE_DEFAULT, "#I Getting port lists failed", buf, 2u);
              }
              goto LABEL_250;
            }
            v28 = v124[0];
            v29 = v124[1];
LABEL_79:
            v120 = 0;
            v121 = 0;
            v122 = 0;
            std::vector<wds::tlv::FilteringPortInfo2>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo2*,wds::tlv::FilteringPortInfo2*>(&v120, v28, (uint64_t)v29, 0xAAAAAAAAAAAAAAABLL * ((v29 - (_BYTE *)v28) >> 1));
            if (v9)
            {
              dispatch_retain(v9);
              dispatch_group_enter(v9);
            }
            *(_OWORD *)__p = 0u;
            v142 = 0u;
            qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
            *qmi::MutableMessageBase::getTLV<wds::tlv::EnableFiltering>(__p) = a2;
            if (a2 && v120 != v121)
            {
              v143 = MEMORY[0x24BDAC760];
              v144 = 1174405120;
              v145 = (void (*)(uint64_t *, char *))___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList2EN8dispatch13group_sessionE_block_invoke_2;
              v146 = &__block_descriptor_tmp_29_2;
              v148 = 0;
              v149 = 0;
              v147 = 0;
              std::vector<wds::tlv::FilteringPortInfo2>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo2*,wds::tlv::FilteringPortInfo2*>(&v147, v120, (uint64_t)v121, 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v121 - (_BYTE *)v120) >> 1));
              v36 = (const void **)__p[1];
              if (__p[1] != (void *)v142)
              {
                while (*((_BYTE *)*v36 + 8) != 16)
                {
                  if (++v36 == (const void **)v142)
                    goto LABEL_116;
                }
              }
              if (v36 == (const void **)v142)
              {
LABEL_116:
                v47 = operator new();
                v48 = v47;
                *(_BYTE *)(v47 + 8) = 16;
                *(_QWORD *)(v47 + 16) = 0;
                v42 = (char *)(v47 + 16);
                *(_QWORD *)v47 = &off_24D5D58F8;
                *(_QWORD *)(v47 + 24) = 0;
                *(_QWORD *)(v47 + 32) = 0;
                v49 = v142;
                if ((unint64_t)v142 >= *((_QWORD *)&v142 + 1))
                {
                  v59 = (uint64_t)(v142 - (unint64_t)__p[1]) >> 3;
                  if ((unint64_t)(v59 + 1) >> 61)
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v60 = (uint64_t)(*((_QWORD *)&v142 + 1) - (unint64_t)__p[1]) >> 2;
                  if (v60 <= v59 + 1)
                    v60 = v59 + 1;
                  if (*((_QWORD *)&v142 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
                    v61 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v61 = v60;
                  if (v61)
                    v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v142 + 8, v61);
                  else
                    v62 = 0;
                  v71 = (uint64_t *)&v62[8 * v59];
                  v72 = &v62[8 * v61];
                  *v71 = v48;
                  v50 = v71 + 1;
                  v74 = (char *)__p[1];
                  v73 = (char *)v142;
                  if ((void *)v142 != __p[1])
                  {
                    do
                    {
                      v75 = *((_QWORD *)v73 - 1);
                      v73 -= 8;
                      *--v71 = v75;
                    }
                    while (v73 != v74);
                    v73 = (char *)__p[1];
                  }
                  __p[1] = v71;
                  *(_QWORD *)&v142 = v50;
                  *((_QWORD *)&v142 + 1) = v72;
                  if (v73)
                    operator delete(v73);
                }
                else
                {
                  *(_QWORD *)v142 = v47;
                  v50 = (_QWORD *)(v49 + 8);
                }
                *(_QWORD *)&v142 = v50;
              }
              else
              {
                if (!v41)
                  __cxa_bad_cast();
                v42 = v41 + 16;
              }
              v145(&v143, v42);
              if (v147)
              {
                v148 = v147;
                operator delete(v147);
              }
            }
            v76 = *(std::__shared_weak_count **)(a1 + 16);
            if (!v76
              || (v77 = *(_QWORD *)(a1 + 96),
                  v78 = *(void **)(a1 + 8),
                  (v79 = std::__shared_weak_count::lock(v76)) == 0))
            {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            v80 = v79;
            p_shared_weak_owners = (unint64_t *)&v79->__shared_weak_owners_;
            do
              v82 = __ldxr(p_shared_weak_owners);
            while (__stxr(v82 + 1, p_shared_weak_owners));
            p_shared_owners = (unint64_t *)&v79->__shared_owners_;
            do
              v84 = __ldaxr(p_shared_owners);
            while (__stlxr(v84 - 1, p_shared_owners));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v80);
            }
            v85 = MEMORY[0x24BDAC760];
            v126 = MEMORY[0x24BDAC760];
            v127 = 1174405120;
            v128 = ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList2EN8dispatch13group_sessionE_block_invoke_30;
            v129 = &__block_descriptor_tmp_31_3;
            v130 = a1;
            group = v9;
            if (v9)
            {
              dispatch_retain(v9);
              dispatch_group_enter(v9);
            }
            v132 = a2;
            if (!*(_BYTE *)(v77 + 72) || !*(_QWORD *)(v77 + 56))
              __TUAssertTrigger();
            v150 = v77 + 40;
            v151 = QMIServiceMsg::create();
            v152 = 25000;
            v153 = 0;
            v154 = 0;
            *(_QWORD *)buf = v85;
            v134 = 1174405120;
            v135 = (void (*)(uint8_t *, char *))___ZN16QMIVirtualClient4sendIN3wds25FilterUnsolicitedPackets27RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
            v136 = &unk_24D5D5928;
            v138 = v78;
            v139 = v80;
            do
              v86 = __ldxr(p_shared_weak_owners);
            while (__stxr(v86 + 1, p_shared_weak_owners));
            v137 = &v126;
            aBlock = v85;
            v156 = 0x40000000;
            v157 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
            v158 = &unk_24D5D5578;
            v159 = buf;
            v87 = _Block_copy(&aBlock);
            v154 = v87;
            if (v151)
            {
              qmi::Client::send();
              v87 = v154;
            }
            if (v87)
LABEL_240:
              _Block_release(v87);
LABEL_241:
            if (v139)
              std::__shared_weak_count::__release_weak(v139);
            std::__shared_weak_count::__release_weak(v80);
            if (group)
            {
              dispatch_group_leave(group);
              if (group)
                dispatch_release(group);
            }
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
            if (v9)
            {
              dispatch_group_leave(v9);
              dispatch_release(v9);
            }
            if (v120)
            {
              v121 = v120;
              operator delete(v120);
            }
LABEL_250:
            v104 = v124[0];
            if (!v124[0])
              goto LABEL_253;
            v124[1] = v124[0];
            goto LABEL_252;
          case 3:
            v9 = *a3;
            if (v9)
            {
              dispatch_retain(v9);
              dispatch_group_enter(v9);
            }
            *(_OWORD *)v124 = 0u;
            v125 = 0u;
            *(_DWORD *)buf = 0;
            v16 = *MEMORY[0x24BDC41F0];
            LODWORD(v143) = 0;
            if (!v16)
            {
              v32 = 0;
              v31 = 0;
              v30 = 0;
LABEL_88:
              LOWORD(v120) = v30;
              v122 = 0;
              v123 = 0;
              v121 = 0;
              std::vector<wds::tlv::FilteringPortInfo3>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo3*,wds::tlv::FilteringPortInfo3*>(&v121, v31, v32, 0xAAAAAAAAAAAAAAABLL * ((v32 - (uint64_t)v31) >> 1));
              if (v9)
              {
                dispatch_retain(v9);
                dispatch_group_enter(v9);
              }
              *(_OWORD *)__p = 0u;
              v142 = 0u;
              qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
              *qmi::MutableMessageBase::getTLV<wds::tlv::EnableFiltering>(__p) = a2;
              v37 = MEMORY[0x24BDAC760];
              if (a2 && v121 != v122)
              {
                *(_QWORD *)buf = MEMORY[0x24BDAC760];
                v134 = 1174405120;
                v135 = (void (*)(uint8_t *, char *))___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList3EN8dispatch13group_sessionE_block_invoke_2;
                v136 = &__block_descriptor_tmp_33_5;
                LOWORD(v137) = (_WORD)v120;
                v139 = 0;
                v140 = 0;
                v138 = 0;
                std::vector<wds::tlv::FilteringPortInfo3>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo3*,wds::tlv::FilteringPortInfo3*>(&v138, v121, (uint64_t)v122, 0xAAAAAAAAAAAAAAABLL * ((v122 - (_BYTE *)v121) >> 1));
                v38 = (const void **)__p[1];
                if (__p[1] != (void *)v142)
                {
                  while (*((_BYTE *)*v38 + 8) != 16)
                  {
                    if (++v38 == (const void **)v142)
                      goto LABEL_118;
                  }
                }
                if (v38 == (const void **)v142)
                {
LABEL_118:
                  v51 = operator new();
                  v52 = v51;
                  *(_BYTE *)(v51 + 8) = 16;
                  *(_QWORD *)v51 = &off_24D5D5980;
                  *(_WORD *)(v51 + 16) = 0;
                  v44 = (char *)(v51 + 16);
                  *(_QWORD *)(v51 + 32) = 0;
                  *(_QWORD *)(v51 + 40) = 0;
                  *(_QWORD *)(v51 + 24) = 0;
                  v53 = v142;
                  if ((unint64_t)v142 >= *((_QWORD *)&v142 + 1))
                  {
                    v63 = (uint64_t)(v142 - (unint64_t)__p[1]) >> 3;
                    if ((unint64_t)(v63 + 1) >> 61)
                      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                    v64 = (uint64_t)(*((_QWORD *)&v142 + 1) - (unint64_t)__p[1]) >> 2;
                    if (v64 <= v63 + 1)
                      v64 = v63 + 1;
                    if (*((_QWORD *)&v142 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
                      v65 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v65 = v64;
                    if (v65)
                      v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v142 + 8, v65);
                    else
                      v66 = 0;
                    v88 = (uint64_t *)&v66[8 * v63];
                    v89 = &v66[8 * v65];
                    *v88 = v52;
                    v54 = v88 + 1;
                    v91 = (char *)__p[1];
                    v90 = (char *)v142;
                    if ((void *)v142 != __p[1])
                    {
                      do
                      {
                        v92 = *((_QWORD *)v90 - 1);
                        v90 -= 8;
                        *--v88 = v92;
                      }
                      while (v90 != v91);
                      v90 = (char *)__p[1];
                    }
                    __p[1] = v88;
                    *(_QWORD *)&v142 = v54;
                    *((_QWORD *)&v142 + 1) = v89;
                    if (v90)
                      operator delete(v90);
                  }
                  else
                  {
                    *(_QWORD *)v142 = v51;
                    v54 = (_QWORD *)(v53 + 8);
                  }
                  *(_QWORD *)&v142 = v54;
                }
                else
                {
                  if (!v43)
                    __cxa_bad_cast();
                  v44 = v43 + 16;
                }
                v135(buf, v44);
                if (v138)
                {
                  v139 = (std::__shared_weak_count *)v138;
                  operator delete(v138);
                }
              }
              v93 = *(std::__shared_weak_count **)(a1 + 16);
              if (!v93
                || (v94 = *(_QWORD *)(a1 + 96),
                    v95 = *(void **)(a1 + 8),
                    (v96 = std::__shared_weak_count::lock(v93)) == 0))
              {
                std::__throw_bad_weak_ptr[abi:ne180100]();
              }
              v97 = v96;
              v98 = (unint64_t *)&v96->__shared_weak_owners_;
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
              v100 = (unint64_t *)&v96->__shared_owners_;
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 - 1, v100));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v97);
              }
              v126 = v37;
              v127 = 1174405120;
              v128 = ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList3EN8dispatch13group_sessionE_block_invoke_34;
              v129 = &__block_descriptor_tmp_35_5;
              v130 = a1;
              group = v9;
              if (v9)
              {
                dispatch_retain(v9);
                dispatch_group_enter(v9);
              }
              v132 = a2;
              if (!*(_BYTE *)(v94 + 72) || !*(_QWORD *)(v94 + 56))
                __TUAssertTrigger();
              v150 = v94 + 40;
              v151 = QMIServiceMsg::create();
              v152 = 25000;
              v153 = 0;
              v154 = 0;
              v143 = v37;
              v144 = 1174405120;
              v145 = (void (*)(uint64_t *, char *))___ZN16QMIVirtualClient4sendIN3wds25FilterUnsolicitedPackets37RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
              v146 = &unk_24D5D59B0;
              v148 = v95;
              v149 = v97;
              do
                v102 = __ldxr(v98);
              while (__stxr(v102 + 1, v98));
              v147 = &v126;
              aBlock = v37;
              v156 = 0x40000000;
              v157 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
              v158 = &unk_24D5D5578;
              v159 = (uint8_t *)&v143;
              v103 = _Block_copy(&aBlock);
              v154 = v103;
              if (v151)
              {
                qmi::Client::send();
                v103 = v154;
              }
              if (v103)
                _Block_release(v103);
              if (v149)
                std::__shared_weak_count::__release_weak(v149);
              std::__shared_weak_count::__release_weak(v97);
              if (group)
              {
                dispatch_group_leave(group);
                if (group)
                  dispatch_release(group);
              }
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
              if (v9)
              {
                dispatch_group_leave(v9);
                dispatch_release(v9);
              }
              if (v121)
              {
                v122 = v121;
                operator delete(v121);
              }
              goto LABEL_211;
            }
            v17 = 0;
            while (2)
            {
              if (dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList3>((_QWORD *)a1, (uint64_t)v124, (unsigned int *)&v143, 5, (unsigned int *)buf))v18 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList3>((_QWORD *)a1, (uint64_t)v124, (unsigned int *)&v143, 9, (unsigned int *)buf);
              else
                v18 = 0;
LABEL_37:
              if (*(_BYTE *)(a1 + 160))
                v19 = 156;
              else
                v19 = 152;
              v20 = *(_DWORD *)(a1 + v19);
              if (v20 == 2)
              {
                if ((v18 & 1) == 0)
                {
                  v21 = 0;
                  goto LABEL_47;
                }
              }
              else
              {
                v21 = (v20 != 3) & v18;
                if (v20 != 3 || ((v18 ^ 1) & 1) != 0)
                  goto LABEL_47;
              }
              v21 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList3>((_QWORD *)a1, (uint64_t)v124, (unsigned int *)&v143, 6, (unsigned int *)buf);
              if (v21)
                v21 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList3>((_QWORD *)a1, (uint64_t)v124, (unsigned int *)&v143, 10, (unsigned int *)buf);
LABEL_47:
              LODWORD(v143) = ++v17;
              if (v17 < v16)
              {
                v18 = 0;
                if (v21)
                  continue;
                goto LABEL_37;
              }
              break;
            }
            if (v21)
            {
              v30 = (__int16)v124[0];
              v31 = v124[1];
              v32 = v125;
              goto LABEL_88;
            }
            v40 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_216897000, v40, OS_LOG_TYPE_DEFAULT, "#I Getting port lists failed", buf, 2u);
            }
LABEL_211:
            v104 = v124[1];
            if (v124[1])
            {
              *(void **)&v125 = v124[1];
LABEL_252:
              operator delete(v104);
            }
LABEL_253:
            if (v9)
            {
              dispatch_group_leave(v9);
              dispatch_release(v9);
            }
            return;
          default:
            return;
        }
        while (1)
        {
          if (*(_BYTE *)(a1 + 160))
            v25 = 156;
          else
            v25 = 152;
          v26 = *(_DWORD *)(a1 + v25);
          if (v26 == 2)
          {
            if ((v24 & 1) == 0)
            {
              v27 = 0;
              goto LABEL_67;
            }
          }
          else
          {
            v27 = (v26 != 3) & v24;
            if (v26 != 3 || ((v24 ^ 1) & 1) != 0)
              goto LABEL_67;
          }
          v27 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList1>((_QWORD *)a1, (int **)v124, (unsigned int *)&v143, 6, (unsigned int *)buf);
          if (v27)
            v27 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList1>((_QWORD *)a1, (int **)v124, (unsigned int *)&v143, 10, (unsigned int *)buf);
LABEL_67:
          LODWORD(v143) = ++v23;
          if (v23 >= v22)
          {
            if (!v27)
              goto LABEL_76;
            v33 = v124[0];
            v34 = v124[1];
LABEL_97:
            v120 = 0;
            v121 = 0;
            v122 = 0;
            std::vector<wds::tlv::FilteringPortInfo1>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo1*,wds::tlv::FilteringPortInfo1*>(&v120, v33, (uint64_t)v34, (v34 - (_BYTE *)v33) >> 2);
            if (v9)
            {
              dispatch_retain(v9);
              dispatch_group_enter(v9);
            }
            *(_OWORD *)__p = 0u;
            v142 = 0u;
            qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
            *qmi::MutableMessageBase::getTLV<wds::tlv::EnableFiltering>(__p) = a2;
            if (a2 && v120 != v121)
            {
              v143 = MEMORY[0x24BDAC760];
              v144 = 1174405120;
              v145 = (void (*)(uint64_t *, char *))___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionE_block_invoke_2;
              v146 = &__block_descriptor_tmp_25_1;
              v148 = 0;
              v149 = 0;
              v147 = 0;
              std::vector<wds::tlv::FilteringPortInfo1>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo1*,wds::tlv::FilteringPortInfo1*>(&v147, v120, (uint64_t)v121, ((_BYTE *)v121 - (_BYTE *)v120) >> 2);
              v39 = (const void **)__p[1];
              if (__p[1] != (void *)v142)
              {
                while (*((_BYTE *)*v39 + 8) != 16)
                {
                  if (++v39 == (const void **)v142)
                    goto LABEL_120;
                }
              }
              if (v39 == (const void **)v142)
              {
LABEL_120:
                v55 = operator new();
                v56 = v55;
                *(_BYTE *)(v55 + 8) = 16;
                *(_QWORD *)(v55 + 16) = 0;
                v46 = (char *)(v55 + 16);
                *(_QWORD *)v55 = &off_24D5D5870;
                *(_QWORD *)(v55 + 24) = 0;
                *(_QWORD *)(v55 + 32) = 0;
                v57 = v142;
                if ((unint64_t)v142 >= *((_QWORD *)&v142 + 1))
                {
                  v67 = (uint64_t)(v142 - (unint64_t)__p[1]) >> 3;
                  if ((unint64_t)(v67 + 1) >> 61)
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v68 = (uint64_t)(*((_QWORD *)&v142 + 1) - (unint64_t)__p[1]) >> 2;
                  if (v68 <= v67 + 1)
                    v68 = v67 + 1;
                  if (*((_QWORD *)&v142 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
                    v69 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v69 = v68;
                  if (v69)
                    v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v142 + 8, v69);
                  else
                    v70 = 0;
                  v105 = (uint64_t *)&v70[8 * v67];
                  v106 = &v70[8 * v69];
                  *v105 = v56;
                  v58 = v105 + 1;
                  v108 = (char *)__p[1];
                  v107 = (char *)v142;
                  if ((void *)v142 != __p[1])
                  {
                    do
                    {
                      v109 = *((_QWORD *)v107 - 1);
                      v107 -= 8;
                      *--v105 = v109;
                    }
                    while (v107 != v108);
                    v107 = (char *)__p[1];
                  }
                  __p[1] = v105;
                  *(_QWORD *)&v142 = v58;
                  *((_QWORD *)&v142 + 1) = v106;
                  if (v107)
                    operator delete(v107);
                }
                else
                {
                  *(_QWORD *)v142 = v55;
                  v58 = (_QWORD *)(v57 + 8);
                }
                *(_QWORD *)&v142 = v58;
              }
              else
              {
                if (!v45)
                  __cxa_bad_cast();
                v46 = v45 + 16;
              }
              v145(&v143, v46);
              if (v147)
              {
                v148 = v147;
                operator delete(v147);
              }
            }
            v110 = *(std::__shared_weak_count **)(a1 + 16);
            if (!v110
              || (v111 = *(_QWORD *)(a1 + 96),
                  v112 = *(void **)(a1 + 8),
                  (v113 = std::__shared_weak_count::lock(v110)) == 0))
            {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            v80 = v113;
            v114 = (unint64_t *)&v113->__shared_weak_owners_;
            do
              v115 = __ldxr(v114);
            while (__stxr(v115 + 1, v114));
            v116 = (unint64_t *)&v113->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v80);
            }
            v118 = MEMORY[0x24BDAC760];
            v126 = MEMORY[0x24BDAC760];
            v127 = 1174405120;
            v128 = ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionE_block_invoke_26;
            v129 = &__block_descriptor_tmp_27_7;
            v130 = a1;
            group = v9;
            if (v9)
            {
              dispatch_retain(v9);
              dispatch_group_enter(v9);
            }
            v132 = a2;
            if (!*(_BYTE *)(v111 + 72) || !*(_QWORD *)(v111 + 56))
              __TUAssertTrigger();
            v150 = v111 + 40;
            v151 = QMIServiceMsg::create();
            v152 = 25000;
            v153 = 0;
            v154 = 0;
            *(_QWORD *)buf = v118;
            v134 = 1174405120;
            v135 = (void (*)(uint8_t *, char *))___ZN16QMIVirtualClient4sendIN3wds25FilterUnsolicitedPackets17RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
            v136 = &unk_24D5D58A0;
            v138 = v112;
            v139 = v80;
            do
              v119 = __ldxr(v114);
            while (__stxr(v119 + 1, v114));
            v137 = &v126;
            aBlock = v118;
            v156 = 0x40000000;
            v157 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
            v158 = &unk_24D5D5578;
            v159 = buf;
            v87 = _Block_copy(&aBlock);
            v154 = v87;
            if (v151)
            {
              qmi::Client::send();
              v87 = v154;
            }
            if (!v87)
              goto LABEL_241;
            goto LABEL_240;
          }
          v24 = 0;
          if (v27)
            goto LABEL_54;
        }
      }
    }
  }
}

void sub_216991C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,dispatch_group_t group,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,std::__shared_weak_count *a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,std::__shared_weak_count *a44)
{
  NSObject *v44;

  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  if (v44)
  {
    dispatch_group_leave(v44);
    dispatch_release(v44);
  }
  if (a9)
    operator delete(a9);
  if (a13)
    operator delete(a13);
  if (v44)
  {
    dispatch_group_leave(v44);
    dispatch_release(v44);
  }
  _Unwind_Resume(a1);
}

void dormancy::QMIDormancyCommandDriver::getLLFilters_sync(dormancy::QMIDormancyCommandDriver *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *i;
  unint64_t v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2;
      if (v4 <= a2)
        v6 = a2 % v4;
    }
    else
    {
      v6 = (v4 - 1) & a2;
    }
    v7 = *(uint64_t ***)(*((_QWORD *)this + 14) + 8 * v6);
    if (v7)
    {
      for (i = *v7; i; i = (uint64_t *)*i)
      {
        v9 = i[1];
        if (v9 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            v10 = i[3];
            for (j = i[4]; v10 != j; v10 += 16)
            {
              v12 = 0;
              v13 = 0;
              v14 = 0;
              (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v10 + 96))(&v12);
              std::vector<DataIPFilter>::__insert_with_size[abi:ne180100]<std::__wrap_iter<DataIPFilter*>,std::__wrap_iter<DataIPFilter*>>(a3, a3[1], v12, v13, 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 5));
              v15 = (void **)&v12;
              std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](&v15);
            }
            return;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4)
              v9 %= v4;
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6)
            return;
        }
      }
    }
  }
}

void sub_216991F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void dormancy::QMIDormancyCommandDriver::addLLFilter_sync(dormancy::QMIDormancyCommandDriver *a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::find<int>((_QWORD *)a1 + 14, a2);
  if (!v7)
  {
    LOBYTE(v21[0]) = 0;
    v18 = a4[3];
    if (!v18)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 48))(v18, v21);
    return;
  }
  v8 = (uint64_t *)v7[3];
  v9 = (uint64_t *)v7[4];
  if (v8 == v9)
    goto LABEL_20;
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = *v8;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)a4);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v11 + 80))(v11, a3, v19);
      v13 = v20;
      if (v20 == v19)
      {
        v13 = v19;
        v14 = 4;
      }
      else
      {
        if (!v20)
          goto LABEL_9;
        v14 = 5;
      }
      (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_9:
      if (!v12)
        break;
      v21[0] = &off_24D5D59F0;
      v22 = v21;
      std::__function::__value_func<void ()(BOOL)>::swap[abi:ne180100](v21, a4);
      v15 = v22;
      if (v22 == v21)
      {
        v15 = v21;
        v16 = 4;
        goto LABEL_16;
      }
      if (v22)
      {
        v16 = 5;
LABEL_16:
        (*(void (**)(void))(*v15 + 8 * v16))();
      }
      v8 += 2;
      v10 = 1;
      if (v8 == v9)
        goto LABEL_22;
    }
    v8 += 2;
  }
  while (v8 != v9);
  if ((v10 & 1) == 0)
  {
LABEL_20:
    LOBYTE(v21[0]) = 0;
    v17 = a4[3];
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 48))(v17, v21);
  }
LABEL_22:
  dormancy::QMIDormancyCommandDriver::updateLLFiltersInstalledStatus(a1);
}

void sub_216992108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void dormancy::QMIDormancyCommandDriver::updateLLFiltersInstalledStatus(dormancy::QMIDormancyCommandDriver *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  void **v33;
  unint64_t v34;
  void *v35;
  _QWORD v36[5];
  char v37;
  void *__p[2];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  void (*v45)(_QWORD *);
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  void *v54;
  void **aBlock[5];

  v2 = (_QWORD *)*((_QWORD *)this + 16);
  v41 = 0;
  v42 = 0;
  v40 = 0;
  if (v2)
  {
    do
    {
      v3 = v2[3];
      v4 = v2[4];
      while (v3 != v4)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        (*(void (**)(void ***__return_ptr))(**(_QWORD **)v3 + 96))(&v43);
        std::vector<DataIPFilter>::__insert_with_size[abi:ne180100]<std::__wrap_iter<DataIPFilter*>,std::__wrap_iter<DataIPFilter*>>(&v40, v41, (uint64_t)v43, v44, 0xCCCCCCCCCCCCCCCDLL * ((v44 - (uint64_t)v43) >> 5));
        aBlock[0] = (void **)&v43;
        std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](aBlock);
        v3 += 16;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
    v5 = v40;
    v6 = v41;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v5 != v6;
  if (!*((_BYTE *)this + 169) || *((unsigned __int8 *)this + 168) != v7)
  {
    *((_WORD *)this + 84) = (v5 != v6) | 0x100;
    *(_OWORD *)__p = 0u;
    v39 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v8 = (const void **)__p[1];
    if (__p[1] != (void *)v39)
    {
      while (*((_BYTE *)*v8 + 8) != 16)
      {
        if (++v8 == (const void **)v39)
          goto LABEL_17;
      }
    }
    if (v8 == (const void **)v39)
    {
LABEL_17:
      v11 = operator new();
      v12 = v11;
      *(_WORD *)(v11 + 8) = 16;
      *(_QWORD *)v11 = &off_24D5D5A88;
      v13 = v39;
      if ((unint64_t)v39 >= *((_QWORD *)&v39 + 1))
      {
        v15 = (uint64_t)(v39 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = (uint64_t)(*((_QWORD *)&v39 + 1) - (unint64_t)__p[1]) >> 2;
        if (v16 <= v15 + 1)
          v16 = v15 + 1;
        if (*((_QWORD *)&v39 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v39 + 8, v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v15];
        v20 = &v18[8 * v17];
        *v19 = v12;
        v14 = v19 + 1;
        v22 = (char *)__p[1];
        v21 = (char *)v39;
        if ((void *)v39 != __p[1])
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v19 = v23;
          }
          while (v21 != v22);
          v21 = (char *)__p[1];
        }
        __p[1] = v19;
        *(_QWORD *)&v39 = v14;
        *((_QWORD *)&v39 + 1) = v20;
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_QWORD *)v39 = v11;
        v14 = (_QWORD *)(v13 + 8);
      }
      v10 = (_BYTE *)(v12 + 9);
      *(_QWORD *)&v39 = v14;
    }
    else
    {
      if (!v9)
        __cxa_bad_cast();
      v10 = v9 + 9;
    }
    *v10 = v7;
    v24 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v24
      || (v25 = *((_QWORD *)this + 12), v26 = *((_QWORD *)this + 1), (v27 = std::__shared_weak_count::lock(v24)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v28 = v27;
    p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
    do
      v30 = __ldxr(p_shared_weak_owners);
    while (__stxr(v30 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v28);
    }
    v33 = (void **)MEMORY[0x24BDAC760];
    v36[0] = MEMORY[0x24BDAC760];
    v36[1] = 0x40000000;
    v36[2] = ___ZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEv_block_invoke_2;
    v36[3] = &__block_descriptor_tmp_38_3;
    v36[4] = this;
    v37 = v7;
    if (!*(_BYTE *)(v25 + 72) || !*(_QWORD *)(v25 + 56))
      __TUAssertTrigger();
    v50 = v25 + 40;
    v51 = QMIServiceMsg::create();
    v52 = 25000;
    v53 = 0;
    v54 = 0;
    v43 = v33;
    v44 = 1174405120;
    v45 = ___ZN16QMIVirtualClient4sendIN3wds16DataActivityInfo7RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
    v46 = &unk_24D5D5AB8;
    v48 = v26;
    v49 = v28;
    do
      v34 = __ldxr(p_shared_weak_owners);
    while (__stxr(v34 + 1, p_shared_weak_owners));
    v47 = v36;
    aBlock[0] = v33;
    aBlock[1] = (void **)0x40000000;
    aBlock[2] = (void **)___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
    aBlock[3] = (void **)&unk_24D5D5578;
    aBlock[4] = (void **)&v43;
    v35 = _Block_copy(aBlock);
    v54 = v35;
    if (v51)
    {
      qmi::Client::send();
      v35 = v54;
    }
    if (v35)
      _Block_release(v35);
    if (v49)
      std::__shared_weak_count::__release_weak(v49);
    std::__shared_weak_count::__release_weak(v28);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  v43 = (void **)&v40;
  std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](&v43);
}

void sub_216992544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,char a29)
{
  std::__shared_weak_count *v29;

  if (a28)
    std::__shared_weak_count::__release_weak(a28);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a29);
  std::__shared_weak_count::__release_weak(v29);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  a15 = &a19;
  std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void dormancy::QMIDormancyCommandDriver::deleteLLFilter_sync(dormancy::QMIDormancyCommandDriver *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v7 = std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::find<int>((_QWORD *)a1 + 14, a2);
  if (v7)
  {
    v8 = (uint64_t *)v7[3];
    v9 = (uint64_t *)v7[4];
    while (1)
    {
      if (v8 == v9)
      {
        dormancy::QMIDormancyCommandDriver::updateLLFiltersInstalledStatus(a1);
        return;
      }
      v10 = *v8;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, a4);
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v10 + 88))(v10, a3, v13);
      v11 = v14;
      if (v14 == v13)
      {
        v11 = v13;
        v12 = 4;
      }
      else
      {
        if (!v14)
          goto LABEL_9;
        v12 = 5;
      }
      (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_9:
      v8 += 2;
    }
  }
}

void sub_2169926B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEv_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD **)(a1 + 32);
  v20 = *(_BYTE *)(a1 + 40);
  v3 = *a2;
  v4 = a2[1];
  v21[0] = *a2;
  v21[1] = v4;
  v5 = a2[2];
  v21[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)v2[2];
  if (!v8 || (v9 = v2[1], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = operator new();
  *(_QWORD *)v12 = v2;
  *(_BYTE *)(v12 + 8) = v20;
  *(_QWORD *)(v12 + 16) = v3;
  *(_QWORD *)(v12 + 24) = v4;
  *(_QWORD *)(v12 + 32) = v5;
  if (v5)
  {
    v13 = (unint64_t *)(v5 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v2[3];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = (_QWORD *)operator new();
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  v22 = 0;
  v23 = 0;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEvEUb5_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v23);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v21);
}

void dormancy::QMIDormancyCommandDriver::handleDumpState_sync(dormancy::QMIDormancyCommandDriver *this)
{
  NSObject *v2;
  _QWORD *i;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315138;
    v8 = asStringBool();
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA::     fIsLLFiltersInstalled: %s", (uint8_t *)&v7, 0xCu);
  }
  for (i = (_QWORD *)*((_QWORD *)this + 16); i; i = (_QWORD *)*i)
  {
    v4 = (uint64_t *)i[3];
    v5 = (uint64_t *)i[4];
    while (v4 != v5)
    {
      v6 = *v4;
      v4 += 2;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    }
  }
}

void std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<wds::tlv::FilteringPortInfo1>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo1*,wds::tlv::FilteringPortInfo1*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216992A1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<wds::tlv::FilteringPortInfo2>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAAABLL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[6 * v4];
  return result;
}

_QWORD *std::vector<wds::tlv::FilteringPortInfo2>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo2*,wds::tlv::FilteringPortInfo2*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<wds::tlv::FilteringPortInfo2>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216992AE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<wds::tlv::FilteringPortInfo3>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo3*,wds::tlv::FilteringPortInfo3*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<wds::tlv::FilteringPortInfo2>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216992B5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<DataIPFilter>::__insert_with_size[abi:ne180100]<std::__wrap_iter<DataIPFilter*>,std::__wrap_iter<DataIPFilter*>>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  char *v44;
  _QWORD *v45;
  _QWORD v46[4];
  uint64_t v47;
  uint64_t v48;

  if (a5 >= 1)
  {
    v6 = a3;
    v7 = result;
    v8 = *result;
    v9 = (a2 - *result) / 160;
    v10 = *result + 160 * v9;
    v12 = (uint64_t)(result + 2);
    v11 = result[2];
    v13 = result[1];
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v13) >> 5)) >= a5)
    {
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - v10) >> 5)) >= a5)
      {
        v40 = (a2 - *result) / 160;
        v41 = a3 + 160 * a5;
        v19 = (uint64_t *)result[1];
      }
      else
      {
        v18 = a3 + 32 * ((uint64_t)(v13 - v10) >> 5);
        result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DataIPFilter>,DataIPFilter*,DataIPFilter*,DataIPFilter*>((uint64_t)(result + 2), v18, a4, v13);
        v19 = result;
        v7[1] = (uint64_t)result;
        if ((uint64_t)(v13 - v10) < 1)
          return result;
        v40 = v9;
        v41 = v18;
      }
      v20 = v10 + 160 * a5;
      v21 = (unint64_t)&v19[-20 * a5];
      v22 = (uint64_t)v19;
      if (v21 < v13)
      {
        v23 = v21;
        v22 = (uint64_t)v19;
        do
        {
          std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter,DataIPFilter*>(v22, v23);
          v23 += 160;
          v22 += 160;
        }
        while (v23 < v13);
      }
      v7[1] = v22;
      if (v19 != (uint64_t *)v20)
      {
        v24 = 0;
        v25 = v8 + 32 * (((uint64_t)v19 - v20) >> 5) + 160 * v40;
        do
        {
          v26 = &v19[v24];
          v27 = *(_OWORD *)(v25 + v24 * 8 - 144);
          *((_OWORD *)v26 - 10) = *(_OWORD *)(v25 + v24 * 8 - 160);
          *((_OWORD *)v26 - 9) = v27;
          std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>((uint64_t)&v19[v24 - 16], (__n128 *)(v21 + v24 * 8 - 128));
          std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>((uint64_t)&v19[v24 - 9], (__n128 *)(v21 + v24 * 8 - 72));
          v28 = &v19[v24];
          v29 = *(_QWORD *)(v25 + v24 * 8 - 16);
          *(uint64_t *)((char *)v28 - 10) = *(_QWORD *)(v25 + v24 * 8 - 10);
          *(v28 - 2) = v29;
          v24 -= 20;
        }
        while (-4 * (((uint64_t)v19 - v20) >> 5) != v24);
      }
      return (uint64_t *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DataIPFilter *,DataIPFilter *,DataIPFilter *>((uint64_t)&v42, v6, v41, v10);
    }
    else
    {
      v14 = a5 - 0x3333333333333333 * ((uint64_t)(v13 - v8) >> 5);
      if (v14 > 0x199999999999999)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v8) >> 5);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0xCCCCCCCCCCCCCCLL)
        v16 = 0x199999999999999;
      else
        v16 = v14;
      v45 = result + 2;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataIPFilter>>((uint64_t)(result + 2), v16);
      else
        v17 = 0;
      v30 = (uint64_t)&v17[160 * v9];
      v42 = v17;
      *(_QWORD *)&v43 = v30;
      *((_QWORD *)&v43 + 1) = v30;
      v44 = &v17[160 * v16];
      v31 = 5 * a5;
      v32 = v30 + 160 * a5;
      v33 = 32 * v31;
      do
      {
        std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter&,DataIPFilter*>(v30, v6);
        v30 += 160;
        v6 += 160;
        v33 -= 160;
      }
      while (v33);
      *((_QWORD *)&v43 + 1) = v32;
      std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>,std::reverse_iterator<DataIPFilter*>,std::reverse_iterator<DataIPFilter*>>(v12, v10, v10, *v7, *v7, v43, v43);
      *(_QWORD *)&v43 = v34;
      v35 = v7[1];
      v36 = v32;
      v48 = v32;
      v46[0] = v12;
      v46[1] = &v47;
      v46[3] = 1;
      v47 = v32;
      for (v46[2] = &v48; v10 != v35; v48 += 160)
      {
        std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter,DataIPFilter*>(v36, v10);
        v10 += 160;
        v36 = v48 + 160;
      }
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v46);
      v37 = *(_OWORD *)v7;
      v38 = (uint64_t)v44;
      *v7 = v43;
      v7[1] = v36;
      v43 = v37;
      v39 = v7[2];
      v7[2] = v38;
      v44 = (char *)v39;
      v42 = (char *)v37;
      return (uint64_t *)std::__split_buffer<DataIPFilter>::~__split_buffer((uint64_t)&v42);
    }
  }
  return result;
}

void sub_216992EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v14 + 8) = v15;
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DataIPFilter>,DataIPFilter*,DataIPFilter*,DataIPFilter*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter&,DataIPFilter*>(v4, v6);
      v6 += 160;
      v4 = v11 + 160;
      v11 += 160;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_216992F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter&,DataIPFilter*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 32), a2 + 32);
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 88), a2 + 88);
  v5 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 150) = *(_QWORD *)(a2 + 150);
  *(_QWORD *)(a1 + 144) = v5;
  return a1;
}

void sub_216992FD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  std::string::size_type v4;

  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[2].__r_.__value_.__s.__data_[0] = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](a1, (__int128 *)a2);
    v4 = *(_QWORD *)(a2 + 32);
    a1[1].__r_.__value_.__s.__data_[16] = *(_BYTE *)(a2 + 40);
    a1[1].__r_.__value_.__l.__size_ = v4;
    a1[2].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void sub_21699303C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48) && *(_BYTE *)(a1 + 24) && *(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t i;

  v2 = *(uint64_t **)(result + 8);
  v1 = *(uint64_t **)(result + 16);
  v3 = *v1;
  for (i = *v2; v3 != i; v3 -= 160)
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v3 - 72);
    result = std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v3 - 128);
  }
  return result;
}

uint64_t std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter,DataIPFilter*>(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v2;
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    *(_BYTE *)(result + 56) = 0;
    if (*(_BYTE *)(a2 + 56))
    {
      v3 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(result + 32) = v3;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_BYTE *)(result + 56) = 1;
    }
    v4 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(result + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(result + 64) = v4;
    *(_BYTE *)(result + 80) = 1;
  }
  *(_BYTE *)(result + 88) = 0;
  *(_BYTE *)(result + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    *(_BYTE *)(result + 112) = 0;
    if (*(_BYTE *)(a2 + 112))
    {
      v5 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(result + 88) = v5;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_BYTE *)(result + 112) = 1;
    }
    v6 = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(result + 128) = *(_BYTE *)(a2 + 128);
    *(_QWORD *)(result + 120) = v6;
    *(_BYTE *)(result + 136) = 1;
  }
  v7 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(result + 150) = *(_QWORD *)(a2 + 150);
  *(_QWORD *)(result + 144) = v7;
  return result;
}

void std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  __n128 v5;
  unint64_t v6;

  if (*(unsigned __int8 *)(a1 + 48) == a2[3].n128_u8[0])
  {
    if (*(_BYTE *)(a1 + 48))
    {
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1, a2);
      v4 = a2[2].n128_u64[0];
      *(_BYTE *)(a1 + 40) = a2[2].n128_u8[8];
      *(_QWORD *)(a1 + 32) = v4;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    if (a2[1].n128_u8[8])
    {
      v5 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = v5;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      a2->n128_u64[0] = 0;
      *(_BYTE *)(a1 + 24) = 1;
    }
    v6 = a2[2].n128_u64[0];
    *(_BYTE *)(a1 + 40) = a2[2].n128_u8[8];
    *(_QWORD *)(a1 + 32) = v6;
    *(_BYTE *)(a1 + 48) = 1;
  }
}

void std::__optional_destruct_base<DataIPFilterEndpoint,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
    }
    *(_BYTE *)(a1 + 48) = 0;
  }
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DataIPFilter *,DataIPFilter *,DataIPFilter *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)(a4 + 32), (std::string *)(v5 + 32));
    std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)(a4 + 88), (std::string *)(v5 + 88));
    v8 = *(_QWORD *)(v5 + 144);
    *(_QWORD *)(a4 + 150) = *(_QWORD *)(v5 + 150);
    *(_QWORD *)(a4 + 144) = v8;
    a4 += 160;
    v5 += 160;
  }
  while (v5 != v6);
  return v6;
}

void std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>(std::string *this, std::string *a2)
{
  std::string::size_type size;
  std::string::size_type v5;

  if (this[2].__r_.__value_.__s.__data_[0] == a2[2].__r_.__value_.__s.__data_[0])
  {
    if (this[2].__r_.__value_.__s.__data_[0])
    {
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(this, a2);
      size = a2[1].__r_.__value_.__l.__size_;
      this[1].__r_.__value_.__s.__data_[16] = a2[1].__r_.__value_.__s.__data_[16];
      this[1].__r_.__value_.__l.__size_ = size;
    }
  }
  else if (this[2].__r_.__value_.__s.__data_[0])
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::reset[abi:ne180100]((uint64_t)this);
  }
  else
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this, (__int128 *)a2);
    v5 = a2[1].__r_.__value_.__l.__size_;
    this[1].__r_.__value_.__s.__data_[16] = a2[1].__r_.__value_.__s.__data_[16];
    this[1].__r_.__value_.__l.__size_ = v5;
    this[2].__r_.__value_.__s.__data_[0] = 1;
  }
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
      std::string::operator=(this, a2);
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DataIPFilter>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(160 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>,std::reverse_iterator<DataIPFilter*>,std::reverse_iterator<DataIPFilter*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 160;
      std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter,DataIPFilter*>(v7 - 160, v9);
      v7 = *((_QWORD *)&v15 + 1) - 160;
      *((_QWORD *)&v15 + 1) -= 160;
    }
    while (v9 != a5);
    v10 = v15;
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1 + 88);
    result = std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1 + 32);
    v1 += 160;
  }
  return result;
}

uint64_t std::__split_buffer<DataIPFilter>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<DataIPFilter>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<DataIPFilter>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 160;
      std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v2 - 72);
      result = std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v2 - 128);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<DataIPFilter>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<DataIPFilter>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 160)
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](i - 72);
    result = std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](i - 128);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t *std::shared_ptr<dormancy::QMIDormancyCommandDriver>::shared_ptr[abi:ne180100]<dormancy::QMIDormancyCommandDriver,std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D5430;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_216993808(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver*)#1}::operator() const(dormancy::QMIDormancyCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_216993828(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<dormancy::QMIDormancyCommandDriver *,std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver *)#1},std::allocator<dormancy::QMIDormancyCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<dormancy::QMIDormancyCommandDriver *,std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver *)#1},std::allocator<dormancy::QMIDormancyCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver*)#1}::operator() const(dormancy::QMIDormancyCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<dormancy::QMIDormancyCommandDriver *,std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver *)#1},std::allocator<dormancy::QMIDormancyCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<dormancy::QMIDormancyCommandDriver> ctu::SharedSynchronizable<DormancyCommandDriver>::make_shared_ptr<dormancy::QMIDormancyCommandDriver>(dormancy::QMIDormancyCommandDriver*)::{lambda(dormancy::QMIDormancyCommandDriver*)#1}::operator() const(dormancy::QMIDormancyCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 24);
      std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void dormancy::QMIDormancyCommandDriver::handlePdpStateChanged_sync(std::map<subscriber::SimSlot,std::map<int,std::map<DataContextType,BOOL>>> const&,std::map<subscriber::SimSlot,std::map<int,std::map<DataContextType,BOOL>>> const&)::$_0::operator()<subscriber::SimSlot,std::map<int,std::map<DataContextType,BOOL>>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  NSObject *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  NSObject *v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  void **v22;
  _QWORD *v23;
  unint64_t v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)*a3;
  v38 = a3 + 1;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v40 = (uint64_t *)(a1 + 112);
    v39 = (_QWORD *)(a1 + 128);
    while (1)
    {
      v6 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = subscriber::asString();
        v8 = *((_DWORD *)v3 + 8);
        *(_DWORD *)buf = 136315394;
        v42 = v7;
        v43 = 1024;
        LODWORD(v44) = v8;
        _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I handlePdpStateChanged_sync simSlot = %s, pdpId %d", buf, 0x12u);
      }
      v9 = (_QWORD *)v3[5];
      if (v9 != v3 + 6)
        break;
LABEL_59:
      v36 = (_QWORD *)v3[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v3[2];
          v15 = *v37 == (_QWORD)v3;
          v3 = v37;
        }
        while (!v15);
      }
      v3 = v37;
      if (v37 == v38)
        return;
    }
    while (1)
    {
      v10 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = asString();
        v12 = asStringBool();
        *(_DWORD *)buf = 136315394;
        v42 = v11;
        v43 = 2080;
        v44 = v12;
        _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#I handlePdpStateChanged_sync context %s active %s", buf, 0x16u);
      }
      if (!*((_DWORD *)v9 + 7))
        break;
LABEL_9:
      v13 = (_QWORD *)v9[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v9[2];
          v15 = *v14 == (_QWORD)v9;
          v9 = v14;
        }
        while (!v15);
      }
      v9 = v14;
      if (v14 == v3 + 6)
        goto LABEL_59;
    }
    v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *((unsigned __int8 *)v9 + 32);
      *(_DWORD *)buf = 67109120;
      LODWORD(v42) = v17;
      _os_log_impl(&dword_216897000, v16, OS_LOG_TYPE_DEFAULT, "#I handlePdpStateChanged_sync state = %d", buf, 8u);
    }
    v18 = *((int *)v3 + 8);
    v19 = *(_QWORD *)(a1 + 120);
    if (v19)
    {
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        v21 = *((int *)v3 + 8);
        if (v19 <= v18)
          v21 = v18 % v19;
      }
      else
      {
        v21 = (v19 - 1) & v18;
      }
      v22 = *(void ***)(*v40 + 8 * v21);
      if (v22)
      {
        v23 = *v22;
        if (*v22)
        {
          do
          {
            v24 = v23[1];
            if (v24 == v18)
            {
              if (*((_DWORD *)v23 + 4) == (_DWORD)v18)
                goto LABEL_56;
            }
            else
            {
              if (v20.u32[0] > 1uLL)
              {
                if (v24 >= v19)
                  v24 %= v19;
              }
              else
              {
                v24 &= v19 - 1;
              }
              if (v24 != v21)
                break;
            }
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
      }
    }
    else
    {
      v21 = 0;
    }
    v23 = operator new(0x30uLL);
    *v23 = 0;
    v23[1] = v18;
    *((_DWORD *)v23 + 4) = *((_DWORD *)v3 + 8);
    v23[3] = 0;
    v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 136) + 1);
    v23[4] = 0;
    v23[5] = 0;
    v26 = *(float *)(a1 + 144);
    if ((((float)(v26 * (float)v19) >= v25) & ~(v19 == 0)) == 0)
    {
      v27 = (v19 & (v19 - 1)) != 0;
      if (v19 < 3)
        v27 = 1;
      v28 = v27 | (2 * v19);
      v29 = vcvtps_u32_f32(v25 / v26);
      if (v28 <= v29)
        v30 = v29;
      else
        v30 = v28;
      std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::__rehash<true>((uint64_t)v40, v30);
      v19 = *(_QWORD *)(a1 + 120);
      if ((v19 & (v19 - 1)) != 0)
      {
        if (v19 <= v18)
          v21 = v18 % v19;
        else
          v21 = v18;
      }
      else
      {
        v21 = (v19 - 1) & v18;
      }
    }
    v31 = *v40;
    v32 = *(_QWORD **)(*v40 + 8 * v21);
    if (v32)
    {
      *v23 = *v32;
    }
    else
    {
      *v23 = *v39;
      *v39 = v23;
      *(_QWORD *)(v31 + 8 * v21) = v39;
      if (!*v23)
        goto LABEL_55;
      v33 = *(_QWORD *)(*v23 + 8);
      if ((v19 & (v19 - 1)) != 0)
      {
        if (v33 >= v19)
          v33 %= v19;
      }
      else
      {
        v33 &= v19 - 1;
      }
      v32 = (_QWORD *)(*v40 + 8 * v33);
    }
    *v32 = v23;
LABEL_55:
    ++*(_QWORD *)(a1 + 136);
LABEL_56:
    v34 = (_QWORD *)v23[3];
    v35 = (_QWORD *)v23[4];
    while (v34 != v35)
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v34 + 32))(*v34, a2, *((unsigned __int8 *)v9 + 32));
      v34 += 2;
    }
    goto LABEL_9;
  }
}

void sub_216993FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN3wds11EventReport10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a2[2];
  v7[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
  (*(void (**)(uint64_t, _QWORD *))(v2 + 16))(v2, v7);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_216994044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<DormancyCommandDriver>::execute_wrapped<dormancy::QMIDormancyCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(dormancy::QMIDormancyCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<dormancy::QMIDormancyCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<dormancy::QMIDormancyCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(dormancy::QMIDormancyCommandDriver ***a1)
{
  dormancy::QMIDormancyCommandDriver **v1;
  dormancy::QMIDormancyCommandDriver *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  dormancy::QMIDormancyCommandDriver ***v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t *);
  void *v38;
  dormancy::QMIDormancyCommandDriver *v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[8];
  uint64_t v43;
  void (*v44)(_QWORD *, _QWORD *);
  void *v45;
  uint64_t *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  void *v53;
  uint64_t aBlock;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  void *v57;
  uint8_t *v58;

  v34 = a1;
  v1 = *a1;
  v2 = **a1;
  v3 = (std::__shared_weak_count *)*((_QWORD *)v2 + 10);
  if (!v3)
    goto LABEL_53;
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4)
    goto LABEL_53;
  v5 = v4;
  v6 = *((_QWORD *)v2 + 9);
  if (v6)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v6 + 80))(*((_QWORD *)v2 + 9)))
    {
      v7 = *((_QWORD *)v2 + 5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I BindDataPort(0)", buf, 2u);
      }
      v40 = 0u;
      v41 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v40);
      *(_WORD *)qmi::MutableMessageBase::getTLV<wds::tlv::DataPort>(&v40, 1) = 0;
      v8 = (std::__shared_weak_count *)*((_QWORD *)v2 + 2);
      if (!v8
        || (v9 = *((_QWORD *)v2 + 12), v10 = *((_QWORD *)v2 + 1), (v11 = std::__shared_weak_count::lock(v8)) == 0))
      {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      v12 = v11;
      p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
      v17 = MEMORY[0x24BDAC760];
      v35 = MEMORY[0x24BDAC760];
      v36 = 0x40000000;
      v37 = ___ZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEv_block_invoke_2;
      v38 = &__block_descriptor_tmp_47_3;
      v39 = v2;
      if (!*(_BYTE *)(v9 + 72) || !*(_QWORD *)(v9 + 56))
        __TUAssertTrigger();
      v49 = v9 + 40;
      v50 = QMIServiceMsg::create();
      v51 = 25000;
      v52 = 0;
      v53 = 0;
      *(_QWORD *)buf = v17;
      v43 = 1174405120;
      v44 = ___ZN16QMIVirtualClient4sendIN3wds12BindDataPort7RequestE21DormancyCommandDriverU13block_pointerFvRKNS2_8ResponseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke;
      v45 = &unk_24D5D5540;
      v47 = v10;
      v48 = v12;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
      v46 = &v35;
      aBlock = v17;
      v55 = 0x40000000;
      v56 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
      v57 = &unk_24D5D5578;
      v58 = buf;
      v19 = _Block_copy(&aBlock);
      v53 = v19;
      if (v50)
      {
        qmi::Client::send();
        v19 = v53;
      }
      if (!v19)
        goto LABEL_44;
    }
    else
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6))
      {
        dormancy::QMIDormancyCommandDriver::registerDormancyReports_sync(v2);
LABEL_48:
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        goto LABEL_49;
      }
      v20 = *((_QWORD *)v2 + 5);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v20, OS_LOG_TYPE_DEFAULT, "#I BindMuxDataPort(1)", buf, 2u);
      }
      v40 = 0u;
      v41 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v40);
      *(_BYTE *)qmi::MutableMessageBase::getTLV<wds::tlv::MuxId>(&v40, 17) = 1;
      v21 = (std::__shared_weak_count *)*((_QWORD *)v2 + 2);
      if (!v21
        || (v22 = *((_QWORD *)v2 + 12), v23 = *((_QWORD *)v2 + 1), (v24 = std::__shared_weak_count::lock(v21)) == 0))
      {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      v12 = v24;
      v25 = (unint64_t *)&v24->__shared_weak_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v12);
      }
      v29 = MEMORY[0x24BDAC760];
      v35 = MEMORY[0x24BDAC760];
      v36 = 0x40000000;
      v37 = ___ZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEv_block_invoke_2_52;
      v38 = &__block_descriptor_tmp_53_2;
      v39 = v2;
      if (!*(_BYTE *)(v22 + 72) || !*(_QWORD *)(v22 + 56))
        __TUAssertTrigger();
      v49 = v22 + 40;
      v50 = QMIServiceMsg::create();
      v51 = 25000;
      v52 = 0;
      v53 = 0;
      *(_QWORD *)buf = v29;
      v43 = 1174405120;
      v44 = ___ZN16QMIVirtualClient4sendIN3wds15BindMuxDataPort7RequestE21DormancyCommandDriverU13block_pointerFvRKNS2_8ResponseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke;
      v45 = &unk_24D5D55F0;
      v47 = v23;
      v48 = v12;
      do
        v30 = __ldxr(v25);
      while (__stxr(v30 + 1, v25));
      v46 = &v35;
      aBlock = v29;
      v55 = 0x40000000;
      v56 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
      v57 = &unk_24D5D5578;
      v58 = buf;
      v19 = _Block_copy(&aBlock);
      v53 = v19;
      if (v50)
      {
        qmi::Client::send();
        v19 = v53;
      }
      if (!v19)
      {
LABEL_44:
        if (v48)
          std::__shared_weak_count::__release_weak(v48);
        std::__shared_weak_count::__release_weak(v12);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v40);
        goto LABEL_48;
      }
    }
    _Block_release(v19);
    goto LABEL_44;
  }
LABEL_49:
  v31 = (unint64_t *)&v5->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_53:
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v34);
}

void sub_21699450C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,char a27)
{
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v32;

  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  std::__shared_weak_count::__release_weak(v29);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  MEMORY[0x2199FEAC4](v27, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___ZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEv_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v20[0] = *a2;
  v5 = a2[2];
  v20[1] = v4;
  v20[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)v2[2];
  if (!v8 || (v9 = v2[1], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = (_QWORD *)operator new();
  *v12 = v2;
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  if (v5)
  {
    v13 = (unint64_t *)(v5 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v2[3];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = (_QWORD *)operator new();
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISE_NS8_14default_deleteISE_EEEEENUlPvE_8__invokeESN_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v20);
}

void ___ZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEv_block_invoke_2_52(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v4 = a2[1];
  v20[0] = *a2;
  v5 = a2[2];
  v20[1] = v4;
  v20[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)v2[2];
  if (!v8 || (v9 = v2[1], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = (_QWORD *)operator new();
  *v12 = v2;
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  if (v5)
  {
    v13 = (unint64_t *)(v5 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v2[3];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = (_QWORD *)operator new();
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  v21 = 0;
  v22 = 0;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISE_NS8_14default_deleteISE_EEEEENUlPvE_8__invokeESN_);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v22);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v20);
}

uint64_t qmi::MutableMessageBase::getTLV<wds::tlv::DataPort>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<wds::tlv::DataPort>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<wds::tlv::DataPort>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 10;
}

uint64_t qmi::MutableMessageBase::createTLV<wds::tlv::DataPort>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_WORD *)(v4 + 10) = 0;
  *(_QWORD *)v4 = &off_24D5D5510;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 10;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::DataPort>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::DataPort>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::DataPort>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  _WORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::DataPort>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D5510;
  *(_WORD *)(result + 10) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN16QMIVirtualClient4sendIN3wds12BindDataPort7RequestE21DormancyCommandDriverU13block_pointerFvRKNS2_8ResponseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[3];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v16 = v5;
    if (v5)
    {
      v6 = v5;
      if (a1[5])
      {
        v7 = a1[4];
        v8 = a2[1];
        v14[0] = *a2;
        v14[1] = v8;
        v9 = a2[2];
        v14[2] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
        (*(void (**)(uint64_t, _QWORD *))(v7 + 16))(v7, v14);
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v14);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_216994BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISE_NS8_14default_deleteISE_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v1;
  dormancy::QMIDormancyCommandDriver *v2;
  int v3;
  NSObject *v4;
  uint64_t *v6;
  uint64_t v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v6 = a1;
  v7 = v1;
  v2 = *(dormancy::QMIDormancyCommandDriver **)v1;
  v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    v4 = *((_QWORD *)v2 + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v9 = v3;
      v10 = 2080;
      v11 = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I BindDataPort(0), Error code = 0x%x (%s)", buf, 0x12u);
    }
  }
  dormancy::QMIDormancyCommandDriver::registerDormancyReports_sync(v2);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v7);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v6);
}

void sub_216994CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::getTLV<wds::tlv::MuxId>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<wds::tlv::MuxId>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<wds::tlv::MuxId>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<wds::tlv::MuxId>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_24D5D55C0;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::MuxId>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::MuxId>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::MuxId>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::MuxId>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D55C0;
  return result;
}

void ___ZN16QMIVirtualClient4sendIN3wds15BindMuxDataPort7RequestE21DormancyCommandDriverU13block_pointerFvRKNS2_8ResponseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[3];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v16 = v5;
    if (v5)
    {
      v6 = v5;
      if (a1[5])
      {
        v7 = a1[4];
        v8 = a2[1];
        v14[0] = *a2;
        v14[1] = v8;
        v9 = a2[2];
        v14[2] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
        (*(void (**)(uint64_t, _QWORD *))(v7 + 16))(v7, v14);
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v14);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_216994FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZZN8dormancy24QMIDormancyCommandDriver10registeredENSt3__110shared_ptrI16QMIVirtualClientEEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISE_NS8_14default_deleteISE_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v1;
  dormancy::QMIDormancyCommandDriver *v2;
  int v3;
  NSObject *v4;
  uint64_t *v6;
  uint64_t v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v6 = a1;
  v7 = v1;
  v2 = *(dormancy::QMIDormancyCommandDriver **)v1;
  v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    v4 = *((_QWORD *)v2 + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v9 = v3;
      v10 = 2080;
      v11 = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I BindMuxDataPort(1), Error code = 0x%x (%s)", buf, 0x12u);
    }
  }
  dormancy::QMIDormancyCommandDriver::registerDormancyReports_sync(v2);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v7);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v6);
}

void sub_2169950EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<DormancyCommandDriver>::execute_wrapped<dormancy::QMIDormancyCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(dormancy::QMIDormancyCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<dormancy::QMIDormancyCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<dormancy::QMIDormancyCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t **v10;

  v10 = a1;
  v1 = *a1;
  v2 = **a1;
  v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(v2 + 72);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_2169951B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver28registerDormancyReports_syncEvEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_DWORD **a1)
{
  _DWORD *v1;
  int v2;
  NSObject *v3;
  _DWORD **v5;
  _DWORD *v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v5 = a1;
  v6 = v1;
  v2 = v1[3];
  if (v2)
  {
    v3 = *(NSObject **)(*(_QWORD *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v8 = v2;
      v9 = 2080;
      v10 = qmi::asString();
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Failed to register for dormancy status reports with error=0x%04x (%s)", buf, 0x12u);
    }
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v6);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
}

void sub_2169952DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient4sendIN3wds14SetEventReport7RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[5])
        (*(void (**)(void))(a1[4] + 16))();
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_21699539C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SignalingConnRelInd>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SignalingConnRelInd>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::SignalingConnRelInd>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SignalingConnRelInd>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D5680;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LowPowerMode>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::LowPowerMode>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::LowPowerMode>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::LowPowerMode>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D56D0;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::R8Only>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::R8Only>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::R8Only>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::R8Only>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D5720;
  return result;
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS6_5Model7RequestEEEPKcNS_13group_sessionEEUb0_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISH_NS8_14default_deleteISH_EEEEENUlPvE_8__invokeESQ_(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  int v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v17 = a1;
  v18 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 12);
  v4 = *(NSObject **)(*(_QWORD *)v1 + 40);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      v6 = *(_QWORD *)(v1 + 32);
      *(_DWORD *)buf = 136315650;
      v20 = v6;
      v21 = 1024;
      v22 = v3;
      v23 = 2080;
      v24 = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Baseband failed to go into fast dormancy due to %s: 0x%x (%s)", buf, 0x1Cu);
    }
    v7 = *(std::__shared_weak_count **)(v2 + 80);
    if (v7)
    {
      v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)(v2 + 72);
        if (v10)
        {
          v11 = *(_DWORD *)(v1 + 12);
          if (v11 == 513 || v11 == 25)
            (*(void (**)(_QWORD))(*(_QWORD *)v10 + 32))(*(_QWORD *)(v2 + 72));
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 56))(v10, 0, 0);
        }
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  else if (v5)
  {
    v15 = *(_QWORD *)(v1 + 32);
    *(_DWORD *)buf = 136315138;
    v20 = v15;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Baseband dormancy request sent successfully due to %s: OK", buf, 0xCu);
  }
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENS_10shared_ptrINS1_5Model7RequestEEEPKcN8dispatch13group_sessionEEUb0_E3__4NS_14default_deleteISB_EEED1B8ne180100Ev(&v18);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v17);
}

void sub_2169957A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENS_10shared_ptrINS1_5Model7RequestEEEPKcN8dispatch13group_sessionEEUb0_E3__4NS_14default_deleteISB_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENS_10shared_ptrINS1_5Model7RequestEEEPKcN8dispatch13group_sessionEEUb0_E3__4NS_14default_deleteISB_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)(v2 + 8));
    MEMORY[0x2199FEAC4](v2, 0x1070C40D7EBF016);
  }
  return a1;
}

void ___ZN16QMIVirtualClient4sendIN3wds10DormantReq7RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[5])
        (*(void (**)(void))(a1[4] + 16))();
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2169958E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<DormancyCommandDriver>::execute_wrapped<dormancy::QMIDormancyCommandDriver::handleEventReportInd(wds::EventReport::Indication const&)::$_0>(dormancy::QMIDormancyCommandDriver::handleEventReportInd(wds::EventReport::Indication const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<dormancy::QMIDormancyCommandDriver::handleEventReportInd(wds::EventReport::Indication const&)::$_0,dispatch_queue_s *::default_delete<dormancy::QMIDormancyCommandDriver::handleEventReportInd(wds::EventReport::Indication const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint8_t *v14;
  uint8_t buf[8];
  __int128 v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v12 = a1;
  v13 = v1;
  v2 = *(_QWORD **)v1;
  v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    v4 = v2[5];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v3;
      LOWORD(v16) = 2080;
      *(_QWORD *)((char *)&v16 + 2) = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I handleEventReportInd returned error=0x%04x (%s)", buf, 0x12u);
    }
    v5 = (std::__shared_weak_count *)v2[10];
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        v7 = v6;
        v8 = v2[9];
        if (v8)
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 56))(v8, 0, 0);
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
  else
  {
    *(_QWORD *)&v16 = 0x40000000;
    *((_QWORD *)&v16 + 1) = ___ZZN8dormancy24QMIDormancyCommandDriver20handleEventReportIndERKN3wds11EventReport10IndicationEENK3__0clEv_block_invoke;
    v17 = &__block_descriptor_tmp_60_2;
    v18 = v2;
    v14 = buf;
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    qmi::MessageBase::applyTlv<wds::tlv::DormancyStatus,void({block_pointer}&)(wds::tlv::DormancyStatus const&)>((qmi::MessageBase *)(v1 + 8), 24, (uint64_t)&v14);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v13);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v12);
}

void sub_216995A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)va1);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZZN8dormancy24QMIDormancyCommandDriver20handleEventReportIndERKN3wds11EventReport10IndicationEENK3__0clEv_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v12) = 136315138;
    *(_QWORD *)((char *)&v12 + 4) = asString();
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I EventReportInd, dormancy status: %s", (uint8_t *)&v12, 0xCu);
  }
  v5 = (std::__shared_weak_count *)v3[10];
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    *((_QWORD *)&v12 + 1) = v6;
    if (v6)
    {
      v7 = v6;
      v8 = v3[9];
      *(_QWORD *)&v12 = v8;
      if (v8)
      {
        if (*a2 >= 5u)
          v9 = 0;
        else
          v9 = *a2;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 56))(v8, 1, v9);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_216995BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver33requestCurrentDormancyStatus_syncEvEUb1_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_DWORD **a1)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  _BOOL4 v5;
  _DWORD **v7;
  _DWORD *v8;
  uint8_t *v9;
  uint8_t buf[8];
  __int128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v7 = a1;
  v8 = v1;
  v2 = *(_QWORD *)v1;
  v3 = v1[3];
  v4 = *(NSObject **)(*(_QWORD *)v1 + 40);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v3;
      LOWORD(v11) = 2080;
      *(_QWORD *)((char *)&v11 + 2) = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Error in response to GetDormancyStatus with code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Response to GetDormancyStatus received", buf, 2u);
    }
    *(_QWORD *)&v11 = 0x40000000;
    *((_QWORD *)&v11 + 1) = ___ZZZN8dormancy24QMIDormancyCommandDriver33requestCurrentDormancyStatus_syncEvEUb1_ENK3__6clEv_block_invoke;
    v12 = &__block_descriptor_tmp_61_3;
    v13 = v2;
    v9 = buf;
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    qmi::MessageBase::applyTlv<wds::tlv::DormancyStatus,void({block_pointer}&)(wds::tlv::DormancyStatus const&)>((qmi::MessageBase *)(v1 + 2), 1, (uint64_t)&v9);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v8);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_216995D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)va1);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZZZN8dormancy24QMIDormancyCommandDriver33requestCurrentDormancyStatus_syncEvEUb1_ENK3__6clEv_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v12) = 136315138;
    *(_QWORD *)((char *)&v12 + 4) = asString();
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I get dormancy status: %s", (uint8_t *)&v12, 0xCu);
  }
  v5 = (std::__shared_weak_count *)v3[10];
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    *((_QWORD *)&v12 + 1) = v6;
    if (v6)
    {
      v7 = v6;
      v8 = v3[9];
      *(_QWORD *)&v12 = v8;
      if (v8)
      {
        if (*a2 >= 5u)
          v9 = 0;
        else
          v9 = *a2;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 56))(v8, 1, v9);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_216995E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient4sendIN3wds17GetDormancyStatus7RequestE21DormancyCommandDriverU13block_pointerFvRKNS2_8ResponseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[3];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v16 = v5;
    if (v5)
    {
      v6 = v5;
      if (a1[5])
      {
        v7 = a1[4];
        v8 = a2[1];
        v14[0] = *a2;
        v14[1] = v8;
        v9 = a2[2];
        v14[2] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
        (*(void (**)(uint64_t, _QWORD *))(v7 + 16))(v7, v14);
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v14);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_216995F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::EnableFiltering>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  char *result;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 1)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_WORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = &off_24D5D5820;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    result = (char *)(v7 + 9);
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 9;
  }
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::EnableFiltering>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::EnableFiltering>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::EnableFiltering>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::EnableFiltering>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D5820;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList1>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D5870;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList1>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D5870;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList1>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::FilteringPortsList1>((_QWORD *)(a1 + 16));
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList1>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::FilteringPortsList1>(a2, (uint64_t *)(a1 + 16));
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList1>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D5870;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<wds::tlv::FilteringPortInfo1>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo1*,wds::tlv::FilteringPortInfo1*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
  return v2;
}

void sub_216996310(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1ENS_13group_sessionEEUb2_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  const char *v8;
  uint64_t *v10;
  uint64_t v11;
  uint8_t buf[4];
  _DWORD v13[7];

  *(_QWORD *)&v13[5] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v10 = a1;
  v11 = v1;
  v2 = *(_DWORD *)(v1 + 12);
  v3 = *(NSObject **)(*(_QWORD *)v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_DWORD *)buf = 67109378;
      v13[0] = v2;
      LOWORD(v13[1]) = 2080;
      *(_QWORD *)((char *)&v13[1] + 2) = qmi::asString();
      v5 = "#I Command to filter unsolicited packets (ver 1) failed with code = 0x%x (%s)";
      v6 = v3;
      v7 = 18;
LABEL_9:
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    }
  }
  else if (v4)
  {
    if (*(_BYTE *)(v1 + 32))
      v8 = "enabled";
    else
      v8 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v13 = v8;
    v5 = "#I Filtering of unsolicited packets (ver 1) has been %s";
    v6 = v3;
    v7 = 12;
    goto LABEL_9;
  }
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionEEUb2_E3__7NS_14default_deleteIS8_EEED1B8ne180100Ev(&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_21699645C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionEEUb2_E3__7NS_14default_deleteIS8_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionEEUb2_E3__7NS_14default_deleteIS8_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)(v2 + 8));
    MEMORY[0x2199FEAC4](v2, 0x1060C4094D43FBBLL);
  }
  return a1;
}

void ___ZN16QMIVirtualClient4sendIN3wds25FilterUnsolicitedPackets17RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[5])
        (*(void (**)(void))(a1[4] + 16))();
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_216996568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList2>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D58F8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList2>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D58F8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList2>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::FilteringPortsList2>((_QWORD *)(a1 + 16));
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList2>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::FilteringPortsList2>(a2, (uint64_t *)(a1 + 16));
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList2>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D58F8;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<wds::tlv::FilteringPortInfo2>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo2*,wds::tlv::FilteringPortInfo2*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1));
  return v2;
}

void sub_2169966D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList2ENS_13group_sessionEEUb3_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  const char *v8;
  uint64_t *v10;
  uint64_t v11;
  uint8_t buf[4];
  _DWORD v13[7];

  *(_QWORD *)&v13[5] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v10 = a1;
  v11 = v1;
  v2 = *(_DWORD *)(v1 + 12);
  v3 = *(NSObject **)(*(_QWORD *)v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_DWORD *)buf = 67109378;
      v13[0] = v2;
      LOWORD(v13[1]) = 2080;
      *(_QWORD *)((char *)&v13[1] + 2) = qmi::asString();
      v5 = "#I Command to filter unsolicited packets (ver 2) failed with code = 0x%x (%s)";
      v6 = v3;
      v7 = 18;
LABEL_9:
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    }
  }
  else if (v4)
  {
    if (*(_BYTE *)(v1 + 32))
      v8 = "enabled";
    else
      v8 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v13 = v8;
    v5 = "#I Filtering of unsolicited packets (ver 2) has been %s";
    v6 = v3;
    v7 = 12;
    goto LABEL_9;
  }
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionEEUb2_E3__7NS_14default_deleteIS8_EEED1B8ne180100Ev(&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_216996824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionEEUb2_E3__7NS_14default_deleteIS8_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient4sendIN3wds25FilterUnsolicitedPackets27RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[5])
        (*(void (**)(void))(a1[4] + 16))();
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2169968E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList3>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D5980;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList3>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D5980;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList3>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::FilteringPortsList3>(a1 + 16);
}

_WORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList3>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  _WORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::FilteringPortsList3>((_WORD **)a2, a1 + 16);
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FilteringPortsList3>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D5980;
  *(_WORD *)(v2 + 16) = *(_WORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<wds::tlv::FilteringPortInfo3>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo3*,wds::tlv::FilteringPortInfo3*>((_QWORD *)(v2 + 24), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 1));
  return v2;
}

void sub_216996A5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C406F1F2BB1);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList3ENS_13group_sessionEEUb4_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  const char *v8;
  uint64_t *v10;
  uint64_t v11;
  uint8_t buf[4];
  _DWORD v13[7];

  *(_QWORD *)&v13[5] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v10 = a1;
  v11 = v1;
  v2 = *(_DWORD *)(v1 + 12);
  v3 = *(NSObject **)(*(_QWORD *)v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_DWORD *)buf = 67109378;
      v13[0] = v2;
      LOWORD(v13[1]) = 2080;
      *(_QWORD *)((char *)&v13[1] + 2) = qmi::asString();
      v5 = "#I Command to filter unsolicited packets (ver 3) failed with code = 0x%x (%s)";
      v6 = v3;
      v7 = 18;
LABEL_9:
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    }
  }
  else if (v4)
  {
    if (*(_BYTE *)(v1 + 32))
      v8 = "enabled";
    else
      v8 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v13 = v8;
    v5 = "#I Filtering of unsolicited packets (ver 3) has been %s";
    v6 = v3;
    v7 = 12;
    goto LABEL_9;
  }
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionEEUb2_E3__7NS_14default_deleteIS8_EEED1B8ne180100Ev(&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_216996BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionEEUb2_E3__7NS_14default_deleteIS8_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient4sendIN3wds25FilterUnsolicitedPackets37RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[5])
        (*(void (**)(void))(a1[4] + 16))();
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_216996C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList1>(_QWORD *a1, int **a2, unsigned int *a3, uint64_t a4, unsigned int *a5)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  int *v28;
  char *v29;
  char *v30;
  int v31;
  uint64_t v32;
  NSObject *v33;
  unsigned int v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  NSObject *v38;
  std::__shared_weak_count *v39;
  unint64_t v40;
  void *__p;
  void *v42;
  uint64_t v43;
  uint8_t buf[4];
  unsigned int v45;
  __int16 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v42 = 0;
  v43 = 0;
  std::vector<unsigned short>::vector(&__p, 400);
  v40 = 0;
  v10 = (std::__shared_weak_count *)a1[10];
  if (!v10)
  {
    v11 = 0;
LABEL_33:
    v33 = a1[5];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v34 = *a3;
      *(_DWORD *)buf = 67109120;
      v45 = v34;
      _os_log_impl(&dword_216897000, v33, OS_LOG_TYPE_DEFAULT, "#I Failed on getting port lists on the interface %u", buf, 8u);
    }
    v32 = 0;
LABEL_36:
    if (!v11)
      goto LABEL_41;
    goto LABEL_37;
  }
  v11 = std::__shared_weak_count::lock(v10);
  v39 = v11;
  if (!v11)
    goto LABEL_33;
  v12 = a1[9];
  if (!v12
    || ((*(uint64_t (**)(uint64_t, _QWORD, uint64_t, void *, uint64_t, unint64_t *))(*(_QWORD *)v12 + 72))(v12, *a3, a4, __p, 400, &v40) & 1) == 0)
  {
    goto LABEL_33;
  }
  v13 = v40;
  v14 = v40 >> 1;
  v15 = *a5 + (v40 >> 1);
  *a5 = v15;
  if (v15 > 0x190)
  {
    v38 = a1[5];
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v45 = v15;
      v46 = 1024;
      v47 = 400;
      _os_log_impl(&dword_216897000, v38, OS_LOG_TYPE_DEFAULT, "#I total number of port lists (%u) is exceeded more than the max number of port lists (%u) to fit a QMI frame size limit (2K)", buf, 0xEu);
    }
    v32 = 0;
  }
  else
  {
    if ((_DWORD)v14)
    {
      v16 = 0;
      v17 = a2 + 2;
      if ((a4 & 4) != 0)
        v18 = 1536;
      else
        v18 = 4352;
      if ((a4 & 1) != 0)
        v19 = 4;
      else
        v19 = 6;
      v20 = (v13 >> 1);
      v21 = a2[1];
      do
      {
        v22 = *((unsigned __int16 *)__p + v16);
        if ((unint64_t)v21 >= *v17)
        {
          v23 = v21 - *a2;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v24 = *v17 - (_QWORD)*a2;
          v25 = v24 >> 1;
          if (v24 >> 1 <= (unint64_t)(v23 + 1))
            v25 = v23 + 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v25;
          if (v26)
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>((uint64_t)(a2 + 2), v26);
          else
            v27 = 0;
          v28 = (int *)&v27[4 * v23];
          *v28 = v18 | (v22 << 16) | v19;
          v21 = v28 + 1;
          v30 = (char *)*a2;
          v29 = (char *)a2[1];
          if (v29 != (char *)*a2)
          {
            do
            {
              v31 = *((_DWORD *)v29 - 1);
              v29 -= 4;
              *--v28 = v31;
            }
            while (v29 != v30);
            v29 = (char *)*a2;
          }
          *a2 = v28;
          a2[1] = v21;
          a2[2] = (int *)&v27[4 * v26];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *v21++ = v18 | (v22 << 16) | v19;
        }
        a2[1] = v21;
        ++v16;
      }
      while (v16 != v20);
      v32 = 1;
      v11 = v39;
      goto LABEL_36;
    }
    v32 = 1;
  }
LABEL_37:
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_41:
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  return v32;
}

void sub_216996F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned short>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned short>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_216997024(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList2>(_QWORD *a1, _QWORD *a2, unsigned int *a3, uint64_t a4, unsigned int *a5)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  __int16 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  _WORD *v29;
  _WORD *v30;
  char *v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  NSObject *v35;
  unsigned int v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  NSObject *v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  void *__p;
  void *v44;
  uint64_t v45;
  uint8_t buf[4];
  unsigned int v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v44 = 0;
  v45 = 0;
  std::vector<unsigned short>::vector(&__p, 400);
  v42 = 0;
  v10 = (std::__shared_weak_count *)a1[10];
  if (!v10)
  {
    v11 = 0;
LABEL_33:
    v35 = a1[5];
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      v36 = *a3;
      *(_DWORD *)buf = 67109120;
      v47 = v36;
      _os_log_impl(&dword_216897000, v35, OS_LOG_TYPE_DEFAULT, "#I Failed on getting port lists on the interface %u", buf, 8u);
    }
    v34 = 0;
LABEL_36:
    if (!v11)
      goto LABEL_41;
    goto LABEL_37;
  }
  v11 = std::__shared_weak_count::lock(v10);
  v41 = v11;
  if (!v11)
    goto LABEL_33;
  v12 = a1[9];
  if (!v12
    || ((*(uint64_t (**)(uint64_t, _QWORD, uint64_t, void *, uint64_t, unint64_t *))(*(_QWORD *)v12 + 72))(v12, *a3, a4, __p, 400, &v42) & 1) == 0)
  {
    goto LABEL_33;
  }
  v13 = v42;
  v14 = v42 >> 1;
  v15 = *a5 + (v42 >> 1);
  *a5 = v15;
  if (v15 > 0x190)
  {
    v40 = a1[5];
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v47 = v15;
      v48 = 1024;
      v49 = 400;
      _os_log_impl(&dword_216897000, v40, OS_LOG_TYPE_DEFAULT, "#I total number of port lists (%u) is exceeded more than the max number of port lists (%u) to fit a QMI frame size limit (2K)", buf, 0xEu);
    }
    v34 = 0;
  }
  else
  {
    if ((_DWORD)v14)
    {
      v16 = 0;
      if ((a4 & 1) != 0)
        v17 = 4;
      else
        v17 = 6;
      if ((a4 & 4) != 0)
        v18 = 6;
      else
        v18 = 17;
      v19 = a2 + 2;
      v20 = (v13 >> 1);
      v21 = (char *)a2[1];
      do
      {
        v22 = *a3;
        v23 = *((_WORD *)__p + v16);
        if ((unint64_t)v21 >= *v19)
        {
          v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v21[-*a2] >> 1);
          v25 = v24 + 1;
          if (v24 + 1 > 0x2AAAAAAAAAAAAAAALL)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*v19 - *a2) >> 1) > v25)
            v25 = 0x5555555555555556 * ((uint64_t)(*v19 - *a2) >> 1);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v19 - *a2) >> 1) >= 0x1555555555555555)
            v26 = 0x2AAAAAAAAAAAAAAALL;
          else
            v26 = v25;
          if (v26)
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(a2 + 2), v26);
          else
            v27 = 0;
          v28 = &v27[6 * v24];
          *v28 = v22;
          v28[1] = v17;
          v28[2] = v18;
          v28[3] = 0;
          *((_WORD *)v28 + 2) = v23;
          v30 = (_WORD *)*a2;
          v29 = (_WORD *)a2[1];
          v31 = v28;
          if (v29 != (_WORD *)*a2)
          {
            do
            {
              v32 = *(_DWORD *)(v29 - 3);
              v29 -= 3;
              v33 = v29[2];
              *(_DWORD *)(v31 - 6) = v32;
              v31 -= 6;
              *((_WORD *)v31 + 2) = v33;
            }
            while (v29 != v30);
            v29 = (_WORD *)*a2;
          }
          v21 = v28 + 6;
          *a2 = v31;
          a2[1] = v28 + 6;
          a2[2] = &v27[6 * v26];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *v21 = v22;
          v21[1] = v17;
          v21[2] = v18;
          v21[3] = 0;
          *((_WORD *)v21 + 2) = v23;
          v21 += 6;
        }
        a2[1] = v21;
        ++v16;
      }
      while (v16 != v20);
      v34 = 1;
      v11 = v41;
      goto LABEL_36;
    }
    v34 = 1;
  }
LABEL_37:
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_41:
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  return v34;
}

void sub_2169973B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList3>(_QWORD *a1, uint64_t a2, unsigned int *a3, uint64_t a4, unsigned int *a5)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  __int16 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  _WORD *v29;
  _WORD *v30;
  char *v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  NSObject *v35;
  unsigned int v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  NSObject *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t v43;
  void *__p;
  void *v45;
  uint64_t v46;
  uint8_t buf[4];
  unsigned int v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned short>::vector(&__p, 400);
  v43 = 0;
  v10 = (std::__shared_weak_count *)a1[10];
  if (!v10)
  {
    v11 = 0;
LABEL_33:
    v35 = a1[5];
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      v36 = *a3;
      *(_DWORD *)buf = 67109120;
      v48 = v36;
      _os_log_impl(&dword_216897000, v35, OS_LOG_TYPE_DEFAULT, "#I Failed on getting port lists on the interface %u", buf, 8u);
    }
    v34 = 0;
LABEL_36:
    if (!v11)
      goto LABEL_41;
    goto LABEL_37;
  }
  v11 = std::__shared_weak_count::lock(v10);
  v42 = v11;
  if (!v11)
    goto LABEL_33;
  v12 = a1[9];
  if (!v12
    || ((*(uint64_t (**)(uint64_t, _QWORD, uint64_t, void *, uint64_t, unint64_t *))(*(_QWORD *)v12 + 72))(v12, *a3, a4, __p, 400, &v43) & 1) == 0)
  {
    goto LABEL_33;
  }
  v13 = v43;
  v14 = v43 >> 1;
  v15 = *a5 + (v43 >> 1);
  *a5 = v15;
  if (v15 > 0x190)
  {
    v40 = a1[5];
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v48 = v15;
      v49 = 1024;
      v50 = 400;
      _os_log_impl(&dword_216897000, v40, OS_LOG_TYPE_DEFAULT, "#I total number of port lists (%u) is exceeded more than the max number of port lists (%u) to fit a QMI frame size limit (2K)", buf, 0xEu);
    }
    v34 = 0;
  }
  else
  {
    if ((_DWORD)v14)
    {
      v16 = 0;
      if ((a4 & 1) != 0)
        v17 = 4;
      else
        v17 = 6;
      if ((a4 & 4) != 0)
        v18 = 6;
      else
        v18 = 17;
      v41 = (_QWORD *)(a2 + 8);
      v19 = (_QWORD *)(a2 + 24);
      v20 = (v13 >> 1);
      v21 = *(char **)(a2 + 16);
      do
      {
        v22 = *a3;
        v23 = *((_WORD *)__p + v16);
        if ((unint64_t)v21 >= *v19)
        {
          v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v21[-*v41] >> 1);
          v25 = v24 + 1;
          if (v24 + 1 > 0x2AAAAAAAAAAAAAAALL)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*v19 - *v41) >> 1) > v25)
            v25 = 0x5555555555555556 * ((uint64_t)(*v19 - *v41) >> 1);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v19 - *v41) >> 1) >= 0x1555555555555555)
            v26 = 0x2AAAAAAAAAAAAAAALL;
          else
            v26 = v25;
          if (v26)
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>(a2 + 24, v26);
          else
            v27 = 0;
          v28 = &v27[6 * v24];
          *v28 = v22;
          v28[1] = v17;
          v28[2] = v18;
          v28[3] = 0;
          *((_WORD *)v28 + 2) = v23;
          v30 = *(_WORD **)(a2 + 8);
          v29 = *(_WORD **)(a2 + 16);
          v31 = v28;
          if (v29 != v30)
          {
            do
            {
              v32 = *(_DWORD *)(v29 - 3);
              v29 -= 3;
              v33 = v29[2];
              *(_DWORD *)(v31 - 6) = v32;
              v31 -= 6;
              *((_WORD *)v31 + 2) = v33;
            }
            while (v29 != v30);
            v29 = (_WORD *)*v41;
          }
          v21 = v28 + 6;
          *(_QWORD *)(a2 + 8) = v31;
          *(_QWORD *)(a2 + 16) = v28 + 6;
          *(_QWORD *)(a2 + 24) = &v27[6 * v26];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *v21 = v22;
          v21[1] = v17;
          v21[2] = v18;
          v21[3] = 0;
          *((_WORD *)v21 + 2) = v23;
          v21 += 6;
        }
        *(_QWORD *)(a2 + 16) = v21;
        *(_WORD *)a2 = -21845 * (((_DWORD)v21 - *(_DWORD *)(a2 + 8)) >> 1);
        ++v16;
      }
      while (v16 != v20);
      v34 = 1;
      v11 = v42;
      goto LABEL_36;
    }
    v34 = 1;
  }
LABEL_37:
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_41:
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  return v34;
}

void sub_216997798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::find<int>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void std::__function::__func<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0,std::allocator<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0,std::allocator<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0>,void ()(BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D5D59F0;
  return result;
}

void std::__function::__func<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0,std::allocator<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D5D59F0;
}

uint64_t std::__function::__func<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0,std::allocator<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0,std::allocator<dormancy::QMIDormancyCommandDriver::addLLFilter_sync(int,DataIPFilter const&,std::function<void ()(BOOL)>)::$_0>,void ()(BOOL)>::target_type()
{
}

_QWORD *std::__function::__value_func<void ()(BOOL)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_216997A90(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LLFilterInstalled>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::LLFilterInstalled>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<wds::tlv::LLFilterInstalled>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::LLFilterInstalled>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D5A88;
  return result;
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI21DormancyCommandDriverE15execute_wrappedIZZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEvEUb5_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_DWORD **a1)
{
  _DWORD *v1;
  dormancy::QMIDormancyCommandDriver *v2;
  NSObject *v3;
  uint64_t v5;
  int v6;
  _DWORD **v7;
  _DWORD *v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v7 = a1;
  v8 = v1;
  v2 = *(dormancy::QMIDormancyCommandDriver **)v1;
  v3 = *(NSObject **)(*(_QWORD *)v1 + 40);
  if (v1[5])
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = asStringBool();
      v6 = v1[5];
      *(_DWORD *)buf = 136315650;
      v10 = v5;
      v11 = 1024;
      v12 = v6;
      v13 = 2080;
      v14 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "DataActivityInfo[llfilter %s], Error code = 0x%x (%s), setting fIsLLFiltersInstalled to unknown", buf, 0x1Cu);
    }
    *((_WORD *)v2 + 84) = 0;
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v10 = asStringBool();
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I DataActivityInfo[llfilter %s] success", buf, 0xCu);
  }
  dormancy::QMIDormancyCommandDriver::registerDormancyReports_sync(v2);
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEvEUb5_E4__11NS_14default_deleteIS3_EEED1B8ne180100Ev((uint64_t *)&v8);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_216997CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEvEUb5_E4__11NS_14default_deleteIS3_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEvEUb5_E4__11NS_14default_deleteIS3_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)(v2 + 16));
    MEMORY[0x2199FEAC4](v2, 0x1060C404F12E032);
  }
  return a1;
}

void ___ZN16QMIVirtualClient4sendIN3wds16DataActivityInfo7RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[5])
        (*(void (**)(void))(a1[4] + 16))();
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_216997DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t QMIDataQOSHelper::QMIDataQOSHelper(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, NSObject **a6)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  dispatch_object_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  dispatch_object_t object;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  __int128 v57;

  *(_QWORD *)a1 = MEMORY[0x24BDC3D38] + 16;
  PersonalitySpecificImpl::PersonalitySpecificImpl();
  *(_QWORD *)(a1 + 24) = &unk_24D5D5BC8;
  *(_QWORD *)a1 = &off_24D5D5B20;
  *(_QWORD *)(a1 + 32) = &unk_24D5D5C40;
  *(_QWORD *)(a1 + 40) = *a2;
  v11 = a2[1];
  *(_QWORD *)(a1 + 48) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v57, (const char *)*MEMORY[0x24BDC3E90], "DATA.QMIQOSHelper");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v57);
  *(_QWORD *)(a1 + 64) = *a4;
  v14 = a4[1];
  *(_QWORD *)(a1 + 72) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 80) = *a5;
  v17 = a5[1];
  *(_QWORD *)(a1 + 88) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 16);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v20 = (std::__shared_weak_count *)a2[1];
  v55 = *a2;
  v56 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a4 + 480))(&v53);
  v23 = *a6;
  object = v23;
  if (v23)
    dispatch_retain(v23);
  QMIQOSClientIPInterface::createQMIQOSClientIP(&v55, a1 + 24, &v53, 1, &object, &v57);
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](a1 + 96, &v57);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (object)
    dispatch_release(object);
  v27 = v54;
  if (v54)
  {
    v28 = (unint64_t *)&v54->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v56;
  if (v56)
  {
    v31 = (unint64_t *)&v56->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)a2[1];
  v50 = *a2;
  v51 = v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a4 + 480))(&v48);
  v36 = *a6;
  v47 = v36;
  if (v36)
    dispatch_retain(v36);
  QMIQOSClientIPInterface::createQMIQOSClientIP(&v50, a1 + 24, &v48, 2, &v47, &v57);
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](a1 + 112, &v57);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v47)
    dispatch_release(v47);
  v40 = v49;
  if (v49)
  {
    v41 = (unint64_t *)&v49->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v51;
  if (v51)
  {
    v44 = (unint64_t *)&v51->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  return a1;
}

void sub_216998168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  PersonalitySpecificImpl *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;

  if (v22)
    dispatch_release(v22);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v23);
  v26 = (std::__shared_weak_count *)*((_QWORD *)v19 + 11);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  v27 = (std::__shared_weak_count *)*((_QWORD *)v19 + 9);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  MEMORY[0x2199FDF6C](v21);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v20);
  PersonalitySpecificImpl::~PersonalitySpecificImpl(v19);
  PersonalitySpecific::~PersonalitySpecific(v19);
  _Unwind_Resume(a1);
}

void sub_216998228()
{
  JUMPOUT(0x216998218);
}

void QMIDataQOSHelper::~QMIDataQOSHelper(QMIDataQOSHelper *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_24D5D5B20;
  *((_QWORD *)this + 3) = &unk_24D5D5BC8;
  *((_QWORD *)this + 4) = &unk_24D5D5C40;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  MEMORY[0x2199FDF6C]((char *)this + 56);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  PersonalitySpecificImpl::~PersonalitySpecificImpl(this);
}

{
  PersonalitySpecific *v1;

  QMIDataQOSHelper::~QMIDataQOSHelper(this);
  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  PersonalitySpecific *v1;

  QMIDataQOSHelper::~QMIDataQOSHelper(this);
  PersonalitySpecific::~PersonalitySpecific(v1);
  JUMPOUT(0x2199FEAC4);
}

void `non-virtual thunk to'QMIDataQOSHelper::~QMIDataQOSHelper(QMIDataQOSHelper *this)
{
  PersonalitySpecific *v1;

  QMIDataQOSHelper::~QMIDataQOSHelper((QMIDataQOSHelper *)((char *)this - 24));
  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  PersonalitySpecific *v1;

  QMIDataQOSHelper::~QMIDataQOSHelper((QMIDataQOSHelper *)((char *)this - 32));
  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  QMIDataQOSHelper::~QMIDataQOSHelper((QMIDataQOSHelper *)((char *)this - 24));
}

{
  QMIDataQOSHelper::~QMIDataQOSHelper((QMIDataQOSHelper *)((char *)this - 32));
}

void QMIDataQOSHelper::setCurrentQosFlow_sync(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 632))(*(_QWORD *)(a1 + 64), a2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_2169983B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataQOSHelper::setCurrentQosFlow_sync(uint64_t a1, uint64_t a2)
{
  QMIDataQOSHelper::setCurrentQosFlow_sync(a1 - 24, a2);
}

void QMIDataQOSHelper::cleanCurrentQosFlows_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v6 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 648))(*(_QWORD *)(a1 + 64), a2, a3);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_216998470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataQOSHelper::cleanCurrentQosFlows_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  QMIDataQOSHelper::cleanCurrentQosFlows_sync(a1 - 24, a2, a3);
}

void QMIDataQOSHelper::deleteCurrentQosFlow_sync(std::__shared_weak_count **this, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = std::__shared_weak_count::lock(this[9]);
  ((void (*)(std::__shared_weak_count *, uint64_t))this[8]->__vftable[16].~__shared_weak_count)(this[8], a2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_216998520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataQOSHelper::deleteCurrentQosFlow_sync(std::__shared_weak_count **this, uint64_t a2)
{
  QMIDataQOSHelper::deleteCurrentQosFlow_sync(this - 3, a2);
}

uint64_t QMIDataQOSHelper::requestQos(_QWORD *a1, uint64_t a2, uint64_t a3, const void **a4, uint64_t a5)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  const void *v13;
  NSObject *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  const void *v23;
  const void *v24[3];
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = (std::__shared_weak_count *)a1[11];
  if (!v6)
    return 0;
  v11 = std::__shared_weak_count::lock(v6);
  v24[2] = v11;
  if (!v11)
    return 0;
  v12 = v11;
  v13 = (const void *)a1[10];
  v24[1] = v13;
  if (v13)
  {
    v14 = a1[7];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v26 = "requestQos";
      v27 = 2080;
      v28 = asString();
      v29 = 1024;
      v30 = a5;
      _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I %s: with %s flowIndex %d", buf, 0x1Cu);
    }
    if ((_DWORD)a2 == 2)
    {
      v18 = a1[14];
      if (!v18)
        goto LABEL_16;
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v23, a4);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, const void **, uint64_t))(*(_QWORD *)v18 + 16))(v18, a3, &v23, a5);
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v23);
      if (!v19)
        goto LABEL_16;
    }
    else if ((_DWORD)a2 != 1
           || (v15 = a1[12]) == 0
           || (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(v24, a4), v16 = (*(uint64_t (**)(uint64_t, uint64_t, const void **, uint64_t))(*(_QWORD *)v15 + 16))(v15, a3, v24, a5), ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(v24), (v16 & 1) == 0))
    {
LABEL_16:
      v17 = 2;
      goto LABEL_17;
    }
    (*(void (**)(const void *, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 104))(v13, a1 + 4, a2, a5, a3);
  }
  v17 = 0;
LABEL_17:
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return v17;
}

void sub_216998744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMIDataQOSHelper::releaseQos(_QWORD *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = a1[7];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315650;
    v9 = "releaseQos";
    v10 = 2080;
    v11 = asString();
    v12 = 1024;
    v13 = a3;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: with %s flowId %d", (uint8_t *)&v8, 0x1Cu);
  }
  if (a2 == 2)
  {
    v7 = a1[14];
    if (!v7)
      return;
    goto LABEL_8;
  }
  if (a2 == 1)
  {
    v7 = a1[12];
    if (v7)
LABEL_8:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, a3);
  }
}

void `non-virtual thunk to'QMIDataQOSHelper::releaseQos(uint64_t a1, int a2, uint64_t a3)
{
  QMIDataQOSHelper::releaseQos((_QWORD *)(a1 - 32), a2, a3);
}

void QMIDataQOSHelper::QosRequestAccepted(QMIDataQOSHelper *this, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *((_QWORD *)this + 10);
      if (v9)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 112))(v9, a2, a3);
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_216998930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataQOSHelper::QosRequestAccepted(QMIDataQOSHelper *this, uint64_t a2, uint64_t a3)
{
  QMIDataQOSHelper::QosRequestAccepted((QMIDataQOSHelper *)((char *)this - 24), a2, a3);
}

void QMIDataQOSHelper::QosRequestFailed(QMIDataQOSHelper *this, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)this + 10);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 120))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2169989F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataQOSHelper::QosRequestFailed(QMIDataQOSHelper *this, uint64_t a2)
{
  QMIDataQOSHelper::QosRequestFailed((QMIDataQOSHelper *)((char *)this - 24), a2);
}

void QMIDataQOSHelper::QosStatusInfo(QMIDataQOSHelper *this, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *((_QWORD *)this + 10);
      if (v9)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 128))(v9, a2, a3);
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_216998AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIDataQOSHelper::QosStatusInfo(QMIDataQOSHelper *this, uint64_t a2, uint64_t a3)
{
  QMIDataQOSHelper::QosStatusInfo((QMIDataQOSHelper *)((char *)this - 24), a2, a3);
}

uint64_t QMIDataQOSHelper::getPdpId(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[9]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *))this[8]->__vftable[1].__get_deleter)(this[8]);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

void sub_216998B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataQOSHelper::getPdpId(std::__shared_weak_count **this)
{
  return QMIDataQOSHelper::getPdpId(this - 3);
}

uint64_t QMIDataQOSHelper::getConnectionMask(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = std::__shared_weak_count::lock(this[9]);
  v3 = ((uint64_t (*)(std::__shared_weak_count *, _QWORD))this[8]->__vftable[10].__on_zero_shared)(this[8], 0);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

void sub_216998BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIDataQOSHelper::getConnectionMask(std::__shared_weak_count **this)
{
  return QMIDataQOSHelper::getConnectionMask(this - 3);
}

Registry **Mav20QMICDMASettingsCommandDriver::create@<X0>(_QWORD *a1@<X0>, dispatch_object_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  Registry **result;
  dispatch_object_t v9;

  *a3 = 0;
  a3[1] = 0;
  v6 = operator new();
  v9 = *a2;
  v7 = v9;
  *a2 = 0;
  Mav20QMICDMASettingsCommandDriver::Mav20QMICDMASettingsCommandDriver(v6, a1, &v9);
  *a3 = 0;
  a3[1] = 0;
  std::shared_ptr<Mav20QMICDMASettingsCommandDriver>::shared_ptr[abi:ne180100]<Mav20QMICDMASettingsCommandDriver,std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver*)#1},void>(a3, v6);
  if (v7)
    dispatch_release(v7);
  result = (Registry **)*a3;
  if (*a3)
    return (Registry **)Mav20QMICDMASettingsCommandDriver::init(result);
  return result;
}

void sub_216998CAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Mav20QMICDMASettingsCommandDriver::init(Registry **this)
{
  char *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v6;

  v2 = (char *)(this + 11);
  Registry::createRestModuleOneTimeUseConnection(this[7]);
  ctu::RestModule::connect();
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)())v6->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return ctu::rest::property_source_t<calls_active_in_settings>::bind(this + 13, (uint64_t)v2);
}

void sub_216998D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Mav20QMICDMASettingsCommandDriver::Mav20QMICDMASettingsCommandDriver(uint64_t a1, _QWORD *a2, dispatch_object_t *a3)
{
  _QWORD *v6;
  NSObject *v7;
  capabilities::ct *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v23;
  void *__p;
  char v25;
  _QWORD v26[3];
  _QWORD *v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = MEMORY[0x24BDC4608] + 16;
  v6 = (_QWORD *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v30, (const char *)*MEMORY[0x24BDC3E90], "set.cdma.qmi");
  *v6 = 0;
  v6[1] = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  if (v7)
    dispatch_retain(v7);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x2199FDF6C](v28);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v30);
  v26[0] = &unk_24D5CCF40;
  v27 = v26;
  v8 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v28, (uint64_t)v26);
  *(_QWORD *)(a1 + 48) = 0;
  if ((capabilities::ct::supportsGemini(v8) & 1) == 0)
  {
    v9 = (_QWORD *)operator new();
    *v9 = &off_24D5D5FE8;
    v9[1] = a1;
    v10 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v9;
    if (!v10)
      goto LABEL_14;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    v11 = (_QWORD *)operator new();
    std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v30, (uint64_t)v28);
    SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLoggerDefault(v11);
    v12 = v31;
    if (v31 == v30)
    {
      v13 = 4;
      v12 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_12;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_12:
    v14 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v11;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
LABEL_14:
  v15 = v29;
  if (v29 == v28)
  {
    v16 = 4;
    v15 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_19;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_19:
  v17 = v27;
  if (v27 == v26)
  {
    v18 = 4;
    v17 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_24;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_24:
  *(_QWORD *)a1 = &off_24D5D5E50;
  *(_QWORD *)(a1 + 56) = *a2;
  v19 = a2[1];
  *(_QWORD *)(a1 + 64) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 72), *(os_log_s **)(a1 + 40));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Mav20QMICDMASettingsCommandDriver");
  v23 = *a3;
  if (*a3)
    dispatch_retain(*a3);
  ctu::RestModule::RestModule();
  if (v23)
    dispatch_release(v23);
  if (v25 < 0)
    operator delete(__p);
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  return a1;
}

void sub_2169990A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  CDMASettingsCommandDriver *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  v34 = a28;
  if (a28 == v32)
  {
    v35 = 4;
    v34 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_6:
  MEMORY[0x2199FEAC4](v31, 0x10A1C40FF1576FELL);
  v36 = *((_QWORD *)v28 + 6);
  *((_QWORD *)v28 + 6) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = a24;
  if (a24 == &a21)
  {
    v38 = 4;
    v37 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_13;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_13:
  v39 = a20;
  if (a20 == &a17)
  {
    v40 = 4;
    v39 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_18:
  MEMORY[0x2199FDF6C](v30);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v29);
  CDMASettingsCommandDriver::~CDMASettingsCommandDriver(v28);
  _Unwind_Resume(a1);
}

void Mav20QMICDMASettingsCommandDriver::~Mav20QMICDMASettingsCommandDriver(Mav20QMICDMASettingsCommandDriver *this)
{
  Mav20QMICDMASettingsCommandDriver *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24D5D5E50;
  std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>>>::destroy(*((_QWORD **)this + 22));
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*((_QWORD **)this + 19));
  v2 = (Mav20QMICDMASettingsCommandDriver *)*((_QWORD *)this + 16);
  if (v2 == (Mav20QMICDMASettingsCommandDriver *)((char *)this + 104))
  {
    v3 = 4;
    v2 = (Mav20QMICDMASettingsCommandDriver *)((char *)this + 104);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  MEMORY[0x2199FDF6C]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 1);
  CDMASettingsCommandDriver::~CDMASettingsCommandDriver(this);
}

{
  Mav20QMICDMASettingsCommandDriver::~Mav20QMICDMASettingsCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

uint64_t Mav20QMICDMASettingsCommandDriver::start(uint64_t **this)
{
  uint64_t SimSlotRange;
  unsigned int *v3;
  uint64_t **v4;
  signed int v5;
  unsigned int v6;
  char *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  signed int v11;
  _DWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unsigned int *v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  Registry **v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t (*v34)(_QWORD);
  __int128 v35;
  void *v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  void *__p;
  char v42;
  dispatch_object_t object;
  _QWORD v44[3];
  _QWORD *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v31 = (Registry **)(this + 7);
  SimSlotRange = subscriber::makeSimSlotRange();
  v3 = v32;
  if (v32 != v33)
  {
    while (1)
    {
      SimSlotRange = v34(*v3);
      if ((SimSlotRange & 1) != 0)
        break;
      if (++v3 == v33)
      {
        v3 = v33;
        break;
      }
    }
    if (v3 != v33)
    {
      v4 = this + 19;
      do
      {
        v5 = *v3;
        v6 = *v3 - 1;
        if (v6 > 2)
        {
          v7 = 0;
          v5 = 0;
        }
        else
        {
          v7 = off_24D5D62B8[v6];
        }
        v8 = *v4;
        v9 = this + 19;
        v10 = this + 19;
        if (*v4)
        {
          while (1)
          {
            while (1)
            {
              v10 = (uint64_t **)v8;
              v11 = *((_DWORD *)v8 + 7);
              if (v11 <= v5)
                break;
              v8 = *v10;
              v9 = v10;
              if (!*v10)
                goto LABEL_17;
            }
            if (v11 >= v5)
              break;
            v8 = v10[1];
            if (!v8)
            {
              v9 = v10 + 1;
              goto LABEL_17;
            }
          }
        }
        else
        {
LABEL_17:
          v12 = operator new(0x28uLL);
          v12[7] = v5;
          *((_BYTE *)v12 + 32) = 0;
          std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(this + 18, (uint64_t)v10, v9, (uint64_t *)v12);
          v10 = (uint64_t **)v12;
        }
        *((_BYTE *)v10 + 32) = -1;
        v13 = (std::__shared_weak_count *)this[2];
        if (!v13 || (v14 = this[1], (v15 = std::__shared_weak_count::lock(v13)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v16 = v15;
        Registry::getServerConnection(*v31);
        v46 = 0u;
        v47 = 0u;
        std::string::basic_string[abi:ne180100]<0>(v36, v7);
        v17 = this[3];
        object = v17;
        if (v17)
          dispatch_retain(v17);
        std::string::basic_string[abi:ne180100]<0>(&__p, "settings");
        v39 = v14;
        v40 = v16;
        p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
        do
          v19 = __ldxr(p_shared_weak_owners);
        while (__stxr(v19 + 1, p_shared_weak_owners));
        v38 = v35;
        v35 = 0uLL;
        qmi::Client::createWithQueueLocal();
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
        if (*((_QWORD *)&v38 + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        if (v40)
          std::__shared_weak_count::__release_weak(v40);
        if (v42 < 0)
          operator delete(__p);
        if (object)
          dispatch_release(object);
        if (SBYTE7(v37) < 0)
          operator delete(v36[0]);
        v36[0] = 0;
        v36[1] = 0;
        v37 = v47;
        v47 = 0uLL;
        qmi::ClientRouter::addClient();
        qmi::Client::~Client((qmi::Client *)v36);
        qmi::ClientRouter::get();
        qmi::Client::~Client((qmi::Client *)&v46);
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v25 = v3 + 1;
        v3 = v33;
        if (v25 != v33)
        {
          v3 = v25;
          while (1)
          {
            SimSlotRange = v34(*v3);
            if ((SimSlotRange & 1) != 0)
              break;
            if (++v3 == v33)
            {
              v3 = v33;
              break;
            }
          }
        }
      }
      while (v3 != v33);
    }
  }
  if ((capabilities::ct::supportsGemini((capabilities::ct *)SimSlotRange) & 1) != 0)
  {
    v44[0] = &off_24D5D6028;
    v44[1] = this;
    v45 = v44;
    qmi::ClientRouter::setHandler();
    v26 = v45;
    if (v45 == v44)
    {
      v27 = 4;
      v26 = v44;
    }
    else
    {
      if (!v45)
        goto LABEL_53;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
LABEL_53:
  *(_QWORD *)&v46 = &off_24D5D60A8;
  *((_QWORD *)&v46 + 1) = this;
  *((_QWORD *)&v47 + 1) = &v46;
  qmi::ClientRouter::setIndHandlerInternal();
  v28 = (__int128 *)*((_QWORD *)&v47 + 1);
  if (*((__int128 **)&v47 + 1) == &v46)
  {
    v29 = 4;
    v28 = &v46;
    goto LABEL_57;
  }
  if (*((_QWORD *)&v47 + 1))
  {
    v29 = 5;
LABEL_57:
    (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  }
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(this + 9));
  return qmi::ClientRouter::start();
}

void sub_216999770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,dispatch_object_t object,char a37,uint64_t a38,uint64_t a39,char *a40)
{
  char *v40;
  char *v42;
  uint64_t v43;

  v42 = a40;
  if (a40 == v40)
  {
    v43 = 4;
    v42 = &a37;
  }
  else
  {
    if (!a40)
      goto LABEL_6;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t Mav20QMICDMASettingsCommandDriver::stop(Mav20QMICDMASettingsCommandDriver *this)
{
  qmi::ClientRouter::stop();
  return ctu::RestModule::disconnect((Mav20QMICDMASettingsCommandDriver *)((char *)this + 88));
}

BOOL Mav20QMICDMASettingsCommandDriver::dialSettingCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t **v13;
  _QWORD *v14;
  int v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 result;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  int v38;
  uint8_t buf[8];
  uint64_t v40;
  void (*v41)(uint64_t, _QWORD *);
  void *v42;
  char *v43;
  std::__shared_weak_count *v44;
  char *v45;
  std::__shared_weak_count *v46;
  _QWORD aBlock[5];

  v6 = a2;
  v38 = a2;
  v8 = *(_QWORD *)(a1 + 176);
  if (!v8)
    goto LABEL_11;
  v9 = a1 + 176;
  do
  {
    v10 = *(_DWORD *)(v8 + 32);
    v11 = v10 < (int)a2;
    if (v10 >= (int)a2)
      v12 = (uint64_t *)v8;
    else
      v12 = (uint64_t *)(v8 + 8);
    if (!v11)
      v9 = v8;
    v8 = *v12;
  }
  while (*v12);
  if (v9 != a1 + 176 && *(_DWORD *)(v9 + 32) <= (int)a2)
  {
    v34 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a2);
    result = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_216897000, v34, OS_LOG_TYPE_ERROR, "A call is already on going!", buf, 2u);
      return 0;
    }
  }
  else
  {
LABEL_11:
    v13 = std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(a1 + 168), a2, &v38);
    std::function<void ()(void)>::operator=(v13 + 5, a4);
    memset(v37, 0, sizeof(v37));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v37);
    v14 = (_QWORD *)qmi::MutableMessageBase::getTLV<vs::tlv::CallingNumber>(v37, 1);
    v15 = *(char *)(a3 + 23);
    if (v15 >= 0)
      v16 = (char *)a3;
    else
      v16 = *(char **)a3;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a3 + 23);
    else
      v17 = *(_QWORD *)(a3 + 8);
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v14, v16, &v16[v17], v17);
    *(_BYTE *)qmi::MutableMessageBase::getTLV<vs::tlv::CallType>(v37, 16) = 0;
    if (!*(_BYTE *)(a1 + 136))
    {
      *(_BYTE *)(a1 + 136) = 1;
      v18 = *(_QWORD *)(a1 + 128);
      if (v18)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(v18, a1 + 136);
    }
    if ((v6 - 1) >= 3)
      v19 = 0;
    else
      v19 = v6;
    v20 = qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<vs::VoiceDialCall::Request>((uint64_t)&v35, v19, v20);
    v21 = operator new(0x28uLL);
    v21[1] = 0;
    v22 = v21 + 1;
    v21[2] = 0;
    *v21 = &off_24D5D6250;
    v21[3] = a1;
    *((_DWORD *)v21 + 8) = v6;
    v45 = (char *)(v21 + 3);
    v46 = (std::__shared_weak_count *)v21;
    v23 = v36;
    v24 = MEMORY[0x24BDAC760];
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v40 = 1174405120;
    v41 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN33Mav20QMICDMASettingsCommandDriver15dialSettingCallEN10subscriber7SimSlotERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS6_8functionIFvvEEEE3__2EEOS1_OT__block_invoke;
    v42 = &__block_descriptor_tmp_17_8;
    v43 = (char *)(v21 + 3);
    v44 = (std::__shared_weak_count *)v21;
    do
      v25 = __ldxr(v22);
    while (__stxr(v25 + 1, v22));
    aBlock[0] = v24;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_15;
    aBlock[3] = &unk_24D5D6298;
    aBlock[4] = buf;
    *(_QWORD *)(v23 + 32) = _Block_copy(aBlock);
    v26 = v44;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v46;
    if (v46)
    {
      v30 = (unint64_t *)&v46->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v36;
    v36 = 0;
    if (v32)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v36, v32);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v37);
    return 1;
  }
  return result;
}

void sub_216999BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN33Mav20QMICDMASettingsCommandDriver28handleVoiceDialCallResp_syncEN10subscriber7SimSlotERKN2vs13VoiceDialCall8ResponseE_block_invoke(uint64_t a1, char *a2)
{
  int *v2;
  char v3;
  uint64_t **v4;
  NSObject *v5;
  int v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (int *)(a1 + 48);
  v3 = *a2;
  v4 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 144);
  *((_BYTE *)std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(v4, *(_DWORD *)(a1 + 48), (_DWORD *)(a1 + 48))+ 32) = v3;
  v5 = **((_QWORD **)v2 - 1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((unsigned __int8 *)std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(v4, *v2, v2)+ 32);
    v7[0] = 67109120;
    v7[1] = v6;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Call ID: %u", (uint8_t *)v7, 8u);
  }
}

uint64_t *std::shared_ptr<Mav20QMICDMASettingsCommandDriver>::shared_ptr[abi:ne180100]<Mav20QMICDMASettingsCommandDriver,std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D5F88;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_216999D60(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver*)#1}::operator() const(Mav20QMICDMASettingsCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_216999D80(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Mav20QMICDMASettingsCommandDriver *,std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver *)#1},std::allocator<Mav20QMICDMASettingsCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<Mav20QMICDMASettingsCommandDriver *,std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver *)#1},std::allocator<Mav20QMICDMASettingsCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver*)#1}::operator() const(Mav20QMICDMASettingsCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<Mav20QMICDMASettingsCommandDriver *,std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver *)#1},std::allocator<Mav20QMICDMASettingsCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav20QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<Mav20QMICDMASettingsCommandDriver>::make_shared_ptr<Mav20QMICDMASettingsCommandDriver>(Mav20QMICDMASettingsCommandDriver*)::{lambda(Mav20QMICDMASettingsCommandDriver*)#1}::operator() const(Mav20QMICDMASettingsCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void SimInstanceLoggable<Mav20QMICDMASettingsCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t SimInstanceLoggable<Mav20QMICDMASettingsCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 40;
}

void std::__function::__func<Mav20QMICDMASettingsCommandDriver::start(void)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::start(void)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<Mav20QMICDMASettingsCommandDriver::start(void)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::start(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D6028;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Mav20QMICDMASettingsCommandDriver::start(void)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::start(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D6028;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Mav20QMICDMASettingsCommandDriver::start(void)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::start(void)::$_0>,void ()(qmi::SubscriptionType)>::operator()(capabilities::ct *a1, int *a2)
{
  int v2;
  std::__shared_weak_count_vtbl *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  _QWORD v18[5];
  std::__shared_weak_count *v19;
  _QWORD aBlock[5];

  v2 = *a2;
  v3 = (std::__shared_weak_count_vtbl *)*((_QWORD *)a1 + 1);
  if (capabilities::ct::supportsGemini(a1))
  {
    memset(v17, 0, sizeof(v17));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v17);
    *(_BYTE *)qmi::MutableMessageBase::getTLV<vs::tlv::SubscriptionType>(v17, 1) = v2 == 2;
    v4 = qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<vs::BindSubscription::Request>((uint64_t)&v15, v2, v4);
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D61A8;
    v5[1].__vftable = v3;
    LODWORD(v5[1].__shared_owners_) = v2;
    v7 = v16;
    v8 = MEMORY[0x24BDAC760];
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 1174405120;
    v18[2] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN33Mav20QMICDMASettingsCommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
    v18[3] = &__block_descriptor_tmp_14_8;
    v18[4] = v5 + 1;
    v19 = v5;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    aBlock[0] = v8;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN2vs16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_24D5D61F0;
    aBlock[4] = v18;
    *(_QWORD *)(v7 + 32) = _Block_copy(aBlock);
    v10 = v19;
    if (v19)
    {
      v11 = (unint64_t *)&v19->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v14 = v16;
    v16 = 0;
    if (v14)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v16, v14);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v17);
  }
}

void sub_21699A068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  std::__shared_weak_count *v21;
  unint64_t *v22;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v24 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v27 = __ldaxr(v22);
  while (__stlxr(v27 - 1, v22));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  v28 = a10;
  a10 = 0;
  if (v28)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Mav20QMICDMASettingsCommandDriver::start(void)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::start(void)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20QMICDMASettingsCommandDriver::start(void)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::start(void)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMICDMASettingsCommandDriver::start(void)::$_2>(unsigned short,Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMICDMASettingsCommandDriver::start(void)::$_2>(unsigned short,Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D60A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMICDMASettingsCommandDriver::start(void)::$_2>(unsigned short,Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D60A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMICDMASettingsCommandDriver::start(void)::$_2>(unsigned short,Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&,QMIServiceMsg const)>::operator()(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  os_log_t *v6;
  unsigned __int8 *TlvValue;
  int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  void **v26;
  uint64_t v27;
  _WORD v28[12];
  void *v29;
  void *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  void *__p[2];
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  LODWORD(v4) = *a2;
  cast_message_type<vs::VoiceCallStatus::Indication const&>::cast(a3, (qmi::MessageBase *)v28);
  if ((v4 - 1) >= 3)
    v4 = 0;
  else
    v4 = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v4;
  v6 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 48) + 16))(*(_QWORD *)(v5 + 48), v4);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v28);
  v9 = TlvValue;
  if (!TlvValue)
    goto LABEL_26;
  v10 = v8;
  v33 = TlvValue;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v35 = 0;
  tlv::parseV<vs::tlv::CallList>(&v33, v8, (uint64_t *)__p);
  v11 = v33;
  if (v33)
    std::vector<vs::tlv::CallListItem>::__assign_with_size[abi:ne180100]<vs::tlv::CallListItem*,vs::tlv::CallListItem*>((char *)&v29, (char *)__p[0], (uint64_t)__p[1], 0x6DB6DB6DB6DB6DB7 * ((char *)__p[1] - (char *)__p[0]));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!v11
    && (((uint64_t (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(v28[0], 1, v9, v10) & 1) == 0)
  {
LABEL_26:
    v24 = *v6;
    if (!os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_31;
    LOWORD(__p[0]) = 0;
    v25 = "#I Voice call status doesn't have mandatory TLV \"Identifier List\" (0x01)";
LABEL_30:
    _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)__p, 2u);
    goto LABEL_31;
  }
  v12 = (unsigned __int8 *)v29;
  if (!(-73 * ((_BYTE)v30 - (_BYTE)v29)))
  {
    v24 = *v6;
    if (!os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_31;
    LOWORD(__p[0]) = 0;
    v25 = "#I No call instances reported";
    goto LABEL_30;
  }
  v13 = (-73 * ((_BYTE)v30 - (_BYTE)v29));
  if (v13 >= 2)
  {
    v14 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v13;
      _os_log_error_impl(&dword_216897000, v14, OS_LOG_TYPE_ERROR, "Got '%d' call instances instead of just '1'; reading the first one",
        (uint8_t *)__p,
        8u);
      v12 = (unsigned __int8 *)v29;
    }
  }
  if (v12[1] != 9)
    goto LABEL_31;
  v15 = *v12;
  v16 = *v6;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *((unsigned __int8 *)std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v5 + 144), v4, &v32)+ 32);
    LODWORD(__p[0]) = 67109376;
    HIDWORD(__p[0]) = v15;
    LOWORD(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 2) = v17;
    _os_log_impl(&dword_216897000, v16, OS_LOG_TYPE_DEFAULT, "#I Call end event for call %u with store %u", (uint8_t *)__p, 0xEu);
  }
  if (v15 != *((unsigned __int8 *)std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v5 + 144), v4, &v32)+ 32)|| *((unsigned __int8 *)std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v5 + 144), v4, &v32)+ 32) == 255)
  {
    goto LABEL_31;
  }
  if (*(_BYTE *)(v5 + 136))
  {
    *(_BYTE *)(v5 + 136) = 0;
    v18 = *(_QWORD *)(v5 + 128);
    if (v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(v18, v5 + 136);
  }
  *(_OWORD *)__p = 0u;
  v35 = 0u;
  v19 = std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v5 + 168), v4, &v32);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)(v19 + 5));
  LODWORD(v33) = v4;
  v20 = std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v5 + 168), v4, &v33);
  v21 = v20 + 5;
  v22 = (uint64_t **)v20[8];
  v20[8] = 0;
  if (v22 == v20 + 5)
  {
    v23 = 4;
    v22 = v21;
    goto LABEL_35;
  }
  if (v22)
  {
    v23 = 5;
LABEL_35:
    ((void (*)(void))(*v22)[v23])();
  }
  *((_BYTE *)std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v5 + 144), v4, &v33)+ 32) = -1;
  if (!*((_QWORD *)&v35 + 1))
    goto LABEL_31;
  (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 48))(*((_QWORD *)&v35 + 1));
  v26 = (void **)*((_QWORD *)&v35 + 1);
  if (*((void ***)&v35 + 1) == __p)
  {
    v27 = 4;
    v26 = __p;
  }
  else
  {
    if (!*((_QWORD *)&v35 + 1))
      goto LABEL_31;
    v27 = 5;
  }
  (*((void (**)(void))*v26 + v27))();
LABEL_31:
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v28);
}

void sub_21699A59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMICDMASettingsCommandDriver::start(void)::$_2>(unsigned short,Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMICDMASettingsCommandDriver::start(void)::$_2>(unsigned short,Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMICDMASettingsCommandDriver::start(void)::$_2 &&,QMIServiceMsg const)>::target_type()
{
}

void cast_message_type<vs::VoiceCallStatus::Indication const&>::cast(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)46,vs::VoiceCallStatus::IndicationTLVList>::Indication(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)46,vs::VoiceCallStatus::IndicationTLVList>::Indication((uint64_t)a2);
  }
}

void sub_21699A704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Indication<(unsigned short)46,vs::VoiceCallStatus::IndicationTLVList>::Indication(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_21699A74C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Indication<(unsigned short)46,vs::VoiceCallStatus::IndicationTLVList>::Indication(qmi::MessageBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_21699A78C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::getTLV<vs::tlv::SubscriptionType>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<vs::tlv::SubscriptionType>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<vs::tlv::SubscriptionType>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<vs::tlv::SubscriptionType>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_24D5D6140;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<vs::tlv::SubscriptionType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vs::tlv::SubscriptionType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<vs::tlv::SubscriptionType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vs::tlv::SubscriptionType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D6140;
  return result;
}

uint64_t qmi::ClientRouter::SendProxy::SendProxy<vs::BindSubscription::Request>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_QWORD *)(v5 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v5 + 16) = 25000;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void sub_21699AA60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN33Mav20QMICDMASettingsCommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(uint64_t **)(a1 + 32);
    v4 = *v3;
    v5 = *((_DWORD *)v3 + 2);
    if (v5 - 1 >= 3)
      v6 = 0;
    else
      v6 = v5;
    v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 48) + 16))(*(_QWORD *)(v4 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = qmi::asString();
      v9 = *(_DWORD *)(a2 + 4);
      v10 = 136315394;
      v11 = v8;
      v12 = 1024;
      v13 = v9;
      _os_log_error_impl(&dword_216897000, v7, OS_LOG_TYPE_ERROR, "Error binding subscription: %s (0x%x)", (uint8_t *)&v10, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZN33Mav20QMICDMASettingsCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZN33Mav20QMICDMASettingsCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<Mav20QMICDMASettingsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D61A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20QMICDMASettingsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<Mav20QMICDMASettingsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D61A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2vs16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<vs::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_21699AC24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<vs::BindSubscription::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)68,vs::BindSubscription::ResponseTLVList>::Response(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)68,vs::BindSubscription::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_21699ACC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)68,vs::BindSubscription::ResponseTLVList>::Response(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_21699AD0C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)68,vs::BindSubscription::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_21699AD4C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(void)>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x48uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[8] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t qmi::ClientRouter::SendProxy::SendProxy<vs::VoiceDialCall::Request>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_QWORD *)(v5 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v5 + 16) = 25000;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void sub_21699AE9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN33Mav20QMICDMASettingsCommandDriver15dialSettingCallEN10subscriber7SimSlotERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS6_8functionIFvvEEEE3__2EEOS1_OT__block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  os_log_t *v5;
  NSObject **v6;
  int v7;
  os_log_t v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  uint32_t v12;
  NSObject *v13;
  uint64_t v14;
  _BYTE v15[4];
  int v16;
  uint8_t buf[8];
  _QWORD v18[6];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  v4 = *((unsigned int *)v2 + 2);
  qmi::Response<(unsigned short)32,vs::VoiceDialCall::ResponseTLVList>::Response((qmi::MessageBase *)v15, a2);
  v5 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), v4);
  v6 = v5;
  v7 = v16;
  if (v16)
  {
    v8 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v18[0]) = 67109120;
      HIDWORD(v18[0]) = v7;
      v9 = "Voice dial call response failed with error code = 0x%x";
      v10 = (uint8_t *)v18;
      v11 = v8;
      v12 = 8;
LABEL_7:
      _os_log_error_impl(&dword_216897000, v11, OS_LOG_TYPE_ERROR, v9, v10, v12);
    }
  }
  else
  {
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 0x40000000;
    v18[2] = ___ZN33Mav20QMICDMASettingsCommandDriver28handleVoiceDialCallResp_syncEN10subscriber7SimSlotERKN2vs13VoiceDialCall8ResponseE_block_invoke;
    v18[3] = &__block_descriptor_tmp_23;
    v19 = v4;
    v18[4] = v3;
    v18[5] = v5;
    *(_QWORD *)buf = v18;
    if ((qmi::MessageBase::applyTlv<vs::tlv::CallIdentifier,void({block_pointer})(vs::tlv::CallIdentifier const&)>((qmi::MessageBase *)v15, 16, (uint64_t)buf) & 1) != 0)goto LABEL_11;
    v13 = *v6;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v9 = "No Call ID present";
      v10 = buf;
      v11 = v13;
      v12 = 2;
      goto LABEL_7;
    }
  }
  if (*(_BYTE *)(v3 + 136))
  {
    *(_BYTE *)(v3 + 136) = 0;
    v14 = *(_QWORD *)(v3 + 128);
    if (v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, v3 + 136);
  }
LABEL_11:
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v15);
}

void sub_21699B048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c187_ZTSNSt3__110shared_ptrIZN33Mav20QMICDMASettingsCommandDriver15dialSettingCallEN10subscriber7SimSlotERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvvEEEE3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c187_ZTSNSt3__110shared_ptrIZN33Mav20QMICDMASettingsCommandDriver15dialSettingCallEN10subscriber7SimSlotERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvvEEEE3__2EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<Mav20QMICDMASettingsCommandDriver::dialSettingCall(subscriber::SimSlot,std::string const&,std::function<void ()(void)>)::$_2,std::allocator<Mav20QMICDMASettingsCommandDriver::dialSettingCall(subscriber::SimSlot,std::string const&,std::function<void ()(void)>)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20QMICDMASettingsCommandDriver::dialSettingCall(subscriber::SimSlot,std::string const&,std::function<void ()(void)>)::$_2,std::allocator<Mav20QMICDMASettingsCommandDriver::dialSettingCall(subscriber::SimSlot,std::string const&,std::function<void ()(void)>)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6250;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

uint64_t **std::__tree<std::__value_type<subscriber::SimSlot,unsigned char>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,unsigned char>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,unsigned char>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  _DWORD *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x28uLL);
    v9[7] = *a3;
    *((_BYTE *)v9 + 32) = 0;
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t QMIPhonebookCommandDriver::getPbTypeFor(unsigned int a1, int a2)
{
  unsigned int v2;
  uint64_t result;

  if (a1 > 0xA)
    return 6;
  if (((1 << a1) & 0x4C0) != 0)
  {
    if (a2 == 4)
      v2 = 2;
    else
      v2 = 6;
    if (a2 == 1)
      return 3;
    else
      return v2;
  }
  if (((1 << a1) & 5) == 0)
    return 6;
  result = 2;
  switch(a2)
  {
    case 1:
      result = 0;
      break;
    case 2:
      result = 1;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return 6;
    case 4:
      return result;
    case 8:
      result = 4;
      break;
    default:
      if (a2 != 128)
        return 6;
      result = 5;
      break;
  }
  return result;
}

uint64_t QMIPhonebookCommandDriver::getQMIPbTypeFor(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BOOL4 isPBTypeSupportedInGlobalPBSession;

  if (a2 == 2)
    v5 = 8388610;
  else
    v5 = 0x800000;
  if (a2 == 2)
    v6 = 524290;
  else
    v6 = 0x80000;
  if (a2 == 2)
    v7 = 262146;
  else
    v7 = 0x40000;
  if (a2 == 2)
    v8 = 131074;
  else
    v8 = 0x20000;
  if (a2 == 2)
    result = 65538;
  else
    result = 0x10000;
  switch(a3)
  {
    case 0u:
      return result;
    case 1u:
      result = v8;
      break;
    case 2u:
      isPBTypeSupportedInGlobalPBSession = QMIPhonebookCommandDriver::isPBTypeSupportedInGlobalPBSession(a1, a2);
      result = v7;
      if (isPBTypeSupportedInGlobalPBSession)
        result = QMIPhonebookCommandDriver::getGlobalPhonebookType(a1, a2) | 0x40000;
      break;
    case 3u:
      result = QMIPhonebookCommandDriver::getGlobalPhonebookType(a1, a2) | 0x10000;
      break;
    case 4u:
      result = v6;
      break;
    case 5u:
      result = v5;
      break;
    default:
      result = a3;
      break;
  }
  return result;
}

BOOL QMIPhonebookCommandDriver::isPBTypeSupportedInGlobalPBSession(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  _DWORD *v9;
  _DWORD *v10;

  v4 = *(_QWORD *)(a1 + 120);
  v2 = a1 + 120;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = *(_DWORD *)(v3 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 32) > a2 || *(unsigned __int8 *)(v5 + 40) == 255)
    return 0;
  v10 = *(_DWORD **)(v5 + 48);
  v9 = *(_DWORD **)(v5 + 56);
  if (v10 != v9)
  {
    while (*v10 != 2)
    {
      if (++v10 == v9)
      {
        v10 = v9;
        return v10 != v9;
      }
    }
  }
  return v10 != v9;
}

uint64_t QMIPhonebookCommandDriver::getGlobalPhonebookType(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;

  if ((a2 - 1) > 1)
    return 6;
  v4 = *(_QWORD *)(a1 + 120);
  v2 = a1 + 120;
  v3 = v4;
  if (!v4)
    return 255;
  v5 = v2;
  do
  {
    v6 = *(_DWORD *)(v3 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *(_DWORD *)(v5 + 32) <= a2)
    return *(unsigned __int8 *)(v5 + 40);
  else
    return 255;
}

void QMIPhonebookCommandDriver::create(uint64_t a1@<X0>, dispatch_object_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  dispatch_object_t object;

  v6 = operator new();
  object = *a2;
  *a2 = 0;
  QMIPhonebookCommandDriver::QMIPhonebookCommandDriver(v6, a1, &object);
  *a3 = 0;
  a3[1] = 0;
  std::shared_ptr<QMIPhonebookCommandDriver>::shared_ptr[abi:ne180100]<QMIPhonebookCommandDriver,std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver*)#1},void>(a3, v6);
  if (object)
    dispatch_release(object);
}

void sub_21699B498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  uint64_t v10;
  int v11;

  if (object)
    dispatch_release(object);
  if (v11)
    MEMORY[0x2199FEAC4](v10, 0x10F1C40853389E9);
  _Unwind_Resume(exception_object);
}

uint64_t QMIPhonebookCommandDriver::QMIPhonebookCommandDriver(uint64_t a1, uint64_t a2, NSObject **a3)
{
  capabilities::ct *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *object;
  _QWORD v15[3];
  _QWORD *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  object = *a3;
  *a3 = 0;
  PhonebookCommandDriver::PhonebookCommandDriver();
  v4 = (capabilities::ct *)object;
  if (object)
    dispatch_release(object);
  v15[0] = &unk_24D5C4F88;
  v16 = v15;
  *(_QWORD *)(a1 + 88) = 0;
  if ((capabilities::ct::supportsGemini(v4) & 1) == 0)
  {
    v5 = (_QWORD *)operator new();
    *v5 = &off_24D5D6740;
    v5[1] = a1;
    v6 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v5;
    if (!v6)
      goto LABEL_14;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (!*(_QWORD *)(a1 + 88))
  {
    v7 = (_QWORD *)operator new();
    std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v15);
    SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLoggerDefault(v7);
    v8 = v18;
    if (v18 == v17)
    {
      v9 = 4;
      v8 = v17;
    }
    else
    {
      if (!v18)
        goto LABEL_12;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_12:
    v10 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_14:
  v11 = v16;
  if (v16 == v15)
  {
    v12 = 4;
    v11 = v15;
    goto LABEL_18;
  }
  if (v16)
  {
    v12 = 5;
LABEL_18:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  *(_QWORD *)a1 = &off_24D5D62E0;
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 96), *(os_log_s **)(a1 + 40));
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  return a1;
}

void sub_21699B6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  PhonebookCommandDriver *v17;
  uint64_t v18;
  char *v19;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v21 = a17;
  if (a17 == v19)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  MEMORY[0x2199FEAC4](v18, 0x10A1C40FF1576FELL);
  v23 = *((_QWORD *)v17 + 11);
  *((_QWORD *)v17 + 11) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = a13;
  if (a13 == &a10)
  {
    v25 = 4;
    v24 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_13;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_13:
  PhonebookCommandDriver::~PhonebookCommandDriver(v17);
  _Unwind_Resume(a1);
}

void sub_21699B77C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  JUMPOUT(0x21699B774);
}

_QWORD *QMIPhonebookCommandDriver::bootstrap_sync(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t (*v33)(_QWORD);
  _DWORD *v34;
  int v35;
  uint64_t **v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t **v39;
  _DWORD *v40;
  __int128 *p_buf;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  __int128 *v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  __int128 *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *result;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t (*v59)(_QWORD);
  __int128 v60;
  void *v61[2];
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void *__p;
  char v67;
  dispatch_object_t object;
  _QWORD v69[3];
  _QWORD *v70;
  _QWORD v71[3];
  _QWORD *v72;
  __int128 buf;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I bootstrapping", (uint8_t *)&buf, 2u);
  }
  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  subscriber::makeSimSlotRange();
  v10 = v57;
  if (v57 != v58)
  {
    while ((v59(*v10) & 1) == 0)
    {
      if (++v10 == v58)
      {
        v10 = v58;
        break;
      }
    }
    while (v10 != v58)
    {
      if (*v10 == 1)
      {
        v11 = "phonebook.1";
      }
      else if (*v10 == 2)
      {
        v11 = "phonebook.2";
      }
      else
      {
        v11 = 0;
      }
      v12 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v12 || (v13 = *(_QWORD *)(a1 + 8), (v14 = std::__shared_weak_count::lock(v12)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v15 = v14;
      p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
      do
        v17 = __ldxr(p_shared_weak_owners);
      while (__stxr(v17 + 1, p_shared_weak_owners));
      v18 = (unint64_t *)&v14->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v15);
      }
      Registry::getServerConnection(*(Registry **)(a1 + 48));
      buf = 0u;
      v74 = 0u;
      std::string::basic_string[abi:ne180100]<0>(v61, v11);
      v20 = *(NSObject **)(a1 + 24);
      object = v20;
      if (v20)
        dispatch_retain(v20);
      std::string::basic_string[abi:ne180100]<0>(&__p, "phonebook");
      v64 = 0;
      v65 = 0;
      v21 = std::__shared_weak_count::lock(v15);
      if (v21)
      {
        v22 = v21;
        v23 = (unint64_t *)&v21->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        v64 = v13;
        v65 = v21;
        std::__shared_weak_count::__release_weak(v15);
        v25 = (unint64_t *)&v22->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (v26)
          goto LABEL_37;
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        v15 = v22;
      }
      else
      {
        v64 = 0;
        v65 = 0;
      }
      std::__shared_weak_count::__release_weak(v15);
LABEL_37:
      v63 = v60;
      v60 = 0uLL;
      qmi::Client::createWithQueueLocal();
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v65)
        std::__shared_weak_count::__release_weak(v65);
      if (v67 < 0)
        operator delete(__p);
      if (object)
        dispatch_release(object);
      if (SBYTE7(v62) < 0)
        operator delete(v61[0]);
      v61[0] = 0;
      v61[1] = 0;
      v62 = v74;
      v74 = 0uLL;
      qmi::ClientRouter::addClient();
      qmi::Client::~Client((qmi::Client *)v61);
      qmi::ClientRouter::get();
      qmi::Client::~Client((qmi::Client *)&buf);
      v30 = v10 + 1;
      v10 = v58;
      if (v30 != v58)
      {
        v10 = v30;
        while ((v59(*v10) & 1) == 0)
        {
          if (++v10 == v58)
          {
            v10 = v58;
            break;
          }
        }
      }
    }
  }
  subscriber::makeSimSlotRange();
  v31 = (_DWORD *)*((_QWORD *)&buf + 1);
  v32 = (_DWORD *)buf;
  if ((_QWORD)buf != *((_QWORD *)&buf + 1))
  {
    v33 = (uint64_t (*)(_QWORD))v74;
    while ((v33(*v32) & 1) == 0)
    {
      if (++v32 == v31)
      {
        v32 = v31;
        break;
      }
    }
    v34 = (_DWORD *)*((_QWORD *)&buf + 1);
    while (v32 != v34)
    {
      LODWORD(v61[0]) = 0;
      LODWORD(v61[0]) = *v32;
      v35 = (int)v61[0];
      v36 = std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(a1 + 112), (int)v61[0], v61);
      v38 = v36 + 6;
      v37 = v36[6];
      *((_BYTE *)v36 + 40) = -1;
      if (v37)
      {
        v36[7] = v37;
        operator delete(v37);
        *v38 = 0;
        v38[1] = 0;
        v38[2] = 0;
      }
      *v38 = 0;
      v38[1] = 0;
      v38[2] = 0;
      v39 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(a1 + 136), v35, v61)+ 6;
      std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*v39);
      *(v39 - 1) = (uint64_t *)v39;
      *v39 = 0;
      v39[1] = 0;
      v40 = v32 + 1;
      v32 = v31;
      if (v40 != v31)
      {
        v32 = v40;
        while ((v33(*v32) & 1) == 0)
        {
          if (++v32 == v31)
          {
            v32 = v31;
            break;
          }
        }
      }
    }
  }
  *(_QWORD *)&buf = &off_24D5D6780;
  *((_QWORD *)&buf + 1) = a1;
  *((_QWORD *)&v74 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  p_buf = (__int128 *)*((_QWORD *)&v74 + 1);
  if (*((__int128 **)&v74 + 1) == &buf)
  {
    v42 = 4;
    p_buf = &buf;
  }
  else
  {
    if (!*((_QWORD *)&v74 + 1))
      goto LABEL_75;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)p_buf + 8 * v42))();
LABEL_75:
  *(_QWORD *)&buf = &off_24D5D6800;
  *((_QWORD *)&buf + 1) = a1;
  *((_QWORD *)&v74 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  v43 = (__int128 *)*((_QWORD *)&v74 + 1);
  if (*((__int128 **)&v74 + 1) == &buf)
  {
    v44 = 4;
    v43 = &buf;
  }
  else
  {
    if (!*((_QWORD *)&v74 + 1))
      goto LABEL_80;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_80:
  *(_QWORD *)&buf = &off_24D5D6880;
  *((_QWORD *)&buf + 1) = a1;
  *((_QWORD *)&v74 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  v45 = (__int128 *)*((_QWORD *)&v74 + 1);
  if (*((__int128 **)&v74 + 1) == &buf)
  {
    v46 = 4;
    v45 = &buf;
  }
  else
  {
    if (!*((_QWORD *)&v74 + 1))
      goto LABEL_85;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_85:
  *(_QWORD *)&buf = &off_24D5D6900;
  *((_QWORD *)&buf + 1) = a1;
  *((_QWORD *)&v74 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  v47 = (__int128 *)*((_QWORD *)&v74 + 1);
  if (*((__int128 **)&v74 + 1) == &buf)
  {
    v48 = 4;
    v47 = &buf;
  }
  else
  {
    if (!*((_QWORD *)&v74 + 1))
      goto LABEL_90;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_90:
  *(_QWORD *)&buf = &off_24D5D6980;
  *((_QWORD *)&buf + 1) = a1;
  *((_QWORD *)&v74 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  v49 = (__int128 *)*((_QWORD *)&v74 + 1);
  if (*((__int128 **)&v74 + 1) == &buf)
  {
    v50 = 4;
    v49 = &buf;
  }
  else
  {
    if (!*((_QWORD *)&v74 + 1))
      goto LABEL_95;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_95:
  *(_QWORD *)&buf = &off_24D5D6A00;
  *((_QWORD *)&buf + 1) = a1;
  *((_QWORD *)&v74 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  v51 = (__int128 *)*((_QWORD *)&v74 + 1);
  if (*((__int128 **)&v74 + 1) == &buf)
  {
    v52 = 4;
    v51 = &buf;
  }
  else
  {
    if (!*((_QWORD *)&v74 + 1))
      goto LABEL_100;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_100:
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 96));
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 96));
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 96));
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 96));
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 96));
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 96));
  v71[0] = &off_24D5D6A80;
  v71[1] = a1;
  v72 = v71;
  qmi::ClientRouter::setHandler();
  v53 = v72;
  if (v72 == v71)
  {
    v54 = 4;
    v53 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_105;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_105:
  v69[0] = &off_24D5D6B00;
  v69[1] = a1;
  v70 = v69;
  qmi::ClientRouter::setHandler();
  result = v70;
  if (v70 == v69)
  {
    v56 = 4;
    result = v69;
  }
  else
  {
    if (!v70)
      return result;
    v56 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v56))();
}

void sub_21699BF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,dispatch_object_t object,char a35,uint64_t a36,uint64_t a37,char *a38)
{
  char *v38;
  char *v40;
  uint64_t v41;

  v40 = a38;
  if (a38 == v38)
  {
    v41 = 4;
    v40 = &a35;
  }
  else
  {
    if (!a38)
      goto LABEL_6;
    v41 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t QMIPhonebookCommandDriver::start_sync(QMIPhonebookCommandDriver *this)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I starting", v3, 2u);
  }
  return qmi::ClientRouter::start();
}

uint64_t QMIPhonebookCommandDriver::shutdown_sync()
{
  return qmi::ClientRouter::stop();
}

void QMIPhonebookCommandDriver::~QMIPhonebookCommandDriver(QMIPhonebookCommandDriver *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D5D62E0;
  std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::destroy(*((_QWORD **)this + 18));
  std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::destroy(*((_QWORD **)this + 15));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PhonebookCommandDriver::~PhonebookCommandDriver(this);
}

{
  QMIPhonebookCommandDriver::~QMIPhonebookCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void QMIPhonebookCommandDriver::reset(uint64_t a1, int a2)
{
  uint64_t **v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t **v7;
  int v8;

  v8 = a2;
  v4 = std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(a1 + 112), a2, &v8);
  *((_BYTE *)v4 + 40) = -1;
  v6 = v4 + 6;
  v5 = v4[6];
  if (v5)
  {
    v4[7] = v5;
    operator delete(v5);
  }
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  v7 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(a1 + 136), a2, &v8)+ 6;
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*v7);
  *(v7 - 1) = (uint64_t *)v7;
  *v7 = 0;
  v7[1] = 0;
}

uint64_t ___ZN25QMIPhonebookCommandDriver22handleRecordUpdate_indEN3qmi16SubscriptionTypeERKN3pbm12RecordUpdate10IndicationE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t PbTypeFor;

  result = *a2;
  if (result > 0xA)
    return result;
  v5 = *((unsigned __int16 *)a2 + 1);
  if (((1 << result) & 0x4C0) != 0)
  {
    if (v5 != 4 && v5 != 1)
      return result;
LABEL_12:
    v7 = a2[4] - 1;
    if (v7 <= 2)
    {
      v8 = *(_QWORD *)&asc_216AAD290[8 * (char)v7];
      v9 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 64);
      v10 = *(unsigned int *)(a1 + 44);
      PbTypeFor = QMIPhonebookCommandDriver::getPbTypeFor(result, v5);
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v9 + 8 * v8))(v9, v10, PbTypeFor, *((unsigned __int16 *)a2 + 3));
    }
    return result;
  }
  if (((1 << result) & 5) != 0
    && (_DWORD)result == 2 * (*(_DWORD *)(a1 + 40) == 2)
    && (v5 <= 8 && ((1 << v5) & 0x116) != 0 || v5 == 128))
  {
    goto LABEL_12;
  }
  return result;
}

__n128 __Block_byref_object_copy__3(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN25QMIPhonebookCommandDriver23handleEmergencyList_indEN3qmi16SubscriptionTypeERKN3pbm13EmergencyList10IndicationE_block_invoke(uint64_t a1, unsigned __int8 **a2)
{
  populateEmergencyNumberCategory(*(os_log_t **)(a1 + 40), (std::vector<std::string> *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *a2, a2[1]);
}

void populateEmergencyNumberCategory(os_log_t *a1, std::vector<std::string> *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  std::allocator<std::string> *p_end_cap;
  NSObject *v8;
  std::string *v9;
  char **v10;
  unsigned __int8 *v11;
  NSObject *v12;
  std::__split_buffer<std::string>::pointer p_buf;
  NSObject *v14;
  std::string *v15;
  size_t v16;
  std::string *v17;
  __int128 *v18;
  size_t v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  std::vector<std::string>::pointer end;
  std::string *value;
  std::string::size_type v25;
  std::string *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  std::string *v31;
  std::string *v32;
  std::string::size_type v33;
  unsigned __int8 *v35;
  std::string v36;
  char __str[4];
  _QWORD v38[2];
  __int128 v39;
  uint64_t v40;
  std::__split_buffer<std::string> buf;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a3 != a4)
  {
    v4 = a3;
    p_end_cap = (std::allocator<std::string> *)&a2->__end_cap_;
    do
    {
      v8 = *a1;
      if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (std::string *)pbm::asString(*v4);
        LODWORD(buf.__first_) = 136315138;
        *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v9;
        _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I Session Type: %s", (uint8_t *)&buf, 0xCu);
        v8 = *a1;
      }
      v10 = (char **)*((_QWORD *)v4 + 1);
      v11 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v35 = v4;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__first_) = 134217984;
        *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)((v11 - (unsigned __int8 *)v10) >> 5);
        _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I Emergency numbers count: %lu", (uint8_t *)&buf, 0xCu);
      }
      while (v10 != (char **)v11)
      {
        v12 = *a1;
        if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
        {
          pbm::asString(*(unsigned __int8 *)v10, &buf);
          p_buf = (std::__split_buffer<std::string>::pointer)&buf;
          if (SHIBYTE(buf.__end_) < 0)
            p_buf = buf.__first_;
          LODWORD(v39) = 136315138;
          *(_QWORD *)((char *)&v39 + 4) = p_buf;
          _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I Number category %s", (uint8_t *)&v39, 0xCu);
          if (SHIBYTE(buf.__end_) < 0)
            operator delete(buf.__first_);
        }
        *(_DWORD *)__str = 0;
        snprintf(__str, 4uLL, "%hhu", *(unsigned __int8 *)v10);
        v39 = 0uLL;
        v40 = 0;
        std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v39, v10[1], v10[2], v10[2] - v10[1]);
        v14 = *a1;
        if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
        {
          if (v40 >= 0)
            v15 = (std::string *)&v39;
          else
            v15 = (std::string *)v39;
          LODWORD(buf.__first_) = 136315138;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v15;
          _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I Emergency Number: %s", (uint8_t *)&buf, 0xCu);
        }
        if (v40 >= 0)
          v16 = HIBYTE(v40);
        else
          v16 = *((_QWORD *)&v39 + 1);
        memset(&v36, 0, sizeof(v36));
        std::string::basic_string[abi:ne180100]((uint64_t)&v36, v16 + 1);
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v36;
        else
          v17 = (std::string *)v36.__r_.__value_.__r.__words[0];
        if (v16)
        {
          if (v40 >= 0)
            v18 = &v39;
          else
            v18 = (__int128 *)v39;
          memmove(v17, v18, v16);
        }
        *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 44;
        v19 = strlen(__str);
        v20 = std::string::append(&v36, __str, v19);
        v21 = v20->__r_.__value_.__r.__words[0];
        v38[0] = v20->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
        v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        end = a2->__end_;
        value = a2->__end_cap_.__value_;
        if (end >= value)
        {
          v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a2->__begin_) >> 3);
          v28 = v27 + 1;
          if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a2->__begin_) >> 3);
          if (2 * v29 > v28)
            v28 = 2 * v29;
          if (v29 >= 0x555555555555555)
            v30 = 0xAAAAAAAAAAAAAAALL;
          else
            v30 = v28;
          buf.__end_cap_.__value_ = p_end_cap;
          if (v30)
            v31 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v30);
          else
            v31 = 0;
          v32 = v31 + v27;
          buf.__first_ = v31;
          buf.__begin_ = v32;
          buf.__end_cap_.__value_ = &v31[v30];
          v33 = v38[0];
          v32->__r_.__value_.__r.__words[0] = v21;
          v32->__r_.__value_.__l.__size_ = v33;
          *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v38 + 7);
          *((_BYTE *)&v32->__r_.__value_.__s + 23) = v22;
          buf.__end_ = v32 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(a2, &buf);
          v26 = a2->__end_;
          std::__split_buffer<std::string>::~__split_buffer(&buf);
        }
        else
        {
          v25 = v38[0];
          end->__r_.__value_.__r.__words[0] = v21;
          end->__r_.__value_.__l.__size_ = v25;
          *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v38 + 7);
          *((_BYTE *)&end->__r_.__value_.__s + 23) = v22;
          v26 = end + 1;
          a2->__end_ = end + 1;
        }
        a2->__end_ = v26;
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        if (SHIBYTE(v40) < 0)
          operator delete((void *)v39);
        v10 += 4;
      }
      v4 = v35 + 32;
    }
    while (v35 + 32 != a4);
  }
}

void sub_21699C7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,std::__split_buffer<std::string> *a33)
{
  int v33;
  void *v34;

  if (v33 < 0)
    operator delete(v34);
  if (a22 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void ___ZN25QMIPhonebookCommandDriver23handleEmergencyList_indEN3qmi16SubscriptionTypeERKN3pbm13EmergencyList10IndicationE_block_invoke_10(uint64_t a1, unsigned __int8 **a2)
{
  os_log_t *v2;
  _QWORD *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  NSObject *v6;
  char **v7;
  char **v8;
  NSObject *v9;
  const char *v10;
  unint64_t v11;
  NSObject *v12;
  std::string *p_buf;
  std::string *p_s;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unsigned __int8 *v22;
  std::string v23;
  std::string __s;
  _BYTE v25[24];
  std::string buf;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = *(os_log_t **)(a1 + 40);
  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *a2;
  v4 = a2[1];
  v6 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (v4 - v5) >> 5;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Local Emergency sets count: %lu", (uint8_t *)&buf, 0xCu);
  }
  if (v5 != v4)
  {
    v22 = v4;
    do
    {
      v7 = (char **)*((_QWORD *)v5 + 1);
      v8 = (char **)*((_QWORD *)v5 + 2);
      v9 = *v2;
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
      {
        v10 = pbm::asString(*v5);
        v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + 2) - *((_QWORD *)v5 + 1)) >> 4);
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
        _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I Local Emergency Session Type: %s list count: %lu", (uint8_t *)&buf, 0x16u);
      }
      while (v7 != v8)
      {
        memset(&buf, 0, sizeof(buf));
        std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&buf, v7[3], v7[4], v7[4] - v7[3]);
        memset(&__s, 0, sizeof(__s));
        std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__s, *v7, v7[1], v7[1] - *v7);
        v12 = *v2;
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
        {
          p_buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          p_s = &__s;
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          *(_DWORD *)v25 = 136315394;
          *(_QWORD *)&v25[4] = p_buf;
          *(_WORD *)&v25[12] = 2080;
          *(_QWORD *)&v25[14] = p_s;
          _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I Local Emergency Number: %s, Sub Service: %s", v25, 0x16u);
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__s.__r_.__value_.__l.__size_)
          {
            std::string::__init_copy_ctor_external(&v23, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            goto LABEL_19;
          }
        }
        else if (*((_BYTE *)&__s.__r_.__value_.__s + 23))
        {
          v23 = __s;
          goto LABEL_19;
        }
        std::string::basic_string[abi:ne180100]<0>(&v23, "0");
LABEL_19:
        v15 = std::string::insert(&v23, 0, ",", 1uLL);
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        *(_QWORD *)&v25[16] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
        *(_OWORD *)v25 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (v25[23] >= 0)
          v17 = v25;
        else
          v17 = *(const std::string::value_type **)v25;
        if (v25[23] >= 0)
          v18 = v25[23];
        else
          v18 = *(_QWORD *)&v25[8];
        std::string::append(&buf, v17, v18);
        if ((v25[23] & 0x80000000) != 0)
          operator delete(*(void **)v25);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
        v19 = v3[6];
        if (v19 >= v3[7])
        {
          v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3 + 5, (__int128 *)&buf);
        }
        else
        {
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v3[6], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
          }
          else
          {
            v20 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
            *(_QWORD *)(v19 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
            *(_OWORD *)v19 = v20;
          }
          v21 = v19 + 24;
          v3[6] = v19 + 24;
        }
        v3[6] = v21;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v7 += 6;
      }
      v5 += 32;
    }
    while (v5 != v22);
  }
}

void sub_21699CB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)(v38 + 48) = v37;
  if (a24 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

void ___ZN25QMIPhonebookCommandDriver27handlePhoneBookInitDone_indEN3qmi16SubscriptionTypeERKN3pbm17PhoneBookInitDone10IndicationE_block_invoke(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int *v5;
  unsigned int v6;
  NSObject *v7;
  unsigned __int16 v8;
  NSObject *v9;
  _BYTE *v10;
  uint64_t PbTypeFor;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t **v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  int v24;
  NSObject *v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  char *v29;
  uint64_t *v30;
  NSObject *v31;
  const char *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  int v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t **v50;
  unint64_t *v51;
  uint64_t **v52;
  unsigned __int8 *v53;
  uint64_t **v54;
  std::__shared_weak_count *v55;
  uint64_t **v56;
  std::__shared_weak_count *v57;
  _BYTE buf[12];
  char v59;
  uint8_t v60[4];
  _BYTE *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v53 = a2[1];
  if (*a2 != v53)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v52 = (uint64_t **)(v4 + 112);
    v5 = (int *)(a1 + 52);
    do
    {
      v6 = *v2;
      if (v6 == 2 * (*(_DWORD *)(a1 + 48) == 2))
      {
        if ((*((_WORD *)v2 + 1) & 4) != 0)
        {
          v7 = **(NSObject ***)(a1 + 40);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I MSISDN is present in the GW voice session", buf, 2u);
          }
        }
        v8 = 1;
        do
        {
          if ((v8 & *((_WORD *)v2 + 1)) != 0)
          {
            v9 = **(NSObject ***)(a1 + 40);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              pbm::asString(v8, buf);
              v10 = buf;
              if (v59 < 0)
                v10 = *(_BYTE **)buf;
              *(_DWORD *)v60 = 136315138;
              v61 = v10;
              _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I Found phone book type: %s", v60, 0xCu);
              if (v59 < 0)
                operator delete(*(void **)buf);
            }
            PbTypeFor = QMIPhonebookCommandDriver::getPbTypeFor(*v2, v8);
            if ((_DWORD)PbTypeFor != 6)
            {
              v12 = PbTypeFor;
              v13 = **(NSObject ***)(a1 + 40);
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                v14 = asString();
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = v14;
                _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I Found CSI Phone book type: %s", buf, 0xCu);
              }
              v15 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v4 + 136), *v5, v5);
              std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)v15 + 5, v12, v12);
              (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 64) + 88))(*(_QWORD *)(v4 + 64), *v5, v12, 1);
            }
          }
          v16 = v8;
          v8 *= 2;
        }
        while (v16 < 0x41);
        v17 = *(_QWORD *)(v4 + 64);
        v18 = *v5;
        v19 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v4 + 136), *v5, v5);
        std::allocate_shared[abi:ne180100]<std::set<PhoneBookType>,std::allocator<std::set<PhoneBookType>>,std::set<PhoneBookType>&,void>(&v56, v19 + 5);
        (*(void (**)(uint64_t, uint64_t, uint64_t ***))(*(_QWORD *)v17 + 96))(v17, v18, &v56);
        v20 = v57;
        if (!v57)
          goto LABEL_64;
        p_shared_owners = (unint64_t *)&v57->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
      }
      else
      {
        if (v6 > 0xA || ((1 << v6) & 0x4C0) == 0)
        {
          v31 = **(NSObject ***)(a1 + 40);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            v32 = pbm::asString(v6);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v32;
            _os_log_impl(&dword_216897000, v31, OS_LOG_TYPE_DEFAULT, "#I We only care about GW Voice/Global phonebook, ignoring type %s", buf, 0xCu);
          }
          goto LABEL_64;
        }
        *((_BYTE *)std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(v52, *v5, v5)+ 40) = v6;
        v24 = *v5;
        if (QMIPhonebookCommandDriver::isPBTypeSupportedInGlobalPBSession(v4, *v5) || (*((_WORD *)v2 + 1) & 4) == 0)
          goto LABEL_64;
        v25 = **(NSObject ***)(a1 + 40);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_216897000, v25, OS_LOG_TYPE_DEFAULT, "#I MSISDN is there under Global phone book", buf, 2u);
          v24 = *v5;
        }
        v26 = std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(v52, v24, v5);
        v27 = v26;
        v29 = (char *)v26[7];
        v28 = v26[8];
        if (v29 >= (char *)v28)
        {
          v33 = v26[6];
          v34 = (v29 - (char *)v33) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v36 = (char *)v28 - (char *)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          v37 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v35;
          if (v37)
          {
            if (v37 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v38 = (char *)operator new(4 * v37);
            v33 = v27[6];
            v29 = (char *)v27[7];
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = 2;
          v30 = (uint64_t *)(v39 + 4);
          while (v29 != (char *)v33)
          {
            v40 = *((_DWORD *)v29 - 1);
            v29 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          v27[6] = (uint64_t *)v39;
          v27[7] = v30;
          v27[8] = (uint64_t *)&v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v29 = 2;
          v30 = (uint64_t *)(v29 + 4);
        }
        v27[7] = v30;
        v41 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v4 + 136), *v5, v5);
        v43 = v41 + 6;
        v42 = v41[6];
        if (v42)
        {
          while (1)
          {
            while (1)
            {
              v44 = (uint64_t **)v42;
              v45 = *((_DWORD *)v42 + 7);
              if (v45 < 3)
                break;
              v42 = *v44;
              v46 = v44;
              if (!*v44)
                goto LABEL_59;
            }
            if (v45 == 2)
              break;
            v42 = v44[1];
            if (!v42)
            {
              v46 = v44 + 1;
              goto LABEL_59;
            }
          }
        }
        else
        {
          v46 = v41 + 6;
          v44 = v41 + 6;
LABEL_59:
          v47 = (uint64_t *)operator new(0x20uLL);
          *((_DWORD *)v47 + 7) = 2;
          std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(v43 - 1, (uint64_t)v44, v46, v47);
        }
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 64) + 88))(*(_QWORD *)(v4 + 64), *v5, 2, 1);
        v48 = *(_QWORD *)(v4 + 64);
        v49 = *v5;
        v50 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v4 + 136), *v5, v5);
        std::allocate_shared[abi:ne180100]<std::set<PhoneBookType>,std::allocator<std::set<PhoneBookType>>,std::set<PhoneBookType>&,void>(&v54, v50 + 5);
        (*(void (**)(uint64_t, uint64_t, uint64_t ***))(*(_QWORD *)v48 + 96))(v48, v49, &v54);
        v20 = v55;
        if (!v55)
          goto LABEL_64;
        v51 = (unint64_t *)&v55->__shared_owners_;
        do
          v22 = __ldaxr(v51);
        while (__stlxr(v22 - 1, v51));
      }
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
LABEL_64:
      v2 += 4;
    }
    while (v2 != v53);
  }
}

void sub_21699D180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMIPhonebookCommandDriver::getPhoneBookCapabilities(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  const void **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t QMIPbTypeFor;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  __int128 v39;
  _QWORD v40[5];
  std::__shared_weak_count *v41;
  char *v42;
  std::__shared_weak_count *v43;
  _QWORD aBlock[5];

  if ((a2 - 1) >= 3)
    v6 = 0;
  else
    v6 = a2;
  if ((qmi::ClientRouter::has() & 1) != 0)
  {
    *(_OWORD *)__p = 0u;
    v39 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v7 = (const void **)__p[1];
    if (__p[1] != (void *)v39)
    {
      while (*((_BYTE *)*v7 + 8) != 1)
      {
        if (++v7 == (const void **)v39)
          goto LABEL_13;
      }
    }
    if (v7 == (const void **)v39)
    {
LABEL_13:
      v10 = operator new();
      v11 = v10;
      *(_BYTE *)(v10 + 8) = 1;
      *(_QWORD *)v10 = &off_24D5D6DD8;
      *(_BYTE *)(v10 + 10) = 0;
      v9 = (char *)(v10 + 10);
      *(_WORD *)(v10 + 12) = 0;
      v12 = v39;
      if ((unint64_t)v39 >= *((_QWORD *)&v39 + 1))
      {
        v14 = (uint64_t)(v39 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = (uint64_t)(*((_QWORD *)&v39 + 1) - (unint64_t)__p[1]) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if (*((_QWORD *)&v39 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v39 + 8, v16);
        else
          v17 = 0;
        v18 = (uint64_t *)&v17[8 * v14];
        v19 = &v17[8 * v16];
        *v18 = v11;
        v13 = v18 + 1;
        v21 = (char *)__p[1];
        v20 = (char *)v39;
        if ((void *)v39 != __p[1])
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v18 = v22;
          }
          while (v20 != v21);
          v20 = (char *)__p[1];
        }
        __p[1] = v18;
        *(_QWORD *)&v39 = v13;
        *((_QWORD *)&v39 + 1) = v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v39 = v10;
        v13 = (_QWORD *)(v12 + 8);
      }
      *(_QWORD *)&v39 = v13;
    }
    else
    {
      if (!v8)
        __cxa_bad_cast();
      v9 = v8 + 10;
    }
    QMIPbTypeFor = QMIPhonebookCommandDriver::getQMIPbTypeFor(a1, a2, a3);
    *v9 = QMIPbTypeFor;
    *((_WORD *)v9 + 1) = WORD1(QMIPbTypeFor);
    v24 = qmi::ClientRouter::get();
    v25 = operator new();
    *(_QWORD *)v25 = v24;
    *(_QWORD *)(v25 + 8) = QMIServiceMsg::create();
    *(_DWORD *)(v25 + 16) = 25000;
    *(_QWORD *)(v25 + 24) = 0;
    *(_QWORD *)(v25 + 32) = 0;
    v37 = v25;
    v26 = operator new(0x28uLL);
    v26[1] = 0;
    v27 = v26 + 1;
    v26[2] = 0;
    *v26 = &off_24D5D6E40;
    v26[3] = a1;
    *((_DWORD *)v26 + 8) = v6;
    v42 = (char *)(v26 + 3);
    v43 = (std::__shared_weak_count *)v26;
    v28 = MEMORY[0x24BDAC760];
    v40[0] = MEMORY[0x24BDAC760];
    v40[1] = 1174405120;
    v40[2] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver24getPhoneBookCapabilitiesEN10subscriber7SimSlotE13PhoneBookTypeE3__0EEOS1_OT__block_invoke;
    v40[3] = &__block_descriptor_tmp_71_3;
    v40[4] = v26 + 3;
    v41 = (std::__shared_weak_count *)v26;
    do
      v29 = __ldxr(v27);
    while (__stxr(v29 + 1, v27));
    aBlock[0] = v28;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_16;
    aBlock[3] = &unk_24D5D6D40;
    aBlock[4] = v40;
    *(_QWORD *)(v25 + 32) = _Block_copy(aBlock);
    v30 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v43;
    if (v43)
    {
      v34 = (unint64_t *)&v43->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v37;
    v37 = 0;
    if (v36)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v37, v36);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), a2, 0x400000001);
  }
}

void sub_21699D568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (a3)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v4, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 53) = *(_QWORD *)(a2 + 53);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;

  result = QMIPhonebookCommandDriver::getPbTypeFor(*a2, *((unsigned __int16 *)a2 + 1));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 44) = *((_WORD *)a2 + 2);
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 46) = *((_WORD *)a2 + 3);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = a2[8];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 49) = a2[9];
  return result;
}

uint64_t ___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke_2(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 52) = *a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 53) = a2[1];
  return result;
}

void QMIPhonebookCommandDriver::fetch(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4, __int16 a5)
{
  int v10;
  const void **v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t QMIPbTypeFor;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *__p[2];
  __int128 v43;
  _QWORD v44[5];
  std::__shared_weak_count *v45;
  char *v46;
  std::__shared_weak_count *v47;
  _QWORD aBlock[6];

  if ((a2 - 1) >= 3)
    v10 = 0;
  else
    v10 = a2;
  if ((qmi::ClientRouter::has() & 1) != 0)
  {
    *(_OWORD *)__p = 0u;
    v43 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v11 = (const void **)__p[1];
    if (__p[1] != (void *)v43)
    {
      while (*((_BYTE *)*v11 + 8) != 1)
      {
        if (++v11 == (const void **)v43)
          goto LABEL_13;
      }
    }
    if (v11 == (const void **)v43)
    {
LABEL_13:
      v14 = operator new();
      v15 = v14;
      *(_BYTE *)(v14 + 8) = 1;
      *(_BYTE *)(v14 + 10) = 0;
      v13 = (char *)(v14 + 10);
      *(_QWORD *)v14 = &off_24D5D66A8;
      *(_DWORD *)(v14 + 12) = 0;
      *(_WORD *)(v14 + 16) = 0;
      v16 = v43;
      if ((unint64_t)v43 >= *((_QWORD *)&v43 + 1))
      {
        v18 = (uint64_t)(v43 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v18 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v19 = (uint64_t)(*((_QWORD *)&v43 + 1) - (unint64_t)__p[1]) >> 2;
        if (v19 <= v18 + 1)
          v19 = v18 + 1;
        if (*((_QWORD *)&v43 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v43 + 8, v20);
        else
          v21 = 0;
        v22 = (uint64_t *)&v21[8 * v18];
        v23 = &v21[8 * v20];
        *v22 = v15;
        v17 = v22 + 1;
        v25 = (char *)__p[1];
        v24 = (char *)v43;
        if ((void *)v43 != __p[1])
        {
          do
          {
            v26 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *--v22 = v26;
          }
          while (v24 != v25);
          v24 = (char *)__p[1];
        }
        __p[1] = v22;
        *(_QWORD *)&v43 = v17;
        *((_QWORD *)&v43 + 1) = v23;
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_QWORD *)v43 = v14;
        v17 = (_QWORD *)(v16 + 8);
      }
      *(_QWORD *)&v43 = v17;
    }
    else
    {
      if (!v12)
        __cxa_bad_cast();
      v13 = v12 + 10;
    }
    QMIPbTypeFor = QMIPhonebookCommandDriver::getQMIPbTypeFor(a1, a2, a3);
    *v13 = QMIPbTypeFor;
    *((_WORD *)v13 + 1) = WORD1(QMIPbTypeFor);
    *((_WORD *)v13 + 2) = a4;
    *((_WORD *)v13 + 3) = a5;
    v28 = qmi::ClientRouter::get();
    v29 = operator new();
    *(_QWORD *)v29 = v28;
    *(_QWORD *)(v29 + 8) = QMIServiceMsg::create();
    *(_DWORD *)(v29 + 16) = 25000;
    *(_QWORD *)(v29 + 24) = 0;
    *(_QWORD *)(v29 + 32) = 0;
    v41 = v29;
    v30 = operator new(0x28uLL);
    v30[1] = 0;
    v31 = v30 + 1;
    v30[2] = 0;
    *v30 = &off_24D5D6F10;
    v30[3] = a1;
    *((_DWORD *)v30 + 8) = v10;
    *((_DWORD *)v30 + 9) = a3;
    v46 = (char *)(v30 + 3);
    v47 = (std::__shared_weak_count *)v30;
    v32 = MEMORY[0x24BDAC760];
    v44[0] = MEMORY[0x24BDAC760];
    v44[1] = 1174405120;
    v44[2] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver5fetchEN10subscriber7SimSlotE13PhoneBookTypejjE3__1EEOS1_OT__block_invoke;
    v44[3] = &__block_descriptor_tmp_72_2;
    v44[4] = v30 + 3;
    v45 = (std::__shared_weak_count *)v30;
    do
      v33 = __ldxr(v31);
    while (__stxr(v33 + 1, v31));
    aBlock[0] = v32;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3pbm19ReadRecordUndecoded8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_24D5D6F58;
    aBlock[4] = v44;
    *(_QWORD *)(v29 + 32) = _Block_copy(aBlock);
    v34 = v45;
    if (v45)
    {
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = v47;
    if (v47)
    {
      v38 = (unint64_t *)&v47->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v41;
    v41 = 0;
    if (v40)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v41, v40);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), a2, 0x400000003);
  }
}

void sub_21699DA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (a3)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v4, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN25QMIPhonebookCommandDriver20handleReadRecord_resEN3qmi16SubscriptionTypeE13PhoneBookTypeRKN3pbm19ReadRecordUndecoded8ResponseE_block_invoke(uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint8_t buf[4];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (unsigned __int16)*a2;
    *(_DWORD *)buf = 67109120;
    v19 = v6;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I There are %d phone records", buf, 8u);
  }
  if (!*a2)
  {
    v7 = *(_QWORD *)(v4 + 64);
    v8 = *(unsigned int *)(a1 + 64);
    v9 = *(unsigned int *)(a1 + 68);
    v10 = *(std::__shared_weak_count **)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 48);
    v17 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 56))(v7, v8, v9, &v16);
    v13 = v17;
    if (v17)
    {
      v14 = (unint64_t *)&v17->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_21699DC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c78_ZTSKNSt3__110shared_ptrINS_6vectorI17CSIPhoneBookEntryNS_9allocatorIS2_EEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_48c78_ZTSKNSt3__110shared_ptrINS_6vectorI17CSIPhoneBookEntryNS_9allocatorIS2_EEEEEE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 48);
}

_QWORD *__Block_byref_object_copy__31(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::destroy(*(void ***)(a1 + 48));
}

void ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke(uint64_t a1, __int16 *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  _BYTE *v6;
  uint64_t **v7;
  NSObject *v8;
  int v9;
  unsigned int v10;
  char **v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  NSObject *v15;
  unsigned int v16;
  char **v17;
  _QWORD *v18;
  NSObject *v19;
  std::string __str;
  uint8_t v22[4];
  _QWORD *v23;
  __int128 buf;
  char v25;
  std::string v26;
  int v27;
  char v28;
  std::string v29;
  std::string __p;
  __int128 v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = QMIPhonebookCommandDriver::getPbTypeFor(*((unsigned __int8 *)a2 + 2), (unsigned __int16)a2[2]);
  v4 = **(NSObject ***)(a1 + 64);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = asString();
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Response for PB Type: %s", (uint8_t *)&buf, 0xCu);
    v4 = **(NSObject ***)(a1 + 64);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *a2 != -1;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v5;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Are there more? %d", (uint8_t *)&buf, 8u);
  }
  v6 = (_BYTE *)*((_QWORD *)a2 + 1);
  if (v6 != *((_BYTE **)a2 + 2))
  {
    v7 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    do
    {
      v8 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(unsigned __int16 *)v6;
        *(_DWORD *)v22 = 67109120;
        LODWORD(v23) = v9;
        _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I Slot ID: %d", v22, 8u);
      }
      v10 = *(unsigned __int16 *)v6;
      *(_DWORD *)v22 = v10;
      v11 = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v7, v10, v22);
      v12 = (char *)*(unsigned __int16 *)v6;
      v11[5] = v12;
      *(_DWORD *)v22 = (_DWORD)v12;
      v13 = (std::string *)std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v7, v12, v22);
      PhonebookCommandDriver::decodeName();
      std::string::operator=(v13 + 2, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v14 = v6[3] | (16 * (v6[2] & 7)) | 0x80u;
      v15 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v22 = 67109120;
        LODWORD(v23) = v14;
        _os_log_impl(&dword_216897000, v15, OS_LOG_TYPE_DEFAULT, "#I TON: %d", v22, 8u);
      }
      v16 = *(unsigned __int16 *)v6;
      *(_DWORD *)v22 = v16;
      v17 = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v7, v16, v22);
      v18 = v6 + 8;
      MEMORY[0x2199FD7C8](&buf, v14, v6 + 8);
      v17[9] = (char *)buf;
      std::string::operator=((std::string *)(v17 + 10), (const std::string *)((char *)&buf + 8));
      std::string::operator=((std::string *)(v17 + 13), &v26);
      *((_DWORD *)v17 + 32) = v27;
      *((_BYTE *)v17 + 132) = v28;
      std::string::operator=((std::string *)(v17 + 17), &v29);
      std::string::operator=((std::string *)(v17 + 20), &__p);
      *(_OWORD *)(v17 + 23) = v31;
      *((_BYTE *)v17 + 200) = v32;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (v25 < 0)
        operator delete(*((void **)&buf + 1));
      v19 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        if ((char)v6[31] < 0)
          v18 = (_QWORD *)*v18;
        *(_DWORD *)v22 = 136315138;
        v23 = v18;
        _os_log_impl(&dword_216897000, v19, OS_LOG_TYPE_DEFAULT, "#I Set ASCII number to %s", v22, 0xCu);
      }
      v6 += 56;
    }
    while (v6 != *((_BYTE **)a2 + 2));
  }
}

void sub_21699E054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_34(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t **v4;
  unsigned __int16 *v5;
  unsigned int v6;
  char **v7;
  std::string __p;
  unsigned int v9;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    do
    {
      v6 = *v2;
      v5 = v2 + 4;
      v9 = v6;
      v7 = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v4, v6, &v9);
      PhonebookCommandDriver::decodeName();
      std::string::operator=((std::string *)(v7 + 46), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v2 = v5 + 12;
    }
    while (v2 != v3);
  }
}

void sub_21699E154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_2(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  char **v4;
  uint64_t **v5;
  void *v6;
  char v7;
  char *v8;
  std::string v9;
  std::string v10;
  int v11;
  char v12;
  std::string v13;
  std::string __p;
  __int128 v15;
  char v16;
  unsigned int v17[3];

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    do
    {
      if (*((_QWORD *)v2 + 1) != *((_QWORD *)v2 + 2))
      {
        v17[0] = *v2;
        v4 = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v5, v17[0], v17);
        PhonebookCommandDriver::convertToString();
        MEMORY[0x2199FD7BC](&v8, &v6);
        v4[26] = v8;
        std::string::operator=((std::string *)v4 + 9, &v9);
        std::string::operator=((std::string *)v4 + 10, &v10);
        *((_DWORD *)v4 + 66) = v11;
        *((_BYTE *)v4 + 268) = v12;
        std::string::operator=((std::string *)(v4 + 34), &v13);
        std::string::operator=((std::string *)(v4 + 37), &__p);
        *((_OWORD *)v4 + 20) = v15;
        *((_BYTE *)v4 + 336) = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v13.__r_.__value_.__l.__data_);
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v10.__r_.__value_.__l.__data_);
        if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v9.__r_.__value_.__l.__data_);
        if (v7 < 0)
          operator delete(v6);
      }
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void sub_21699E2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_3(uint64_t result, unsigned __int16 **a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char **v9;
  std::string __p;
  unsigned int v11;
  _OWORD v12[4];
  void *v13[2];
  __int128 v14;
  __int128 v15;
  _OWORD v16[9];
  uint64_t v17;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40);
    v5 = *MEMORY[0x24BEDB800];
    v6 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v7 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (*((_QWORD *)v2 + 1) != *((_QWORD *)v2 + 2))
      {
        v17 = 0;
        v15 = 0u;
        memset(v16, 0, sizeof(v16));
        *(_OWORD *)v13 = 0u;
        v14 = 0u;
        memset(v12, 0, sizeof(v12));
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
        std::ostream::operator<<();
        v8 = *v2;
        v11 = v8;
        v9 = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v4, v8, &v11);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12 + 8, &__p);
        std::string::operator=((std::string *)(v9 + 43), &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_QWORD *)&v12[0] = v5;
        *(_QWORD *)((char *)v12 + *(_QWORD *)(v5 - 24)) = v6;
        *((_QWORD *)&v12[0] + 1) = v7;
        if (SHIBYTE(v14) < 0)
          operator delete(v13[1]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        result = MEMORY[0x2199FEA70](v16);
      }
      v2 += 16;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_21699E49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a14 < 0)
    operator delete(__p);
  *(uint64_t *)((char *)&a16 + *(_QWORD *)(v31 - 24)) = v32;
  a17 = MEMORY[0x24BEDB848] + 16;
  if (a30 < 0)
    operator delete(a25);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2199FEA70](v30);
  _Unwind_Resume(a1);
}

void ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_4(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t **v4;
  unsigned int v5;
  char **v6;
  std::string __p;
  unsigned int v8;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    do
    {
      if (*((_QWORD *)v2 + 1) != *((_QWORD *)v2 + 2))
      {
        v5 = *v2;
        v8 = v5;
        v6 = std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v4, v5, &v8);
        PhonebookCommandDriver::decodeName();
        std::string::operator=((std::string *)(v6 + 49), &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void sub_21699E5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void QMIPhonebookCommandDriver::writeEntry(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  int v12;
  uint64_t v13;
  const void **v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  double v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[7];
  int v46;
  int v47;
  int v48;
  void *__p[2];
  __int128 v50;
  char *v51;
  std::__shared_weak_count *v52;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v55;
  void (*v56)(uint64_t, _QWORD *);
  void *v57;
  char *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if ((a2 - 1) >= 3)
    v12 = 0;
  else
    v12 = a2;
  if ((qmi::ClientRouter::has() & 1) != 0)
  {
    *(_OWORD *)__p = 0u;
    v50 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v13 = MEMORY[0x24BDAC760];
    v45[0] = MEMORY[0x24BDAC760];
    v45[1] = 0x40000000;
    v45[2] = ___ZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE_block_invoke;
    v45[3] = &__block_descriptor_tmp_41_6;
    v46 = a2;
    v47 = a3;
    v48 = a4;
    v45[4] = a1;
    v45[5] = a5;
    v45[6] = a6;
    v14 = (const void **)__p[1];
    if (__p[1] != (void *)v50)
    {
      while (*((_BYTE *)*v14 + 8) != 1)
      {
        if (++v14 == (const void **)v50)
          goto LABEL_13;
      }
    }
    if (v14 == (const void **)v50)
    {
LABEL_13:
      v17 = operator new();
      v18 = v17;
      *(_BYTE *)(v17 + 8) = 1;
      *(_QWORD *)v17 = &off_24D5D6FF0;
      *(_BYTE *)(v17 + 16) = 0;
      v16 = v17 + 16;
      *(_OWORD *)(v17 + 18) = 0u;
      *(_OWORD *)(v17 + 34) = 0u;
      *(_OWORD *)(v17 + 50) = 0u;
      *(_QWORD *)(v17 + 64) = 0;
      v19 = v50;
      if ((unint64_t)v50 >= *((_QWORD *)&v50 + 1))
      {
        v21 = (uint64_t)(v50 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v22 = (uint64_t)(*((_QWORD *)&v50 + 1) - (unint64_t)__p[1]) >> 2;
        if (v22 <= v21 + 1)
          v22 = v21 + 1;
        if (*((_QWORD *)&v50 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v50 + 8, v23);
        else
          v24 = 0;
        v25 = (uint64_t *)&v24[8 * v21];
        v26 = &v24[8 * v23];
        *v25 = v18;
        v20 = v25 + 1;
        v28 = (char *)__p[1];
        v27 = (char *)v50;
        if ((void *)v50 != __p[1])
        {
          do
          {
            v29 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *--v25 = v29;
          }
          while (v27 != v28);
          v27 = (char *)__p[1];
        }
        __p[1] = v25;
        *(_QWORD *)&v50 = v20;
        *((_QWORD *)&v50 + 1) = v26;
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_QWORD *)v50 = v17;
        v20 = (_QWORD *)(v19 + 8);
      }
      *(_QWORD *)&v50 = v20;
    }
    else
    {
      if (!v15)
        __cxa_bad_cast();
      v16 = (uint64_t)v15 + 16;
    }
    v30 = ___ZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE_block_invoke((uint64_t)v45, v16);
    v31 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), a2, v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a4;
      _os_log_impl(&dword_216897000, v31, OS_LOG_TYPE_DEFAULT, "#I Sending the write record request for ID: %d", buf, 8u);
    }
    v32 = qmi::ClientRouter::get();
    v33 = operator new();
    *(_QWORD *)v33 = v32;
    *(_QWORD *)(v33 + 8) = QMIServiceMsg::create();
    *(_DWORD *)(v33 + 16) = 25000;
    *(_QWORD *)(v33 + 24) = 0;
    *(_QWORD *)(v33 + 32) = 0;
    v44 = v33;
    v34 = operator new(0x28uLL);
    v34[1] = 0;
    v35 = v34 + 1;
    v34[2] = 0;
    v34[3] = a1;
    *v34 = &off_24D5D7058;
    *((_DWORD *)v34 + 8) = v12;
    v51 = (char *)(v34 + 3);
    v52 = (std::__shared_weak_count *)v34;
    *(_QWORD *)buf = v13;
    v55 = 1174405120;
    v56 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEE3__0EEOS1_OT__block_invoke;
    v57 = &__block_descriptor_tmp_75_2;
    v58 = (char *)(v34 + 3);
    v59 = (std::__shared_weak_count *)v34;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    aBlock[0] = v13;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_16;
    aBlock[3] = &unk_24D5D6D40;
    aBlock[4] = buf;
    *(_QWORD *)(v33 + 32) = _Block_copy(aBlock);
    v37 = v59;
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v52;
    if (v52)
    {
      v41 = (unint64_t *)&v52->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v44;
    v44 = 0;
    if (v43)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v44, v43);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), a2, 0x400000004);
  }
}

void sub_21699EAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v26);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (a11)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v27, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

double ___ZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t QMIPbTypeFor;
  unsigned int TypeOfAddress;
  void *v6;
  double result;
  void *v8;
  void *__p;
  char v10;
  __int128 v11;
  uint64_t v12;

  QMIPbTypeFor = QMIPhonebookCommandDriver::getQMIPbTypeFor(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60));
  *(_BYTE *)a2 = QMIPbTypeFor;
  *(_WORD *)(a2 + 2) = WORD1(QMIPbTypeFor);
  *(_WORD *)(a2 + 4) = *(_DWORD *)(a1 + 64);
  TypeOfAddress = CSIPhoneNumber::getTypeOfAddress(*(CSIPhoneNumber **)(a1 + 40));
  *(_BYTE *)(a2 + 6) = (TypeOfAddress >> 4) & 7;
  *(_BYTE *)(a2 + 7) = TypeOfAddress & 0xF;
  CSIPhoneNumber::getBaseNumber(*(CSIPhoneNumber **)(a1 + 40));
  PhonebookCommandDriver::getVectorForString();
  v6 = *(void **)(a2 + 8);
  if (v6)
  {
    *(_QWORD *)(a2 + 16) = v6;
    operator delete(v6);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  result = *(double *)&v11;
  *(_OWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 24) = v12;
  if (v10 < 0)
    operator delete(__p);
  if (*(_DWORD *)(a1 + 60) != 2)
  {
    PhonebookCommandDriver::getVectorForString();
    v8 = *(void **)(a2 + 32);
    if (v8)
    {
      *(_QWORD *)(a2 + 40) = v8;
      operator delete(v8);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    result = 0.0;
    *(_OWORD *)(a2 + 32) = 0uLL;
    *(_QWORD *)(a2 + 48) = 0;
  }
  return result;
}

void sub_21699EC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void QMIPhonebookCommandDriver::getPbState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  const void **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t QMIPbTypeFor;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  _QWORD aBlock[5];
  __int128 buf;
  void (*v46)(uint64_t, _QWORD *);
  void *v47;
  char *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if ((a2 - 1) >= 3)
    v6 = 0;
  else
    v6 = a2;
  if ((qmi::ClientRouter::has() & 1) != 0)
  {
    *(_OWORD *)__p = 0u;
    v41 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v7 = (const void **)__p[1];
    if (__p[1] != (void *)v41)
    {
      while (*((_BYTE *)*v7 + 8) != 1)
      {
        if (++v7 == (const void **)v41)
          goto LABEL_13;
      }
    }
    if (v7 == (const void **)v41)
    {
LABEL_13:
      v10 = operator new();
      v11 = v10;
      *(_BYTE *)(v10 + 8) = 1;
      *(_QWORD *)v10 = &off_24D5D70C0;
      *(_BYTE *)(v10 + 10) = 0;
      v9 = (char *)(v10 + 10);
      *(_WORD *)(v10 + 12) = 0;
      v12 = v41;
      if ((unint64_t)v41 >= *((_QWORD *)&v41 + 1))
      {
        v14 = (uint64_t)(v41 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = (uint64_t)(*((_QWORD *)&v41 + 1) - (unint64_t)__p[1]) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if (*((_QWORD *)&v41 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v41 + 8, v16);
        else
          v17 = 0;
        v18 = (uint64_t *)&v17[8 * v14];
        v19 = &v17[8 * v16];
        *v18 = v11;
        v13 = v18 + 1;
        v21 = (char *)__p[1];
        v20 = (char *)v41;
        if ((void *)v41 != __p[1])
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v18 = v22;
          }
          while (v20 != v21);
          v20 = (char *)__p[1];
        }
        __p[1] = v18;
        *(_QWORD *)&v41 = v13;
        *((_QWORD *)&v41 + 1) = v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v41 = v10;
        v13 = (_QWORD *)(v12 + 8);
      }
      *(_QWORD *)&v41 = v13;
    }
    else
    {
      if (!v8)
        __cxa_bad_cast();
      v9 = v8 + 10;
    }
    QMIPbTypeFor = QMIPhonebookCommandDriver::getQMIPbTypeFor(a1, a2, a3);
    *v9 = QMIPbTypeFor;
    *((_WORD *)v9 + 1) = WORD1(QMIPbTypeFor);
    v24 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), a2);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = asString();
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v25;
      _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, "#I Sending PB State request for phone book type: %s", (uint8_t *)&buf, 0xCu);
    }
    v26 = qmi::ClientRouter::get();
    v27 = operator new();
    *(_QWORD *)v27 = v26;
    *(_QWORD *)(v27 + 8) = QMIServiceMsg::create();
    *(_DWORD *)(v27 + 16) = 25000;
    *(_QWORD *)(v27 + 24) = 0;
    *(_QWORD *)(v27 + 32) = 0;
    v39 = v27;
    v28 = operator new(0x28uLL);
    v28[1] = 0;
    v29 = v28 + 1;
    v28[2] = 0;
    *v28 = &off_24D5D7128;
    v28[3] = a1;
    *((_DWORD *)v28 + 8) = v6;
    v42 = (char *)(v28 + 3);
    v43 = (std::__shared_weak_count *)v28;
    v30 = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf = MEMORY[0x24BDAC760];
    *((_QWORD *)&buf + 1) = 1174405120;
    v46 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver10getPbStateEN10subscriber7SimSlotE13PhoneBookTypeE3__0EEOS1_OT__block_invoke;
    v47 = &__block_descriptor_tmp_76_0;
    v48 = (char *)(v28 + 3);
    v49 = (std::__shared_weak_count *)v28;
    do
      v31 = __ldxr(v29);
    while (__stxr(v31 + 1, v29));
    aBlock[0] = v30;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_16;
    aBlock[3] = &unk_24D5D6D40;
    aBlock[4] = &buf;
    *(_QWORD *)(v27 + 32) = _Block_copy(aBlock);
    v32 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v43;
    if (v43)
    {
      v36 = (unint64_t *)&v43->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v39;
    v39 = 0;
    if (v38)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v39, v38);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), a2, 0x400000002);
  }
}

void sub_21699F108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN25QMIPhonebookCommandDriver17handlePbState_resEN3qmi16SubscriptionTypeERKN3pbm7PBState8ResponseE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  void **v7;
  const char *v8;
  void **v9;
  unsigned int v10;
  uint64_t PbTypeFor;
  NSObject *v12;
  NSObject *v13;
  void **v14;
  uint64_t **v15;
  NSObject *v16;
  void **v17;
  int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t **v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;
  uint8_t buf[4];
  void **v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    pbm::asString(*((unsigned __int16 *)a2 + 1), __p);
    v6 = v29;
    v7 = (void **)__p[0];
    v8 = pbm::asString(a2[4]);
    v9 = __p;
    if (v6 < 0)
      v9 = v7;
    *(_DWORD *)buf = 136315394;
    v31 = v9;
    v32 = 2080;
    v33 = v8;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Received result for PB State request: type %s, state: %s", buf, 0x16u);
    if (v29 < 0)
      operator delete(__p[0]);
  }
  v10 = *((unsigned __int16 *)a2 + 1);
  PbTypeFor = QMIPhonebookCommandDriver::getPbTypeFor(*a2, v10);
  if (a2[4])
  {
    if (a2[4] == 1)
    {
      v12 = **(NSObject ***)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I PhoneBook is not ready - ignoring", (uint8_t *)__p, 2u);
      }
      return;
    }
    v16 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      pbm::asString(v10, __p);
      v17 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v31 = v17;
      _os_log_impl(&dword_216897000, v16, OS_LOG_TYPE_DEFAULT, "#I Not adding PB type: %s to known Phonebook types", buf, 0xCu);
      if (v29 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    v13 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      pbm::asString(v10, __p);
      v14 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v31 = v14;
      _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I Adding PB type: %s to known Phonebook types", buf, 0xCu);
      if (v29 < 0)
        operator delete(__p[0]);
    }
    v15 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v4 + 136), *(_DWORD *)(a1 + 48), (_DWORD *)(a1 + 48));
    std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)v15 + 5, PbTypeFor, PbTypeFor);
  }
  v19 = *(_DWORD *)(a1 + 48);
  v18 = (int *)(a1 + 48);
  (*(void (**)(_QWORD, _QWORD, uint64_t, BOOL))(**(_QWORD **)(v4 + 64) + 88))(*(_QWORD *)(v4 + 64), v19, PbTypeFor, a2[4] == 0);
  if ((_DWORD)PbTypeFor == 2)
  {
    v20 = *(_QWORD *)(v4 + 64);
    v21 = *v18;
    v22 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v4 + 136), *v18, v18);
    std::allocate_shared[abi:ne180100]<std::set<PhoneBookType>,std::allocator<std::set<PhoneBookType>>,std::set<PhoneBookType>&,void>(&v26, v22 + 5);
    (*(void (**)(uint64_t, uint64_t, uint64_t ***))(*(_QWORD *)v20 + 96))(v20, v21, &v26);
    v23 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
}

void sub_21699F4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t QMIPhonebookCommandDriver::simReady(_QWORD **a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  int v10;
  BOOL v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t **v20;
  __int16 v21[6];
  int v22;

  v22 = a2;
  v4 = *(NSObject **)(*(uint64_t (**)(_QWORD *))(*a1[11] + 16))(a1[11]);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v21[0] = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I SIM ready reported", (uint8_t *)v21, 2u);
  }
  v5 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(a1 + 17, a2, &v22);
  v8 = v5[6];
  v6 = v5 + 6;
  v7 = v8;
  if (!v8)
    goto LABEL_13;
  v9 = v6;
  do
  {
    v10 = *((_DWORD *)v7 + 7);
    v11 = v10 < 2;
    if (v10 >= 2)
      v12 = (uint64_t **)v7;
    else
      v12 = (uint64_t **)(v7 + 1);
    if (!v11)
      v9 = (uint64_t **)v7;
    v7 = *v12;
  }
  while (*v12);
  if (v9 == v6 || *((int *)v9 + 7) >= 3)
LABEL_13:
    ((void (*)(_QWORD **, uint64_t, uint64_t))(*a1)[8])(a1, a2, 2);
  v13 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(a1 + 17, a2, &v22);
  v16 = v13[6];
  result = (uint64_t)(v13 + 6);
  v15 = v16;
  if (!v16)
    return ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[8])(a1, a2, 4);
  v17 = result;
  do
  {
    v18 = *((_DWORD *)v15 + 7);
    v19 = v18 < 4;
    if (v18 >= 4)
      v20 = (uint64_t **)v15;
    else
      v20 = (uint64_t **)(v15 + 1);
    if (!v19)
      v17 = (uint64_t)v15;
    v15 = *v20;
  }
  while (*v20);
  if (v17 == result || *(int *)(v17 + 28) >= 5)
    return ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[8])(a1, a2, 4);
  return result;
}

void QMIPhonebookCommandDriver::simRemoved(uint64_t a1, int a2)
{
  NSObject *v4;
  uint8_t v5[16];

  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I SIM has been removed, reset all the states", v5, 2u);
  }
  QMIPhonebookCommandDriver::reset(a1, a2);
}

void ___ZL29sGetHardCodedEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke(uint64_t a1, char ***a2)
{
  populateEmergencyNumber(*(os_log_t **)(a1 + 32), *(uint64_t **)(a1 + 40), *a2, a2[1]);
}

void populateEmergencyNumber(os_log_t *a1, uint64_t *a2, char **a3, char **a4)
{
  NSObject *v8;
  NSObject *v9;
  uint8_t *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint8_t v14[4];
  uint8_t *v15;
  uint8_t buf[16];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * (a4 - a3);
    _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I Emergency numbers count: %lu", buf, 0xCu);
  }
  for (; a3 != a4; a3 += 3)
  {
    memset(buf, 0, sizeof(buf));
    v17 = 0;
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(buf, *a3, a3[1], a3[1] - *a3);
    v9 = *a1;
    if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
    {
      if (v17 >= 0)
        v10 = buf;
      else
        v10 = *(uint8_t **)buf;
      *(_DWORD *)v14 = 136315138;
      v15 = v10;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I Emergency Number: %s", v14, 0xCu);
    }
    v11 = a2[1];
    if (v11 >= a2[2])
    {
      v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)buf);
    }
    else
    {
      if (SHIBYTE(v17) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2[1], *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
      }
      else
      {
        v12 = *(_OWORD *)buf;
        *(_QWORD *)(v11 + 16) = v17;
        *(_OWORD *)v11 = v12;
      }
      v13 = v11 + 24;
      a2[1] = v11 + 24;
    }
    a2[1] = v13;
    if (SHIBYTE(v17) < 0)
      operator delete(*(void **)buf);
  }
}

void sub_21699F880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 + 8) = v19;
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZL29sGetHardCodedEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  unint64_t v7;
  unint64_t v9;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  NSObject *v14;
  std::string v15;
  _BYTE __p[24];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = a2[1];
  v4 = v3 - *a2;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(std::string **)v5;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (v4 == v7)
  {
    if (v3 != v2)
    {
      v9 = 0;
      do
      {
        std::to_string(&v15, *(unsigned __int8 *)(v2 + v9));
        v10 = std::string::insert(&v15, 0, ",", 1uLL);
        v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        if (__p[23] >= 0)
          v12 = __p;
        else
          v12 = *(const std::string::value_type **)__p;
        if (__p[23] >= 0)
          v13 = __p[23];
        else
          v13 = *(_QWORD *)&__p[8];
        std::string::append(v6, v12, v13);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        ++v6;
        ++v9;
        v2 = *a2;
      }
      while (v9 < a2[1] - *a2);
    }
  }
  else
  {
    v14 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 134218240;
      *(_QWORD *)&__p[4] = v7;
      *(_WORD *)&__p[12] = 2048;
      *(_QWORD *)&__p[14] = v4;
      _os_log_error_impl(&dword_216897000, v14, OS_LOG_TYPE_ERROR, "Hard coded emergency numbers length (%zu) and category length (%zu) do not match! Ignoring categories", __p, 0x16u);
    }
  }
}

void sub_21699FA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void ___ZL29sGetHardCodedEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_55(uint64_t a1, char ***a2)
{
  populateEmergencyNumber(*(os_log_t **)(a1 + 32), *(uint64_t **)(a1 + 40), *a2, a2[1]);
}

void ___ZL22sGetNVEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke(uint64_t a1, char ***a2)
{
  populateEmergencyNumber(*(os_log_t **)(a1 + 32), *(uint64_t **)(a1 + 40), *a2, a2[1]);
}

void ___ZL22sGetNVEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  unint64_t v7;
  unint64_t v9;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  NSObject *v14;
  std::string v15;
  _BYTE __p[24];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = a2[1];
  v4 = v3 - *a2;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(std::string **)v5;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (v4 == v7)
  {
    if (v3 != v2)
    {
      v9 = 0;
      do
      {
        std::to_string(&v15, *(unsigned __int8 *)(v2 + v9));
        v10 = std::string::insert(&v15, 0, ",", 1uLL);
        v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        if (__p[23] >= 0)
          v12 = __p;
        else
          v12 = *(const std::string::value_type **)__p;
        if (__p[23] >= 0)
          v13 = __p[23];
        else
          v13 = *(_QWORD *)&__p[8];
        std::string::append(v6, v12, v13);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        ++v6;
        ++v9;
        v2 = *a2;
      }
      while (v9 < a2[1] - *a2);
    }
  }
  else
  {
    v14 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 134218240;
      *(_QWORD *)&__p[4] = v7;
      *(_WORD *)&__p[12] = 2048;
      *(_QWORD *)&__p[14] = v4;
      _os_log_error_impl(&dword_216897000, v14, OS_LOG_TYPE_ERROR, "NV emergency numbers length (%zu) and category length (%zu) do not match! Ignoring categories", __p, 0x16u);
    }
  }
}

void sub_21699FC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void ___ZL22sGetNVEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_60(uint64_t a1, char ***a2)
{
  populateEmergencyNumber(*(os_log_t **)(a1 + 32), *(uint64_t **)(a1 + 40), *a2, a2[1]);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::RecordInfo>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::RecordInfo>::getSize()
{
  return tlv::size<pbm::tlv::RecordInfo>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<pbm::tlv::RecordInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<pbm::tlv::RecordInfo>(a2, a1 + 10);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::RecordInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D66A8;
  *(_QWORD *)(result + 10) = *(_QWORD *)(a1 + 10);
  return result;
}

void CSIPhoneBookEntry::CSIPhoneBookEntry(CSIPhoneBookEntry *this, const CSIPhoneBookEntry *a2)
{
  std::string *v4;
  int v5;
  __int128 v6;
  int v7;
  __int128 v8;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = (std::string *)((char *)this + 8);
  *((_QWORD *)this + 3) = 0;
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneBookEntry *)((char *)this + 32));
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneBookEntry *)((char *)this + 168));
  *((_QWORD *)this + 46) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(_QWORD *)this = *(_QWORD *)a2;
  std::string::operator=(v4, (const std::string *)((char *)a2 + 8));
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  std::string::operator=((std::string *)((char *)this + 40), (const std::string *)((char *)a2 + 40));
  std::string::operator=((std::string *)((char *)this + 64), (const std::string *)((char *)a2 + 64));
  v5 = *((_DWORD *)a2 + 22);
  *((_BYTE *)this + 92) = *((_BYTE *)a2 + 92);
  *((_DWORD *)this + 22) = v5;
  std::string::operator=((std::string *)this + 4, (const std::string *)a2 + 4);
  std::string::operator=((std::string *)this + 5, (const std::string *)a2 + 5);
  v6 = *((_OWORD *)a2 + 9);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_OWORD *)this + 9) = v6;
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  std::string::operator=((std::string *)((char *)this + 176), (const std::string *)((char *)a2 + 176));
  std::string::operator=((std::string *)((char *)this + 200), (const std::string *)((char *)a2 + 200));
  v7 = *((_DWORD *)a2 + 56);
  *((_BYTE *)this + 228) = *((_BYTE *)a2 + 228);
  *((_DWORD *)this + 56) = v7;
  std::string::operator=((std::string *)((char *)this + 232), (const std::string *)((char *)a2 + 232));
  std::string::operator=((std::string *)((char *)this + 256), (const std::string *)((char *)a2 + 256));
  v8 = *(_OWORD *)((char *)a2 + 280);
  *((_BYTE *)this + 296) = *((_BYTE *)a2 + 296);
  *(_OWORD *)((char *)this + 280) = v8;
  std::string::operator=((std::string *)((char *)this + 304), (const std::string *)((char *)a2 + 304));
  std::string::operator=((std::string *)((char *)this + 328), (const std::string *)((char *)a2 + 328));
  std::string::operator=((std::string *)((char *)this + 352), (const std::string *)((char *)a2 + 352));
  *((_BYTE *)this + 376) = *((_BYTE *)a2 + 376);
}

void sub_21699FF4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  CSIPhoneNumber::~CSIPhoneNumber(v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void CSIPhoneBookEntry::~CSIPhoneBookEntry(void **this)
{
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t std::__split_buffer<CSIPhoneBookEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 384;
    CSIPhoneBookEntry::~CSIPhoneBookEntry((void **)(i - 384));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::shared_ptr<QMIPhonebookCommandDriver>::shared_ptr[abi:ne180100]<QMIPhonebookCommandDriver,std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D66E0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2169A0150(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver*)#1}::operator() const(QMIPhonebookCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2169A0170(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIPhonebookCommandDriver *,std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver *)#1},std::allocator<QMIPhonebookCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIPhonebookCommandDriver *,std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver *)#1},std::allocator<QMIPhonebookCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver*)#1}::operator() const(QMIPhonebookCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIPhonebookCommandDriver *,std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver *)#1},std::allocator<QMIPhonebookCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIPhonebookCommandDriver> ctu::SharedSynchronizable<PhonebookCommandDriver>::make_shared_ptr<QMIPhonebookCommandDriver>(QMIPhonebookCommandDriver*)::{lambda(QMIPhonebookCommandDriver*)#1}::operator() const(QMIPhonebookCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void SimInstanceLoggable<QMIPhonebookCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t SimInstanceLoggable<QMIPhonebookCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 40;
}

void std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::destroy(*a1);
    std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::destroy(a1[1]);
    v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::destroy(*a1);
    std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::pair<pbm::PBSessionType,std::vector<PhoneBookType>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x48uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *((_BYTE *)v7 + 40) = 0;
    v7[7] = 0;
    v7[8] = 0;
    v7[6] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[5] = (uint64_t *)(v7 + 6);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D6780;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D6780;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t TlvValue;
  int v10;
  uint64_t v11;
  int v12;
  _WORD v13[12];
  void *__p;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, unsigned __int8 *);
  void *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t updated;
  uint64_t v22;

  v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v15 = 0;
    v16 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v13, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v13);
    if (__p)
    {
      v15 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v13);
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 >= 3)
    v7 = 0;
  else
    v7 = v4;
  v8 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 88) + 16))(*(_QWORD *)(v6 + 88), v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I handleRecordUpdate_ind", (uint8_t *)&__p, 2u);
  }
  __p = (void *)MEMORY[0x24BDAC760];
  v15 = 0x40000000;
  v16 = ___ZN25QMIPhonebookCommandDriver22handleRecordUpdate_indEN3qmi16SubscriptionTypeERKN3pbm12RecordUpdate10IndicationE_block_invoke;
  v17 = &__block_descriptor_tmp_5_6;
  v18 = v6;
  v19 = v4;
  v20 = v7;
  TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v13);
  v11 = TlvValue;
  if (TlvValue)
  {
    v12 = v10;
    v22 = TlvValue;
    updated = tlv::parseV<pbm::tlv::RecordUpdateInfo>((unint64_t *)&v22, v10);
    if (v22)
      ___ZN25QMIPhonebookCommandDriver22handleRecordUpdate_indEN3qmi16SubscriptionTypeERKN3pbm12RecordUpdate10IndicationE_block_invoke((uint64_t)&__p, (unsigned __int8 *)&updated);
    else
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v13[0], 1, v11, v12);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v13);
}

void sub_2169A0680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D6800;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D6800;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4;
  uint64_t v6;
  NSObject *v7;
  _BYTE v8[24];
  void *__p;
  void *v10;
  uint64_t v11;

  v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v10 = 0;
    v11 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v8, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v8);
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v8);
  }
  if (v4 - 1 >= 3)
    v6 = 0;
  else
    v6 = v4;
  v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I handleRefresh_ind", (uint8_t *)&__p, 2u);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v8);
}

void sub_2169A0884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D6880;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D6880;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4;
  uint64_t v6;
  NSObject *v7;
  _BYTE v8[24];
  void *__p;
  void *v10;
  uint64_t v11;

  v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v10 = 0;
    v11 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v8, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v8);
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v8);
  }
  if (v4 - 1 >= 3)
    v6 = 0;
  else
    v6 = v4;
  v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I handleReady_ind", (uint8_t *)&__p, 2u);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v8);
}

void sub_2169A0A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_3 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D6900;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D6900;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  os_log_t *v8;
  void **v9;
  uint64_t v10;
  uint64_t TlvValue;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  std::string::size_type v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  std::string::size_type v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  NSObject *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  unsigned __int8 *v56;
  int v57;
  NSObject *v58;
  uint64_t v59;
  _WORD v60[12];
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  void *__p;
  __int128 **p_p;
  uint64_t v67;
  __n128 (*v68)(_QWORD *, uint64_t);
  void (*v69)(uint64_t);
  _QWORD v70[3];
  unsigned __int8 *v71;
  std::string *v72;
  uint8_t v73[8];
  uint64_t v74;
  void (*v75)(uint8_t *, std::string *);
  void *v76;
  void **v77;
  os_log_t *v78;
  uint8_t buf[8];
  uint64_t v80;
  void (*v81)(uint8_t *, uint8_t *);
  void *v82;
  void **v83;
  os_log_t *v84;
  std::string v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    p_p = 0;
    v67 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v60, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v60);
    if (__p)
    {
      p_p = (__int128 **)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v60);
  }
  v6 = *(_QWORD *)(a1 + 8);
  __p = 0;
  p_p = (__int128 **)&__p;
  v67 = 0x4002000000;
  v68 = __Block_byref_object_copy__3;
  v69 = __Block_byref_object_dispose__3;
  memset(v70, 0, sizeof(v70));
  if (v4 - 1 >= 3)
    v7 = 0;
  else
    v7 = v4;
  v8 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 88) + 16))(*(_QWORD *)(v6 + 88), v7);
  v9 = (void **)(p_p + 5);
  v10 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v80 = 0x40000000;
  v81 = (void (*)(uint8_t *, uint8_t *))___ZL29sGetHardCodedEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke;
  v82 = &__block_descriptor_tmp_52_2;
  v83 = (void **)v8;
  v84 = (os_log_t *)(p_p + 5);
  TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v60);
  v13 = TlvValue;
  if (TlvValue)
  {
    v14 = v12;
    v64.__r_.__value_.__r.__words[0] = TlvValue;
    *(_QWORD *)v73 = 0;
    v74 = 0;
    v75 = 0;
    tlv::parseV<pbm::tlv::HardCodedEmergencyNumbersExtended>((unsigned __int8 **)&v64, v12, (uint64_t *)v73);
    if (v64.__r_.__value_.__r.__words[0])
    {
      v81(buf, v73);
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
      std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      goto LABEL_15;
    }
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
    std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    if (((unsigned int (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v60[0], 19, v13, v14))
    {
LABEL_15:
      *(_QWORD *)v73 = v10;
      v74 = 0x40000000;
      v75 = (void (*)(uint8_t *, std::string *))___ZL29sGetHardCodedEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_2;
      v76 = &__block_descriptor_tmp_54_3;
      v77 = v9;
      v78 = v8;
      v15 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v60);
      v17 = v15;
      if (v15)
      {
        v18 = v16;
        v64.__r_.__value_.__r.__words[0] = v15;
        memset(&v85, 0, sizeof(v85));
        tlv::parseV<pbm::tlv::HardCodedEmergencyNumbersCategories>((unsigned __int8 **)&v64, v16, &v85);
        v19 = v64.__r_.__value_.__r.__words[0];
        if (v64.__r_.__value_.__r.__words[0])
          v75(v73, &v85);
        if (v85.__r_.__value_.__r.__words[0])
        {
          v85.__r_.__value_.__l.__size_ = v85.__r_.__value_.__r.__words[0];
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        if (!v19)
          ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v60[0], 21, v17, v18);
      }
      goto LABEL_25;
    }
  }
  *(_QWORD *)v73 = v10;
  v74 = 0x40000000;
  v75 = (void (*)(uint8_t *, std::string *))___ZL29sGetHardCodedEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_55;
  v76 = &__block_descriptor_tmp_56_4;
  v77 = (void **)v8;
  v78 = (os_log_t *)v9;
  v20 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v60);
  v22 = v20;
  if (!v20)
    goto LABEL_26;
  v23 = v21;
  v63.__r_.__value_.__r.__words[0] = v20;
  memset(&v85, 0, sizeof(v85));
  tlv::parseV<pbm::tlv::HardCodedEmergencyNumbers>((unsigned __int8 **)&v63, v21, (uint64_t *)&v85);
  if (v63.__r_.__value_.__r.__words[0])
  {
    v75(v73, &v85);
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
    std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
LABEL_25:
    LODWORD(v22) = 1;
    goto LABEL_26;
  }
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
  std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  LODWORD(v22) = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v60[0], 1, v22, v23);
LABEL_26:
  v24 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v22;
    _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, "#I Hard coded emergency numbers presence: %d", buf, 8u);
  }
  v25 = *(_QWORD *)(v6 + 64);
  if ((_DWORD)v22)
  {
    memset(&v64, 0, sizeof(v64));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v64, p_p[5], p_p[6], 0xAAAAAAAAAAAAAAABLL * (((char *)p_p[6] - (char *)p_p[5]) >> 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)v25 + 104))(v25, v7, 7, &v64);
    *(_QWORD *)buf = &v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v25 + 112))(*(_QWORD *)(v6 + 64), v7, 7);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)p_p + 5);
  v26 = (void **)(p_p + 5);
  *(_QWORD *)buf = v10;
  v80 = 0x40000000;
  v81 = (void (*)(uint8_t *, uint8_t *))___ZL22sGetNVEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke;
  v82 = &__block_descriptor_tmp_58_3;
  v83 = (void **)v8;
  v84 = (os_log_t *)(p_p + 5);
  v27 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v60);
  v29 = v27;
  if (v27)
  {
    v30 = v28;
    v63.__r_.__value_.__r.__words[0] = v27;
    *(_QWORD *)v73 = 0;
    v74 = 0;
    v75 = 0;
    tlv::parseV<pbm::tlv::NVEmergencyNumbersExtended>((unsigned __int8 **)&v63, v28, (uint64_t *)v73);
    if (v63.__r_.__value_.__r.__words[0])
    {
      v81(buf, v73);
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
      std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      goto LABEL_35;
    }
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
    std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    if (((unsigned int (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v60[0], 20, v29, v30))
    {
LABEL_35:
      *(_QWORD *)v73 = v10;
      v74 = 0x40000000;
      v75 = (void (*)(uint8_t *, std::string *))___ZL22sGetNVEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_2;
      v76 = &__block_descriptor_tmp_59_3;
      v77 = v26;
      v78 = v8;
      v31 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v60);
      v33 = v31;
      if (v31)
      {
        v34 = v32;
        v63.__r_.__value_.__r.__words[0] = v31;
        memset(&v85, 0, sizeof(v85));
        tlv::parseV<pbm::tlv::NVEmergencyNumbersCategories>((unsigned __int8 **)&v63, v32, &v85);
        v35 = v63.__r_.__value_.__r.__words[0];
        if (v63.__r_.__value_.__r.__words[0])
          v75(v73, &v85);
        if (v85.__r_.__value_.__r.__words[0])
        {
          v85.__r_.__value_.__l.__size_ = v85.__r_.__value_.__r.__words[0];
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        if (!v35)
          ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v60[0], 22, v33, v34);
      }
      goto LABEL_45;
    }
  }
  *(_QWORD *)v73 = v10;
  v74 = 0x40000000;
  v75 = (void (*)(uint8_t *, std::string *))___ZL22sGetNVEmergencyNumbersPKN3ctu11OsLogLoggerERKN3pbm13EmergencyList10IndicationERNSt3__16vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEE_block_invoke_60;
  v76 = &__block_descriptor_tmp_61_4;
  v77 = (void **)v8;
  v78 = (os_log_t *)v26;
  v36 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v60);
  v38 = v36;
  if (!v36)
    goto LABEL_46;
  v39 = v37;
  v62.__r_.__value_.__r.__words[0] = v36;
  memset(&v85, 0, sizeof(v85));
  tlv::parseV<pbm::tlv::NVEmergencyNumbers>((unsigned __int8 **)&v62, v37, (uint64_t *)&v85);
  if (v62.__r_.__value_.__r.__words[0])
  {
    v75(v73, &v85);
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
    std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
LABEL_45:
    LODWORD(v38) = 1;
    goto LABEL_46;
  }
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
  std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  LODWORD(v38) = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v60[0], 16, v38, v39);
LABEL_46:
  v40 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v38;
    _os_log_impl(&dword_216897000, v40, OS_LOG_TYPE_DEFAULT, "#I NV Items emergency numbers presence: %d", buf, 8u);
  }
  v41 = *(_QWORD *)(v6 + 64);
  if ((_DWORD)v38)
  {
    memset(&v63, 0, sizeof(v63));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v63, p_p[5], p_p[6], 0xAAAAAAAAAAAAAAABLL * (((char *)p_p[6] - (char *)p_p[5]) >> 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)v41 + 104))(v41, v7, 6, &v63);
    *(_QWORD *)buf = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v41 + 112))(*(_QWORD *)(v6 + 64), v7, 6);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)p_p + 5);
  *(_QWORD *)buf = v10;
  v80 = 0x40000000;
  v81 = (void (*)(uint8_t *, uint8_t *))___ZN25QMIPhonebookCommandDriver23handleEmergencyList_indEN3qmi16SubscriptionTypeERKN3pbm13EmergencyList10IndicationE_block_invoke;
  v82 = &unk_24D5D6360;
  v83 = &__p;
  v84 = v8;
  v42 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v60);
  v44 = v42;
  if (v42)
  {
    v45 = v43;
    v62.__r_.__value_.__r.__words[0] = v42;
    *(_QWORD *)v73 = 0;
    v74 = 0;
    v75 = 0;
    tlv::parseV<pbm::tlv::CardEmergencyNumbers>((unsigned __int8 **)&v62, v43, (uint64_t *)v73);
    if (v62.__r_.__value_.__r.__words[0])
    {
      v81(buf, v73);
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
      std::vector<pbm::tlv::ECCEmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      LODWORD(v44) = 1;
    }
    else
    {
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
      std::vector<pbm::tlv::ECCEmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      LODWORD(v44) = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v60[0], 17, v44, v45);
    }
  }
  v46 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v73 = 67109120;
    *(_DWORD *)&v73[4] = v44;
    _os_log_impl(&dword_216897000, v46, OS_LOG_TYPE_DEFAULT, "#I SIM card emergency numbers presence: %d", v73, 8u);
  }
  v47 = *(_QWORD *)(v6 + 64);
  if ((_DWORD)v44)
  {
    memset(&v62, 0, sizeof(v62));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v62, p_p[5], p_p[6], 0xAAAAAAAAAAAAAAABLL * (((char *)p_p[6] - (char *)p_p[5]) >> 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)v47 + 104))(v47, v7, 3, &v62);
    *(_QWORD *)v73 = &v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v47 + 112))(*(_QWORD *)(v6 + 64), v7, 3);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)p_p + 5);
  v48 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v60);
  v50 = v48;
  if (v48)
  {
    v51 = v49;
    v61.__r_.__value_.__r.__words[0] = v48;
    *(_QWORD *)v73 = 0;
    v74 = 0;
    v75 = 0;
    tlv::parseV<pbm::tlv::NetworkEmergencyNumbers>((unsigned __int8 **)&v61, v49, (uint64_t *)v73);
    if (v61.__r_.__value_.__r.__words[0])
    {
      populateEmergencyNumberCategory(v8, (std::vector<std::string> *)(p_p + 5), *(unsigned __int8 **)v73, (unsigned __int8 *)v74);
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
      std::vector<pbm::tlv::ECCEmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      LODWORD(v50) = 1;
    }
    else
    {
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
      std::vector<pbm::tlv::ECCEmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      LODWORD(v50) = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v60[0], 18, v50, v51);
    }
  }
  v52 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v73 = 67109120;
    *(_DWORD *)&v73[4] = v50;
    _os_log_impl(&dword_216897000, v52, OS_LOG_TYPE_DEFAULT, "#I Network provided emergency numbers presence: %d", v73, 8u);
  }
  v53 = *(_QWORD *)(v6 + 64);
  if ((_DWORD)v50)
  {
    memset(&v61, 0, sizeof(v61));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v61, p_p[5], p_p[6], 0xAAAAAAAAAAAAAAABLL * (((char *)p_p[6] - (char *)p_p[5]) >> 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)v53 + 104))(v53, v7, 4, &v61);
    *(_QWORD *)v73 = &v61;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v53 + 112))(*(_QWORD *)(v6 + 64), v7, 4);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)p_p + 5);
  *(_QWORD *)v73 = v10;
  v74 = 0x40000000;
  v75 = (void (*)(uint8_t *, std::string *))___ZN25QMIPhonebookCommandDriver23handleEmergencyList_indEN3qmi16SubscriptionTypeERKN3pbm13EmergencyList10IndicationE_block_invoke_10;
  v76 = &unk_24D5D6388;
  v77 = &__p;
  v78 = v8;
  v54 = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v60);
  v56 = v54;
  if (v54)
  {
    v57 = v55;
    v71 = v54;
    memset(&v85, 0, sizeof(v85));
    tlv::parseV<pbm::tlv::LocalEmergencyNumbersExtended>(&v71, v55, (uint64_t *)&v85);
    if (v71)
    {
      ___ZN25QMIPhonebookCommandDriver23handleEmergencyList_indEN3qmi16SubscriptionTypeERKN3pbm13EmergencyList10IndicationE_block_invoke_10((uint64_t)v73, (unsigned __int8 **)&v85);
      v72 = &v85;
      std::vector<pbm::tlv::LocalEmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
      LODWORD(v56) = 1;
    }
    else
    {
      v72 = &v85;
      std::vector<pbm::tlv::LocalEmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
      LODWORD(v56) = ((uint64_t (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(v60[0], 24, v56, v57);
    }
  }
  v58 = *v8;
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v85.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(v85.__r_.__value_.__r.__words[0]) = (_DWORD)v56;
    _os_log_impl(&dword_216897000, v58, OS_LOG_TYPE_DEFAULT, "#I Local emergency numbers presence: %d", (uint8_t *)&v85, 8u);
  }
  v59 = *(_QWORD *)(v6 + 64);
  if ((_DWORD)v56)
  {
    memset(&v85, 0, sizeof(v85));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v85, p_p[5], p_p[6], 0xAAAAAAAAAAAAAAABLL * (((char *)p_p[6] - (char *)p_p[5]) >> 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)v59 + 104))(v59, v7, 5, &v85);
    v72 = &v85;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v59 + 112))(*(_QWORD *)(v6 + 64), v7, 5);
  }
  _Block_object_dispose(&__p, 8);
  v72 = (std::string *)v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v60);
}

void sub_2169A1720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  std::vector<pbm::tlv::EmergencyNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Block_object_dispose(&__p, 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_4 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D6980;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D6980;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  os_log_t *v8;
  NSObject *v9;
  unsigned __int8 *TlvValue;
  int v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  NSObject *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _WORD v23[12];
  void *__p;
  uint64_t v25;
  void (*v26)(uint64_t, unsigned __int8 **);
  void *v27;
  uint64_t v28;
  os_log_t *v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  __int128 buf;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3;
  if (v5)
  {
    __p = 0;
    v25 = 0;
    v26 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v23, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v23);
    if (__p)
    {
      v25 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v23);
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 >= 3)
    v7 = 0;
  else
    v7 = v4;
  v32 = v7;
  v8 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 88) + 16))(*(_QWORD *)(v6 + 88), v7);
  v9 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I handlePhoneBookInitDone_ind", (uint8_t *)&__p, 2u);
  }
  __p = (void *)MEMORY[0x24BDAC760];
  v25 = 0x40000000;
  v26 = ___ZN25QMIPhonebookCommandDriver27handlePhoneBookInitDone_indEN3qmi16SubscriptionTypeERKN3pbm17PhoneBookInitDone10IndicationE_block_invoke;
  v27 = &__block_descriptor_tmp_12_10;
  v28 = v6;
  v29 = v8;
  v30 = v4;
  v31 = v7;
  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v23);
  v12 = TlvValue;
  if (TlvValue)
  {
    v13 = v11;
    v33 = TlvValue;
    buf = 0uLL;
    v35 = 0;
    tlv::parseV<pbm::tlv::PhoneBookReadyInformation>(&v33, v11, (uint64_t *)&buf);
    v14 = v33;
    if (v33)
      ___ZN25QMIPhonebookCommandDriver27handlePhoneBookInitDone_indEN3qmi16SubscriptionTypeERKN3pbm17PhoneBookInitDone10IndicationE_block_invoke((uint64_t)&__p, (unsigned __int8 **)&buf);
    if ((_QWORD)buf)
    {
      *((_QWORD *)&buf + 1) = buf;
      operator delete((void *)buf);
    }
    if (!v14)
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(v23[0], 1, v12, v13);
  }
  v15 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_216897000, v15, OS_LOG_TYPE_DEFAULT, "#I Phonebooks known so far", (uint8_t *)&buf, 2u);
  }
  v16 = std::__tree<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::set<PhoneBookType>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(v6 + 136), v7, &v32);
  v17 = v16[5];
  v18 = v16 + 6;
  if (v17 != (uint64_t *)(v16 + 6))
  {
    do
    {
      v19 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        v20 = asString();
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v20;
        _os_log_impl(&dword_216897000, v19, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&buf, 0xCu);
      }
      v21 = (uint64_t *)v17[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (uint64_t *)v17[2];
          v5 = *v22 == (_QWORD)v17;
          v17 = v22;
        }
        while (!v5);
      }
      v17 = v22;
    }
    while (v22 != (uint64_t *)v18);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v23);
}

void sub_2169A1BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  void *v18;

  v18 = *(void **)(v16 - 80);
  if (v18)
  {
    *(_QWORD *)(v16 - 72) = v18;
    operator delete(v18);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D6A00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D6A00;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  os_log_t *v8;
  NSObject *v9;
  void **v10;
  void **TlvValue;
  int v12;
  void **v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  NSObject *v41;
  _QWORD *v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  os_log_t *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t *v61;
  int v62;
  NSObject *v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  _WORD v82[12];
  __int128 v83;
  void ****v84;
  uint64_t v85;
  char **(*v86)(char **, unsigned __int16 **);
  void *v87;
  uint64_t *v88;
  uint64_t v89;
  void ***v90;
  uint64_t v91;
  void (*v92)(uint64_t, unsigned __int16 **);
  void *v93;
  uint64_t *v94;
  uint64_t v95;
  void ***v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, unsigned __int16 **);
  void *v99;
  uint64_t *v100;
  uint64_t v101;
  void **v102;
  uint64_t v103;
  void (*v104)(uint64_t, unsigned __int16 **);
  void *v105;
  uint64_t *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t *v110;
  uint64_t v111;
  void *__p;
  uint64_t v113;
  void (*v114)(uint64_t, __int16 *);
  void *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  os_log_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  _QWORD *(*v132)(_QWORD *, _QWORD *);
  void (*v133)(uint64_t);
  void ***v134;
  void **v135[2];
  __int128 buf;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3;
  if (v5)
  {
    __p = 0;
    v113 = 0;
    v114 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v82, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v82);
    if (__p)
    {
      v113 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v82);
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (v4 - 1 >= 3)
    v7 = 0;
  else
    v7 = v4;
  v8 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 88) + 16))(*(_QWORD *)(v6 + 88), v7);
  v9 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I Received Indication for Read Record", (uint8_t *)&__p, 2u);
  }
  v129 = 0;
  v130 = &v129;
  v131 = 0x4002000000;
  v132 = __Block_byref_object_copy__31;
  v133 = __Block_byref_object_dispose__32;
  v135[0] = 0;
  v135[1] = 0;
  v134 = v135;
  v125 = 0;
  v126 = &v125;
  v127 = 0x2000000000;
  v128 = 0;
  v121 = 0;
  v122 = &v121;
  v123 = 0x2000000000;
  v124 = 6;
  v10 = (void **)MEMORY[0x24BDAC760];
  __p = (void *)MEMORY[0x24BDAC760];
  v113 = 0x40000000;
  v114 = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke;
  v115 = &unk_24D5D6450;
  v119 = v6;
  v120 = v8;
  v116 = &v121;
  v117 = &v125;
  v118 = &v129;
  TlvValue = (void **)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v82);
  v13 = TlvValue;
  if (TlvValue)
  {
    v14 = v12;
    v96 = (void ***)TlvValue;
    v108 = 0u;
    v109 = 0u;
    tlv::parseV<pbm::tlv::BasicRecordData>((unint64_t *)&v96, v12, &v108);
    if (v96)
    {
      v114((uint64_t)&__p, (__int16 *)&v108);
      v102 = (void **)&v108 + 1;
      std::vector<pbm::tlv::BasicRecord>::__destroy_vector::operator()[abi:ne180100](&v102);
    }
    else
    {
      v102 = (void **)&v108 + 1;
      std::vector<pbm::tlv::BasicRecord>::__destroy_vector::operator()[abi:ne180100](&v102);
      ((void (*)(_QWORD, uint64_t, void **, _QWORD))*MEMORY[0x24BED8BD0])(v82[0], 1, v13, v14);
    }
  }
  *(_QWORD *)&v108 = v10;
  *((_QWORD *)&v108 + 1) = 0x40000000;
  *(_QWORD *)&v109 = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_34;
  *((_QWORD *)&v109 + 1) = &unk_24D5D6478;
  v110 = &v129;
  v111 = v6;
  v15 = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v82);
  v17 = v15;
  if (v15)
  {
    v18 = v16;
    v90 = (void ***)v15;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    tlv::parseV<pbm::tlv::SecondNameInfo>((unsigned __int8 **)&v90, v16, (uint64_t *)&v102);
    if (v90)
    {
      ((void (*)(__int128 *, void ***))v109)(&v108, &v102);
      v96 = &v102;
      std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
    }
    else
    {
      v96 = &v102;
      std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(v82[0], 16, v17, v18);
    }
  }
  v102 = v10;
  v103 = 0x40000000;
  v104 = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_2;
  v105 = &unk_24D5D64A0;
  v106 = &v129;
  v107 = v6;
  v19 = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v82);
  v21 = v19;
  if (v19)
  {
    v22 = v20;
    v84 = (void ****)v19;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    tlv::parseV<pbm::tlv::AdditionalNumberInfo>((unsigned __int8 **)&v84, v20, (uint64_t *)&v96);
    if (v84)
    {
      v104((uint64_t)&v102, (unsigned __int16 **)&v96);
      v90 = (void ***)&v96;
      std::vector<pbm::tlv::AdditionalNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
    }
    else
    {
      v90 = (void ***)&v96;
      std::vector<pbm::tlv::AdditionalNumber>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(v82[0], 17, v21, v22);
    }
  }
  v96 = (void ***)v10;
  v97 = 0x40000000;
  v98 = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_3;
  v99 = &unk_24D5D64C8;
  v100 = &v129;
  v101 = v6;
  v23 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v82);
  v25 = v23;
  if (v23)
  {
    v26 = v24;
    *(_QWORD *)&buf = v23;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    tlv::parseV<pbm::tlv::GroupIdInfo>((unsigned __int8 **)&buf, v24, (uint64_t *)&v90);
    if ((_QWORD)buf)
    {
      v98((uint64_t)&v96, (unsigned __int16 **)&v90);
      v84 = &v90;
      std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
    }
    else
    {
      v84 = &v90;
      std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v82[0], 18, v25, v26);
    }
  }
  v90 = (void ***)v10;
  v91 = 0x40000000;
  v92 = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_4;
  v93 = &unk_24D5D64F0;
  v94 = &v129;
  v95 = v6;
  v27 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v82);
  v29 = v27;
  if (v27)
  {
    v30 = v28;
    *(_QWORD *)&v83 = v27;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    tlv::parseV<pbm::tlv::EmailInfo>((unsigned __int8 **)&v83, v28, (uint64_t *)&v84);
    if ((_QWORD)v83)
    {
      v92((uint64_t)&v90, (unsigned __int16 **)&v84);
      *(_QWORD *)&buf = &v84;
      std::vector<pbm::tlv::EmailId>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    }
    else
    {
      *(_QWORD *)&buf = &v84;
      std::vector<pbm::tlv::EmailId>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v82[0], 19, v29, v30);
    }
  }
  v84 = (void ****)v10;
  v85 = 0x40000000;
  v86 = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_indEN3qmi16SubscriptionTypeERKN3pbm19ReadRecordUndecoded10IndicationE_block_invoke_5;
  v87 = &unk_24D5D6518;
  v88 = &v129;
  v89 = v6;
  v31 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v82);
  v33 = v31;
  if (v31)
  {
    v34 = v32;
    *(_QWORD *)&v83 = v31;
    buf = 0uLL;
    v137 = 0;
    tlv::parseV<pbm::tlv::HiddenInfo>((unsigned __int8 **)&v83, v32, (uint64_t *)&buf);
    v35 = v83;
    if ((_QWORD)v83)
      v86((char **)&v84, (unsigned __int16 **)&buf);
    if ((_QWORD)buf)
    {
      *((_QWORD *)&buf + 1) = buf;
      operator delete((void *)buf);
    }
    if (!v35)
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(v82[0], 20, v33, v34);
  }
  v36 = operator new(0x30uLL);
  v80 = v6;
  v81 = v7;
  v36[1] = 0;
  v36[2] = 0;
  *v36 = &off_24D5D6F88;
  v36[4] = 0;
  v36[5] = 0;
  v36[3] = 0;
  *(_QWORD *)&v83 = v36 + 3;
  *((_QWORD *)&v83 + 1) = v36;
  v37 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    v38 = v130[7];
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v38;
    _os_log_impl(&dword_216897000, v37, OS_LOG_TYPE_DEFAULT, "#I Phone Book Size to Fire Event: %ld", (uint8_t *)&buf, 0xCu);
  }
  v39 = (uint64_t *)v130[5];
  v40 = v130 + 6;
  if (v39 != v130 + 6)
  {
    do
    {
      v41 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        v42 = v39 + 6;
        if (*((char *)v39 + 71) < 0)
          v42 = (_QWORD *)*v42;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v42;
        _os_log_impl(&dword_216897000, v41, OS_LOG_TYPE_DEFAULT, "#I Added %s", (uint8_t *)&buf, 0xCu);
      }
      v43 = (uint64_t *)v83;
      v44 = *(_QWORD *)(v83 + 8);
      v45 = *(_QWORD *)(v83 + 16);
      if (v44 >= v45)
      {
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - *(_QWORD *)v83) >> 7);
        v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAALL)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v49 = v8;
        v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - *(_QWORD *)v83) >> 7);
        if (2 * v50 > v48)
          v48 = 2 * v50;
        if (v50 >= 0x55555555555555)
          v51 = 0xAAAAAAAAAAAAAALL;
        else
          v51 = v48;
        v139 = v83 + 16;
        if (v51)
        {
          if (v51 > 0xAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v52 = (char *)operator new(384 * v51);
        }
        else
        {
          v52 = 0;
        }
        *(_QWORD *)&buf = v52;
        *((_QWORD *)&buf + 1) = &v52[384 * v47];
        v137 = *((_QWORD *)&buf + 1);
        v138 = &v52[384 * v51];
        CSIPhoneBookEntry::CSIPhoneBookEntry(*((CSIPhoneBookEntry **)&buf + 1), (const CSIPhoneBookEntry *)(v39 + 5));
        v53 = 0;
        v54 = *((_QWORD *)&buf + 1);
        v137 += 384;
        v55 = *v43;
        for (i = v43[1];
              i + v53 != v55;
              CSIPhoneBookEntry::CSIPhoneBookEntry((CSIPhoneBookEntry *)(v53 + v54), (const CSIPhoneBookEntry *)(v53 + i)))
        {
          v53 -= 384;
        }
        v57 = *v43;
        *v43 = v54 + v53;
        *(_QWORD *)&buf = v57;
        *((_QWORD *)&buf + 1) = v57;
        v58 = v43[1];
        v46 = v137;
        v43[1] = v137;
        v137 = v58;
        v59 = (char *)v43[2];
        v43[2] = (uint64_t)v138;
        v138 = v59;
        std::__split_buffer<CSIPhoneBookEntry>::~__split_buffer((uint64_t)&buf);
        v8 = v49;
      }
      else
      {
        CSIPhoneBookEntry::CSIPhoneBookEntry(*(CSIPhoneBookEntry **)(v83 + 8), (const CSIPhoneBookEntry *)(v39 + 5));
        v46 = v44 + 384;
        v43[1] = v44 + 384;
      }
      v43[1] = v46;
      v60 = (uint64_t *)v39[1];
      if (v60)
      {
        do
        {
          v61 = v60;
          v60 = (uint64_t *)*v60;
        }
        while (v60);
      }
      else
      {
        do
        {
          v61 = (uint64_t *)v39[2];
          v5 = *v61 == (_QWORD)v39;
          v39 = v61;
        }
        while (!v5);
      }
      v39 = v61;
    }
    while (v61 != v40);
  }
  v62 = *((unsigned __int8 *)v126 + 24);
  v63 = *v8;
  v64 = os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT);
  if (v62)
  {
    if (v64)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_216897000, v63, OS_LOG_TYPE_DEFAULT, "#I Sending out partial fetch response", (uint8_t *)&buf, 2u);
    }
    v65 = *(_QWORD *)(v80 + 64);
    v66 = *((unsigned int *)v122 + 6);
    buf = v83;
    if (*((_QWORD *)&v83 + 1))
    {
      v67 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, __int128 *))(*(_QWORD *)v65 + 48))(v65, v81, v66, &buf);
    v69 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v70 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      goto LABEL_87;
    }
  }
  else
  {
    if (v64)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_216897000, v63, OS_LOG_TYPE_DEFAULT, "#I Sending out complete fetch response", (uint8_t *)&buf, 2u);
    }
    v72 = *(_QWORD *)(v80 + 64);
    v73 = *((unsigned int *)v122 + 6);
    buf = v83;
    if (*((_QWORD *)&v83 + 1))
    {
      v74 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, __int128 *))(*(_QWORD *)v72 + 56))(v72, v81, v73, &buf);
    v69 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v71 = __ldaxr(v76);
      while (__stlxr(v71 - 1, v76));
LABEL_87:
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  _Block_object_dispose(&v121, 8);
  _Block_object_dispose(&v125, 8);
  _Block_object_dispose(&v129, 8);
  std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::destroy(v135[0]);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v82);
}

void sub_2169A274C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v59 - 160);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose((const void *)(v59 - 256), 8);
  _Block_object_dispose((const void *)(v59 - 224), 8);
  std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::destroy(*(void ***)(v59 - 176));
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a14);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6>(unsigned short,QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_6 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D6A80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D6A80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  const void **v4;
  char *v5;
  BOOL *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  uint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v33;
  void *__p[2];
  __int128 v35;
  uint8_t buf[8];
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  void *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  _QWORD aBlock[5];

  LODWORD(v2) = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)__p = 0u;
  v35 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v4 = (const void **)__p[1];
  if (__p[1] != (void *)v35)
  {
    while (*((_BYTE *)*v4 + 8) != 1)
    {
      if (++v4 == (const void **)v35)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v35)
  {
LABEL_8:
    v7 = operator new();
    v8 = v7;
    *(_WORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = &off_24D5D6B98;
    v9 = v35;
    if ((unint64_t)v35 >= *((_QWORD *)&v35 + 1))
    {
      v11 = (uint64_t)(v35 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(*((_QWORD *)&v35 + 1) - (unint64_t)__p[1]) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (*((_QWORD *)&v35 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v35 + 8, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v8;
      v10 = v15 + 1;
      v18 = (char *)__p[1];
      v17 = (char *)v35;
      if ((void *)v35 != __p[1])
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)__p[1];
      }
      __p[1] = v15;
      *(_QWORD *)&v35 = v10;
      *((_QWORD *)&v35 + 1) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v35 = v7;
      v10 = (_QWORD *)(v9 + 8);
    }
    v6 = (BOOL *)(v8 + 9);
    *(_QWORD *)&v35 = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = (BOOL *)(v5 + 9);
  }
  *v6 = (_DWORD)v2 == 2;
  v20 = qmi::ClientRouter::get();
  v21 = operator new();
  *(_QWORD *)v21 = v20;
  *(_QWORD *)(v21 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v21 + 16) = 25000;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  v33 = v21;
  v22 = (std::__shared_weak_count *)operator new(0x28uLL);
  v22->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6C00;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  LODWORD(v22[1].__shared_owners_) = v2;
  v24 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v37 = 1174405120;
  v38 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver24bindPBMSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
  v39 = &__block_descriptor_tmp_67_5;
  v40 = v22 + 1;
  v41 = v22;
  do
    v25 = __ldxr(p_shared_owners);
  while (__stxr(v25 + 1, p_shared_owners));
  aBlock[0] = v24;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3pbm16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5D6C48;
  aBlock[4] = buf;
  *(_QWORD *)(v21 + 32) = _Block_copy(aBlock);
  v26 = v41;
  if (v41)
  {
    v27 = (unint64_t *)&v41->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  v30 = v33;
  v33 = 0;
  if (v30)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v33, v30);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  if ((v2 - 1) >= 3)
    v2 = 0;
  else
    v2 = v2;
  v31 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 88) + 16))(*(_QWORD *)(v3 + 88), v2);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v31, OS_LOG_TYPE_DEFAULT, "#I QMI PBM client has started", buf, 2u);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 64) + 16))(*(_QWORD *)(v3 + 64), v2, 1);
}

void sub_2169A2D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;

  v24 = a20;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v27 = __ldaxr(v22);
  while (__stlxr(v27 - 1, v22));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (a10)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v20, a10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_7>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D6B00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D6B00;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = *(_QWORD *)(a1 + 8);
  if ((*a2 - 1) >= 3)
    v3 = 0;
  else
    v3 = *a2;
  v4 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 88) + 16))(*(_QWORD *)(v2 + 88), v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I QMI PBM client has been stopped", v5, 2u);
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 64) + 16))(*(_QWORD *)(v2 + 64), v3, 0);
  QMIPhonebookCommandDriver::reset(v2, v3);
}

uint64_t std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8,std::allocator<QMIPhonebookCommandDriver::bootstrap_sync(dispatch::group_session,std::shared_ptr<PhonebookDriverEventHandlerInterface>)::$_8>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::SubscriptionType>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::SubscriptionType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<pbm::tlv::SubscriptionType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::SubscriptionType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D6B98;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver24bindPBMSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  const void **v11;
  char *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  uint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *__p[2];
  __int128 v40;
  _QWORD aBlock[5];
  _BYTE buf[24];
  void *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  if (*(_DWORD *)(a2 + 4))
  {
    v5 = *((_DWORD *)v2 + 2);
    v6 = v5 - 1 >= 3 ? 0 : v5;
    v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 88) + 16))(*(_QWORD *)(v3 + 88), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = qmi::asString();
      v9 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#N Error binding PBM subscription: %s (0x%x)", buf, 0x12u);
    }
  }
  v10 = *((_DWORD *)v2 + 2);
  *(_OWORD *)__p = 0u;
  v40 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v11 = (const void **)__p[1];
  if (__p[1] != (void *)v40)
  {
    while (*((_BYTE *)*v11 + 8) != 1)
    {
      if (++v11 == (const void **)v40)
        goto LABEL_14;
    }
  }
  if (v11 == (const void **)v40)
  {
LABEL_14:
    v14 = operator new();
    v15 = v14;
    *(_BYTE *)(v14 + 8) = 1;
    *(_QWORD *)v14 = &off_24D5D6C90;
    *(_DWORD *)(v14 + 12) = 0;
    v13 = (_DWORD *)(v14 + 12);
    v16 = v40;
    if ((unint64_t)v40 >= *((_QWORD *)&v40 + 1))
    {
      v18 = (uint64_t)(v40 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v19 = (uint64_t)(*((_QWORD *)&v40 + 1) - (unint64_t)__p[1]) >> 2;
      if (v19 <= v18 + 1)
        v19 = v18 + 1;
      if (*((_QWORD *)&v40 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v40 + 8, v20);
      else
        v21 = 0;
      v22 = (uint64_t *)&v21[8 * v18];
      v23 = &v21[8 * v20];
      *v22 = v15;
      v17 = v22 + 1;
      v25 = (char *)__p[1];
      v24 = (char *)v40;
      if ((void *)v40 != __p[1])
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *--v22 = v26;
        }
        while (v24 != v25);
        v24 = (char *)__p[1];
      }
      __p[1] = v22;
      *(_QWORD *)&v40 = v17;
      *((_QWORD *)&v40 + 1) = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_QWORD *)v40 = v14;
      v17 = (_QWORD *)(v16 + 8);
    }
    *(_QWORD *)&v40 = v17;
  }
  else
  {
    if (!v12)
      __cxa_bad_cast();
    v13 = v12 + 12;
  }
  *v13 = 7;
  v27 = qmi::ClientRouter::get();
  v28 = operator new();
  *(_QWORD *)v28 = v27;
  *(_QWORD *)(v28 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v28 + 16) = 25000;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v38 = v28;
  v29 = (std::__shared_weak_count *)operator new(0x28uLL);
  v29->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v29->__shared_owners_;
  v29->__shared_weak_owners_ = 0;
  v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6CF8;
  v29[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  LODWORD(v29[1].__shared_owners_) = v10;
  v31 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 1174405120;
  *(_QWORD *)&buf[16] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver22registerForIndicationsENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
  v43 = &__block_descriptor_tmp_69_4;
  v44 = v29 + 1;
  v45 = v29;
  do
    v32 = __ldxr(p_shared_owners);
  while (__stxr(v32 + 1, p_shared_owners));
  aBlock[0] = v31;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_16;
  aBlock[3] = &unk_24D5D6D40;
  aBlock[4] = buf;
  *(_QWORD *)(v28 + 32) = _Block_copy(aBlock);
  v33 = v45;
  if (v45)
  {
    v34 = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  v37 = v38;
  v38 = 0;
  if (v37)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v38, v37);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2169A3414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;

  v30 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  do
    v33 = __ldaxr(v28);
  while (__stlxr(v33 - 1, v28));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  if (a10)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v26, a10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver24bindPBMSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver24bindPBMSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::bindPBMSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIPhonebookCommandDriver::bindPBMSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::bindPBMSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIPhonebookCommandDriver::bindPBMSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6C00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3pbm16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169A3614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::EventRegMask>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::EventRegMask>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<pbm::tlv::EventRegMask>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_DWORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::EventRegMask>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D6C90;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver22registerForIndicationsENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  os_log_t *v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a1 + 32);
  v4 = *v3;
  v5 = *((_DWORD *)v3 + 2);
  if (v5 - 1 >= 3)
    v6 = 0;
  else
    v6 = v5;
  v7 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 88) + 16))(*(_QWORD *)(v4 + 88), v6);
  v8 = *(_DWORD *)(a2 + 4);
  v9 = *v7;
  v10 = os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      v12[0] = 67109378;
      v12[1] = v8;
      v13 = 2080;
      v14 = qmi::asString();
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#N Error received in Register for PBM Indications response, Error in response with code = 0x%x (%s)", (uint8_t *)v12, 0x12u);
    }
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 64) + 16))(*(_QWORD *)(v4 + 64), v6, 0);
  }
  else
  {
    if (v10)
    {
      LOWORD(v12[0]) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully registered for indications on PBM", (uint8_t *)v12, 2u);
    }
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 64) + 32))(*(_QWORD *)(v4 + 64), v6);
  }
}

uint64_t __copy_helper_block_e8_32c109_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver22registerForIndicationsEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c109_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver22registerForIndicationsEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::registerForIndications(qmi::SubscriptionType)::$_0,std::allocator<QMIPhonebookCommandDriver::registerForIndications(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::registerForIndications(qmi::SubscriptionType)::$_0,std::allocator<QMIPhonebookCommandDriver::registerForIndications(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::allocate_shared[abi:ne180100]<std::set<PhoneBookType>,std::allocator<std::set<PhoneBookType>>,std::set<PhoneBookType>&,void>(uint64_t ***a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;

  result = operator new(0x30uLL);
  v5 = (uint64_t **)result;
  result[1] = 0;
  result[2] = 0;
  *result = &off_24D5D6D70;
  result[4] = 0;
  v6 = result + 4;
  result[3] = result + 4;
  v7 = (uint64_t **)(result + 3);
  result[5] = 0;
  v10 = (_QWORD *)*a2;
  v8 = a2 + 1;
  v9 = v10;
  if (v10 != v8)
  {
    v11 = 0;
    v12 = result + 4;
    while (1)
    {
      v13 = *((_DWORD *)v9 + 7);
      v14 = v6;
      if (v12 == v6)
        goto LABEL_9;
      v15 = v11;
      v16 = v6;
      if (v11)
      {
        do
        {
          v14 = v15;
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          v14 = (uint64_t *)v16[2];
          v17 = *v14 == (_QWORD)v16;
          v16 = v14;
        }
        while (v17);
      }
      if (*((_DWORD *)v14 + 7) < v13)
      {
LABEL_9:
        if (v11)
          v18 = (uint64_t **)v14;
        else
          v18 = (uint64_t **)v6;
        if (v11)
          v19 = (uint64_t **)(v14 + 1);
        else
          v19 = (uint64_t **)v6;
        if (!*v19)
        {
LABEL_25:
          v22 = (uint64_t *)operator new(0x20uLL);
          *((_DWORD *)v22 + 7) = v13;
          result = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(v7, (uint64_t)v18, v19, v22);
        }
      }
      else
      {
        v19 = (uint64_t **)v6;
        v18 = (uint64_t **)v6;
        if (!v11)
          goto LABEL_25;
        v20 = v11;
        while (1)
        {
          while (1)
          {
            v18 = (uint64_t **)v20;
            v21 = *((_DWORD *)v20 + 7);
            if (v21 <= v13)
              break;
            v20 = *v18;
            v19 = v18;
            if (!*v18)
              goto LABEL_25;
          }
          if (v21 >= v13)
            break;
          v20 = v18[1];
          if (!v20)
          {
            v19 = v18 + 1;
            goto LABEL_25;
          }
        }
      }
      v23 = (_QWORD *)v9[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v9[2];
          v17 = *v24 == (_QWORD)v9;
          v9 = v24;
        }
        while (!v17);
      }
      if (v24 == v8)
        break;
      v11 = (uint64_t *)*v6;
      v12 = *v7;
      v9 = v24;
    }
  }
  *a1 = v7;
  a1[1] = v5;
  return result;
}

void sub_2169A3A68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  _QWORD *v2;
  void *v4;

  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::set<PhoneBookType>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::set<PhoneBookType>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_emplace<std::set<PhoneBookType>>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*(_QWORD **)(a1 + 32));
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PhoneBookInformation>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PhoneBookInformation>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMnc>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PhoneBookInformation>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<qos::tlv::NetworkProfileChange>(a2, a1 + 10);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PhoneBookInformation>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D6DD8;
  *(_DWORD *)(result + 10) = *(_DWORD *)(a1 + 10);
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver24getPhoneBookCapabilitiesEN10subscriber7SimSlotE13PhoneBookTypeE3__0EEOS1_OT__block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  os_log_t *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *TlvValue;
  int v15;
  _BYTE *v16;
  int v17;
  __int16 v18;
  _BYTE *v19;
  int v20;
  _BYTE *v21;
  int v22;
  _BYTE *v23;
  int v24;
  _BYTE *v25;
  int v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  _BYTE *v31;
  int v32;
  __int16 v33;
  _BYTE *v34;
  int v35;
  _BYTE *v36;
  int v37;
  char v38;
  _BYTE *v39;
  int v40;
  _BYTE *v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  _QWORD v51[3];
  _BYTE *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, __int16 *);
  void *v57;
  uint8_t *v58;
  _QWORD v59[2];
  uint64_t (*v60)(uint64_t, unsigned __int8 *);
  void *v61;
  uint8_t *v62;
  uint64_t v63;
  __int16 v64;
  uint8_t buf[8];
  __int128 v66;
  __n128 (*v67)(uint64_t, uint64_t);
  uint64_t (*v68)();
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[3];

  v71[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  LODWORD(v4) = *((_DWORD *)v2 + 2);
  v5 = a2[1];
  v51[0] = *a2;
  v51[1] = v5;
  v6 = a2[2];
  v51[2] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v51);
  if ((v4 - 1) >= 3)
    v4 = 0;
  else
    v4 = v4;
  v9 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 88) + 16))(*(_QWORD *)(v3 + 88), v4);
  v10 = HIDWORD(v51[0]);
  if (HIDWORD(v51[0]))
  {
    v11 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      v12 = qmi::asString();
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v10;
      LOWORD(v66) = 2080;
      *(_QWORD *)((char *)&v66 + 2) = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#N Error received for Request for PB Capabilities. Error in response with code = 0x%x (%s)", buf, 0x12u);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 64) + 24))(*(_QWORD *)(v3 + 64), v4, 1);
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&v66 = buf;
    *((_QWORD *)&v66 + 1) = 0x4002000000;
    v67 = __Block_byref_object_copy__15;
    v68 = __Block_byref_object_dispose__16;
    v70 = 0;
    v71[0] = 0;
    v69 = 0;
    PBCapabilities::PrimaryNumber::PrimaryNumber((PBCapabilities::PrimaryNumber *)&v69);
    PBCapabilities::Groups::Groups((PBCapabilities::Groups *)((char *)&v70 + 4));
    PBCapabilities::AdditionaNumber::AdditionaNumber((PBCapabilities::AdditionaNumber *)((char *)&v70 + 6));
    PBCapabilities::Email::Email((PBCapabilities::Email *)((char *)v71 + 1));
    PBCapabilities::SecondName::SecondName((PBCapabilities::SecondName *)((char *)v71 + 3));
    PBCapabilities::HiddenRecords::HiddenRecords((PBCapabilities::HiddenRecords *)((char *)v71 + 4));
    v13 = MEMORY[0x24BDAC760];
    v59[0] = MEMORY[0x24BDAC760];
    v59[1] = 0x40000000;
    v60 = ___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke;
    v61 = &unk_24D5D63D0;
    v62 = buf;
    v63 = v3;
    TlvValue = (_BYTE *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v51);
    v16 = TlvValue;
    if (TlvValue)
    {
      v17 = v15;
      v52 = TlvValue;
      v54 = tlv::parseV<pbm::tlv::CapabilityBasicInformation>((unint64_t *)&v52, v15);
      LOWORD(v55) = v18;
      if (v52)
        v60((uint64_t)v59, (unsigned __int8 *)&v54);
      else
        ((void (*)(_QWORD, uint64_t, _BYTE *, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v51[0]), 16, v16, v17);
    }
    v54 = v13;
    v55 = 0x40000000;
    v56 = (uint64_t (*)(uint64_t, __int16 *))___ZN25QMIPhonebookCommandDriver24handlePBCapabilities_resEN3qmi16SubscriptionTypeERKN3pbm13PBCapabilites8ResponseE_block_invoke_2;
    v57 = &unk_24D5D63F8;
    v58 = buf;
    v19 = (_BYTE *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v51);
    v21 = v19;
    if (v19)
    {
      v22 = v20;
      v52 = v19;
      v64 = tlv::parseV<pbm::tlv::GroupCapability>((unint64_t *)&v52, v20);
      if (v52)
        v56((uint64_t)&v54, &v64);
      else
        ((void (*)(_QWORD, uint64_t, _BYTE *, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v51[0]), 17, v21, v22);
    }
    v23 = (_BYTE *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v51);
    v25 = v23;
    if (v23)
    {
      v26 = v24;
      v52 = v23;
      v27 = tlv::parseV<pbm::tlv::AdditionalNumberCapability>(&v52, v24);
      if (v52)
      {
        v28 = v66;
        *(_WORD *)(v66 + 54) = v27;
        *(_BYTE *)(v28 + 56) = BYTE2(v27);
      }
      else
      {
        ((void (*)(_QWORD, uint64_t, _BYTE *, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v51[0]), 18, v25, v26);
      }
    }
    v29 = (_BYTE *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v51);
    v31 = v29;
    if (v29)
    {
      v32 = v30;
      v52 = v29;
      v33 = tlv::parseV<pbm::tlv::EmailCapability>((unint64_t *)&v52, v30);
      if (v52)
        *(_WORD *)(v66 + 57) = v33;
      else
        ((void (*)(_QWORD, uint64_t, _BYTE *, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v51[0]), 19, v31, v32);
    }
    v34 = (_BYTE *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v51);
    v36 = v34;
    if (v34)
    {
      v37 = v35;
      v52 = v34;
      v38 = tlv::parseV<pbm::tlv::SecondNameCapability>((unint64_t *)&v52, v35);
      if (v52)
        *(_BYTE *)(v66 + 59) = v38;
      else
        ((void (*)(_QWORD, uint64_t, _BYTE *, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v51[0]), 20, v36, v37);
    }
    v39 = (_BYTE *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v51);
    v41 = v39;
    if (v39)
    {
      v42 = v40;
      v52 = v39;
      v43 = tlv::parseV<pbm::tlv::HiddenRecordsCapability>((unint64_t *)&v52, v40);
      if (v52)
        *(_BYTE *)(v66 + 60) = v43;
      else
        ((void (*)(_QWORD, uint64_t, _BYTE *, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v51[0]), 21, v41, v42);
    }
    v44 = *(_QWORD *)(v3 + 64);
    v45 = v66;
    v46 = (char *)operator new(0x30uLL);
    *((_QWORD *)v46 + 1) = 0;
    *((_QWORD *)v46 + 2) = 0;
    *(_QWORD *)v46 = &off_24D5D6E90;
    v47 = *(_OWORD *)(v45 + 40);
    *((_QWORD *)v46 + 5) = *(_QWORD *)(v45 + 56);
    *(_OWORD *)(v46 + 24) = v47;
    v52 = v46 + 24;
    v53 = (std::__shared_weak_count *)v46;
    (*(void (**)(uint64_t, uint64_t, _BYTE **))(*(_QWORD *)v44 + 40))(v44, v4, &v52);
    v48 = v53;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v50 = __ldaxr(p_shared_owners);
      while (__stlxr(v50 - 1, p_shared_owners));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    _Block_object_dispose(buf, 8);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v51);
}

void sub_2169A4078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Block_object_dispose(&a27, 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c124_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver24getPhoneBookCapabilitiesEN10subscriber7SimSlotE13PhoneBookTypeE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c124_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver24getPhoneBookCapabilitiesEN10subscriber7SimSlotE13PhoneBookTypeE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::getPhoneBookCapabilities(subscriber::SimSlot,PhoneBookType)::$_0,std::allocator<QMIPhonebookCommandDriver::getPhoneBookCapabilities(subscriber::SimSlot,PhoneBookType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6E40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::getPhoneBookCapabilities(subscriber::SimSlot,PhoneBookType)::$_0,std::allocator<QMIPhonebookCommandDriver::getPhoneBookCapabilities(subscriber::SimSlot,PhoneBookType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6E40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_emplace<PBCapabilities>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6E90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PBCapabilities>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6E90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver5fetchEN10subscriber7SimSlotE13PhoneBookTypejjE3__1EEOS1_OT__block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  os_log_t *v8;
  os_log_t *v9;
  int v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t TlvValue;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint8_t buf[8];
  __int128 v26;
  void *v27;
  uint64_t v28;
  os_log_t *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  int v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a1 + 32);
  v4 = *v3;
  v5 = *((_DWORD *)v3 + 2);
  v6 = *((_DWORD *)v3 + 3);
  if (v5 - 1 >= 3)
    v7 = 0;
  else
    v7 = v5;
  v8 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 88) + 16))(*(_QWORD *)(v4 + 88), v7);
  v9 = v8;
  v10 = *((_DWORD *)a2 + 1);
  if (v10)
  {
    v11 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v10;
      LOWORD(v26) = 2080;
      *(_QWORD *)((char *)&v26 + 2) = qmi::asString();
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#N Error received for Request for Read Record. Error in response with code = 0x%x (%s)", buf, 0x12u);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 64) + 24))(*(_QWORD *)(v4 + 64), v7, 3);
    return;
  }
  v12 = (std::__shared_weak_count *)operator new(0x30uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12[1].__vftable = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6F88;
  v12[1].__shared_owners_ = 0;
  v12[1].__shared_weak_owners_ = 0;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&v26 = 1174405120;
  *((_QWORD *)&v26 + 1) = ___ZN25QMIPhonebookCommandDriver20handleReadRecord_resEN3qmi16SubscriptionTypeE13PhoneBookTypeRKN3pbm19ReadRecordUndecoded8ResponseE_block_invoke;
  v27 = &__block_descriptor_tmp_30_5;
  v28 = v4;
  v29 = v9;
  v32 = v7;
  v33 = v6;
  v30 = v12 + 1;
  v31 = v12;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  TlvValue = qmi::MessageBase::findTlvValue(a2);
  v17 = TlvValue;
  v18 = v12;
  if (!TlvValue)
    goto LABEL_15;
  v19 = v16;
  v24 = TlvValue;
  v23 = tlv::parseV<pbm::tlv::NumRecords>((unint64_t *)&v24, v16);
  if (!v24)
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 16, v17, v19);
    v18 = v12;
    goto LABEL_15;
  }
  ___ZN25QMIPhonebookCommandDriver20handleReadRecord_resEN3qmi16SubscriptionTypeE13PhoneBookTypeRKN3pbm19ReadRecordUndecoded8ResponseE_block_invoke((uint64_t)buf, &v23);
  v18 = v31;
  if (v31)
  {
LABEL_15:
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_19;
  }
  do
LABEL_19:
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_2169A43CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c106_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver5fetchEN10subscriber7SimSlotE13PhoneBookTypejjE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c106_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver5fetchEN10subscriber7SimSlotE13PhoneBookTypejjE3__1EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::fetch(subscriber::SimSlot,PhoneBookType,unsigned int,unsigned int)::$_1,std::allocator<QMIPhonebookCommandDriver::fetch(subscriber::SimSlot,PhoneBookType,unsigned int,unsigned int)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::fetch(subscriber::SimSlot,PhoneBookType,unsigned int,unsigned int)::$_1,std::allocator<QMIPhonebookCommandDriver::fetch(subscriber::SimSlot,PhoneBookType,unsigned int,unsigned int)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6F10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3pbm19ReadRecordUndecoded8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169A4574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<CSIPhoneBookEntry>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6F88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<CSIPhoneBookEntry>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D6F88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_emplace<std::vector<CSIPhoneBookEntry>>::__on_zero_shared(uint64_t a1)
{
  void **v1;
  void **v3;
  void **v4;

  v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    v3 = *(void ***)(a1 + 32);
    v4 = v1;
    if (v3 != v1)
    {
      do
        CSIPhoneBookEntry::~CSIPhoneBookEntry(v3 - 48);
      while (v3 != v1);
      v4 = *(void ***)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::destroy(void **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::destroy(a1[1]);
    CSIPhoneBookEntry::~CSIPhoneBookEntry(a1 + 5);
    operator delete(a1);
  }
}

char **std::__tree<std::__value_type<unsigned int,CSIPhoneBookEntry>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CSIPhoneBookEntry>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CSIPhoneBookEntry>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  char *v5;
  uint64_t **v6;
  char **v7;
  char **v8;
  unsigned int v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  _OWORD *v22;
  int v23;
  _BYTE *v24;
  uint64_t *v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  char v35;
  __int128 __p;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  char v41;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  v7 = (char **)(a1 + 1);
  v8 = (char **)(a1 + 1);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (char **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v28 = 0;
    v10 = (char *)operator new(0x1A8uLL);
    v27[0] = v10;
    v27[1] = v6;
    *((_DWORD *)v10 + 8) = *a3;
    *((_QWORD *)v10 + 6) = 0;
    *((_QWORD *)v10 + 7) = 0;
    *((_QWORD *)v10 + 8) = 0;
    CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)(v10 + 72));
    CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)(v10 + 208));
    *((_QWORD *)v10 + 5) = -1;
    *((_QWORD *)v10 + 51) = 0;
    *(_OWORD *)(v10 + 376) = 0u;
    *(_OWORD *)(v10 + 392) = 0u;
    *(_OWORD *)(v10 + 344) = 0u;
    *(_OWORD *)(v10 + 360) = 0u;
    if (v10[71] < 0)
    {
      *((_QWORD *)v10 + 7) = 0;
      v11 = (_BYTE *)*((_QWORD *)v10 + 6);
    }
    else
    {
      v10[71] = 0;
      v11 = v10 + 48;
    }
    v12 = v10 + 344;
    v13 = v10 + 368;
    *v11 = 0;
    CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)&v29, (const char *)&unk_216AC4FCA);
    *((_QWORD *)v10 + 9) = v29;
    v14 = (void **)(v10 + 80);
    if (v10[103] < 0)
      operator delete(*v14);
    *(_OWORD *)v14 = v30;
    *((_QWORD *)v10 + 12) = v31;
    HIBYTE(v31) = 0;
    LOBYTE(v30) = 0;
    v15 = (void **)(v10 + 104);
    if (v10[127] < 0)
      operator delete(*v15);
    *(_OWORD *)v15 = v32;
    *((_QWORD *)v10 + 15) = v33;
    HIBYTE(v33) = 0;
    LOBYTE(v32) = 0;
    *((_DWORD *)v10 + 32) = v34;
    v10[132] = v35;
    v16 = (void **)(v10 + 136);
    if (v10[159] < 0)
      operator delete(*v16);
    v17 = 0;
    *(_OWORD *)v16 = __p;
    *((_QWORD *)v10 + 19) = v37;
    HIBYTE(v37) = 0;
    LOBYTE(__p) = 0;
    v18 = (void **)(v10 + 160);
    if (v10[183] < 0)
    {
      operator delete(*v18);
      v17 = HIBYTE(v37);
    }
    *(_OWORD *)v18 = v38;
    *((_QWORD *)v10 + 22) = v39;
    HIBYTE(v39) = 0;
    LOBYTE(v38) = 0;
    *(_OWORD *)(v10 + 184) = v40;
    v10[200] = v41;
    if (v17 < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v33) < 0)
      operator delete((void *)v32);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)v30);
    CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)&v29, (const char *)&unk_216AC4FCA);
    *((_QWORD *)v10 + 26) = v29;
    v19 = (void **)(v10 + 216);
    if (v10[239] < 0)
      operator delete(*v19);
    *(_OWORD *)v19 = v30;
    *((_QWORD *)v10 + 29) = v31;
    HIBYTE(v31) = 0;
    LOBYTE(v30) = 0;
    v20 = (void **)(v10 + 240);
    if (v10[263] < 0)
      operator delete(*v20);
    *(_OWORD *)v20 = v32;
    *((_QWORD *)v10 + 32) = v33;
    HIBYTE(v33) = 0;
    LOBYTE(v32) = 0;
    *((_DWORD *)v10 + 66) = v34;
    v10[268] = v35;
    v21 = (void **)(v10 + 272);
    if (v10[295] < 0)
      operator delete(*v21);
    *(_OWORD *)v21 = __p;
    *((_QWORD *)v10 + 36) = v37;
    HIBYTE(v37) = 0;
    LOBYTE(__p) = 0;
    v22 = v10 + 296;
    if (v10[319] < 0)
    {
      operator delete(*((void **)v10 + 37));
      v23 = SHIBYTE(v37);
      *v22 = v38;
      *((_QWORD *)v10 + 39) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(v38) = 0;
      *((_OWORD *)v10 + 20) = v40;
      v10[336] = v41;
      if (v23 < 0)
        operator delete((void *)__p);
    }
    else
    {
      *v22 = v38;
      *((_QWORD *)v10 + 39) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(v38) = 0;
      *((_OWORD *)v10 + 20) = v40;
      v10[336] = v41;
    }
    if (SHIBYTE(v33) < 0)
      operator delete((void *)v32);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)v30);
    if (v10[367] < 0)
    {
      *((_QWORD *)v10 + 44) = 0;
      v12 = (_BYTE *)*((_QWORD *)v10 + 43);
    }
    else
    {
      v10[367] = 0;
    }
    *v12 = 0;
    if (v10[391] < 0)
    {
      *((_QWORD *)v10 + 47) = 0;
      v13 = (_BYTE *)*((_QWORD *)v10 + 46);
    }
    else
    {
      v10[391] = 0;
    }
    *v13 = 0;
    if (v10[415] < 0)
    {
      *((_QWORD *)v10 + 50) = 0;
      v24 = (_BYTE *)*((_QWORD *)v10 + 49);
    }
    else
    {
      v10[415] = 0;
      v24 = v10 + 392;
    }
    *v24 = 0;
    v10[416] = 0;
    LOBYTE(v28) = 1;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v8;
    *v7 = v10;
    v25 = (uint64_t *)**a1;
    if (v25)
    {
      *a1 = v25;
      v10 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v8 = (char **)v27[0];
    v27[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,CSIPhoneBookEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,CSIPhoneBookEntry>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
  }
  return v8;
}

void sub_2169A4AE4(_Unwind_Exception *a1, void **a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 415) < 0)
    operator delete(*a2);
  if (*(char *)(v2 + 391) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 367) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 319) < 0)
    operator delete(*(void **)(v2 + 296));
  if (*(char *)(v2 + 295) < 0)
    operator delete(*(void **)(v2 + 272));
  if (*(char *)(v2 + 263) < 0)
    operator delete(*(void **)(v2 + 240));
  if (*(char *)(v2 + 239) < 0)
    operator delete(*(void **)(v2 + 216));
  if (*(char *)(v2 + 183) < 0)
    operator delete(*(void **)(v2 + 160));
  if (*(char *)(v2 + 159) < 0)
    operator delete(*(void **)(v2 + 136));
  if (*(char *)(v2 + 127) < 0)
    operator delete(*(void **)(v2 + 104));
  if (*(char *)(v2 + 103) < 0)
    operator delete(*(void **)(v2 + 80));
  if (*(char *)(v2 + 71) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,CSIPhoneBookEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,CSIPhoneBookEntry>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,CSIPhoneBookEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,CSIPhoneBookEntry>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void **v1;

  v1 = *(void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      CSIPhoneBookEntry::~CSIPhoneBookEntry(v1 + 5);
    operator delete(v1);
  }
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<pbm::tlv::WriteRecordInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24D5D6FF0;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::WriteRecordInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24D5D6FF0;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::WriteRecordInfo>::getSize(uint64_t a1)
{
  return tlv::size<pbm::tlv::WriteRecordInfo>((_QWORD *)(a1 + 16));
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<pbm::tlv::WriteRecordInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<pbm::tlv::WriteRecordInfo>(a2, a1 + 16);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::WriteRecordInfo>::clone(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D6FF0;
  v3 = *(const void **)(a1 + 24);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 24), v3, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 32) - (_QWORD)v3);
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 48), *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48));
  return v2;
}

void sub_2169A4DB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  MEMORY[0x2199FEAC4](v1, 0x1091C4000BCEACBLL);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEE3__0EEOS1_OT__block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  os_log_t *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t TlvValue;
  int v14;
  uint64_t v15;
  int v16;
  unsigned __int16 v17;
  _QWORD v18[3];
  uint8_t buf[8];
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  LODWORD(v4) = *((_DWORD *)v2 + 2);
  v5 = a2[1];
  v18[0] = *a2;
  v18[1] = v5;
  v6 = a2[2];
  v18[2] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v18);
  if ((v4 - 1) >= 3)
    v4 = 0;
  else
    v4 = v4;
  v9 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 88) + 16))(*(_QWORD *)(v3 + 88), v4);
  v10 = HIDWORD(v18[0]);
  if (HIDWORD(v18[0]))
  {
    v11 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      v12 = qmi::asString();
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v10;
      v20 = 2080;
      v21 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#N Error received for Request for Write Record. Error in response with code = 0x%x (%s)", buf, 0x12u);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 64) + 24))(*(_QWORD *)(v3 + 64), v4, 4);
  }
  else
  {
    TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v18);
    v15 = TlvValue;
    if (TlvValue)
    {
      v16 = v14;
      *(_QWORD *)buf = TlvValue;
      v17 = tlv::parseV<pbm::tlv::WriteRecordId>((unint64_t *)buf, v14);
      if (*(_QWORD *)buf)
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v3 + 64) + 80))(*(_QWORD *)(v3 + 64), v4, v17);
      else
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v18[0]), 16, v15, v16);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v18);
}

void sub_2169A4F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c189_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c189_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver10writeEntryEN10subscriber7SimSlotE13PhoneBookTypejRK14CSIPhoneNumberRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::writeEntry(subscriber::SimSlot,PhoneBookType,unsigned int,CSIPhoneNumber const&,std::string const&)::$_0,std::allocator<QMIPhonebookCommandDriver::writeEntry(subscriber::SimSlot,PhoneBookType,unsigned int,CSIPhoneNumber const&,std::string const&)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D7058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::writeEntry(subscriber::SimSlot,PhoneBookType,unsigned int,CSIPhoneNumber const&,std::string const&)::$_0,std::allocator<QMIPhonebookCommandDriver::writeEntry(subscriber::SimSlot,PhoneBookType,unsigned int,CSIPhoneNumber const&,std::string const&)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D7058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PBStateReqInfo>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PBStateReqInfo>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMnc>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PBStateReqInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<qos::tlv::NetworkProfileChange>(a2, a1 + 10);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<pbm::tlv::PBStateReqInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D70C0;
  *(_DWORD *)(result + 10) = *(_DWORD *)(a1 + 10);
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIPhonebookCommandDriver10getPbStateEN10subscriber7SimSlotE13PhoneBookTypeE3__0EEOS1_OT__block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  os_log_t *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t TlvValue;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  _QWORD v18[3];
  int v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[8];
  __int128 v23;
  void *v24;
  uint64_t v25;
  os_log_t *v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  LODWORD(v4) = *((_DWORD *)v2 + 2);
  v5 = a2[1];
  v18[0] = *a2;
  v18[1] = v5;
  v6 = a2[2];
  v18[2] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v18);
  if ((v4 - 1) >= 3)
    v4 = 0;
  else
    v4 = v4;
  v9 = (os_log_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 88) + 16))(*(_QWORD *)(v3 + 88), v4);
  v10 = HIDWORD(v18[0]);
  if (HIDWORD(v18[0]))
  {
    v11 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      v12 = qmi::asString();
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v10;
      LOWORD(v23) = 2080;
      *(_QWORD *)((char *)&v23 + 2) = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#N Error received for Request for PB State Record. Error in response with code = 0x%x (%s)", buf, 0x12u);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 64) + 24))(*(_QWORD *)(v3 + 64), v4, 2);
  }
  else
  {
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&v23 = 0x40000000;
    *((_QWORD *)&v23 + 1) = ___ZN25QMIPhonebookCommandDriver17handlePbState_resEN3qmi16SubscriptionTypeERKN3pbm7PBState8ResponseE_block_invoke;
    v24 = &__block_descriptor_tmp_47_4;
    v25 = v3;
    v26 = v9;
    v27 = v4;
    TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v18);
    v15 = TlvValue;
    if (TlvValue)
    {
      v16 = v14;
      v21 = TlvValue;
      v17 = tlv::parseV<pbm::tlv::PBStateInfo>((unint64_t *)&v21, v14);
      v19 = v17;
      v20 = WORD2(v17);
      if (v21)
        ___ZN25QMIPhonebookCommandDriver17handlePbState_resEN3qmi16SubscriptionTypeERKN3pbm7PBState8ResponseE_block_invoke((uint64_t)buf, (unsigned __int8 *)&v19);
      else
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(LOWORD(v18[0]), 16, v15, v16);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v18);
}

void sub_2169A52C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver10getPbStateEN10subscriber7SimSlotE13PhoneBookTypeE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZN25QMIPhonebookCommandDriver10getPbStateEN10subscriber7SimSlotE13PhoneBookTypeE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::getPbState(subscriber::SimSlot,PhoneBookType)::$_0,std::allocator<QMIPhonebookCommandDriver::getPbState(subscriber::SimSlot,PhoneBookType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D7128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIPhonebookCommandDriver::getPbState(subscriber::SimSlot,PhoneBookType)::$_0,std::allocator<QMIPhonebookCommandDriver::getPbState(subscriber::SimSlot,PhoneBookType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D7128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void Mav30QMIAttachApnCommandDriver::create(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  uint8_t buf[24];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  v4 = operator new();
  v5 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  v25 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)buf = v5;
    *(_QWORD *)&buf[8] = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_OWORD *)buf = *a1;
  }
  AttachApnCommandDriver::AttachApnCommandDriver();
  *(_QWORD *)v4 = off_24D5C33B0;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_BYTE *)(v4 + 128) = 0;
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 16))(*(_QWORD *)&buf[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  *(_QWORD *)v4 = &off_24D5D7178;
  *a2 = v4;
  a2[1] = 0;
  v12 = (std::__shared_weak_count *)operator new();
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D7408;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = (uint64_t)v12;
  v14 = *(std::__shared_weak_count **)(v4 + 16);
  if (v14)
  {
    if (v14->__shared_owners_ != -1)
      goto LABEL_26;
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    *(_QWORD *)(v4 + 8) = v4;
    *(_QWORD *)(v4 + 16) = v12;
    std::__shared_weak_count::__release_weak(v14);
  }
  else
  {
    do
      v18 = __ldxr(v13);
    while (__stxr(v18 + 1, v13));
    v19 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)(v4 + 8) = v4;
    *(_QWORD *)(v4 + 16) = v12;
  }
  do
    v21 = __ldaxr(v13);
  while (__stlxr(v21 - 1, v13));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_26:
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v24 = *(NSObject **)(*a2 + 40);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = subscriber::asString();
    _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, "#I Mav30QMIAttachApnCommandDriver created for %s", buf, 0xCu);
  }
}

void sub_2169A55E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Mav30QMIAttachApnCommandDriver::~Mav30QMIAttachApnCommandDriver(Mav30QMIAttachApnCommandDriver *this)
{
  *(_QWORD *)this = off_24D5C33B0;
  qmi::Client::~Client((Mav30QMIAttachApnCommandDriver *)((char *)this + 96));
  AttachApnCommandDriver::~AttachApnCommandDriver(this);
}

{
  *(_QWORD *)this = off_24D5C33B0;
  qmi::Client::~Client((Mav30QMIAttachApnCommandDriver *)((char *)this + 96));
  AttachApnCommandDriver::~AttachApnCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void Mav30QMIAttachApnCommandDriver::handleBasebandOn_sync(Mav30QMIAttachApnCommandDriver *this)
{
  qmi::Client *v2;
  const char *v3;
  _DWORD *v4;
  int v5;
  void *v6;
  _QWORD v7[6];
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  _OWORD v12[2];
  _QWORD aBlock[5];

  v2 = (Mav30QMIAttachApnCommandDriver *)((char *)this + 96);
  v3 = (const char *)*MEMORY[0x24BED1E20];
  subscriber::simSlotAsInstance();
  qmi::Client::set(v2, v3);
  memset(v12, 0, sizeof(v12));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12);
  LODWORD(v3) = *((_DWORD *)this + 16);
  v4 = (_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::SubscriptionType>(v12, 1);
  if ((_DWORD)v3 == 2)
    v5 = 2;
  else
    v5 = 1;
  *v4 = v5;
  v7[5] = v2;
  v8 = QMIServiceMsg::create();
  v9 = 25000;
  v10 = 0;
  v11 = 0;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = ___ZN30Mav30QMIAttachApnCommandDriver21bindSubscription_syncEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_24;
  v7[4] = this;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_17;
  aBlock[3] = &unk_24D5D7460;
  aBlock[4] = v7;
  v6 = _Block_copy(aBlock);
  v11 = v6;
  if (v8)
  {
    qmi::Client::send();
    v6 = v11;
  }
  if (v6)
    _Block_release(v6);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
  QMIAttachApnCommandDriverBase::handleBasebandOn_sync(this);
}

void sub_2169A581C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

void ___ZN30Mav30QMIAttachApnCommandDriver21bindSubscription_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = qmi::asString();
      v5 = *(_DWORD *)(a2 + 4);
      v6 = 136315394;
      v7 = v4;
      v8 = 1024;
      v9 = v5;
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Binding subscription: %s (0x%x)", (uint8_t *)&v6, 0x12u);
    }
  }
}

__int128 *Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  _QWORD *v6;
  unint64_t *v7;
  NSObject *v8;
  NSObject *v9;
  char v10;
  uint64_t (*v11)(uint64_t);
  unint64_t v12;
  const void **v13;
  char v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  _QWORD *v18;
  uint64_t (*v19)(uint64_t);
  std::string *p_p;
  std::string::size_type size;
  uint64_t v22;
  int *v23;
  int Int;
  _DWORD *v25;
  int v26;
  _DWORD *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  NSObject *v33;
  uint64_t v34;
  int Bool;
  _QWORD *v36;
  uint64_t v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  int *v44;
  CFTypeID v45;
  const __CFNumber *v46;
  int v47;
  uint64_t v48;
  BOOL *v49;
  BOOL *v50;
  CFTypeID v51;
  const __CFBoolean *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  NSObject *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  __int128 *v69;
  uint64_t v70;
  _QWORD *v71;
  const void *v72;
  _QWORD *v73;
  uint64_t (*v74)(uint64_t);
  __int128 *p_aBlock;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint8_t *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  NSObject *v90;
  char *v91;
  uint8_t *v92;
  char *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  __int128 *result;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  const void **v109;
  unsigned int v110;
  NSObject *v111;
  CFTypeRef cf;
  char *v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  CFTypeRef v119;
  const void **v120;
  const void **v121;
  uint64_t v122;
  _QWORD v123[2];
  uint64_t (*v124)(uint64_t, _BYTE *);
  void *v125;
  char v126;
  _QWORD v127[2];
  uint64_t (*v128)(uint64_t, _BYTE *);
  void *v129;
  char v130;
  char v131;
  _QWORD v132[2];
  uint64_t (*v133)(uint64_t, _BYTE *);
  void *v134;
  int v135;
  _QWORD v136[2];
  void (*v137)(uint64_t, _BYTE *);
  void *v138;
  _BYTE v139[16];
  xpc_object_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  std::string v144;
  void *v145[2];
  uint64_t v146;
  __int128 v147;
  void (*v148)(uint64_t, std::string *);
  void *v149;
  std::string v150;
  std::string __s;
  __int128 aBlock;
  void (*v153)(uint64_t, std::string *);
  void *v154;
  std::string v155;
  __int128 v156;
  __int128 v157;
  _BYTE v158[24];
  std::string __p;
  uint64_t v160;
  unint64_t v161;
  _QWORD v162[2];
  void (*v163)(uint64_t, _DWORD *);
  void *v164;
  int v165;
  _QWORD v166[2];
  void (*v167)(uint64_t, _DWORD *);
  void *v168;
  int v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE v174[16];
  _QWORD v175[5];
  _QWORD v176[2];
  xpc_object_t object;
  __CFDictionary *v178;
  uint64_t v179;
  _QWORD v180[3];
  _QWORD *v181;
  __int128 v182;
  __int128 v183;
  std::string buf;
  uint8_t v185[16];
  __int128 v186;
  _QWORD v187[6];
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;

  v201 = *MEMORY[0x24BDAC8D0];
  v182 = 0u;
  v183 = 0u;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v182, a3);
  v5 = *(unsigned __int8 *)(a3 + 32);
  v6 = operator new(0x20uLL);
  v6[1] = 0;
  v7 = v6 + 1;
  v6[2] = 0;
  *v6 = &unk_24D5D34E0;
  *((_BYTE *)v6 + 24) = 0;
  v114 = (char *)(v6 + 3);
  v115 = (std::__shared_weak_count *)v6;
  v8 = dispatch_group_create();
  v9 = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v9);
    dispatch_release(v9);
  }
  v10 = *(_BYTE *)(a1 + 128);
  if (!v10)
  {
    *((_BYTE *)v6 + 24) = 1;
    goto LABEL_175;
  }
  if (!*(_BYTE *)(a2 + 8)
    || (*(_QWORD *)a2
      ? (v11 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      : (v11 = 0),
        !v11))
  {
    v65 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v185 = 0;
      _os_log_impl(&dword_216897000, v65, OS_LOG_TYPE_DEFAULT, "#I dummy push complete", v185, 2u);
    }
    goto LABEL_175;
  }
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v9);
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&cf, (const void **)a2);
  v110 = *(unsigned __int16 *)(a3 + 64);
  do
    v12 = __ldxr(v7);
  while (__stxr(v12 + 1, v7));
  v180[0] = &off_24D5D7490;
  v180[1] = v6 + 3;
  v180[2] = v6;
  v181 = v180;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v119 = cf;
  if (cf)
    CFRetain(cf);
  AttachApnCommandDriver::getApnListForType_sync();
  v103 = v10;
  v111 = v9;
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v119);
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v13 = v120;
  v109 = v121;
  if (v120 == v121)
    goto LABEL_136;
  v14 = 0;
  v108 = (char *)*MEMORY[0x24BDC3DA8];
  v107 = *MEMORY[0x24BEDB7F0];
  v106 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v105 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v15 = 32;
  v16 = (void *)MEMORY[0x24BDAC760];
  v104 = MEMORY[0x24BEDB848] + 16;
  do
  {
    v178 = 0;
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)&v178, v13);
    v200 = 0;
    v198 = 0u;
    v199 = 0u;
    v196 = 0u;
    v197 = 0u;
    v194 = 0u;
    v195 = 0u;
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    memset(v187, 0, sizeof(v187));
    *(_OWORD *)v185 = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v185);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)"trying to push 3GPP attach APN ", 31);
    if (v178)
      v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v19 = 0;
    if (v19)
    {
      ctu::cf_to_xpc(v178, v17);
      xpc::object::to_string((xpc::object *)&object);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "empty");
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v19)
        goto LABEL_34;
LABEL_33:
      xpc_release(object);
      goto LABEL_34;
    }
    if (v19)
      goto LABEL_33;
LABEL_34:
    v22 = *(_QWORD *)(a1 + 88);
    if (v22)
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v22 + 48))(v22, v185);
    v176[1] = 0;
    v176[0] = 0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v176, v178);
    memset(v175, 0, 32);
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v175);
    v170 = v16;
    v171 = 1174405120;
    v172 = (uint64_t)___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke;
    v173 = (uint64_t)&__block_descriptor_tmp_9_7;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v174, (const ctu::cf::dict_adapter *)v176);
    v23 = (int *)qmi::MutableMessageBase::getTLV<wds::tlv::PdpType3GPP>(v175, 17);
    ((void (*)(uint64_t, int *))v172)((uint64_t)&v170, v23);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "AllowedProtocolMaskInRoamingLTE");
    Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v176, (const __CFString *)__p.__r_.__value_.__l.__data_);
    MEMORY[0x2199FDFFC](&__p);
    if ((Int - 1) <= 2)
    {
      v166[0] = v16;
      v166[1] = 0x40000000;
      v167 = (void (*)(uint64_t, _DWORD *))___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2;
      v168 = &__block_descriptor_tmp_15_12;
      v169 = Int - 1;
      v25 = (_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::LTERoamingPdpType>(v175, 65);
      v167((uint64_t)v166, v25);
    }
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "AllowedProtocolMaskInRoamingUMTS");
    v26 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v176, (const __CFString *)__p.__r_.__value_.__l.__data_);
    MEMORY[0x2199FDFFC](&__p);
    if ((v26 - 1) <= 2)
    {
      v162[0] = v16;
      v162[1] = 0x40000000;
      v163 = (void (*)(uint64_t, _DWORD *))___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3;
      v164 = &__block_descriptor_tmp_18_12;
      v165 = v26 - 1;
      v27 = (_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::UMTSRoamingPdpType>(v175, 66);
      v163((uint64_t)v162, v27);
    }
    v28 = *(const void **)(a3 + 40);
    v29 = *(_QWORD *)(a3 + 48);
    v30 = v29 - (_QWORD)v28;
    if ((const void *)v29 != v28)
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = a1;
      v31 = v30 >> 1;
      __p.__r_.__value_.__r.__words[2] = 0;
      v160 = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p.__r_.__value_.__l.__size_, v28, v29, v30 >> 1);
      v161 = v31;
      v32 = (_QWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::PcoContainerIds>(v175, 71);
      if (v161 >= 0xB)
      {
        v33 = *(NSObject **)(__p.__r_.__value_.__r.__words[0] + 40);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 10;
          _os_log_impl(&dword_216897000, v33, OS_LOG_TYPE_DEFAULT, "#E Too many container IDs. Using only the first %lu IDs", (uint8_t *)&buf, 0xCu);
        }
      }
      *v32 = 0;
      v32[1] = 0;
      *((_DWORD *)v32 + 4) = 0;
      v34 = v161;
      if (v161 >= 0xA)
        v34 = 10;
      if (v34)
        memmove(v32, (const void *)__p.__r_.__value_.__l.__size_, 2 * v34);
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
    }
    if (v110 >= 0x100)
      *(_BYTE *)qmi::MutableMessageBase::getTLV<wds::tlv::RequestMSISDNUsingPco>(v175, 72) = v110;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "PcscfAddressRequired");
    Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v176, (const __CFString *)__p.__r_.__value_.__l.__data_);
    MEMORY[0x2199FDFFC](&__p);
    v36 = (_QWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::ApnTypeMask>(v175, 221);
    v37 = 1;
    if (Bool)
      v37 = 2;
    *v36 = v37;
    *(_QWORD *)&v156 = v16;
    *((_QWORD *)&v156 + 1) = 1174405120;
    *(_QWORD *)&v157 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_4;
    *((_QWORD *)&v157 + 1) = &__block_descriptor_tmp_22_7;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v158, (const ctu::cf::dict_adapter *)v176);
    v38 = (std::string *)qmi::MutableMessageBase::getTLV<wds::tlv::ApnName>(v175, 20);
    ((void (*)(uint64_t, std::string *))v157)((uint64_t)&v156, v38);
    memset(&__p, 0, sizeof(__p));
    memset(&buf, 0, sizeof(buf));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__s, "username");
    ctu::cf::map_adapter::getString();
    MEMORY[0x2199FDFFC](&__s);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_63;
      *(_QWORD *)&aBlock = v16;
      *((_QWORD *)&aBlock + 1) = 1174405120;
      v153 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_24;
      v154 = &__block_descriptor_tmp_25_2;
      std::string::__init_copy_ctor_external(&v155, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
        goto LABEL_63;
      *(_QWORD *)&aBlock = v16;
      *((_QWORD *)&aBlock + 1) = 1174405120;
      v153 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_24;
      v154 = &__block_descriptor_tmp_25_2;
      v155 = __p;
    }
    v39 = (std::string *)qmi::MutableMessageBase::getTLV<wds::tlv::UserName>(v175, 27);
    v153((uint64_t)&aBlock, v39);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
LABEL_63:
    memset(&buf, 0, sizeof(buf));
    memset(&__s, 0, sizeof(__s));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v145, "password");
    ctu::cf::map_adapter::getString();
    MEMORY[0x2199FDFFC](v145);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!buf.__r_.__value_.__l.__size_)
        goto LABEL_72;
      *(_QWORD *)&v147 = v16;
      *((_QWORD *)&v147 + 1) = 1174405120;
      v148 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_27;
      v149 = &__block_descriptor_tmp_28_6;
      std::string::__init_copy_ctor_external(&v150, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((_BYTE *)&buf.__r_.__value_.__s + 23))
        goto LABEL_72;
      *(_QWORD *)&v147 = v16;
      *((_QWORD *)&v147 + 1) = 1174405120;
      v148 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_27;
      v149 = &__block_descriptor_tmp_28_6;
      v150 = buf;
    }
    v40 = (std::string *)qmi::MutableMessageBase::getTLV<wds::tlv::Password>(v175, 28);
    v148((uint64_t)&v147, v40);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
LABEL_72:
    memset(&__s, 0, sizeof(__s));
    v145[0] = 0;
    v145[1] = 0;
    v146 = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v179, "auth_type");
    ctu::cf::map_adapter::getString();
    MEMORY[0x2199FDFFC](&v179);
    if (SHIBYTE(v146) < 0)
      operator delete(v145[0]);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__s.__r_.__value_.__l.__size_)
        goto LABEL_81;
      v140 = v16;
      v141 = 1174405120;
      v142 = (uint64_t)___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_30;
      v143 = &__block_descriptor_tmp_32_5;
      std::string::__init_copy_ctor_external(&v144, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
        goto LABEL_81;
      v140 = v16;
      v141 = 1174405120;
      v142 = (uint64_t)___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_30;
      v143 = &__block_descriptor_tmp_32_5;
      v144 = __s;
    }
    v41 = qmi::MutableMessageBase::getTLV<wds::tlv::AuthPref>(v175, 29);
    ((void (*)(xpc_object_t *, uint64_t))v142)(&v140, v41);
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
LABEL_81:
    v136[0] = v16;
    v136[1] = 1174405120;
    v137 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_33;
    v138 = &__block_descriptor_tmp_37_8;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v139, (const ctu::cf::dict_adapter *)v176);
    v42 = qmi::MutableMessageBase::getTLV<wds::tlv::ProxyAddrUsingPco>(v175, 31);
    v137((uint64_t)v136, (_BYTE *)v42);
    LODWORD(v179) = -1;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v145, "APNClass");
    v43 = (int *)(*(uint64_t (**)(_QWORD *, void *))v176[0])(v176, v145[0]);
    v44 = v43;
    if (v43)
    {
      v45 = CFGetTypeID(v43);
      if (v45 == CFNumberGetTypeID())
        v47 = ctu::cf::assign((ctu::cf *)&v179, v44, v46);
      else
        v47 = 0;
      CFRelease(v44);
    }
    else
    {
      v47 = 0;
    }
    MEMORY[0x2199FDFFC](v145);
    if (v47 && (v179 & 0x80000000) == 0)
    {
      v132[0] = v16;
      v132[1] = 0x40000000;
      v133 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_39;
      v134 = &__block_descriptor_tmp_41_7;
      v135 = v179;
      v48 = qmi::MutableMessageBase::getTLV<wds::tlv::APNClass>(v175, 49);
      v133((uint64_t)v132, (_BYTE *)v48);
    }
    v131 = 1;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v145, v108);
    v49 = (BOOL *)(*(uint64_t (**)(_QWORD *, void *))v176[0])(v176, v145[0]);
    v50 = v49;
    if (v49)
    {
      v51 = CFGetTypeID(v49);
      if (v51 == CFBooleanGetTypeID())
        v53 = ctu::cf::assign((ctu::cf *)&v131, v50, v52);
      else
        v53 = 0;
      CFRelease(v50);
      MEMORY[0x2199FDFFC](v145);
      if (v53)
      {
        v127[0] = v16;
        v127[1] = 0x40000000;
        v128 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2_42;
        v129 = &__block_descriptor_tmp_44_4;
        v130 = v131;
        v54 = qmi::MutableMessageBase::getTLV<wds::tlv::RoamingDisallow>(v175, 62);
        v128((uint64_t)v127, (_BYTE *)v54);
      }
    }
    else
    {
      MEMORY[0x2199FDFFC](v145);
    }
    v123[0] = v16;
    v123[1] = 0x40000000;
    v124 = ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3_45;
    v125 = &__block_descriptor_tmp_47_5;
    v126 = v14 & 1;
    v55 = qmi::MutableMessageBase::getTLV<wds::tlv::Append>(v175, 144);
    v124((uint64_t)v123, (_BYTE *)v55);
    *(_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>(v175, 145) = 0;
    std::vector<wds::SetAttachProfileInfo3GPP::Request>::push_back[abi:ne180100](&v116);
    MEMORY[0x2199FE02C](v139);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MEMORY[0x2199FE02C](v158);
    MEMORY[0x2199FE02C](v174);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v175);
    MEMORY[0x2199FE02C](v176);
    *(_QWORD *)v185 = v107;
    *(_QWORD *)&v185[*(_QWORD *)(v107 - 24)] = v106;
    *(_QWORD *)&v186 = v105;
    *((_QWORD *)&v186 + 1) = v104;
    if (SHIBYTE(v189) < 0)
      operator delete(*((void **)&v188 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2199FEA70](&v191);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v178);
    ++v13;
    v15 -= 32;
    v14 = 1;
  }
  while (v13 != v109);
  v56 = (_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>((_QWORD *)(v116 - v15), 145);
  if (v5)
    v57 = 2;
  else
    v57 = 1;
  *v56 = v57;
  v58 = v116;
  v59 = v117;
  if (v116 != v117)
  {
    v60 = 0;
    v140 = 0;
    v141 = (uint64_t)&v140;
    v142 = 0x2000000000;
    LOBYTE(v143) = 0;
    v170 = 0;
    v171 = (uint64_t)&v170;
    v172 = 0x2000000000;
    v173 = (v117 - v116) >> 5;
    while (1)
    {
      v156 = 0u;
      v157 = 0u;
      qmi::MutableMessageBase::MutableMessageBase();
      *(_QWORD *)&v147 = a1 + 96;
      *((_QWORD *)&v147 + 1) = QMIServiceMsg::create();
      LODWORD(v148) = 25000;
      v149 = 0;
      v150.__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v185 = v16;
      *(_QWORD *)&v185[8] = 1174405120;
      *(_QWORD *)&v186 = ___ZN30Mav30QMIAttachApnCommandDriver19pushAttachApns_syncEN8dispatch13group_sessionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEbRKNSt3__16vectorItNS8_9allocatorItEEEENS8_8optionalIbEENS8_8functionIFvbEEE_block_invoke;
      *((_QWORD *)&v186 + 1) = &unk_24D5D71F0;
      v187[2] = a1;
      v187[3] = v111;
      if (v111)
      {
        dispatch_retain(v111);
        if (v187[3])
          dispatch_group_enter((dispatch_group_t)v187[3]);
      }
      LODWORD(v189) = v60;
      v187[0] = &v140;
      v187[1] = &v170;
      v61 = (uint64_t)v181;
      if (!v181)
        goto LABEL_117;
      if (v181 != v180)
        break;
      *((_QWORD *)&v188 + 1) = &v187[4];
      (*(void (**)(uint64_t, _QWORD *))(v180[0] + 24))((uint64_t)v180, &v187[4]);
LABEL_119:
      *(_QWORD *)&aBlock = v16;
      *((_QWORD *)&aBlock + 1) = 0x40000000;
      v153 = (void (*)(uint64_t, std::string *))___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_17;
      v154 = &unk_24D5D7460;
      v155.__r_.__value_.__r.__words[0] = (std::string::size_type)v185;
      v62 = _Block_copy(&aBlock);
      v150.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
      if (*((_QWORD *)&v147 + 1))
      {
        qmi::Client::send();
        v62 = (void *)v150.__r_.__value_.__r.__words[0];
      }
      if (v62)
        _Block_release(v62);
      v63 = (_QWORD *)*((_QWORD *)&v188 + 1);
      if (*((_QWORD **)&v188 + 1) == &v187[4])
      {
        v63 = &v187[4];
        v64 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v188 + 1))
          goto LABEL_128;
        v64 = 5;
      }
      (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_128:
      if (v187[3])
      {
        dispatch_group_leave((dispatch_group_t)v187[3]);
        if (v187[3])
          dispatch_release((dispatch_object_t)v187[3]);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v156);
      v58 += 32;
      ++v60;
      if (v58 == v59)
      {
        _Block_object_dispose(&v170, 8);
        _Block_object_dispose(&v140, 8);
        v9 = v111;
        v10 = v103;
        goto LABEL_168;
      }
    }
    v61 = (*(uint64_t (**)(void))(*v181 + 16))();
LABEL_117:
    *((_QWORD *)&v188 + 1) = v61;
    goto LABEL_119;
  }
LABEL_136:
  v200 = 0;
  v198 = 0u;
  v199 = 0u;
  v196 = 0u;
  v197 = 0u;
  v194 = 0u;
  v195 = 0u;
  v192 = 0u;
  v193 = 0u;
  v190 = 0u;
  v191 = 0u;
  v188 = 0u;
  v189 = 0u;
  v186 = 0u;
  memset(v187, 0, sizeof(v187));
  *(_OWORD *)v185 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v185);
  v9 = v111;
  v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)"Nothing found to push for ", 26);
  v10 = v103;
  v67 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v68 = v66;
  aBlock = 0uLL;
  v153 = 0;
  ctu::cf::assign();
  v147 = aBlock;
  v148 = v153;
  if (SHIBYTE(v153) >= 0)
    v69 = &v147;
  else
    v69 = (__int128 *)v147;
  if (SHIBYTE(v153) >= 0)
    v70 = HIBYTE(v153);
  else
    v70 = *((_QWORD *)&v147 + 1);
  v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
  v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" in value ", 10);
  if (cf)
    v74 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v74 = 0;
  if (v74)
  {
    ctu::cf_to_xpc((ctu *)cf, v72);
    xpc::object::to_string((xpc::object *)&v140);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "empty");
  }
  if (SHIBYTE(v153) >= 0)
    p_aBlock = &aBlock;
  else
    p_aBlock = (__int128 *)aBlock;
  if (SHIBYTE(v153) >= 0)
    v76 = HIBYTE(v153);
  else
    v76 = *((_QWORD *)&aBlock + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)p_aBlock, v76);
  if (SHIBYTE(v153) < 0)
  {
    operator delete((void *)aBlock);
    if (v74)
      goto LABEL_158;
  }
  else
  {
    if (!v74)
      goto LABEL_159;
LABEL_158:
    xpc_release(v140);
  }
LABEL_159:
  if (SHIBYTE(v148) < 0)
    operator delete((void *)v147);
  v77 = *(_QWORD *)(a1 + 88);
  if (v77)
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v77 + 48))(v77, v185);
  if (v181)
  {
    LOBYTE(aBlock) = 0;
    (*(void (**)(_QWORD *, __int128 *))(*v181 + 48))(v181, &aBlock);
  }
  *(_QWORD *)v185 = *v67;
  v78 = v67[9];
  *(_QWORD *)&v185[*(_QWORD *)(*(_QWORD *)v185 - 24)] = v67[8];
  *(_QWORD *)&v186 = v78;
  *((_QWORD *)&v186 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v189) < 0)
    operator delete(*((void **)&v188 + 1));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2199FEA70](&v191);
LABEL_168:
  *(_QWORD *)&aBlock = &v116;
  std::vector<wds::ModifyProfileSettings3GPP::Request>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
  *(_QWORD *)&aBlock = &v120;
  std::vector<ctu::cf::CFSharedRef<__CFDictionary const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
  v79 = v181;
  if (v181 == v180)
  {
    v80 = 4;
    v79 = v180;
LABEL_172:
    (*(void (**)(void))(*v79 + 8 * v80))();
  }
  else if (v181)
  {
    v80 = 5;
    goto LABEL_172;
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
LABEL_175:
  *(_QWORD *)v185 = a1;
  v81 = &v185[8];
  v82 = *((_QWORD *)&v183 + 1);
  if (*((_QWORD *)&v183 + 1))
  {
    if (*((__int128 **)&v183 + 1) != &v182)
    {
      v82 = (*(uint64_t (**)(void))(**((_QWORD **)&v183 + 1) + 16))();
      goto LABEL_178;
    }
    v187[0] = &v185[8];
    (*(void (**)(__int128 *, uint8_t *))(v182 + 24))(&v182, &v185[8]);
  }
  else
  {
LABEL_178:
    v187[0] = v82;
  }
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&aBlock, (_QWORD *)(a1 + 8));
  v83 = (std::__shared_weak_count *)*((_QWORD *)&aBlock + 1);
  *(_OWORD *)&v187[1] = aBlock;
  if (*((_QWORD *)&aBlock + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&aBlock + 1) + 16);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
    p_shared_owners = (unint64_t *)&v83->__shared_owners_;
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v187[3] = v114;
  v187[4] = v115;
  if (v115)
  {
    v88 = (unint64_t *)&v115->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  LOBYTE(v187[5]) = v10;
  v90 = *(NSObject **)(a1 + 24);
  v91 = (char *)operator new();
  v92 = (uint8_t *)v187[0];
  *(_QWORD *)v91 = *(_QWORD *)v185;
  v93 = v91 + 8;
  if (v92)
  {
    if (v92 != &v185[8])
    {
      v92 = (uint8_t *)(*(uint64_t (**)(uint8_t *, char *))(*(_QWORD *)v92 + 16))(v92, v93);
      goto LABEL_193;
    }
    *((_QWORD *)v91 + 4) = v93;
    (*(void (**)(uint8_t *))(*(_QWORD *)&v185[8] + 24))(&v185[8]);
  }
  else
  {
LABEL_193:
    *((_QWORD *)v91 + 4) = v92;
  }
  *(_OWORD *)(v91 + 40) = *(_OWORD *)&v187[1];
  v187[1] = 0;
  v187[2] = 0;
  *(_OWORD *)(v91 + 56) = *(_OWORD *)&v187[3];
  v187[3] = 0;
  v187[4] = 0;
  v91[72] = v187[5];
  *(_QWORD *)&aBlock = 0;
  dispatch_group_notify_f(v9, v90, v91, (dispatch_function_t)dispatch::detail::group_notify<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>(dispatch_group_s *,dispatch_queue_s *,Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100]((uint64_t *)&aBlock);
  v94 = (std::__shared_weak_count *)v187[4];
  if (v187[4])
  {
    v95 = (unint64_t *)(v187[4] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v187[2])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v187[2]);
  if ((uint8_t *)v187[0] == &v185[8])
  {
    v97 = 4;
LABEL_206:
    (*(void (**)(uint8_t *))(*(_QWORD *)v81 + 8 * v97))(v81);
  }
  else if (v187[0])
  {
    v97 = 5;
    v81 = (uint8_t *)v187[0];
    goto LABEL_206;
  }
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  v98 = v115;
  if (v115)
  {
    v99 = (unint64_t *)&v115->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  result = (__int128 *)*((_QWORD *)&v183 + 1);
  if (*((__int128 **)&v183 + 1) == &v182)
  {
    v102 = 4;
    result = &v182;
    return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v102))();
  }
  else if (*((_QWORD *)&v183 + 1))
  {
    v102 = 5;
    return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v102))();
  }
  return result;
}

void sub_2169A6D1C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN30Mav30QMIAttachApnCommandDriver19pushAttachApns_syncEN8dispatch13group_sessionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEbRKNSt3__16vectorItNS8_9allocatorItEEEENS8_8optionalIbEENS8_8functionIFvbEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 67109378;
      v11 = v4;
      v12 = 2080;
      v13 = qmi::asString();
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#E Sending 3GPP APN failed with error %d (%s)", (uint8_t *)&v10, 0x12u);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 88);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v7 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_DWORD *)(a1 + 96);
      v10 = 67109120;
      v11 = v8;
      _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I 3GPP APN success response received (request order %d)", (uint8_t *)&v10, 8u);
    }
  }
  if (!--*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v9 = *(_QWORD *)(a1 + 88);
    if (v9)
    {
      LOBYTE(v10) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v10);
    }
  }
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke(uint64_t a1, int *a2)
{
  ctu::cf::map_adapter *v3;
  uint64_t result;
  int v5;
  __CFString *v6;

  v3 = (ctu::cf::map_adapter *)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, "AllowedProtocolMask");
  LODWORD(v3) = ctu::cf::map_adapter::getInt(v3, v6);
  result = MEMORY[0x2199FDFFC](&v6);
  v5 = 2 * ((_DWORD)v3 == 2);
  if ((_DWORD)v3 == 3)
    v5 = 3;
  *a2 = v5;
  return result;
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_4(uint64_t a1, std::string *a2)
{
  void *v3[2];
  uint64_t v4;
  uint64_t v5;

  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v5, "apn");
  ctu::cf::map_adapter::getString();
  MEMORY[0x2199FDFFC](&v5);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a2, (std::string::value_type *)v3, (std::string::value_type *)v3, 0);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_2169A7494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_24(uint64_t a1, std::string *this)
{
  std::string::value_type *v3;
  std::string::size_type v4;

  if (*(char *)(a1 + 55) < 0)
  {
    v3 = *(std::string::value_type **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v3 = (std::string::value_type *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_27(uint64_t a1, std::string *this)
{
  std::string::value_type *v3;
  std::string::size_type v4;

  if (*(char *)(a1 + 55) < 0)
  {
    v3 = *(std::string::value_type **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v3 = (std::string::value_type *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

size_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_30(uint64_t a1, char *a2)
{
  _QWORD *v3;
  int v4;
  size_t v5;
  _QWORD *v6;
  size_t result;
  _QWORD *v8;
  char v9;

  v3 = (_QWORD *)(a1 + 32);
  v4 = *(char *)(a1 + 55);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 55);
  else
    v5 = *(_QWORD *)(a1 + 40);
  if (v5 == strlen((const char *)*MEMORY[0x24BDC3DC8]))
  {
    v6 = v4 >= 0 ? v3 : (_QWORD *)*v3;
    result = memcmp(v6, (const void *)*MEMORY[0x24BDC3DC8], v5);
    if (!(_DWORD)result)
    {
      v9 = 1;
      goto LABEL_16;
    }
  }
  result = strlen((const char *)*MEMORY[0x24BDC3DC0]);
  if (v5 == result)
  {
    v8 = v4 >= 0 ? v3 : (_QWORD *)*v3;
    result = memcmp(v8, (const void *)*MEMORY[0x24BDC3DC0], v5);
    if (!(_DWORD)result)
    {
      v9 = 2;
LABEL_16:
      *a2 = v9;
    }
  }
  return result;
}

void ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_33(uint64_t a1, _BYTE *a2)
{
  std::string *p_p;
  char Bool;
  std::string __p;
  __CFString *v7;

  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Pcs");
  std::string::append(&__p, "cfAddressRequired", 0x11uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v7, (const char *)p_p);
  Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)(a1 + 32), v7);
  MEMORY[0x2199FDFFC](&v7);
  *a2 = Bool;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_39(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2_42(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32) ^ 1;
  return result;
}

uint64_t ___ZN30Mav30QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3_45(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

void std::__shared_ptr_pointer<Mav30QMIAttachApnCommandDriver *,std::shared_ptr<Mav30QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav30QMIAttachApnCommandDriver>(Mav30QMIAttachApnCommandDriver*)::{lambda(Mav30QMIAttachApnCommandDriver *)#1},std::allocator<Mav30QMIAttachApnCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<Mav30QMIAttachApnCommandDriver *,std::shared_ptr<Mav30QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav30QMIAttachApnCommandDriver>(Mav30QMIAttachApnCommandDriver*)::{lambda(Mav30QMIAttachApnCommandDriver *)#1},std::allocator<Mav30QMIAttachApnCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<Mav30QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav30QMIAttachApnCommandDriver>(Mav30QMIAttachApnCommandDriver*)::{lambda(Mav30QMIAttachApnCommandDriver*)#1}::operator() const(Mav30QMIAttachApnCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<Mav30QMIAttachApnCommandDriver *,std::shared_ptr<Mav30QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav30QMIAttachApnCommandDriver>(Mav30QMIAttachApnCommandDriver*)::{lambda(Mav30QMIAttachApnCommandDriver *)#1},std::allocator<Mav30QMIAttachApnCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav30QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav30QMIAttachApnCommandDriver>(Mav30QMIAttachApnCommandDriver*)::{lambda(Mav30QMIAttachApnCommandDriver*)#1}::operator() const(Mav30QMIAttachApnCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D5D7490;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  *a1 = &off_24D5D7490;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24D5D7490;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24D5D7490;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::destroy(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::operator()(uint64_t result, _BYTE *a2)
{
  if (*a2)
    **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::target_type()
{
}

uint64_t *dispatch::detail::group_notify<Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>(dispatch_group_s *,dispatch_queue_s *,Mav30QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14 = a1;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    return std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](&v14);
  v3 = *(_QWORD *)a1;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    return std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](&v14);
  v5 = v4;
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD *)(v3 + 88);
    if (v6)
    {
      v7 = **(unsigned __int8 **)(a1 + 56);
      v8 = *(unsigned __int8 *)(a1 + 72);
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, a1 + 8);
      (*(void (**)(uint64_t, BOOL, _QWORD, BOOL, _BYTE *))(*(_QWORD *)v6 + 24))(v6, v7 != 0, 0, v8 != 0, v15);
      v9 = v16;
      if (v16 == v15)
      {
        v10 = 4;
        v9 = v15;
        goto LABEL_9;
      }
      if (v16)
      {
        v10 = 5;
LABEL_9:
        (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
      }
    }
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](&v14);
}

void sub_2169A7A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  char *v14;
  char *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
    {
LABEL_6:
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](&a9);
      _Unwind_Resume(a1);
    }
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  goto LABEL_6;
}

uint64_t QMIMav13ActivationCommandDriver::bootstrap(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *v5;
  NSObject *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[15];
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *v22;
  char v23;
  dispatch_object_t v24;
  void *v25;
  char v26;
  uint8_t buf[8];
  uint64_t v28;
  __int128 v29;
  _QWORD *v30;

  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Initializing Mav13 command driver", buf, 2u);
  }
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](a1 + 48, a3);
  std::string::basic_string[abi:ne180100]<0>(&v25, "Activation: BSP Service");
  v6 = *(NSObject **)(a1 + 24);
  v24 = v6;
  if (v6)
    dispatch_retain(v6);
  std::string::basic_string[abi:ne180100]<0>(&v22, "bsp");
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v18, (_QWORD *)(a1 + 8));
  v20 = v18;
  v21 = v19;
  if (v19)
  {
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  Registry::getServerConnection(*(Registry **)(a1 + 64));
  qmi::Client::createWithQueueLocal();
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](a1 + 104, &v29);
  qmi::Client::~Client((qmi::Client *)buf);
  if (v17)
  {
    p_shared_owners = &v17->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v10 - 1, (unint64_t *)p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v23 < 0)
    operator delete(v22);
  if (v24)
    dispatch_release(v24);
  if (v26 < 0)
    operator delete(v25);
  v14 = MEMORY[0x24BDAC760];
  v16[10] = MEMORY[0x24BDAC760];
  v16[11] = 0x40000000;
  v16[12] = ___ZN31QMIMav13ActivationCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI40ActivationCommandDriverDelegateInterfaceEE_block_invoke;
  v16[13] = &__block_descriptor_tmp_25;
  v16[14] = a1;
  qmi::Client::setHandler();
  v16[5] = v14;
  v16[6] = 0x40000000;
  v16[7] = ___ZN31QMIMav13ActivationCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI40ActivationCommandDriverDelegateInterfaceEE_block_invoke_2;
  v16[8] = &__block_descriptor_tmp_3_0;
  v16[9] = a1;
  qmi::Client::setHandler();
  qmi::Client::set((qmi::Client *)(a1 + 88), (const char *)*MEMORY[0x24BED1E38]);
  v16[0] = v14;
  v16[1] = 0x40000000;
  v16[2] = ___ZN31QMIMav13ActivationCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI40ActivationCommandDriverDelegateInterfaceEE_block_invoke_3;
  v16[3] = &__block_descriptor_tmp_5_8;
  v16[4] = a1;
  *(_QWORD *)buf = v14;
  v28 = 0x40000000;
  *(_QWORD *)&v29 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp18ActivationRegister10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v29 + 1) = &unk_24D5D79A0;
  v30 = v16;
  qmi::Client::setIndHandler();
  return qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 88));
}

void sub_2169A7D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  uint64_t v29;
  NSObject *v31;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  if (a29)
    std::__shared_weak_count::__release_weak(a29);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (*(char *)(v29 - 129) < 0)
    operator delete(*(void **)(v29 - 152));
  v31 = *(NSObject **)(v29 - 128);
  if (v31)
    dispatch_release(v31);
  if (*(char *)(v29 - 97) < 0)
    operator delete(*(void **)(v29 - 120));
  _Unwind_Resume(a1);
}

uint64_t ___ZN31QMIMav13ActivationCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI40ActivationCommandDriverDelegateInterfaceEE_block_invoke(uint64_t a1)
{
  _QWORD **v1;
  const void **v2;
  char *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[6];
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  void *__p[2];
  __int128 v26;
  _QWORD aBlock[5];

  v1 = *(_QWORD ***)(a1 + 32);
  *(_OWORD *)__p = 0u;
  v26 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v2 = (const void **)__p[1];
  if (__p[1] != (void *)v26)
  {
    while (*((_BYTE *)*v2 + 8) != 1)
    {
      if (++v2 == (const void **)v26)
        goto LABEL_8;
    }
  }
  if (v2 == (const void **)v26)
  {
LABEL_8:
    v5 = operator new();
    v6 = v5;
    *(_WORD *)(v5 + 8) = 1;
    *(_QWORD *)v5 = &off_24D5D7A28;
    v7 = v26;
    if ((unint64_t)v26 >= *((_QWORD *)&v26 + 1))
    {
      v9 = (uint64_t)(v26 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v10 = (uint64_t)(*((_QWORD *)&v26 + 1) - (unint64_t)__p[1]) >> 2;
      if (v10 <= v9 + 1)
        v10 = v9 + 1;
      if (*((_QWORD *)&v26 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v26 + 8, v11);
      else
        v12 = 0;
      v13 = (uint64_t *)&v12[8 * v9];
      v14 = &v12[8 * v11];
      *v13 = v6;
      v8 = v13 + 1;
      v16 = (char *)__p[1];
      v15 = (char *)v26;
      if ((void *)v26 != __p[1])
      {
        do
        {
          v17 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v13 = v17;
        }
        while (v15 != v16);
        v15 = (char *)__p[1];
      }
      __p[1] = v13;
      *(_QWORD *)&v26 = v8;
      *((_QWORD *)&v26 + 1) = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v26 = v5;
      v8 = (_QWORD *)(v7 + 8);
    }
    v4 = (_BYTE *)(v6 + 9);
    *(_QWORD *)&v26 = v8;
  }
  else
  {
    if (!v3)
      __cxa_bad_cast();
    v4 = v3 + 9;
  }
  *v4 = 1;
  v20[5] = v1 + 11;
  v21 = QMIServiceMsg::create();
  v22 = 25000;
  v23 = 0;
  v24 = 0;
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 0x40000000;
  v20[2] = ___ZNK31QMIMav13ActivationCommandDriver19handleClientStartedEv_block_invoke_2;
  v20[3] = &__block_descriptor_tmp_8_10;
  v20[4] = v1;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp18ActivationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5D7A58;
  aBlock[4] = v20;
  v18 = _Block_copy(aBlock);
  v24 = v18;
  if (v21)
  {
    qmi::Client::send();
    v18 = v24;
  }
  if (v18)
    _Block_release(v18);
  (*(void (**)(_QWORD *, uint64_t))(*v1[6] + 16))(v1[6], 1);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return ((uint64_t (*)(_QWORD **))(*v1)[5])(v1);
}

void sub_2169A8028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___ZN31QMIMav13ActivationCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI40ActivationCommandDriverDelegateInterfaceEE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 48) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), 0);
}

void ___ZN31QMIMav13ActivationCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI40ActivationCommandDriverDelegateInterfaceEE_block_invoke_3(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int v5;
  NSObject *v6;
  const char *v7;
  capabilities::ct *v8;
  uint64_t TlvValue;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  int v16;
  void *v17;
  int v18;
  void *v19;
  int v20;
  void *v21;
  int v22;
  void *v23;
  int v24;
  void *v25;
  int v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  __int16 v31;
  void *v32;
  int v33;
  void *v34;
  int v35;
  char *v36;
  int v37;
  char *v38;
  int v39;
  char *v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  char *v45;
  void *v46;
  int v47;
  void *v48;
  int v49;
  char *v50;
  int v51;
  char *v52;
  int v53;
  __int16 v54;
  void *v55;
  int v56;
  void *v57;
  int v58;
  char *v59;
  int v60;
  char *v61;
  int v62;
  char *v63;
  char *v64;
  int v65;
  char *v66;
  int v67;
  char *v68;
  void *v69;
  int v70;
  void *v71;
  int v72;
  void *v73;
  int v74;
  void *v75;
  int v76;
  _DWORD *v77;
  int v78;
  _DWORD *v79;
  int v80;
  int v81;
  uint64_t v82;
  void *v83;
  int v84;
  void *v85;
  int v86;
  BOOL v87;
  void *v88;
  int v89;
  void *v90;
  int v91;
  BOOL v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  void *v97;
  int v98;
  void *v99;
  int v100;
  BOOL v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  void *v109;
  int v110;
  void *v111;
  int v112;
  int v113;
  void *v114;
  int v115;
  void *v116;
  int v117;
  BOOL v118;
  void *v119;
  int v120;
  void *v121;
  int v122;
  BOOL v123;
  _DWORD *v124;
  int v125;
  _DWORD *v126;
  int v127;
  uint64_t v128;
  _QWORD v129[5];
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  _QWORD v134[2];
  uint64_t (*v135)(uint64_t, void **);
  void *v136;
  uint8_t *v137;
  _QWORD v138[2];
  uint64_t (*v139)(uint64_t, unsigned int *);
  void *v140;
  uint8_t *v141;
  _QWORD v142[2];
  double (*v143)(uint64_t, char **);
  void *v144;
  void **v145;
  _QWORD v146[2];
  double (*v147)(uint64_t, char **);
  void *v148;
  void **v149;
  _QWORD v150[2];
  uint64_t (*v151)(uint64_t, char **);
  void *v152;
  void **v153;
  _QWORD v154[2];
  uint64_t (*v155)(uint64_t, uint64_t *);
  void *v156;
  void **v157;
  _QWORD v158[2];
  uint64_t (*v159)(uint64_t, unsigned int *);
  void *v160;
  uint8_t *v161;
  _QWORD v162[2];
  double (*v163)(uint64_t, char **);
  void *v164;
  void **v165;
  _QWORD v166[2];
  double (*v167)(uint64_t, char **);
  void *v168;
  void **v169;
  _QWORD v170[2];
  uint64_t (*v171)(uint64_t, char **);
  void *v172;
  void **v173;
  unint64_t ***p_p_p_p_p_p_p;
  uint64_t v175;
  void (*v176)(unint64_t ****, void **);
  void *v177;
  void **v178;
  unint64_t **p_p_p_p_p_p;
  uint64_t v180;
  void (*v181)(uint64_t, _DWORD *);
  void *v182;
  uint8_t *v183;
  unint64_t *p_p_p_p_p;
  uint64_t v185;
  void (*v186)(uint64_t, _DWORD *);
  void *v187;
  uint8_t *v188;
  char ***p_p_p_p;
  uint64_t v190;
  void (*v191)(uint64_t, unsigned __int8 *);
  void *v192;
  void **v193;
  char **p_p_p;
  uint64_t v195;
  void *v196;
  void *v197;
  uint8_t *v198;
  unsigned int v199;
  _DWORD *v200;
  void *__p;
  uint64_t v202;
  void *v203;
  void *v204;
  void **v205;
  uint8_t *v206;
  void *v207;
  void *v208;
  void *v209;
  uint8_t buf[16];
  void *v211[3];
  char v212;
  void *v213;
  void *v214;
  char v215;
  void *v216[20];
  BOOL v217;
  char v218;
  BOOL v219;
  char v220;
  unsigned __int8 v221;
  char v222;
  char v223;
  BOOL v224;
  char v225;
  unsigned __int8 v226;
  BOOL v227;
  uint64_t v228;
  char v229;
  BOOL v230;
  char v231;
  char v232;
  char v233;
  BOOL v234;
  char v235;
  char v236;
  char v237;
  int v238;
  char v239;
  char *p_p;
  uint64_t v241;
  void (*v242)(char **, _QWORD *);
  void *v243;
  void **v244;
  void **v245;
  uint64_t v246;

  v246 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v130 = 0;
  v131 = &v130;
  v132 = 0x2000000000;
  v133 = 2;
  v4 = (void *)MEMORY[0x24BDAC760];
  v129[0] = MEMORY[0x24BDAC760];
  v129[1] = 0x40000000;
  v129[2] = ___ZNK31QMIMav13ActivationCommandDriver24handleRegisterIndicationERKN3bsp18ActivationRegister10IndicationE_block_invoke;
  v129[3] = &unk_24D5D7630;
  v129[4] = &v130;
  *(_QWORD *)buf = v129;
  qmi::MessageBase::applyTlv<bsp::tlv::ActivationState,void({block_pointer}&)(bsp::tlv::ActivationState const&)>(a2, (uint64_t)buf);
  v5 = *((_DWORD *)v131 + 6);
  if (v5 - 2 >= 3)
  {
    if (v5 < 2)
    {
      bzero(buf, 0x210uLL);
      MEMORY[0x2199FD78C](buf);
      __p = v4;
      v202 = 0x40000000;
      v203 = ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke;
      v204 = &__block_descriptor_tmp_18_13;
      v205 = v211;
      p_p = (char *)&__p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationPublicKeyHash,void({block_pointer}&)(bsp::tlv::ActivationPublicKeyHash const&)>(a2, 16, (uint64_t)&p_p);
      p_p = (char *)v4;
      v241 = 0x40000000;
      v242 = (void (*)(char **, _QWORD *))___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_2;
      v243 = &__block_descriptor_tmp_19_7;
      v244 = v211;
      p_p_p = &p_p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationFactoryKeyHash,void({block_pointer}&)(bsp::tlv::ActivationFactoryKeyHash const&)>(a2, 17, (uint64_t)&p_p_p);
      p_p_p = (char **)v4;
      v195 = 0x40000000;
      v196 = ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_3;
      v197 = &__block_descriptor_tmp_20_9;
      v198 = buf;
      p_p_p_p = &p_p_p;
      v8 = (capabilities::ct *)qmi::MessageBase::applyTlv<bsp::tlv::ActivationImei,void({block_pointer}&)(bsp::tlv::ActivationImei const&)>(a2, 18, (uint64_t)&p_p_p_p);
      if (capabilities::ct::supportsGemini(v8))
      {
        TlvValue = qmi::MessageBase::findTlvValue(a2);
        v11 = TlvValue;
        if (TlvValue)
        {
          v12 = v10;
          p_p_p_p = (char ***)TlvValue;
          v13 = tlv::parseV<bsp::tlv::ActivationImeiSlot2>((unint64_t *)&p_p_p_p, v10);
          if (p_p_p_p)
          {
            v228 = v13;
            ActivationCommandDriver::parseImei((ActivationCommandDriver *)&v228, v14);
            v229 = 1;
          }
          else
          {
            ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 85, v11, v12);
          }
        }
      }
      p_p_p_p = (char ***)v4;
      v190 = 0x40000000;
      v191 = (void (*)(uint64_t, unsigned __int8 *))___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_4;
      v192 = &__block_descriptor_tmp_21_6;
      v193 = v211;
      p_p_p_p_p = (unint64_t *)&p_p_p_p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationMeid,void({block_pointer}&)(bsp::tlv::ActivationMeid const&)>(a2, 19, &p_p_p_p_p);
      p_p_p_p_p = (unint64_t *)v4;
      v185 = 0x40000000;
      v186 = (void (*)(uint64_t, _DWORD *))___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_5;
      v187 = &__block_descriptor_tmp_23_3;
      v188 = buf;
      p_p_p_p_p_p = &p_p_p_p_p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationVersion,void({block_pointer}&)(bsp::tlv::ActivationVersion const&)>(a2, 20, (uint64_t)&p_p_p_p_p_p);
      p_p_p_p_p_p = (unint64_t **)v4;
      v180 = 0x40000000;
      v181 = (void (*)(uint64_t, _DWORD *))___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_6;
      v182 = &__block_descriptor_tmp_25_3;
      v183 = buf;
      p_p_p_p_p_p_p = &p_p_p_p_p_p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationMode,void({block_pointer}&)(bsp::tlv::ActivationMode const&)>(a2, 21, (uint64_t)&p_p_p_p_p_p_p);
      p_p_p_p_p_p_p = (unint64_t ***)v4;
      v175 = 0x40000000;
      v176 = (void (*)(unint64_t ****, void **))___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_7;
      v177 = &__block_descriptor_tmp_27_8;
      v178 = (void **)buf;
      v170[0] = &p_p_p_p_p_p_p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationFactoryDebug,void({block_pointer}&)(bsp::tlv::ActivationFactoryDebug const&)>(a2, 22, (uint64_t)v170);
      v215 = v212;
      p_p_p = (char **)v4;
      v195 = 0x40000000;
      v196 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke;
      v197 = &__block_descriptor_tmp_30_6;
      v198 = buf;
      __p = &p_p_p;
      qmi::MessageBase::applyTlv<bsp::tlv::ActivationState,void({block_pointer}&)(bsp::tlv::ActivationState const&)>(a2, (uint64_t)&__p);
      p_p_p_p = (char ***)v4;
      v190 = 0x40000000;
      v191 = (void (*)(uint64_t, unsigned __int8 *))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_2;
      v192 = &__block_descriptor_tmp_32_6;
      v193 = (void **)buf;
      v15 = (void *)qmi::MessageBase::findTlvValue(a2);
      v17 = v15;
      if (v15)
      {
        v18 = v16;
        __p = v15;
        LOBYTE(p_p) = tlv::parseV<bsp::tlv::ActivationManifestResult>((unint64_t *)&__p, v16);
        if (__p)
          v191((uint64_t)&p_p_p_p, (unsigned __int8 *)&p_p);
        else
          ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 82, v17, v18);
      }
      p_p_p_p_p = (unint64_t *)v4;
      v185 = 0x40000000;
      v186 = (void (*)(uint64_t, _DWORD *))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_3;
      v187 = &__block_descriptor_tmp_34_7;
      v188 = buf;
      v19 = (void *)qmi::MessageBase::findTlvValue(a2);
      v21 = v19;
      if (v19)
      {
        v22 = v20;
        __p = v19;
        LODWORD(p_p) = tlv::parseV<bsp::tlv::ActivationPriVersionSlot1>((unint64_t *)&__p, v20);
        if (__p)
          v186((uint64_t)&p_p_p_p_p, &p_p);
        else
          ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 64, v21, v22);
      }
      p_p_p_p_p_p = (unint64_t **)v4;
      v180 = 0x40000000;
      v181 = (void (*)(uint64_t, _DWORD *))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_4;
      v182 = &__block_descriptor_tmp_36_4;
      v183 = buf;
      v23 = (void *)qmi::MessageBase::findTlvValue(a2);
      v25 = v23;
      if (v23)
      {
        v26 = v24;
        __p = v23;
        LODWORD(p_p) = tlv::parseV<bsp::tlv::ActivationPriVersionSlot2>((unint64_t *)&__p, v24);
        if (__p)
          v181((uint64_t)&p_p_p_p_p_p, &p_p);
        else
          ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 65, v25, v26);
      }
      p_p_p_p_p_p_p = (unint64_t ***)v4;
      v175 = 0x40000000;
      v176 = (void (*)(unint64_t ****, void **))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_5;
      v177 = &__block_descriptor_tmp_37_9;
      v178 = v216;
      v27 = (char *)qmi::MessageBase::findTlvValue(a2);
      v29 = v27;
      if (v27)
      {
        v30 = v28;
        p_p = v27;
        __p = (void *)tlv::parseV<bsp::tlv::ActivationIccidSlot1>((unint64_t *)&p_p, v28);
        LOWORD(v202) = v31;
        if (p_p)
          v176(&p_p_p_p_p_p_p, &__p);
        else
          ((void (*)(_QWORD, uint64_t, char *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 66, v29, v30);
      }
      v170[0] = v4;
      v170[1] = 0x40000000;
      v171 = (uint64_t (*)(uint64_t, char **))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_6;
      v172 = &__block_descriptor_tmp_38_5;
      v173 = v216;
      v32 = (void *)qmi::MessageBase::findTlvValue(a2);
      v34 = v32;
      if (v32)
      {
        v35 = v33;
        __p = v32;
        p_p = (char *)tlv::parseV<bsp::tlv::ActivationImsiSlot1>((unint64_t *)&__p, v33);
        if (__p)
          v171((uint64_t)v170, &p_p);
        else
          ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 67, v34, v35);
      }
      v166[0] = v4;
      v166[1] = 0x40000000;
      v167 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_7;
      v168 = &__block_descriptor_tmp_39_7;
      v169 = v216;
      v36 = (char *)qmi::MessageBase::findTlvValue(a2);
      v38 = v36;
      if (v36)
      {
        v39 = v37;
        p_p = v36;
        v202 = 0;
        __p = 0;
        v203 = 0;
        tlv::parseV<bsp::tlv::ActivationGid1Slot1>(&p_p, v37, &__p);
        v40 = p_p;
        if (p_p)
          v167((uint64_t)v166, (char **)&__p);
        if (__p)
        {
          v202 = (uint64_t)__p;
          operator delete(__p);
        }
        if (!v40)
          ((void (*)(_QWORD, uint64_t, char *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 68, v38, v39);
      }
      v162[0] = v4;
      v162[1] = 0x40000000;
      v163 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_8;
      v164 = &__block_descriptor_tmp_40_3;
      v165 = v216;
      v41 = (char *)qmi::MessageBase::findTlvValue(a2);
      v43 = v41;
      if (v41)
      {
        v44 = v42;
        p_p = v41;
        v202 = 0;
        __p = 0;
        v203 = 0;
        tlv::parseV<bsp::tlv::ActivationGid2Slot1>(&p_p, v42, &__p);
        v45 = p_p;
        if (p_p)
          v163((uint64_t)v162, (char **)&__p);
        if (__p)
        {
          v202 = (uint64_t)__p;
          operator delete(__p);
        }
        if (!v45)
          ((void (*)(_QWORD, uint64_t, char *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 69, v43, v44);
      }
      v158[0] = v4;
      v158[1] = 0x40000000;
      v159 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_9;
      v160 = &__block_descriptor_tmp_42_4;
      v161 = buf;
      v46 = (void *)qmi::MessageBase::findTlvValue(a2);
      v48 = v46;
      if (v46)
      {
        v49 = v47;
        __p = v46;
        LODWORD(p_p) = tlv::parseV<bsp::tlv::ActivationCardProvisionedSlot1>((unint64_t *)&__p, v47);
        if (__p)
          v159((uint64_t)v158, (unsigned int *)&p_p);
        else
          ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 80, v48, v49);
      }
      v154[0] = v4;
      v154[1] = 0x40000000;
      v155 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_10;
      v156 = &__block_descriptor_tmp_43_7;
      v157 = v216;
      v50 = (char *)qmi::MessageBase::findTlvValue(a2);
      v52 = v50;
      if (v50)
      {
        v53 = v51;
        p_p = v50;
        __p = (void *)tlv::parseV<bsp::tlv::ActivationIccidSlot2>((unint64_t *)&p_p, v51);
        LOWORD(v202) = v54;
        if (p_p)
          v155((uint64_t)v154, (uint64_t *)&__p);
        else
          ((void (*)(_QWORD, uint64_t, char *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 70, v52, v53);
      }
      v150[0] = v4;
      v150[1] = 0x40000000;
      v151 = (uint64_t (*)(uint64_t, char **))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_11;
      v152 = &__block_descriptor_tmp_44_5;
      v153 = v216;
      v55 = (void *)qmi::MessageBase::findTlvValue(a2);
      v57 = v55;
      if (v55)
      {
        v58 = v56;
        __p = v55;
        p_p = (char *)tlv::parseV<bsp::tlv::ActivationImsiSlot2>((unint64_t *)&__p, v56);
        if (__p)
          v151((uint64_t)v150, &p_p);
        else
          ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 71, v57, v58);
      }
      v146[0] = v4;
      v146[1] = 0x40000000;
      v147 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_12;
      v148 = &__block_descriptor_tmp_45_4;
      v149 = v216;
      v59 = (char *)qmi::MessageBase::findTlvValue(a2);
      v61 = v59;
      if (v59)
      {
        v62 = v60;
        p_p = v59;
        v202 = 0;
        __p = 0;
        v203 = 0;
        tlv::parseV<bsp::tlv::ActivationGid1Slot2>(&p_p, v60, &__p);
        v63 = p_p;
        if (p_p)
          v147((uint64_t)v146, (char **)&__p);
        if (__p)
        {
          v202 = (uint64_t)__p;
          operator delete(__p);
        }
        if (!v63)
          ((void (*)(_QWORD, uint64_t, char *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 72, v61, v62);
      }
      v142[0] = v4;
      v142[1] = 0x40000000;
      v143 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_13;
      v144 = &__block_descriptor_tmp_46_5;
      v145 = v216;
      v64 = (char *)qmi::MessageBase::findTlvValue(a2);
      v66 = v64;
      if (v64)
      {
        v67 = v65;
        p_p = v64;
        v202 = 0;
        __p = 0;
        v203 = 0;
        tlv::parseV<bsp::tlv::ActivationGid2Slot2>(&p_p, v65, &__p);
        v68 = p_p;
        if (p_p)
          v143((uint64_t)v142, (char **)&__p);
        if (__p)
        {
          v202 = (uint64_t)__p;
          operator delete(__p);
        }
        if (!v68)
          ((void (*)(_QWORD, uint64_t, char *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 73, v66, v67);
      }
      v138[0] = v4;
      v138[1] = 0x40000000;
      v139 = ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_14;
      v140 = &__block_descriptor_tmp_48_4;
      v141 = buf;
      v69 = (void *)qmi::MessageBase::findTlvValue(a2);
      v71 = v69;
      if (v69)
      {
        v72 = v70;
        __p = v69;
        LODWORD(p_p) = tlv::parseV<bsp::tlv::ActivationCardProvisionedSlot2>((unint64_t *)&__p, v70);
        if (__p)
          v139((uint64_t)v138, (unsigned int *)&p_p);
        else
          ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 81, v71, v72);
      }
      p_p = (char *)v4;
      v241 = 0x40000000;
      v242 = (void (*)(char **, _QWORD *))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_15;
      v243 = &__block_descriptor_tmp_50_1;
      v244 = (void **)v3;
      v245 = v216;
      v73 = (void *)qmi::MessageBase::findTlvValue(a2);
      v75 = v73;
      if (v73)
      {
        v76 = v74;
        __p = v73;
        LOBYTE(v134[0]) = tlv::parseV<bsp::tlv::ActivationTypeMode>((unint64_t *)&__p, v74);
        if (__p)
          v242(&p_p, v134);
        else
          ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 74, v75, v76);
      }
      v134[0] = v4;
      v134[1] = 0x40000000;
      v135 = (uint64_t (*)(uint64_t, void **))___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_51;
      v136 = &__block_descriptor_tmp_53_3;
      v137 = buf;
      v77 = (_DWORD *)qmi::MessageBase::findTlvValue(a2);
      v79 = v77;
      if (v77)
      {
        v80 = v78;
        v200 = v77;
        __p = (void *)tlv::parseV<bsp::tlv::ActivationMoringaFlags>(&v200, v78);
        LODWORD(v202) = v81;
        if (v200)
          v77 = (_DWORD *)v135((uint64_t)v134, &__p);
        else
          v77 = (_DWORD *)((uint64_t (*)(_QWORD, uint64_t, _DWORD *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 76, v79, v80);
      }
      v82 = capabilities::ct::supportsGemini((capabilities::ct *)v77);
      if ((_DWORD)v82)
      {
        v83 = (void *)qmi::MessageBase::findTlvValue(a2);
        v85 = v83;
        if (v83)
        {
          v86 = v84;
          __p = v83;
          v87 = tlv::parseV<bsp::tlv::DsdsAllowed>((unint64_t *)&__p, v84);
          if (__p)
          {
            v230 = v87;
            v231 = 1;
          }
          else
          {
            ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 83, v85, v86);
          }
        }
        v88 = (void *)qmi::MessageBase::findTlvValue(a2);
        v90 = v88;
        if (v88)
        {
          v91 = v89;
          __p = v88;
          v92 = tlv::parseV<bsp::tlv::Slot1IsEmbedded>((unint64_t *)&__p, v89);
          if (__p)
          {
            v217 = v92;
            v218 = 1;
          }
          else
          {
            ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 88, v90, v91);
          }
        }
        v82 = qmi::MessageBase::findTlvValue(a2);
        v94 = v82;
        if (v82)
        {
          v95 = v93;
          __p = (void *)v82;
          v82 = tlv::parseV<bsp::tlv::Slot2IsEmbedded>((unint64_t *)&__p, v93);
          if (__p)
          {
            v222 = v82;
            v223 = 1;
          }
          else
          {
            v82 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 89, v94, v95);
          }
        }
      }
      v96 = capabilities::ct::supportedVinylSlotCount((capabilities::ct *)v82);
      if (v96)
      {
        v97 = (void *)qmi::MessageBase::findTlvValue(a2);
        v99 = v97;
        if (v97)
        {
          v100 = v98;
          __p = v97;
          v101 = tlv::parseV<bsp::tlv::Slot1IsAccepted>((unint64_t *)&__p, v98);
          if (__p)
          {
            v234 = v101;
            v235 = 1;
          }
          else
          {
            ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 86, v99, v100);
          }
        }
        v96 = qmi::MessageBase::findTlvValue(a2);
        v103 = v96;
        if (v96)
        {
          v104 = v102;
          __p = (void *)v96;
          v96 = tlv::parseV<bsp::tlv::Slot2IsAccepted>((unint64_t *)&__p, v102);
          if (__p)
          {
            v236 = v96;
            v237 = 1;
          }
          else
          {
            v96 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 87, v103, v104);
          }
        }
      }
      v105 = capabilities::ct::supports5G((capabilities::ct *)v96);
      if ((_DWORD)v105)
      {
        v105 = qmi::MessageBase::findTlvValue(a2);
        v107 = v105;
        if (v105)
        {
          v108 = v106;
          __p = (void *)v105;
          v105 = tlv::parseV<bsp::tlv::NrAllowed>((unint64_t *)&__p, v106);
          if (__p)
          {
            v232 = v105;
            v233 = 1;
          }
          else
          {
            v105 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 84, v107, v108);
          }
        }
      }
      if (capabilities::ct::getProvisioningProfileSupport((capabilities::ct *)v105) == 1)
      {
        v109 = (void *)qmi::MessageBase::findTlvValue(a2);
        v111 = v109;
        if (v109)
        {
          v112 = v110;
          __p = v109;
          v113 = tlv::parseV<bsp::tlv::BootstrapVersion>((unint64_t *)&__p, v110);
          if (__p)
          {
            v238 = v113;
            v239 = 1;
          }
          else
          {
            ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 98, v111, v112);
          }
        }
        v114 = (void *)qmi::MessageBase::findTlvValue(a2);
        v116 = v114;
        if (v114)
        {
          v117 = v115;
          __p = v114;
          v118 = tlv::parseV<bsp::tlv::Slot1IsBootstrap>((unint64_t *)&__p, v115);
          if (__p)
          {
            v219 = v118;
            v220 = 1;
          }
          else
          {
            ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 99, v116, v117);
          }
        }
        v119 = (void *)qmi::MessageBase::findTlvValue(a2);
        v121 = v119;
        if (v119)
        {
          v122 = v120;
          __p = v119;
          v123 = tlv::parseV<bsp::tlv::Slot2IsBootstrap>((unint64_t *)&__p, v120);
          if (__p)
          {
            v224 = v123;
            v225 = 1;
          }
          else
          {
            ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 100, v121, v122);
          }
        }
      }
      v227 = (v221 | v226) != 0;
      __p = v4;
      v202 = 0x40000000;
      v203 = ___ZNK31QMIMav13ActivationCommandDriver15parseLegacyTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke;
      v204 = &__block_descriptor_tmp_29_3;
      v205 = (void **)v3;
      v206 = buf;
      v124 = (_DWORD *)qmi::MessageBase::findTlvValue(a2);
      v126 = v124;
      if (v124)
      {
        v127 = v125;
        v200 = v124;
        v199 = tlv::parseV<bsp::tlv::ActivationServiceProvisioned>((unint64_t *)&v200, v125);
        if (v200)
          ___ZNK31QMIMav13ActivationCommandDriver15parseLegacyTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke((uint64_t)&__p, &v199);
        else
          ((void (*)(_QWORD, uint64_t, _DWORD *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 79, v126, v127);
      }
      v128 = *(_QWORD *)(v3 + 48);
      ActivationInfo::ActivationInfo((ActivationInfo *)&__p, (const ActivationInfo *)buf);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 40))(v128, &__p);
      UMTSProvisioningInfo::~UMTSProvisioningInfo(&v209);
      if (v207)
      {
        v208 = v207;
        operator delete(v207);
      }
      if (v203)
      {
        v204 = v203;
        operator delete(v203);
      }
      UMTSProvisioningInfo::~UMTSProvisioningInfo(v216);
      if (v213)
      {
        v214 = v213;
        operator delete(v213);
      }
      if (v211[0])
      {
        v211[1] = v211[0];
        operator delete(v211[0]);
      }
    }
  }
  else
  {
    v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = bsp::asString(v5);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Activation state is not ready (%s) waiting for another indication", buf, 0xCu);
    }
  }
  _Block_object_dispose(&v130, 8);
}

void sub_2169A9130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a6);
  v7 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v7;
    operator delete(v7);
  }
  UMTSProvisioningInfo::~UMTSProvisioningInfo((void **)&STACK[0x520]);
  v8 = (void *)STACK[0x4F0];
  if (STACK[0x4F0])
  {
    STACK[0x4F8] = (unint64_t)v8;
    operator delete(v8);
  }
  v9 = (void *)STACK[0x4D0];
  if (STACK[0x4D0])
  {
    STACK[0x4D8] = (unint64_t)v9;
    operator delete(v9);
  }
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *QMIMav13ActivationCommandDriver::QMIMav13ActivationCommandDriver(_QWORD *a1, uint64_t a2, NSObject **a3)
{
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  dispatch_object_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  v9 = v5;
  if (v5)
    dispatch_retain(v5);
  QMIActivationCommandDriver::QMIActivationCommandDriver((uint64_t)a1, a2, &v9);
  if (v5)
    dispatch_release(v5);
  v10[0] = &unk_24D5C4F88;
  v11 = v10;
  SimInstanceLogger<QMIMav13ActivationCommandDriver,ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLogger((capabilities::ct *)(a1 + 15), a2, (uint64_t)v10);
  v6 = v11;
  if (v11 == v10)
  {
    v7 = 4;
    v6 = v10;
    goto LABEL_9;
  }
  if (v11)
  {
    v7 = 5;
LABEL_9:
    (*(void (**)(_QWORD *))(*v6 + 8 * v7))(v6);
  }
  *a1 = &off_24D5D7570;
  return a1;
}

void sub_2169A92C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  *(_QWORD *)v13 = &off_24D5E6DC0;
  qmi::Client::~Client((qmi::Client *)(v13 + 88));
  ActivationCommandDriver::~ActivationCommandDriver((ActivationCommandDriver *)v13);
  _Unwind_Resume(a1);
}

capabilities::ct *SimInstanceLogger<QMIMav13ActivationCommandDriver,ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLogger(capabilities::ct *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  if ((capabilities::ct::supportsGemini(a1) & 1) == 0)
  {
    v5 = (_QWORD *)operator new();
    v6 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v5;
    *v5 = &off_24D5D79D0;
    v5[1] = (char *)a1 - 120;
    if (!v6)
      return a1;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (*(_QWORD *)a1)
    return a1;
  v7 = (_QWORD *)operator new();
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
  SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLoggerDefault(v7);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_10;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_10:
  v10 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v7;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

void sub_2169A94A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  MEMORY[0x2199FEAC4](v14, 0x10A1C40FF1576FELL);
  v19 = *v13;
  *v13 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  _Unwind_Resume(a1);
}

void QMIMav13ActivationCommandDriver::~QMIMav13ActivationCommandDriver(QMIMav13ActivationCommandDriver *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &off_24D5E6DC0;
  qmi::Client::~Client((QMIMav13ActivationCommandDriver *)((char *)this + 88));
  ActivationCommandDriver::~ActivationCommandDriver(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &off_24D5E6DC0;
  qmi::Client::~Client((QMIMav13ActivationCommandDriver *)((char *)this + 88));
  ActivationCommandDriver::~ActivationCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNK31QMIMav13ActivationCommandDriver19handleClientStartedEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = 136315138;
      v4 = qmi::asString();
      _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#N Activation register request failed: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

BOOL QMIMav13ActivationCommandDriver::issueActivationTicket(uint64_t a1, char **a2)
{
  char *v3;
  char *v4;
  NSObject *v5;
  char **v7;
  void *v8;
  _QWORD v10[6];
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *aBlock;
  _OWORD v15[2];
  uint8_t buf[8];
  uint64_t v17;
  void (*v18)(uint64_t, QMIServiceMsg *);
  void *v19;
  _QWORD *v20;

  v3 = *a2;
  v4 = a2[1];
  v5 = *(NSObject **)(a1 + 40);
  if (*a2 == v4)
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_216897000, v5, OS_LOG_TYPE_ERROR, "Cannot issue empty activation ticket!", buf, 2u);
    }
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 0);
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I issuing postponement ticket", buf, 2u);
    }
    memset(v15, 0, sizeof(v15));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v15);
    v7 = (char **)qmi::MutableMessageBase::getTLV<bsp::tlv::ActivationManifest>(v15, 1);
    if (v7 != a2)
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v7, *a2, a2[1], a2[1] - *a2);
    v10[5] = a1 + 88;
    v11 = QMIServiceMsg::create();
    v13 = 0;
    aBlock = 0;
    v12 = 60000;
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 0x40000000;
    v10[2] = ___ZN31QMIMav13ActivationCommandDriver21issueActivationTicketERKNSt3__16vectorIhNS0_9allocatorIhEEEE_block_invoke_2;
    v10[3] = &__block_descriptor_tmp_11_8;
    v10[4] = a1;
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v17 = 0x40000000;
    v18 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp19ActivationSetTicket8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v19 = &unk_24D5D7A80;
    v20 = v10;
    v8 = _Block_copy(buf);
    aBlock = v8;
    if (v11)
    {
      qmi::Client::send();
      v8 = aBlock;
    }
    if (v8)
      _Block_release(v8);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v15);
  }
  return v3 != v4;
}

void sub_2169A9830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN31QMIMav13ActivationCommandDriver21issueActivationTicketERKNSt3__16vectorIhNS0_9allocatorIhEEEE_block_invoke_2(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v4 = *(_QWORD *)(result + 32);
    v5 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 136315138;
      v8 = qmi::asString();
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#N Unable to set activation ticket: %s", (uint8_t *)&v7, 0xCu);
      v2 = *(_DWORD *)(a2 + 4);
    }
    if (v2 == 65537)
    {
      v6 = 0x100000001;
    }
    else if (qmi::isInternalError())
    {
      v6 = 0x400000001;
    }
    else
    {
      v6 = 1;
    }
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 48) + 24))(*(_QWORD *)(v4 + 48), v6);
  }
  return result;
}

void QMIMav13ActivationCommandDriver::queryActivationStatus(QMIMav13ActivationCommandDriver *this)
{
  void *v2;
  _QWORD v3[6];
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  _OWORD v8[2];
  _QWORD aBlock[5];

  memset(v8, 0, sizeof(v8));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v8);
  v3[5] = (char *)this + 88;
  v4 = QMIServiceMsg::create();
  v5 = 25000;
  v6 = 0;
  v7 = 0;
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZN31QMIMav13ActivationCommandDriver21queryActivationStatusEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_15_13;
  v3[4] = this;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp21GetChipIdSerialNumber8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5D7AA8;
  aBlock[4] = v3;
  v2 = _Block_copy(aBlock);
  v7 = v2;
  if (v4)
  {
    qmi::Client::send();
    v2 = v7;
  }
  if (v2)
    _Block_release(v2);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_2169A9A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN31QMIMav13ActivationCommandDriver21queryActivationStatusEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD v5[5];
  uint8_t buf[24];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)a2 + 1))
  {
    v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = qmi::asString();
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#N Unable to get chip id and serial number: %s", buf, 0xCu);
    }
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 48) + 24))(*(_QWORD *)(v2 + 48), 0);
  }
  else
  {
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 0x40000000;
    v5[2] = ___ZN31QMIMav13ActivationCommandDriver21queryActivationStatusEv_block_invoke_12;
    v5[3] = &__block_descriptor_tmp_14_9;
    v5[4] = v2;
    *(_QWORD *)buf = v5;
    if ((qmi::MessageBase::applyTlv<bsp::tlv::ChipInformation,void({block_pointer}&)(bsp::tlv::ChipInformation const&)>(a2, 1, buf) & 1) == 0)
    {
      v4 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#N Missing chip id and serial number", buf, 2u);
      }
    }
  }
}

void ___ZN31QMIMav13ActivationCommandDriver21queryActivationStatusEv_block_invoke_12(uint64_t a1, int *a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  char *v6;
  char *v8;
  char v9;
  uint64_t v11;
  void *v12;
  void *__p;
  void *v14;
  uint64_t v15;
  char v16;
  int __src;
  void *v18[2];
  __int128 v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 32);
  v20 = 0;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  ChipInformation::ChipInformation((ChipInformation *)v18);
  __src = *a2;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v18[1], (char *)&__src, (char *)v18, 4uLL);
  v4 = v18[1];
  v5 = v19;
  v6 = (char *)(v19 - 1);
  if (v18[1] != (void *)v19 && v6 > v18[1])
  {
    v8 = (char *)v18[1] + 1;
    do
    {
      v9 = *(v8 - 1);
      *(v8 - 1) = *v6;
      *v6-- = v9;
    }
    while (v8++ < v6);
    v4 = v18[1];
    v5 = v19;
  }
  LOBYTE(v20) = 1;
  LODWORD(v18[0]) = a2[1];
  BYTE4(v18[0]) = 1;
  v11 = *(_QWORD *)(v3 + 48);
  v12 = v18[0];
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v4, v5, v5 - (_QWORD)v4);
  v16 = v20;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 32))(v11, &v12);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  if (v18[1])
  {
    *(void **)&v19 = v18[1];
    operator delete(v18[1]);
  }
}

void sub_2169A9CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver24handleRegisterIndicationERKN3bsp18ActivationRegister10IndicationE_block_invoke(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_3(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464) = *(_QWORD *)a2;
  result = ActivationCommandDriver::parseImei((ActivationCommandDriver *)(*(_QWORD *)(a1 + 32) + 464), a2);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 472) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_4(uint64_t result, int *a2)
{
  uint64_t v2;
  int v3;
  __int16 v4;

  v2 = *(_QWORD *)(result + 32);
  v3 = *a2;
  v4 = *((_WORD *)a2 + 2);
  *(_BYTE *)(v2 + 70) = *((_BYTE *)a2 + 6);
  *(_WORD *)(v2 + 68) = v4;
  *(_DWORD *)(v2 + 64) = v3;
  *(_BYTE *)(*(_QWORD *)(result + 32) + 71) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_5(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 482) = *a2;
  *(_BYTE *)(*(_QWORD *)(result + 32) + 486) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_6(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  if ((v2 - 1) <= 1)
  {
    v3 = *(_QWORD *)(result + 32);
    *(_DWORD *)(v3 + 488) = v2;
    *(_BYTE *)(v3 + 492) = 1;
  }
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver18parseImmutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_7(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(v2 + 496) = *a2;
  *(_BYTE *)(v2 + 500) = 1;
  return result;
}

void ___ZNK31QMIMav13ActivationCommandDriver15parseLegacyTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  char v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v5 + 12) && *(_DWORD *)v5)
  {
    v6 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = bsp::asString(*a2);
      v13 = 136315394;
      v14 = (uint64_t)v7;
      v15 = 2080;
      v16 = asString();
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#N Ignoring legacy OTASP value of %s due to activation state of %s", (uint8_t *)&v13, 0x16u);
    }
  }
  else
  {
    v8 = *a2;
    if (*a2 != 1)
    {
      v9 = v8 & 0xFFFFFFFE;
      if (v8 == 2)
        v10 = 2;
      else
        v10 = 1;
      if (v9 == 2)
        v11 = v10;
      else
        v11 = 0;
      *(_BYTE *)(v5 + 8) = v11;
      v12 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = 136315138;
        v14 = asString();
        _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#N Preferring legacy OTASP provisioned state: %s", (uint8_t *)&v13, 0xCu);
        v5 = *(_QWORD *)(a1 + 40);
      }
      *(_BYTE *)(v5 + 12) = 1;
    }
  }
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *(_QWORD *)(result + 32);
  v3 = *a2;
  if (v3 > 2)
    v4 = 2;
  else
    v4 = dword_216AAD740[v3];
  *(_DWORD *)v2 = v4;
  *(_BYTE *)(v2 + 12) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_2(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 4) = *a2;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_3(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(result + 32);
  HIDWORD(v3) = *a2;
  LODWORD(v3) = *a2;
  *(_DWORD *)(v2 + 256) = v3 >> 16;
  *(_BYTE *)(v2 + 260) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_4(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(result + 32);
  HIDWORD(v3) = *a2;
  LODWORD(v3) = *a2;
  *(_DWORD *)(v2 + 432) = v3 >> 16;
  *(_BYTE *)(v2 + 436) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_5(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  v3 = *a2;
  *(_WORD *)(v2 + 25) = *((_WORD *)a2 + 4);
  *(_QWORD *)(v2 + 17) = v3;
  v4 = *(_QWORD *)(result + 32);
  *(_BYTE *)(v4 + 27) = 1;
  *(_BYTE *)(v4 + 176) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_6(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 8) = *a2;
  *(_BYTE *)(*(_QWORD *)(result + 32) + 16) = 1;
  return result;
}

double ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_7(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *a2, a2[1], a2[1] - *a2);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = 1;
  ctu::hex((ctu *)*a2, (const void *)(a2[1] - *a2));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v4 + 96;
  if (*(char *)(v4 + 119) < 0)
    operator delete(*(void **)v5);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 120) = 1;
  return result;
}

double ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_8(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((_QWORD *)(*(_QWORD *)(a1 + 32) + 64), *a2, a2[1], a2[1] - *a2);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 88) = 1;
  ctu::hex((ctu *)*a2, (const void *)(a2[1] - *a2));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v4 + 128;
  if (*(char *)(v4 + 151) < 0)
    operator delete(*(void **)v5);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 152) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_9(uint64_t result, unsigned int *a2)
{
  unint64_t v2;
  char v3;

  v2 = *a2;
  if (v2 >= 5)
    v3 = 0;
  else
    v3 = 0x402010300uLL >> (8 * v2);
  *(_BYTE *)(*(_QWORD *)(result + 32) + 8) = v3;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_10(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  v3 = *a2;
  *(_WORD *)(v2 + 201) = *((_WORD *)a2 + 4);
  *(_QWORD *)(v2 + 193) = v3;
  v4 = *(_QWORD *)(result + 32);
  *(_BYTE *)(v4 + 203) = 1;
  *(_BYTE *)(v4 + 352) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_11(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 184) = *a2;
  *(_BYTE *)(*(_QWORD *)(result + 32) + 192) = 1;
  return result;
}

double ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_12(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((_QWORD *)(*(_QWORD *)(a1 + 32) + 208), *a2, a2[1], a2[1] - *a2);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 232) = 1;
  ctu::hex((ctu *)*a2, (const void *)(a2[1] - *a2));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v4 + 272;
  if (*(char *)(v4 + 295) < 0)
    operator delete(*(void **)v5);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 296) = 1;
  return result;
}

double ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_13(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((_QWORD *)(*(_QWORD *)(a1 + 32) + 240), *a2, a2[1], a2[1] - *a2);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 264) = 1;
  ctu::hex((ctu *)*a2, (const void *)(a2[1] - *a2));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v4 + 304;
  if (*(char *)(v4 + 327) < 0)
    operator delete(*(void **)v5);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 328) = 1;
  return result;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_14(uint64_t result, unsigned int *a2)
{
  unint64_t v2;
  char v3;

  v2 = *a2;
  if (v2 >= 5)
    v3 = 0;
  else
    v3 = 0x402010300uLL >> (8 * v2);
  *(_BYTE *)(*(_QWORD *)(result + 32) + 9) = v3;
  return result;
}

void ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_15(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  NSObject *v4;
  BOOL *v5;
  uint8_t v6[16];

  v3 = *a2;
  if (v3 == 1)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I OQC activation mode detected, overriding IMSI", v6, 2u);
    }
  }
  v5 = *(BOOL **)(a1 + 40);
  *v5 = v3 == 1;
  v5[1] = 1;
}

uint64_t ___ZNK31QMIMav13ActivationCommandDriver16parseMutableTlvsER14ActivationInfoRKN3bsp18ActivationRegister10IndicationE_block_invoke_51(uint64_t result, _DWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(v2 + 504) = *a2;
  *(_BYTE *)(v2 + 508) = 1;
  return result;
}

_QWORD *std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2169AA45C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  size_t v15;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v15 = a3 - __src;
    if (v15)
      result = memmove(v9, __src, v15);
    v14 = &v9[v15];
    goto LABEL_20;
  }
  v13 = &__src[v12 - v9];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v12 - v9);
    v9 = (char *)v7[1];
  }
  if (a3 != v13)
    result = memmove(v9, v13, a3 - v13);
  v14 = &v9[a3 - v13];
LABEL_20:
  v7[1] = v14;
  return result;
}

void ActivationInfo::ActivationInfo(ActivationInfo *this, const ActivationInfo *a2)
{
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)this = v4;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 2, *((const void **)a2 + 2), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2));
  v5 = *((_BYTE *)a2 + 40);
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 40) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 6, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6));
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  *((_WORD *)this + 48) = *((_WORD *)a2 + 48);
  UMTSProvisioningSlotInfo::UMTSProvisioningSlotInfo((uint64_t)this + 104, (__int128 *)((char *)a2 + 104));
  *((_BYTE *)this + 272) = *((_BYTE *)a2 + 272);
  UMTSProvisioningSlotInfo::UMTSProvisioningSlotInfo((uint64_t)this + 280, (__int128 *)((char *)a2 + 280));
  *((_BYTE *)this + 448) = *((_BYTE *)a2 + 448);
  *((_BYTE *)this + 456) = *((_BYTE *)a2 + 456);
  v6 = *((_OWORD *)a2 + 29);
  v7 = *((_OWORD *)a2 + 30);
  v8 = *((_OWORD *)a2 + 31);
  *(_OWORD *)((char *)this + 509) = *(_OWORD *)((char *)a2 + 509);
  *((_OWORD *)this + 30) = v7;
  *((_OWORD *)this + 31) = v8;
  *((_OWORD *)this + 29) = v6;
}

void sub_2169AA66C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;

  if (*(char *)(v1 + 247) < 0)
    operator delete(*(void **)(v1 + 224));
  if (*(char *)(v1 + 215) < 0)
    operator delete(*(void **)(v1 + 192));
  v4 = *(void **)(v1 + 160);
  if (v4)
  {
    *(_QWORD *)(v1 + 168) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 + 128);
  if (v5)
  {
    *(_QWORD *)(v1 + 136) = v5;
    operator delete(v5);
  }
  ActivationData<C2KProvisioningInfo>::~ActivationData(v2);
  _Unwind_Resume(a1);
}

uint64_t ActivationData<C2KProvisioningInfo>::~ActivationData(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t UMTSProvisioningSlotInfo::UMTSProvisioningSlotInfo(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  char v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;

  v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a1 + 24), *((const void **)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3));
  v5 = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a1 + 56), *((const void **)a2 + 7), *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7));
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 88);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_OWORD *)(a1 + 88) = v6;
  }
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  v7 = (std::string *)(a1 + 120);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 120);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  v9 = *((_QWORD *)a2 + 19);
  *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
  *(_QWORD *)(a1 + 152) = v9;
  return a1;
}

void sub_2169AA82C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v4);
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v6;
    operator delete(v6);
  }
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void UMTSProvisioningInfo::~UMTSProvisioningInfo(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  if (*((char *)this + 295) < 0)
    operator delete(this[34]);
  v2 = this[30];
  if (v2)
  {
    this[31] = v2;
    operator delete(v2);
  }
  v3 = this[26];
  if (v3)
  {
    this[27] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  v4 = this[8];
  if (v4)
  {
    this[9] = v4;
    operator delete(v4);
  }
  v5 = this[4];
  if (v5)
  {
    this[5] = v5;
    operator delete(v5);
  }
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp18ActivationRegister10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169AA9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void SimInstanceLoggable<QMIMav13ActivationCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t SimInstanceLoggable<QMIMav13ActivationCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 40;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::Register>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::Register>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::Register>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::Register>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D7A28;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp18ActivationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169AABB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::getTLV<bsp::tlv::ActivationManifest>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<bsp::tlv::ActivationManifest>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<bsp::tlv::ActivationManifest>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 16;
}

uint64_t qmi::MutableMessageBase::createTLV<bsp::tlv::ActivationManifest>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_QWORD *)v4 = &off_24D5D7AF0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 16;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ActivationManifest>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D7AF0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ActivationManifest>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D7AF0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ActivationManifest>::getSize(uint64_t a1)
{
  return tlv::size<vs::tlv::CallingNumber>((_QWORD *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ActivationManifest>::write(uint64_t a1, void **a2)
{
  char v3;
  char *v4;
  uint64_t v5;
  void *result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (char *)*a2;
  v5 = (uint64_t)*a2 + 3;
  *a2 = (void *)v5;
  result = tlv::writeV<vs::tlv::CallingNumber>(a2, a1 + 16);
  v7 = (char *)*a2 - v5;
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ActivationManifest>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D7AF0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_2169AAED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp19ActivationSetTicket8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169AAFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

unint64_t qmi::MessageBase::applyTlv<bsp::tlv::ChipInformation,void({block_pointer}&)(bsp::tlv::ChipInformation const&)>(qmi::MessageBase *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t result;
  int v7;
  unint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ChipInformation,void({block_pointer}&)(bsp::tlv::ChipInformation const&)>((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      return ((uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ChipInformation,void({block_pointer}&)(bsp::tlv::ChipInformation const&)>(uint64_t a1, unint64_t a2, int a3, _QWORD *a4)
{
  unint64_t v5;
  unint64_t v7;

  v7 = a2;
  tlv::parseV<bsp::tlv::ChipInformation>(&v7, a3);
  v5 = v7;
  if (v7)
    (*(void (**)(_QWORD))(*a4 + 16))(*a4);
  return v5 != 0;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp21GetChipIdSerialNumber8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<bsp::GetChipIdSerialNumber::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2169AB124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<bsp::GetChipIdSerialNumber::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)45057,bsp::GetChipIdSerialNumber::ResponseTLVList>::Response(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)45057,bsp::GetChipIdSerialNumber::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_2169AB1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)45057,bsp::GetChipIdSerialNumber::ResponseTLVList>::Response(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_2169AB20C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)45057,bsp::GetChipIdSerialNumber::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_2169AB24C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationState,void({block_pointer}&)(bsp::tlv::ActivationState const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<bsp::tlv::ActivationState>((unint64_t *)&v9, v5);
    if (v9)
      return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, 1, v6, v7);
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationPublicKeyHash,void({block_pointer}&)(bsp::tlv::ActivationPublicKeyHash const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationPublicKeyHash,void({block_pointer}&)(bsp::tlv::ActivationPublicKeyHash const&)>((uint64_t)a1, (char *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationPublicKeyHash,void({block_pointer}&)(bsp::tlv::ActivationPublicKeyHash const&)>(uint64_t a1, char *a2, int a3, uint64_t a4)
{
  char *v5;
  void *__p;
  void *v8;
  uint64_t v9;
  char *v10;

  v9 = 0;
  v10 = a2;
  __p = 0;
  v8 = 0;
  tlv::parseV<bsp::tlv::ActivationPublicKeyHash>(&v10, a3, &__p);
  v5 = v10;
  if (v10)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v5 != 0;
}

void sub_2169AB3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationFactoryKeyHash,void({block_pointer}&)(bsp::tlv::ActivationFactoryKeyHash const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationFactoryKeyHash,void({block_pointer}&)(bsp::tlv::ActivationFactoryKeyHash const&)>((uint64_t)a1, (char *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationFactoryKeyHash,void({block_pointer}&)(bsp::tlv::ActivationFactoryKeyHash const&)>(uint64_t a1, char *a2, int a3, uint64_t a4)
{
  char *v5;
  void *__p;
  void *v8;
  uint64_t v9;
  char *v10;

  v9 = 0;
  v10 = a2;
  __p = 0;
  v8 = 0;
  tlv::parseV<bsp::tlv::ActivationFactoryKeyHash>(&v10, a3, &__p);
  v5 = v10;
  if (v10)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v5 != 0;
}

void sub_2169AB510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationImei,void({block_pointer}&)(bsp::tlv::ActivationImei const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  int v7;
  unint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationImei,void({block_pointer}&)(bsp::tlv::ActivationImei const&)>((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      return ((uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationImei,void({block_pointer}&)(bsp::tlv::ActivationImei const&)>(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[0] = a2;
  v7[1] = tlv::parseV<bsp::tlv::ActivationImei>(v7, a3);
  v5 = v7[0];
  if (v7[0])
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

unint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationMeid,void({block_pointer}&)(bsp::tlv::ActivationMeid const&)>(qmi::MessageBase *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t result;
  int v7;
  unint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationMeid,void({block_pointer}&)(bsp::tlv::ActivationMeid const&)>((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      return ((uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationMeid,void({block_pointer}&)(bsp::tlv::ActivationMeid const&)>(uint64_t a1, unint64_t a2, int a3, _QWORD *a4)
{
  unint64_t v5;
  unint64_t v7;

  v7 = a2;
  tlv::parseV<bsp::tlv::ActivationMeid>(&v7, a3);
  v5 = v7;
  if (v7)
    (*(void (**)(_QWORD))(*a4 + 16))(*a4);
  return v5 != 0;
}

unint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationVersion,void({block_pointer}&)(bsp::tlv::ActivationVersion const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  int v7;
  unint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationVersion,void({block_pointer}&)(bsp::tlv::ActivationVersion const&)>((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      return ((uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationVersion,void({block_pointer}&)(bsp::tlv::ActivationVersion const&)>(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v7;

  v7 = a2;
  tlv::parseV<bsp::tlv::ActivationVersion>(&v7, a3);
  v5 = v7;
  if (v7)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

unint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationMode,void({block_pointer}&)(bsp::tlv::ActivationMode const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  int v7;
  unint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationMode,void({block_pointer}&)(bsp::tlv::ActivationMode const&)>((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      return ((uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationMode,void({block_pointer}&)(bsp::tlv::ActivationMode const&)>(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v7;

  v7 = a2;
  tlv::parseV<bsp::tlv::ActivationMode>(&v7, a3);
  v5 = v7;
  if (v7)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

unint64_t qmi::MessageBase::applyTlv<bsp::tlv::ActivationFactoryDebug,void({block_pointer}&)(bsp::tlv::ActivationFactoryDebug const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  int v7;
  unint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (qmi::MessageBase::tryTlv<bsp::tlv::ActivationFactoryDebug,void({block_pointer}&)(bsp::tlv::ActivationFactoryDebug const&)>((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      return ((uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a1, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<bsp::tlv::ActivationFactoryDebug,void({block_pointer}&)(bsp::tlv::ActivationFactoryDebug const&)>(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v7;

  v7 = a2;
  tlv::parseV<bsp::tlv::ActivationFactoryDebug>(&v7, a3);
  v5 = v7;
  if (v7)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

__n128 HintConverter::operator()@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __n128 **v3;
  __n128 result;

  v3 = (__n128 **)(a2 + 8);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_WORD *)(a2 + 2) = *(_WORD *)(a1 + 2);
  std::vector<unsigned char>::__append((unint64_t *)(a2 + 8), 0x10uLL);
  result = *(__n128 *)(a1 + 4);
  **v3 = result;
  return result;
}

void sub_2169ABA4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void Mav20PreferredNetworksFactoryCommandDriver::create(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  capabilities::ct *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  _QWORD *v45;
  NSObject *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  _QWORD v53[3];
  _QWORD *v54;
  uint64_t v55[3];
  uint64_t *v56;
  uint64_t v57[3];
  uint64_t *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  v6 = operator new();
  v7 = (std::__shared_weak_count *)a1[1];
  v51 = *a1;
  v52 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *a2;
  if (v10)
    dispatch_retain(v10);
  v11 = MEMORY[0x24BDC3D48] + 16;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = v11;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v57, (const char *)*MEMORY[0x24BDC3E90], "pnp.qmi");
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v10;
  if (v10)
    dispatch_retain(v10);
  *(_QWORD *)(v6 + 48) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x2199FDF6C](v55);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v57);
  v53[0] = &unk_24D5C4F88;
  v54 = v53;
  v12 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v55, (uint64_t)v53);
  *(_QWORD *)(v6 + 64) = 0;
  if ((capabilities::ct::supportsGemini(v12) & 1) == 0)
  {
    v13 = (_QWORD *)operator new();
    *v13 = &off_24D5D7DC8;
    v13[1] = v6;
    v14 = *(_QWORD *)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v13;
    if (!v14)
      goto LABEL_19;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  if (!*(_QWORD *)(v6 + 64))
  {
    v15 = (_QWORD *)operator new();
    std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v57, (uint64_t)v55);
    SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLoggerDefault(v15);
    v16 = v58;
    if (v58 == v57)
    {
      v17 = 4;
      v16 = v57;
    }
    else
    {
      if (!v58)
        goto LABEL_17;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_17:
    v18 = *(_QWORD *)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v15;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
LABEL_19:
  v19 = v56;
  if (v56 == v55)
  {
    v20 = 4;
    v19 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_24;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_24:
  v21 = v54;
  if (v54 == v53)
  {
    v22 = 4;
    v21 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_29;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_29:
  *(_QWORD *)v6 = &off_24D5D7B28;
  *(_QWORD *)(v6 + 72) = v51;
  *(_QWORD *)(v6 + 80) = v52;
  if (v52)
  {
    v23 = (unint64_t *)&v52->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(v6 + 88), *(os_log_s **)(v6 + 56));
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 104) = v6 + 112;
  *a3 = v6;
  a3[1] = 0;
  v25 = (std::__shared_weak_count *)operator new();
  v25->__shared_owners_ = 0;
  v26 = (unint64_t *)&v25->__shared_owners_;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D7D68;
  v25->__shared_weak_owners_ = 0;
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  a3[1] = (uint64_t)v25;
  v27 = *(std::__shared_weak_count **)(v6 + 32);
  if (v27)
  {
    if (v27->__shared_owners_ != -1)
      goto LABEL_45;
    do
      v28 = __ldxr(v26);
    while (__stxr(v28 + 1, v26));
    p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v30 = __ldxr(p_shared_weak_owners);
    while (__stxr(v30 + 1, p_shared_weak_owners));
    *(_QWORD *)(v6 + 24) = v6;
    *(_QWORD *)(v6 + 32) = v25;
    std::__shared_weak_count::__release_weak(v27);
  }
  else
  {
    do
      v31 = __ldxr(v26);
    while (__stxr(v31 + 1, v26));
    v32 = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    *(_QWORD *)(v6 + 24) = v6;
    *(_QWORD *)(v6 + 32) = v25;
  }
  do
    v34 = __ldaxr(v26);
  while (__stlxr(v34 - 1, v26));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_45:
  if (v10)
    dispatch_release(v10);
  if (v52)
  {
    v35 = (unint64_t *)&v52->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v38 = (_QWORD *)*a3;
  v37 = a3[1];
  if (v37)
  {
    v39 = (unint64_t *)(v37 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = (std::__shared_weak_count *)v38[4];
  if (!v41 || (v42 = v38[3], (v43 = std::__shared_weak_count::lock(v41)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v44 = v43;
  v45 = (_QWORD *)operator new();
  *v45 = v38;
  v45[1] = v37;
  v46 = v38[5];
  v47 = (unint64_t *)&v44->__shared_owners_;
  do
    v48 = __ldxr(v47);
  while (__stxr(v48 + 1, v47));
  v49 = (_QWORD *)operator new();
  *v49 = v45;
  v49[1] = v42;
  v49[2] = v44;
  v57[0] = 0;
  v55[0] = 0;
  dispatch_async_f(v46, v49, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::execute_wrapped<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0>(Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0,std::default_delete<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0>>)::{lambda(void *)#1}::__invoke);
  _ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev(v55);
  _ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev(v57);
  do
    v50 = __ldaxr(v47);
  while (__stlxr(v50 - 1, v47));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
}

void sub_2169ABF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  NSObject *v23;
  PreferredNetworksCommandDriverEventHandler *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v30 = a23;
  if (a23 == v28)
  {
    v31 = 4;
    v30 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  MEMORY[0x2199FEAC4](v27, 0x10A1C40FF1576FELL);
  v32 = *((_QWORD *)v24 + 8);
  *((_QWORD *)v24 + 8) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = a19;
  if (a19 == &a16)
  {
    v34 = 4;
    v33 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_13;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_13:
  v35 = a15;
  if (a15 == &a12)
  {
    v36 = 4;
    v35 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_18;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_18:
  MEMORY[0x2199FDF6C](v26);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v25);
  PreferredNetworksCommandDriverEventHandler::~PreferredNetworksCommandDriverEventHandler(v24);
  if (v23)
    dispatch_release(v23);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x2199FEAC4](v24, 0x10E1C40EED49AFFLL);
  _Unwind_Resume(a1);
}

void sub_2169ABFAC(_Unwind_Exception *a1, int a2)
{
  dispatch_queue_t *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    dispatch_barrier_async_f(v2[5], v2, (dispatch_function_t)std::shared_ptr<Mav20PreferredNetworksFactoryCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::make_shared_ptr<Mav20PreferredNetworksFactoryCommandDriver>(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(Mav20PreferredNetworksFactoryCommandDriver*)#1}::operator() const(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(void *)#1}::__invoke);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_2169ABFD8()
{
  __cxa_end_catch();
  JUMPOUT(0x2169AC0D4);
}

void sub_2169ABFEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1);
  v2 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 64) = 0;
  if (v2)
    JUMPOUT(0x2169AC07CLL);
  JUMPOUT(0x2169AC088);
}

void sub_2169AC108(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x2169AC110);
  __clang_call_terminate(a1);
}

void Mav20PreferredNetworksFactoryCommandDriver::~Mav20PreferredNetworksFactoryCommandDriver(Mav20PreferredNetworksFactoryCommandDriver *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D5D7B28;
  std::__tree<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>>>::destroy(*((_QWORD **)this + 14));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x2199FDF6C]((char *)this + 56);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 3);
  PreferredNetworksCommandDriverEventHandler::~PreferredNetworksCommandDriverEventHandler(this);
}

{
  Mav20PreferredNetworksFactoryCommandDriver::~Mav20PreferredNetworksFactoryCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

_QWORD *Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(Mav20PreferredNetworksFactoryCommandDriver *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24D5D7EB0;
  v8[1] = this;
  v9 = v8;
  qmi::ClientRouter::setHandler();
  v2 = v9;
  if (v9 == v8)
  {
    v3 = 4;
    v2 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v6[0] = &off_24D5D7F30;
  v6[1] = this;
  v7 = v6;
  qmi::ClientRouter::setHandler();
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_2169AC2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t Mav20PreferredNetworksFactoryCommandDriver::startCommandDriverEventHandler(Mav20PreferredNetworksFactoryCommandDriver *this)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *((_QWORD *)this + 7);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I Starting", v3, 2u);
  }
  return qmi::ClientRouter::start();
}

uint64_t Mav20PreferredNetworksFactoryCommandDriver::stopCommandDriverEventHandler(Mav20PreferredNetworksFactoryCommandDriver *this)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *((_QWORD *)this + 7);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I Shutting down", v3, 2u);
  }
  return qmi::ClientRouter::stop();
}

void Mav20PreferredNetworksFactoryCommandDriver::createCommandDriver(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const char *v23;
  const char *v24;
  capabilities::ct *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t v46;
  unint64_t *p_shared_weak_owners;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  char v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _OWORD *v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  _QWORD v83[3];
  _QWORD *v84;
  _BYTE v85[24];
  _BYTE *v86;
  _BYTE v87[24];
  _BYTE *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v7 = (_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 112);
  if (v6)
  {
    v8 = a1 + 112;
    do
    {
      v9 = *(_DWORD *)(v6 + 32);
      v10 = v9 < a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v6;
      else
        v11 = (uint64_t *)(v6 + 8);
      if (!v10)
        v8 = v6;
      v6 = *v11;
    }
    while (*v11);
    if ((_QWORD *)v8 != v7 && *(_DWORD *)(v8 + 32) <= a2)
    {
      v31 = *(_QWORD *)(v8 + 40);
      v32 = *(std::__shared_weak_count **)(v8 + 48);
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(p_shared_owners);
        while (__stxr(v34 + 1, p_shared_owners));
        if (!v31)
        {
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          goto LABEL_11;
        }
      }
      else if (!v31)
      {
        goto LABEL_11;
      }
      *a3 = v31;
      a3[1] = v32;
      return;
    }
  }
LABEL_11:
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  v81 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(NSObject **)(a1 + 40);
  if (v15)
    dispatch_retain(*(dispatch_object_t *)(a1 + 40));
  v16 = *(_QWORD *)(a1 + 88);
  v17 = *(std::__shared_weak_count **)(a1 + 96);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = operator new();
  if (v15)
    dispatch_retain(v15);
  if (v17)
  {
    v21 = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  PreferredNetworksCommandDriver::PreferredNetworksCommandDriver();
  v80 = a3;
  v23 = "pnp.qmi.?";
  if (a2 == 2)
    v23 = "pnp.qmi.2";
  if (a2 == 1)
    v24 = "pnp.qmi.1";
  else
    v24 = v23;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v87, (const char *)*MEMORY[0x24BDC3E90], v24);
  *(_QWORD *)(v20 + 40) = 0;
  *(_QWORD *)(v20 + 48) = 0;
  *(_QWORD *)(v20 + 56) = v15;
  if (v15)
    dispatch_retain(v15);
  *(_QWORD *)(v20 + 64) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x2199FDF6C](v85);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v87);
  v83[0] = &unk_24D5C4F88;
  v84 = v83;
  v25 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v85, (uint64_t)v83);
  *(_QWORD *)(v20 + 80) = 0;
  if ((capabilities::ct::supportsGemini(v25) & 1) == 0)
  {
    v26 = (_QWORD *)operator new();
    *v26 = &off_24D5D8010;
    v26[1] = v20;
    v27 = *(_QWORD *)(v20 + 80);
    *(_QWORD *)(v20 + 80) = v26;
    if (!v27)
      goto LABEL_49;
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  if (!*(_QWORD *)(v20 + 80))
  {
    v28 = (_QWORD *)operator new();
    std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v87, (uint64_t)v85);
    SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLoggerDefault(v28);
    v29 = v88;
    if (v88 == v87)
    {
      v30 = 4;
      v29 = v87;
    }
    else
    {
      if (!v88)
        goto LABEL_47;
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_47:
    v36 = *(_QWORD *)(v20 + 80);
    *(_QWORD *)(v20 + 80) = v28;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
LABEL_49:
  v37 = v86;
  if (v86 == v85)
  {
    v38 = 4;
    v37 = v85;
  }
  else
  {
    if (!v86)
      goto LABEL_54;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_54:
  v39 = v84;
  if (v84 == v83)
  {
    v40 = 4;
    v39 = v83;
  }
  else
  {
    if (!v84)
      goto LABEL_59;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_59:
  *(_QWORD *)v20 = &off_24D5D7B68;
  *(_DWORD *)(v20 + 88) = a2;
  *(_QWORD *)(v20 + 96) = v16;
  *(_QWORD *)(v20 + 104) = v17;
  if (v17)
  {
    v41 = (unint64_t *)&v17->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  *(_QWORD *)(v20 + 112) = 0;
  *(_QWORD *)(v20 + 120) = 0;
  *(_QWORD *)&v82 = v20;
  v43 = (std::__shared_weak_count *)operator new();
  v43->__shared_owners_ = 0;
  v44 = (unint64_t *)&v43->__shared_owners_;
  v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D7FB0;
  v43->__shared_weak_owners_ = 0;
  v43[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
  *((_QWORD *)&v82 + 1) = v43;
  v45 = *(std::__shared_weak_count **)(v20 + 48);
  if (v45)
  {
    if (v45->__shared_owners_ != -1)
      goto LABEL_75;
    do
      v46 = __ldxr(v44);
    while (__stxr(v46 + 1, v44));
    p_shared_weak_owners = (unint64_t *)&v43->__shared_weak_owners_;
    do
      v48 = __ldxr(p_shared_weak_owners);
    while (__stxr(v48 + 1, p_shared_weak_owners));
    *(_QWORD *)(v20 + 40) = v20;
    *(_QWORD *)(v20 + 48) = v43;
    std::__shared_weak_count::__release_weak(v45);
  }
  else
  {
    do
      v49 = __ldxr(v44);
    while (__stxr(v49 + 1, v44));
    v50 = (unint64_t *)&v43->__shared_weak_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    *(_QWORD *)(v20 + 40) = v20;
    *(_QWORD *)(v20 + 48) = v43;
  }
  do
    v52 = __ldaxr(v44);
  while (__stlxr(v52 - 1, v44));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
LABEL_75:
  if (v17)
  {
    v53 = (unint64_t *)&v17->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v15)
    dispatch_release(v15);
  if (v17)
  {
    v55 = (unint64_t *)&v17->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v15)
    dispatch_release(v15);
  if (v81)
  {
    v57 = (unint64_t *)&v81->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v59 = *(std::__shared_weak_count **)(a1 + 16);
  if (v59)
  {
    v60 = std::__shared_weak_count::lock(v59);
    v61 = v60;
    if (v60)
    {
      v62 = *(_QWORD *)(a1 + 8);
      v63 = (unint64_t *)&v60->__shared_weak_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
      v65 = 0;
      goto LABEL_101;
    }
  }
  else
  {
    v61 = 0;
  }
  v62 = 0;
  v65 = 1;
LABEL_101:
  v66 = *(std::__shared_weak_count **)(v82 + 120);
  *(_QWORD *)(v82 + 112) = v62;
  *(_QWORD *)(v82 + 120) = v61;
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
  if ((v65 & 1) == 0)
  {
    v67 = (unint64_t *)&v61->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v69 = *v7;
  v70 = v7;
  if (*v7)
  {
    do
    {
      while (1)
      {
        v70 = (_QWORD *)v69;
        v71 = *(_DWORD *)(v69 + 32);
        if (v71 <= a2)
          break;
        v69 = *v70;
        v7 = v70;
        if (!*v70)
          goto LABEL_116;
      }
      if (v71 >= a2)
      {
        v74 = v70;
        goto LABEL_119;
      }
      v69 = v70[1];
    }
    while (v69);
    v7 = v70 + 1;
  }
LABEL_116:
  v74 = operator new(0x38uLL);
  *((_DWORD *)v74 + 8) = a2;
  *((_QWORD *)v74 + 5) = 0;
  *((_QWORD *)v74 + 6) = 0;
  *(_QWORD *)v74 = 0;
  *((_QWORD *)v74 + 1) = 0;
  *((_QWORD *)v74 + 2) = v70;
  *v7 = v74;
  v72 = **(_QWORD **)(a1 + 104);
  v73 = (uint64_t *)v74;
  if (v72)
  {
    *(_QWORD *)(a1 + 104) = v72;
    v73 = (uint64_t *)*v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 112), v73);
  ++*(_QWORD *)(a1 + 120);
LABEL_119:
  if (v43)
  {
    v75 = (unint64_t *)&v43->__shared_owners_;
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)v74 + 6);
  *((_QWORD *)v74 + 5) = v82;
  *((_QWORD *)v74 + 6) = v43;
  if (v77)
  {
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  *v80 = v82;
}

void sub_2169ACAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  NSObject *v26;
  PreferredNetworksCommandDriver *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;

  v33 = *(_QWORD **)(v31 - 104);
  if (v33 == (_QWORD *)(v31 - 128))
  {
    v34 = 4;
    v33 = (_QWORD *)(v31 - 128);
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_6:
  MEMORY[0x2199FEAC4](v30, 0x10A1C40FF1576FELL);
  v35 = *((_QWORD *)v27 + 10);
  *((_QWORD *)v27 + 10) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = a26;
  if (a26 == &a23)
  {
    v37 = 4;
    v36 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_13;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_13:
  v38 = a22;
  if (a22 == &a19)
  {
    v39 = 4;
    v38 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_18;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_18:
  MEMORY[0x2199FDF6C](v29);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v28);
  PreferredNetworksCommandDriver::~PreferredNetworksCommandDriver(v27);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (v26)
    dispatch_release(v26);
  MEMORY[0x2199FEAC4](v27, 0x10E1C408FFDD7A7);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (v26)
    dispatch_release(v26);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Mav20PreferredNetworksCommandDriver::~Mav20PreferredNetworksCommandDriver(Mav20PreferredNetworksCommandDriver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D5D7B68;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  MEMORY[0x2199FDF6C]((char *)this + 72);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 5);
  PreferredNetworksCommandDriver::~PreferredNetworksCommandDriver(this);
}

{
  Mav20PreferredNetworksCommandDriver::~Mav20PreferredNetworksCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void Mav20PreferredNetworksCommandDriver::sendPreferredPlmnCRC(Mav20PreferredNetworksCommandDriver *this, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  _QWORD *v20;
  std::__shared_weak_count *v21;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(v19, 0, sizeof(v19));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
  *(_DWORD *)qmi::MutableMessageBase::getTLV<nas::tlv::Checksum>(v19, 16) = a2;
  v4 = *((_QWORD *)this + 9);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Preferred PLMN List CRC: %08x", buf, 8u);
  }
  v5 = qmi::ClientRouter::get();
  v6 = operator new();
  *(_QWORD *)v6 = v5;
  *(_QWORD *)(v6 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v6 + 16) = 25000;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v18 = v6;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D8080;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)this;
  v20 = &v7[1].__vftable;
  v21 = v7;
  v9 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v24 = 1174405120;
  v25 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN35Mav20PreferredNetworksCommandDriver20sendPreferredPlmnCRCEjE3__0EEOS1_OT__block_invoke;
  v26 = &__block_descriptor_tmp_15_14;
  v27 = &v7[1].__vftable;
  v28 = v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  aBlock[0] = v9;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_18;
  aBlock[3] = &unk_24D5D80C8;
  aBlock[4] = buf;
  *(_QWORD *)(v6 + 32) = _Block_copy(aBlock);
  v11 = v28;
  if (v28)
  {
    v12 = (unint64_t *)&v28->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v18;
  v18 = 0;
  if (v17)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v18, v17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
}

void sub_2169ACFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v5 = v4;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (a3)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v3, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(uint64_t a1, char a2, char a3, uint64_t a4)
{
  _BYTE *v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _BYTE *v19;
  int v20;
  unint64_t v21;
  uint64_t *v22;
  char *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  uint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[2];
  _QWORD *v58;
  std::__shared_weak_count *v59;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v62;
  __int128 v63;
  _QWORD *v64;
  _BYTE v65[10];
  __int16 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  memset(v57, 0, sizeof(v57));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v57);
  v8 = (_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::MessageSequence>(v57, 16);
  *v8 = a2;
  v8[1] = a3;
  v9 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(unsigned __int8 *)(a1 + 8);
    v11 = *(unsigned __int8 *)(a1 + 9);
    v12 = *(unsigned __int8 *)(a1 + 10);
    v13 = *(unsigned __int8 *)(a1 + 11);
    v14 = *(unsigned __int8 *)(a1 + 12);
    v15 = *(unsigned __int8 *)(a1 + 13);
    v16 = *(unsigned __int8 *)(a1 + 14);
    v17 = *(unsigned __int8 *)(a1 + 15);
    v18 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 67111168;
    *(_DWORD *)&buf[4] = v10;
    LOWORD(v62) = 1024;
    *(_DWORD *)((char *)&v62 + 2) = v11;
    HIWORD(v62) = 1024;
    LODWORD(v63) = v12;
    WORD2(v63) = 1024;
    *(_DWORD *)((char *)&v63 + 6) = v13;
    WORD5(v63) = 1024;
    HIDWORD(v63) = v14;
    LOWORD(v64) = 1024;
    *(_DWORD *)((char *)&v64 + 2) = v15;
    HIWORD(v64) = 1024;
    *(_DWORD *)v65 = v16;
    *(_WORD *)&v65[4] = 1024;
    *(_DWORD *)&v65[6] = v17;
    v66 = 1024;
    v67 = v18;
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I IMSI length = %u (0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x)", buf, 0x38u);
  }
  v19 = (_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::PreferredPlmnImsi>(v57, 17);
  v20 = *(unsigned __int8 *)(a1 + 8);
  *v19 = v20;
  if (v20)
  {
    v21 = 0;
    do
    {
      v19[v21 + 1] = *(_BYTE *)(a1 + 9 + v21);
      ++v21;
    }
    while (v21 < *(unsigned __int8 *)(a1 + 8));
  }
  *(_QWORD *)buf = 0;
  v62 = 0;
  *(_QWORD *)&v63 = 0;
  std::vector<PlmnPriorityData>::__init_with_size[abi:ne180100]<PlmnPriorityData*,PlmnPriorityData*>(buf, *(const void **)a4, *(_QWORD *)(a4 + 8), 0x6DB6DB6DB6DB6DB7 * (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4));
  v22 = (uint64_t *)qmi::MutableMessageBase::getTLV<nas::tlv::PreferredPlmnList>(v57, 18);
  v23 = (char *)v62;
  if (v62 != *(_QWORD *)buf)
  {
    v24 = 0;
    v25 = v22 + 2;
    v26 = (unint64_t *)v22[1];
    v23 = *(char **)buf;
    do
    {
      v27 = &v23[8 * v24 - v24];
      v28 = *(unsigned __int16 *)v27;
      v29 = *((unsigned __int16 *)v27 + 1);
      v30 = v27[4];
      v31 = v27[5];
      v32 = v27[6];
      if ((unint64_t)v26 >= *v25)
      {
        v33 = ((uint64_t)v26 - *v22) >> 3;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v34 = *v25 - *v22;
        v35 = v34 >> 2;
        if (v34 >> 2 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(v22 + 2), v36);
        else
          v37 = 0;
        v38 = &v37[8 * v33];
        *(_QWORD *)v38 = ((unint64_t)(v30 != 0) << 32) | (v31 << 40) | (v32 << 48) | v28 | (v29 << 16);
        v26 = (unint64_t *)(v38 + 8);
        v40 = *v22;
        v39 = v22[1];
        if (v39 != *v22)
        {
          do
          {
            v41 = *(_DWORD *)(v39 - 8);
            v39 -= 8;
            v42 = *(_DWORD *)(v39 + 3);
            *((_DWORD *)v38 - 2) = v41;
            v38 -= 8;
            *(_DWORD *)(v38 + 3) = v42;
          }
          while (v39 != v40);
          v39 = *v22;
        }
        *v22 = (uint64_t)v38;
        v22[1] = (uint64_t)v26;
        v22[2] = (uint64_t)&v37[8 * v36];
        if (v39)
          operator delete((void *)v39);
      }
      else
      {
        *v26++ = ((unint64_t)(v30 != 0) << 32) | (v31 << 40) | (v32 << 48) | v28 | (v29 << 16);
      }
      v22[1] = (uint64_t)v26;
      ++v24;
      v23 = *(char **)buf;
    }
    while (v24 < 0x6DB6DB6DB6DB6DB7 * (v62 - *(_QWORD *)buf));
  }
  if (v23)
  {
    v62 = (uint64_t)v23;
    operator delete(v23);
  }
  v43 = qmi::ClientRouter::get();
  v44 = operator new();
  *(_QWORD *)v44 = v43;
  *(_QWORD *)(v44 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v44 + 16) = 25000;
  *(_QWORD *)(v44 + 24) = 0;
  *(_QWORD *)(v44 + 32) = 0;
  v56 = v44;
  v45 = (std::__shared_weak_count *)operator new(0x20uLL);
  v45->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v45->__shared_owners_;
  v45->__shared_weak_owners_ = 0;
  v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D8128;
  v45[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v58 = &v45[1].__vftable;
  v59 = v45;
  v47 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v62 = 1174405120;
  *(_QWORD *)&v63 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN35Mav20PreferredNetworksCommandDriver21sendPreferredPlmnListEhhRKNSt3__16vectorI16PlmnPriorityDataNS4_9allocatorIS6_EEEEE3__3EEOS1_OT__block_invoke;
  *((_QWORD *)&v63 + 1) = &__block_descriptor_tmp_19_8;
  v64 = &v45[1].__vftable;
  *(_QWORD *)v65 = v45;
  do
    v48 = __ldxr(p_shared_owners);
  while (__stxr(v48 + 1, p_shared_owners));
  aBlock[0] = v47;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_18;
  aBlock[3] = &unk_24D5D80C8;
  aBlock[4] = buf;
  *(_QWORD *)(v44 + 32) = _Block_copy(aBlock);
  v49 = *(std::__shared_weak_count **)v65;
  if (*(_QWORD *)v65)
  {
    v50 = (unint64_t *)(*(_QWORD *)v65 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v59;
  if (v59)
  {
    v53 = (unint64_t *)&v59->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v56;
  v56 = 0;
  if (v55)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v56, v55);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v57);
}

void sub_2169AD520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = v24;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v26);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a10)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v25, a10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Mav20PreferredNetworksFactoryCommandDriver *,std::shared_ptr<Mav20PreferredNetworksFactoryCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::make_shared_ptr<Mav20PreferredNetworksFactoryCommandDriver>(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(Mav20PreferredNetworksFactoryCommandDriver *)#1},std::allocator<Mav20PreferredNetworksFactoryCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<Mav20PreferredNetworksFactoryCommandDriver *,std::shared_ptr<Mav20PreferredNetworksFactoryCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::make_shared_ptr<Mav20PreferredNetworksFactoryCommandDriver>(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(Mav20PreferredNetworksFactoryCommandDriver *)#1},std::allocator<Mav20PreferredNetworksFactoryCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 40), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<Mav20PreferredNetworksFactoryCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::make_shared_ptr<Mav20PreferredNetworksFactoryCommandDriver>(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(Mav20PreferredNetworksFactoryCommandDriver*)#1}::operator() const(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<Mav20PreferredNetworksFactoryCommandDriver *,std::shared_ptr<Mav20PreferredNetworksFactoryCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::make_shared_ptr<Mav20PreferredNetworksFactoryCommandDriver>(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(Mav20PreferredNetworksFactoryCommandDriver *)#1},std::allocator<Mav20PreferredNetworksFactoryCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav20PreferredNetworksFactoryCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::make_shared_ptr<Mav20PreferredNetworksFactoryCommandDriver>(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(Mav20PreferredNetworksFactoryCommandDriver*)#1}::operator() const(Mav20PreferredNetworksFactoryCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<Mav20PreferredNetworksFactoryCommandDriver>::execute_wrapped<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0>(Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0,std::default_delete<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  _DWORD *v4;
  char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t *v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t (*v32)(_QWORD);
  __int128 v33;
  void *v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p;
  char v40;
  dispatch_object_t v41;
  __int128 buf;
  __int128 v43;

  v1 = *a1;
  v28 = a1;
  v29 = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(NSObject **)(*(_QWORD *)v1 + 56);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing command driver", (uint8_t *)&buf, 2u);
  }
  subscriber::makeSimSlotRange();
  v4 = v30;
  if (v30 != v31)
  {
    while ((v32(*v4) & 1) == 0)
    {
      if (++v4 == v31)
      {
        v4 = v31;
        break;
      }
    }
    while (v4 != v31)
    {
      if (*v4 == 1)
      {
        v5 = "prefnetworks.1";
      }
      else if (*v4 == 2)
      {
        v5 = "prefnetworks.2";
      }
      else
      {
        v5 = 0;
      }
      v6 = *(std::__shared_weak_count **)(v2 + 32);
      if (!v6 || (v7 = *(_QWORD *)(v2 + 24), (v8 = std::__shared_weak_count::lock(v6)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v9 = v8;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
      Registry::getServerConnection(*(Registry **)(v2 + 72));
      buf = 0u;
      v43 = 0u;
      std::string::basic_string[abi:ne180100]<0>(v34, v5);
      v14 = *(NSObject **)(v2 + 40);
      v41 = v14;
      if (v14)
        dispatch_retain(v14);
      std::string::basic_string[abi:ne180100]<0>(&__p, "registration");
      v37 = 0;
      v38 = 0;
      v15 = std::__shared_weak_count::lock(v9);
      if (v15)
      {
        v16 = v15;
        v17 = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        v37 = v7;
        v38 = v15;
        std::__shared_weak_count::__release_weak(v9);
        v19 = (unint64_t *)&v16->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (v20)
          goto LABEL_32;
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        v9 = v16;
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
      std::__shared_weak_count::__release_weak(v9);
LABEL_32:
      v36 = v33;
      v33 = 0uLL;
      qmi::Client::createWithQueueLocal();
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v38)
        std::__shared_weak_count::__release_weak(v38);
      if (v40 < 0)
        operator delete(__p);
      if (v41)
        dispatch_release(v41);
      if (SBYTE7(v35) < 0)
        operator delete(v34[0]);
      v34[0] = 0;
      v34[1] = 0;
      v35 = v43;
      v43 = 0uLL;
      qmi::ClientRouter::addClient();
      qmi::Client::~Client((qmi::Client *)v34);
      qmi::ClientRouter::get();
      qmi::Client::~Client((qmi::Client *)&buf);
      if (*((_QWORD *)&v33 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v33 + 1) + 16))(*((_QWORD *)&v33 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v33 + 1));
        }
      }
      v26 = v4 + 1;
      v4 = v31;
      if (v26 != v31)
      {
        v4 = v26;
        while ((v32(*v4) & 1) == 0)
        {
          if (++v4 == v31)
          {
            v4 = v31;
            break;
          }
        }
      }
    }
  }
  std::unique_ptr<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0,std::default_delete<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0>>::~unique_ptr[abi:ne180100](&v29);
  return _ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev((uint64_t *)&v28);
}

void sub_2169AD9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::unique_ptr<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0,std::default_delete<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0>>::~unique_ptr[abi:ne180100](&a13);
  _ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev(&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0,std::default_delete<Mav20PreferredNetworksFactoryCommandDriver::create(std::shared_ptr<Registry const>,dispatch::queue)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x2199FEAC4](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

void SimInstanceLoggable<Mav20PreferredNetworksFactoryCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t SimInstanceLoggable<Mav20PreferredNetworksFactoryCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 56;
}

void std::__tree<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>>>::destroy(*a1);
    std::__tree<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>>>::destroy(a1[1]);
    std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN42Mav20PreferredNetworksFactoryCommandDriver24bindNASSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = ***(NSObject ****)(a1 + 32);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = qmi::asString();
      v5 = *(_DWORD *)(a2 + 4);
      v6 = 136315394;
      v7 = v4;
      v8 = 1024;
      v9 = v5;
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#N Error binding NAS subscription: %s (0x%x)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c128_ZTSNSt3__110shared_ptrIZN42Mav20PreferredNetworksFactoryCommandDriver24bindNASSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c128_ZTSNSt3__110shared_ptrIZN42Mav20PreferredNetworksFactoryCommandDriver24bindNASSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<Mav20PreferredNetworksFactoryCommandDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D7E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20PreferredNetworksFactoryCommandDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D7E38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2169ADD54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D7EB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D7EB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  capabilities::ct *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint8_t buf[8];
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  void *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[5];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2 - 1;
  if (v4 >= 3)
    v5 = 0;
  else
    v5 = v2;
  v6 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 64) + 16))(*(_QWORD *)(v3 + 64), v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I NAS Client has started", buf, 2u);
  }
  if (v4 >= 3)
    v7 = 0;
  else
    v7 = v2;
  v8 = (capabilities::ct *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 64) + 16))(*(_QWORD *)(v3 + 64), v7);
  if (capabilities::ct::supportsGemini(v8))
  {
    memset(v31, 0, sizeof(v31));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v31);
    *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::SubType>(v31, 1) = v2 == 2;
    v9 = qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<nas::BindSubscription::Request>((uint64_t)&v29, v2, v9);
    v10 = (std::__shared_weak_count *)operator new(0x20uLL);
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D7E38;
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
    v38 = &v10[1].__vftable;
    v39 = v10;
    v12 = v30;
    v13 = MEMORY[0x24BDAC760];
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v33 = 1174405120;
    v34 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN42Mav20PreferredNetworksFactoryCommandDriver24bindNASSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
    v35 = &__block_descriptor_tmp_12_11;
    v36 = &v10[1].__vftable;
    v37 = v10;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    aBlock[0] = v13;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_2;
    aBlock[3] = &unk_24D5D7E80;
    aBlock[4] = buf;
    *(_QWORD *)(v12 + 32) = _Block_copy(aBlock);
    v15 = v37;
    if (v37)
    {
      v16 = (unint64_t *)&v37->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v39;
    if (v39)
    {
      v19 = (unint64_t *)&v39->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v30;
    v30 = 0;
    if (v21)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v30, v21);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v31);
  }
  v22 = *(std::__shared_weak_count **)(v3 + 16);
  if (v22)
  {
    v23 = std::__shared_weak_count::lock(v22);
    if (v23)
    {
      v24 = v23;
      v25 = *(_QWORD *)(v3 + 8);
      if (v25)
      {
        if (v4 >= 3)
          v26 = 0;
        else
          v26 = v2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v26);
      }
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_2169AE074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v25;

  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D7F30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D7F30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint8_t v14[16];

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2 - 1;
  if (v4 >= 3)
    v5 = 0;
  else
    v5 = v2;
  v6 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 64) + 16))(*(_QWORD *)(v3 + 64), v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I NAS Client has stopped", v14, 2u);
  }
  v7 = *(std::__shared_weak_count **)(v3 + 16);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)(v3 + 8);
      if (v10)
      {
        if (v4 >= 3)
          v11 = 0;
        else
          v11 = v2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, v11);
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_2169AE294(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1,std::allocator<Mav20PreferredNetworksFactoryCommandDriver::bootstrapCommandDriverEventHandler(void)::$_1>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__shared_ptr_pointer<Mav20PreferredNetworksCommandDriver *,std::shared_ptr<Mav20PreferredNetworksCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksCommandDriver>::make_shared_ptr<Mav20PreferredNetworksCommandDriver>(Mav20PreferredNetworksCommandDriver*)::{lambda(Mav20PreferredNetworksCommandDriver *)#1},std::allocator<Mav20PreferredNetworksCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<Mav20PreferredNetworksCommandDriver *,std::shared_ptr<Mav20PreferredNetworksCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksCommandDriver>::make_shared_ptr<Mav20PreferredNetworksCommandDriver>(Mav20PreferredNetworksCommandDriver*)::{lambda(Mav20PreferredNetworksCommandDriver *)#1},std::allocator<Mav20PreferredNetworksCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 56), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<Mav20PreferredNetworksCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksCommandDriver>::make_shared_ptr<Mav20PreferredNetworksCommandDriver>(Mav20PreferredNetworksCommandDriver*)::{lambda(Mav20PreferredNetworksCommandDriver*)#1}::operator() const(Mav20PreferredNetworksCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<Mav20PreferredNetworksCommandDriver *,std::shared_ptr<Mav20PreferredNetworksCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksCommandDriver>::make_shared_ptr<Mav20PreferredNetworksCommandDriver>(Mav20PreferredNetworksCommandDriver*)::{lambda(Mav20PreferredNetworksCommandDriver *)#1},std::allocator<Mav20PreferredNetworksCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav20PreferredNetworksCommandDriver> ctu::SharedSynchronizable<Mav20PreferredNetworksCommandDriver>::make_shared_ptr<Mav20PreferredNetworksCommandDriver>(Mav20PreferredNetworksCommandDriver*)::{lambda(Mav20PreferredNetworksCommandDriver*)#1}::operator() const(Mav20PreferredNetworksCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void SimInstanceLoggable<Mav20PreferredNetworksCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t SimInstanceLoggable<Mav20PreferredNetworksCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 72;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN35Mav20PreferredNetworksCommandDriver20sendPreferredPlmnCRCEjE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t TlvValue;
  int v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  const char *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _BYTE v22[12];
  uint8_t buf[8];
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = **(_QWORD **)(a1 + 32);
  v3 = *(_DWORD *)(a2 + 4);
  if (v3)
  {
    v4 = *(NSObject **)(v2 + 72);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v3;
      LOWORD(v24) = 2080;
      *(_QWORD *)((char *)&v24 + 2) = qmi::asString();
      _os_log_error_impl(&dword_216897000, v4, OS_LOG_TYPE_ERROR, "Preferred PLMN List CRC check failed: Error in response with code = %d (%s)", buf, 0x12u);
    }
    v5 = 0;
    goto LABEL_17;
  }
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)buf = *(_QWORD *)a2;
  *(_QWORD *)&v24 = v6;
  v7 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)&v24 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)buf);
  v12 = TlvValue;
  if (!TlvValue)
    goto LABEL_11;
  v13 = v11;
  *(_QWORD *)v22 = TlvValue;
  v5 = tlv::parseV<nas::tlv::ChecksumResult>((unint64_t *)v22, v11);
  if (!*(_QWORD *)v22)
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)buf, 1, v12, v13);
LABEL_11:
    v5 = 0;
  }
  v14 = *(NSObject **)(v2 + 72);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = (const char *)&unk_216AC4FCA;
    if (!v5)
      v15 = "no";
    *(_DWORD *)v22 = 136315138;
    *(_QWORD *)&v22[4] = v15;
    _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I Preferred PLMN List CRC check completed, result: %s match", v22, 0xCu);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
LABEL_17:
  v16 = *(std::__shared_weak_count **)(v2 + 120);
  if (v16)
  {
    v17 = std::__shared_weak_count::lock(v16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)(v2 + 112);
      if (v19)
        (*(void (**)(uint64_t, _QWORD, BOOL))(*(_QWORD *)v19 + 32))(v19, *(unsigned int *)(v2 + 88), v5);
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_2169AE5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c94_ZTSNSt3__110shared_ptrIZN35Mav20PreferredNetworksCommandDriver20sendPreferredPlmnCRCEjE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c94_ZTSNSt3__110shared_ptrIZN35Mav20PreferredNetworksCommandDriver20sendPreferredPlmnCRCEjE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0,std::allocator<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D8080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0,std::allocator<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D8080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN35Mav20PreferredNetworksCommandDriver21sendPreferredPlmnListEhhRKNSt3__16vectorI16PlmnPriorityDataNS4_9allocatorIS6_EEEEE3__3EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint8_t buf[8];
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  v4 = *(_DWORD *)(a2 + 4);
  v5 = *(NSObject **)(*v2 + 72);
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v4;
      v22 = 2080;
      v23 = qmi::asString();
      _os_log_error_impl(&dword_216897000, v5, OS_LOG_TYPE_ERROR, "Preferred PLMN List push failed: Error in response with code = %d 9%s)", buf, 0x12u);
    }
    v6 = *(std::__shared_weak_count **)(v3 + 48);
    if (!v6 || (v7 = *(_QWORD *)(v3 + 40), (v8 = std::__shared_weak_count::lock(v6)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v9 = v8;
    v10 = (_QWORD *)operator new();
    *v10 = v3;
    v11 = *(NSObject **)(v3 + 56);
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v10;
    v14[1] = v7;
    v14[2] = v9;
    v20 = 0;
    *(_QWORD *)buf = 0;
    dispatch_async_f(v11, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Mav20PreferredNetworksCommandDriver>::execute_wrapped<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},std::default_delete<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
    _ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev(&v20);
    _ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev((uint64_t *)buf);
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
LABEL_10:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Preferred PLMN List segment push completed", buf, 2u);
  }
  v16 = *(std::__shared_weak_count **)(v3 + 120);
  if (v16)
  {
    v17 = std::__shared_weak_count::lock(v16);
    if (v17)
    {
      v9 = v17;
      v18 = *(_QWORD *)(v3 + 112);
      if (v18)
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 40))(v18, *(unsigned int *)(v3 + 88), 1);
      v19 = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldaxr(v19);
      while (__stlxr(v15 - 1, v19));
      goto LABEL_10;
    }
  }
}

void sub_2169AE8B8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN35Mav20PreferredNetworksCommandDriver21sendPreferredPlmnListEhhRKNS_6vectorI16PlmnPriorityDataNS_9allocatorIS3_EEEEE3__3EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN35Mav20PreferredNetworksCommandDriver21sendPreferredPlmnListEhhRKNS_6vectorI16PlmnPriorityDataNS_9allocatorIS3_EEEEE3__3EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3,std::allocator<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D8128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3,std::allocator<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D8128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<Mav20PreferredNetworksCommandDriver>::execute_wrapped<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},std::default_delete<Mav20PreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t **v10;

  v10 = a1;
  v1 = *a1;
  v2 = **a1;
  v3 = *(std::__shared_weak_count **)(v2 + 120);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(v2 + 112);
      if (v6)
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(unsigned int *)(v2 + 88), 0);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return _ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev((uint64_t *)&v10);
}

void sub_2169AEA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  _ZNSt3__110unique_ptrIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_NS_14default_deleteISH_EEED1B8ne180100Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

void QMIDownLinkFilterCommandDriver::create(_QWORD *a1@<X0>, NSObject **a2@<X1>, int a3@<W2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  _QWORD v20[2];
  NSObject *v21;

  v14 = operator new();
  v15 = *a2;
  v21 = v15;
  if (v15)
    dispatch_retain(v15);
  v16 = *a6;
  v17 = (std::__shared_weak_count *)a6[1];
  v20[0] = v16;
  v20[1] = v17;
  if (v17)
  {
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
  }
  QMIDownLinkFilterCommandDriver::QMIDownLinkFilterCommandDriver(v14, a1, &v21, a3, a4, a5, v20);
  *a7 = 0;
  a7[1] = 0;
  std::shared_ptr<QMIDownLinkFilterCommandDriver>::shared_ptr[abi:ne180100]<QMIDownLinkFilterCommandDriver,std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver*)#1},void>(a7, v14);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  if (v15)
    dispatch_release(v15);
}

void sub_2169AEBA8(_Unwind_Exception *exception_object)
{
  NSObject *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  int v4;

  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    if (!v1)
    {
LABEL_3:
      if (!v4)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  dispatch_release(v1);
  if (!v4)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  MEMORY[0x2199FEAC4](v2, 0x10E1C40027E38C3);
  goto LABEL_5;
}

uint64_t QMIDownLinkFilterCommandDriver::QMIDownLinkFilterCommandDriver(uint64_t a1, _QWORD *a2, NSObject **a3, int a4, int a5, unsigned int a6, _QWORD *a7)
{
  _QWORD *v14;
  char **v15;
  const char *v16;
  NSObject *v17;
  capabilities::ct *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  capabilities::ct *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD v36[3];
  capabilities::ct *v37;
  _BYTE v38[24];
  _BYTE *v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24D5E5C28;
  v14 = (_QWORD *)(a1 + 8);
  if (a4 == 3)
  {
    v16 = "dfs.qmi.all.?";
    goto LABEL_23;
  }
  if (a4 != 2)
  {
    if (a4 != 1)
    {
      v16 = "dfs.qmi.?";
      goto LABEL_23;
    }
    if (a5 == 2)
    {
      if (a6 < 0x10)
      {
        v15 = off_24D5D8E98;
        goto LABEL_19;
      }
    }
    else if (a5 == 1 && a6 < 0x10)
    {
      v15 = off_24D5D8E18;
LABEL_19:
      v16 = v15[a6];
      goto LABEL_23;
    }
    v16 = "dfs.qmi.1.?";
    goto LABEL_23;
  }
  if (a5 == 2)
  {
    if (a6 < 0x10)
    {
      v15 = off_24D5D8F98;
      goto LABEL_19;
    }
    v16 = "dfs.qmi.2.6.?";
  }
  else if (a5 == 1)
  {
    if (a6 < 0x10)
    {
      v15 = off_24D5D8F18;
      goto LABEL_19;
    }
    v16 = "dfs.qmi.2.4.?";
  }
  else
  {
    v16 = "dfs.qmi.2.?";
  }
LABEL_23:
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v40, (const char *)*MEMORY[0x24BDC3E90], v16);
  *v14 = 0;
  v14[1] = 0;
  v17 = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  if (v17)
    dispatch_retain(v17);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x2199FDF6C](v38);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v40);
  v36[0] = &unk_24D5C4F88;
  v37 = (capabilities::ct *)v36;
  v18 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v38, (uint64_t)v36);
  *(_QWORD *)(a1 + 48) = 0;
  if ((capabilities::ct::supportsGemini(v18) & 1) == 0)
  {
    v19 = (_QWORD *)operator new();
    *v19 = &off_24D5D8640;
    v19[1] = a1;
    v20 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v19;
    if (!v20)
      goto LABEL_36;
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    v21 = (_QWORD *)operator new();
    std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v40, (uint64_t)v38);
    SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLoggerDefault(v21);
    v22 = v41;
    if (v41 == v40)
    {
      v23 = 4;
      v22 = v40;
    }
    else
    {
      if (!v41)
        goto LABEL_34;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_34:
    v24 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v21;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
LABEL_36:
  v25 = v39;
  if (v39 == v38)
  {
    v26 = 4;
    v25 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_41;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_41:
  v27 = v37;
  if (v37 == (capabilities::ct *)v36)
  {
    v28 = 4;
    v27 = (capabilities::ct *)v36;
  }
  else
  {
    if (!v37)
      goto LABEL_46;
    v28 = 5;
  }
  v27 = (capabilities::ct *)(*(uint64_t (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_46:
  *(_QWORD *)a1 = &off_24D5D8178;
  *(_QWORD *)(a1 + 56) = *a2;
  v29 = a2[1];
  *(_QWORD *)(a1 + 64) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 72) = a4;
  *(_DWORD *)(a1 + 76) = a5;
  *(_DWORD *)(a1 + 80) = a6;
  *(_BYTE *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = *a7;
  v32 = a7[1];
  *(_QWORD *)(a1 + 128) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 16);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 168) = 0;
  if ((capabilities::ct::supportsLLFilters(v27) & 1) == 0)
    *(_WORD *)(a1 + 136) = 256;
  return a1;
}

void sub_2169AEFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v27 = a21;
  if (a21 == v25)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_6:
  MEMORY[0x2199FEAC4](v24, 0x10A1C40FF1576FELL);
  v29 = *(_QWORD *)(v22 + 48);
  *(_QWORD *)(v22 + 48) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = a17;
  if (a17 == &a14)
  {
    v31 = 4;
    v30 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_13:
  v32 = a13;
  if (a13 == &a10)
  {
    v33 = 4;
    v32 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_18;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_18:
  MEMORY[0x2199FDF6C](v23);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v21);
  _Unwind_Resume(a1);
}

void QMIDownLinkFilterCommandDriver::~QMIDownLinkFilterCommandDriver(QMIDownLinkFilterCommandDriver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_24D5D8178;
  v4 = (void **)((char *)this + 144);
  std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  qmi::Client::~Client((QMIDownLinkFilterCommandDriver *)((char *)this + 88));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  MEMORY[0x2199FDF6C]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 1);
}

{
  QMIDownLinkFilterCommandDriver::~QMIDownLinkFilterCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void QMIDownLinkFilterCommandDriver::shutdown(QMIDownLinkFilterCommandDriver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2 || (v3 = *((_QWORD *)this + 1), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = (_QWORD *)operator new();
  *v6 = this;
  v7 = *((_QWORD *)this + 3);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (_QWORD *)operator new();
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  v12 = 0;
  v13 = 0;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::execute_wrapped<QMIDownLinkFilterCommandDriver::shutdown(void)::$_0>(QMIDownLinkFilterCommandDriver::shutdown(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDownLinkFilterCommandDriver::shutdown(void)::$_0,dispatch_queue_s *::default_delete<QMIDownLinkFilterCommandDriver::shutdown(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v12);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v13);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t QMIDownLinkFilterCommandDriver::createDfsClientOnDemand_sync(QMIDownLinkFilterCommandDriver *this)
{
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  capabilities::ct *v14;
  __int16 v15;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  void *v20;
  char v21;
  dispatch_object_t v22;
  void *v23;
  char v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  int v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_DWORD *)this + 19);
    v4 = *((_DWORD *)this + 20);
    *(_DWORD *)buf = 67109376;
    v26 = v3;
    v27 = 1024;
    v28 = v4;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I lazy creation of fDFSClient for ipFamily %d, pdp %d", buf, 0xEu);
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "QMIDriver:dfs");
  v5 = *((_QWORD *)this + 3);
  v22 = v5;
  if (v5)
    dispatch_retain(v5);
  std::string::basic_string[abi:ne180100]<0>(&v20, "dfs");
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v6 || (v7 = std::__shared_weak_count::lock(v6), (v18 = v7) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  Registry::getServerConnection(*((Registry **)this + 7));
  qmi::Client::createWithQueueLocal();
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100]((uint64_t)this + 104, &v29);
  qmi::Client::~Client((qmi::Client *)buf);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)())v17->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__shared_weak_count::__release_weak(v19);
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v21 < 0)
    operator delete(v20);
  v14 = (capabilities::ct *)v22;
  if (v22)
    dispatch_release(v22);
  if (v24 < 0)
    operator delete(v23);
  if (capabilities::ct::supportsLLFilters(v14))
    v15 = 0;
  else
    v15 = 256;
  *((_WORD *)this + 68) = v15;
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  return qmi::Client::start((QMIDownLinkFilterCommandDriver *)((char *)this + 88));
}

void sub_2169AF5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;
  NSObject *v34;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (*(_QWORD *)(v32 - 160))
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)(v32 - 160));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (*(char *)(v32 - 129) < 0)
    operator delete(*(void **)(v32 - 152));
  v34 = *(NSObject **)(v32 - 128);
  if (v34)
    dispatch_release(v34);
  if (*(char *)(v32 - 97) < 0)
    operator delete(*(void **)(v32 - 120));
  _Unwind_Resume(a1);
}

void ___ZN30QMIDownLinkFilterCommandDriver28createDfsClientOnDemand_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(v1 + 76);
    v4 = *(_DWORD *)(v1 + 80);
    v5[0] = 67109376;
    v5[1] = v3;
    v6 = 1024;
    v7 = v4;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I DFS Client has stopped for ipFamily %d, pdp %d", (uint8_t *)v5, 0xEu);
  }
}

void ___ZN30QMIDownLinkFilterCommandDriver28createDfsClientOnDemand_syncEv_block_invoke_4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  int v4;
  const void **v5;
  const void **v6;
  const void **v7;
  char *v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  const void **v18;
  char *v19;
  char *v20;
  char *v21;
  const void *v22;
  char v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  const void **v33;
  char *v34;
  char *v35;
  char *v36;
  const void *v37;
  const void **v38;
  const void **v39;
  char *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  const void **v49;
  char *v50;
  char *v51;
  char *v52;
  const void *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  void *v70;
  _QWORD v71[6];
  uint64_t v72;
  int v73;
  uint64_t v74;
  void *aBlock;
  void *__p[2];
  __int128 v77;
  uint8_t buf[8];
  uint64_t v79;
  void (*v80)(uint64_t, QMIServiceMsg *);
  void *v81;
  _QWORD *v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(v1 + 76);
    v4 = *(_DWORD *)(v1 + 80);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v3;
    LOWORD(v79) = 1024;
    *(_DWORD *)((char *)&v79 + 2) = v4;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I DFS Client has started for ipFamily %d, pdp %d", buf, 0xEu);
  }
  if (*(_QWORD *)(v1 + 104))
  {
    *(_OWORD *)__p = 0u;
    v77 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v5 = (const void **)__p[1];
    v6 = (const void **)v77;
    v7 = (const void **)__p[1];
    if (__p[1] != (void *)v77)
    {
      v7 = (const void **)__p[1];
      while (*((_BYTE *)*v7 + 8) != 17)
      {
        if (++v7 == (const void **)v77)
          goto LABEL_14;
      }
    }
    if (v7 == (const void **)v77)
    {
LABEL_14:
      v11 = operator new();
      v12 = v11;
      *(_WORD *)(v11 + 8) = 17;
      *(_QWORD *)v11 = &off_24D5D8698;
      v13 = v77;
      if ((unint64_t)v77 >= *((_QWORD *)&v77 + 1))
      {
        v14 = (uint64_t)(v77 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = (uint64_t)(*((_QWORD *)&v77 + 1) - (unint64_t)__p[1]) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if (*((_QWORD *)&v77 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v77 + 8, v16);
        else
          v17 = 0;
        v18 = (const void **)&v17[8 * v14];
        v19 = &v17[8 * v16];
        *v18 = (const void *)v12;
        v6 = v18 + 1;
        v21 = (char *)__p[1];
        v20 = (char *)v77;
        if ((void *)v77 != __p[1])
        {
          do
          {
            v22 = (const void *)*((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v18 = v22;
          }
          while (v20 != v21);
          v20 = (char *)__p[1];
        }
        __p[1] = v18;
        *(_QWORD *)&v77 = v6;
        *((_QWORD *)&v77 + 1) = v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v77 = v11;
        v6 = (const void **)(v13 + 8);
      }
      v9 = (char *)(v12 + 9);
      *(_QWORD *)&v77 = v6;
      v5 = (const void **)__p[1];
    }
    else
    {
      if (!v8)
        __cxa_bad_cast();
      v9 = v8 + 9;
    }
    if (*(_DWORD *)(v1 + 76) == 2)
      v23 = 6;
    else
      v23 = 4;
    *v9 = v23;
    while (v5 != v6)
    {
      if (*((_BYTE *)*v5 + 8) == 18)
      {
        if (v5 != v6)
        {
          if (!v24)
            __cxa_bad_cast();
          v25 = v24 + 12;
          goto LABEL_58;
        }
        break;
      }
      ++v5;
    }
    v26 = operator new();
    v27 = v26;
    *(_BYTE *)(v26 + 8) = 18;
    *(_QWORD *)v26 = &off_24D5D86E8;
    *(_DWORD *)(v26 + 12) = 0;
    v25 = (_QWORD *)(v26 + 12);
    *(_DWORD *)(v26 + 16) = 0;
    v28 = v77;
    if ((unint64_t)v77 >= *((_QWORD *)&v77 + 1))
    {
      v29 = (uint64_t)(v77 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v29 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v30 = (uint64_t)(*((_QWORD *)&v77 + 1) - (unint64_t)__p[1]) >> 2;
      if (v30 <= v29 + 1)
        v30 = v29 + 1;
      if (*((_QWORD *)&v77 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      if (v31)
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v77 + 8, v31);
      else
        v32 = 0;
      v33 = (const void **)&v32[8 * v29];
      v34 = &v32[8 * v31];
      *v33 = (const void *)v27;
      v6 = v33 + 1;
      v36 = (char *)__p[1];
      v35 = (char *)v77;
      if ((void *)v77 != __p[1])
      {
        do
        {
          v37 = (const void *)*((_QWORD *)v35 - 1);
          v35 -= 8;
          *--v33 = v37;
        }
        while (v35 != v36);
        v35 = (char *)__p[1];
      }
      __p[1] = v33;
      *(_QWORD *)&v77 = v6;
      *((_QWORD *)&v77 + 1) = v34;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *(_QWORD *)v77 = v26;
      v6 = (const void **)(v28 + 8);
    }
    *(_QWORD *)&v77 = v6;
LABEL_58:
    *v25 = 0x400000003;
    v38 = (const void **)__p[1];
    if (__p[1] == v6)
      goto LABEL_66;
    v39 = (const void **)__p[1];
    while (*((_BYTE *)*v39 + 8) != 19)
    {
      if (++v39 == v6)
        goto LABEL_66;
    }
    if (v39 == v6)
    {
LABEL_66:
      v42 = operator new();
      v43 = v42;
      *(_WORD *)(v42 + 8) = 19;
      *(_QWORD *)v42 = &off_24D5D8738;
      v44 = v77;
      if ((unint64_t)v77 >= *((_QWORD *)&v77 + 1))
      {
        v45 = (uint64_t)(v77 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v45 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v46 = (uint64_t)(*((_QWORD *)&v77 + 1) - (unint64_t)__p[1]) >> 2;
        if (v46 <= v45 + 1)
          v46 = v45 + 1;
        if (*((_QWORD *)&v77 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v77 + 8, v47);
        else
          v48 = 0;
        v49 = (const void **)&v48[8 * v45];
        v50 = &v48[8 * v47];
        *v49 = (const void *)v43;
        v6 = v49 + 1;
        v52 = (char *)__p[1];
        v51 = (char *)v77;
        if ((void *)v77 != __p[1])
        {
          do
          {
            v53 = (const void *)*((_QWORD *)v51 - 1);
            v51 -= 8;
            *--v49 = v53;
          }
          while (v51 != v52);
          v51 = (char *)__p[1];
        }
        __p[1] = v49;
        *(_QWORD *)&v77 = v6;
        *((_QWORD *)&v77 + 1) = v50;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *(_QWORD *)v77 = v42;
        v6 = (const void **)(v44 + 8);
      }
      v41 = (_BYTE *)(v43 + 9);
      *(_QWORD *)&v77 = v6;
      v38 = (const void **)__p[1];
    }
    else
    {
      if (!v40)
        __cxa_bad_cast();
      v41 = v40 + 9;
    }
    *v41 = *(_BYTE *)(v1 + 80) + 1;
    while (v38 != v6)
    {
      if (*((_BYTE *)*v38 + 8) == 20)
      {
        if (v38 != v6)
        {
          if (!v54)
            __cxa_bad_cast();
          v55 = (int *)(v54 + 12);
          goto LABEL_107;
        }
        break;
      }
      ++v38;
    }
    v56 = operator new();
    v57 = v56;
    *(_BYTE *)(v56 + 8) = 20;
    *(_QWORD *)v56 = &off_24D5D8788;
    *(_DWORD *)(v56 + 12) = 0;
    v55 = (int *)(v56 + 12);
    v58 = v77;
    if ((unint64_t)v77 >= *((_QWORD *)&v77 + 1))
    {
      v60 = (uint64_t)(v77 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v60 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v61 = (uint64_t)(*((_QWORD *)&v77 + 1) - (unint64_t)__p[1]) >> 2;
      if (v61 <= v60 + 1)
        v61 = v60 + 1;
      if (*((_QWORD *)&v77 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v62 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      if (v62)
        v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v77 + 8, v62);
      else
        v63 = 0;
      v64 = (uint64_t *)&v63[8 * v60];
      v65 = &v63[8 * v62];
      *v64 = v57;
      v59 = v64 + 1;
      v67 = (char *)__p[1];
      v66 = (char *)v77;
      if ((void *)v77 != __p[1])
      {
        do
        {
          v68 = *((_QWORD *)v66 - 1);
          v66 -= 8;
          *--v64 = v68;
        }
        while (v66 != v67);
        v66 = (char *)__p[1];
      }
      __p[1] = v64;
      *(_QWORD *)&v77 = v59;
      *((_QWORD *)&v77 + 1) = v65;
      if (v66)
        operator delete(v66);
    }
    else
    {
      *(_QWORD *)v77 = v56;
      v59 = (_QWORD *)(v58 + 8);
    }
    *(_QWORD *)&v77 = v59;
LABEL_107:
    if (*(_DWORD *)(v1 + 72) == 2)
      v69 = 2;
    else
      v69 = 1;
    *v55 = v69;
    v71[5] = v1 + 88;
    v72 = QMIServiceMsg::create();
    v73 = 25000;
    v74 = 0;
    aBlock = 0;
    v71[0] = MEMORY[0x24BDAC760];
    v71[1] = 0x40000000;
    v71[2] = ___ZN30QMIDownLinkFilterCommandDriver18bindDFSClient_syncEv_block_invoke;
    v71[3] = &__block_descriptor_tmp_12_12;
    v71[4] = v1;
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v79 = 0x40000000;
    v80 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs10BindClient8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v81 = &unk_24D5D87B8;
    v82 = v71;
    v70 = _Block_copy(buf);
    aBlock = v70;
    if (v72)
    {
      qmi::Client::send();
      v70 = aBlock;
    }
    if (v70)
      _Block_release(v70);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    v10 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#E fDFSClient not ready", buf, 2u);
    }
  }
}

void sub_2169AFE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

void ___ZN30QMIDownLinkFilterCommandDriver28createDfsClientOnDemand_syncEv_block_invoke_6(uint64_t a1, NSObject *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  dispatch_group_t group;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 76);
    v6 = *(_DWORD *)(v3 + 80);
    LODWORD(group) = 67109376;
    HIDWORD(group) = v5;
    v8 = 1024;
    v9 = v6;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I DFS Client enters LowPower for ipFamily %d, pdp %d", (uint8_t *)&group, 0xEu);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
  }
  group = a2;
  (*(void (**)(uint64_t, uint64_t, dispatch_group_t *))(*(_QWORD *)v3 + 24))(v3, 1, &group);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
}

void sub_2169AFFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_group_t group)
{
  NSObject *v9;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN30QMIDownLinkFilterCommandDriver28createDfsClientOnDemand_syncEv_block_invoke_9(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  int v4;
  dispatch_group_t group;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(v1 + 76);
    v4 = *(_DWORD *)(v1 + 80);
    LODWORD(group) = 67109376;
    HIDWORD(group) = v3;
    v6 = 1024;
    v7 = v4;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I DFS Client exits LowPower for ipFamily %d, pdp %d", (uint8_t *)&group, 0xEu);
  }
  group = 0;
  (*(void (**)(uint64_t, _QWORD, dispatch_group_t *))(*(_QWORD *)v1 + 24))(v1, 0, &group);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void sub_2169B00F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void QMIDownLinkFilterCommandDriver::setObserver(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  NSObject *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (!v7 || (v8 = a1[1], (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  v11 = (_QWORD *)operator new();
  *v11 = a1;
  v11[1] = v3;
  v11[2] = v4;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v13 = a1[3];
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = (_QWORD *)operator new();
  *v15 = v11;
  v15[1] = v8;
  v15[2] = v10;
  v17 = 0;
  v18 = 0;
  dispatch_async_f(v13, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::execute_wrapped<QMIDownLinkFilterCommandDriver::setObserver(std::weak_ptr<dormancy::DormancyCommandDriverObserver>)::$_0>(QMIDownLinkFilterCommandDriver::setObserver(std::weak_ptr<dormancy::DormancyCommandDriverObserver>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDownLinkFilterCommandDriver::setObserver(std::weak_ptr<dormancy::DormancyCommandDriverObserver>)::$_0,std::default_delete<QMIDownLinkFilterCommandDriver::setObserver(std::weak_ptr<dormancy::DormancyCommandDriverObserver>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v17);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v18);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void ___ZN30QMIDownLinkFilterCommandDriver18bindDFSClient_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  _BOOL8 v5;
  int v6;
  int v7;
  uint64_t v8;
  const void **v9;
  char *v10;
  _BYTE *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  _QWORD v28[5];
  _OWORD v29[2];
  _QWORD v30[5];
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *aBlock;
  __int128 v36;
  __int128 v37;
  _QWORD v38[5];
  uint8_t buf[8];
  __int128 v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(NSObject **)(v2 + 40);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v3;
      LOWORD(v40) = 2080;
      *(_QWORD *)((char *)&v40 + 2) = qmi::asString();
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#E dfs::BindClient Error code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    if (v5)
    {
      v6 = *(_DWORD *)(v2 + 76);
      v7 = *(_DWORD *)(v2 + 80);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v6;
      LOWORD(v40) = 1024;
      *(_DWORD *)((char *)&v40 + 2) = v7;
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I DFS Client bound successfully with ipFamily %d, pdp %d", buf, 0xEu);
    }
    if ((capabilities::ct::supportsLLFilters((capabilities::ct *)v5) & 1) != 0)
    {
      if (*(_QWORD *)(v2 + 104))
      {
        v8 = MEMORY[0x24BDAC760];
        v38[0] = MEMORY[0x24BDAC760];
        v38[1] = 0x40000000;
        v38[2] = ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke;
        v38[3] = &__block_descriptor_tmp_13_9;
        v38[4] = v2;
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&v40 = 0x40000000;
        *((_QWORD *)&v40 + 1) = ___ZNK3qmi6Client13setIndHandlerIRKN3dfs15LLFiltersStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
        v41 = &unk_24D5D87E0;
        v42 = v38;
        qmi::Client::setIndHandler();
        v36 = 0u;
        v37 = 0u;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v36);
        v9 = (const void **)*((_QWORD *)&v36 + 1);
        if (*((_QWORD *)&v36 + 1) != (_QWORD)v37)
        {
          while (*((_BYTE *)*v9 + 8) != 23)
          {
            if (++v9 == (const void **)v37)
              goto LABEL_18;
          }
        }
        if (v9 == (const void **)v37)
        {
LABEL_18:
          v13 = operator new();
          v14 = v13;
          *(_WORD *)(v13 + 8) = 23;
          *(_QWORD *)v13 = &off_24D5D8828;
          v15 = v37;
          if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
          {
            v17 = (uint64_t)(v37 - *((_QWORD *)&v36 + 1)) >> 3;
            if ((unint64_t)(v17 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v18 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v36 + 1)) >> 2;
            if (v18 <= v17 + 1)
              v18 = v17 + 1;
            if (*((_QWORD *)&v37 + 1) - *((_QWORD *)&v36 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v37 + 8, v19);
            else
              v20 = 0;
            v21 = (uint64_t *)&v20[8 * v17];
            v22 = &v20[8 * v19];
            *v21 = v14;
            v16 = v21 + 1;
            v24 = (char *)*((_QWORD *)&v36 + 1);
            v23 = (char *)v37;
            if ((_QWORD)v37 != *((_QWORD *)&v36 + 1))
            {
              do
              {
                v25 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *--v21 = v25;
              }
              while (v23 != v24);
              v23 = (char *)*((_QWORD *)&v36 + 1);
            }
            *((_QWORD *)&v36 + 1) = v21;
            *(_QWORD *)&v37 = v16;
            *((_QWORD *)&v37 + 1) = v22;
            if (v23)
              operator delete(v23);
          }
          else
          {
            *(_QWORD *)v37 = v13;
            v16 = (_QWORD *)(v15 + 8);
          }
          v11 = (_BYTE *)(v14 + 9);
          *(_QWORD *)&v37 = v16;
        }
        else
        {
          if (!v10)
            __cxa_bad_cast();
          v11 = v10 + 9;
        }
        *v11 = 1;
        v31 = v2 + 88;
        v32 = QMIServiceMsg::create();
        v33 = 25000;
        v34 = 0;
        aBlock = 0;
        v30[0] = v8;
        v30[1] = 0x40000000;
        v30[2] = ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke_3;
        v30[3] = &__block_descriptor_tmp_16_11;
        v30[4] = v2;
        *(_QWORD *)buf = v8;
        *(_QWORD *)&v40 = 0x40000000;
        *((_QWORD *)&v40 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        v41 = &unk_24D5D8858;
        v42 = v30;
        v26 = _Block_copy(buf);
        aBlock = v26;
        if (v32)
        {
          qmi::Client::send();
          v26 = aBlock;
        }
        if (v26)
          _Block_release(v26);
        memset(v29, 0, sizeof(v29));
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v29);
        v31 = v2 + 88;
        v32 = QMIServiceMsg::create();
        v33 = 25000;
        v34 = 0;
        aBlock = 0;
        v28[0] = v8;
        v28[1] = 0x40000000;
        v28[2] = ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke_17;
        v28[3] = &__block_descriptor_tmp_21_7;
        v28[4] = v2;
        *(_QWORD *)buf = v8;
        *(_QWORD *)&v40 = 0x40000000;
        *((_QWORD *)&v40 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs19GetFilterCapability8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        v41 = &unk_24D5D8880;
        v42 = v28;
        v27 = _Block_copy(buf);
        aBlock = v27;
        if (v32)
        {
          qmi::Client::send();
          v27 = aBlock;
        }
        if (v27)
          _Block_release(v27);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v29);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v36);
      }
      else
      {
        v12 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#E fDFSClient not ready", buf, 2u);
        }
      }
    }
    else
    {
      *(_WORD *)(v2 + 136) = 256;
    }
    QMIDownLinkFilterCommandDriver::handlePdpStateChangeAfterClientCreation_sync(v2, *(_DWORD *)(v2 + 72), 1);
  }
}

void sub_2169B06E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *aBlock,char a29)
{
  if (a25)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void QMIDownLinkFilterCommandDriver::handlePdpStateChangeAfterClientCreation_sync(uint64_t a1, int a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  NSObject *v14;
  int v15;
  int v16;
  NSObject *v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a1 + 72);
  if (v6 == a2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) != (_DWORD)a3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a3);
      if ((_DWORD)a3)
      {
        v17 = 0;
        QMIDownLinkFilterCommandDriver::setPowerSaveFilterMode_sync(a1, 0, &v17);
      }
      v7 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_DWORD *)(a1 + 76);
        v8 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)buf = 67109632;
        v19 = a3;
        v20 = 1024;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = "#I pdpActiveState changed to %d for pdpId %d, ipFamily %d";
        v11 = v7;
        v12 = 20;
LABEL_15:
        _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
        return;
      }
      return;
    }
    v6 = *(_DWORD *)(a1 + 72);
  }
  if (v6 != a2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) && (_DWORD)a3 != 0)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0);
    v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_DWORD *)(a1 + 76);
      v15 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)buf = 67109376;
      v19 = v15;
      v20 = 1024;
      v21 = v16;
      v10 = "#I pdpActiveState changed to false on pdpId %d, ipFamily %d";
      v11 = v14;
      v12 = 14;
      goto LABEL_15;
    }
  }
}

void ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3;
  unsigned __int8 *TlvValue;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[5];
  void *__p;
  void *v11;
  uint64_t v12;
  unsigned __int8 *v13;

  v3 = *(_QWORD *)(a1 + 32);
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 0x40000000;
  v9[2] = ___ZN30QMIDownLinkFilterCommandDriver29handleLLFiltersStatusInd_syncERKN3dfs15LLFiltersStatus10IndicationE_block_invoke;
  v9[3] = &__block_descriptor_tmp_27_9;
  v9[4] = v3;
  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v13 = TlvValue;
    __p = 0;
    v11 = 0;
    v12 = 0;
    tlv::parseV<dfs::tlv::LLFilterStatusList>(&v13, v5, &__p);
    v8 = v13;
    if (v13)
      ___ZN30QMIDownLinkFilterCommandDriver29handleLLFiltersStatusInd_syncERKN3dfs15LLFiltersStatus10IndicationE_block_invoke((uint64_t)v9, (unsigned int **)&__p);
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 16, v6, v7);
  }
}

void sub_2169B0A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke_3(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      v5 = 2080;
      v6 = qmi::asString();
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Error registering for DFS indications: %d(%s)", (uint8_t *)v4, 0x12u);
    }
  }
}

void ___ZN30QMIDownLinkFilterCommandDriver22registerLLFilters_syncEv_block_invoke_17(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t TlvValue;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint8_t v19[8];
  uint8_t buf[8];
  __int128 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *((_DWORD *)a2 + 1);
  v5 = *(NSObject **)(v3 + 40);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (!v4)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Response to GetFilterCapability received", buf, 2u);
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&v21 = buf;
    *((_QWORD *)&v21 + 1) = 0x2000000000;
    v22 = 0;
    v15 = 0;
    v16 = &v15;
    v17 = 0x2000000000;
    v18 = 0;
    TlvValue = qmi::MessageBase::findTlvValue(a2);
    v9 = TlvValue;
    if (TlvValue)
    {
      v10 = v8;
      *(_QWORD *)v19 = TlvValue;
      v11 = tlv::parseV<dfs::tlv::LLFilterCapability>((unint64_t *)v19, v8);
      if (*(_QWORD *)v19)
      {
        *(_DWORD *)(v21 + 24) = v11;
        *((_DWORD *)v16 + 6) = HIDWORD(v11);
      }
      else
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 20, v9, v10);
      }
    }
    if (*(_DWORD *)(v21 + 24))
    {
      if (*((_DWORD *)v16 + 6))
      {
        v12 = 257;
LABEL_20:
        *(_WORD *)(v3 + 136) = v12;
        _Block_object_dispose(&v15, 8);
        _Block_object_dispose(buf, 8);
        return;
      }
      v13 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v19 = 0;
        v14 = "#E GetFilterCapability: maxNumPerAdd is zero";
        goto LABEL_18;
      }
    }
    else
    {
      v13 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v19 = 0;
        v14 = "#E GetFilterCapability: maxNum is zero";
LABEL_18:
        _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, v14, v19, 2u);
      }
    }
    v12 = 256;
    goto LABEL_20;
  }
  if (v6)
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v4;
    LOWORD(v21) = 2080;
    *(_QWORD *)((char *)&v21 + 2) = qmi::asString();
    _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I Error quering for DFS capability: %d(%s)", buf, 0x12u);
  }
  *(_WORD *)(v3 + 136) = 256;
}

void sub_2169B0CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Block_object_dispose(&a9, 8);
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void QMIDownLinkFilterCommandDriver::setPowerSaveFilterMode_sync(uint64_t a1, char a2, NSObject **a3)
{
  const void **v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  NSObject *v11;
  int v12;
  int v13;
  char *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  _QWORD v32[5];
  dispatch_group_t group;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *aBlock;
  void *__p[2];
  __int128 v41;
  uint8_t buf[8];
  uint64_t v43;
  void (*v44)(uint64_t, QMIServiceMsg *);
  void *v45;
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 104))
  {
    v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v8 = "#E fDFSClient not ready";
    v9 = v7;
    v10 = 2;
    goto LABEL_11;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v11 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      return;
    v13 = *(_DWORD *)(a1 + 76);
    v12 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v12;
    LOWORD(v43) = 1024;
    *(_DWORD *)((char *)&v43 + 2) = v13;
    v8 = "#I No active packet data on pdp %d ipFamily %d, skip setPowerSaveFilterMode";
    v9 = v11;
    v10 = 14;
LABEL_11:
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    return;
  }
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v6 = (const void **)__p[1];
  if (__p[1] != (void *)v41)
  {
    while (*((_BYTE *)*v6 + 8) != 1)
    {
      if (++v6 == (const void **)v41)
        goto LABEL_15;
    }
  }
  if (v6 == (const void **)v41)
  {
LABEL_15:
    v16 = operator new();
    v17 = v16;
    *(_WORD *)(v16 + 8) = 1;
    *(_QWORD *)v16 = &off_24D5D88C8;
    v18 = v41;
    if ((unint64_t)v41 >= *((_QWORD *)&v41 + 1))
    {
      v20 = (uint64_t)(v41 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v21 = (uint64_t)(*((_QWORD *)&v41 + 1) - (unint64_t)__p[1]) >> 2;
      if (v21 <= v20 + 1)
        v21 = v20 + 1;
      if (*((_QWORD *)&v41 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v41 + 8, v22);
      else
        v23 = 0;
      v24 = (uint64_t *)&v23[8 * v20];
      v25 = &v23[8 * v22];
      *v24 = v17;
      v19 = v24 + 1;
      v27 = (char *)__p[1];
      v26 = (char *)v41;
      if ((void *)v41 != __p[1])
      {
        do
        {
          v28 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v24 = v28;
        }
        while (v26 != v27);
        v26 = (char *)__p[1];
      }
      __p[1] = v24;
      *(_QWORD *)&v41 = v19;
      *((_QWORD *)&v41 + 1) = v25;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *(_QWORD *)v41 = v16;
      v19 = (_QWORD *)(v18 + 8);
    }
    v15 = (_BYTE *)(v17 + 9);
    *(_QWORD *)&v41 = v19;
  }
  else
  {
    if (!v14)
      __cxa_bad_cast();
    v15 = v14 + 9;
  }
  *v15 = a2;
  v35 = a1 + 88;
  v36 = QMIServiceMsg::create();
  v37 = 25000;
  v38 = 0;
  aBlock = 0;
  v29 = MEMORY[0x24BDAC760];
  v32[0] = MEMORY[0x24BDAC760];
  v32[1] = 1174405120;
  v32[2] = ___ZN30QMIDownLinkFilterCommandDriver27setPowerSaveFilterMode_syncEbN8dispatch13group_sessionE_block_invoke;
  v32[3] = &__block_descriptor_tmp_22_8;
  v30 = *a3;
  v32[4] = a1;
  group = v30;
  if (v30)
  {
    dispatch_retain(v30);
    dispatch_group_enter(v30);
  }
  v34 = a2;
  *(_QWORD *)buf = v29;
  v43 = 0x40000000;
  v44 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs22SetPowersaveFilterMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v45 = &unk_24D5D88F8;
  v46 = v32;
  v31 = _Block_copy(buf);
  aBlock = v31;
  if (v36)
  {
    qmi::Client::send();
    v31 = aBlock;
  }
  if (v31)
    _Block_release(v31);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2169B1088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void ___ZN30QMIDownLinkFilterCommandDriver27setPowerSaveFilterMode_syncEbN8dispatch13group_sessionE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  int v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(a2 + 4);
  v5 = *(NSObject **)(v3 + 40);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6)
      return;
    v9 = v3 + 76;
    v8 = *(_DWORD *)(v3 + 76);
    v7 = *(_DWORD *)(v9 + 4);
    v16 = 67109890;
    v17 = v7;
    v18 = 1024;
    v19 = v8;
    v20 = 1024;
    v21 = v4;
    v22 = 2080;
    v23 = qmi::asString();
    v10 = "#E setPowerSaveFilterMode for pdp %d ipFamily %d Error code = 0x%x (%s)";
    v11 = v5;
    v12 = 30;
  }
  else
  {
    if (!v6)
      return;
    v13 = *(unsigned __int8 *)(a1 + 48);
    v15 = *(_DWORD *)(v3 + 76);
    v14 = *(_DWORD *)(v3 + 80);
    v16 = 67109632;
    v17 = v13;
    v18 = 1024;
    v19 = v14;
    v20 = 1024;
    v21 = v15;
    v10 = "#I setPowerSaveFilterMode to %d for pdp %d ipFamily %d";
    v11 = v5;
    v12 = 20;
  }
  _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v16, v12);
}

void QMIDownLinkFilterCommandDriver::handlePdpStateChange(_QWORD *a1, int a2, char a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v7 = a1[1], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new();
  *(_QWORD *)v10 = a1;
  *(_DWORD *)(v10 + 8) = a2;
  *(_BYTE *)(v10 + 12) = a3;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[3];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = (_QWORD *)operator new();
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  v16 = 0;
  v17 = 0;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::execute_wrapped<QMIDownLinkFilterCommandDriver::handlePdpStateChange(subscriber::SimSlot,BOOL)::$_0>(QMIDownLinkFilterCommandDriver::handlePdpStateChange(subscriber::SimSlot,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDownLinkFilterCommandDriver::handlePdpStateChange(subscriber::SimSlot,BOOL)::$_0,dispatch_queue_s *::default_delete<QMIDownLinkFilterCommandDriver::handlePdpStateChange(subscriber::SimSlot,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v16);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v17);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void QMIDownLinkFilterCommandDriver::setFilterRules_sync(uint64_t a1, int a2, dispatch_object_t *a3)
{
  NSObject *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  NSObject *v11;
  int v12;
  int v13;
  NSObject *v14[2];
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  _OWORD v19[2];
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  void *v24;
  uint64_t v25;
  dispatch_group_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v14[0] = 0;
    QMIDownLinkFilterCommandDriver::setPowerSaveFilterMode_sync(a1, 0, v14);
    return;
  }
  v4 = *a3;
  if (*a3)
  {
    dispatch_retain(*a3);
    dispatch_group_enter(v4);
  }
  if (!*(_QWORD *)(a1 + 104))
  {
    v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    *(_WORD *)buf = 0;
    v8 = "#E fDFSClient not ready";
    v9 = v7;
    v10 = 2;
    goto LABEL_21;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    memset(v19, 0, sizeof(v19));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
    v14[1] = (a1 + 88);
    v15 = QMIServiceMsg::create();
    v16 = 25000;
    v17 = 0;
    v18 = 0;
    v5 = MEMORY[0x24BDAC760];
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v22 = 1174405120;
    v23 = ___ZN30QMIDownLinkFilterCommandDriver32removeAllPowerSaveFilterMsg_syncEN8dispatch13group_sessionE_block_invoke;
    v24 = &__block_descriptor_tmp_23_4;
    v25 = a1;
    v26 = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v4);
    }
    aBlock[0] = v5;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs25RemoveAllPowersaveFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_24D5D8920;
    aBlock[4] = buf;
    v6 = _Block_copy(aBlock);
    v18 = v6;
    if (v15)
    {
      qmi::Client::send();
      v6 = v18;
    }
    if (v6)
      _Block_release(v6);
    if (v26)
    {
      dispatch_group_leave(v26);
      if (v26)
        dispatch_release(v26);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
    goto LABEL_22;
  }
  v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_DWORD *)(a1 + 76);
    v12 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v12;
    LOWORD(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 2) = v13;
    v8 = "#I No active packet data on pdp %d ipFamily %d, skip removeAllPowerSaveFilter";
    v9 = v11;
    v10 = 14;
LABEL_21:
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
  }
LABEL_22:
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void sub_2169B158C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v5 = *(NSObject **)(v3 - 56);
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = *(NSObject **)(v3 - 56);
    if (v6)
      dispatch_release(v6);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
  _Unwind_Resume(a1);
}

void QMIDownLinkFilterCommandDriver::sendDFSAddPowerSaveFilterMsg_sync(uint64_t a1, uint64_t a2, NSObject **a3)
{
  const void **v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  NSObject *v13;
  int v14;
  int v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  size_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void **v40;
  char *v41;
  char *v42;
  char *v43;
  size_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  NSObject *v50;
  void *v51;
  _QWORD v52[5];
  dispatch_group_t group;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void *aBlock;
  void *__p[2];
  __int128 v60;
  NSObject *v61;
  uint8_t buf[8];
  uint64_t v63;
  void (*v64)(uint64_t, QMIServiceMsg *);
  void *v65;
  _QWORD *v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    if (*(_QWORD *)(a1 + 104))
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
      {
        *(_OWORD *)__p = 0u;
        v60 = 0u;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
        *(_QWORD *)buf = 0;
        v63 = 0;
        v64 = 0;
        std::vector<dfs::tlv::FilterRuleType>::__init_with_size[abi:ne180100]<dfs::tlv::FilterRuleType*,dfs::tlv::FilterRuleType*>(buf, *(const void **)a2, *(_QWORD *)(a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
        v6 = (const void **)__p[1];
        if (__p[1] != (void *)v60)
        {
          while (*((_BYTE *)*v6 + 8) != 16)
          {
            if (++v6 == (const void **)v60)
              goto LABEL_23;
          }
        }
        if (v6 == (const void **)v60)
        {
LABEL_23:
          v18 = operator new();
          v19 = v18;
          *(_BYTE *)(v18 + 8) = 16;
          *(_QWORD *)(v18 + 16) = 0;
          v17 = (_QWORD *)(v18 + 16);
          *(_QWORD *)v18 = &off_24D5D8968;
          *(_QWORD *)(v18 + 24) = 0;
          *(_QWORD *)(v18 + 32) = 0;
          v20 = v60;
          if ((unint64_t)v60 >= *((_QWORD *)&v60 + 1))
          {
            v22 = (uint64_t)(v60 - (unint64_t)__p[1]) >> 3;
            if ((unint64_t)(v22 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v23 = (uint64_t)(*((_QWORD *)&v60 + 1) - (unint64_t)__p[1]) >> 2;
            if (v23 <= v22 + 1)
              v23 = v22 + 1;
            if (*((_QWORD *)&v60 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v23;
            if (v24)
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v60 + 8, v24);
            else
              v25 = 0;
            v26 = (uint64_t *)&v25[8 * v22];
            v27 = &v25[8 * v24];
            *v26 = v19;
            v21 = v26 + 1;
            v29 = (char *)__p[1];
            v28 = (char *)v60;
            if ((void *)v60 != __p[1])
            {
              do
              {
                v30 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *--v26 = v30;
              }
              while (v28 != v29);
              v28 = (char *)__p[1];
            }
            __p[1] = v26;
            *(_QWORD *)&v60 = v21;
            *((_QWORD *)&v60 + 1) = v27;
            if (v28)
              operator delete(v28);
          }
          else
          {
            *(_QWORD *)v60 = v18;
            v21 = (_QWORD *)(v20 + 8);
          }
          *(_QWORD *)&v60 = v21;
        }
        else
        {
          if (!v16)
            __cxa_bad_cast();
          v17 = v16 + 16;
          if (v16 + 16 == (char *)buf)
            goto LABEL_59;
        }
        v31 = *(_BYTE **)buf;
        v32 = (_BYTE *)v63;
        v33 = v63 - *(_QWORD *)buf;
        v34 = 0x2E8BA2E8BA2E8BA3 * ((v63 - *(_QWORD *)buf) >> 4);
        v35 = v17[2];
        v36 = (char *)*v17;
        if (0x2E8BA2E8BA2E8BA3 * ((v35 - *v17) >> 4) >= v34)
        {
          v43 = (char *)v17[1];
          v40 = (void **)(v17 + 1);
          v42 = v43;
          v44 = v43 - v36;
          v45 = 0x2E8BA2E8BA2E8BA3 * ((v43 - v36) >> 4);
          if (v45 < v34)
          {
            v46 = *(_QWORD *)buf + 176 * v45;
            if (v42 != v36)
            {
              memmove(v36, *(const void **)buf, v44);
              v36 = (char *)*v40;
            }
            v33 = (size_t)&v32[-v46];
            if (v32 == (_BYTE *)v46)
              goto LABEL_58;
            v47 = v36;
            v48 = (const void *)v46;
            goto LABEL_57;
          }
        }
        else
        {
          if (v36)
          {
            v17[1] = v36;
            operator delete(v36);
            v35 = 0;
            *v17 = 0;
            v17[1] = 0;
            v17[2] = 0;
          }
          if (v34 > 0x1745D1745D1745DLL)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v37 = 0x2E8BA2E8BA2E8BA3 * (v35 >> 4);
          v38 = 2 * v37;
          if (2 * v37 <= v34)
            v38 = 0x2E8BA2E8BA2E8BA3 * ((v32 - v31) >> 4);
          if (v37 >= 0xBA2E8BA2E8BA2ELL)
            v39 = 0x1745D1745D1745DLL;
          else
            v39 = v38;
          std::vector<dfs::tlv::FilterRuleType>::__vallocate[abi:ne180100](v17, v39);
          v41 = (char *)v17[1];
          v40 = (void **)(v17 + 1);
          v36 = v41;
        }
        if (v32 == v31)
        {
LABEL_58:
          *v40 = &v36[v33];
LABEL_59:
          if (*(_QWORD *)buf)
          {
            v63 = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          v54 = a1 + 88;
          v55 = QMIServiceMsg::create();
          v56 = 25000;
          v57 = 0;
          aBlock = 0;
          v49 = MEMORY[0x24BDAC760];
          v52[0] = MEMORY[0x24BDAC760];
          v52[1] = 1174405120;
          v52[2] = ___ZN30QMIDownLinkFilterCommandDriver33sendDFSAddPowerSaveFilterMsg_syncERKN3dfs3tlv11FilterRulesEN8dispatch13group_sessionE_block_invoke;
          v52[3] = &__block_descriptor_tmp_24_7;
          v50 = *a3;
          v52[4] = a1;
          group = v50;
          if (v50)
          {
            dispatch_retain(v50);
            dispatch_group_enter(v50);
          }
          *(_QWORD *)buf = v49;
          v63 = 0x40000000;
          v64 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs19AddPowersaveFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
          v65 = &unk_24D5D8998;
          v66 = v52;
          v51 = _Block_copy(buf);
          aBlock = v51;
          if (v55)
          {
            qmi::Client::send();
            v51 = aBlock;
          }
          if (v51)
            _Block_release(v51);
          if (group)
          {
            dispatch_group_leave(group);
            if (group)
              dispatch_release(group);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
          return;
        }
        v47 = v36;
        v48 = v31;
LABEL_57:
        memmove(v47, v48, v33);
        goto LABEL_58;
      }
      v13 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        return;
      v15 = *(_DWORD *)(a1 + 76);
      v14 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v14;
      LOWORD(v63) = 1024;
      *(_DWORD *)((char *)&v63 + 2) = v15;
      v10 = "#I No active packet data on pdp %d ipFamily %d, skip AddPowerSaveFilter";
      v11 = v13;
      v12 = 14;
    }
    else
    {
      v9 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        return;
      *(_WORD *)buf = 0;
      v10 = "#E fDFSClient not ready";
      v11 = v9;
      v12 = 2;
    }
    _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    return;
  }
  v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I Empty filter rules", buf, 2u);
  }
  v8 = *a3;
  v61 = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v8);
  }
  QMIDownLinkFilterCommandDriver::setPowerSaveFilterMode_sync(a1, 1, &v61);
  if (v8)
  {
    dispatch_group_leave(v8);
    dispatch_release(v8);
  }
}

void sub_2169B1B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void ___ZN30QMIDownLinkFilterCommandDriver32removeAllPowerSaveFilterMsg_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  int v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  char *v16;
  char v17;
  char v18;
  unsigned int v19;
  int *v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  char *v38;
  char *v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  NSObject *v58;
  int v59;
  unsigned int v60;
  NSObject *v61;
  int v62;
  std::__shared_weak_count *v63;
  NSObject *v64;
  char v65;
  NSObject *v66;
  NSObject *v67;
  int v68;
  int v69;
  unsigned int v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  NSObject *v73;
  char v74;
  NSObject *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  NSObject *v81;
  NSObject *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t v85;
  void *__p;
  void *v87;
  uint64_t v88;
  uint8_t buf[8];
  char *v90;
  _QWORD v91[2];
  uint8_t v92[4];
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  unsigned int v97;
  _QWORD v98[3];

  v98[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(a2 + 4);
  v5 = *(NSObject **)(v3 + 40);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      v8 = *(_DWORD *)(v3 + 76);
      v7 = *(_DWORD *)(v3 + 80);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v7;
      LOWORD(v90) = 1024;
      *(_DWORD *)((char *)&v90 + 2) = v8;
      HIWORD(v90) = 1024;
      LODWORD(v91[0]) = v4;
      WORD2(v91[0]) = 2080;
      *(_QWORD *)((char *)v91 + 6) = qmi::asString();
      v9 = "#E removeAllPowerSaveFilter for pdp %d, ipFamily %d Error code = 0x%x (%s)";
      v10 = v5;
      v11 = 30;
LABEL_6:
      _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
    }
  }
  else if (v6)
  {
    v13 = *(_DWORD *)(v3 + 76);
    v12 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v12;
    LOWORD(v90) = 1024;
    *(_DWORD *)((char *)&v90 + 2) = v13;
    v9 = "#I removeAllPowerSaveFilter successful for pdp %d, ipFamily %d";
    v10 = v5;
    v11 = 14;
    goto LABEL_6;
  }
  v14 = *(NSObject **)(a1 + 40);
  if (v14)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 40));
    dispatch_group_enter(v14);
  }
  *(_QWORD *)buf = 0;
  v90 = 0;
  v91[0] = 0;
  v15 = *(_DWORD *)(v3 + 76);
  v75 = v14;
  v16 = (char *)operator new(0xB0uLL);
  v17 = 0;
  if (v15 == 2)
    v18 = 6;
  else
    v18 = 4;
  *v16 = v18;
  *(_OWORD *)(v16 + 1) = 0u;
  *(_OWORD *)(v16 + 17) = 0u;
  *(_OWORD *)(v16 + 33) = 0u;
  *(_OWORD *)(v16 + 49) = 0u;
  *(_OWORD *)(v16 + 65) = 0u;
  *((_QWORD *)v16 + 10) = 0;
  *((_DWORD *)v16 + 22) = 50;
  v19 = 1;
  *(_OWORD *)(v16 + 92) = 0u;
  *(_OWORD *)(v16 + 108) = 0u;
  *(_OWORD *)(v16 + 124) = 0u;
  *(_OWORD *)(v16 + 140) = 0u;
  *(_OWORD *)(v16 + 156) = 0u;
  *((_DWORD *)v16 + 43) = 0;
  v90 = v16 + 176;
  v91[0] = v16 + 176;
  *(_QWORD *)buf = v16;
  v98[0] = 0x800000004;
  v20 = (int *)v98;
  v21 = 1;
  v79 = 1;
  do
  {
    v22 = v17;
    __p = 0;
    v87 = 0;
    v88 = 0;
    std::vector<unsigned short>::vector(&__p, 50);
    v85 = 0;
    v23 = *(_DWORD *)(v3 + 76);
    v80 = v21;
    if (v23 - 1 >= 2)
    {
      v64 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v92 = 0;
        _os_log_impl(&dword_216897000, v64, OS_LOG_TYPE_DEFAULT, "#E invalid fIpFamily", v92, 2u);
      }
      v62 = 1;
      goto LABEL_84;
    }
    v24 = *v20;
    v83 = 0;
    v84 = 0;
    v25 = *(std::__shared_weak_count **)(v3 + 128);
    if (v25 && (v84 = std::__shared_weak_count::lock(v25), (v76 = v84) != 0))
    {
      v26 = *(_QWORD *)(v3 + 120);
      v83 = v26;
      if (v26)
      {
        v74 = v22;
        if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, uint64_t, unint64_t *))(*(_QWORD *)v26 + 72))(v26, *(unsigned int *)(v3 + 80), v24 | v23, __p, 50, &v85) & 1) != 0)
        {
          v27 = v85;
          v28 = v85 >> 1;
          v29 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v92 = 67109120;
            v93 = v28;
            _os_log_impl(&dword_216897000, v29, OS_LOG_TYPE_DEFAULT, "#I portListNumber = %d", v92, 8u);
          }
          if ((_DWORD)v28)
          {
            v30 = 0;
            v77 = (v27 >> 1);
            while (1)
            {
              v78 = v19;
              v31 = v3;
              v32 = *(_DWORD *)(v3 + 76) == 2 ? 6 : 4;
              v33 = *v20 == 4 ? 6 : 17;
              v34 = 2 * (*v20 == 4);
              v35 = *v20 == 4 ? *((_WORD *)__p + v30) : 0;
              v36 = 2 * (*v20 != 4);
              v37 = *v20 == 4 ? 0 : *((_WORD *)__p + v30);
              v38 = v90;
              if ((unint64_t)v90 >= v91[0])
              {
                v42 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v90[-*(_QWORD *)buf] >> 4);
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) > 0x1745D1745D1745DLL)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                if (0x5D1745D1745D1746 * ((uint64_t)(v91[0] - *(_QWORD *)buf) >> 4) > v43)
                  v43 = 0x5D1745D1745D1746 * ((uint64_t)(v91[0] - *(_QWORD *)buf) >> 4);
                if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v91[0] - *(_QWORD *)buf) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
                  v44 = 0x1745D1745D1745DLL;
                else
                  v44 = v43;
                if (v44)
                  v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<qos::tlv::QosFilterSpec>>((uint64_t)v91, v44);
                else
                  v45 = 0;
                v46 = &v45[176 * v42];
                *v46 = v32;
                *(_OWORD *)(v46 + 1) = 0u;
                *(_OWORD *)(v46 + 17) = 0u;
                *(_OWORD *)(v46 + 33) = 0u;
                *(_OWORD *)(v46 + 49) = 0u;
                *(_OWORD *)(v46 + 65) = 0u;
                *((_QWORD *)v46 + 10) = 0;
                *((_DWORD *)v46 + 22) = v33;
                *((_DWORD *)v46 + 23) = 0;
                *((_QWORD *)v46 + 12) = v34;
                *((_DWORD *)v46 + 26) = 0;
                *((_WORD *)v46 + 54) = v35;
                *((_WORD *)v46 + 55) = 0;
                *((_QWORD *)v46 + 14) = v36;
                *((_DWORD *)v46 + 30) = 0;
                *((_WORD *)v46 + 62) = v37;
                *(_OWORD *)(v46 + 126) = 0u;
                *(_OWORD *)(v46 + 142) = 0u;
                *(_OWORD *)(v46 + 158) = 0u;
                *((_WORD *)v46 + 87) = 0;
                v48 = *(char **)buf;
                v47 = v90;
                v49 = v46;
                if (v90 == *(char **)buf)
                {
                  v14 = v75;
                  v3 = v31;
                  v40 = v78;
                }
                else
                {
                  v14 = v75;
                  v3 = v31;
                  v40 = v78;
                  do
                  {
                    v50 = *((_OWORD *)v47 - 11);
                    v51 = *((_OWORD *)v47 - 9);
                    *((_OWORD *)v49 - 10) = *((_OWORD *)v47 - 10);
                    *((_OWORD *)v49 - 9) = v51;
                    *((_OWORD *)v49 - 11) = v50;
                    v52 = *((_OWORD *)v47 - 8);
                    v53 = *((_OWORD *)v47 - 7);
                    v54 = *((_OWORD *)v47 - 5);
                    *((_OWORD *)v49 - 6) = *((_OWORD *)v47 - 6);
                    *((_OWORD *)v49 - 5) = v54;
                    *((_OWORD *)v49 - 8) = v52;
                    *((_OWORD *)v49 - 7) = v53;
                    v55 = *((_OWORD *)v47 - 4);
                    v56 = *((_OWORD *)v47 - 3);
                    v57 = *((_OWORD *)v47 - 1);
                    *((_OWORD *)v49 - 2) = *((_OWORD *)v47 - 2);
                    *((_OWORD *)v49 - 1) = v57;
                    *((_OWORD *)v49 - 4) = v55;
                    *((_OWORD *)v49 - 3) = v56;
                    v49 -= 176;
                    v47 -= 176;
                  }
                  while (v47 != v48);
                  v47 = v48;
                }
                v41 = v79;
                v39 = v46 + 176;
                *(_QWORD *)buf = v49;
                v90 = v46 + 176;
                v91[0] = &v45[176 * v44];
                if (v47)
                  operator delete(v47);
              }
              else
              {
                *v90 = v32;
                *(_OWORD *)(v38 + 1) = 0u;
                *(_OWORD *)(v38 + 17) = 0u;
                *(_OWORD *)(v38 + 33) = 0u;
                *(_OWORD *)(v38 + 49) = 0u;
                *(_OWORD *)(v38 + 65) = 0u;
                *((_QWORD *)v38 + 10) = 0;
                *((_DWORD *)v38 + 22) = v33;
                *((_DWORD *)v38 + 23) = 0;
                *((_QWORD *)v38 + 12) = v34;
                *((_DWORD *)v38 + 26) = 0;
                *((_WORD *)v38 + 54) = v35;
                *((_WORD *)v38 + 55) = 0;
                *((_QWORD *)v38 + 14) = v36;
                *((_DWORD *)v38 + 30) = 0;
                *((_WORD *)v38 + 62) = v37;
                v39 = v38 + 176;
                *(_OWORD *)(v38 + 126) = 0u;
                *(_OWORD *)(v38 + 142) = 0u;
                *(_OWORD *)(v38 + 158) = 0u;
                *((_WORD *)v38 + 87) = 0;
                v3 = v31;
                v40 = v78;
                v41 = v79;
              }
              v90 = v39;
              v58 = *(NSObject **)(v3 + 40);
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
              {
                v59 = *((unsigned __int16 *)__p + v30);
                *(_DWORD *)v92 = 67109632;
                v93 = v41;
                v94 = 1024;
                v95 = v59;
                v96 = 1024;
                v97 = v40;
                _os_log_impl(&dword_216897000, v58, OS_LOG_TYPE_DEFAULT, "#I Downlink IP filter Rule #%d port=%d, totalNum %d", v92, 0x14u);
              }
              v60 = v41 + 1;
              v19 = v40 + 1;
              if (v19 >= 0x32)
                break;
              if (v60 >= 0x19)
              {
                v61 = *(NSObject **)(v3 + 40);
                if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)v92 = 0;
                  _os_log_impl(&dword_216897000, v61, OS_LOG_TYPE_DEFAULT, "#I Per Msg filter limit reached. send out one msg", v92, 2u);
                }
                v81 = v14;
                if (v14)
                {
                  dispatch_retain(v14);
                  dispatch_group_enter(v14);
                }
                QMIDownLinkFilterCommandDriver::sendDFSAddPowerSaveFilterMsg_sync(v3, (uint64_t)buf, &v81);
                if (v14)
                {
                  dispatch_group_leave(v14);
                  dispatch_release(v14);
                }
                v60 = 0;
                v90 = *(char **)buf;
              }
              v79 = v60;
              if (++v30 == v77)
              {
                v62 = 0;
                v22 = v74;
                v63 = v76;
                if (v76)
                  goto LABEL_80;
                goto LABEL_84;
              }
            }
            v79 = v60;
            v73 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v92 = 0;
              _os_log_impl(&dword_216897000, v73, OS_LOG_TYPE_DEFAULT, "#I Total Max filter limit reached. Bail out", v92, 2u);
            }
            v82 = v14;
            v63 = v76;
            if (v14)
            {
              dispatch_retain(v14);
              dispatch_group_enter(v14);
            }
            QMIDownLinkFilterCommandDriver::sendDFSAddPowerSaveFilterMsg_sync(v3, (uint64_t)buf, &v82);
            v22 = v74;
            if (v14)
            {
              dispatch_group_leave(v14);
              dispatch_release(v14);
            }
            v62 = 1;
            if (v76)
              goto LABEL_80;
            goto LABEL_84;
          }
          v62 = 0;
        }
        else
        {
          v67 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
          {
            v69 = *(_DWORD *)(v3 + 76);
            v68 = *(_DWORD *)(v3 + 80);
            v70 = *v20;
            *(_DWORD *)v92 = 67109632;
            v93 = v68;
            v94 = 1024;
            v95 = v69;
            v96 = 1024;
            v97 = v70;
            _os_log_impl(&dword_216897000, v67, OS_LOG_TYPE_DEFAULT, "#I getOpenPortsExt failed on pdpId %d, fIpFamily %d protocol %d", v92, 0x14u);
          }
          v62 = 1;
        }
        v22 = v74;
        v63 = v76;
LABEL_80:
        p_shared_owners = (unint64_t *)&v63->__shared_owners_;
        do
          v72 = __ldaxr(p_shared_owners);
        while (__stlxr(v72 - 1, p_shared_owners));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
        goto LABEL_84;
      }
      v65 = v22;
      v63 = v84;
    }
    else
    {
      v65 = v22;
      v63 = 0;
    }
    v66 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v92 = 0;
      _os_log_impl(&dword_216897000, v66, OS_LOG_TYPE_DEFAULT, "#I fObserver not ready", v92, 2u);
    }
    v62 = 1;
    v22 = v65;
    if (v63)
      goto LABEL_80;
LABEL_84:
    if (__p)
    {
      v87 = __p;
      operator delete(__p);
    }
    if (v62)
      goto LABEL_101;
    v20 = (int *)v98 + v80;
    v17 = 1;
    v21 = 2;
  }
  while ((v22 & 1) == 0);
  __p = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  QMIDownLinkFilterCommandDriver::sendDFSAddPowerSaveFilterMsg_sync(v3, (uint64_t)buf, (NSObject **)&__p);
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
LABEL_101:
  if (*(_QWORD *)buf)
  {
    v90 = *(char **)buf;
    operator delete(*(void **)buf);
  }
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
}

void sub_2169B24E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  void *v32;

  if (v29)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  v32 = *(void **)(v30 - 160);
  if (v32)
  {
    *(_QWORD *)(v30 - 152) = v32;
    operator delete(v32);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(a1);
}

void ___ZN30QMIDownLinkFilterCommandDriver33sendDFSAddPowerSaveFilterMsg_syncERKN3dfs3tlv11FilterRulesEN8dispatch13group_sessionE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  int v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  int v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(a2 + 4);
  v5 = *(NSObject **)(v3 + 40);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6)
      goto LABEL_7;
    v8 = *(_DWORD *)(v3 + 76);
    v7 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)buf = 67109890;
    v17 = v7;
    v18 = 1024;
    v19 = v8;
    v20 = 1024;
    v21 = v4;
    v22 = 2080;
    v23 = qmi::asString();
    v9 = "#E AddPowersaveFilters for pdp %d, ipFamily %d Error code = 0x%x (%s)";
    v10 = v5;
    v11 = 30;
  }
  else
  {
    if (!v6)
      goto LABEL_7;
    v13 = *(_DWORD *)(v3 + 76);
    v12 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)buf = 67109376;
    v17 = v12;
    v18 = 1024;
    v19 = v13;
    v9 = "#I AddPowersaveFilters successful for pdp %d, ipFamily %d";
    v10 = v5;
    v11 = 14;
  }
  _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
LABEL_7:
  v14 = *(NSObject **)(a1 + 40);
  v15 = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  QMIDownLinkFilterCommandDriver::setPowerSaveFilterMode_sync(v3, 1, &v15);
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
}

void sub_2169B26F4(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIDownLinkFilterCommandDriver::getLLFilters_sync@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD *)(this + 144);
  v3 = *(_QWORD *)(this + 152);
  if (v2 != v3)
  {
    v5 = 0;
    v6 = (unint64_t *)(a2 + 2);
    do
    {
      if (*(_DWORD *)(v2 + 164) == 3)
      {
        if (v5 >= *v6)
        {
          v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a2) >> 5);
          v8 = v7 + 1;
          if (v7 + 1 > 0x199999999999999)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((uint64_t)(*v6 - *a2) >> 5) > v8)
            v8 = 0x999999999999999ALL * ((uint64_t)(*v6 - *a2) >> 5);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v6 - *a2) >> 5) >= 0xCCCCCCCCCCCCCCLL)
            v9 = 0x199999999999999;
          else
            v9 = v8;
          v15 = v6;
          if (v9)
            v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataIPFilter>>((uint64_t)v6, v9);
          else
            v10 = 0;
          v11 = v10;
          v12 = &v10[160 * v7];
          v13 = (uint64_t)v12;
          v14 = &v10[160 * v9];
          std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter const&,DataIPFilter*>((uint64_t)v12, v2);
          v13 += 160;
          std::vector<DataIPFilter>::__swap_out_circular_buffer(a2, &v11);
          v5 = a2[1];
          this = std::__split_buffer<DataIPFilter>::~__split_buffer((uint64_t)&v11);
        }
        else
        {
          this = std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter const&,DataIPFilter*>(v5, v2);
          v5 += 160;
          a2[1] = v5;
        }
        a2[1] = v5;
      }
      v2 += 200;
    }
    while (v2 != v3);
  }
  return this;
}

void sub_2169B2870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t QMIDownLinkFilterCommandDriver::addLLFilter_sync(int64x2_t *a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  unsigned __int16 v16;
  int v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t (***v24)();
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int16 *v30;
  _WORD *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  int v46;
  int v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  NSObject *v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unsigned __int16 v58;
  _QWORD v59[5];
  __int128 v60;
  __int128 v61;
  std::string v62;
  char v63;
  char v64;
  std::string v65;
  char v66;
  char v67;
  _QWORD v68[2];
  unsigned __int16 v69;
  _OWORD v70[2];
  __int128 v71;
  __int128 v72;
  void *v73[2];
  __int128 v74;
  unsigned int v75[4];
  void *__p[2];
  __int128 v77;
  unsigned int v78[4];
  __int128 v79;
  __int128 v80;
  _BYTE v81[20];
  uint64_t v82;
  void *aBlock;
  _BYTE v84[19];
  uint8_t buf[16];
  __int128 v86;
  void *v87[2];
  __int128 v88;
  __int128 v89;
  void *v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t (**v96)();
  __int128 v97;
  uint64_t (***v98)();
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  *(_OWORD *)v78 = 0u;
  *(_OWORD *)v75 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v73 = 0u;
  v74 = 0u;
  v6 = a2[1];
  v71 = *a2;
  v72 = v6;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)v73, (uint64_t)(a2 + 2));
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)&__p[1], (uint64_t)a2 + 88);
  *(_QWORD *)&v80 = *((_QWORD *)a2 + 18);
  *(_QWORD *)((char *)&v80 + 6) = *(_QWORD *)((char *)a2 + 150);
  if (DataIPFilter::empty((DataIPFilter *)&v71))
  {
    v7 = a1[2].i64[1];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#E add ll filter: empty", buf, 2u);
    }
    buf[0] = 0;
    v8 = *(_QWORD *)(a3 + 24);
    if (v8)
      goto LABEL_15;
    goto LABEL_181;
  }
  if (!HIDWORD(v72))
  {
    v10 = a1[2].i64[1];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#E add ll filter: empty IP protocol", buf, 2u);
    }
    buf[0] = 0;
    v8 = *(_QWORD *)(a3 + 24);
    if (v8)
    {
LABEL_15:
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v8 + 48))(v8, buf);
      goto LABEL_16;
    }
LABEL_181:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (!a1[6].i64[1] || !(*(unsigned int (**)(int64x2_t *))(a1->i64[0] + 48))(a1))
    goto LABEL_35;
  if (HIDWORD(v72) == 4)
  {
    v9 = 1;
  }
  else
  {
    if (HIDWORD(v72) != 41)
      goto LABEL_35;
    v9 = 2;
  }
  if (a1[4].i32[3] != v9)
  {
LABEL_35:
    v14 = a1[2].i64[1];
    v11 = 0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v14, OS_LOG_TYPE_DEFAULT, "#I add ll filter: assume it belongs to other client", buf, 2u);
      v11 = 0;
    }
    goto LABEL_17;
  }
  if (*((_QWORD *)&v71 + 1) && BYTE1(v72) && (_BYTE)v72)
  {
    v13 = a1[2].i64[1];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I add ll filter: IMS filter for dedicated bearer, ignoring", buf, 2u);
    }
    buf[0] = 1;
    v8 = *(_QWORD *)(a3 + 24);
    if (v8)
      goto LABEL_15;
    goto LABEL_181;
  }
  v15 = a1[9].i64[0];
  v16 = a1[10].i16[4] + 1;
  a1[10].i16[4] = v16;
  v58 = v16;
  v17 = v16;
  LODWORD(v71) = v16;
  v18 = a1[9].i64[1];
  if (v15 == v18)
    goto LABEL_48;
  v19 = 0;
  do
  {
    while (1)
    {
      if (!DataIPFilter::equivalent((DataIPFilter *)v15, (const DataIPFilter *)&v71, 0))
        goto LABEL_42;
      v20 = *(_DWORD *)(v15 + 164);
      if (v20 > 5)
        break;
      if (((1 << v20) & 0x27) == 0)
      {
        v23 = a1[2].i64[1];
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_216897000, v23, OS_LOG_TYPE_DEFAULT, "#I add ll filter: we already have the filter", buf, 2u);
        }
        buf[0] = 1;
        v8 = *(_QWORD *)(a3 + 24);
        if (!v8)
          std::__throw_bad_function_call[abi:ne180100]();
        goto LABEL_15;
      }
LABEL_45:
      *(_QWORD *)(v15 + 160) = 0x400000000;
      QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion((QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)v15, 0);
      std::function<void ()(BOOL)>::operator=((_QWORD *)(v15 + 168), a3);
      *(_DWORD *)v15 = v17;
      v15 += 200;
      v19 = 1;
      if (v15 == v18)
        goto LABEL_68;
    }
    if (v20 == 255)
      goto LABEL_45;
LABEL_42:
    v15 += 200;
  }
  while (v15 != v18);
  if ((v19 & 1) == 0)
  {
LABEL_48:
    v95 = 0x400000000;
    v97 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    *(_OWORD *)v90 = 0u;
    *(_OWORD *)v87 = 0u;
    v88 = 0u;
    *(_OWORD *)buf = 0u;
    v86 = 0u;
    v96 = &off_24D5D8560;
    v98 = &v96;
    std::function<void ()(BOOL)>::operator=(&v96, a3);
    *(_OWORD *)buf = v71;
    v86 = v72;
    std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)v87, (std::string *)v73);
    std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)&v90[1], (std::string *)&__p[1]);
    *(_QWORD *)&v94 = v80;
    *(_QWORD *)((char *)&v94 + 6) = *(_QWORD *)((char *)&v80 + 6);
    v21 = a1[9].u64[1];
    if (v21 >= a1[10].i64[0])
    {
      v22 = std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__push_back_slow_path<QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&>(a1 + 9, (uint64_t)buf);
    }
    else
    {
      std::construct_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>(a1[9].i64[1], (uint64_t)buf);
      v22 = v21 + 200;
      a1[9].i64[1] = v21 + 200;
    }
    a1[9].i64[1] = v22;
    v24 = v98;
    if (v98 == &v96)
    {
      v25 = 4;
      v24 = &v96;
LABEL_59:
      (*v24)[v25]();
    }
    else if (v98)
    {
      v25 = 5;
      goto LABEL_59;
    }
    if (BYTE8(v93) && (_BYTE)v92 && SHIBYTE(v91) < 0)
      operator delete(v90[1]);
    if (LOBYTE(v90[0]) && BYTE8(v88) && SBYTE7(v88) < 0)
      operator delete(v87[0]);
  }
LABEL_68:
  memset(v70, 0, sizeof(v70));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v70);
  v26 = qmi::MutableMessageBase::getTLV<dfs::tlv::LLFilterIdsList>(v70);
  v27 = v26;
  v28 = (uint64_t)(v26 + 16);
  v29 = *((_QWORD *)v26 + 2);
  v30 = (unsigned __int16 *)*((_QWORD *)v26 + 1);
  if ((unint64_t)v30 >= v29)
  {
    v32 = *(unsigned __int16 **)v26;
    v33 = (uint64_t)v30 - *(_QWORD *)v27;
    if (v33 <= -3)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v34 = v33 >> 1;
    v35 = v29 - (_QWORD)v32;
    if (v35 <= (v33 >> 1) + 1)
      v36 = v34 + 1;
    else
      v36 = v35;
    if (v35 >= 0x7FFFFFFFFFFFFFFELL)
      v37 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v37 = v36;
    if (v37)
    {
      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v28, v37);
      v32 = *(unsigned __int16 **)v27;
      v30 = (unsigned __int16 *)*((_QWORD *)v27 + 1);
    }
    else
    {
      v38 = 0;
    }
    v39 = &v38[2 * v34];
    v40 = &v38[2 * v37];
    *(_WORD *)v39 = v58;
    v31 = v39 + 2;
    while (v30 != v32)
    {
      v41 = *--v30;
      *((_WORD *)v39 - 1) = v41;
      v39 -= 2;
    }
    *(_QWORD *)v27 = v39;
    *((_QWORD *)v27 + 1) = v31;
    *((_QWORD *)v27 + 2) = v40;
    if (v32)
      operator delete(v32);
  }
  else
  {
    *v30 = v58;
    v31 = v30 + 1;
  }
  *((_QWORD *)v27 + 1) = v31;
  if (DWORD2(v72) != 6)
  {
    if (DWORD2(v72) == 17)
    {
      if (LOBYTE(__p[0]) && LOBYTE(v75[1]))
      {
        if (LOBYTE(v75[2]))
          v42 = HIWORD(v75[1]);
        else
          v42 = 1;
        *(_WORD *)buf = v58;
        *(_WORD *)&buf[2] = HIWORD(v75[0]);
        *(_WORD *)&buf[4] = v42;
        qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_1>(v70, (int *)buf);
      }
      if (BYTE8(v79) && LOBYTE(v78[3]))
      {
        if ((_BYTE)v79)
          v43 = HIWORD(v78[3]);
        else
          v43 = 1;
        *(_WORD *)buf = v58;
        *(_WORD *)&buf[2] = HIWORD(v78[2]);
        *(_WORD *)&buf[4] = v43;
        qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_2>(v70, (int *)buf);
      }
      goto LABEL_111;
    }
    v49 = a1[2].i64[1];
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v49, OS_LOG_TYPE_DEFAULT, "#E add ll filter: invalid protocol", buf, 2u);
    }
    buf[0] = 0;
    v50 = *(_QWORD *)(a3 + 24);
    if (v50)
    {
LABEL_121:
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v50 + 48))(v50, buf);
      goto LABEL_180;
    }
LABEL_182:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (LOBYTE(__p[0]) && LOBYTE(v75[1]))
  {
    if (LOBYTE(v75[2]))
      v44 = HIWORD(v75[1]);
    else
      v44 = 1;
    *(_WORD *)buf = v58;
    *(_WORD *)&buf[2] = HIWORD(v75[0]);
    *(_WORD *)&buf[4] = v44;
    qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_3>(v70, (int *)buf);
  }
  if (BYTE8(v79) && LOBYTE(v78[3]))
  {
    if ((_BYTE)v79)
      v45 = HIWORD(v78[3]);
    else
      v45 = 1;
    *(_WORD *)buf = v58;
    *(_WORD *)&buf[2] = HIWORD(v78[2]);
    *(_WORD *)&buf[4] = v45;
    qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_4>(v70, (int *)buf);
  }
LABEL_111:
  if (HIDWORD(v72) == 41)
  {
    if (LOBYTE(__p[0]) && BYTE8(v74))
    {
      memset(&v81[2], 0, 18);
      *(_WORD *)v81 = v58;
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)&v86 = 0;
      MEMORY[0x2199FD8E8](buf, v73);
      v81[18] = 0x80;
      if (!LOBYTE(__p[0]))
        std::__throw_bad_optional_access[abi:ne180100]();
      if (BYTE1(v75[0]))
        v81[18] = v75[0];
      CSIPacketAddress::toIPv6((CSIPacketAddress *)buf, &v81[2]);
      *(_OWORD *)v84 = *(_OWORD *)v81;
      *(_DWORD *)&v84[15] = *(_DWORD *)&v81[15];
      qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_8>(v70, (__int128 *)v84);
    }
    if (BYTE8(v79) && LOBYTE(v78[0]))
    {
      memset(&v81[2], 0, 18);
      *(_WORD *)v81 = v58;
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)&v86 = 0;
      MEMORY[0x2199FD8E8](buf, &__p[1]);
      v81[18] = 0x80;
      if (!BYTE8(v79))
        std::__throw_bad_optional_access[abi:ne180100]();
      if (BYTE1(v78[2]))
        v81[18] = v78[2];
      CSIPacketAddress::toIPv6((CSIPacketAddress *)buf, &v81[2]);
      *(_OWORD *)v84 = *(_OWORD *)v81;
      *(_DWORD *)&v84[15] = *(_DWORD *)&v81[15];
      qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_9>(v70, (__int128 *)v84);
    }
    if (BYTE1(v80))
    {
      DataIPFilter::DataIPFilter((DataIPFilter *)buf, (const DataIPFilter *)&v71);
      LOWORD(v95) = v58;
      qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_10>(v70, (uint64_t)buf);
      if (BYTE8(v93) && (_BYTE)v92 && SHIBYTE(v91) < 0)
        operator delete(v90[1]);
      if (LOBYTE(v90[0]) && BYTE8(v88) && SBYTE7(v88) < 0)
        operator delete(v87[0]);
    }
    if (BYTE8(v80))
    {
      DataIPFilter::DataIPFilter((DataIPFilter *)buf, (const DataIPFilter *)&v71);
      LOWORD(v95) = v58;
      qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_11>(v70, (uint64_t)buf);
LABEL_160:
      if (BYTE8(v93) && (_BYTE)v92 && SHIBYTE(v91) < 0)
        operator delete(v90[1]);
      if (LOBYTE(v90[0]) && BYTE8(v88) && SBYTE7(v88) < 0)
        operator delete(v87[0]);
    }
  }
  else
  {
    if (HIDWORD(v72) != 4)
    {
      v51 = a1[2].i64[1];
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v51, OS_LOG_TYPE_DEFAULT, "#E add ll filter: invalid IP protocol", buf, 2u);
      }
      buf[0] = 0;
      v50 = *(_QWORD *)(a3 + 24);
      if (v50)
        goto LABEL_121;
      goto LABEL_182;
    }
    if (LOBYTE(__p[0]) && BYTE8(v74))
    {
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)&v86 = 0;
      MEMORY[0x2199FD8E8](buf, v73);
      v46 = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)buf);
      if (!LOBYTE(__p[0]))
        std::__throw_bad_optional_access[abi:ne180100]();
      v47 = v46;
      if (BYTE1(v75[0]))
      {
        CSIPacketAddress::applyMaskPrefix((CSIPacketAddress *)buf);
        CSIPacketAddress::ipv4PrefixLenToMaskAddr((CSIPacketAddress *)buf);
        v48 = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)v81);
      }
      else
      {
        v48 = -1;
      }
      *(_DWORD *)v81 = v58;
      *(_DWORD *)&v81[4] = v47;
      *(_DWORD *)&v81[8] = v48;
      qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_5>(v70, (uint64_t *)v81);
    }
    if (BYTE8(v79) && LOBYTE(v78[0]))
    {
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)&v86 = 0;
      MEMORY[0x2199FD8E8](buf, &__p[1]);
      v52 = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)buf);
      if (!BYTE8(v79))
        std::__throw_bad_optional_access[abi:ne180100]();
      v53 = v52;
      if (BYTE1(v78[2]))
      {
        CSIPacketAddress::applyMaskPrefix((CSIPacketAddress *)buf);
        CSIPacketAddress::ipv4PrefixLenToMaskAddr((CSIPacketAddress *)buf);
        v54 = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)v81);
      }
      else
      {
        v54 = -1;
      }
      *(_DWORD *)v81 = v58;
      *(_DWORD *)&v81[4] = v53;
      *(_DWORD *)&v81[8] = v54;
      qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_6>(v70, (uint64_t *)v81);
    }
    if (BYTE1(v80))
    {
      DataIPFilter::DataIPFilter((DataIPFilter *)buf, (const DataIPFilter *)&v71);
      LOWORD(v95) = v58;
      qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_7>(v70, (uint64_t)buf);
      goto LABEL_160;
    }
  }
  *(_QWORD *)v81 = (char *)a1 + 88;
  v55 = QMIServiceMsg::create();
  v59[1] = 1174405120;
  v60 = v71;
  *(_QWORD *)&v81[8] = v55;
  *(_DWORD *)&v81[16] = 25000;
  v56 = MEMORY[0x24BDAC760];
  v82 = 0;
  aBlock = 0;
  v59[0] = MEMORY[0x24BDAC760];
  v59[2] = ___ZN30QMIDownLinkFilterCommandDriver16addLLFilter_syncERK12DataIPFilterNSt3__18functionIFvbEEE_block_invoke;
  v59[3] = &__block_descriptor_tmp_25_4;
  v59[4] = a1;
  v61 = v72;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v62, (uint64_t)v73);
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v65, (uint64_t)&__p[1]);
  v68[0] = v80;
  *(_QWORD *)((char *)v68 + 6) = *(_QWORD *)((char *)&v80 + 6);
  v69 = v58;
  *(_QWORD *)buf = v56;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&v86 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs12AddLLFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v86 + 1) = &unk_24D5D8D80;
  v87[0] = v59;
  v57 = _Block_copy(buf);
  aBlock = v57;
  if (*(_QWORD *)&v81[8])
  {
    qmi::Client::send();
    v57 = aBlock;
  }
  if (v57)
    _Block_release(v57);
  if (v67 && v66 && SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (v64 && v63 && SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
LABEL_180:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v70);
LABEL_16:
  v11 = 1;
LABEL_17:
  if (BYTE8(v79) && LOBYTE(v78[0]) && SHIBYTE(v77) < 0)
    operator delete(__p[1]);
  if (LOBYTE(__p[0]) && BYTE8(v74) && SBYTE7(v74) < 0)
    operator delete(v73[0]);
  return v11;
}

void sub_2169B34EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,char a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  char a64;
  BOOL v65;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a37);
  if (a64)
    v65 = a61 == 0;
  else
    v65 = 1;
  if (!v65 && a60 < 0)
    operator delete(__p);
  if (a54 && a51 && a50 < 0)
    operator delete(a45);
  _Unwind_Resume(a1);
}

void DataIPFilter::DataIPFilter(DataIPFilter *this, const DataIPFilter *a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v4;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 32), (uint64_t)a2 + 32);
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 88), (uint64_t)a2 + 88);
  v5 = *((_QWORD *)a2 + 18);
  *(_QWORD *)((char *)this + 150) = *(_QWORD *)((char *)a2 + 150);
  *((_QWORD *)this + 18) = v5;
}

void sub_2169B36F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL DataIPFilter::empty(DataIPFilter *this)
{
  _BOOL8 result;
  uint64_t v2;
  uint64_t v3;

  result = 0;
  if (!*((_DWORD *)this + 6) && !*((_DWORD *)this + 7) && !*((_BYTE *)this + 145) && !*((_BYTE *)this + 152))
  {
    if (!*((_BYTE *)this + 80)
      || (!*((_BYTE *)this + 56)
       || (*((char *)this + 55) < 0 ? (v2 = *((_QWORD *)this + 5)) : (v2 = *((unsigned __int8 *)this + 55)), !v2))
      && (!*((_BYTE *)this + 68) || !*((_WORD *)this + 33)))
    {
      if (!*((_BYTE *)this + 136))
        return 1;
      if (!*((_BYTE *)this + 112)
        || (*((char *)this + 111) < 0 ? (v3 = *((_QWORD *)this + 12)) : (v3 = *((unsigned __int8 *)this + 111)), !v3))
      {
        if (!*((_BYTE *)this + 124) || !*((_WORD *)this + 61))
          return 1;
      }
    }
  }
  return result;
}

BOOL DataIPFilter::equivalent(DataIPFilter *this, const DataIPFilter *a2, int a3)
{
  _BOOL8 result;
  int v7;
  int v8;

  if (*((_DWORD *)this + 6) != *((_DWORD *)a2 + 6) || *((_DWORD *)this + 7) != *((_DWORD *)a2 + 7))
    return 0;
  if (*((_BYTE *)this + 80))
  {
    if (!*((_BYTE *)a2 + 80) || !DataIPFilterEndpoint::operator==((uint64_t)this + 32, (uint64_t)a2 + 32))
      return 0;
  }
  else if (*((_BYTE *)a2 + 80))
  {
    return 0;
  }
  if (*((_BYTE *)this + 136))
  {
    if (!*((_BYTE *)a2 + 136) || !DataIPFilterEndpoint::operator==((uint64_t)this + 88, (uint64_t)a2 + 88))
      return 0;
  }
  else if (*((_BYTE *)a2 + 136))
  {
    return 0;
  }
  if (*((_BYTE *)this + 145))
  {
    if (!*((_BYTE *)a2 + 145) || *((unsigned __int8 *)this + 144) != *((unsigned __int8 *)a2 + 144))
      return 0;
  }
  else if (*((_BYTE *)a2 + 145))
  {
    return 0;
  }
  if (*((_BYTE *)this + 147))
  {
    if (!*((_BYTE *)a2 + 147) || *((unsigned __int8 *)this + 146) != *((unsigned __int8 *)a2 + 146))
      return 0;
  }
  else if (*((_BYTE *)a2 + 147))
  {
    return 0;
  }
  result = *((_BYTE *)a2 + 152) == 0;
  if (*((_BYTE *)this + 152))
  {
    if (!*((_BYTE *)a2 + 152))
      return 0;
    v7 = *((_DWORD *)this + 37);
    v8 = *((_DWORD *)a2 + 37);
    result = v7 == v8;
    if (v7 != v8 || (a3 & 1) == 0)
      return result;
    goto LABEL_30;
  }
  if (!*((_BYTE *)a2 + 152) && a3)
  {
LABEL_30:
    if (*((_BYTE *)this + 157))
    {
      if (*((_BYTE *)a2 + 157) && *((unsigned __int8 *)this + 156) == *((unsigned __int8 *)a2 + 156))
        return 1;
    }
    else if (!*((_BYTE *)a2 + 157))
    {
      return 1;
    }
    return 0;
  }
  return result;
}

_QWORD *QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(QMIDownLinkFilterCommandDriver::DataIPFilterInfo *this, char a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v6[0]) = a2;
  v3 = *((_QWORD *)this + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 48))(v3, v6);
  v6[0] = &off_24D5D84E0;
  v7 = v6;
  std::__function::__value_func<void ()(BOOL)>::swap[abi:ne180100](v6, (_QWORD *)this + 21);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

_QWORD *std::function<void ()(BOOL)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(BOOL)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void QMIDownLinkFilterCommandDriver::DataIPFilterInfo::~DataIPFilterInfo(QMIDownLinkFilterCommandDriver::DataIPFilterInfo *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)this + 168;
  v3 = (char *)*((_QWORD *)this + 24);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 88);
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 32);
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_1>(_QWORD *a1, int *a2)
{
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  char **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  char *v36;
  int v37;
  __int16 v38;

  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 23)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = 23;
    *(_QWORD *)v9 = &off_24D5D8A30;
    *(_QWORD *)(v9 + 16) = 0;
    v8 = (char **)(v9 + 16);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = (char **)(v7 + 16);
  }
  v23 = (unint64_t)v8[2];
  v24 = (unint64_t)v8[1];
  if (v24 >= v23)
  {
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)*v8) >> 1);
    v28 = v27 + 1;
    if (v27 + 1 > 0x2AAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)*v8) >> 1);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x1555555555555555)
      v30 = 0x2AAAAAAAAAAAAAAALL;
    else
      v30 = v28;
    if (v30)
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(v8 + 2), v30);
    else
      v31 = 0;
    v32 = &v31[6 * v27];
    v33 = &v31[6 * v30];
    v34 = *a2;
    *((_WORD *)v32 + 2) = *((_WORD *)a2 + 2);
    *(_DWORD *)v32 = v34;
    v26 = v32 + 6;
    v36 = *v8;
    v35 = v8[1];
    if (v35 != *v8)
    {
      do
      {
        v37 = *(_DWORD *)(v35 - 6);
        v35 -= 6;
        v38 = *((_WORD *)v35 + 2);
        *(_DWORD *)(v32 - 6) = v37;
        v32 -= 6;
        *((_WORD *)v32 + 2) = v38;
      }
      while (v35 != v36);
      v35 = *v8;
    }
    *v8 = v32;
    v8[1] = v26;
    v8[2] = v33;
    if (v35)
      operator delete(v35);
  }
  else
  {
    v25 = *a2;
    *(_WORD *)(v24 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)v24 = v25;
    v26 = (char *)(v24 + 6);
  }
  v8[1] = v26;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_2>(_QWORD *a1, int *a2)
{
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  char **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  char *v36;
  int v37;
  __int16 v38;

  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 24)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = 24;
    *(_QWORD *)v9 = &off_24D5D8A80;
    *(_QWORD *)(v9 + 16) = 0;
    v8 = (char **)(v9 + 16);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = (char **)(v7 + 16);
  }
  v23 = (unint64_t)v8[2];
  v24 = (unint64_t)v8[1];
  if (v24 >= v23)
  {
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)*v8) >> 1);
    v28 = v27 + 1;
    if (v27 + 1 > 0x2AAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)*v8) >> 1);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x1555555555555555)
      v30 = 0x2AAAAAAAAAAAAAAALL;
    else
      v30 = v28;
    if (v30)
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(v8 + 2), v30);
    else
      v31 = 0;
    v32 = &v31[6 * v27];
    v33 = &v31[6 * v30];
    v34 = *a2;
    *((_WORD *)v32 + 2) = *((_WORD *)a2 + 2);
    *(_DWORD *)v32 = v34;
    v26 = v32 + 6;
    v36 = *v8;
    v35 = v8[1];
    if (v35 != *v8)
    {
      do
      {
        v37 = *(_DWORD *)(v35 - 6);
        v35 -= 6;
        v38 = *((_WORD *)v35 + 2);
        *(_DWORD *)(v32 - 6) = v37;
        v32 -= 6;
        *((_WORD *)v32 + 2) = v38;
      }
      while (v35 != v36);
      v35 = *v8;
    }
    *v8 = v32;
    v8[1] = v26;
    v8[2] = v33;
    if (v35)
      operator delete(v35);
  }
  else
  {
    v25 = *a2;
    *(_WORD *)(v24 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)v24 = v25;
    v26 = (char *)(v24 + 6);
  }
  v8[1] = v26;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_3>(_QWORD *a1, int *a2)
{
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  char **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  char *v36;
  int v37;
  __int16 v38;

  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 25)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = 25;
    *(_QWORD *)v9 = &off_24D5D8AD0;
    *(_QWORD *)(v9 + 16) = 0;
    v8 = (char **)(v9 + 16);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = (char **)(v7 + 16);
  }
  v23 = (unint64_t)v8[2];
  v24 = (unint64_t)v8[1];
  if (v24 >= v23)
  {
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)*v8) >> 1);
    v28 = v27 + 1;
    if (v27 + 1 > 0x2AAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)*v8) >> 1);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x1555555555555555)
      v30 = 0x2AAAAAAAAAAAAAAALL;
    else
      v30 = v28;
    if (v30)
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(v8 + 2), v30);
    else
      v31 = 0;
    v32 = &v31[6 * v27];
    v33 = &v31[6 * v30];
    v34 = *a2;
    *((_WORD *)v32 + 2) = *((_WORD *)a2 + 2);
    *(_DWORD *)v32 = v34;
    v26 = v32 + 6;
    v36 = *v8;
    v35 = v8[1];
    if (v35 != *v8)
    {
      do
      {
        v37 = *(_DWORD *)(v35 - 6);
        v35 -= 6;
        v38 = *((_WORD *)v35 + 2);
        *(_DWORD *)(v32 - 6) = v37;
        v32 -= 6;
        *((_WORD *)v32 + 2) = v38;
      }
      while (v35 != v36);
      v35 = *v8;
    }
    *v8 = v32;
    v8[1] = v26;
    v8[2] = v33;
    if (v35)
      operator delete(v35);
  }
  else
  {
    v25 = *a2;
    *(_WORD *)(v24 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)v24 = v25;
    v26 = (char *)(v24 + 6);
  }
  v8[1] = v26;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_4>(_QWORD *a1, int *a2)
{
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  char **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  char *v36;
  int v37;
  __int16 v38;

  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 26)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = 26;
    *(_QWORD *)v9 = &off_24D5D8B20;
    *(_QWORD *)(v9 + 16) = 0;
    v8 = (char **)(v9 + 16);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = (char **)(v7 + 16);
  }
  v23 = (unint64_t)v8[2];
  v24 = (unint64_t)v8[1];
  if (v24 >= v23)
  {
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)*v8) >> 1);
    v28 = v27 + 1;
    if (v27 + 1 > 0x2AAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)*v8) >> 1);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x1555555555555555)
      v30 = 0x2AAAAAAAAAAAAAAALL;
    else
      v30 = v28;
    if (v30)
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(v8 + 2), v30);
    else
      v31 = 0;
    v32 = &v31[6 * v27];
    v33 = &v31[6 * v30];
    v34 = *a2;
    *((_WORD *)v32 + 2) = *((_WORD *)a2 + 2);
    *(_DWORD *)v32 = v34;
    v26 = v32 + 6;
    v36 = *v8;
    v35 = v8[1];
    if (v35 != *v8)
    {
      do
      {
        v37 = *(_DWORD *)(v35 - 6);
        v35 -= 6;
        v38 = *((_WORD *)v35 + 2);
        *(_DWORD *)(v32 - 6) = v37;
        v32 -= 6;
        *((_WORD *)v32 + 2) = v38;
      }
      while (v35 != v36);
      v35 = *v8;
    }
    *v8 = v32;
    v8[1] = v26;
    v8[2] = v33;
    if (v35)
      operator delete(v35);
  }
  else
  {
    v25 = *a2;
    *(_WORD *)(v24 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)v24 = v25;
    v26 = (char *)(v24 + 6);
  }
  v8[1] = v26;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_5>(_QWORD *a1, uint64_t *a2)
{
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  char **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int v38;

  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 16)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = 16;
    *(_QWORD *)v9 = &off_24D5D8B70;
    *(_QWORD *)(v9 + 16) = 0;
    v8 = (char **)(v9 + 16);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = (char **)(v7 + 16);
  }
  v23 = (unint64_t)v8[2];
  v24 = (unint64_t)v8[1];
  if (v24 >= v23)
  {
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)*v8) >> 2);
    v28 = v27 + 1;
    if (v27 + 1 > 0x1555555555555555)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)*v8) >> 2);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0xAAAAAAAAAAAAAAALL)
      v30 = 0x1555555555555555;
    else
      v30 = v28;
    if (v30)
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::CurrentDataSystem>>((uint64_t)(v8 + 2), v30);
    else
      v31 = 0;
    v32 = &v31[12 * v27];
    v33 = &v31[12 * v30];
    v34 = *a2;
    *((_DWORD *)v32 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v32 = v34;
    v26 = v32 + 12;
    v36 = *v8;
    v35 = v8[1];
    if (v35 != *v8)
    {
      do
      {
        v37 = *(_QWORD *)(v35 - 12);
        v35 -= 12;
        v38 = *((_DWORD *)v35 + 2);
        *(_QWORD *)(v32 - 12) = v37;
        v32 -= 12;
        *((_DWORD *)v32 + 2) = v38;
      }
      while (v35 != v36);
      v35 = *v8;
    }
    *v8 = v32;
    v8[1] = v26;
    v8[2] = v33;
    if (v35)
      operator delete(v35);
  }
  else
  {
    v25 = *a2;
    *(_DWORD *)(v24 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v24 = v25;
    v26 = (char *)(v24 + 12);
  }
  v8[1] = v26;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_6>(_QWORD *a1, uint64_t *a2)
{
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  char **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int v38;

  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 17)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = 17;
    *(_QWORD *)v9 = &off_24D5D8BC0;
    *(_QWORD *)(v9 + 16) = 0;
    v8 = (char **)(v9 + 16);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = (char **)(v7 + 16);
  }
  v23 = (unint64_t)v8[2];
  v24 = (unint64_t)v8[1];
  if (v24 >= v23)
  {
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)*v8) >> 2);
    v28 = v27 + 1;
    if (v27 + 1 > 0x1555555555555555)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)*v8) >> 2);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0xAAAAAAAAAAAAAAALL)
      v30 = 0x1555555555555555;
    else
      v30 = v28;
    if (v30)
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::CurrentDataSystem>>((uint64_t)(v8 + 2), v30);
    else
      v31 = 0;
    v32 = &v31[12 * v27];
    v33 = &v31[12 * v30];
    v34 = *a2;
    *((_DWORD *)v32 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v32 = v34;
    v26 = v32 + 12;
    v36 = *v8;
    v35 = v8[1];
    if (v35 != *v8)
    {
      do
      {
        v37 = *(_QWORD *)(v35 - 12);
        v35 -= 12;
        v38 = *((_DWORD *)v35 + 2);
        *(_QWORD *)(v32 - 12) = v37;
        v32 -= 12;
        *((_DWORD *)v32 + 2) = v38;
      }
      while (v35 != v36);
      v35 = *v8;
    }
    *v8 = v32;
    v8[1] = v26;
    v8[2] = v33;
    if (v35)
      operator delete(v35);
  }
  else
  {
    v25 = *a2;
    *(_DWORD *)(v24 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v24 = v25;
    v26 = (char *)(v24 + 12);
  }
  v8[1] = v26;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_7>(_QWORD *a1, uint64_t a2)
{
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  int *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  int *v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;

  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 18)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = 18;
    *(_QWORD *)v9 = &off_24D5D8C10;
    *(_QWORD *)(v9 + 16) = 0;
    v8 = (void **)(v9 + 16);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = (void **)(v7 + 16);
  }
  if (!*(_BYTE *)(a2 + 145))
    std::__throw_bad_optional_access[abi:ne180100]();
  v23 = *(unsigned __int16 *)(a2 + 160);
  v24 = *(unsigned __int8 *)(a2 + 144);
  if (*(_BYTE *)(a2 + 147))
    v25 = *(unsigned __int8 *)(a2 + 146) << 24;
  else
    v25 = 0;
  v26 = (unint64_t)v8[2];
  v27 = (int *)v8[1];
  if ((unint64_t)v27 >= v26)
  {
    v29 = ((char *)v27 - (_BYTE *)*v8) >> 2;
    if ((unint64_t)(v29 + 1) >> 62)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v30 = v26 - (_QWORD)*v8;
    v31 = v30 >> 1;
    if (v30 >> 1 <= (unint64_t)(v29 + 1))
      v31 = v29 + 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
      v32 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>((uint64_t)(v8 + 2), v32);
    else
      v33 = 0;
    v34 = (int *)&v33[4 * v29];
    v35 = &v33[4 * v32];
    *v34 = v23 | (v24 << 16) | v25;
    v28 = v34 + 1;
    v37 = (char *)*v8;
    v36 = (char *)v8[1];
    if (v36 != *v8)
    {
      do
      {
        v38 = *((_DWORD *)v36 - 1);
        v36 -= 4;
        *--v34 = v38;
      }
      while (v36 != v37);
      v36 = (char *)*v8;
    }
    *v8 = v34;
    v8[1] = v28;
    v8[2] = v35;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *v27 = v23 | (v24 << 16) | v25;
    v28 = v27 + 1;
  }
  v8[1] = v28;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_8>(_QWORD *a1, __int128 *a2)
{
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  char *v36;
  __int128 v37;

  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 19)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = 19;
    *(_QWORD *)v9 = &off_24D5D8C60;
    *(_QWORD *)(v9 + 16) = 0;
    v8 = (void **)(v9 + 16);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = (void **)(v7 + 16);
  }
  v23 = (char *)v8[2];
  v24 = (char *)v8[1];
  if (v24 >= v23)
  {
    v27 = 0xCCCCCCCCCCCCCCCDLL * ((v24 - (_BYTE *)*v8) >> 2);
    v28 = v27 + 1;
    if (v27 + 1 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - (_BYTE *)*v8) >> 2);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x666666666666666)
      v30 = 0xCCCCCCCCCCCCCCCLL;
    else
      v30 = v28;
    if (v30)
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nas::tlv::NRHintItem>>((uint64_t)(v8 + 2), v30);
    else
      v31 = 0;
    v32 = &v31[20 * v27];
    v33 = &v31[20 * v30];
    v34 = *a2;
    *((_DWORD *)v32 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v32 = v34;
    v26 = v32 + 20;
    v36 = (char *)*v8;
    v35 = (char *)v8[1];
    if (v35 != *v8)
    {
      do
      {
        v37 = *(_OWORD *)(v35 - 20);
        *(_DWORD *)(v32 - 5) = *(_DWORD *)(v35 - 5);
        *(_OWORD *)(v32 - 20) = v37;
        v32 -= 20;
        v35 -= 20;
      }
      while (v35 != v36);
      v35 = (char *)*v8;
    }
    *v8 = v32;
    v8[1] = v26;
    v8[2] = v33;
    if (v35)
      operator delete(v35);
  }
  else
  {
    v25 = *a2;
    *((_DWORD *)v24 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v24 = v25;
    v26 = v24 + 20;
  }
  v8[1] = v26;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_9>(_QWORD *a1, __int128 *a2)
{
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  char *v36;
  __int128 v37;

  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 20)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = 20;
    *(_QWORD *)v9 = &off_24D5D8CB0;
    *(_QWORD *)(v9 + 16) = 0;
    v8 = (void **)(v9 + 16);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = (void **)(v7 + 16);
  }
  v23 = (char *)v8[2];
  v24 = (char *)v8[1];
  if (v24 >= v23)
  {
    v27 = 0xCCCCCCCCCCCCCCCDLL * ((v24 - (_BYTE *)*v8) >> 2);
    v28 = v27 + 1;
    if (v27 + 1 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - (_BYTE *)*v8) >> 2);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x666666666666666)
      v30 = 0xCCCCCCCCCCCCCCCLL;
    else
      v30 = v28;
    if (v30)
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nas::tlv::NRHintItem>>((uint64_t)(v8 + 2), v30);
    else
      v31 = 0;
    v32 = &v31[20 * v27];
    v33 = &v31[20 * v30];
    v34 = *a2;
    *((_DWORD *)v32 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v32 = v34;
    v26 = v32 + 20;
    v36 = (char *)*v8;
    v35 = (char *)v8[1];
    if (v35 != *v8)
    {
      do
      {
        v37 = *(_OWORD *)(v35 - 20);
        *(_DWORD *)(v32 - 5) = *(_DWORD *)(v35 - 5);
        *(_OWORD *)(v32 - 20) = v37;
        v32 -= 20;
        v35 -= 20;
      }
      while (v35 != v36);
      v35 = (char *)*v8;
    }
    *v8 = v32;
    v8[1] = v26;
    v8[2] = v33;
    if (v35)
      operator delete(v35);
  }
  else
  {
    v25 = *a2;
    *((_DWORD *)v24 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v24 = v25;
    v26 = v24 + 20;
  }
  v8[1] = v26;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_10>(_QWORD *a1, uint64_t a2)
{
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  int *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  int *v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;

  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 21)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = 21;
    *(_QWORD *)v9 = &off_24D5D8D00;
    *(_QWORD *)(v9 + 16) = 0;
    v8 = (void **)(v9 + 16);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = (void **)(v7 + 16);
  }
  if (!*(_BYTE *)(a2 + 145))
    std::__throw_bad_optional_access[abi:ne180100]();
  v23 = *(unsigned __int16 *)(a2 + 160);
  v24 = *(unsigned __int8 *)(a2 + 144);
  if (*(_BYTE *)(a2 + 147))
    v25 = *(unsigned __int8 *)(a2 + 146) << 24;
  else
    v25 = 0;
  v26 = (unint64_t)v8[2];
  v27 = (int *)v8[1];
  if ((unint64_t)v27 >= v26)
  {
    v29 = ((char *)v27 - (_BYTE *)*v8) >> 2;
    if ((unint64_t)(v29 + 1) >> 62)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v30 = v26 - (_QWORD)*v8;
    v31 = v30 >> 1;
    if (v30 >> 1 <= (unint64_t)(v29 + 1))
      v31 = v29 + 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
      v32 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>((uint64_t)(v8 + 2), v32);
    else
      v33 = 0;
    v34 = (int *)&v33[4 * v29];
    v35 = &v33[4 * v32];
    *v34 = v23 | (v24 << 16) | v25;
    v28 = v34 + 1;
    v37 = (char *)*v8;
    v36 = (char *)v8[1];
    if (v36 != *v8)
    {
      do
      {
        v38 = *((_DWORD *)v36 - 1);
        v36 -= 4;
        *--v34 = v38;
      }
      while (v36 != v37);
      v36 = (char *)*v8;
    }
    *v8 = v34;
    v8[1] = v28;
    v8[2] = v35;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *v27 = v23 | (v24 << 16) | v25;
    v28 = v27 + 1;
  }
  v8[1] = v28;
}

void qmi::MutableMessage<dfs::AddLLFilters::RequestTLVList>::apply<QMIDownLinkFilterCommandDriver::addLLFilter_sync(DataIPFilter const&,std::function<void ()(BOOL)>)::$_11>(_QWORD *a1, uint64_t a2)
{
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v4 = (const void **)a1[1];
  v5 = (const void **)a1[2];
  v6 = (char **)(a1 + 1);
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 22)
    {
      if (++v4 == v5)
        goto LABEL_8;
    }
  }
  if (v4 == v5)
  {
LABEL_8:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = 22;
    *(_QWORD *)v9 = &off_24D5D8D50;
    *(_QWORD *)(v9 + 16) = 0;
    v8 = (void **)(v9 + 16);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = a1[3];
    v11 = (uint64_t *)a1[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      a1[1] = v18;
      a1[2] = v12;
      a1[3] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    a1[2] = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = (void **)(v7 + 16);
  }
  if (!*(_BYTE *)(a2 + 152))
    std::__throw_bad_optional_access[abi:ne180100]();
  v23 = *(unsigned __int16 *)(a2 + 160);
  v24 = *(unsigned int *)(a2 + 148);
  v25 = (unint64_t)v8[2];
  v26 = (uint64_t *)v8[1];
  if ((unint64_t)v26 >= v25)
  {
    v28 = ((char *)v26 - (_BYTE *)*v8) >> 3;
    if ((unint64_t)(v28 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v25 - (_QWORD)*v8;
    v30 = v29 >> 2;
    if (v29 >> 2 <= (unint64_t)(v28 + 1))
      v30 = v28 + 1;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    if (v31)
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(v8 + 2), v31);
    else
      v32 = 0;
    v33 = &v32[8 * v28];
    v34 = &v32[8 * v31];
    *(_QWORD *)v33 = v23 | (v24 << 32);
    v27 = v33 + 8;
    v36 = (char *)*v8;
    v35 = (char *)v8[1];
    if (v35 != *v8)
    {
      do
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        *((_QWORD *)v33 - 1) = v37;
        v33 -= 8;
      }
      while (v35 != v36);
      v35 = (char *)*v8;
    }
    *v8 = v33;
    v8[1] = v27;
    v8[2] = v34;
    if (v35)
      operator delete(v35);
  }
  else
  {
    *v26 = v23 | (v24 << 32);
    v27 = v26 + 1;
  }
  v8[1] = v27;
}

void ___ZN30QMIDownLinkFilterCommandDriver16addLLFilter_syncERK12DataIPFilterNSt3__18functionIFvbEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  qmi::MessageBase *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  int v8;
  int v9;
  QMIDownLinkFilterCommandDriver::DataIPFilterInfo *v10;
  QMIDownLinkFilterCommandDriver::DataIPFilterInfo *i;
  int v12;
  int v13;
  unsigned __int8 *TlvValue;
  int v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  DataIPFilter *v22;
  DataIPFilter *v23;
  NSObject *v24;
  int v25;
  int v26;
  QMIDownLinkFilterCommandDriver::DataIPFilterInfo *v27;
  QMIDownLinkFilterCommandDriver::DataIPFilterInfo *j;
  unsigned __int8 *v29;
  qmi::MessageBase *v30;
  uint64_t v31;
  char v32;
  void *__p;
  _DWORD *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint8_t buf[8];
  _BYTE v38[32];
  std::string v39;
  char v40;
  char v41;
  std::string v42;
  char v43;
  char v44;
  _QWORD v45[2];
  unsigned __int16 v46;
  char *v47;
  uint64_t v48;

  v2 = a2;
  v3 = a1;
  v48 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *((_DWORD *)a2 + 1);
  v6 = *(NSObject **)(v4 + 40);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      v9 = *(_DWORD *)(v4 + 76);
      v8 = *(_DWORD *)(v4 + 80);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)v38 = 1024;
      *(_DWORD *)&v38[2] = v9;
      *(_WORD *)&v38[6] = 1024;
      *(_DWORD *)&v38[8] = v5;
      *(_WORD *)&v38[12] = 2080;
      *(_QWORD *)&v38[14] = qmi::asString();
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#E add ll filter: for pdp %d, ipFamily %d Error code = 0x%x (%s)", buf, 0x1Eu);
    }
    v10 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v4 + 144);
    for (i = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v4 + 152);
          v10 != i;
          v10 = (QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)((char *)v10 + 200))
    {
      if (DataIPFilter::equivalent(v10, (const DataIPFilter *)(v3 + 40), 0))
      {
        *((_QWORD *)v10 + 20) = 0x100000000;
        QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(v10, 0);
      }
    }
  }
  else
  {
    if (v7)
    {
      v13 = *(_DWORD *)(v4 + 76);
      v12 = *(_DWORD *)(v4 + 80);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)v38 = 1024;
      *(_DWORD *)&v38[2] = v13;
      _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I AddLLFilters successful for pdp %d, ipFamily %d", buf, 0xEu);
    }
    v32 = 0;
    *(_QWORD *)buf = v4;
    *(_OWORD *)v38 = *(_OWORD *)(v3 + 40);
    *(_OWORD *)&v38[16] = *(_OWORD *)(v3 + 56);
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v39, v3 + 72);
    std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v42, v3 + 128);
    v45[0] = *(_QWORD *)(v3 + 184);
    *(_QWORD *)((char *)v45 + 6) = *(_QWORD *)(v3 + 190);
    v46 = *(_WORD *)(v3 + 200);
    v47 = &v32;
    TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(v2);
    v16 = TlvValue;
    if (TlvValue)
    {
      v17 = v15;
      v35 = 0;
      v36 = TlvValue;
      __p = 0;
      v34 = 0;
      tlv::parseV<dfs::tlv::LLFilterHandlesList>(&v36, v15, (uint64_t *)&__p);
      v18 = v36;
      v19 = __p;
      if (v36)
      {
        v20 = v34;
        if (__p != v34)
        {
          v29 = v36;
          v30 = v2;
          v31 = v3;
          v21 = *(_QWORD *)buf;
          do
          {
            if (*(unsigned __int16 *)v19 == v46)
            {
              v23 = *(DataIPFilter **)(v21 + 144);
              v22 = *(DataIPFilter **)(v21 + 152);
              while (v23 != v22)
              {
                if (DataIPFilter::equivalent(v23, (const DataIPFilter *)v38, 0))
                {
                  *v47 = 1;
                  if (*((_DWORD *)v23 + 41) != 3)
                    *((_DWORD *)v23 + 41) = 4;
                  *((_DWORD *)v23 + 40) = v19[1];
                }
                v23 = (DataIPFilter *)((char *)v23 + 200);
              }
            }
            v19 += 2;
          }
          while (v19 != v20);
          v19 = __p;
          v2 = v30;
          v3 = v31;
          v18 = v29;
        }
      }
      if (v19)
      {
        v34 = v19;
        operator delete(v19);
      }
      if (!v18)
        ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)v2, 16, v16, v17);
    }
    if (v44 && v43 && SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (v41 && v40 && SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (!v32)
    {
      v24 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        v26 = *(_DWORD *)(v4 + 76);
        v25 = *(_DWORD *)(v4 + 80);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v25;
        *(_WORD *)v38 = 1024;
        *(_DWORD *)&v38[2] = v26;
        _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, "#E add ll filter: for pdp %d, ipFamily %d list has no filter id", buf, 0xEu);
      }
      v27 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v4 + 144);
      for (j = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v4 + 152);
            v27 != j;
            v27 = (QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)((char *)v27 + 200))
      {
        if (DataIPFilter::equivalent(v27, (const DataIPFilter *)(v3 + 40), 0))
        {
          *((_QWORD *)v27 + 20) = 0x100000000;
          QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(v27, 0);
        }
      }
    }
  }
}

void sub_2169B5960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a33 && a30 && a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *__copy_helper_block_e8_40c18_ZTS12DataIPFilter(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *result;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 72), a2 + 72);
  result = std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 128), a2 + 128);
  v6 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 190) = *(_QWORD *)(a2 + 190);
  *(_QWORD *)(a1 + 184) = v6;
  return result;
}

void sub_2169B5A38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_40c18_ZTS12DataIPFilter(uint64_t a1)
{
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 128);
  return std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 72);
}

void QMIDownLinkFilterCommandDriver::deleteLLFilter_sync(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  char *v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *aBlock;
  _OWORD v41[2];
  __int128 v42;
  __int128 v43;
  void *v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t buf[8];
  uint64_t v53;
  void (*v54)(uint64_t, QMIServiceMsg *);
  void *v55;
  _QWORD *v56;
  _QWORD v57[5];
  _BYTE v58[24];
  _BYTE *v59;
  __int128 v60;
  __int128 v61;
  std::string v62;
  char v63;
  char v64;
  std::string v65;
  char v66;
  char v67;
  _QWORD v68[5];

  v68[2] = *MEMORY[0x24BDAC8D0];
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  *(_OWORD *)v44 = 0u;
  v45 = 0u;
  v6 = a2[1];
  v42 = *a2;
  v43 = v6;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)v44, (uint64_t)(a2 + 2));
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)&v47 + 8), (uint64_t)a2 + 88);
  *(_QWORD *)&v51 = *((_QWORD *)a2 + 18);
  *(_QWORD *)((char *)&v51 + 6) = *(_QWORD *)((char *)a2 + 150);
  if (DataIPFilter::empty((DataIPFilter *)&v42))
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#E del ll filter: empty", buf, 2u);
    }
    buf[0] = 0;
    v8 = *(_QWORD *)(a3 + 24);
    if (v8)
      goto LABEL_51;
LABEL_84:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (HIDWORD(v43))
  {
    if (*(_QWORD *)(a1 + 104) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
    {
      if (HIDWORD(v43) == 4)
      {
        v9 = 1;
LABEL_17:
        if (*(_DWORD *)(a1 + 76) == v9)
        {
          v11 = *(unsigned int **)(a1 + 144);
          v12 = *(unsigned int **)(a1 + 152);
          if (v11 == v12)
          {
LABEL_48:
            v24 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, "#N del ll filter: did not find the filter", buf, 2u);
            }
            buf[0] = 1;
            v8 = *(_QWORD *)(a3 + 24);
            if (!v8)
              std::__throw_bad_function_call[abi:ne180100]();
            goto LABEL_51;
          }
          v13 = 0;
          v14 = 0;
          LOWORD(v15) = v42;
          while (1)
          {
            while (!DataIPFilter::equivalent((DataIPFilter *)v11, (const DataIPFilter *)&v42, 0))
            {
LABEL_23:
              v11 += 50;
              if (v11 == v12)
              {
                if ((v14 & 1) == 0)
                  goto LABEL_48;
LABEL_46:
                memset(v41, 0, sizeof(v41));
                qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v41);
                v20 = qmi::MutableMessageBase::getTLV<dfs::tlv::LLFilterHandlesList>(v41);
                v21 = *((_QWORD *)v20 + 2);
                v22 = (unint64_t *)*((_QWORD *)v20 + 1);
                if ((unint64_t)v22 >= v21)
                {
                  v25 = ((uint64_t)v22 - *(_QWORD *)v20) >> 3;
                  if ((unint64_t)(v25 + 1) >> 61)
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v26 = v21 - *(_QWORD *)v20;
                  v27 = v26 >> 2;
                  if (v26 >> 2 <= (unint64_t)(v25 + 1))
                    v27 = v25 + 1;
                  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
                    v28 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v28 = v27;
                  if (v28)
                    v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(v20 + 16), v28);
                  else
                    v29 = 0;
                  v30 = &v29[8 * v25];
                  v31 = &v29[8 * v28];
                  *(_QWORD *)v30 = (unsigned __int16)v15 | (unint64_t)(v13 << 32);
                  v23 = v30 + 8;
                  v33 = *(char **)v20;
                  v32 = (char *)*((_QWORD *)v20 + 1);
                  if (v32 != *(char **)v20)
                  {
                    do
                    {
                      v34 = *((_QWORD *)v32 - 1);
                      v32 -= 8;
                      *((_QWORD *)v30 - 1) = v34;
                      v30 -= 8;
                    }
                    while (v32 != v33);
                    v32 = *(char **)v20;
                  }
                  *(_QWORD *)v20 = v30;
                  *((_QWORD *)v20 + 1) = v23;
                  *((_QWORD *)v20 + 2) = v31;
                  if (v32)
                    operator delete(v32);
                }
                else
                {
                  *v22 = (unsigned __int16)v15 | (unint64_t)(v13 << 32);
                  v23 = v22 + 1;
                }
                *((_QWORD *)v20 + 1) = v23;
                v39 = QMIServiceMsg::create();
                v35 = MEMORY[0x24BDAC760];
                v57[0] = MEMORY[0x24BDAC760];
                v57[1] = 1174405120;
                v57[2] = ___ZN30QMIDownLinkFilterCommandDriver19deleteLLFilter_syncERK12DataIPFilterNSt3__18functionIFvbEEE_block_invoke;
                v57[3] = &__block_descriptor_tmp_26_4;
                v57[4] = a1;
                v36 = v58;
                std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v58, a3);
                v60 = v42;
                v61 = v43;
                std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v62, (uint64_t)v44);
                std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](&v65, (uint64_t)&v47 + 8);
                v68[0] = v51;
                *(_QWORD *)((char *)v68 + 6) = *(_QWORD *)((char *)&v51 + 6);
                *(_QWORD *)buf = v35;
                v53 = 0x40000000;
                v54 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs15DeleteLLFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
                v55 = &unk_24D5D8DF8;
                v56 = v57;
                v37 = _Block_copy(buf);
                aBlock = v37;
                if (v39)
                {
                  qmi::Client::send();
                  v37 = aBlock;
                }
                if (v37)
                  _Block_release(v37);
                if (v67 && v66 && SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v65.__r_.__value_.__l.__data_);
                if (v64 && v63 && SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v62.__r_.__value_.__l.__data_);
                if (v59 == v58)
                {
                  v38 = 4;
LABEL_82:
                  (*(void (**)(_QWORD *))(*v36 + 8 * v38))(v36);
                }
                else if (v59)
                {
                  v38 = 5;
                  v36 = v59;
                  goto LABEL_82;
                }
                qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v41);
                goto LABEL_32;
              }
            }
            v16 = v11[41];
            if (v16 > 5)
            {
              if (v16 == 255)
                goto LABEL_41;
              goto LABEL_23;
            }
            if (((1 << v16) & 0x27) != 0)
            {
LABEL_41:
              v19 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_216897000, v19, OS_LOG_TYPE_DEFAULT, "#I del ll filter: the filter already deleted", buf, 2u);
              }
              buf[0] = 1;
              v8 = *(_QWORD *)(a3 + 24);
              if (!v8)
                std::__throw_bad_function_call[abi:ne180100]();
              goto LABEL_51;
            }
            v17 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#I del ll filter: found the filter", buf, 2u);
            }
            QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion((QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)v11, 0);
            v15 = *v11;
            v13 = v11[40];
            v11 += 50;
            v14 = 1;
            if (v11 == v12)
              goto LABEL_46;
          }
        }
        goto LABEL_30;
      }
      if (HIDWORD(v43) == 41)
      {
        v9 = 2;
        goto LABEL_17;
      }
    }
LABEL_30:
    v18 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, "#I del ll filter: assume it belongs to other client", buf, 2u);
    }
    goto LABEL_32;
  }
  v10 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#E del ll filter: empty IP protocol", buf, 2u);
  }
  buf[0] = 0;
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
    goto LABEL_84;
LABEL_51:
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v8 + 48))(v8, buf);
LABEL_32:
  if (BYTE8(v50) && (_BYTE)v49 && SHIBYTE(v48) < 0)
    operator delete(*((void **)&v47 + 1));
  if ((_BYTE)v47 && BYTE8(v45) && SBYTE7(v45) < 0)
    operator delete(v44[0]);
}

void sub_2169B60D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  char a70;
  char a72;
  void *__p;
  char a74;
  char a75;
  char a76;
  _QWORD *v76;
  uint64_t v78;
  BOOL v79;

  if (a76 && a75 && a74 < 0)
    operator delete(__p);
  if (a72 && a70 && a69 < 0)
    operator delete(a64);
  if ((_QWORD *)a59 == v76)
  {
    v78 = 4;
  }
  else
  {
    if (!a59)
      goto LABEL_14;
    v78 = 5;
    v76 = (_QWORD *)a59;
  }
  (*(void (**)(_QWORD *))(*v76 + 8 * v78))(v76);
LABEL_14:
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  if (a42)
    v79 = a39 == 0;
  else
    v79 = 1;
  if (!v79 && a38 < 0)
    operator delete(a33);
  if (a32 && a29 && a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

uint64_t ___ZN30QMIDownLinkFilterCommandDriver19deleteLLFilter_syncERK12DataIPFilterNSt3__18functionIFvbEEE_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  QMIDownLinkFilterCommandDriver::DataIPFilterInfo *v12;
  QMIDownLinkFilterCommandDriver::DataIPFilterInfo *i;
  uint64_t v14;
  int v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a1[4];
  v4 = *(_DWORD *)(a2 + 4);
  v5 = *(NSObject **)(v3 + 40);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      v9 = v3 + 76;
      v7 = *(_DWORD *)(v3 + 76);
      v8 = *(_DWORD *)(v9 + 4);
      v16 = 67109890;
      v17 = v8;
      v18 = 1024;
      v19 = v7;
      v20 = 1024;
      v21 = v4;
      v22 = 2080;
      v23 = qmi::asString();
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#E del ll filter: for pdp %d, ipFamily %d Error code = 0x%x (%s)", (uint8_t *)&v16, 0x1Eu);
    }
    LOBYTE(v16) = 0;
  }
  else
  {
    if (v6)
    {
      v11 = *(_DWORD *)(v3 + 76);
      v10 = *(_DWORD *)(v3 + 80);
      v16 = 67109376;
      v17 = v10;
      v18 = 1024;
      v19 = v11;
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#I DeleteLLFilters successful for pdp %d, ipFamily %d", (uint8_t *)&v16, 0xEu);
    }
    v12 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v3 + 144);
    for (i = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v3 + 152);
          v12 != i;
          v12 = (QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)((char *)v12 + 200))
    {
      if (DataIPFilter::equivalent(v12, (const DataIPFilter *)(a1 + 9), 0))
      {
        *((_QWORD *)v12 + 20) = 0;
        QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(v12, 0);
      }
    }
    LOBYTE(v16) = 1;
  }
  v14 = a1[8];
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v16);
}

std::string *__copy_helper_block_e8_40c27_ZTSNSt3__18functionIFvbEEE72c18_ZTS12DataIPFilter(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *result;
  uint64_t v6;

  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 104), a2 + 104);
  result = std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 160), a2 + 160);
  v6 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 222) = *(_QWORD *)(a2 + 222);
  *(_QWORD *)(a1 + 216) = v6;
  return result;
}

void sub_2169B6408(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v3);
  v5 = *(_QWORD **)(v2 + 64);
  if (v5 == v1)
  {
    v6 = 4;
    v5 = v1;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *__destroy_helper_block_e8_40c27_ZTSNSt3__18functionIFvbEEE72c18_ZTS12DataIPFilter(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 40);
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 160);
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 104);
  result = *(_QWORD **)(a1 + 64);
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void ___ZN30QMIDownLinkFilterCommandDriver29handleLLFiltersStatusInd_syncERKN3dfs15LLFiltersStatus10IndicationE_block_invoke(uint64_t a1, unsigned int **a2)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  unsigned int *v42;
  void **v43;
  _BYTE buf[24];
  const char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = *a2;
  v42 = a2[1];
  if (*a2 != v42)
  {
    do
    {
      v5 = (unsigned int *)v2[18];
      v4 = (unsigned int *)v2[19];
      if (v5 == v4)
        goto LABEL_24;
      v6 = 0;
      do
      {
        v7 = *v3;
        if ((_DWORD)v7 == v5[40])
        {
          v8 = v5[41];
          v9 = v3[1];
          if (v8 != v9)
          {
            v10 = v2[5];
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              v11 = dfs::asString(v8);
              v12 = dfs::asString(v3[1]);
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = v7;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v11;
              *(_WORD *)&buf[22] = 2080;
              v45 = v12;
              _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#I ll filter status: for %lu: changed %s to %s", buf, 0x20u);
              v9 = v3[1];
            }
            switch(v9)
            {
              case 0:
              case 1:
              case 2:
              case 5:
                goto LABEL_9;
              case 3:
                v18 = v2[5];
                if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                {
                  v19 = v5[40];
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = v19;
                  _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, "#I ll filter status: activated %lu", buf, 0xCu);
                }
                QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion((QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)v5, 1);
                break;
              case 4:
                v16 = v2[5];
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  v17 = v5[40];
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = v17;
                  _os_log_impl(&dword_216897000, v16, OS_LOG_TYPE_DEFAULT, "#I ll filter status: deactivated %lu", buf, 0xCu);
                }
                break;
              default:
                if (v9 == 255)
                {
LABEL_9:
                  v13 = v2[5];
                  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
                  {
                    v14 = dfs::asString(v9);
                    v15 = v5[40];
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = v14;
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v15;
                    _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I ll filter status: %s; assume deactivated %lu",
                      buf,
                      0x16u);
                  }
                  QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion((QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)v5, 0);
                }
                break;
            }
            v5[41] = v3[1];
          }
          v6 = 1;
        }
        v5 += 50;
      }
      while (v5 != v4);
      if ((v6 & 1) == 0)
      {
LABEL_24:
        v20 = v2[5];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          v21 = *v3;
          v22 = dfs::asString(v3[1]);
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v21;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v22;
          _os_log_impl(&dword_216897000, v20, OS_LOG_TYPE_DEFAULT, "#N ll filter status: not found %lu: %s", buf, 0x16u);
        }
      }
      v3 += 3;
    }
    while (v3 != v42);
  }
  v23 = v2[18];
  v24 = v2[19];
  v25 = v2 + 18;
  memset(buf, 0, sizeof(buf));
  if (v23 == v24)
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    do
    {
      if ((*(_DWORD *)(v23 + 164) - 3) <= 1)
      {
        if (v26 >= *(_QWORD *)&buf[16])
        {
          v26 = std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__push_back_slow_path<QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&>((int64x2_t *)buf, v23);
        }
        else
        {
          std::construct_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>(v26, v23);
          v26 += 200;
        }
        *(_QWORD *)&buf[8] = v26;
      }
      v23 += 200;
    }
    while (v23 != v24);
  }
  if (v25 != buf)
  {
    v27 = *(_QWORD *)buf;
    v28 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v26 - *(_QWORD *)buf) >> 3);
    v29 = v2[20];
    v30 = v2[18];
    if (0x8F5C28F5C28F5C29 * ((v29 - v30) >> 3) >= v28)
    {
      if (0x8F5C28F5C28F5C29 * ((v2[19] - v30) >> 3) >= v28)
      {
        v40 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo *,QMIDownLinkFilterCommandDriver::DataIPFilterInfo *,QMIDownLinkFilterCommandDriver::DataIPFilterInfo *>(*(uint64_t *)buf, v26, v2[18]);
        for (i = v2[19]; i != v40; std::__destroy_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,0>(i))
          i -= 200;
        goto LABEL_55;
      }
      v39 = *(_QWORD *)buf + 8 * ((v2[19] - v30) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo *,QMIDownLinkFilterCommandDriver::DataIPFilterInfo *,QMIDownLinkFilterCommandDriver::DataIPFilterInfo *>(*(uint64_t *)buf, v39, v2[18]);
      v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>(v39, v26, v2[19]);
    }
    else
    {
      if (v30)
      {
        v31 = v2[19];
        v32 = (void *)v2[18];
        if (v31 != v30)
        {
          do
          {
            v31 -= 200;
            std::__destroy_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,0>(v31);
          }
          while (v31 != v30);
          v32 = *(void **)v25;
        }
        v2[19] = v30;
        operator delete(v32);
        v29 = 0;
        *(_QWORD *)v25 = 0;
        v2[19] = 0;
        v2[20] = 0;
      }
      if (v28 > 0x147AE147AE147AELL)
        goto LABEL_60;
      v33 = 0x8F5C28F5C28F5C29 * (v29 >> 3);
      v34 = 2 * v33;
      if (2 * v33 <= v28)
        v34 = v28;
      v35 = v33 >= 0xA3D70A3D70A3D7 ? 0x147AE147AE147AELL : v34;
      if (v35 > 0x147AE147AE147AELL)
LABEL_60:
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>>(v35);
      v2[18] = v36;
      v2[19] = v36;
      v2[20] = &v36[200 * v37];
      v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>(v27, v26, (uint64_t)v36);
    }
    v40 = v38;
LABEL_55:
    v2[19] = v40;
  }
  v43 = (void **)buf;
  std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__destroy_vector::operator()[abi:ne180100](&v43);
}

void sub_2169B69D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v22 + 152) = v21;
  a20 = (void **)&a21;
  std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

void QMIDownLinkFilterCommandDriver::handleDumpState_sync(QMIDownLinkFilterCommandDriver *this)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int *v7;
  int *i;
  NSObject *v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint8_t buf[4];
  _BYTE v14[14];
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_DWORD *)this + 19);
    v4 = *((_DWORD *)this + 20);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v14 = v3;
    *(_WORD *)&v14[4] = 1024;
    *(_DWORD *)&v14[6] = v4;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I =====DumpState for QMIDownLinkFilterCommandDriver ipFamily %d, pdpId %d ======", buf, 0xEu);
    v2 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((unsigned __int8 *)this + 84);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v14 = v5;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I fPacketStateActive = %d", buf, 8u);
    v2 = *((_QWORD *)this + 5);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v6 = asStringBool();
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v14 = v6;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I fLLFiltersSupported = %s", buf, 0xCu);
  }
  v7 = (int *)*((_QWORD *)this + 18);
  for (i = (int *)*((_QWORD *)this + 19); v7 != i; v7 += 50)
  {
    v9 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *v7;
      v11 = v7[40];
      v12 = dfs::asString(v7[41]);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)v14 = v10;
      *(_WORD *)&v14[4] = 2048;
      *(_QWORD *)&v14[6] = v11;
      v15 = 2080;
      v16 = v12;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I llFilter: id=%u, handle=%lu, status=%s", buf, 0x1Cu);
    }
  }
}

uint64_t QMIDownLinkFilterCommandDriver::getPdpActiveState_sync(QMIDownLinkFilterCommandDriver *this)
{
  return *((unsigned __int8 *)this + 84);
}

uint64_t QMIDownLinkFilterCommandDriver::setPdpActiveState_sync(uint64_t this, char a2)
{
  *(_BYTE *)(this + 84) = a2;
  return this;
}

void std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 200;
        std::__destroy_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 168);
  v3 = *(_QWORD **)(a1 + 192);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 88);
  return std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](a1 + 32);
}

_QWORD *std::vector<dfs::tlv::FilterRuleType>::__init_with_size[abi:ne180100]<dfs::tlv::FilterRuleType*,dfs::tlv::FilterRuleType*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<dfs::tlv::FilterRuleType>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2169B6D40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<dfs::tlv::FilterRuleType>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1745D1745D1745ELL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<qos::tlv::QosFilterSpec>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[176 * v4];
  return result;
}

uint64_t std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter const&,DataIPFilter*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 32), a2 + 32);
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 88), a2 + 88);
  v5 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 150) = *(_QWORD *)(a2 + 150);
  *(_QWORD *)(a1 + 144) = v5;
  return a1;
}

void sub_2169B6E0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DataIPFilter>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>,std::reverse_iterator<DataIPFilter*>,std::reverse_iterator<DataIPFilter*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

BOOL DataIPFilterEndpoint::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = equalsOptional<std::string>((unsigned __int8 *)a1, (unsigned __int8 *)a2);
  if (result)
  {
    if (*(_BYTE *)(a1 + 33))
    {
      if (!*(_BYTE *)(a2 + 33) || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
        return 0;
    }
    else if (*(_BYTE *)(a2 + 33))
    {
      return 0;
    }
    if (*(_BYTE *)(a1 + 36))
    {
      if (!*(_BYTE *)(a2 + 36) || *(unsigned __int16 *)(a1 + 34) != *(unsigned __int16 *)(a2 + 34))
        return 0;
    }
    else if (*(_BYTE *)(a2 + 36))
    {
      return 0;
    }
    if (*(_BYTE *)(a1 + 40))
    {
      if (*(_BYTE *)(a2 + 40) && *(unsigned __int16 *)(a1 + 38) == *(unsigned __int16 *)(a2 + 38))
        return 1;
    }
    else if (!*(_BYTE *)(a2 + 40))
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL equalsOptional<std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (!a1[24])
    return !a2[24];
  if (!a2[24])
    return 0;
  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return !memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1));
  if (a1[23])
  {
    while (*a1 == *a2)
    {
      ++a1;
      ++a2;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

void std::__function::__func<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1},std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1},std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D5D84E0;
  return result;
}

void std::__function::__func<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1},std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D5D84E0;
}

uint64_t std::__function::__func<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1},std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1},std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::target_type()
{
}

void _ZNSt3__110__function6__funcIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_ENS_9allocatorIS4_EEFvbEED0Ev()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *_ZNKSt3__110__function6__funcIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_ENS_9allocatorIS4_EEFvbEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D5D8560;
  return result;
}

void _ZNKSt3__110__function6__funcIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_ENS_9allocatorIS4_EEFvbEE7__cloneEPNS0_6__baseIS7_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D5D8560;
}

uint64_t _ZNKSt3__110__function6__funcIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_ENS_9allocatorIS4_EEFvbEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_E))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_ENS_9allocatorIS4_EEFvbEE11target_typeEv()
{
  return &_ZTIN30QMIDownLinkFilterCommandDriver16DataIPFilterInfo8callbackMUlbE_E;
}

uint64_t std::vector<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::__push_back_slow_path<QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int64x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  unint64_t v31;
  int64x2_t v32;
  unint64_t v33;
  uint64_t *v34;

  v2 = 0x8F5C28F5C28F5C29 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x147AE147AE147AELL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 1;
  if (0x1EB851EB851EB852 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0x1EB851EB851EB852 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0x8F5C28F5C28F5C29 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xA3D70A3D70A3D7)
    v7 = 0x147AE147AE147AELL;
  else
    v7 = v3;
  v34 = (uint64_t *)v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>>(v7);
  else
    v8 = 0;
  v31 = v7;
  v32.i64[0] = v7 + 200 * v2;
  v33 = v7 + 200 * v8;
  std::construct_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>(v32.i64[0], a2);
  v9 = v32.i64[0];
  v10 = v32.i64[0] + 200;
  v32.i64[1] = v32.i64[0] + 200;
  v12 = a1->i64[0];
  v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    v28 = vdupq_n_s64(v11);
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = v9 + v13;
      v15 = v11 + v13;
      v16 = *(_OWORD *)(v11 + v13 - 200);
      *(_OWORD *)(v14 - 184) = *(_OWORD *)(v11 + v13 - 184);
      *(_OWORD *)(v14 - 200) = v16;
      *(_BYTE *)(v9 + v13 - 168) = 0;
      *(_BYTE *)(v14 - 120) = 0;
      if (*(_BYTE *)(v11 + v13 - 120))
      {
        *(_BYTE *)(v14 - 144) = 0;
        if (*(_BYTE *)(v15 - 144))
        {
          v17 = (_QWORD *)(v15 - 168);
          v18 = *(_OWORD *)(v15 - 168);
          *(_QWORD *)(v9 + v13 - 152) = *(_QWORD *)(v15 - 152);
          *(_OWORD *)(v9 + v13 - 168) = v18;
          v17[1] = 0;
          v17[2] = 0;
          *v17 = 0;
          *(_BYTE *)(v14 - 144) = 1;
        }
        v19 = v9 + v13;
        v20 = *(_QWORD *)(v11 + v13 - 136);
        *(_BYTE *)(v19 - 128) = *(_BYTE *)(v11 + v13 - 128);
        *(_QWORD *)(v19 - 136) = v20;
        *(_BYTE *)(v14 - 120) = 1;
      }
      *(_BYTE *)(v14 - 112) = 0;
      *(_BYTE *)(v14 - 64) = 0;
      if (*(_BYTE *)(v15 - 64))
      {
        v21 = v9 + v13;
        *(_BYTE *)(v9 + v13 - 88) = 0;
        v22 = v11 + v13;
        if (*(_BYTE *)(v11 + v13 - 88))
        {
          v24 = *(_OWORD *)(v15 - 112);
          v23 = (_QWORD *)(v15 - 112);
          *(_QWORD *)(v14 - 96) = v23[2];
          *(_OWORD *)(v14 - 112) = v24;
          v23[1] = 0;
          v23[2] = 0;
          *v23 = 0;
          *(_BYTE *)(v21 - 88) = 1;
        }
        v25 = *(_QWORD *)(v22 - 80);
        *(_BYTE *)(v21 - 72) = *(_BYTE *)(v22 - 72);
        *(_QWORD *)(v21 - 80) = v25;
        *(_BYTE *)(v14 - 64) = 1;
      }
      v26 = v9 + v13;
      v27 = *(_QWORD *)(v11 + v13 - 56);
      *(_QWORD *)(v26 - 50) = *(_QWORD *)(v11 + v13 - 50);
      *(_QWORD *)(v26 - 56) = v27;
      *(_QWORD *)(v26 - 40) = *(_QWORD *)(v11 + v13 - 40);
      std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](v9 + v13 - 32, v11 + v13 - 32);
      v13 -= 200;
    }
    while (v11 + v13 != v12);
    v28 = *a1;
    v10 = v32.i64[1];
    v9 += v13;
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  v32 = v28;
  v29 = a1[1].u64[0];
  a1[1].i64[0] = v33;
  v33 = v29;
  v31 = v28.i64[0];
  std::__split_buffer<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::~__split_buffer((uint64_t)&v31);
  return v10;
}

void sub_2169B7368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,QMIDownLinkFilterCommandDriver::DataIPFilterInfo const&,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 32), a2 + 32);
  std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 88), a2 + 88);
  v5 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 150) = *(_QWORD *)(a2 + 150);
  *(_QWORD *)(a1 + 144) = v5;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 168, a2 + 168);
  return a1;
}

void sub_2169B73F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v2);
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>>(unint64_t a1)
{
  if (a1 >= 0x147AE147AE147AFLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(200 * a1);
}

uint64_t std::__split_buffer<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 200;
    std::__destroy_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,0>(i - 200);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<QMIDownLinkFilterCommandDriver::DataIPFilterInfo>,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*,QMIDownLinkFilterCommandDriver::DataIPFilterInfo*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = (_OWORD *)(a3 + v6);
      v8 = a1 + v6;
      v9 = *(_OWORD *)(a1 + v6 + 16);
      *v7 = *(_OWORD *)(a1 + v6);
      v7[1] = v9;
      std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a3 + v6 + 32), a1 + v6 + 32);
      std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(a3 + v6 + 88), a1 + v6 + 88);
      v10 = (_QWORD *)(a3 + v6);
      v11 = *(_QWORD *)(a1 + v6 + 144);
      *(_QWORD *)((char *)v10 + 150) = *(_QWORD *)(a1 + v6 + 150);
      v10[18] = v11;
      v10[20] = *(_QWORD *)(a1 + v6 + 160);
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a3 + v6 + 168, a1 + v6 + 168);
      v6 += 200;
    }
    while (v8 + 200 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_2169B7554(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v3 + 88);
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1 + v2 + 32);
  if (v2)
  {
    v5 = v1 - 200;
    do
    {
      std::__destroy_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,0>(v5 + v2);
      v2 -= 200;
    }
    while (v2);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo *,QMIDownLinkFilterCommandDriver::DataIPFilterInfo *,QMIDownLinkFilterCommandDriver::DataIPFilterInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v5 = a1 + 168;
    do
    {
      v6 = *(_OWORD *)(v5 - 152);
      *(_OWORD *)a3 = *(_OWORD *)(v5 - 168);
      *(_OWORD *)(a3 + 16) = v6;
      std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)(a3 + 32), (std::string *)(v5 - 136));
      std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)(a3 + 88), (std::string *)(v5 - 80));
      v7 = *(_QWORD *)(v5 - 24);
      *(_QWORD *)(a3 + 150) = *(_QWORD *)(v5 - 18);
      *(_QWORD *)(a3 + 144) = v7;
      *(_QWORD *)(a3 + 160) = *(_QWORD *)(v5 - 8);
      std::function<void ()(BOOL)>::operator=((_QWORD *)(a3 + 168), v5);
      a3 += 200;
      v8 = v5 + 32;
      v5 += 200;
    }
    while (v8 != a2);
  }
  return a3;
}

uint64_t *std::shared_ptr<QMIDownLinkFilterCommandDriver>::shared_ptr[abi:ne180100]<QMIDownLinkFilterCommandDriver,std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D85E0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2169B769C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver*)#1}::operator() const(QMIDownLinkFilterCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2169B76BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIDownLinkFilterCommandDriver *,std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver *)#1},std::allocator<QMIDownLinkFilterCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIDownLinkFilterCommandDriver *,std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver *)#1},std::allocator<QMIDownLinkFilterCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver*)#1}::operator() const(QMIDownLinkFilterCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIDownLinkFilterCommandDriver *,std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver *)#1},std::allocator<QMIDownLinkFilterCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIDownLinkFilterCommandDriver> ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::make_shared_ptr<QMIDownLinkFilterCommandDriver>(QMIDownLinkFilterCommandDriver*)::{lambda(QMIDownLinkFilterCommandDriver*)#1}::operator() const(QMIDownLinkFilterCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void SimInstanceLoggable<QMIDownLinkFilterCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t SimInstanceLoggable<QMIDownLinkFilterCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 40;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::execute_wrapped<QMIDownLinkFilterCommandDriver::shutdown(void)::$_0>(QMIDownLinkFilterCommandDriver::shutdown(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDownLinkFilterCommandDriver::shutdown(void)::$_0,dispatch_queue_s *::default_delete<QMIDownLinkFilterCommandDriver::shutdown(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t **v4;

  v4 = a1;
  v1 = *a1;
  v2 = **a1;
  if (*(_QWORD *)(v2 + 104))
    qmi::Client::stop((qmi::Client *)(v2 + 88));
  MEMORY[0x2199FEAC4](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_2169B77E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x2199FEAC4](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::execute_wrapped<QMIDownLinkFilterCommandDriver::setObserver(std::weak_ptr<dormancy::DormancyCommandDriverObserver>)::$_0>(QMIDownLinkFilterCommandDriver::setObserver(std::weak_ptr<dormancy::DormancyCommandDriverObserver>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDownLinkFilterCommandDriver::setObserver(std::weak_ptr<dormancy::DormancyCommandDriverObserver>)::$_0,std::default_delete<QMIDownLinkFilterCommandDriver::setObserver(std::weak_ptr<dormancy::DormancyCommandDriverObserver>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t **v10;

  v10 = a1;
  v1 = *a1;
  v2 = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(std::__shared_weak_count **)(v2 + 128);
  *(_QWORD *)(v2 + 120) = v3;
  *(_QWORD *)(v2 + 128) = v4;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v8 = (std::__shared_weak_count *)v1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  MEMORY[0x2199FEAC4](v1, 0x20C40960023A9);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IpFamilyPref>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IpFamilyPref>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IpFamilyPref>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IpFamilyPref>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D8698;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::PeripheralEndPoint>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::PeripheralEndPoint>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::PeripheralEndPoint>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::PeripheralEndPoint>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D86E8;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::MuxId>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::MuxId>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::MuxId>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::MuxId>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D8738;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::BindSub>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::BindSub>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::BindSub>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::BindSub>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D8788;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs10BindClient8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169B7BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3dfs15LLFiltersStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169B7CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::ReportLLFilterUpdate>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::ReportLLFilterUpdate>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::ReportLLFilterUpdate>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::ReportLLFilterUpdate>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D8828;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169B7E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs19GetFilterCapability8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169B7F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterMode>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterMode>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterMode>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterMode>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D88C8;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs22SetPowersaveFilterMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169B80B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIDownLinkFilterCommandDriver>::execute_wrapped<QMIDownLinkFilterCommandDriver::handlePdpStateChange(subscriber::SimSlot,BOOL)::$_0>(QMIDownLinkFilterCommandDriver::handlePdpStateChange(subscriber::SimSlot,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDownLinkFilterCommandDriver::handlePdpStateChange(subscriber::SimSlot,BOOL)::$_0,dispatch_queue_s *::default_delete<QMIDownLinkFilterCommandDriver::handlePdpStateChange(subscriber::SimSlot,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  QMIDownLinkFilterCommandDriver::DataIPFilterInfo *v4;
  QMIDownLinkFilterCommandDriver::DataIPFilterInfo *v5;
  QMIDownLinkFilterCommandDriver::DataIPFilterInfo *v6;
  uint64_t **v8;

  v8 = a1;
  v1 = *a1;
  v2 = **a1;
  if (*((_BYTE *)*a1 + 12))
  {
    if (*(_QWORD *)(v2 + 104))
    {
LABEL_5:
      v3 = 1;
LABEL_16:
      QMIDownLinkFilterCommandDriver::handlePdpStateChangeAfterClientCreation_sync(v2, *((_DWORD *)v1 + 2), v3 != 0);
      goto LABEL_17;
    }
  }
  else
  {
    if (*((_DWORD *)v1 + 2) != *(_DWORD *)(v2 + 72))
    {
      v3 = 0;
      goto LABEL_16;
    }
    v4 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v2 + 144);
    v5 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v2 + 152);
    if (v4 != v5)
    {
      do
      {
        QMIDownLinkFilterCommandDriver::DataIPFilterInfo::completion(v4, 0);
        v4 = (QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)((char *)v4 + 200);
      }
      while (v4 != v5);
      v6 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v2 + 144);
      v4 = *(QMIDownLinkFilterCommandDriver::DataIPFilterInfo **)(v2 + 152);
      if (v4 != v6)
      {
        do
        {
          v4 = (QMIDownLinkFilterCommandDriver::DataIPFilterInfo *)((char *)v4 - 200);
          std::__destroy_at[abi:ne180100]<QMIDownLinkFilterCommandDriver::DataIPFilterInfo,0>((uint64_t)v4);
        }
        while (v4 != v6);
        v4 = v6;
      }
    }
    *(_QWORD *)(v2 + 152) = v4;
    v3 = *((unsigned __int8 *)v1 + 12);
    if (*(_QWORD *)(v2 + 104) || !*((_BYTE *)v1 + 12))
      goto LABEL_16;
  }
  if (*((_DWORD *)v1 + 2) != *(_DWORD *)(v2 + 72))
    goto LABEL_5;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
LABEL_17:
  MEMORY[0x2199FEAC4](v1, 0x1020C4034E03FFCLL);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_2169B820C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x2199FEAC4](v2, 0x1020C4034E03FFCLL);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs25RemoveAllPowersaveFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169B82F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterRules>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8968;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterRules>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8968;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterRules>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 145 * ((v2 - v1 - 176) / 0xB0uLL) + 149;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterRules>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = (_BYTE *)(*a2 + 3);
  *a2 = (uint64_t)v5;
  result = dfs::tlv::writeField(v5, (_DWORD *)(a1 + 16));
  *a2 = result;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = result - (_WORD)v5;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FilterRules>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D8968;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<dfs::tlv::FilterRuleType>::__init_with_size[abi:ne180100]<dfs::tlv::FilterRuleType*,dfs::tlv::FilterRuleType*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4));
  return v2;
}

void sub_2169B84D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs19AddPowersaveFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169B85B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<dfs::tlv::LLFilterIdsList>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 1)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 1;
    *(_QWORD *)v7 = &off_24D5D89E0;
    *(_QWORD *)(v7 + 16) = 0;
    v6 = v7 + 16;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 16;
  }
  return (char *)v6;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterIdsList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D89E0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterIdsList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D89E0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterIdsList>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) + 4;
}

void *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterIdsList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  size_t v7;
  void *result;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  *(_BYTE *)(v4 + 3) = (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1;
  v6 = *(const void **)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24) - (_QWORD)v6;
  result = memcpy((void *)(v4 + 4), v6, v7);
  *a2 = v4 + 4 + v7;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v4 + 4 + v7 - v5;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterIdsList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D89E0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1);
  return v2;
}

void sub_2169B88FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpSrcPortFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8A30;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpSrcPortFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8A30;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpSrcPortFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 6 * ((v2 - v1 - 6) / 6uLL) + 10;
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpSrcPortFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<dfs::tlv::UdpSrcPortFiltersList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpSrcPortFiltersList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D8A30;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<dfs::tlv::PortFilter>::__init_with_size[abi:ne180100]<dfs::tlv::PortFilter*,dfs::tlv::PortFilter*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1));
  return v2;
}

void sub_2169B8AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<dfs::tlv::PortFilter>::__init_with_size[abi:ne180100]<dfs::tlv::PortFilter*,dfs::tlv::PortFilter*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x2AAAAAAAAAAAAAABLL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(result + 2), a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 6 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_2169B8B64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpDstPortFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8A80;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpDstPortFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8A80;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpDstPortFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 6 * ((v2 - v1 - 6) / 6uLL) + 10;
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpDstPortFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<dfs::tlv::UdpSrcPortFiltersList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::UdpDstPortFiltersList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D8A80;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<dfs::tlv::PortFilter>::__init_with_size[abi:ne180100]<dfs::tlv::PortFilter*,dfs::tlv::PortFilter*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1));
  return v2;
}

void sub_2169B8D10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpSrcPortFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8AD0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpSrcPortFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8AD0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpSrcPortFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 6 * ((v2 - v1 - 6) / 6uLL) + 10;
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpSrcPortFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<dfs::tlv::UdpSrcPortFiltersList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpSrcPortFiltersList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D8AD0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<dfs::tlv::PortFilter>::__init_with_size[abi:ne180100]<dfs::tlv::PortFilter*,dfs::tlv::PortFilter*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1));
  return v2;
}

void sub_2169B8EC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpDstPortFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8B20;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpDstPortFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8B20;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpDstPortFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 6 * ((v2 - v1 - 6) / 6uLL) + 10;
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpDstPortFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<dfs::tlv::UdpSrcPortFiltersList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TcpDstPortFiltersList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D8B20;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<dfs::tlv::PortFilter>::__init_with_size[abi:ne180100]<dfs::tlv::PortFilter*,dfs::tlv::PortFilter*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1));
  return v2;
}

void sub_2169B9078(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4SrcAddrFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8B70;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4SrcAddrFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8B70;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4SrcAddrFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 10 * ((v2 - v1 - 12) / 0xCuLL) + 14;
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4SrcAddrFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<dfs::tlv::IPv4SrcAddrFiltersList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4SrcAddrFiltersList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D8B70;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<dfs::tlv::IPv4AddrFilter>::__init_with_size[abi:ne180100]<dfs::tlv::IPv4AddrFilter*,dfs::tlv::IPv4AddrFilter*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2));
  return v2;
}

void sub_2169B922C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<dfs::tlv::IPv4AddrFilter>::__init_with_size[abi:ne180100]<dfs::tlv::IPv4AddrFilter*,dfs::tlv::IPv4AddrFilter*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x1555555555555556)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::CurrentDataSystem>>((uint64_t)(result + 2), a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 12 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_2169B92E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4DstAddrFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8BC0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4DstAddrFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8BC0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4DstAddrFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 10 * ((v2 - v1 - 12) / 0xCuLL) + 14;
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4DstAddrFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<dfs::tlv::IPv4SrcAddrFiltersList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv4DstAddrFiltersList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D8BC0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<dfs::tlv::IPv4AddrFilter>::__init_with_size[abi:ne180100]<dfs::tlv::IPv4AddrFilter*,dfs::tlv::IPv4AddrFilter*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2));
  return v2;
}

void sub_2169B948C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TosFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8C10;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TosFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8C10;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TosFiltersList>::getSize(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
    return 4;
  else
    return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) & 0xFFFFFFFFFFFFFFFCLL) + 4;
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TosFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<dfs::tlv::TosFiltersList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TosFiltersList>::clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;

  v2 = operator new();
  v3 = (_QWORD *)v2;
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &off_24D5D8C10;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>(v2 + 32, v6 >> 2);
    v3[2] = v7;
    v3[4] = &v7[4 * v8];
    memmove(v7, v5, v6);
    v3[3] = &v7[4 * (v6 >> 2)];
  }
  return v3;
}

void sub_2169B9668(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6SrcAddrFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8C60;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6SrcAddrFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8C60;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6SrcAddrFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 19 * ((v2 - v1 - 20) / 0x14uLL) + 23;
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6SrcAddrFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<dfs::tlv::IPv6SrcAddrFiltersList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6SrcAddrFiltersList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D8C60;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<dfs::tlv::IPv6AddrFilter>::__init_with_size[abi:ne180100]<dfs::tlv::IPv6AddrFilter*,dfs::tlv::IPv6AddrFilter*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2));
  return v2;
}

void sub_2169B982C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<dfs::tlv::IPv6AddrFilter>::__init_with_size[abi:ne180100]<dfs::tlv::IPv6AddrFilter*,dfs::tlv::IPv6AddrFilter*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<nas::tlv::NRHintItem>>((uint64_t)(result + 2), a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 20 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9 - 1);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_2169B98E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6DstAddrFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8CB0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6DstAddrFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8CB0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6DstAddrFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 19 * ((v2 - v1 - 20) / 0x14uLL) + 23;
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6DstAddrFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<dfs::tlv::IPv6SrcAddrFiltersList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::IPv6DstAddrFiltersList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D8CB0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<dfs::tlv::IPv6AddrFilter>::__init_with_size[abi:ne180100]<dfs::tlv::IPv6AddrFilter*,dfs::tlv::IPv6AddrFilter*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2));
  return v2;
}

void sub_2169B9A8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TrafficClassFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8D00;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TrafficClassFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8D00;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TrafficClassFiltersList>::getSize(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
    return 4;
  else
    return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) & 0xFFFFFFFFFFFFFFFCLL) + 4;
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TrafficClassFiltersList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<dfs::tlv::TosFiltersList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::TrafficClassFiltersList>::clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;

  v2 = operator new();
  v3 = (_QWORD *)v2;
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &off_24D5D8D00;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>(v2 + 32, v6 >> 2);
    v3[2] = v7;
    v3[4] = &v7[4 * v8];
    memmove(v7, v5, v6);
    v3[3] = &v7[4 * (v6 >> 2)];
  }
  return v3;
}

void sub_2169B9C68(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FlowLabelFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8D50;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FlowLabelFiltersList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8D50;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FlowLabelFiltersList>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 6 * ((unint64_t)(v2 - v1 - 8) >> 3) + 10;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FlowLabelFiltersList>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 3;
  *a2 = v4;
  v5 = v3 + 4;
  *(_BYTE *)(v3 + 3) = (*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_QWORD *)(result + 24);
  while (v6 != v7)
  {
    *(_WORD *)v5 = *(_WORD *)v6;
    *(_DWORD *)(v5 + 2) = *(_DWORD *)(v6 + 4);
    v5 += 6;
    v6 += 8;
  }
  *a2 = v5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - v4;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::FlowLabelFiltersList>::clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;

  v2 = operator new();
  v3 = (_QWORD *)v2;
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &off_24D5D8D50;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>(v2 + 32, v6 >> 3);
    v3[2] = v7;
    v3[4] = &v7[8 * v8];
    memmove(v7, v5, v6);
    v3[3] = &v7[8 * (v6 >> 3)];
  }
  return v3;
}

void sub_2169B9E7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs12AddLLFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169B9F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<dfs::tlv::LLFilterHandlesList>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 1)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 1;
    *(_QWORD *)v7 = &off_24D5D8DC8;
    *(_QWORD *)(v7 + 16) = 0;
    v6 = v7 + 16;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 16;
  }
  return (char *)v6;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterHandlesList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8DC8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterHandlesList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D8DC8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterHandlesList>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 6 * ((unint64_t)(v2 - v1 - 8) >> 3) + 10;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterHandlesList>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 3;
  *a2 = v4;
  v5 = v3 + 4;
  *(_BYTE *)(v3 + 3) = (*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_QWORD *)(result + 24);
  while (v6 != v7)
  {
    *(_WORD *)v5 = *(_WORD *)v6;
    *(_DWORD *)(v5 + 2) = *(_DWORD *)(v6 + 4);
    v5 += 6;
    v6 += 8;
  }
  *a2 = v5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - v4;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<dfs::tlv::LLFilterHandlesList>::clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;

  v2 = operator new();
  v3 = (_QWORD *)v2;
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &off_24D5D8DC8;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v5 = *(_BYTE **)(a1 + 16);
  v4 = *(_BYTE **)(a1 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>(v2 + 32, v6 >> 3);
    v3[2] = v7;
    v3[4] = &v7[8 * v8];
    memmove(v7, v5, v6);
    v3[3] = &v7[8 * (v6 >> 3)];
  }
  return v3;
}

void sub_2169BA30C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dfs15DeleteLLFilters8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169BA3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t QMIProfileInfo::QMIProfile::asString(QMIProfileInfo::QMIProfile *this, unsigned __int8 *a2)
{
  _QWORD *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  std::string *p_p;
  std::string::size_type v11;
  uint64_t v12;
  std::string __p;
  std::string v15;
  __int128 v16;
  _OWORD v17[4];
  void *v18[2];
  __int128 v19;
  __int128 v20;
  _OWORD v21[9];
  uint64_t v22;

  v22 = 0;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  memset(v17, 0, sizeof(v17));
  v16 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v16);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ProfileId: ", 11);
  std::to_string(&v15, *a2);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v15;
  else
    v5 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, size);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", State: ", 9);
  v9 = (char)a2[1];
  if ((a2[1] + 2) > 3u)
    std::to_string(&__p, v9);
  else
    std::string::basic_string[abi:ne180100]<0>(&__p, off_24D5D91F8[(char)(v9 + 2)]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v11 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v17 + 8, this);
  *(_QWORD *)&v16 = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v17[0] = v12;
  *((_QWORD *)&v17[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v19) < 0)
    operator delete(v18[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199FEA70](v21);
}

void sub_2169BA604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t QMIProfileInfo::asString@<X0>(QMIProfileInfo *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  unsigned __int8 v17;
  __int128 v18;
  _OWORD v19[4];
  void *v20[2];
  __int128 v21;
  __int128 v22;
  _OWORD v23[9];
  uint64_t v24;

  v24 = 0;
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  memset(v19, 0, sizeof(v19));
  v18 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v18);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"3GPP: [", 7);
  QMIProfileInfo::QMIProfile::asString((QMIProfileInfo::QMIProfile *)v16, (unsigned __int8 *)this + 2);
  if ((v17 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (uint64_t)v16[1];
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"], 3GPP2: [", 11);
  QMIProfileInfo::QMIProfile::asString((QMIProfileInfo::QMIProfile *)__p, (unsigned __int8 *)this + 4);
  if ((v15 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v10 = v15;
  else
    v10 = (uint64_t)__p[1];
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"]", 1);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  if ((char)v17 < 0)
    operator delete(v16[0]);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19 + 8, a2);
  *(_QWORD *)&v18 = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v19[0] = v12;
  *((_QWORD *)&v19[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v21) < 0)
    operator delete(v20[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2199FEA70](v23);
}

void sub_2169BA7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void QMICallAudioDriver::create(uint64_t a1@<X0>, dispatch_object_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  dispatch_object_t object;
  __int128 v24;

  v10 = operator new();
  v24 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  object = *a2;
  *a2 = 0;
  v11 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v21 = *(_OWORD *)a4;
  v22 = v11;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  QMICallAudioDriver::QMICallAudioDriver(v10, &v24, &object, &v22, &v21);
  *a5 = 0;
  a5[1] = 0;
  std::shared_ptr<QMICallAudioDriver>::shared_ptr[abi:ne180100]<QMICallAudioDriver,std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver*)#1},void>(a5, v10);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (object)
    dispatch_release(object);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_2169BA9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, dispatch_object_t object, char a15)
{
  uint64_t v15;
  int v16;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (object)
    dispatch_release(object);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v16)
    MEMORY[0x2199FEAC4](v15, 0xF1C40A9CD41A2);
  _Unwind_Resume(a1);
}

uint64_t QMICallAudioDriver::QMICallAudioDriver(uint64_t a1, __int128 *a2, NSObject **a3, __int128 *a4, __int128 *a5)
{
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  std::__shared_weak_count *v15;
  NSObject *object;
  __int128 v17;

  v17 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  object = *a3;
  *a3 = 0;
  v6 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v14 = *a5;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  CallAudioDriver::CallAudioDriver();
  if (*((_QWORD *)&v14 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v14 + 1) + 16))(*((_QWORD *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (object)
    dispatch_release(object);
  if (*((_QWORD *)&v17 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
    }
  }
  *(_QWORD *)a1 = &off_24D5D9228;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  return a1;
}

void sub_2169BAB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  uint64_t v14;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (object)
    dispatch_release(object);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v14 - 32);
  _Unwind_Resume(a1);
}

void QMICallAudioDriver::sendAudioTone(uint64_t a1, unsigned int a2, int a3)
{
  NSObject *v6;
  __int16 v7;
  const void **v8;
  char *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[5];
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *aBlock;
  void *__p[2];
  __int128 v33;
  _BYTE buf[24];
  void *v35;
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = asString();
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Playing tone (%s, %d)", buf, 0x12u);
  }
  if (a2 > 0xA)
    v7 = 255;
  else
    v7 = word_216AAF010[(char)a2];
  *(_OWORD *)__p = 0u;
  v33 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v8 = (const void **)__p[1];
  if (__p[1] != (void *)v33)
  {
    while (*((_BYTE *)*v8 + 8) != 17)
    {
      if (++v8 == (const void **)v33)
        goto LABEL_13;
    }
  }
  if (v8 == (const void **)v33)
  {
LABEL_13:
    v11 = operator new();
    v12 = v11;
    *(_BYTE *)(v11 + 8) = 17;
    *(_QWORD *)v11 = &off_24D5D9408;
    *(_DWORD *)(v11 + 10) = 0;
    v10 = (__int16 *)(v11 + 10);
    v13 = v33;
    if ((unint64_t)v33 >= *((_QWORD *)&v33 + 1))
    {
      v15 = (uint64_t)(v33 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v16 = (uint64_t)(*((_QWORD *)&v33 + 1) - (unint64_t)__p[1]) >> 2;
      if (v16 <= v15 + 1)
        v16 = v15 + 1;
      if (*((_QWORD *)&v33 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v33 + 8, v17);
      else
        v18 = 0;
      v19 = (uint64_t *)&v18[8 * v15];
      v20 = &v18[8 * v17];
      *v19 = v12;
      v14 = v19 + 1;
      v22 = (char *)__p[1];
      v21 = (char *)v33;
      if ((void *)v33 != __p[1])
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v19 = v23;
        }
        while (v21 != v22);
        v21 = (char *)__p[1];
      }
      __p[1] = v19;
      *(_QWORD *)&v33 = v14;
      *((_QWORD *)&v33 + 1) = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v33 = v11;
      v14 = (_QWORD *)(v13 + 8);
    }
    *(_QWORD *)&v33 = v14;
  }
  else
  {
    if (!v9)
      __cxa_bad_cast();
    v10 = (__int16 *)(v9 + 10);
  }
  *v10 = v7;
  v10[1] = a3;
  v27 = a1 + 128;
  v28 = QMIServiceMsg::create();
  v29 = 25000;
  v30 = 0;
  aBlock = 0;
  v25[0] = MEMORY[0x24BDAC760];
  v25[1] = 0x40000000;
  v25[2] = ___ZN18QMICallAudioDriver13sendAudioToneE11AudioToneIdt_block_invoke_2;
  v25[3] = &__block_descriptor_tmp_4_3;
  v25[4] = a1;
  v26 = a2;
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio9StartTone8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v35 = &unk_24D5D9438;
  v36 = v25;
  v24 = _Block_copy(buf);
  aBlock = v24;
  if (v28)
  {
    qmi::Client::send();
    v24 = aBlock;
  }
  if (v24)
    _Block_release(v24);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2169BAE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN18QMICallAudioDriver13sendAudioToneE11AudioToneIdt_block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = asString();
      v5 = qmi::asString();
      v6 = *(_DWORD *)(a2 + 4);
      v7 = 136315650;
      v8 = v4;
      v9 = 2080;
      v10 = v5;
      v11 = 1024;
      v12 = v6;
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Sending audio tone %s failed with error code %s (0x%d)", (uint8_t *)&v7, 0x1Cu);
    }
  }
}

void QMICallAudioDriver::stopAudioTone(QMICallAudioDriver *this)
{
  void *v2;
  _QWORD v3[6];
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  _OWORD v8[2];
  _QWORD aBlock[5];

  memset(v8, 0, sizeof(v8));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v8);
  v3[5] = (char *)this + 128;
  v4 = QMIServiceMsg::create();
  v5 = 25000;
  v6 = 0;
  v7 = 0;
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZNK18QMICallAudioDriver13stopAudioToneEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_5_10;
  v3[4] = this;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio8StopTone8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5D9460;
  aBlock[4] = v3;
  v2 = _Block_copy(aBlock);
  v7 = v2;
  if (v4)
  {
    qmi::Client::send();
    v2 = v7;
  }
  if (v2)
    _Block_release(v2);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_2169BB088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZNK18QMICallAudioDriver13stopAudioToneEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (*(_DWORD *)(a2 + 4))
  {
    if (os_log_type_enabled(*(os_log_t *)(v2 + 40), OS_LOG_TYPE_ERROR))
    {
      v5 = qmi::asString();
      v6 = *(_DWORD *)(a2 + 4);
      v7 = 136315394;
      v8 = v5;
      v9 = 1024;
      v10 = v6;
      _os_log_error_impl(&dword_216897000, v3, OS_LOG_TYPE_ERROR, "Stopping audio tone failed with error code %s (0x%d)", (uint8_t *)&v7, 0x12u);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(v2 + 40), OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7) = 0;
    _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Audio tones stop request sent successfully", (uint8_t *)&v7, 2u);
  }
}

void QMICallAudioDriver::playDTMFDigits(uint64_t a1, char **a2, int a3)
{
  NSObject *v6;
  const void **v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[6];
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *aBlock;
  void *__p[2];
  __int128 v30;
  uint8_t buf[8];
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  void *v34;
  _QWORD *v35;

  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Playing the local audio Dtmf tone", buf, 2u);
  }
  if (a3)
  {
    *(_OWORD *)__p = 0u;
    v30 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v7 = (const void **)__p[1];
    if (__p[1] != (void *)v30)
    {
      while (*((_BYTE *)*v7 + 8) != 1)
      {
        if (++v7 == (const void **)v30)
          goto LABEL_12;
      }
    }
    if (v7 == (const void **)v30)
    {
LABEL_12:
      v10 = operator new();
      v11 = v10;
      *(_BYTE *)(v10 + 8) = 1;
      *(_QWORD *)(v10 + 16) = 0;
      v9 = (char **)(v10 + 16);
      *(_QWORD *)v10 = &off_24D5D94A8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      v12 = v30;
      if ((unint64_t)v30 >= *((_QWORD *)&v30 + 1))
      {
        v14 = (uint64_t)(v30 - (unint64_t)__p[1]) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = (uint64_t)(*((_QWORD *)&v30 + 1) - (unint64_t)__p[1]) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if (*((_QWORD *)&v30 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v30 + 8, v16);
        else
          v17 = 0;
        v18 = (uint64_t *)&v17[8 * v14];
        v19 = &v17[8 * v16];
        *v18 = v11;
        v13 = v18 + 1;
        v21 = (char *)__p[1];
        v20 = (char *)v30;
        if ((void *)v30 != __p[1])
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v18 = v22;
          }
          while (v20 != v21);
          v20 = (char *)__p[1];
        }
        __p[1] = v18;
        *(_QWORD *)&v30 = v13;
        *((_QWORD *)&v30 + 1) = v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v30 = v10;
        v13 = (_QWORD *)(v12 + 8);
      }
      *(_QWORD *)&v30 = v13;
    }
    else
    {
      if (!v8)
        __cxa_bad_cast();
      v9 = (char **)(v8 + 16);
    }
    if (v9 != a2)
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v9, *a2, a2[1], a2[1] - *a2);
    v24[5] = a1 + 128;
    v25 = QMIServiceMsg::create();
    v26 = 25000;
    v27 = 0;
    aBlock = 0;
    v24[0] = MEMORY[0x24BDAC760];
    v24[1] = 0x40000000;
    v24[2] = ___ZN18QMICallAudioDriver14playDTMFDigitsERKNSt3__16vectorIhNS0_9allocatorIhEEEEb_block_invoke_2;
    v24[3] = &__block_descriptor_tmp_8_12;
    v24[4] = a1;
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v32 = 0x40000000;
    v33 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_19;
    v34 = &unk_24D5D94D8;
    v35 = v24;
    v23 = _Block_copy(buf);
    aBlock = v23;
    if (v25)
    {
      qmi::Client::send();
      v23 = aBlock;
    }
    if (v23)
      _Block_release(v23);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    CallAudioDriver::playLocalDtmfDigits();
  }
}

void sub_2169BB468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN18QMICallAudioDriver14playDTMFDigitsERKNSt3__16vectorIhNS0_9allocatorIhEEEEb_block_invoke_2(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = qmi::asString();
      v6 = *(_DWORD *)(a2 + 4);
      v7 = 136315394;
      v8 = v5;
      v9 = 1024;
      v10 = v6;
      _os_log_error_impl(&dword_216897000, v4, OS_LOG_TYPE_ERROR, "Sending local audio burst DTMF failed with error %s (%d)", (uint8_t *)&v7, 0x12u);
    }
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 48) + 32))(*(_QWORD *)(v3 + 48));
  }
  return result;
}

uint64_t QMICallAudioDriver::start(QMICallAudioDriver *this)
{
  return qmi::Client::start((QMICallAudioDriver *)((char *)this + 128));
}

uint64_t QMICallAudioDriver::bootstrap(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[5];
  _QWORD v15[5];
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  char v22;
  dispatch_object_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD *v29;

  std::string::basic_string[abi:ne180100]<0>(&v24, "CallModule: Audio Service");
  v2 = *(NSObject **)(a1 + 24);
  v23 = v2;
  if (v2)
    dispatch_retain(v2);
  std::string::basic_string[abi:ne180100]<0>(&v21, "voice");
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3), (v18 = v5) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v4;
  v20 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  Registry::getServerConnection(*(Registry **)(a1 + 96));
  qmi::Client::createWithQueueLocal();
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100](a1 + 144, &v28);
  qmi::Client::~Client((qmi::Client *)&v26);
  if (v16)
  {
    p_shared_owners = &v16->__shared_owners_;
    do
      v9 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v9 - 1, (unint64_t *)p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__shared_weak_count::__release_weak(v20);
  if (v18)
  {
    v10 = &v18->__shared_owners_;
    do
      v11 = __ldaxr((unint64_t *)v10);
    while (__stlxr(v11 - 1, (unint64_t *)v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v22 < 0)
    operator delete(v21);
  if (v23)
    dispatch_release(v23);
  if (v25 < 0)
    operator delete(v24);
  v12 = MEMORY[0x24BDAC760];
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 0x40000000;
  v15[2] = ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_11_9;
  v15[4] = a1;
  v26 = MEMORY[0x24BDAC760];
  v27 = 0x40000000;
  *(_QWORD *)&v28 = ___ZNK3qmi6Client13setIndHandlerIRKN5audio13AudioToneDone10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v28 + 1) = &unk_24D5D9500;
  v29 = v15;
  qmi::Client::setIndHandler();
  v14[0] = v12;
  v14[1] = 0x40000000;
  v14[2] = ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke_2;
  v14[3] = &__block_descriptor_tmp_12_13;
  v14[4] = a1;
  v26 = v12;
  v27 = 0x40000000;
  *(_QWORD *)&v28 = ___ZNK3qmi6Client13setIndHandlerIRKN5audio13BurstDtmfTone10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v28 + 1) = &unk_24D5D9528;
  v29 = v14;
  qmi::Client::setIndHandler();
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  return qmi::Client::setHandler();
}

void sub_2169BB84C(_Unwind_Exception *a1)
{
  uint64_t v1;
  NSObject *v3;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1 - 192);
  if (*(_QWORD *)(v1 - 152))
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)(v1 - 152));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v1 - 176);
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  v3 = *(NSObject **)(v1 - 120);
  if (v3)
    dispatch_release(v3);
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3;
  uint64_t TlvValue;
  int v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  __int16 v9;
  uint64_t result;
  NSObject *v11;
  uint64_t v12;
  uint8_t buf[16];

  v3 = *(_QWORD *)(a1 + 32);
  TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v12 = TlvValue;
    v8 = tlv::parseV<audio::tlv::CallProgressToneId>((unint64_t *)&v12, v5);
    if (v12)
    {
      v9 = v8;
      goto LABEL_6;
    }
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 17, v6, v7);
  }
  v9 = 255;
LABEL_6:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 64) + 24))(*(_QWORD *)(v3 + 64), 85);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 48) + 24))(*(_QWORD *)(v3 + 48));
  if (v9 == 7)
  {
    v11 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I This audio indication is for call waiting, going to see if we need to send another one now...", buf, 2u);
    }
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48));
  }
  return result;
}

uint64_t ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I DTMF Tones finished playing. Will process the remaining digits now.", v4, 2u);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 48) + 32))(*(_QWORD *)(v1 + 48));
}

void ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke_13(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I QMICallAudioDriver Audio Service client started", v2, 2u);
  }
}

uint64_t ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke_16(uint64_t a1)
{
  CallAudioDriver *v1;
  NSObject *v2;
  uint8_t v4[16];

  v1 = *(CallAudioDriver **)(a1 + 32);
  v2 = *((_QWORD *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I QMICallAudioDriver Audio Service client stopped", v4, 2u);
  }
  return CallAudioDriver::stopLocalDtmf(v1);
}

void ___ZN18QMICallAudioDriver9bootstrapEN8dispatch13group_sessionE_block_invoke_2_18(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I QMICallAudioDriver Audio Service client received a server error", v2, 2u);
  }
}

uint64_t QMICallAudioDriver::shutdown(uint64_t a1)
{
  return qmi::Client::stop((qmi::Client *)(a1 + 128));
}

void QMICallAudioDriver::~QMICallAudioDriver(QMICallAudioDriver *this)
{
  *(_QWORD *)this = &off_24D5D9228;
  qmi::Client::~Client((QMICallAudioDriver *)((char *)this + 128));
  CallAudioDriver::~CallAudioDriver(this);
}

{
  *(_QWORD *)this = &off_24D5D9228;
  qmi::Client::~Client((QMICallAudioDriver *)((char *)this + 128));
  CallAudioDriver::~CallAudioDriver(this);
  JUMPOUT(0x2199FEAC4);
}

uint64_t *std::shared_ptr<QMICallAudioDriver>::shared_ptr[abi:ne180100]<QMICallAudioDriver,std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D9390;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2169BBC48(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver*)#1}::operator() const(QMICallAudioDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2169BBC68(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMICallAudioDriver *,std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver *)#1},std::allocator<QMICallAudioDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMICallAudioDriver *,std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver *)#1},std::allocator<QMICallAudioDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver*)#1}::operator() const(QMICallAudioDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMICallAudioDriver *,std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver *)#1},std::allocator<QMICallAudioDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMICallAudioDriver> ctu::SharedSynchronizable<CallAudioDriver>::make_shared_ptr<QMICallAudioDriver>(QMICallAudioDriver*)::{lambda(QMICallAudioDriver*)#1}::operator() const(QMICallAudioDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallProgressToneInfo>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallProgressToneInfo>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallProgressToneInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  _WORD **result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::TdFragmentInfo>((_WORD **)a2, (_WORD *)(a1 + 10));
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallProgressToneInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D9408;
  *(_DWORD *)(result + 10) = *(_DWORD *)(a1 + 10);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio9StartTone8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169BBE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio8StopTone8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169BBF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<audio::tlv::BurstDtmfInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D94A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::BurstDtmfInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5D94A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::BurstDtmfInfo>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::NextHdrProtList>((_QWORD *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<audio::tlv::BurstDtmfInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  void *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::NextHdrProtList>((_BYTE **)a2, a1 + 16);
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::BurstDtmfInfo>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5D94A8;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_2169BC118(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN5audio13AudioToneDone10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169BC1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN5audio13BurstDtmfTone10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169BC2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *QMIDataContextDriverInterface::QMIDataContextDriverInterface(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v12;

  v5 = *(std::__shared_weak_count **)(a3 + 8);
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  BBDataContextDriverInterface::BBDataContextDriverInterface();
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v10 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v10 - 56)) = a2[3];
  return a1;
}

void sub_2169BC3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIDataContextDriverInterface::create(uint64_t *a1@<X0>, NSObject **a2@<X3>, uint64_t *a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _QWORD *a7@<X8>)
{
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  dispatch_object_t object;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;

  *a7 = 0;
  a7[1] = 0;
  if (*(_QWORD *)a5
  {
    v15 = (uint64_t)v14;
    v16 = *(std::__shared_weak_count **)(a5 + 8);
    v59 = v14;
    v60 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
  }
  else
  {
    v16 = 0;
    v15 = 0;
    v59 = 0;
    v60 = 0;
  }
  v19 = a1[1];
  v55 = *a1;
  v56 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *a2;
  object = v22;
  if (v22)
    dispatch_retain(v22);
  v23 = a3[1];
  v52 = *a3;
  v53 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = a4[1];
  v50 = *a4;
  v51 = (std::__shared_weak_count *)v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v48 = v15;
  v49 = v16;
  if (v16)
  {
    v29 = (unint64_t *)&v16->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  QMIDataContextDriver::create(&v55, &object, &v52, &v50, &v48, a6, &v57);
  v31 = v58;
  if (v57)
    v32 = v57 + 24;
  else
    v32 = 0;
  v57 = 0;
  v58 = 0;
  *a7 = v32;
  a7[1] = v31;
  v33 = v49;
  if (v49)
  {
    v34 = (unint64_t *)&v49->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v51;
  if (v51)
  {
    v37 = (unint64_t *)&v51->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v53;
  if (v53)
  {
    v40 = (unint64_t *)&v53->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (object)
    dispatch_release(object);
  v42 = v56;
  if (v56)
  {
    v43 = (unint64_t *)&v56->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v60;
  if (v60)
  {
    v46 = (unint64_t *)&v60->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_2169BC6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, dispatch_object_t object, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (object)
    dispatch_release(object);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

uint64_t QMIDataContextDriverInterface::runDad(QMIDataContextDriverInterface *this)
{
  return 1;
}

void QMIAttachApnCommandDriverFactory::create(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  dispatch_object_t object;
  _QWORD v15[2];

  v6 = (_QWORD *)operator new();
  v7 = *a1;
  v8 = (std::__shared_weak_count *)a1[1];
  v15[0] = v7;
  v15[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a2;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  QMIAttachApnCommandDriverFactory::QMIAttachApnCommandDriverFactory(v6, v15, &object);
  *a3 = 0;
  a3[1] = 0;
  std::shared_ptr<QMIAttachApnCommandDriverFactory>::shared_ptr[abi:ne180100]<QMIAttachApnCommandDriverFactory,std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory*)#1},void>(a3, (uint64_t)v6);
  if (object)
    dispatch_release(object);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2169BC7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  uint64_t v11;
  int v12;

  if (object)
    dispatch_release(object);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (v12)
    MEMORY[0x2199FEAC4](v11, 0x10E1C409C49465BLL);
  _Unwind_Resume(a1);
}

_QWORD *QMIAttachApnCommandDriverFactory::QMIAttachApnCommandDriverFactory(_QWORD *a1, _QWORD *a2, NSObject **a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE v10[16];

  *a1 = MEMORY[0x24BDC4630] + 16;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, (const char *)*MEMORY[0x24BDC3E90], "AttachAPN.QMIFactory");
  ctu::SharedLoggable<QMIAttachApnCommandDriverFactory,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>(a1 + 1, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *a1 = &off_24D5D9570;
  a1[6] = *a2;
  v6 = a2[1];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a1[10] = 0;
  a1[9] = 0;
  a1[8] = a1 + 9;
  return a1;
}

void sub_2169BC8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AttachApnCommandDriverFactory *v9;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  AttachApnCommandDriverFactory::~AttachApnCommandDriverFactory(v9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<QMIAttachApnCommandDriverFactory,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>(_QWORD *a1, NSObject **a2)
{
  NSObject *v3;
  _BYTE v5[8];

  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  a1[2] = *a2;
  if (v3)
    dispatch_retain(v3);
  a1[3] = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x2199FDF6C](v5);
  return a1;
}

void QMIAttachApnCommandDriverFactory::~QMIAttachApnCommandDriverFactory(QMIAttachApnCommandDriverFactory *this)
{
  *(_QWORD *)this = &off_24D5D9570;
  std::__tree<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::shared_ptr<Mav20PreferredNetworksCommandDriver>>>>::destroy(*((_QWORD **)this + 9));
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  MEMORY[0x2199FDF6C]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((_QWORD *)this + 1);
  AttachApnCommandDriverFactory::~AttachApnCommandDriverFactory(this);
}

{
  QMIAttachApnCommandDriverFactory::~QMIAttachApnCommandDriverFactory(this);
  JUMPOUT(0x2199FEAC4);
}

double QMIAttachApnCommandDriverFactory::createAttachApnCmdDriverForSim@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  capabilities::ct *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  __int128 v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  double result;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  __int128 v61;

  v7 = (_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    v8 = a1 + 72;
    do
    {
      v9 = *(_DWORD *)(v6 + 32);
      v10 = v9 < a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v6;
      else
        v11 = (uint64_t *)(v6 + 8);
      if (!v10)
        v8 = v6;
      v6 = *v11;
    }
    while (*v11);
    if ((_QWORD *)v8 != v7 && *(_DWORD *)(v8 + 32) <= a2)
    {
      v31 = *(_QWORD *)(v8 + 40);
      v30 = *(_QWORD *)(v8 + 48);
      *a3 = v31;
      a3[1] = v30;
      if (v30)
      {
        v32 = (unint64_t *)(v30 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      return result;
    }
  }
  v61 = 0uLL;
  v12 = (capabilities::ct *)capabilities::ct::supports5G((capabilities::ct *)a1);
  if ((_DWORD)v12)
  {
    if (capabilities::ct::getCDMASettingsSupport(v12))
    {
      v13 = *(std::__shared_weak_count **)(a1 + 56);
      v56 = *(_QWORD *)(a1 + 48);
      v57 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      Mav20QMIAttachApnCommandDriver::create(&v56, (uint64_t *)&v60);
      v16 = v60;
      v60 = 0uLL;
      v61 = v16;
      v17 = v57;
      if (!v57)
        goto LABEL_47;
      v18 = (unint64_t *)&v57->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
    }
    else
    {
      v34 = *(std::__shared_weak_count **)(a1 + 56);
      v58 = *(_QWORD *)(a1 + 48);
      v59 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      Mav30QMIAttachApnCommandDriver::create(&v58, (uint64_t *)&v60);
      v37 = v60;
      v60 = 0uLL;
      v61 = v37;
      v17 = v59;
      if (!v59)
        goto LABEL_47;
      v38 = (unint64_t *)&v59->__shared_owners_;
      do
        v19 = __ldaxr(v38);
      while (__stlxr(v19 - 1, v38));
    }
  }
  else if (capabilities::ct::supports2StepDataCallBringUp(v12))
  {
    v20 = *(std::__shared_weak_count **)(a1 + 56);
    v54 = *(_QWORD *)(a1 + 48);
    v55 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    Mav16QMIAttachApnCommandDriver::create(&v54, a2, (uint64_t *)&v60);
    v23 = v60;
    v60 = 0uLL;
    v61 = v23;
    v17 = v55;
    if (!v55)
      goto LABEL_47;
    v24 = (unint64_t *)&v55->__shared_owners_;
    do
      v19 = __ldaxr(v24);
    while (__stlxr(v19 - 1, v24));
  }
  else
  {
    v25 = *(std::__shared_weak_count **)(a1 + 56);
    v52 = *(_QWORD *)(a1 + 48);
    v53 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    QMIAttachApnCommandDriver::create(&v52, a2, (uint64_t *)&v60);
    v28 = v60;
    v60 = 0uLL;
    v61 = v28;
    v17 = v53;
    if (!v53)
      goto LABEL_47;
    v29 = (unint64_t *)&v53->__shared_owners_;
    do
      v19 = __ldaxr(v29);
    while (__stlxr(v19 - 1, v29));
  }
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_47:
  v39 = *v7;
  v40 = v7;
  if (*v7)
  {
    do
    {
      while (1)
      {
        v40 = (_QWORD *)v39;
        v41 = *(_DWORD *)(v39 + 32);
        if (v41 <= a2)
          break;
        v39 = *v40;
        v7 = v40;
        if (!*v40)
          goto LABEL_55;
      }
      if (v41 >= a2)
      {
        v44 = (char *)v40;
        goto LABEL_58;
      }
      v39 = v40[1];
    }
    while (v39);
    v7 = v40 + 1;
  }
LABEL_55:
  v44 = (char *)operator new(0x38uLL);
  *((_DWORD *)v44 + 8) = a2;
  *((_QWORD *)v44 + 5) = 0;
  *((_QWORD *)v44 + 6) = 0;
  *(_QWORD *)v44 = 0;
  *((_QWORD *)v44 + 1) = 0;
  *((_QWORD *)v44 + 2) = v40;
  *v7 = v44;
  v42 = **(_QWORD **)(a1 + 64);
  v43 = (uint64_t *)v44;
  if (v42)
  {
    *(_QWORD *)(a1 + 64) = v42;
    v43 = (uint64_t *)*v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v43);
  ++*(_QWORD *)(a1 + 80);
LABEL_58:
  v45 = v61;
  if (*((_QWORD *)&v61 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)v44 + 6);
  *(_OWORD *)(v44 + 40) = v45;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  result = *(double *)&v61;
  *(_OWORD *)a3 = v61;
  return result;
}

void sub_2169BCD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v7 - 64);
  _Unwind_Resume(a1);
}

void QMIAttachApnCommandDriverFactory::bootstrap(QMIAttachApnCommandDriverFactory *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  NSObject *v7;
  uint8_t v8[16];

  v2 = (char *)*((_QWORD *)this + 8);
  v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      QMIAttachApnCommandDriverBase::bootstrap_sync(*((Registry ***)v2 + 5));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  v7 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I QMIAttachApnCommandDriverFactory bootstrapped", v8, 2u);
  }
}

void QMIAttachApnCommandDriverFactory::start(QMIAttachApnCommandDriverFactory *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  BOOL v7;
  NSObject *v8;
  uint8_t v9[16];

  v2 = (char *)*((_QWORD *)this + 8);
  v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      v4 = *((_QWORD *)v2 + 5);
      AttachApnCommandDriver::start_sync((AttachApnCommandDriver *)v4);
      qmi::Client::start((qmi::Client *)(v4 + 96));
      v5 = (char *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v2 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  v8 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I QMIAttachApnCommandDriverFactory started", v9, 2u);
  }
}

void QMIAttachApnCommandDriverFactory::shutdown(QMIAttachApnCommandDriverFactory *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  BOOL v7;
  NSObject *v8;
  uint8_t v9[16];

  v2 = (char *)*((_QWORD *)this + 8);
  v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      v4 = *((_QWORD *)v2 + 5);
      AttachApnCommandDriver::shutdown_sync((AttachApnCommandDriver *)v4);
      qmi::Client::stop((qmi::Client *)(v4 + 96));
      v5 = (char *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v2 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  v8 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_216897000, v8, OS_LOG_TYPE_DEFAULT, "#I QMIAttachApnCommandDriverFactory shutdown", v9, 2u);
  }
}

uint64_t *std::shared_ptr<QMIAttachApnCommandDriverFactory>::shared_ptr[abi:ne180100]<QMIAttachApnCommandDriverFactory,std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D9658;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2169BD048(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory*)#1}::operator() const(QMIAttachApnCommandDriverFactory*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2169BD068(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIAttachApnCommandDriverFactory *,std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory *)#1},std::allocator<QMIAttachApnCommandDriverFactory>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<QMIAttachApnCommandDriverFactory *,std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory *)#1},std::allocator<QMIAttachApnCommandDriverFactory>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory*)#1}::operator() const(QMIAttachApnCommandDriverFactory*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMIAttachApnCommandDriverFactory *,std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory *)#1},std::allocator<QMIAttachApnCommandDriverFactory>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIAttachApnCommandDriverFactory> ctu::SharedSynchronizable<QMIAttachApnCommandDriverFactory>::make_shared_ptr<QMIAttachApnCommandDriverFactory>(QMIAttachApnCommandDriverFactory*)::{lambda(QMIAttachApnCommandDriverFactory*)#1}::operator() const(QMIAttachApnCommandDriverFactory*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void Mav20QMIDesenseCommandDriver::create(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  dispatch_object_t v8;

  v6 = operator new();
  v7 = *a2;
  v8 = v7;
  if (v7)
    dispatch_retain(v7);
  Mav20QMIDesenseCommandDriver::Mav20QMIDesenseCommandDriver(v6, a1, &v8);
  *a3 = 0;
  a3[1] = 0;
  std::shared_ptr<Mav20QMIDesenseCommandDriver>::shared_ptr[abi:ne180100]<Mav20QMIDesenseCommandDriver,std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver*)#1},void>(a3, v6);
  if (v7)
    dispatch_release(v7);
}

void sub_2169BD1C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v2;
  int v3;

  if (v2)
    dispatch_release(v2);
  if (v3)
    MEMORY[0x2199FEAC4](v1, 0xF1C40EE32BF51);
  _Unwind_Resume(exception_object);
}

uint64_t Mav20QMIDesenseCommandDriver::Mav20QMIDesenseCommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  NSObject *object;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  object = *a3;
  if (*a3)
    dispatch_retain(*a3);
  DesenseCommandDriver::DesenseCommandDriver();
  if (object)
    dispatch_release(object);
  v9[0] = &unk_24D5C4F88;
  v10 = v9;
  QmiSimInstanceLogger<Mav20QMIDesenseCommandDriver,ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::QmiSimInstanceLogger((capabilities::ct *)(a1 + 88), a2, (uint64_t)v9);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
    goto LABEL_9;
  }
  if (v10)
  {
    v6 = 5;
LABEL_9:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *(_QWORD *)a1 = &off_24D5D96B8;
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 96), *(os_log_s **)(a1 + 40));
  return a1;
}

void sub_2169BD308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  DesenseCommandDriver *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v17;

  v15 = v14;
  v17 = *v15;
  *v15 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  DesenseCommandDriver::~DesenseCommandDriver(v13);
  _Unwind_Resume(a1);
}

capabilities::ct *QmiSimInstanceLogger<Mav20QMIDesenseCommandDriver,ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::QmiSimInstanceLogger(capabilities::ct *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
  SimInstanceLogger<Mav20QMIDesenseCommandDriver,ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLogger(a1, a2, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_2169BD450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Mav20QMIDesenseCommandDriver::~Mav20QMIDesenseCommandDriver(Mav20QMIDesenseCommandDriver *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D5D96B8;
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DesenseCommandDriver::~DesenseCommandDriver(this);
}

{
  Mav20QMIDesenseCommandDriver::~Mav20QMIDesenseCommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

__int128 *Mav20QMIDesenseCommandDriver::bootstrap(uint64_t a1, uint64_t a2, xpc_object_t *a3, dispatch_object_t *a4)
{
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _DWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __int128 *result;
  uint64_t v37;
  NSObject *group;
  xpc_object_t object;
  std::__shared_weak_count *v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t (*v44)(_QWORD);
  __int128 v45;
  void *v46[2];
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *__p;
  char v52;
  dispatch_object_t v53;
  _QWORD v54[3];
  _QWORD *v55;
  _QWORD v56[3];
  _QWORD *v57;
  __int128 buf;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping", (uint8_t *)&buf, 2u);
  }
  v8 = *(std::__shared_weak_count **)(a2 + 8);
  v41 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  object = *a3;
  if (*a3)
    xpc_retain(*a3);
  else
    object = xpc_null_create();
  group = *a4;
  if (*a4)
  {
    dispatch_retain(*a4);
    dispatch_group_enter(group);
  }
  DesenseCommandDriver::bootstrap();
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  xpc_release(object);
  if (v41)
  {
    v11 = (unint64_t *)&v41->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  subscriber::makeSimSlotRange();
  v13 = v42;
  if (v42 != v43)
  {
    while ((v44(*v13) & 1) == 0)
    {
      if (++v13 == v43)
      {
        v13 = v43;
        break;
      }
    }
    while (v13 != v43)
    {
      if (*v13 == 1)
      {
        v14 = "Desense.1";
      }
      else if (*v13 == 2)
      {
        v14 = "Desense.2";
      }
      else
      {
        v14 = "Desense.?";
      }
      std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&buf, (_QWORD *)(a1 + 8));
      v16 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
      v15 = buf;
      if (*((_QWORD *)&buf + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&buf + 1) + 16);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        v19 = (unint64_t *)&v16->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      Registry::getServerConnection(*(Registry **)(a1 + 56));
      buf = 0u;
      v59 = 0u;
      std::string::basic_string[abi:ne180100]<0>(v46, v14);
      v21 = *(NSObject **)(a1 + 24);
      v53 = v21;
      if (v21)
        dispatch_retain(v21);
      std::string::basic_string[abi:ne180100]<0>(&__p, "registration");
      v49 = 0;
      v50 = 0;
      if (!v16)
        goto LABEL_47;
      v22 = std::__shared_weak_count::lock(v16);
      if (v22)
      {
        v23 = v22;
        p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
        do
          v25 = __ldxr(p_shared_weak_owners);
        while (__stxr(v25 + 1, p_shared_weak_owners));
        v49 = v15;
        v50 = v22;
        std::__shared_weak_count::__release_weak(v16);
        v26 = (unint64_t *)&v23->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (v27)
          goto LABEL_47;
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        v16 = v23;
      }
      else
      {
        v49 = 0;
        v50 = 0;
      }
      std::__shared_weak_count::__release_weak(v16);
LABEL_47:
      v48 = v45;
      v45 = 0uLL;
      qmi::Client::createWithQueueLocal();
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v50)
        std::__shared_weak_count::__release_weak(v50);
      if (v52 < 0)
        operator delete(__p);
      if (v53)
        dispatch_release(v53);
      if (SBYTE7(v47) < 0)
        operator delete(v46[0]);
      v46[0] = 0;
      v46[1] = 0;
      v47 = v59;
      v59 = 0uLL;
      qmi::ClientRouter::addClient();
      qmi::Client::~Client((qmi::Client *)v46);
      qmi::ClientRouter::get();
      qmi::Client::~Client((qmi::Client *)&buf);
      v31 = v13 + 1;
      v13 = v43;
      if (v31 != v43)
      {
        v13 = v31;
        while ((v44(*v13) & 1) == 0)
        {
          if (++v13 == v43)
          {
            v13 = v43;
            break;
          }
        }
      }
    }
  }
  v56[0] = &off_24D5D9800;
  v56[1] = a1;
  v57 = v56;
  qmi::ClientRouter::setHandler();
  v32 = v57;
  if (v57 == v56)
  {
    v33 = 4;
    v32 = v56;
  }
  else
  {
    if (!v57)
      goto LABEL_71;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_71:
  v54[0] = &off_24D5D9880;
  v54[1] = a1;
  v55 = v54;
  qmi::ClientRouter::setHandler();
  v34 = v55;
  if (v55 == v54)
  {
    v35 = 4;
    v34 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_76;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_76:
  *(_QWORD *)&buf = &off_24D5D9900;
  *((_QWORD *)&buf + 1) = a1;
  *((_QWORD *)&v59 + 1) = &buf;
  qmi::ClientRouter::setIndHandlerInternal();
  result = (__int128 *)*((_QWORD *)&v59 + 1);
  if (*((__int128 **)&v59 + 1) == &buf)
  {
    v37 = 4;
    result = &buf;
  }
  else
  {
    if (!*((_QWORD *)&v59 + 1))
      return result;
    v37 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v37))();
}

void sub_2169BDA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group, xpc_object_t object, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,dispatch_object_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v47;
  uint64_t v48;

  v47 = *(_QWORD **)(v45 - 120);
  if (v47 == v44)
  {
    v48 = 4;
    v47 = (_QWORD *)(v45 - 144);
  }
  else
  {
    if (!v47)
      goto LABEL_6;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t Mav20QMIDesenseCommandDriver::start(Mav20QMIDesenseCommandDriver *this)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I Starting", v3, 2u);
  }
  return qmi::ClientRouter::start();
}

uint64_t Mav20QMIDesenseCommandDriver::shutdown(uint64_t a1)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_216897000, v1, OS_LOG_TYPE_DEFAULT, "#I Shutting down", v3, 2u);
  }
  return qmi::ClientRouter::stop();
}

void Mav20QMIDesenseCommandDriver::registerFrequencyReporting(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  uint8_t buf[8];
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  void *v25;
  char *v26;
  std::__shared_weak_count *v27;
  char *v28;
  std::__shared_weak_count *v29;
  _QWORD aBlock[5];

  v4 = *(NSObject **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I Register for Frequency Reporting", buf, 2u);
  }
  memset(v21, 0, sizeof(v21));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v21);
  *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::FrequencyRegistering>(v21, 176) = 2;
  if ((a2 - 1) >= 3)
    v5 = 0;
  else
    v5 = a2;
  v6 = qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>((uint64_t)&v19, v5, v6);
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v8 = v7 + 1;
  v7[2] = 0;
  *v7 = &off_24D5D9AA8;
  v7[3] = a1;
  *((_DWORD *)v7 + 8) = a2;
  v28 = (char *)(v7 + 3);
  v29 = (std::__shared_weak_count *)v7;
  v9 = v20;
  v10 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v23 = 1174405120;
  v24 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN28Mav20QMIDesenseCommandDriver26registerFrequencyReportingEN10subscriber7SimSlotEE3__1EEOS1_OT__block_invoke;
  v25 = &__block_descriptor_tmp_15_16;
  v26 = (char *)(v7 + 3);
  v27 = (std::__shared_weak_count *)v7;
  do
    v11 = __ldxr(v8);
  while (__stxr(v11 + 1, v8));
  aBlock[0] = v10;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_20;
  aBlock[3] = &unk_24D5D9AF0;
  aBlock[4] = buf;
  *(_QWORD *)(v9 + 32) = _Block_copy(aBlock);
  v12 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v29;
  if (v29)
  {
    v16 = (unint64_t *)&v29->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v20;
  v20 = 0;
  if (v18)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v20, v18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v21);
}

void sub_2169BDF08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v3 - 88);
  v5 = v6;
  v6 = 0;
  if (v5)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)va, v5);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void Mav20QMIDesenseCommandDriver::setFrequencyReportingMode(uint64_t a1, int a2, char a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  char *v22;
  std::__shared_weak_count *v23;
  _QWORD aBlock[5];
  __int128 buf;
  void (*v26)(uint64_t, qmi::ResponseBase *);
  void *v27;
  char *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = *(NSObject **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = asString();
    _os_log_impl(&dword_216897000, v6, OS_LOG_TYPE_DEFAULT, "#I Set Frequency reporting mode: %s", (uint8_t *)&buf, 0xCu);
  }
  memset(v21, 0, sizeof(v21));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v21);
  *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::FrequencyReporting>(v21, 176) = a3;
  v7 = qmi::ClientRouter::get();
  v8 = operator new();
  *(_QWORD *)v8 = v7;
  *(_QWORD *)(v8 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v8 + 16) = 25000;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v20 = v8;
  v9 = operator new(0x28uLL);
  v9[1] = 0;
  v10 = v9 + 1;
  v9[2] = 0;
  *v9 = &off_24D5D9BA0;
  v9[3] = a1;
  *((_DWORD *)v9 + 8) = a2;
  v22 = (char *)(v9 + 3);
  v23 = (std::__shared_weak_count *)v9;
  v11 = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf = MEMORY[0x24BDAC760];
  *((_QWORD *)&buf + 1) = 1174405120;
  v26 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN28Mav20QMIDesenseCommandDriver25setFrequencyReportingModeEN10subscriber7SimSlotE22FrequencyReportingModeE3__1EEOS1_OT__block_invoke;
  v27 = &__block_descriptor_tmp_17_11;
  v28 = (char *)(v9 + 3);
  v29 = (std::__shared_weak_count *)v9;
  do
    v12 = __ldxr(v10);
  while (__stxr(v12 + 1, v10));
  aBlock[0] = v11;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_20;
  aBlock[3] = &unk_24D5D9AF0;
  aBlock[4] = &buf;
  *(_QWORD *)(v8 + 32) = _Block_copy(aBlock);
  v13 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v20;
  v20 = 0;
  if (v19)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v20, v19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v21);
}

void sub_2169BE1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (a3)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v3, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void Mav20QMIDesenseCommandDriver::processFrequencyInd_sync(uint64_t a1, unsigned int a2, qmi::MessageBase *this)
{
  uint64_t TlvValue;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  char *v29;
  char *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 *v35;
  char *v36;
  char *v37;
  unsigned __int8 *v38;
  int v39;
  unsigned __int8 *v40;
  int v41;
  unsigned __int8 *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  unsigned __int8 *v53;
  char *v54;
  char *v55;
  unsigned __int8 *v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  unsigned __int8 *v60;
  char *v61;
  char *v62;
  unsigned __int8 *v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  unsigned __int8 *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[3];
  _QWORD **v73;
  _QWORD *v74[2];
  char *v75;
  char *v76;
  uint64_t v77;
  unsigned __int8 *v78;

  TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    v8 = TlvValue;
    v9 = v7;
    v75 = (char *)TlvValue;
    v10 = tlv::parseV<nas::tlv::BBStatus>((unint64_t *)&v75, v7);
    if (v75)
    {
      if ((v10 & 0xFD) != 0)
      {
        if (a2 - 1 >= 3)
          v11 = 0;
        else
          v11 = a2;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 48))(*(_QWORD *)(a1 + 72), v11);
        goto LABEL_16;
      }
    }
    else
    {
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 177, v8, v9);
    }
  }
  v12 = qmi::MessageBase::findTlvValue(this);
  if (v12)
  {
    v14 = v12;
    v15 = v13;
    v75 = (char *)v12;
    v16 = tlv::parseV<nas::tlv::BBCampUplinkFreq>((unint64_t *)&v75, v13);
    if (v75)
    {
      v18 = v17;
      if (a2 - 1 >= 3)
        v19 = 0;
      else
        v19 = a2;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), v19, v16, v18);
    }
    else
    {
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 187, v14, v15);
    }
  }
LABEL_16:
  v74[0] = 0;
  v74[1] = 0;
  v73 = v74;
  v20 = qmi::MessageBase::findTlvValue(this);
  v22 = v20;
  if (v20)
  {
    v23 = v21;
    v75 = (char *)v20;
    tlv::parseV<nas::tlv::BBCampFreq>((unint64_t *)&v75, v21);
    if (v75)
      DesenseCommandDriver::addSingleFrequencyToMap();
    else
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 178, v22, v23);
  }
  v24 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  v26 = v24;
  if (v24)
  {
    v27 = v25;
    v77 = 0;
    v78 = v24;
    v75 = 0;
    v76 = 0;
    tlv::parseV<nas::tlv::BBHoppingList>(&v78, v25, (uint64_t *)&v75);
    v28 = v78;
    if (v78)
    {
      v29 = v75;
      v30 = v76;
      if (v75 == v76)
      {
LABEL_25:
        if (v29)
        {
          v76 = v29;
          operator delete(v29);
        }
        if (!v28)
          ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 180, v26, v27);
        goto LABEL_29;
      }
      do
      {
        DesenseCommandDriver::addSingleFrequencyToMap();
        v29 += 16;
      }
      while (v29 != v30);
    }
    v29 = v75;
    goto LABEL_25;
  }
LABEL_29:
  v31 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  v33 = v31;
  if (!v31)
    goto LABEL_38;
  v34 = v32;
  v77 = 0;
  v78 = v31;
  v75 = 0;
  v76 = 0;
  tlv::parseV<nas::tlv::BBNeighborList>(&v78, v32, (uint64_t *)&v75);
  v35 = v78;
  if (!v78)
    goto LABEL_33;
  v36 = v75;
  v37 = v76;
  if (v75 != v76)
  {
    do
    {
      DesenseCommandDriver::addSingleFrequencyToMap();
      v36 += 16;
    }
    while (v36 != v37);
LABEL_33:
    v36 = v75;
  }
  if (v36)
  {
    v76 = v36;
    operator delete(v36);
  }
  if (!v35)
    ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 181, v33, v34);
LABEL_38:
  v38 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  v40 = v38;
  if (!v38)
    goto LABEL_47;
  v41 = v39;
  v77 = 0;
  v78 = v38;
  v75 = 0;
  v76 = 0;
  tlv::parseV<nas::tlv::BBHRPLMNList>(&v78, v39, (uint64_t *)&v75);
  v42 = v78;
  if (!v78)
    goto LABEL_42;
  v43 = v75;
  v44 = v76;
  if (v75 != v76)
  {
    do
    {
      DesenseCommandDriver::addSingleFrequencyToMap();
      v43 += 16;
    }
    while (v43 != v44);
LABEL_42:
    v43 = v75;
  }
  if (v43)
  {
    v76 = v43;
    operator delete(v43);
  }
  if (!v42)
    ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 182, v40, v41);
LABEL_47:
  v45 = qmi::MessageBase::findTlvValue(this);
  v47 = v45;
  if (v45)
  {
    v48 = v46;
    v75 = (char *)v45;
    tlv::parseV<nas::tlv::BBCampSecondFreq>((unint64_t *)&v75, v46);
    if (v75)
      DesenseCommandDriver::addSingleFrequencyToMap();
    else
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 185, v47, v48);
  }
  v49 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  v51 = v49;
  if (v49)
  {
    v52 = v50;
    v77 = 0;
    v78 = v49;
    v75 = 0;
    v76 = 0;
    tlv::parseV<nas::tlv::BBNeighborSecondList>(&v78, v50, (uint64_t *)&v75);
    v53 = v78;
    if (v78)
    {
      v54 = v75;
      v55 = v76;
      if (v75 == v76)
      {
LABEL_56:
        if (v54)
        {
          v76 = v54;
          operator delete(v54);
        }
        if (!v53)
          ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 186, v51, v52);
        goto LABEL_60;
      }
      do
      {
        DesenseCommandDriver::addSingleFrequencyToMap();
        v54 += 16;
      }
      while (v54 != v55);
    }
    v54 = v75;
    goto LABEL_56;
  }
LABEL_60:
  v56 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  v58 = v56;
  if (!v56)
    goto LABEL_69;
  v59 = v57;
  v77 = 0;
  v78 = v56;
  v75 = 0;
  v76 = 0;
  tlv::parseV<nas::tlv::DLSCellFrequencyList>(&v78, v57, (uint64_t *)&v75);
  v60 = v78;
  if (!v78)
    goto LABEL_64;
  v61 = v75;
  v62 = v76;
  if (v75 != v76)
  {
    do
    {
      DesenseCommandDriver::addSingleFrequencyToMap();
      v61 += 16;
    }
    while (v61 != v62);
LABEL_64:
    v61 = v75;
  }
  if (v61)
  {
    v76 = v61;
    operator delete(v61);
  }
  if (!v60)
    ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 188, v58, v59);
LABEL_69:
  v63 = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
  v65 = v63;
  if (!v63)
    goto LABEL_78;
  v66 = v64;
  v77 = 0;
  v78 = v63;
  v75 = 0;
  v76 = 0;
  tlv::parseV<nas::tlv::BBSearchFreqList>(&v78, v64, (uint64_t *)&v75);
  v67 = v78;
  if (!v78)
    goto LABEL_73;
  v68 = v75;
  v69 = v76;
  if (v75 != v76)
  {
    do
    {
      DesenseCommandDriver::addSingleFrequencyToMap();
      v68 += 16;
    }
    while (v68 != v69);
LABEL_73:
    v68 = v75;
  }
  if (v68)
  {
    v76 = v68;
    operator delete(v68);
  }
  if (!v67)
    ((void (*)(_QWORD, uint64_t, unsigned __int8 *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)this, 190, v65, v66);
LABEL_78:
  v70 = *(_QWORD *)(a1 + 72);
  std::map<unsigned long long,DesenseFreq>::map[abi:ne180100](v72, (uint64_t)&v73);
  if (a2 - 1 >= 3)
    v71 = 0;
  else
    v71 = a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v70 + 32))(v70, v71, v72);
  std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy((uint64_t)v72, (_QWORD *)v72[1]);
  std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy((uint64_t)&v73, v74[0]);
}

void sub_2169BE868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy((uint64_t)&a9, a10);
  std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<Mav20QMIDesenseCommandDriver>::shared_ptr[abi:ne180100]<Mav20QMIDesenseCommandDriver,std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5D9760;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2169BE94C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver*)#1}::operator() const(Mav20QMIDesenseCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2169BE96C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Mav20QMIDesenseCommandDriver *,std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver *)#1},std::allocator<Mav20QMIDesenseCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<Mav20QMIDesenseCommandDriver *,std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver *)#1},std::allocator<Mav20QMIDesenseCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver*)#1}::operator() const(Mav20QMIDesenseCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<Mav20QMIDesenseCommandDriver *,std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver *)#1},std::allocator<Mav20QMIDesenseCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav20QMIDesenseCommandDriver> ctu::SharedSynchronizable<DesenseCommandDriver>::make_shared_ptr<Mav20QMIDesenseCommandDriver>(Mav20QMIDesenseCommandDriver*)::{lambda(Mav20QMIDesenseCommandDriver*)#1}::operator() const(Mav20QMIDesenseCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

capabilities::ct *SimInstanceLogger<Mav20QMIDesenseCommandDriver,ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLogger(capabilities::ct *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  if ((capabilities::ct::supportsGemini(a1) & 1) == 0)
  {
    v5 = (_QWORD *)operator new();
    v6 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v5;
    *v5 = &off_24D5D97C0;
    v5[1] = (char *)a1 - 88;
    if (!v6)
      return a1;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (*(_QWORD *)a1)
    return a1;
  v7 = (_QWORD *)operator new();
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
  SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLoggerDefault(v7);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_10;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_10:
  v10 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v7;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

void sub_2169BEB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  MEMORY[0x2199FEAC4](v14, 0x10A1C40FF1576FELL);
  v19 = *v13;
  *v13 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  _Unwind_Resume(a1);
}

void SimInstanceLoggable<Mav20QMIDesenseCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t SimInstanceLoggable<Mav20QMIDesenseCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 40;
}

void std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D9800;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D9800;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0>,void ()(qmi::SubscriptionType)>::operator()(capabilities::ct *a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  _QWORD v20[5];
  std::__shared_weak_count *v21;
  _QWORD aBlock[5];

  v2 = *a2;
  v3 = *((_QWORD *)a1 + 1);
  if (capabilities::ct::supportsGemini(a1))
  {
    memset(v19, 0, sizeof(v19));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
    *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::SubType>(v19, 1) = v2 == 2;
    v4 = qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<nas::BindSubscription::Request>((uint64_t)&v17, v2, v4);
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D99B0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
    LODWORD(v5[1].__shared_owners_) = v2;
    v7 = v18;
    v8 = MEMORY[0x24BDAC760];
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 1174405120;
    v20[2] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN28Mav20QMIDesenseCommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
    v20[3] = &__block_descriptor_tmp_27;
    v20[4] = v5 + 1;
    v21 = v5;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    aBlock[0] = v8;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
    aBlock[3] = &unk_24D5D99F8;
    aBlock[4] = v20;
    *(_QWORD *)(v7 + 32) = _Block_copy(aBlock);
    v10 = v21;
    if (v21)
    {
      v11 = (unint64_t *)&v21->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v14 = v18;
    v18 = 0;
    if (v14)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v18, v14);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
  }
  if (v2 - 1 >= 3)
    v15 = 0;
  else
    v15 = v2;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 72) + 16))(*(_QWORD *)(v3 + 72), v15, 1);
}

void sub_2169BEE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  std::__shared_weak_count *v21;
  unint64_t *v22;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v24 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v27 = __ldaxr(v22);
  while (__stlxr(v27 - 1, v22));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  v28 = a10;
  a10 = 0;
  if (v28)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D9880;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D9880;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  if ((*a2 - 1) >= 3)
    v3 = 0;
  else
    v3 = *a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, v3, 0);
}

uint64_t std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_1>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3>(unsigned short,Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x2199FEAC4);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3>(unsigned short,Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24D5D9900;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3>(unsigned short,Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24D5D9900;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3>(unsigned short,Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  unsigned int v4;
  uint64_t v6;
  void *v7[3];
  void *__p;
  void *v9;
  uint64_t v10;

  v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v9 = 0;
    v10 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v7, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
  }
  v6 = *(_QWORD *)(a1 + 8);
  nas::SetFreqReportMode::RespInd::RespInd((qmi::MessageBase *)&__p, v7);
  Mav20QMIDesenseCommandDriver::processFrequencyInd_sync(v6, v4, (qmi::MessageBase *)&__p);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&__p);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_2169BF140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3>(unsigned short,Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3>(unsigned short,Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(Mav20QMIDesenseCommandDriver::bootstrap(std::shared_ptr<DesenseCommandDriverDelegateInterface>,xpc::endpoint,dispatch::group_session)::$_3 &&,QMIServiceMsg const)>::target_type()
{
}

qmi::MessageBase *nas::SetFreqReportMode::RespInd::RespInd(qmi::MessageBase *a1, _QWORD *a2)
{
  _QWORD v4[3];

  qmi::Indication<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::Indication((qmi::MessageBase *)v4, a2);
  qmi::RespInd<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::RespInd(a1, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
  return a1;
}

void sub_2169BF21C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::RespInd<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::RespInd(qmi::MessageBase *this, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)this = *a2;
  v3 = a2[2];
  *((_QWORD *)this + 1) = a2[1];
  *((_QWORD *)this + 2) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  qmi::MessageBase::validateMsgId(this);
  return this;
}

void sub_2169BF284(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Indication<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::Indication(qmi::MessageBase *this, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)this = *a2;
  v3 = a2[2];
  *((_QWORD *)this + 1) = a2[1];
  *((_QWORD *)this + 2) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  qmi::MessageBase::validateMsgId(this);
  return this;
}

void sub_2169BF2EC(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN28Mav20QMIDesenseCommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(uint64_t **)(a1 + 32);
    v4 = *v3;
    v5 = *((_DWORD *)v3 + 2);
    if (v5 - 1 >= 3)
      v6 = 0;
    else
      v6 = v5;
    v7 = *(NSObject **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 88) + 16))(*(_QWORD *)(v4 + 88), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = qmi::asString();
      v9 = *(_DWORD *)(a2 + 4);
      v10 = 136315394;
      v11 = v8;
      v12 = 1024;
      v13 = v9;
      _os_log_error_impl(&dword_216897000, v7, OS_LOG_TYPE_ERROR, "Error binding subscription: %s (0x%x)", (uint8_t *)&v10, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN28Mav20QMIDesenseCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN28Mav20QMIDesenseCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<Mav20QMIDesenseCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D99B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20QMIDesenseCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<Mav20QMIDesenseCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D99B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2169BF4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::FrequencyRegistering>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::FrequencyRegistering>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::FrequencyRegistering>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::FrequencyRegistering>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_24D5D9A40;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyRegistering>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyRegistering>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyRegistering>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyRegistering>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D9A40;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN28Mav20QMIDesenseCommandDriver26registerFrequencyReportingEN10subscriber7SimSlotEE3__1EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v3;
  NSObject *v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD ***)v2;
  if (*(_DWORD *)(a2 + 4))
  {
    v5 = *(NSObject **)(*(uint64_t (**)(_QWORD *, _QWORD))(*v3[11] + 16))(v3[11], *(unsigned int *)(v2 + 8));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(a2 + 4);
      v7[0] = 67109378;
      v7[1] = v6;
      v8 = 2080;
      v9 = qmi::asString();
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#N Could not register with stop report: 0x%x (%s)", (uint8_t *)v7, 0x12u);
    }
  }
  else
  {
    ((void (*)(_QWORD **, _QWORD, uint64_t))(*v3)[3])(v3, *(unsigned int *)(v2 + 8), 1);
  }
}

uint64_t __copy_helper_block_e8_32c114_ZTSNSt3__110shared_ptrIZN28Mav20QMIDesenseCommandDriver26registerFrequencyReportingEN10subscriber7SimSlotEE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c114_ZTSNSt3__110shared_ptrIZN28Mav20QMIDesenseCommandDriver26registerFrequencyReportingEN10subscriber7SimSlotEE3__1EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<Mav20QMIDesenseCommandDriver::registerFrequencyReporting(subscriber::SimSlot)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::registerFrequencyReporting(subscriber::SimSlot)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D9AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20QMIDesenseCommandDriver::registerFrequencyReporting(subscriber::SimSlot)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::registerFrequencyReporting(subscriber::SimSlot)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D9AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::FrequencyReporting>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::FrequencyReporting>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::FrequencyReporting>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::FrequencyReporting>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_24D5D9B38;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyReporting>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyReporting>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyReporting>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::FrequencyReporting>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5D9B38;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN28Mav20QMIDesenseCommandDriver25setFrequencyReportingModeEN10subscriber7SimSlotE22FrequencyReportingModeE3__1EEOS1_OT__block_invoke(uint64_t a1, qmi::ResponseBase *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD v9[2];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)v3;
  if (*((_DWORD *)a2 + 1))
  {
    v5 = *(NSObject **)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 88) + 16))(*(_QWORD *)(v4 + 88), *(unsigned int *)(v3 + 8));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((_DWORD *)a2 + 1);
      v9[0] = 67109378;
      v9[1] = v6;
      v10 = 2080;
      v11 = qmi::asString();
      _os_log_impl(&dword_216897000, v5, OS_LOG_TYPE_DEFAULT, "#N Could not set frequency reporting mode: 0x%x (%s)", (uint8_t *)v9, 0x12u);
    }
  }
  else
  {
    v7 = *(_DWORD *)(v3 + 8);
    if (v7 - 1 >= 3)
      v8 = 0;
    else
      v8 = v7;
    nas::SetFreqReportMode::RespInd::RespInd((nas::SetFreqReportMode::RespInd *)v9, a2);
    Mav20QMIDesenseCommandDriver::processFrequencyInd_sync(v4, v8, (qmi::MessageBase *)v9);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)v9);
  }
}

void sub_2169BFBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c137_ZTSNSt3__110shared_ptrIZN28Mav20QMIDesenseCommandDriver25setFrequencyReportingModeEN10subscriber7SimSlotE22FrequencyReportingModeE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c137_ZTSNSt3__110shared_ptrIZN28Mav20QMIDesenseCommandDriver25setFrequencyReportingModeEN10subscriber7SimSlotE22FrequencyReportingModeE3__1EE(uint64_t a1)
{
  return std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<Mav20QMIDesenseCommandDriver::setFrequencyReportingMode(subscriber::SimSlot,FrequencyReportingMode)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::setFrequencyReportingMode(subscriber::SimSlot,FrequencyReportingMode)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D9BA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mav20QMIDesenseCommandDriver::setFrequencyReportingMode(subscriber::SimSlot,FrequencyReportingMode)::$_1,std::allocator<Mav20QMIDesenseCommandDriver::setFrequencyReportingMode(subscriber::SimSlot,FrequencyReportingMode)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5D9BA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

nas::SetFreqReportMode::RespInd *nas::SetFreqReportMode::RespInd::RespInd(nas::SetFreqReportMode::RespInd *this, const qmi::ResponseBase *a2)
{
  _QWORD v4[3];

  qmi::Response<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::Response((qmi::MessageBase *)v4, a2);
  qmi::RespInd<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::RespInd(this, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
  return this;
}

void sub_2169BFCBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Response<(unsigned short)21851,nas::SetFreqReportMode::RespIndTLVList>::Response(qmi::MessageBase *this, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)this = *a2;
  v3 = a2[2];
  *((_QWORD *)this + 1) = a2[1];
  *((_QWORD *)this + 2) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  qmi::MessageBase::validateMsgId(this);
  return this;
}

void sub_2169BFD24(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long long,DesenseFreq>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long long,DesenseFreq>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,DesenseFreq>,std::__tree_node<std::__value_type<unsigned long long,DesenseFreq>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_2169BFD74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long long,DesenseFreq>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,DesenseFreq>,std::__tree_node<std::__value_type<unsigned long long,DesenseFreq>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned long long,DesenseFreq>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DesenseFreq>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DesenseFreq>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,DesenseFreq> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,DesenseFreq>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DesenseFreq>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DesenseFreq>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,DesenseFreq> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, _OWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v6 = (void **)std::__tree<std::__value_type<unsigned long long,DesenseFreq>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DesenseFreq>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DesenseFreq>>>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<unsigned long long,DesenseFreq>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DesenseFreq>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DesenseFreq>>>::__find_equal<unsigned long long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t VinylTransaction::dumpLongDescription(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  std::string __p;

  VinylTransaction::shortDescription(&__p, a1);
  MEMORY[0x2199FE0C8](a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  MEMORY[0x2199FE0BC](a2, " outBytes=");
  result = ctu::operator<<();
  if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 32))
  {
    MEMORY[0x2199FE0BC](a2, " (");
    v5 = ctu::operator<<();
    MEMORY[0x2199FE0BC](v5, "/");
    v6 = ctu::operator<<();
    return MEMORY[0x2199FE0BC](v6, " seg sent)");
  }
  return result;
}

void sub_2169C0110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void VinylTransaction::shortDescription(std::string *this, uint64_t a2)
{
  char *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *p_p;
  std::string::size_type size;
  char *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string __p;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;

  if (*(_BYTE *)(a2 + 17))
  {
    v4 = (char *)vinyl::asString(*(unsigned __int8 *)(a2 + 8));
    std::string::basic_string[abi:ne180100]<0>(&v20, v4);
    v5 = std::string::insert(&v20, 0, "Transaction[", 0xCuLL);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v21, ", txid=", 7uLL);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *(_DWORD *)(a2 + 12));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    v11 = (char *)vinyl::asString(*(unsigned __int8 *)(a2 + 8));
    std::string::basic_string[abi:ne180100]<0>(&v20, v11);
    v12 = std::string::insert(&v20, 0, "Transaction[", 0xCuLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v21, ", txid=", 7uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *(_DWORD *)(a2 + 12));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
  }
  v16 = std::string::append(&v22, (const std::string::value_type *)p_p, size);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v23, "]", 1uLL);
  *this = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_2169C0360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t VinylTransactionWithDataResult::dumpLongDescription(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  VinylTransaction::dumpLongDescription(a1, a2);
  MEMORY[0x2199FE0BC](a2, " inBytes=");
  result = ctu::operator<<();
  if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72) || *(_DWORD *)(a1 + 92))
  {
    MEMORY[0x2199FE0BC](a2, " (");
    v5 = ctu::operator<<();
    MEMORY[0x2199FE0BC](v5, "/");
    ctu::operator<<();
    JUMPOUT(0x2199FE0BCLL);
  }
  return result;
}

double VinylQMICommandDriver::create@<D0>(capabilities::ct *a1@<X0>, _QWORD *a2@<X8>)
{
  capabilities::ct *v4;
  int v5;
  double result;
  __int128 v7;

  if ((unint64_t)capabilities::ct::supportedVinylSlotCount(a1) >> 31)
    __assert_rtn("create", "VinylQMICommandDriver.cpp", 137, "capabilities::ct::supportedVinylSlotCount() <= std::numeric_limits<int>::max()");
  *a2 = 0;
  a2[1] = 0;
  v4 = (capabilities::ct *)operator new();
  v5 = capabilities::ct::supportedVinylSlotCount(v4);
  VinylQMICommandDriver::VinylQMICommandDriver((uint64_t)v4, a1, v5);
  v7 = 0uLL;
  std::shared_ptr<VinylCommandDriver>::shared_ptr[abi:ne180100]<VinylCommandDriver,std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver*)#1},void>((uint64_t *)&v7, (uint64_t)v4);
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  return result;
}

void sub_2169C052C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10F3C40BB43328BLL);
  _Unwind_Resume(a1);
}

uint64_t VinylQMICommandDriver::VinylQMICommandDriver(uint64_t a1, _QWORD *a2, int a3)
{
  capabilities::ct *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void **v10;
  int v11;
  int v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  char *v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  int v39;

  VinylCommandDriver::VinylCommandDriver((VinylCommandDriver *)a1, "VinylQMICommandDriver");
  *(_QWORD *)v6 = &off_24D5D9BF0;
  v7 = a2[1];
  *((_QWORD *)v6 + 10) = *a2;
  *((_QWORD *)v6 + 11) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  v10 = (void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = 1;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  if (a3 == 1)
  {
    capabilities::ct::defaultVinylSlotID(v6);
    v11 = VinylSlotIdFromInt();
    v12 = v11;
    v14 = *(char **)(a1 + 144);
    v13 = *(_QWORD *)(a1 + 152);
    if ((unint64_t)v14 >= v13)
    {
      v30 = (char *)*v10;
      v31 = (v14 - (_BYTE *)*v10) >> 2;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 62)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v33 = v13 - (_QWORD)v30;
      if (v33 >> 1 > v32)
        v32 = v33 >> 1;
      v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL;
      v35 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v34)
        v35 = v32;
      if (v35)
      {
        v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(v35);
        v30 = *(char **)(a1 + 136);
        v14 = *(char **)(a1 + 144);
      }
      else
      {
        v36 = 0;
      }
      v37 = (_DWORD *)(v35 + 4 * v31);
      v38 = v35 + 4 * v36;
      *v37 = v12;
      v15 = v37 + 1;
      while (v14 != v30)
      {
        v39 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--v37 = v39;
      }
      *(_QWORD *)(a1 + 136) = v37;
      *(_QWORD *)(a1 + 144) = v15;
      *(_QWORD *)(a1 + 152) = v38;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(_DWORD *)v14 = v11;
      v15 = v14 + 4;
    }
    *(_QWORD *)(a1 + 144) = v15;
  }
  else if (a3 >= 1)
  {
    v16 = 0;
    do
    {
      ++v16;
      v17 = VinylSlotIdFromInt();
      v18 = v17;
      v20 = *(char **)(a1 + 144);
      v19 = *(_QWORD *)(a1 + 152);
      if ((unint64_t)v20 >= v19)
      {
        v22 = (char *)*v10;
        v23 = (v20 - (_BYTE *)*v10) >> 2;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v25 = v19 - (_QWORD)v22;
        if (v25 >> 1 > v24)
          v24 = v25 >> 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(v26);
          v22 = *(char **)(a1 + 136);
          v20 = *(char **)(a1 + 144);
        }
        else
        {
          v27 = 0;
        }
        v28 = (_DWORD *)(v26 + 4 * v23);
        *v28 = v18;
        v21 = v28 + 1;
        while (v20 != v22)
        {
          v29 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          *--v28 = v29;
        }
        *(_QWORD *)(a1 + 136) = v28;
        *(_QWORD *)(a1 + 144) = v21;
        *(_QWORD *)(a1 + 152) = v26 + 4 * v27;
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_DWORD *)v20 = v17;
        v21 = v20 + 4;
      }
      *(_QWORD *)(a1 + 144) = v21;
    }
    while (v16 != a3);
  }
  return a1;
}

void sub_2169C079C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  VinylCommandDriver *v10;
  uint64_t v11;
  void **v12;
  void **v13;
  void **v15;
  uint64_t v16;
  void *v17;

  v15 = (void **)*((_QWORD *)v10 + 26);
  if (v15 == v12 + 11)
  {
    v16 = 4;
    v15 = v12 + 11;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v16 = 5;
  }
  (*((void (**)(void))*v15 + v16))();
LABEL_6:
  a10 = v12 + 8;
  std::vector<std::unique_ptr<VinylTransaction>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v17 = *v13;
  if (*v13)
  {
    *((_QWORD *)v10 + 18) = v17;
    operator delete(v17);
  }
  qmi::Client::~Client((qmi::Client *)v12);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v11);
  VinylCommandDriver::~VinylCommandDriver(v10);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::~VinylQMICommandDriver(VinylQMICommandDriver *this)
{
  qmi::Client *v2;
  VinylQMICommandDriver *v3;
  uint64_t v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_24D5D9BF0;
  v2 = (VinylQMICommandDriver *)((char *)this + 96);
  qmi::Client::stop((VinylQMICommandDriver *)((char *)this + 96));
  v3 = (VinylQMICommandDriver *)*((_QWORD *)this + 26);
  if (v3 == (VinylQMICommandDriver *)((char *)this + 184))
  {
    v4 = 4;
    v3 = (VinylQMICommandDriver *)((char *)this + 184);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v6 = (void **)((char *)this + 160);
  std::vector<std::unique_ptr<VinylTransaction>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v5 = (void *)*((_QWORD *)this + 17);
  if (v5)
  {
    *((_QWORD *)this + 18) = v5;
    operator delete(v5);
  }
  qmi::Client::~Client(v2);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  VinylCommandDriver::~VinylCommandDriver(this);
}

{
  VinylQMICommandDriver::~VinylQMICommandDriver(this);
  JUMPOUT(0x2199FEAC4);
}

void VinylQMICommandDriver::bootstrap_sync(VinylQMICommandDriver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[6];
  std::__shared_weak_count *v30;
  void *v31;
  uint64_t v32;
  void (*v33)(_QWORD *, qmi::MessageBase *);
  void *v34;
  VinylQMICommandDriver *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  uint64_t v39;
  void (*v40)(_QWORD *, qmi::MessageBase *);
  void *v41;
  VinylQMICommandDriver *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *__p[2];
  void (*v46)(_QWORD *);
  void *v47;
  VinylQMICommandDriver *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *v51[2];
  void (*v52)(_QWORD *);
  void *v53;
  VinylQMICommandDriver *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  _QWORD v57[2];
  __int128 v58;
  VinylQMICommandDriver *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  dispatch_object_t v65;
  void *v66;
  uint64_t v67;
  void (*v68)(uint64_t, QMIServiceMsg *);
  void *v69;
  _QWORD *v70;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2 || (v3 = *((_QWORD *)this + 1), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  std::string::basic_string[abi:ne180100]<0>(v51, "Vinyl");
  v10 = *((_QWORD *)this + 3);
  v65 = v10;
  if (v10)
    dispatch_retain(v10);
  std::string::basic_string[abi:ne180100]<0>(__p, "vinyl");
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v11 || (v12 = *((_QWORD *)this + 1), (v13 = std::__shared_weak_count::lock(v11)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v14 = v13;
  v63 = v12;
  v64 = v13;
  v15 = (unint64_t *)&v13->__shared_weak_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  Registry::getServerConnection(*((Registry **)this + 10));
  qmi::Client::createWithQueueLocal();
  std::shared_ptr<qmi::Client::State>::operator=[abi:ne180100]((uint64_t)this + 112, &v58);
  qmi::Client::~Client((qmi::Client *)v57);
  v17 = v62;
  if (v62)
  {
    v18 = (unint64_t *)&v62->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
  v20 = (unint64_t *)&v14->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (SHIBYTE(v46) < 0)
    operator delete(__p[0]);
  if (v65)
    dispatch_release(v65);
  if (SHIBYTE(v52) < 0)
    operator delete(v51[0]);
  v22 = (void *)MEMORY[0x24BDAC760];
  v57[0] = MEMORY[0x24BDAC760];
  v57[1] = 1174405120;
  *(_QWORD *)&v58 = ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke;
  *((_QWORD *)&v58 + 1) = &__block_descriptor_tmp_28;
  v59 = this;
  v60 = v3;
  v61 = v5;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  qmi::Client::setHandler();
  v51[0] = v22;
  v51[1] = (void *)1174405120;
  v52 = ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_16;
  v53 = &__block_descriptor_tmp_17_12;
  v54 = this;
  v55 = v3;
  v56 = v5;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  qmi::Client::setHandler();
  __p[0] = v22;
  __p[1] = (void *)1174405120;
  v46 = ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_18;
  v47 = &__block_descriptor_tmp_19_10;
  v48 = this;
  v49 = v3;
  v50 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  qmi::Client::setHandler();
  qmi::Client::setIndShouldWake((VinylQMICommandDriver *)((char *)this + 96));
  qmi::Client::setIndShouldWake((VinylQMICommandDriver *)((char *)this + 96));
  qmi::Client::setIndShouldWake((VinylQMICommandDriver *)((char *)this + 96));
  v38 = v22;
  v39 = 1174405120;
  v40 = ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_20;
  v41 = &__block_descriptor_tmp_22_10;
  v42 = this;
  v43 = v3;
  v44 = v5;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  qmi::Client::setIndHandler();
  v31 = v22;
  v32 = 1174405120;
  v33 = ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_23;
  v34 = &__block_descriptor_tmp_24_9;
  v35 = this;
  v36 = v3;
  v37 = v5;
  do
    v27 = __ldxr(p_shared_weak_owners);
  while (__stxr(v27 + 1, p_shared_weak_owners));
  qmi::Client::setIndHandler();
  v29[0] = v22;
  v29[1] = 1174405120;
  v29[2] = ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_25;
  v29[3] = &__block_descriptor_tmp_26_6;
  v29[4] = this;
  v29[5] = v3;
  v30 = v5;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  v66 = v22;
  v67 = 0x40000000;
  v68 = ___ZNK3qmi6Client13setIndHandlerIN5vinyl10VSimEnable10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  v69 = &unk_24D5DA760;
  v70 = v29;
  qmi::Client::setIndHandler();
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  if (v50)
    std::__shared_weak_count::__release_weak(v50);
  if (v56)
    std::__shared_weak_count::__release_weak(v56);
  if (v61)
    std::__shared_weak_count::__release_weak(v61);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_2169C0D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49)
{
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v52;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a22)
    std::__shared_weak_count::__release_weak(a22);
  if (a29)
    std::__shared_weak_count::__release_weak(a29);
  if (a39)
    std::__shared_weak_count::__release_weak(a39);
  if (a49)
    std::__shared_weak_count::__release_weak(a49);
  v52 = *(std::__shared_weak_count **)(v50 - 168);
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  std::__shared_weak_count::__release_weak(v49);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  capabilities::ct *ready;
  int *v7;
  int *v8;
  uint64_t v9;
  int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD aBlock[5];
  int v14;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        ready = (capabilities::ct *)VinylCommandDriver::sendReadyCallback_sync();
        v7 = *(int **)(v3 + 136);
        v8 = *(int **)(v3 + 144);
        if (v7 != v8)
        {
          v9 = MEMORY[0x24BDAC760];
          do
          {
            v10 = *v7;
            ready = (capabilities::ct *)capabilities::ct::requireVinylManagerInd(ready);
            if ((_DWORD)ready)
            {
              aBlock[0] = v9;
              aBlock[1] = 0x40000000;
              aBlock[2] = ___ZN21VinylQMICommandDriver24handleClientStarted_syncEv_block_invoke;
              aBlock[3] = &__block_descriptor_tmp_28_7;
              aBlock[4] = v3;
              v14 = v10;
              VinylQMICommandDriver::queryCsn_sync(v3, v10, aBlock);
            }
            ++v7;
          }
          while (v7 != v8);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_2169C0FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c44_ZTSKNSt3__18weak_ptrI18VinylCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSKNSt3__18weak_ptrI18VinylCommandDriverEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_16(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  VinylQMICommandDriver *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (VinylQMICommandDriver *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        VinylQMICommandDriver::handleClientStopped_sync(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_2169C10DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::handleClientStopped_sync(VinylQMICommandDriver *this)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  VinylCommandDriver::sendReadyCallback_sync();
  v2 = *((_QWORD *)this + 20);
  v3 = *((_QWORD *)this + 21);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 134217984;
      v6 = (v3 - v2) >> 3;
      _os_log_impl(&dword_216897000, v4, OS_LOG_TYPE_DEFAULT, "#I QMI client stopped but %lu transactions outstanding; force-cancelling.",
        (uint8_t *)&v5,
        0xCu);
      v2 = *((_QWORD *)this + 20);
      v3 = *((_QWORD *)this + 21);
    }
    if (v2 != v3)
    {
      do
      {
        VinylQMICommandDriver::cancelTransactionWithError_sync(this, *(_DWORD *)(*(_QWORD *)v2 + 12), 3, 0, 0);
        v2 = *((_QWORD *)this + 20);
      }
      while (v2 != *((_QWORD *)this + 21));
    }
  }
}

void ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_18(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  VinylQMICommandDriver *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (VinylQMICommandDriver *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        VinylQMICommandDriver::handleClientStopped_sync(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_2169C1284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_20(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const void *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  char **v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Transaction_sync;
  NSObject *v34;
  const char *v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  int v39;
  int v40;
  const void *v41;
  _QWORD *v42;
  NSObject *v43;
  const char *v44;
  const char *v45;
  int v46;
  int v47;
  NSObject *v48;
  const char *v49;
  char v50;
  int v51;
  const char *v52;
  NSObject *v53;
  uint64_t v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  NSObject *v57;
  _BYTE *v58;
  void *v59;
  NSObject *v60;
  NSObject *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t TlvValue;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  NSObject *v73;
  const char *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  NSObject *v86;
  const char *v87;
  const char *v88;
  int v89;
  const char *v90;
  const char *v91;
  const char *v92;
  __int16 v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96[6];
  char v97;
  char v98;
  __int16 v99;
  int v100;
  char v101;
  char v102;
  __int16 v103;
  _QWORD v104[2];
  uint64_t (*v105)(uint64_t, char *);
  void *v106;
  _BYTE *v107;
  uint64_t v108;
  _QWORD v109[2];
  _BYTE buf[32];
  void (*v111)(uint64_t);
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  _BYTE v127[36];
  int v128;
  uint8_t v129[32];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE v142[26];
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (VinylQMICommandDriver *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
        goto LABEL_60;
      v109[0] = 0;
      v109[1] = 0;
      qmi::MessageBase::tryTlv<vinyl::tlv::IndResult>(a2, (uint64_t)v109);
      if (!LOBYTE(v109[0]))
      {
        v17 = *((_QWORD *)v5 + 5);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#E vinyl::Info missing required result TLV! Ignoring.", buf, 2u);
        }
        goto LABEL_60;
      }
      v8 = BYTE4(v109[0]);
      v9 = BYTE4(v109[0]) - 16;
      if (v9 <= 0x31)
      {
        if (((1 << (BYTE4(v109[0]) - 16)) & 0x70) != 0)
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          qmi::MessageBase::tryTlv<vinyl::tlv::IndResult>(a2, (uint64_t)buf);
          if (buf[0])
          {
            v29 = buf[4];
            v30 = buf[5];
            v24 = *(_DWORD *)&buf[8];
            v31 = buf[12];
            v32 = buf[13];
            Transaction_sync = VinylQMICommandDriver::findTransaction_sync(v5, *(int *)&buf[8]);
            if (VinylQMICommandDriver::validateIndication((uint64_t)v5, v29, v24, Transaction_sync))
            {
              if (v30)
              {
                v34 = *((_QWORD *)v5 + 5);
                if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                {
                  v35 = vinyl::asString(v29);
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v35;
                  v36 = v34;
LABEL_99:
                  _os_log_error_impl(&dword_216897000, v36, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s has indicated a failure. Cancelling transaction.", buf, 0xCu);
                }
LABEL_58:
                v54 = 2;
LABEL_59:
                VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v24, v54, v31, v32);
              }
              else
              {
                VinylQMICommandDriver::finishTransactionWithResult_sync((os_log_t *)v5, v24);
              }
            }
            goto LABEL_60;
          }
          goto LABEL_120;
        }
        if (((1 << (BYTE4(v109[0]) - 16)) & 0x2000000000081) != 0)
        {
LABEL_23:
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          qmi::MessageBase::tryTlv<vinyl::tlv::IndResult>(a2, (uint64_t)buf);
          if (!buf[0])
            goto LABEL_120;
          v22 = buf[4];
          v23 = buf[5];
          v24 = *(_DWORD *)&buf[8];
          v25 = buf[12];
          v26 = buf[13];
          v27 = (const void *)VinylQMICommandDriver::findTransaction_sync(v5, *(int *)&buf[8]);
          if (v27)
          else
            v28 = 0;
          if (!VinylQMICommandDriver::validateIndication((uint64_t)v5, v22, v24, (uint64_t)v28))
            goto LABEL_60;
          if (v23)
          {
            v37 = *((_QWORD *)v5 + 5);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              v67 = vinyl::asString(v22);
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v67;
              _os_log_error_impl(&dword_216897000, v37, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s has indicated a failure. Cancelling transaction.", buf, 0xCu);
            }
            v38 = 2;
          }
          else
          {
            v111 = 0;
            memset(buf, 0, sizeof(buf));
            qmi::MessageBase::tryTlv<vinyl::tlv::PayloadData>(a2, 17, buf);
            if (buf[0])
            {
              if (*((_DWORD *)v28 + 22) == *(unsigned __int16 *)&buf[10])
              {
                std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)(v28 + 8), v28[9], *(char **)&buf[16], *(char **)&buf[24], *(_QWORD *)&buf[24] - *(_QWORD *)&buf[16]);
                if (!buf[0])
                  __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
                v46 = *(unsigned __int16 *)&buf[8];
                v47 = *((_DWORD *)v28 + 22) + 1;
                *((_DWORD *)v28 + 22) = v47;
                *((_DWORD *)v28 + 23) = v46;
                if (v47 == v46)
                {
                  v48 = *((_QWORD *)v5 + 5);
                  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                  {
                    v49 = vinyl::asString(v22);
                    *(_DWORD *)v129 = 136315138;
                    *(_QWORD *)&v129[4] = v49;
                    _os_log_impl(&dword_216897000, v48, OS_LOG_TYPE_DEFAULT, "#I vinyl::Info for command %s has received all segments", v129, 0xCu);
                  }
                  v50 = 0;
                  v51 = 1;
                  v38 = 1;
                }
                else
                {
                  v38 = 0;
                  v51 = 1;
                  v50 = 1;
                }
              }
              else
              {
                v61 = *((_QWORD *)v5 + 5);
                if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                {
                  v88 = vinyl::asString(v22);
                  v89 = *((_DWORD *)v28 + 22);
                  *(_DWORD *)v129 = 136315394;
                  *(_QWORD *)&v129[4] = v88;
                  *(_WORD *)&v129[12] = 1024;
                  *(_DWORD *)&v129[14] = v89;
                  _os_log_error_impl(&dword_216897000, v61, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s segment arrived out of order! Expecting #%d", v129, 0x12u);
                }
                v50 = 0;
                v38 = 1;
                v51 = 2;
              }
              if (*(_QWORD *)&buf[16])
                operator delete(*(void **)&buf[16]);
              if (v51 == 1)
              {
                if ((v50 & 1) != 0)
                  goto LABEL_60;
                goto LABEL_88;
              }
            }
            else
            {
              v60 = *((_QWORD *)v5 + 5);
              if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
              {
                v87 = vinyl::asString(v22);
                *(_DWORD *)v129 = 136315138;
                *(_QWORD *)&v129[4] = v87;
                _os_log_error_impl(&dword_216897000, v60, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s had no payload!? Cancelling transaction.", v129, 0xCu);
              }
              v38 = 1;
            }
          }
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v24, v38, v25, v26);
          goto LABEL_60;
        }
        if (v9 == 48)
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          qmi::MessageBase::tryTlv<vinyl::tlv::IndResult>(a2, (uint64_t)buf);
          if (buf[0])
          {
            v10 = buf[4];
            v11 = buf[5];
            v12 = *(_DWORD *)&buf[8];
            v93 = *(_WORD *)&buf[6];
            v94 = buf[12];
            v13 = buf[13];
            v14 = *(_WORD *)&buf[14];
            v15 = (const void *)VinylQMICommandDriver::findTransaction_sync(v5, *(int *)&buf[8]);
            if (!VinylQMICommandDriver::validateIndication((uint64_t)v5, v10, v12, (uint64_t)v15))
              goto LABEL_60;
            if (!v15
            {
              v57 = *((_QWORD *)v5 + 5);
              if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
                goto LABEL_60;
              VinylTransaction::shortDescription((std::string *)buf, (uint64_t)v15);
              v58 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
              *(_DWORD *)v129 = 136315138;
              *(_QWORD *)&v129[4] = v58;
              _os_log_error_impl(&dword_216897000, v57, OS_LOG_TYPE_ERROR, "%s is not handling FirmwareUpdateData. Ignoring", v129, 0xCu);
              if ((buf[23] & 0x80000000) == 0)
                goto LABEL_60;
              v59 = *(void **)buf;
              goto LABEL_119;
            }
            if (v11)
            {
              v16 = *((_QWORD *)v5 + 5);
              if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
              {
                v90 = vinyl::asString(v10);
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v90;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v13 | (v94 << 8);
                _os_log_error_impl(&dword_216897000, v16, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s has indicated a failure (%.4x). Cancelling transaction.", buf, 0x12u);
              }
              VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v12, 2, v94, v13);
              goto LABEL_60;
            }
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x14002000000;
            *(_QWORD *)&buf[24] = __Block_byref_object_copy__4;
            v111 = __Block_byref_object_dispose__4;
            v126 = 0u;
            memset(v127, 0, sizeof(v127));
            v112 = 0u;
            v113 = 0u;
            v114 = 0u;
            v115 = 0u;
            v116 = 0u;
            v117 = 0u;
            v118 = 0u;
            v119 = 0u;
            v120 = 0u;
            v121 = 0u;
            v122 = 0u;
            v123 = 0u;
            v124 = 0u;
            v125 = 0u;
            LOWORD(v113) = -1;
            v128 = 0;
            v104[0] = MEMORY[0x24BDAC760];
            v104[1] = 0x40000000;
            v105 = ___ZN21VinylQMICommandDriver39handleFirmwareInfoUpdateIndication_syncERKN5vinyl4Info10IndicationE_block_invoke;
            v106 = &unk_24D5D9EB8;
            v107 = buf;
            TlvValue = qmi::MessageBase::findTlvValue(a2);
            v70 = TlvValue;
            if (!TlvValue)
              goto LABEL_101;
            v71 = v69;
            *(_QWORD *)v129 = TlvValue;
            LOBYTE(v96[0]) = tlv::parseV<vinyl::tlv::IndFwUpdChipId>((unint64_t *)v129, v69);
            if (*(_QWORD *)v129)
            {
              v105((uint64_t)v104, (char *)v96);
              goto LABEL_102;
            }
            if ((((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 65, v70, v71) & 1) == 0)LABEL_101:*(_DWORD *)(*(_QWORD *)&buf[8] + 292) = 0;
LABEL_102:
            v75 = qmi::MessageBase::findTlvValue(a2);
            v77 = v75;
            if (v75)
            {
              v78 = v76;
              v96[0] = v75;
              memset(v129, 0, sizeof(v129));
              tlv::parseV<vinyl::tlv::IndFwUpdProfileSummary>(v96, v76, v129);
              v79 = v96[0];
              if (v96[0])
              {
                v80 = *(_QWORD *)&buf[8];
                *(_WORD *)(*(_QWORD *)&buf[8] + 286) = v129[0] | 0x100;
                if ((uint8_t *)(v80 + 296) != &v129[8])
                  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(v80 + 296), *(char **)&v129[8], *(char **)&v129[16], *(_QWORD *)&v129[16] - *(_QWORD *)&v129[8]);
              }
              if (*(_QWORD *)&v129[8])
              {
                *(_QWORD *)&v129[16] = *(_QWORD *)&v129[8];
                operator delete(*(void **)&v129[8]);
              }
              if (!v79)
                ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 66, v77, v78);
            }
            v96[0] = MEMORY[0x24BDAC760];
            v96[1] = 0x40000000;
            v96[2] = (unint64_t)___ZN21VinylQMICommandDriver39handleFirmwareInfoUpdateIndication_syncERKN5vinyl4Info10IndicationE_block_invoke_3;
            v96[3] = (unint64_t)&unk_24D5D9EE0;
            v96[4] = (unint64_t)buf;
            v96[5] = (unint64_t)v5;
            v97 = v10;
            v98 = 0;
            v81 = v94;
            v99 = v93;
            v100 = v12;
            v101 = v94;
            v102 = v13;
            v103 = v14;
            v82 = qmi::MessageBase::findTlvValue(a2);
            v84 = v82;
            if (v82)
            {
              v85 = v83;
              v108 = v82;
              v141 = 0u;
              memset(v142, 0, sizeof(v142));
              v139 = 0u;
              v140 = 0u;
              v137 = 0u;
              v138 = 0u;
              v135 = 0u;
              v136 = 0u;
              v133 = 0u;
              v134 = 0u;
              v131 = 0u;
              v132 = 0u;
              v130 = 0u;
              memset(v129, 0, sizeof(v129));
              tlv::parseV<vinyl::tlv::IndFwUpdGetData>((unint64_t *)&v108, v83, v129);
              if (v108)
              {
                ___ZN21VinylQMICommandDriver39handleFirmwareInfoUpdateIndication_syncERKN5vinyl4Info10IndicationE_block_invoke_3((uint64_t)v96, (uint64_t)v129);
LABEL_117:
                _Block_object_dispose(buf, 8);
                v59 = *(void **)&v127[16];
                if (!*(_QWORD *)&v127[16])
                  goto LABEL_60;
                *(_QWORD *)&v127[24] = *(_QWORD *)&v127[16];
LABEL_119:
                operator delete(v59);
LABEL_60:
                p_shared_owners = (unint64_t *)&v7->__shared_owners_;
                do
                  v56 = __ldaxr(p_shared_owners);
                while (__stlxr(v56 - 1, p_shared_owners));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                  std::__shared_weak_count::__release_weak(v7);
                }
                return;
              }
              if ((((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 64, v84, v85) & 1) != 0)goto LABEL_117;
            }
            v86 = *((_QWORD *)v5 + 5);
            if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
            {
              v92 = vinyl::asString(v10);
              *(_DWORD *)v129 = 136315138;
              *(_QWORD *)&v129[4] = v92;
              _os_log_error_impl(&dword_216897000, v86, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s does not have firmware TLV. Cancelling transaction.", v129, 0xCu);
              v81 = v94;
            }
            VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v12, 2, v81, v13);
            goto LABEL_117;
          }
LABEL_120:
          __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
        }
      }
      switch(BYTE4(v109[0]))
      {
        case 0:
          v18 = qmi::MessageBase::findTlvValue(a2);
          v20 = v18;
          if (v18)
          {
            v21 = v19;
            *(_QWORD *)buf = v18;
            tlv::parseV<vinyl::tlv::IndManagerReady>((_BYTE **)buf, v19);
            if (*(_QWORD *)buf)
            {
              VinylSlotIdFromInt();
              VinylCommandDriver::sendReadyCallback_sync();
            }
            else
            {
              ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 49, v20, v21);
            }
          }
          goto LABEL_60;
        case 1:
          v43 = *((_QWORD *)v5 + 5);
          if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            goto LABEL_60;
          v44 = vinyl::asString(1);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v44;
          v45 = "vinyl::Info for command %s should not exist! Ignoring";
          goto LABEL_52;
        case 3:
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          qmi::MessageBase::tryTlv<vinyl::tlv::IndResult>(a2, (uint64_t)buf);
          if (!buf[0])
            goto LABEL_120;
          v39 = buf[4];
          v40 = buf[5];
          v24 = *(_DWORD *)&buf[8];
          v31 = buf[12];
          v32 = buf[13];
          v41 = (const void *)VinylQMICommandDriver::findTransaction_sync(v5, *(int *)&buf[8]);
          if (v41)
          else
            v42 = 0;
          if (!VinylQMICommandDriver::validateIndication((uint64_t)v5, v39, v24, (uint64_t)v42))
            goto LABEL_60;
          if (v40)
          {
            v53 = *((_QWORD *)v5 + 5);
            if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
              goto LABEL_58;
            v74 = vinyl::asString(v39);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v74;
            v36 = v53;
            goto LABEL_99;
          }
          v62 = qmi::MessageBase::findTlvValue(a2);
          if (!v62)
            goto LABEL_95;
          *(_QWORD *)v129 = v62;
          memset(buf, 0, 24);
          v64 = v63;
          v95 = v62;
          tlv::parseV<vinyl::tlv::IndAvailableSpace>((char **)v129, v63, buf);
          v65 = v95;
          if (*(_QWORD *)v129)
          {
            v66 = (void *)v42[8];
            if (v66)
            {
              v42[9] = v66;
              operator delete(v66);
            }
            *((_OWORD *)v42 + 4) = *(_OWORD *)buf;
            v42[10] = *(_QWORD *)&buf[16];
            break;
          }
          v72 = v64;
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
            v65 = v95;
            v72 = v64;
          }
          if ((((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 32, v65, v72) & 1) == 0)
          {
LABEL_95:
            v73 = *((_QWORD *)v5 + 5);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
            {
              v91 = vinyl::asString(v39);
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v91;
              _os_log_error_impl(&dword_216897000, v73, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s was marked successful but had no payload. Cancelling transaction.", buf, 0xCu);
            }
            v54 = 1;
            goto LABEL_59;
          }
          break;
        case 5:
          goto LABEL_23;
        default:
          v43 = *((_QWORD *)v5 + 5);
          if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            goto LABEL_60;
          v52 = vinyl::asString(v8);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v52;
          v45 = "vinyl::Info for command %s is unexpected and I dont know what to do. Ignoring";
LABEL_52:
          _os_log_error_impl(&dword_216897000, v43, OS_LOG_TYPE_ERROR, v45, buf, 0xCu);
          goto LABEL_60;
      }
LABEL_88:
      VinylQMICommandDriver::finishTransactionWithData_sync((os_log_t *)v5, v24);
      goto LABEL_60;
    }
  }
}

void sub_2169C1FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  uint64_t a67;
  void *__p;
  uint64_t a71;

  if (__p)
  {
    a71 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a29, 8);
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_23(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const void *Transaction_sync;
  char **v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  int v20;
  int v21;
  NSObject *v22;
  const char *v23;
  char v24;
  int v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  const char *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  const char *v39;
  int v40;
  const char *v41;
  const char *v42;
  _QWORD v43[2];
  int v44;
  uint8_t v45[4];
  const char *v46;
  __int16 v47;
  int v48;
  uint8_t buf[16];
  void *__p[2];
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (VinylQMICommandDriver *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
        goto LABEL_46;
      v43[0] = 0;
      v43[1] = 0;
      v44 = 0;
      qmi::MessageBase::tryTlv<vinyl::tlv::IndTapeIndResult>(a2, (uint64_t)v43);
      if (!LOBYTE(v43[0]))
      {
        v16 = *((_QWORD *)v5 + 5);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_216897000, v16, OS_LOG_TYPE_DEFAULT, "#E vinyl::TapeInfo missing required result TLV! Ignoring.", buf, 2u);
        }
        goto LABEL_46;
      }
      v8 = BYTE4(v43[0]);
      if (BYTE4(v43[0]) <= 0x19u)
      {
        if (((1 << SBYTE4(v43[0])) & 0x2BBFBF8) != 0)
        {
          memset(buf, 0, sizeof(buf));
          LODWORD(__p[0]) = 0;
          qmi::MessageBase::tryTlv<vinyl::tlv::IndTapeIndResult>(a2, (uint64_t)buf);
          if (buf[0])
          {
            v9 = buf[4];
            v10 = *(unsigned __int16 *)&buf[6];
            v11 = *(_DWORD *)&buf[12];
            v12 = LOBYTE(__p[0]);
            v13 = BYTE1(__p[0]);
            Transaction_sync = (const void *)VinylQMICommandDriver::findTransaction_sync(v5, *(int *)&buf[12]);
            if (Transaction_sync)
            else
              v15 = 0;
            if (!VinylQMICommandDriver::validateIndication((uint64_t)v5, v9, v11, (uint64_t)v15))
              goto LABEL_46;
            if (v10 == 1)
            {
              v17 = *((_QWORD *)v5 + 5);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                v18 = vinyl::asString(v9);
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = v18;
                _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#N Command %s has indicated a failure. Cancelling transaction.", buf, 0xCu);
              }
              v19 = 2;
LABEL_45:
              VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v19, v12, v13);
              goto LABEL_46;
            }
            v51 = 0;
            *(_OWORD *)buf = 0u;
            *(_OWORD *)__p = 0u;
            qmi::MessageBase::tryTlv<vinyl::tlv::PayloadData>(a2, 16, buf);
            if (buf[0])
            {
              if (*((_DWORD *)v15 + 22) == *(unsigned __int16 *)&buf[10])
              {
                std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)(v15 + 8), v15[9], (char *)__p[0], (char *)__p[1], (char *)__p[1] - (char *)__p[0]);
                if (!buf[0])
                  __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
                v20 = *(unsigned __int16 *)&buf[8];
                v21 = *((_DWORD *)v15 + 22) + 1;
                *((_DWORD *)v15 + 22) = v21;
                *((_DWORD *)v15 + 23) = v20;
                if (v21 == v20)
                {
                  v22 = *((_QWORD *)v5 + 5);
                  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                  {
                    v23 = vinyl::asString(v9);
                    *(_DWORD *)v45 = 136315138;
                    v46 = v23;
                    _os_log_impl(&dword_216897000, v22, OS_LOG_TYPE_DEFAULT, "#I vinyl::TapeInfo for command %s has received all segments", v45, 0xCu);
                  }
                  v24 = 0;
                  v25 = 1;
                  v19 = 1;
                }
                else
                {
                  v19 = 0;
                  v25 = 1;
                  v24 = 1;
                }
              }
              else
              {
                v34 = *((_QWORD *)v5 + 5);
                if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                {
                  v39 = vinyl::asString(v9);
                  v40 = *((_DWORD *)v15 + 22);
                  *(_DWORD *)v45 = 136315394;
                  v46 = v39;
                  v47 = 1024;
                  v48 = v40;
                  _os_log_error_impl(&dword_216897000, v34, OS_LOG_TYPE_ERROR, "vinyl::TapeInfo for command %s segment arrived out of order! Expecting #%d", v45, 0x12u);
                }
                v24 = 0;
                v19 = 1;
                v25 = 2;
              }
              if (__p[0])
                operator delete(__p[0]);
              if (v25 != 1)
                goto LABEL_45;
              if ((v24 & 1) != 0)
              {
LABEL_46:
                p_shared_owners = (unint64_t *)&v7->__shared_owners_;
                do
                  v38 = __ldaxr(p_shared_owners);
                while (__stlxr(v38 - 1, p_shared_owners));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                  std::__shared_weak_count::__release_weak(v7);
                }
                return;
              }
            }
            else if (v9 != 21)
            {
              v26 = *((_QWORD *)v5 + 5);
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                v41 = vinyl::asString(v9);
                *(_DWORD *)v45 = 136315138;
                v46 = v41;
                _os_log_error_impl(&dword_216897000, v26, OS_LOG_TYPE_ERROR, "Command %s had no payload!? Cancelling transaction.", v45, 0xCu);
              }
              v19 = 1;
              goto LABEL_45;
            }
            VinylQMICommandDriver::finishTransactionWithData_sync((os_log_t *)v5, v11);
            goto LABEL_46;
          }
LABEL_54:
          __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
        }
        if (BYTE4(v43[0]) == 22)
        {
          memset(buf, 0, sizeof(buf));
          LODWORD(__p[0]) = 0;
          qmi::MessageBase::tryTlv<vinyl::tlv::IndTapeIndResult>(a2, (uint64_t)buf);
          if (buf[0])
          {
            v27 = buf[4];
            v28 = *(unsigned __int16 *)&buf[6];
            v29 = *(_DWORD *)&buf[12];
            v30 = LOBYTE(__p[0]);
            v31 = BYTE1(__p[0]);
            v32 = VinylQMICommandDriver::findTransaction_sync(v5, *(int *)&buf[12]);
            if (VinylQMICommandDriver::validateIndication((uint64_t)v5, v27, v29, v32))
            {
              if (v28 == 1)
              {
                v33 = *((_QWORD *)v5 + 5);
                if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                {
                  v42 = vinyl::asString(v27);
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v42;
                  _os_log_error_impl(&dword_216897000, v33, OS_LOG_TYPE_ERROR, "vinyl::Info for command %s has indicated a failure. Cancelling transaction.", buf, 0xCu);
                }
                VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v29, 2, v30, v31);
              }
              else
              {
                VinylQMICommandDriver::finishTransactionWithResult_sync((os_log_t *)v5, v29);
              }
            }
            goto LABEL_46;
          }
          goto LABEL_54;
        }
      }
      v35 = *((_QWORD *)v5 + 5);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        v36 = vinyl::asString(v8);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v36;
        _os_log_error_impl(&dword_216897000, v35, OS_LOG_TYPE_ERROR, "vinyl::TapeInfo for command %s is unexpected and I dont know what to do. Ignoring", buf, 0xCu);
      }
      goto LABEL_46;
    }
  }
}

void sub_2169C2690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver9init_syncEv_block_invoke_25(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t TlvValue;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint8_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint8_t buf[8];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
        goto LABEL_28;
      if (!*(_QWORD *)(v5 + 208))
      {
        v17 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_216897000, v17, OS_LOG_TYPE_ERROR, "no callback to process vsim enablement indication, ignoring...", buf, 2u);
        }
        goto LABEL_28;
      }
      TlvValue = qmi::MessageBase::findTlvValue(a2);
      v10 = TlvValue;
      v11 = (_QWORD *)(v5 + 184);
      if (TlvValue)
      {
        v12 = v9;
        *(_QWORD *)buf = TlvValue;
        v13 = tlv::parseV<vinyl::tlv::IndVSimEnableError>((unint64_t *)buf, v9);
        if (*(_QWORD *)buf)
        {
LABEL_9:
          v14 = *(_QWORD *)(v5 + 208);
          if (!v14)
            goto LABEL_28;
          if (v13 == 3)
            v15 = 3;
          else
            v15 = 0;
          if (v13 == 1)
            v16 = 11;
          else
            v16 = v15;
          buf[0] = 2;
          buf[1] = v16;
          (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v14 + 48))(v14, buf);
LABEL_23:
          buf[0] = 0;
          v20 = *(_QWORD **)(v5 + 208);
          *(_QWORD *)(v5 + 208) = 0;
          if (v20 == v11)
          {
            v21 = 4;
          }
          else
          {
            if (!v20)
              goto LABEL_28;
            v21 = 5;
            v11 = v20;
          }
          (*(void (**)(_QWORD *))(*v11 + 8 * v21))(v11);
LABEL_28:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        if (((unsigned int (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 16, v10, v12))
        {
          v13 = 0;
          goto LABEL_9;
        }
      }
      v18 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v18, OS_LOG_TYPE_DEFAULT, "#I Successfully enabled vsim", buf, 2u);
      }
      *(_BYTE *)(v5 + 216) = 1;
      v19 = *(_QWORD *)(v5 + 208);
      if (!v19)
        goto LABEL_28;
      *(_WORD *)buf = 257;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v19 + 48))(v19, buf);
      goto LABEL_23;
    }
  }
}

void sub_2169C290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::queryCsn_sync(uint64_t a1, int a2, void *aBlock)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  uint64_t v21;
  int v22;
  const void *v23;
  std::__shared_weak_count *v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  _QWORD v36[6];
  std::__shared_weak_count *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  void *v43;
  _OWORD v44[2];
  uint64_t aBlocka;
  __int128 v46;
  void *v47;
  _QWORD *v48;

  if (aBlock)
    v4 = _Block_copy(aBlock);
  else
    v4 = 0;
  v5 = operator new();
  v6 = v5;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_BYTE *)(v5 + 16) = 1;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)v5 = &off_24D5DA368;
  v7 = *(_QWORD *)(a1 + 176);
  v8 = *(uint64_t **)(a1 + 168);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)(a1 + 160);
    v11 = v8 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v48 = (_QWORD *)(a1 + 176);
    if (v14)
    {
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v14);
      v10 = *(_QWORD **)(a1 + 160);
      v8 = *(uint64_t **)(a1 + 168);
    }
    else
    {
      v15 = 0;
    }
    v16 = (uint64_t *)(v14 + 8 * v11);
    v17 = (void *)(v14 + 8 * v15);
    v47 = v17;
    *v16 = v6;
    *((_QWORD *)&v46 + 1) = v16 + 1;
    if (v8 == v10)
    {
      v9 = v16 + 1;
    }
    else
    {
      do
      {
        v18 = *--v8;
        *v8 = 0;
        *--v16 = v18;
      }
      while (v8 != v10);
      v9 = (_QWORD *)*((_QWORD *)&v46 + 1);
      v17 = v47;
    }
    v19 = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v16;
    *(_QWORD *)(a1 + 168) = v9;
    v46 = v19;
    v20 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v17;
    v47 = v20;
    aBlocka = v19;
    std::__split_buffer<std::unique_ptr<VinylTransaction>>::~__split_buffer((uint64_t)&aBlocka);
  }
  else
  {
    *v8 = v5;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 168) = v9;
  v21 = *(v9 - 1);
  *(_BYTE *)(v21 + 8) = 1;
  v22 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 128) = v22 + 1;
  *(_DWORD *)(v21 + 12) = v22;
  *(_BYTE *)(v21 + 16) = VinylSlotIdToInt();
  v23 = *(const void **)(v21 + 56);
  *(_QWORD *)(v21 + 56) = v4;
  if (v23)
    _Block_release(v23);
  memset(v44, 0, sizeof(v44));
  v24 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v24
    || (v25 = *(_DWORD *)(v21 + 12), v26 = *(_QWORD *)(a1 + 8), (v27 = std::__shared_weak_count::lock(v24)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v28 = v27;
  p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v28);
  }
  v39 = a1 + 96;
  v40 = QMIServiceMsg::create();
  v41 = 25000;
  v42 = 0;
  v43 = 0;
  v33 = MEMORY[0x24BDAC760];
  v36[0] = MEMORY[0x24BDAC760];
  v36[1] = 1174405120;
  v36[2] = ___ZN21VinylQMICommandDriver13queryCsn_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__15arrayIhLm16EEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke;
  v36[3] = &__block_descriptor_tmp_41_8;
  v36[4] = a1;
  v36[5] = v26;
  v37 = v28;
  do
    v34 = __ldxr(p_shared_weak_owners);
  while (__stxr(v34 + 1, p_shared_weak_owners));
  v38 = v25;
  aBlocka = v33;
  *(_QWORD *)&v46 = 0x40000000;
  *((_QWORD *)&v46 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl7Message8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v47 = &unk_24D5DA788;
  v48 = v36;
  v35 = _Block_copy(&aBlocka);
  v43 = v35;
  if (v40)
  {
    qmi::Client::send();
    v35 = v43;
  }
  if (v35)
    _Block_release(v35);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  std::__shared_weak_count::__release_weak(v28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v44);
}

void sub_2169C2C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__shared_weak_count *v23;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21VinylQMICommandDriver24handleClientStarted_syncEv_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  NSObject *v3;
  ctu::ResultIsEmptyError *exception;
  uint8_t v5[16];

  v2 = *a2;
  if (v2 == 1)
    goto LABEL_4;
  if (v2 != 2)
  {
    exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
    ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    __cxa_throw(exception, MEMORY[0x24BED9ED8], MEMORY[0x24BED99E0]);
  }
  if (a2[1] == 6)
  {
LABEL_4:
    v3 = *(NSObject **)(*(_QWORD *)(result + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_216897000, v3, OS_LOG_TYPE_DEFAULT, "#I Received CSN query callback", v5, 2u);
    }
    return VinylCommandDriver::sendReadyCallback_sync();
  }
  return result;
}

void sub_2169C2D58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::cancelTransactionWithError_sync(VinylQMICommandDriver *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Transaction_sync;

  Transaction_sync = VinylQMICommandDriver::findTransaction_sync(a1, a2);
  if (Transaction_sync)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)Transaction_sync + 16))(Transaction_sync, a3, a4, a5);
    VinylQMICommandDriver::deleteTransaction_sync(a1, a2);
  }
}

uint64_t VinylQMICommandDriver::createTransaction_sync(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  const void *v26;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;

  v7 = operator new();
  v8 = v7;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_BYTE *)(v7 + 16) = 1;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)v7 = &off_24D5DA2F8;
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(uint64_t **)(a1 + 168);
  if ((unint64_t)v10 >= v9)
  {
    v12 = *(_QWORD **)(a1 + 160);
    v13 = v10 - v12;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = v9 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    v31 = a1 + 176;
    if (v16)
    {
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v16);
      v12 = *(_QWORD **)(a1 + 160);
      v10 = *(uint64_t **)(a1 + 168);
    }
    else
    {
      v17 = 0;
    }
    v18 = (uint64_t *)(v16 + 8 * v13);
    v19 = v16 + 8 * v17;
    v30 = v19;
    *v18 = v8;
    *((_QWORD *)&v29 + 1) = v18 + 1;
    if (v10 == v12)
    {
      v11 = v18 + 1;
    }
    else
    {
      do
      {
        v20 = *--v10;
        *v10 = 0;
        *--v18 = v20;
      }
      while (v10 != v12);
      v11 = (_QWORD *)*((_QWORD *)&v29 + 1);
      v19 = v30;
    }
    v21 = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v18;
    *(_QWORD *)(a1 + 168) = v11;
    v29 = v21;
    v22 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v19;
    v30 = v22;
    v28 = v21;
    std::__split_buffer<std::unique_ptr<VinylTransaction>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *v10 = v7;
    v11 = v10 + 1;
  }
  *(_QWORD *)(a1 + 168) = v11;
  v23 = *(v11 - 1);
  *(_BYTE *)(v23 + 8) = a2;
  v24 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 128) = v24 + 1;
  *(_DWORD *)(v23 + 12) = v24;
  *(_BYTE *)(v23 + 16) = VinylSlotIdToInt();
  v25 = *a4;
  *a4 = 0;
  v26 = *(const void **)(v23 + 56);
  *(_QWORD *)(v23 + 56) = v25;
  if (v26)
    _Block_release(v26);
  return v23;
}

{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  const void *v26;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;

  v7 = operator new();
  v8 = v7;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_BYTE *)(v7 + 16) = 1;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)v7 = &off_24D5DA2B0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(uint64_t **)(a1 + 168);
  if ((unint64_t)v10 >= v9)
  {
    v12 = *(_QWORD **)(a1 + 160);
    v13 = v10 - v12;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = v9 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    v31 = a1 + 176;
    if (v16)
    {
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v16);
      v12 = *(_QWORD **)(a1 + 160);
      v10 = *(uint64_t **)(a1 + 168);
    }
    else
    {
      v17 = 0;
    }
    v18 = (uint64_t *)(v16 + 8 * v13);
    v19 = v16 + 8 * v17;
    v30 = v19;
    *v18 = v8;
    *((_QWORD *)&v29 + 1) = v18 + 1;
    if (v10 == v12)
    {
      v11 = v18 + 1;
    }
    else
    {
      do
      {
        v20 = *--v10;
        *v10 = 0;
        *--v18 = v20;
      }
      while (v10 != v12);
      v11 = (_QWORD *)*((_QWORD *)&v29 + 1);
      v19 = v30;
    }
    v21 = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v18;
    *(_QWORD *)(a1 + 168) = v11;
    v29 = v21;
    v22 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v19;
    v30 = v22;
    v28 = v21;
    std::__split_buffer<std::unique_ptr<VinylTransaction>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *v10 = v7;
    v11 = v10 + 1;
  }
  *(_QWORD *)(a1 + 168) = v11;
  v23 = *(v11 - 1);
  *(_BYTE *)(v23 + 8) = a2;
  v24 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 128) = v24 + 1;
  *(_DWORD *)(v23 + 12) = v24;
  *(_BYTE *)(v23 + 16) = VinylSlotIdToInt();
  v25 = *a4;
  *a4 = 0;
  v26 = *(const void **)(v23 + 56);
  *(_QWORD *)(v23 + 56) = v25;
  if (v26)
    _Block_release(v26);
  return v23;
}

{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  const void *v26;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;

  v7 = operator new();
  v8 = v7;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_BYTE *)(v7 + 16) = 1;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)v7 = &off_24D5DA2B0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(uint64_t **)(a1 + 168);
  if ((unint64_t)v10 >= v9)
  {
    v12 = *(_QWORD **)(a1 + 160);
    v13 = v10 - v12;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = v9 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    v31 = a1 + 176;
    if (v16)
    {
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v16);
      v12 = *(_QWORD **)(a1 + 160);
      v10 = *(uint64_t **)(a1 + 168);
    }
    else
    {
      v17 = 0;
    }
    v18 = (uint64_t *)(v16 + 8 * v13);
    v19 = v16 + 8 * v17;
    v30 = v19;
    *v18 = v8;
    *((_QWORD *)&v29 + 1) = v18 + 1;
    if (v10 == v12)
    {
      v11 = v18 + 1;
    }
    else
    {
      do
      {
        v20 = *--v10;
        *v10 = 0;
        *--v18 = v20;
      }
      while (v10 != v12);
      v11 = (_QWORD *)*((_QWORD *)&v29 + 1);
      v19 = v30;
    }
    v21 = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v18;
    *(_QWORD *)(a1 + 168) = v11;
    v29 = v21;
    v22 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v19;
    v30 = v22;
    v28 = v21;
    std::__split_buffer<std::unique_ptr<VinylTransaction>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *v10 = v7;
    v11 = v10 + 1;
  }
  *(_QWORD *)(a1 + 168) = v11;
  v23 = *(v11 - 1);
  *(_BYTE *)(v23 + 8) = a2;
  *(_BYTE *)(v23 + 17) = 1;
  v24 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 128) = v24 + 1;
  *(_DWORD *)(v23 + 12) = v24;
  *(_BYTE *)(v23 + 16) = VinylSlotIdToInt();
  v25 = *a4;
  *a4 = 0;
  v26 = *(const void **)(v23 + 56);
  *(_QWORD *)(v23 + 56) = v25;
  if (v26)
    _Block_release(v26);
  return v23;
}

uint64_t VinylQMICommandDriver::findTransaction_sync(VinylQMICommandDriver *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 20);
  v4 = *((_QWORD *)this + 21);
  v5 = v3;
  if (v3 != v4)
  {
    while (*(_DWORD *)(*(_QWORD *)v5 + 12) != a2)
    {
      v5 += 8;
      if (v5 == v4)
        goto LABEL_7;
    }
  }
  if (v5 != v4)
    return *(_QWORD *)v5;
LABEL_7:
  v7 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    v9 = 2048;
    v10 = (v4 - v3) >> 3;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I transaction id not found %u, total = %lu", (uint8_t *)v8, 0x12u);
  }
  return 0;
}

void VinylQMICommandDriver::deleteTransaction_sync(VinylQMICommandDriver *this, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t v10[16];

  v4 = (_QWORD *)*((_QWORD *)this + 20);
  v3 = (_QWORD *)*((_QWORD *)this + 21);
  if (v4 != v3)
  {
    while (*(_DWORD *)(*v4 + 12) != a2)
    {
      if (++v4 == v3)
        goto LABEL_15;
    }
  }
  if (v4 == v3)
  {
LABEL_15:
    v9 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E Attempt to delete transaction that doesn't exist!", v10, 2u);
    }
  }
  else
  {
    v5 = v4 + 1;
    if (v4 + 1 != v3)
    {
      do
      {
        v6 = *(v5 - 1);
        *(v5 - 1) = *v5;
        *v5 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        ++v5;
      }
      while (v5 != v3);
      v3 = (_QWORD *)*((_QWORD *)this + 21);
      v4 = v5 - 1;
    }
    while (v3 != v4)
    {
      v8 = *--v3;
      v7 = v8;
      *v3 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    *((_QWORD *)this + 21) = v4;
  }
}

BOOL VinylQMICommandDriver::validateIndication(uint64_t a1, unsigned __int8 a2, int a3, uint64_t a4)
{
  _BOOL8 result;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  std::string *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a4)
  {
    v8 = *(NSObject **)(a1 + 40);
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = a3;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)vinyl::asString(a2);
    _os_log_error_impl(&dword_216897000, v8, OS_LOG_TYPE_ERROR, "Invalid vinyl transaction for %d for command %s. Ignoring", (uint8_t *)&__p, 0x12u);
    return 0;
  }
  if (*(unsigned __int8 *)(a4 + 8) == a2)
    return 1;
  v9 = *(NSObject **)(a1 + 40);
  result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v10 = vinyl::asString(a2);
    VinylTransaction::shortDescription(&__p, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    v14 = v10;
    v15 = 2080;
    v16 = p_p;
    _os_log_error_impl(&dword_216897000, v9, OS_LOG_TYPE_ERROR, "vinyl::Info has command %s, but our transaction is %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return result;
}

{
  _BOOL8 result;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  std::string *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a4)
  {
    v8 = *(NSObject **)(a1 + 40);
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = a3;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)vinyl::asString(a2);
    _os_log_error_impl(&dword_216897000, v8, OS_LOG_TYPE_ERROR, "Invalid tape transaction for %d for tape command %s. Ignoring", (uint8_t *)&__p, 0x12u);
    return 0;
  }
  if (*(unsigned __int8 *)(a4 + 8) == a2)
    return 1;
  v9 = *(NSObject **)(a1 + 40);
  result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v10 = vinyl::asString(a2);
    VinylTransaction::shortDescription(&__p, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    v14 = v10;
    v15 = 2080;
    v16 = p_p;
    _os_log_error_impl(&dword_216897000, v9, OS_LOG_TYPE_ERROR, "vinyl::Info has command %s, but our transaction is %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return result;
}

void VinylQMICommandDriver::finishTransactionWithData_sync(os_log_t *this, int a2)
{
  unsigned __int8 *Transaction_sync;
  unsigned __int8 *v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  std::string *v14;
  __int16 v15;
  uint64_t v16;
  std::string __p;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  Transaction_sync = (unsigned __int8 *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)this, a2);
  if (Transaction_sync)
  {
    v5 = Transaction_sync;
    v7 = this[5];
    if (v6)
    {
      v8 = v6;
      if (os_log_type_enabled(this[5], OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::shortDescription(&__p, (uint64_t)v8);
        v9 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        v10 = v8[9] - v8[8];
        v13 = 136315394;
        v14 = v9;
        v15 = 2048;
        v16 = v10;
        _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I %s completed, calling back with %lu bytes", (uint8_t *)&v13, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v11 = v8[7];
      __p.__r_.__value_.__s.__data_[0] = 1;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *((_OWORD *)v8 + 4);
      v18 = v8[10];
      v8[8] = 0;
      v8[9] = 0;
      v8[10] = 0;
      (*(void (**)(void))(v11 + 16))();
      if (__p.__r_.__value_.__s.__data_[0] == 1)
      {
        if (__p.__r_.__value_.__l.__size_)
        {
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          operator delete((void *)__p.__r_.__value_.__l.__size_);
        }
      }
      VinylQMICommandDriver::deleteTransaction_sync((VinylQMICommandDriver *)this, a2);
    }
    else if (os_log_type_enabled(this[5], OS_LOG_TYPE_ERROR))
    {
      v12 = vinyl::asString(v5[8]);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      _os_log_error_impl(&dword_216897000, v7, OS_LOG_TYPE_ERROR, "Vinyl Indication for command with data for %s was quite unexpected! Ignoring", (uint8_t *)&__p, 0xCu);
    }
  }
}

void sub_2169C3674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v2 = *(_OWORD *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 40) = v2;
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  v8 = *(_OWORD *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 184);
  v10 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  result = *(__n128 *)(a2 + 232);
  v12 = *(_OWORD *)(a2 + 248);
  v13 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 248) = v12;
  *(__n128 *)(a1 + 232) = result;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  v14 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = v14;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(_QWORD *)(a1 + 304) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN21VinylQMICommandDriver39handleFirmwareInfoUpdateIndication_syncERKN5vinyl4Info10IndicationE_block_invoke(uint64_t result, char *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 292) = *a2;
  return result;
}

void ___ZN21VinylQMICommandDriver39handleFirmwareInfoUpdateIndication_syncERKN5vinyl4Info10IndicationE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  os_log_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  const void *v23;
  uint64_t v24;
  unsigned __int8 *Transaction_sync;
  unsigned __int8 *v26;
  void *v27;
  NSObject *v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  const char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *v49[2];
  uint64_t v50;
  uint8_t buf[4];
  std::string *v52;
  std::string __p;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v2 = *(os_log_t **)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56) = *(_BYTE *)a2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v3 + 56) == 1)
  {
    *(_OWORD *)(v3 + 40) = *(_OWORD *)(a2 + 3);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 57) = *(_BYTE *)(a2 + 19);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(v4 + 74) = *(_OWORD *)(a2 + 36);
    *(_OWORD *)(v4 + 58) = v5;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 90) = *(_QWORD *)(a2 + 52);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 98) = *(_QWORD *)(a2 + 60);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 106) = *(_QWORD *)(a2 + 68);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(_OWORD *)(a2 + 76);
    *(_OWORD *)(v6 + 130) = *(_OWORD *)(a2 + 92);
    *(_OWORD *)(v6 + 114) = v7;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v9 = *(_OWORD *)(a2 + 108);
    *(_QWORD *)(v8 + 162) = *(_QWORD *)(a2 + 124);
    *(_OWORD *)(v8 + 146) = v9;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v11 = *(_WORD *)(a2 + 132);
    *(_BYTE *)(v10 + 172) = *(_BYTE *)(a2 + 134);
    *(_WORD *)(v10 + 170) = v11;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 173) = *(_QWORD *)(a2 + 135);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v13 = *(_OWORD *)(a2 + 143);
    *(_OWORD *)(v12 + 197) = *(_OWORD *)(a2 + 159);
    *(_OWORD *)(v12 + 181) = v13;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v15 = *(_OWORD *)(a2 + 175);
    *(_QWORD *)(v14 + 229) = *(_QWORD *)(a2 + 191);
    *(_OWORD *)(v14 + 213) = v15;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v17 = *(_WORD *)(a2 + 199);
    *(_BYTE *)(v16 + 239) = *(_BYTE *)(a2 + 201);
    *(_WORD *)(v16 + 237) = v17;
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 240) = *(_WORD *)(a2 + 202);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 242) = *(_QWORD *)(a2 + 204);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v19 = *(_WORD *)(a2 + 212);
    *(_BYTE *)(v18 + 252) = *(_BYTE *)(a2 + 214);
    *(_WORD *)(v18 + 250) = v19;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v21 = *(_OWORD *)(a2 + 231);
    *(_OWORD *)(v20 + 253) = *(_OWORD *)(a2 + 215);
    *(_OWORD *)(v20 + 269) = v21;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 285) = *(_BYTE *)(a2 + 247);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 288) = *(_BYTE *)(a2 + 248);
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  v22 = *(_DWORD *)(a1 + 52);
  v35 = *(_OWORD *)(v3 + 72);
  v36 = *(_OWORD *)(v3 + 88);
  v39 = *(_OWORD *)(v3 + 136);
  v40 = *(_OWORD *)(v3 + 152);
  v43 = *(_OWORD *)(v3 + 200);
  v44 = *(_OWORD *)(v3 + 216);
  v45 = *(_OWORD *)(v3 + 232);
  v46 = *(_OWORD *)(v3 + 248);
  v41 = *(_OWORD *)(v3 + 168);
  v42 = *(_OWORD *)(v3 + 184);
  v37 = *(_OWORD *)(v3 + 104);
  v38 = *(_OWORD *)(v3 + 120);
  v33 = *(_OWORD *)(v3 + 40);
  v34 = *(_OWORD *)(v3 + 56);
  v47 = *(_OWORD *)(v3 + 264);
  v48 = *(_OWORD *)(v3 + 280);
  v49[0] = 0;
  v49[1] = 0;
  v23 = *(const void **)(v3 + 296);
  v24 = *(_QWORD *)(v3 + 304);
  v50 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v49, v23, v24, v24 - (_QWORD)v23);
  Transaction_sync = (unsigned __int8 *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)v2, v22);
  if (Transaction_sync)
  {
    v26 = Transaction_sync;
    v28 = v2[5];
    if (v27)
    {
      v29 = (uint64_t)v27;
      if (os_log_type_enabled(v2[5], OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::shortDescription(&__p, v29);
        v30 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v52 = v30;
        _os_log_impl(&dword_216897000, v28, OS_LOG_TYPE_DEFAULT, "#I %s completed, calling back with firmware update data", buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v31 = *(_QWORD *)(v29 + 56);
      v65 = v45;
      v66 = v46;
      v67 = v47;
      v68 = v48;
      v61 = v41;
      v62 = v42;
      v63 = v43;
      v64 = v44;
      v57 = v37;
      v58 = v38;
      v59 = v39;
      v60 = v40;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v33;
      v54 = v34;
      v55 = v35;
      __p.__r_.__value_.__s.__data_[0] = 1;
      v56 = v36;
      v69 = *(_OWORD *)v49;
      v70 = v50;
      v49[1] = 0;
      v50 = 0;
      v49[0] = 0;
      (*(void (**)(void))(v31 + 16))();
      if (__p.__r_.__value_.__s.__data_[0] == 1 && (_QWORD)v69)
      {
        *((_QWORD *)&v69 + 1) = v69;
        operator delete((void *)v69);
      }
      VinylQMICommandDriver::deleteTransaction_sync((VinylQMICommandDriver *)v2, v22);
    }
    else if (os_log_type_enabled(v2[5], OS_LOG_TYPE_ERROR))
    {
      v32 = vinyl::asString(v26[8]);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      _os_log_error_impl(&dword_216897000, v28, OS_LOG_TYPE_ERROR, "Vinyl Indication for command with BOOL result for %s was quite unexpected! Ignoring", (uint8_t *)&__p, 0xCu);
    }
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
}

void sub_2169C3D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  void *v48;

  if (a47 == 1)
  {
    v48 = (void *)STACK[0x238];
    if (STACK[0x238])
    {
      STACK[0x240] = (unint64_t)v48;
      operator delete(v48);
    }
  }
  if (a41)
    operator delete(a41);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::finishTransactionWithResult_sync(os_log_t *this, int a2)
{
  unsigned __int8 *Transaction_sync;
  unsigned __int8 *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  std::string *p_p;
  uint64_t v10;
  const char *v11;
  std::string __p;
  uint8_t buf[4];
  std::string *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Transaction_sync = (unsigned __int8 *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)this, a2);
  if (Transaction_sync)
  {
    v5 = Transaction_sync;
    v7 = this[5];
    if (v6)
    {
      v8 = (uint64_t)v6;
      if (os_log_type_enabled(this[5], OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::shortDescription(&__p, v8);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315394;
        v14 = p_p;
        v15 = 1024;
        v16 = 1;
        _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I %s completed, calling back with result=%d", buf, 0x12u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v10 = *(_QWORD *)(v8 + 56);
      LOWORD(__p.__r_.__value_.__l.__data_) = 257;
      (*(void (**)(uint64_t))(v10 + 16))(v10);
      VinylQMICommandDriver::deleteTransaction_sync((VinylQMICommandDriver *)this, a2);
    }
    else if (os_log_type_enabled(this[5], OS_LOG_TYPE_ERROR))
    {
      v11 = vinyl::asString(v5[8]);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_error_impl(&dword_216897000, v7, OS_LOG_TYPE_ERROR, "Vinyl Indication for command with BOOL result for %s was quite unexpected! Ignoring", (uint8_t *)&__p, 0xCu);
    }
  }
}

void VinylQMICommandDriver::sendOutgoingData_sync(VinylQMICommandDriver *this, int a2)
{
  uint64_t Transaction_sync;
  uint64_t v5;
  unint64_t v6;
  NSObject *v7;
  std::string *p_aBlock;
  NSObject *v9;
  unsigned int v10;
  const void **v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::string::size_type v37;
  unint64_t v38;
  void *v39;
  _QWORD v40[6];
  std::__shared_weak_count *v41;
  int v42;
  void *__p[2];
  __int128 v44;
  __int128 buf;
  int v46;
  uint64_t v47;
  void *v48;
  std::string aBlock;
  void *v50;
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  Transaction_sync = VinylQMICommandDriver::findTransaction_sync(this, a2);
  if (Transaction_sync)
  {
    v5 = Transaction_sync;
    v6 = (*(_QWORD *)(Transaction_sync + 32) - *(_QWORD *)(Transaction_sync + 24) + 1499) / 0x5DCuLL;
    if (v6 == *(_DWORD *)(Transaction_sync + 48))
    {
      v7 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::shortDescription(&aBlock, v5);
        if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_aBlock = &aBlock;
        else
          p_aBlock = (std::string *)aBlock.__r_.__value_.__r.__words[0];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = p_aBlock;
        _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I %s: all outgoing segments complete", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
          operator delete(aBlock.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *(_OWORD *)__p = 0u;
      v44 = 0u;
      v10 = *(_DWORD *)(v5 + 48);
      v11 = (const void **)__p[1];
      if (__p[1] != (void *)v44)
      {
        while (*((_BYTE *)*v11 + 8) != 17)
        {
          if (++v11 == (const void **)v44)
            goto LABEL_18;
        }
      }
      if (v11 == (const void **)v44)
      {
LABEL_18:
        v14 = operator new();
        v15 = v14;
        *(_BYTE *)(v14 + 8) = 17;
        *(_QWORD *)v14 = &off_24D5DA5B0;
        *(_DWORD *)(v14 + 16) = 0;
        v13 = (char *)(v14 + 16);
        *(_QWORD *)(v14 + 32) = 0;
        *(_QWORD *)(v14 + 40) = 0;
        *(_QWORD *)(v14 + 24) = 0;
        v16 = v44;
        if ((unint64_t)v44 >= *((_QWORD *)&v44 + 1))
        {
          v18 = (uint64_t)(v44 - (unint64_t)__p[1]) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v19 = (uint64_t)(*((_QWORD *)&v44 + 1) - (unint64_t)__p[1]) >> 2;
          if (v19 <= v18 + 1)
            v19 = v18 + 1;
          if (*((_QWORD *)&v44 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v44 + 8, v20);
          else
            v21 = 0;
          v22 = (uint64_t *)&v21[8 * v18];
          v23 = &v21[8 * v20];
          *v22 = v15;
          v17 = v22 + 1;
          v25 = (char *)__p[1];
          v24 = (char *)v44;
          if ((void *)v44 != __p[1])
          {
            do
            {
              v26 = *((_QWORD *)v24 - 1);
              v24 -= 8;
              *--v22 = v26;
            }
            while (v24 != v25);
            v24 = (char *)__p[1];
          }
          __p[1] = v22;
          *(_QWORD *)&v44 = v17;
          *((_QWORD *)&v44 + 1) = v23;
          if (v24)
            operator delete(v24);
        }
        else
        {
          *(_QWORD *)v44 = v14;
          v17 = (_QWORD *)(v16 + 8);
        }
        *(_QWORD *)&v44 = v17;
      }
      else
      {
        if (!v12)
          __cxa_bad_cast();
        v13 = v12 + 16;
      }
      *((_WORD *)v13 + 1) = v10;
      *(_WORD *)v13 = v6;
      v27 = (char *)(*(_QWORD *)(v5 + 24) + 1500 * v10);
      if (*(_QWORD *)(v5 + 32) - (_QWORD)v27 <= 0x5DCuLL)
        v28 = *(char **)(v5 + 32);
      else
        v28 = v27 + 1500;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((_QWORD *)v13 + 1, v27, v28, v28 - v27);
      ++*(_DWORD *)(v5 + 48);
      v29 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (!v29 || (v30 = *((_QWORD *)this + 1), (v31 = std::__shared_weak_count::lock(v29)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v32 = v31;
      p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v34 = __ldxr(p_shared_weak_owners);
      while (__stxr(v34 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
      *(_QWORD *)&buf = (char *)this + 96;
      *((_QWORD *)&buf + 1) = QMIServiceMsg::create();
      v46 = 25000;
      v47 = 0;
      v48 = 0;
      v37 = MEMORY[0x24BDAC760];
      v40[0] = MEMORY[0x24BDAC760];
      v40[1] = 1174405120;
      v40[2] = ___ZN21VinylQMICommandDriver21sendOutgoingData_syncEj_block_invoke;
      v40[3] = &__block_descriptor_tmp_38_6;
      v40[4] = this;
      v40[5] = v30;
      v41 = v32;
      do
        v38 = __ldxr(p_shared_weak_owners);
      while (__stxr(v38 + 1, p_shared_weak_owners));
      v42 = a2;
      aBlock.__r_.__value_.__r.__words[0] = v37;
      aBlock.__r_.__value_.__l.__size_ = 0x40000000;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl7Message8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v50 = &unk_24D5DA788;
      v51 = v40;
      v39 = _Block_copy(&aBlock);
      v48 = v39;
      if (*((_QWORD *)&buf + 1))
      {
        qmi::Client::send();
        v39 = v48;
      }
      if (v39)
        _Block_release(v39);
      if (v41)
        std::__shared_weak_count::__release_weak(v41);
      std::__shared_weak_count::__release_weak(v32);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(aBlock.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(aBlock.__r_.__value_.__r.__words[0]) = a2;
      LOWORD(aBlock.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&aBlock.__r_.__value_.__r.__words[1] + 2) = a2;
      _os_log_error_impl(&dword_216897000, v9, OS_LOG_TYPE_ERROR, "sendOutgoingData[txid=%d] failed due to missing transaction info for %d", (uint8_t *)&aBlock, 0xEu);
    }
  }
}

void sub_2169C4398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a21);
  std::__shared_weak_count::__release_weak(v21);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a17);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::sCreateBasicMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void **v5;
  char **v6;
  const void **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)a1);
  v6 = (char **)(v4 + 8);
  v5 = *(const void ***)(v4 + 8);
  v7 = *(const void ***)(v4 + 16);
  if (v5 != v7)
  {
    while (*((_BYTE *)*v5 + 8) != 2)
    {
      if (++v5 == v7)
        goto LABEL_8;
    }
  }
  if (v5 == v7)
  {
LABEL_8:
    v10 = operator new();
    *(_BYTE *)(v10 + 8) = 2;
    *(_QWORD *)v10 = &off_24D5DA560;
    *(_BYTE *)(v10 + 12) = 0;
    v9 = (char *)(v10 + 12);
    *(_DWORD *)(v10 + 16) = 0;
    *(_BYTE *)(v10 + 20) = 0;
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(uint64_t **)(a1 + 16);
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - *v6) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v15 = v11 - (_QWORD)*v6;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>(a1 + 24, v17);
      else
        v18 = 0;
      v19 = (uint64_t *)&v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v10;
      v13 = v19 + 1;
      v22 = *(char **)(a1 + 8);
      v21 = *(char **)(a1 + 16);
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v19 = v23;
        }
        while (v21 != v22);
        v21 = *v6;
      }
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 24) = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12 = v10;
      v13 = v12 + 1;
    }
    *(_QWORD *)(a1 + 16) = v13;
  }
  else
  {
    if (!v8)
      __cxa_bad_cast();
    v9 = v8 + 12;
  }
  *v9 = *(_BYTE *)(a2 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)(a2 + 12);
  v9[8] = *(_BYTE *)(a2 + 16);
}

void sub_2169C45AC(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver21sendOutgoingData_syncEj_block_invoke(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(VinylQMICommandDriver **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          v9 = *((_QWORD *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(_DWORD *)(a1 + 56);
            *(_DWORD *)buf = 67109120;
            v16 = v10;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I sendOutgoingData [txid=%d] received an error; cancelling this transaction.",
              buf,
              8u);
            v8 = *(_DWORD *)(a2 + 4);
          }
          v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
        else
        {
          VinylQMICommandDriver::sendOutgoingData_sync(v5, *(_DWORD *)(a1 + 56));
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2169C4708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::asVinylDriverError(int a1)
{
  if (a1 > 516)
  {
    if (a1 == 517)
      return 9;
    if (a1 == 65537)
      return 1;
  }
  else
  {
    if (a1 == 102)
      return 10;
    if (a1 == 516)
      return 6;
  }
  if (qmi::isInternalError())
    return 3;
  else
    return 1;
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrI21VinylQMICommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrI21VinylQMICommandDriverEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

BOOL VinylQMICommandDriver::sendOutgoingTapeData_sync(VinylQMICommandDriver *this, int a2, char a3)
{
  uint64_t Transaction_sync;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  _BYTE *v10;
  NSObject *v11;
  unsigned int v12;
  const void **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  NSObject *v31;
  std::string *v32;
  int v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_weak_owners;
  unint64_t v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  _QWORD v46[6];
  std::__shared_weak_count *v47;
  int v48;
  char v49;
  void *v50[2];
  __int128 v51;
  std::string buf;
  uint64_t v53;
  void *aBlock;
  _BYTE __p[32];
  _QWORD *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  Transaction_sync = VinylQMICommandDriver::findTransaction_sync(this, a2);
  v7 = Transaction_sync;
  if (Transaction_sync)
  {
    v8 = (*(_QWORD *)(Transaction_sync + 32) - *(_QWORD *)(Transaction_sync + 24) + 1499) / 0x5DCuLL;
    if (v8 == *(_DWORD *)(Transaction_sync + 48))
    {
      v9 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::shortDescription((std::string *)__p, v7);
        if (__p[23] >= 0)
          v10 = __p;
        else
          v10 = *(_BYTE **)__p;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
        _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: all outgoing segments complete", (uint8_t *)&buf, 0xCu);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
    }
    else
    {
      *(_OWORD *)v50 = 0u;
      v51 = 0u;
      v12 = *(_DWORD *)(v7 + 48);
      v13 = (const void **)v50[1];
      if (v50[1] != (void *)v51)
      {
        while (*((_BYTE *)*v13 + 8) != 16)
        {
          if (++v13 == (const void **)v51)
            goto LABEL_18;
        }
      }
      if (v13 == (const void **)v51)
      {
LABEL_18:
        v16 = operator new();
        v17 = v16;
        *(_BYTE *)(v16 + 8) = 16;
        *(_QWORD *)v16 = &off_24D5DA650;
        *(_BYTE *)(v16 + 16) = 0;
        v15 = (char *)(v16 + 16);
        *(_DWORD *)(v16 + 18) = 0;
        *(_QWORD *)(v16 + 32) = 0;
        *(_QWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 24) = 0;
        v18 = v51;
        if ((unint64_t)v51 >= *((_QWORD *)&v51 + 1))
        {
          v20 = (uint64_t)(v51 - (unint64_t)v50[1]) >> 3;
          if ((unint64_t)(v20 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v21 = (uint64_t)(*((_QWORD *)&v51 + 1) - (unint64_t)v50[1]) >> 2;
          if (v21 <= v20 + 1)
            v21 = v20 + 1;
          if (*((_QWORD *)&v51 + 1) - (unint64_t)v50[1] >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v51 + 8, v22);
          else
            v23 = 0;
          v24 = (uint64_t *)&v23[8 * v20];
          v25 = &v23[8 * v22];
          *v24 = v17;
          v19 = v24 + 1;
          v27 = (char *)v50[1];
          v26 = (char *)v51;
          if ((void *)v51 != v50[1])
          {
            do
            {
              v28 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *--v24 = v28;
            }
            while (v26 != v27);
            v26 = (char *)v50[1];
          }
          v50[1] = v24;
          *(_QWORD *)&v51 = v19;
          *((_QWORD *)&v51 + 1) = v25;
          if (v26)
            operator delete(v26);
        }
        else
        {
          *(_QWORD *)v51 = v16;
          v19 = (_QWORD *)(v18 + 8);
        }
        *(_QWORD *)&v51 = v19;
      }
      else
      {
        if (!v14)
          __cxa_bad_cast();
        v15 = v14 + 16;
      }
      *((_WORD *)v15 + 2) = v12;
      *((_WORD *)v15 + 1) = v8;
      *v15 = a3;
      v29 = (char *)(*(_QWORD *)(v7 + 24) + 1500 * v12);
      if (*(_QWORD *)(v7 + 32) - (_QWORD)v29 <= 0x5DCuLL)
        v30 = *(char **)(v7 + 32);
      else
        v30 = v29 + 1500;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((_QWORD *)v15 + 1, v29, v30, v30 - v29);
      ++*(_DWORD *)(v7 + 48);
      v31 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::longDescription(&buf, v7);
        v32 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        v33 = *(_DWORD *)(v7 + 48);
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v32;
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = v33;
        *(_WORD *)&__p[18] = 2048;
        *(_QWORD *)&__p[20] = v8;
        _os_log_impl(&dword_216897000, v31, OS_LOG_TYPE_DEFAULT, "#I %s: sending subsegment #%d (of %zu total subsegments)", __p, 0x1Cu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (!v34 || (v35 = *((_QWORD *)this + 1), (v36 = std::__shared_weak_count::lock(v34)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v37 = v36;
      p_shared_weak_owners = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v39 = __ldxr(p_shared_weak_owners);
      while (__stxr(v39 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 96;
      buf.__r_.__value_.__l.__size_ = QMIServiceMsg::create();
      LODWORD(buf.__r_.__value_.__r.__words[2]) = 25000;
      v53 = 0;
      aBlock = 0;
      v42 = MEMORY[0x24BDAC760];
      v46[0] = MEMORY[0x24BDAC760];
      v46[1] = 1174405120;
      v46[2] = ___ZN21VinylQMICommandDriver25sendOutgoingTapeData_syncEjb_block_invoke;
      v46[3] = &__block_descriptor_tmp_39_8;
      v46[4] = this;
      v46[5] = v35;
      v47 = v37;
      do
        v43 = __ldxr(p_shared_weak_owners);
      while (__stxr(v43 + 1, p_shared_weak_owners));
      v48 = a2;
      v49 = a3;
      *(_QWORD *)__p = v42;
      *(_QWORD *)&__p[8] = 0x40000000;
      *(_QWORD *)&__p[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl11TapeMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      *(_QWORD *)&__p[24] = &unk_24D5DA7B0;
      v56 = v46;
      v44 = _Block_copy(__p);
      aBlock = v44;
      if (buf.__r_.__value_.__l.__size_)
      {
        qmi::Client::send();
        v44 = aBlock;
      }
      if (v44)
        _Block_release(v44);
      if (v47)
        std::__shared_weak_count::__release_weak(v47);
      std::__shared_weak_count::__release_weak(v37);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v50);
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 67109376;
      *(_DWORD *)&__p[4] = a2;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = a2;
      _os_log_error_impl(&dword_216897000, v11, OS_LOG_TYPE_ERROR, "sendOutgoingTapeData[txid=%d] failed due to missing transaction info for %d", __p, 0xEu);
    }
  }
  return v7 != 0;
}

void sub_2169C4CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a17);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::sCreateBasicTapeMessage(_anonymous_namespace_ *this, const VinylTransaction *a2)
{
  const void **v4;
  const void **v5;
  char **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  qmi::MutableMessageBase::MutableMessageBase(this);
  if (!*((_BYTE *)a2 + 17))
    __assert_rtn("sCreateBasicTapeMessage", "VinylQMICommandDriver.cpp", 75, "\"type is not tape\" && transaction.fTapeType");
  v4 = (const void **)*((_QWORD *)this + 1);
  v5 = (const void **)*((_QWORD *)this + 2);
  v6 = (char **)((char *)this + 8);
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 1)
    {
      if (++v4 == v5)
        goto LABEL_9;
    }
  }
  if (v4 == v5)
  {
LABEL_9:
    v9 = operator new();
    *(_BYTE *)(v9 + 8) = 1;
    *(_QWORD *)v9 = &off_24D5DA600;
    *(_BYTE *)(v9 + 12) = 0;
    v8 = (char *)(v9 + 12);
    *(_DWORD *)(v9 + 16) = 0;
    *(_BYTE *)(v9 + 20) = 0;
    v10 = *((_QWORD *)this + 3);
    v11 = (uint64_t *)*((_QWORD *)this + 2);
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - *v6) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v6;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)this + 24, v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)*((_QWORD *)this + 1);
      v20 = (char *)*((_QWORD *)this + 2);
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v22;
        }
        while (v20 != v21);
        v20 = *v6;
      }
      *((_QWORD *)this + 1) = v18;
      *((_QWORD *)this + 2) = v12;
      *((_QWORD *)this + 3) = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    *((_QWORD *)this + 2) = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = v7 + 12;
  }
  *v8 = *((_BYTE *)a2 + 8);
  *((_DWORD *)v8 + 1) = *((_DWORD *)a2 + 3);
  v8[8] = *((_BYTE *)a2 + 16);
}

void sub_2169C4F20(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase *v1;

  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void VinylTransaction::longDescription(std::string *this, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  int v9;
  size_t v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;

  VinylTransaction::shortDescription(&v28, a2);
  v4 = std::string::append(&v28, " outBytes=", 0xAuLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v27, *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24));
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v27;
  else
    v6 = (std::string *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  else
    size = v27.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v29, (const std::string::value_type *)v6, size);
  v30 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (*(_QWORD *)(a2 + 24) == *(_QWORD *)(a2 + 32))
  {
    *this = v30;
    return;
  }
  v9 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    v10 = v30.__r_.__value_.__l.__size_;
  memset(&v26, 0, sizeof(v26));
  v11 = &v26;
  std::string::basic_string[abi:ne180100]((uint64_t)&v26, v10 + 2);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (v9 >= 0)
      v12 = &v30;
    else
      v12 = (std::string *)v30.__r_.__value_.__r.__words[0];
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, " (");
  std::to_string(&v25, *(_DWORD *)(a2 + 48));
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v25;
  else
    v13 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  else
    v14 = v25.__r_.__value_.__l.__size_;
  v15 = std::string::append(&v26, (const std::string::value_type *)v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v27, "/", 1uLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v24, (*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24) + 1499) / 0x5DCuLL);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v24;
  else
    v19 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  else
    v20 = v24.__r_.__value_.__l.__size_;
  v21 = std::string::append(&v28, (const std::string::value_type *)v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v29, " seg sent)", 0xAuLL);
  *this = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
      return;
  }
  else if ((v9 & 0x80000000) == 0)
  {
    return;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_2169C5234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  int v40;
  uint64_t v41;

  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));
  if (a15 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (v40 < 0)
    operator delete(*(void **)(v41 - 96));
  _Unwind_Resume(exception_object);
}

void ___ZN21VinylQMICommandDriver25sendOutgoingTapeData_syncEjb_block_invoke(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(VinylQMICommandDriver **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          v9 = *((_QWORD *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(_DWORD *)(a1 + 56);
            *(_DWORD *)buf = 67109120;
            v16 = v10;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I sendNextOutgoingTapeData[txid=%d] received an error; cancelling this transaction.",
              buf,
              8u);
            v8 = *(_DWORD *)(a2 + 4);
          }
          v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
        else
        {
          VinylQMICommandDriver::sendOutgoingTapeData_sync(v5, *(_DWORD *)(a1 + 56), *(_BYTE *)(a1 + 60));
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2169C546C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::finishTransactionWithProfileId_sync(os_log_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *Transaction_sync;
  unsigned __int8 *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  void *p_p;
  uint64_t v15;
  const char *v16;
  void *__p;
  char v18;
  std::string v19;
  uint8_t buf[4];
  std::string *v21;
  __int16 v22;
  void *v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = a3;
  *((_QWORD *)&v24 + 1) = a4;
  Transaction_sync = (unsigned __int8 *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)a1, a2);
  if (Transaction_sync)
  {
    v7 = Transaction_sync;
    v9 = a1[5];
    if (v8)
    {
      v10 = (uint64_t)v8;
      if (os_log_type_enabled(a1[5], OS_LOG_TYPE_DEFAULT))
      {
        VinylTransaction::shortDescription(&v19, v10);
        v11 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
        v12 = v19.__r_.__value_.__r.__words[0];
        sVinylProfileIdAsString();
        v13 = &v19;
        if (v11 < 0)
          v13 = (std::string *)v12;
        if (v18 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        *(_DWORD *)buf = 136315394;
        v21 = v13;
        v22 = 2080;
        v23 = p_p;
        _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s completed, calling back with data=%s", buf, 0x16u);
        if (v18 < 0)
          operator delete(__p);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
      }
      v15 = *(_QWORD *)(v10 + 56);
      v19.__r_.__value_.__s.__data_[0] = 1;
      *(_OWORD *)((char *)&v19.__r_.__value_.__l.__data_ + 1) = v24;
      (*(void (**)(void))(v15 + 16))();
      VinylQMICommandDriver::deleteTransaction_sync((VinylQMICommandDriver *)a1, a2);
    }
    else if (os_log_type_enabled(a1[5], OS_LOG_TYPE_ERROR))
    {
      v16 = vinyl::asString(v7[8]);
      LODWORD(v19.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
      _os_log_error_impl(&dword_216897000, v9, OS_LOG_TYPE_ERROR, "Vinyl Indication for command with BOOL result for %s was quite unexpected! Ignoring", (uint8_t *)&v19, 0xCu);
    }
  }
}

void sub_2169C5650(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN21VinylQMICommandDriver13queryCsn_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__15arrayIhLm16EEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t TlvValue;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint8_t buf[8];

  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(VinylQMICommandDriver **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_13;
      v8 = *((_DWORD *)a2 + 1);
      v9 = *(_DWORD *)(a1 + 56);
      if (v8)
      {
        VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v9, v10, 0, 0);
        goto LABEL_13;
      }
      TlvValue = qmi::MessageBase::findTlvValue(a2);
      v13 = TlvValue;
      if (TlvValue)
      {
        v14 = v12;
        *(_QWORD *)buf = TlvValue;
        v15 = tlv::parseV<vinyl::tlv::RespCsn>((unint64_t *)buf, v12);
        if (*(_QWORD *)buf)
        {
          VinylQMICommandDriver::finishTransactionWithProfileId_sync((os_log_t *)v5, v9, v15, v16);
          goto LABEL_13;
        }
        if ((((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 32, v13, v14) & 1) != 0)
        {
LABEL_13:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
      }
      v17 = *((_QWORD *)v5 + 5);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v17, OS_LOG_TYPE_DEFAULT, "#E CSN response is missing the CSN TLV; that's really bad.",
          buf,
          2u);
      }
      VinylQMICommandDriver::cancelTransactionWithError_sync(v5, *(_DWORD *)(a1 + 56), 5, 0, 0);
      goto LABEL_13;
    }
  }
}

void sub_2169C57F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::getFirmwareUpdateData_sync(uint64_t a1, int a2, void *aBlock)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  uint64_t v21;
  int v22;
  const void *v23;
  std::__shared_weak_count *v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  _QWORD v36[6];
  std::__shared_weak_count *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  void *v43;
  _OWORD v44[2];
  uint64_t aBlocka;
  __int128 v46;
  void *v47;
  _QWORD *v48;

  if (aBlock)
    v4 = _Block_copy(aBlock);
  else
    v4 = 0;
  v5 = operator new();
  v6 = v5;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_BYTE *)(v5 + 16) = 1;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)v5 = &off_24D5DA3C8;
  v7 = *(_QWORD *)(a1 + 176);
  v8 = *(uint64_t **)(a1 + 168);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)(a1 + 160);
    v11 = v8 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v48 = (_QWORD *)(a1 + 176);
    if (v14)
    {
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v14);
      v10 = *(_QWORD **)(a1 + 160);
      v8 = *(uint64_t **)(a1 + 168);
    }
    else
    {
      v15 = 0;
    }
    v16 = (uint64_t *)(v14 + 8 * v11);
    v17 = (void *)(v14 + 8 * v15);
    v47 = v17;
    *v16 = v6;
    *((_QWORD *)&v46 + 1) = v16 + 1;
    if (v8 == v10)
    {
      v9 = v16 + 1;
    }
    else
    {
      do
      {
        v18 = *--v8;
        *v8 = 0;
        *--v16 = v18;
      }
      while (v8 != v10);
      v9 = (_QWORD *)*((_QWORD *)&v46 + 1);
      v17 = v47;
    }
    v19 = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v16;
    *(_QWORD *)(a1 + 168) = v9;
    v46 = v19;
    v20 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v17;
    v47 = v20;
    aBlocka = v19;
    std::__split_buffer<std::unique_ptr<VinylTransaction>>::~__split_buffer((uint64_t)&aBlocka);
  }
  else
  {
    *v8 = v5;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 168) = v9;
  v21 = *(v9 - 1);
  *(_BYTE *)(v21 + 8) = 64;
  v22 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 128) = v22 + 1;
  *(_DWORD *)(v21 + 12) = v22;
  *(_BYTE *)(v21 + 16) = VinylSlotIdToInt();
  v23 = *(const void **)(v21 + 56);
  *(_QWORD *)(v21 + 56) = v4;
  if (v23)
    _Block_release(v23);
  memset(v44, 0, sizeof(v44));
  v24 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v24
    || (v25 = *(_DWORD *)(v21 + 12), v26 = *(_QWORD *)(a1 + 8), (v27 = std::__shared_weak_count::lock(v24)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v28 = v27;
  p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v28);
  }
  v39 = a1 + 96;
  v40 = QMIServiceMsg::create();
  v41 = 25000;
  v42 = 0;
  v43 = 0;
  v33 = MEMORY[0x24BDAC760];
  v36[0] = MEMORY[0x24BDAC760];
  v36[1] = 1174405120;
  v36[2] = ___ZN21VinylQMICommandDriver26getFirmwareUpdateData_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultI23VinylFirmwareUpdateDataNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke;
  v36[3] = &__block_descriptor_tmp_42_5;
  v36[4] = a1;
  v36[5] = v26;
  v37 = v28;
  do
    v34 = __ldxr(p_shared_weak_owners);
  while (__stxr(v34 + 1, p_shared_weak_owners));
  v38 = v25;
  aBlocka = v33;
  *(_QWORD *)&v46 = 0x40000000;
  *((_QWORD *)&v46 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl7Message8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v47 = &unk_24D5DA788;
  v48 = v36;
  v35 = _Block_copy(&aBlocka);
  v43 = v35;
  if (v40)
  {
    qmi::Client::send();
    v35 = v43;
  }
  if (v35)
    _Block_release(v35);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  std::__shared_weak_count::__release_weak(v28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v44);
}

void sub_2169C5B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__shared_weak_count *v23;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver26getFirmwareUpdateData_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultI23VinylFirmwareUpdateDataNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(VinylQMICommandDriver **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          v9 = *((_QWORD *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(_DWORD *)(a1 + 56);
            *(_DWORD *)buf = 67109120;
            v16 = v10;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E getFirmwareUpdateData[txid=%d] received an error; cancelling this transaction.",
              buf,
              8u);
            v8 = *(_DWORD *)(a2 + 4);
          }
          v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2169C5CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::secureAuth_sync(VinylQMICommandDriver *a1, uint64_t a2, char **a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*a3 == a3[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E secure AKA failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 65, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    if ((char **)(Transaction_sync + 24) != a3)
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(Transaction_sync + 24), *a3, a3[1], a3[1] - *a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::shortDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: running secure AKA", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingData_sync(a1, *(_DWORD *)(Transaction_sync + 12));
  }
}

void sub_2169C5E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::signPayload_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E signPayload failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 23, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::shortDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: signing payload", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingData_sync(a1, *(_DWORD *)(Transaction_sync + 12));
  }
}

void sub_2169C60A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::getSignIdMap_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E getSignIdMap failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 16, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::shortDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: generating a sign-id map", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingData_sync(a1, *(_DWORD *)(Transaction_sync + 12));
  }
}

void sub_2169C62B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::fetchProfiles_sync(_QWORD *a1, uint64_t a2, void *aBlock)
{
  void *v5;
  uint64_t Transaction_sync;
  NSObject *v7;
  std::string *v8;
  std::__shared_weak_count *v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string::size_type v18;
  unint64_t v19;
  void *v20;
  _QWORD v21[6];
  std::__shared_weak_count *v22;
  int v23;
  _OWORD v24[2];
  void *aBlocka;
  std::string __p;
  void *v27;
  _QWORD *v28;
  __int128 buf;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (aBlock)
    v5 = _Block_copy(aBlock);
  else
    v5 = 0;
  aBlocka = v5;
  Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 5, a2, (uint64_t *)&aBlocka);
  if (aBlocka)
    _Block_release(aBlocka);
  v7 = a1[5];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    VinylTransaction::shortDescription(&__p, Transaction_sync);
    v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v8;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I %s: fetching profiles", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(v24, 0, sizeof(v24));
  v9 = (std::__shared_weak_count *)a1[2];
  if (!v9 || (v10 = *(_DWORD *)(Transaction_sync + 12), v11 = a1[1], (v12 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&buf = a1 + 12;
  *((_QWORD *)&buf + 1) = QMIServiceMsg::create();
  v30 = 25000;
  v31 = 0;
  v32 = 0;
  v18 = MEMORY[0x24BDAC760];
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 1174405120;
  v21[2] = ___ZN21VinylQMICommandDriver18fetchProfiles_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__16vectorIhNS4_9allocatorIhEEEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke;
  v21[3] = &__block_descriptor_tmp_43_8;
  v21[4] = a1;
  v21[5] = v11;
  v22 = v13;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v23 = v10;
  __p.__r_.__value_.__r.__words[0] = v18;
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl7Message8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v27 = &unk_24D5DA788;
  v28 = v21;
  v20 = _Block_copy(&__p);
  v32 = v20;
  if (*((_QWORD *)&buf + 1))
  {
    qmi::Client::send();
    v20 = v32;
  }
  if (v20)
    _Block_release(v20);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::__shared_weak_count::__release_weak(v13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v24);
}

void sub_2169C6584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN21VinylQMICommandDriver18fetchProfiles_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__16vectorIhNS4_9allocatorIhEEEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(VinylQMICommandDriver **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          v9 = *((_QWORD *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(_DWORD *)(a1 + 56);
            *(_DWORD *)buf = 67109120;
            v16 = v10;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E fetchProfiles[txid=%d] received an error; cancelling this transaction.",
              buf,
              8u);
            v8 = *(_DWORD *)(a2 + 4);
          }
          v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2169C6734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::activateProfile_sync(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  void *v7;
  uint64_t Transaction_sync;
  NSObject *v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  void *p_p;
  std::__shared_weak_count *v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string::size_type v23;
  unint64_t v24;
  void *v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  int v28;
  void *__p;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  void *v34;
  void *aBlocka;
  std::string v36;
  void *v37;
  _QWORD *v38;
  __int128 v39;
  uint8_t buf[40];
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v41 = a3;
  *((_QWORD *)&v41 + 1) = a4;
  if (aBlock)
    v7 = _Block_copy(aBlock);
  else
    v7 = 0;
  aBlocka = v7;
  Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 20, a2, (uint64_t *)&aBlocka);
  if (aBlocka)
    _Block_release(aBlocka);
  v9 = a1[5];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    VinylTransaction::shortDescription(&v36, Transaction_sync);
    v10 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
    v11 = v36.__r_.__value_.__r.__words[0];
    sVinylProfileIdAsString();
    v12 = &v36;
    if (v10 < 0)
      v12 = (std::string *)v11;
    if (v32 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = p_p;
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: activating profile %s", buf, 0x16u);
    if (v32 < 0)
      operator delete(__p);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  memset(buf, 0, 32);
  v39 = v41;
  *(_OWORD *)qmi::MutableMessageBase::getTLV<vinyl::tlv::ReqProfileId>(buf) = v39;
  v14 = (std::__shared_weak_count *)a1[2];
  if (!v14
    || (v15 = *(_DWORD *)(Transaction_sync + 12), v16 = a1[1], (v17 = std::__shared_weak_count::lock(v14)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v18 = v17;
  p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
  }
  __p = a1 + 12;
  v30 = QMIServiceMsg::create();
  v31 = 25000;
  v33 = 0;
  v34 = 0;
  v23 = MEMORY[0x24BDAC760];
  v26[0] = MEMORY[0x24BDAC760];
  v26[1] = 1174405120;
  v26[2] = ___ZN21VinylQMICommandDriver20activateProfile_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2;
  v26[3] = &__block_descriptor_tmp_45_5;
  v26[4] = a1;
  v26[5] = v16;
  v27 = v18;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  v28 = v15;
  v36.__r_.__value_.__r.__words[0] = v23;
  v36.__r_.__value_.__l.__size_ = 0x40000000;
  v36.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl7Message8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v37 = &unk_24D5DA788;
  v38 = v26;
  v25 = _Block_copy(&v36);
  v34 = v25;
  if (v30)
  {
    qmi::Client::send();
    v25 = v34;
  }
  if (v25)
    _Block_release(v25);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  std::__shared_weak_count::__release_weak(v18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)buf);
}

void sub_2169C6A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN21VinylQMICommandDriver20activateProfile_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(VinylQMICommandDriver **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          v9 = *((_QWORD *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(_DWORD *)(a1 + 56);
            *(_DWORD *)buf = 67109120;
            v16 = v10;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E activateProfile[txid=%d] received an error; cancelling this transaction.",
              buf,
              8u);
            v8 = *(_DWORD *)(a2 + 4);
          }
          v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2169C6BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::deactivateProfile_sync(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  void *v7;
  uint64_t Transaction_sync;
  NSObject *v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  void *p_p;
  std::__shared_weak_count *v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string::size_type v23;
  unint64_t v24;
  void *v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  int v28;
  void *__p;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  void *v34;
  void *aBlocka;
  std::string v36;
  void *v37;
  _QWORD *v38;
  __int128 v39;
  uint8_t buf[40];
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v41 = a3;
  *((_QWORD *)&v41 + 1) = a4;
  if (aBlock)
    v7 = _Block_copy(aBlock);
  else
    v7 = 0;
  aBlocka = v7;
  Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 21, a2, (uint64_t *)&aBlocka);
  if (aBlocka)
    _Block_release(aBlocka);
  v9 = a1[5];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    VinylTransaction::shortDescription(&v36, Transaction_sync);
    v10 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
    v11 = v36.__r_.__value_.__r.__words[0];
    sVinylProfileIdAsString();
    v12 = &v36;
    if (v10 < 0)
      v12 = (std::string *)v11;
    if (v32 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = p_p;
    _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: deactivating profile %s", buf, 0x16u);
    if (v32 < 0)
      operator delete(__p);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  memset(buf, 0, 32);
  v39 = v41;
  *(_OWORD *)qmi::MutableMessageBase::getTLV<vinyl::tlv::ReqProfileId>(buf) = v39;
  v14 = (std::__shared_weak_count *)a1[2];
  if (!v14
    || (v15 = *(_DWORD *)(Transaction_sync + 12), v16 = a1[1], (v17 = std::__shared_weak_count::lock(v14)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v18 = v17;
  p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
  }
  __p = a1 + 12;
  v30 = QMIServiceMsg::create();
  v31 = 25000;
  v33 = 0;
  v34 = 0;
  v23 = MEMORY[0x24BDAC760];
  v26[0] = MEMORY[0x24BDAC760];
  v26[1] = 1174405120;
  v26[2] = ___ZN21VinylQMICommandDriver22deactivateProfile_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2;
  v26[3] = &__block_descriptor_tmp_47_6;
  v26[4] = a1;
  v26[5] = v16;
  v27 = v18;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  v28 = v15;
  v36.__r_.__value_.__r.__words[0] = v23;
  v36.__r_.__value_.__l.__size_ = 0x40000000;
  v36.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl7Message8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v37 = &unk_24D5DA788;
  v38 = v26;
  v25 = _Block_copy(&v36);
  v34 = v25;
  if (v30)
  {
    qmi::Client::send();
    v25 = v34;
  }
  if (v25)
    _Block_release(v25);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  std::__shared_weak_count::__release_weak(v18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)buf);
}

void sub_2169C6ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN21VinylQMICommandDriver22deactivateProfile_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(VinylQMICommandDriver **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          v9 = *((_QWORD *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(_DWORD *)(a1 + 56);
            *(_DWORD *)buf = 67109120;
            v16 = v10;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E deactivateProfile[txid=%d] received an error; cancelling this transaction.",
              buf,
              8u);
            v8 = *(_DWORD *)(a2 + 4);
          }
          v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2169C709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::deleteProfiles_sync(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *aBlock)
{
  void *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  uint64_t v13;
  std::string::size_type v14;
  const void **v15;
  char *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v32;
  std::__shared_weak_count *v33;
  int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_weak_owners;
  unint64_t v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  _QWORD v44[6];
  std::__shared_weak_count *v45;
  int v46;
  _QWORD v47[2];
  _QWORD *(*v48)(_QWORD *, void **);
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53[2];
  __int128 v54;
  void *aBlocka;
  std::string __p;
  void *v57;
  _QWORD *v58;
  _BYTE buf[22];
  uint64_t v60;
  void *v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v62 = a3;
  *((_QWORD *)&v62 + 1) = a4;
  if (aBlock)
    v9 = _Block_copy(aBlock);
  else
    v9 = 0;
  aBlocka = v9;
  Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 22, a2, (uint64_t *)&aBlocka);
  if (aBlocka)
    _Block_release(aBlocka);
  v11 = a1[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    VinylTransaction::shortDescription(&__p, Transaction_sync);
    v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v13 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v13;
    _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: deleting %lu profiles.", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v54 = 0u;
  *(_OWORD *)v53 = 0u;
  v14 = MEMORY[0x24BDAC760];
  v47[0] = MEMORY[0x24BDAC760];
  v47[1] = 1174405120;
  v48 = ___ZN21VinylQMICommandDriver19deleteProfiles_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEENS2_6vectorIS4_NS2_9allocatorIS4_EEEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke;
  v49 = &__block_descriptor_tmp_48_5;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  std::vector<std::array<unsigned char,16ul>>::__init_with_size[abi:ne180100]<std::array<unsigned char,16ul>*,std::array<unsigned char,16ul>*>(&v50, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4);
  v15 = (const void **)v53[1];
  if (v53[1] != (void *)v54)
  {
    while (*((_BYTE *)*v15 + 8) != 19)
    {
      if (++v15 == (const void **)v54)
        goto LABEL_19;
    }
  }
  if (v15 == (const void **)v54)
  {
LABEL_19:
    v18 = operator new();
    v19 = v18;
    *(_BYTE *)(v18 + 8) = 19;
    *(_QWORD *)(v18 + 16) = 0;
    v17 = (void **)(v18 + 16);
    *(_QWORD *)v18 = &off_24D5DA848;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    v20 = v54;
    if ((unint64_t)v54 >= *((_QWORD *)&v54 + 1))
    {
      v22 = (uint64_t)(v54 - (unint64_t)v53[1]) >> 3;
      if ((unint64_t)(v22 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v23 = (uint64_t)(*((_QWORD *)&v54 + 1) - (unint64_t)v53[1]) >> 2;
      if (v23 <= v22 + 1)
        v23 = v22 + 1;
      if (*((_QWORD *)&v54 + 1) - (unint64_t)v53[1] >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v54 + 8, v24);
      else
        v25 = 0;
      v26 = (uint64_t *)&v25[8 * v22];
      v27 = &v25[8 * v24];
      *v26 = v19;
      v21 = v26 + 1;
      v29 = (char *)v53[1];
      v28 = (char *)v54;
      if ((void *)v54 != v53[1])
      {
        do
        {
          v30 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *--v26 = v30;
        }
        while (v28 != v29);
        v28 = (char *)v53[1];
      }
      v53[1] = v26;
      *(_QWORD *)&v54 = v21;
      *((_QWORD *)&v54 + 1) = v27;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *(_QWORD *)v54 = v18;
      v21 = (_QWORD *)(v20 + 8);
    }
    *(_QWORD *)&v54 = v21;
  }
  else
  {
    if (!v16)
      __cxa_bad_cast();
    v17 = (void **)(v16 + 16);
  }
  v48(v47, v17);
  if ((_QWORD)v62 != *MEMORY[0x24BDC3EE0] || *((_QWORD *)&v62 + 1) != *(_QWORD *)(MEMORY[0x24BDC3EE0] + 8))
  {
    v32 = qmi::MutableMessageBase::getTLV<vinyl::tlv::ReqProfileId>(v53);
    *(_OWORD *)v32 = v62;
  }
  v33 = (std::__shared_weak_count *)a1[2];
  if (!v33
    || (v34 = *(_DWORD *)(Transaction_sync + 12), v35 = a1[1], (v36 = std::__shared_weak_count::lock(v33)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v37 = v36;
  p_shared_weak_owners = (unint64_t *)&v36->__shared_weak_owners_;
  do
    v39 = __ldxr(p_shared_weak_owners);
  while (__stxr(v39 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v36->__shared_owners_;
  do
    v41 = __ldaxr(p_shared_owners);
  while (__stlxr(v41 - 1, p_shared_owners));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v37);
  }
  *(_QWORD *)buf = a1 + 12;
  *(_QWORD *)&buf[8] = QMIServiceMsg::create();
  *(_DWORD *)&buf[16] = 25000;
  v60 = 0;
  v61 = 0;
  v44[0] = v14;
  v44[1] = 1174405120;
  v44[2] = ___ZN21VinylQMICommandDriver19deleteProfiles_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEENS2_6vectorIS4_NS2_9allocatorIS4_EEEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2;
  v44[3] = &__block_descriptor_tmp_51_4;
  v44[4] = a1;
  v44[5] = v35;
  v45 = v37;
  do
    v42 = __ldxr(p_shared_weak_owners);
  while (__stxr(v42 + 1, p_shared_weak_owners));
  v46 = v34;
  __p.__r_.__value_.__r.__words[0] = v14;
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl7Message8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v57 = &unk_24D5DA788;
  v58 = v44;
  v43 = _Block_copy(&__p);
  v61 = v43;
  if (*(_QWORD *)&buf[8])
  {
    qmi::Client::send();
    v43 = v61;
  }
  if (v43)
    _Block_release(v43);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v37);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v53);
}

void sub_2169C7538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *aBlock)
{
  if (__p)
    operator delete(__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a25);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c58_ZTSNSt3__16vectorINS_5arrayIhLm16EEENS_9allocatorIS2_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<std::array<unsigned char,16ul>>::__init_with_size[abi:ne180100]<std::array<unsigned char,16ul>*,std::array<unsigned char,16ul>*>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
}

void __destroy_helper_block_e8_32c58_ZTSNSt3__16vectorINS_5arrayIhLm16EEENS_9allocatorIS2_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ___ZN21VinylQMICommandDriver19deleteProfiles_syncEN10subscriber7SimSlotENSt3__15arrayIhLm16EEENS2_6vectorIS4_NS2_9allocatorIS4_EEEEU13block_pointerFvN3ctu6resultIbNS2_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(VinylQMICommandDriver **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          v9 = *((_QWORD *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(_DWORD *)(a1 + 56);
            *(_DWORD *)buf = 67109120;
            v16 = v10;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E deleteProfile[txid=%d] received an error; cancelling this transaction.",
              buf,
              8u);
            v8 = *(_DWORD *)(a2 + 4);
          }
          v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2169C784C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::getCardInfo_sync(_QWORD *a1, uint64_t a2, void *aBlock)
{
  void *v5;
  uint64_t Transaction_sync;
  NSObject *v7;
  std::string *v8;
  std::__shared_weak_count *v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string::size_type v18;
  unint64_t v19;
  void *v20;
  _QWORD v21[6];
  std::__shared_weak_count *v22;
  int v23;
  _OWORD v24[2];
  void *aBlocka;
  std::string __p;
  void *v27;
  _QWORD *v28;
  __int128 buf;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (aBlock)
    v5 = _Block_copy(aBlock);
  else
    v5 = 0;
  aBlocka = v5;
  Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 3, a2, (uint64_t *)&aBlocka);
  if (aBlocka)
    _Block_release(aBlocka);
  v7 = a1[5];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    VinylTransaction::shortDescription(&__p, Transaction_sync);
    v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v8;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I %s: getting card info", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(v24, 0, sizeof(v24));
  v9 = (std::__shared_weak_count *)a1[2];
  if (!v9 || (v10 = *(_DWORD *)(Transaction_sync + 12), v11 = a1[1], (v12 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&buf = a1 + 12;
  *((_QWORD *)&buf + 1) = QMIServiceMsg::create();
  v30 = 25000;
  v31 = 0;
  v32 = 0;
  v18 = MEMORY[0x24BDAC760];
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 1174405120;
  v21[2] = ___ZN21VinylQMICommandDriver16getCardInfo_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__16vectorIhNS4_9allocatorIhEEEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke;
  v21[3] = &__block_descriptor_tmp_52_3;
  v21[4] = a1;
  v21[5] = v11;
  v22 = v13;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v23 = v10;
  __p.__r_.__value_.__r.__words[0] = v18;
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl7Message8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v27 = &unk_24D5DA788;
  v28 = v21;
  v20 = _Block_copy(&__p);
  v32 = v20;
  if (*((_QWORD *)&buf + 1))
  {
    qmi::Client::send();
    v20 = v32;
  }
  if (v20)
    _Block_release(v20);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::__shared_weak_count::__release_weak(v13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v24);
}

void sub_2169C7AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN21VinylQMICommandDriver16getCardInfo_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__16vectorIhNS4_9allocatorIhEEEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(VinylQMICommandDriver **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          v9 = *((_QWORD *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(_DWORD *)(a1 + 56);
            *(_DWORD *)buf = 67109120;
            v16 = v10;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E getCardInfo[txid=%d] received an error; cancelling this transaction.",
              buf,
              8u);
            v8 = *(_DWORD *)(a2 + 4);
          }
          v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2169C7C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::getSessionData_sync(_QWORD *a1, uint64_t a2, void *aBlock)
{
  void *v5;
  const VinylTransaction *Transaction_sync;
  NSObject *v7;
  std::string *v8;
  std::__shared_weak_count *v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string::size_type v18;
  unint64_t v19;
  void *v20;
  _QWORD v21[6];
  std::__shared_weak_count *v22;
  int v23;
  _OWORD v24[2];
  void *aBlocka;
  std::string __p;
  void *v27;
  _QWORD *v28;
  __int128 buf;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (aBlock)
    v5 = _Block_copy(aBlock);
  else
    v5 = 0;
  aBlocka = v5;
  Transaction_sync = (const VinylTransaction *)VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 21, a2, (uint64_t *)&aBlocka);
  if (aBlocka)
    _Block_release(aBlocka);
  v7 = a1[5];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    VinylTransaction::shortDescription(&__p, (uint64_t)Transaction_sync);
    v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v8;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I %s: getSessionData", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(v24, 0, sizeof(v24));
  v9 = (std::__shared_weak_count *)a1[2];
  if (!v9 || (v10 = *((_DWORD *)Transaction_sync + 3), v11 = a1[1], (v12 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&buf = a1 + 12;
  *((_QWORD *)&buf + 1) = QMIServiceMsg::create();
  v30 = 25000;
  v31 = 0;
  v32 = 0;
  v18 = MEMORY[0x24BDAC760];
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 1174405120;
  v21[2] = ___ZN21VinylQMICommandDriver19getSessionData_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__16vectorIhNS4_9allocatorIhEEEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke;
  v21[3] = &__block_descriptor_tmp_53_4;
  v21[4] = a1;
  v21[5] = v11;
  v22 = v13;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v23 = v10;
  __p.__r_.__value_.__r.__words[0] = v18;
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl11TapeMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v27 = &unk_24D5DA7B0;
  v28 = v21;
  v20 = _Block_copy(&__p);
  v32 = v20;
  if (*((_QWORD *)&buf + 1))
  {
    qmi::Client::send();
    v20 = v32;
  }
  if (v20)
    _Block_release(v20);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::__shared_weak_count::__release_weak(v13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v24);
}

void sub_2169C7F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN21VinylQMICommandDriver19getSessionData_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__16vectorIhNS4_9allocatorIhEEEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(VinylQMICommandDriver **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = *(_DWORD *)(a2 + 4);
        if (v8)
        {
          v9 = *((_QWORD *)v5 + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(_DWORD *)(a1 + 56);
            *(_DWORD *)buf = 67109120;
            v16 = v10;
            _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E getSessionData[txid=%d] received an error; cancelling this transaction.",
              buf,
              8u);
            v8 = *(_DWORD *)(a2 + 4);
          }
          v11 = *(_DWORD *)(a1 + 56);
          VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2169C8270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t VinylQMICommandDriver::clearSessionData_sync(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t (**a4)(_QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  NSObject *v12;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  void *v27;
  const void *v28;
  NSObject *v29;
  std::string *p_buf;
  int v31;
  std::string buf;
  unint64_t v33;
  uint64_t v34;
  uint8_t v35[4];
  std::string *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#E clearSessionData failed: empty data is not allowed", (uint8_t *)&buf, 2u);
    }
    v31 = 1026;
    return ((uint64_t (**)(_QWORD, int *))a4)[2](a4, &v31);
  }
  else
  {
    v7 = operator new();
    v8 = v7;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_BYTE *)(v7 + 16) = 1;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)v7 = &off_24D5DA2F8;
    v9 = *(_QWORD *)(a1 + 176);
    v10 = *(uint64_t **)(a1 + 168);
    if ((unint64_t)v10 >= v9)
    {
      v14 = *(_QWORD **)(a1 + 160);
      v15 = v10 - v14;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v17 = v9 - (_QWORD)v14;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      v34 = a1 + 176;
      if (v18)
      {
        v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v18);
        v14 = *(_QWORD **)(a1 + 160);
        v10 = *(uint64_t **)(a1 + 168);
      }
      else
      {
        v19 = 0;
      }
      v20 = (uint64_t *)(v18 + 8 * v15);
      v21 = v18 + 8 * v19;
      v33 = v21;
      *v20 = v8;
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 + 1);
      if (v10 == v14)
      {
        v11 = v20 + 1;
      }
      else
      {
        do
        {
          v22 = *--v10;
          *v10 = 0;
          *--v20 = v22;
        }
        while (v10 != v14);
        v11 = (_QWORD *)buf.__r_.__value_.__r.__words[2];
        v21 = v33;
      }
      v23 = *(_OWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v20;
      *(_QWORD *)(a1 + 168) = v11;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v23;
      v24 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v21;
      v33 = v24;
      buf.__r_.__value_.__r.__words[0] = v23;
      std::__split_buffer<std::unique_ptr<VinylTransaction>>::~__split_buffer((uint64_t)&buf);
    }
    else
    {
      *v10 = v7;
      v11 = v10 + 1;
    }
    *(_QWORD *)(a1 + 168) = v11;
    v25 = *(v11 - 1);
    *(_BYTE *)(v25 + 8) = 22;
    *(_BYTE *)(v25 + 17) = 1;
    v26 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = v26 + 1;
    *(_DWORD *)(v25 + 12) = v26;
    *(_BYTE *)(v25 + 16) = VinylSlotIdToInt();
    if (a4)
      v27 = _Block_copy(a4);
    else
      v27 = 0;
    v28 = *(const void **)(v25 + 56);
    *(_QWORD *)(v25 + 56) = v27;
    if (v28)
      _Block_release(v28);
    std::vector<unsigned char>::__move_assign(v25 + 24, a3);
    v29 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::longDescription(&buf, v25);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      *(_DWORD *)v35 = 136315138;
      v36 = p_buf;
      _os_log_impl(&dword_216897000, v29, OS_LOG_TYPE_DEFAULT, "#I %s: Clear Session Data", v35, 0xCu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    return VinylQMICommandDriver::sendOutgoingTapeData_sync((VinylQMICommandDriver *)a1, *(_DWORD *)(v25 + 12), 1);
  }
}

void sub_2169C8568(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::getVinylSlotTestMode_sync(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _OWORD v19[2];
  _QWORD aBlock[5];
  _QWORD v21[6];
  std::__shared_weak_count *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  memset(v19, 0, sizeof(v19));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (v5 = *(_QWORD *)(a1 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v17 = QMIServiceMsg::create();
  v12 = MEMORY[0x24BDAC760];
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 1174405120;
  v21[2] = ___ZN21VinylQMICommandDriver25getVinylSlotTestMode_syncENSt3__18functionIFvbEEE_block_invoke;
  v21[3] = &__block_descriptor_tmp_54_4;
  v21[4] = a1;
  v21[5] = v5;
  v22 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = v23;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v23, a2);
  aBlock[0] = v12;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl23EnableVinylSlotTestMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5DA878;
  aBlock[4] = v21;
  v15 = _Block_copy(aBlock);
  v18 = v15;
  if (v17)
  {
    qmi::Client::send();
    v15 = v18;
  }
  if (v15)
    _Block_release(v15);
  if (v24 == v23)
  {
    v16 = 4;
  }
  else
  {
    if (!v24)
      goto LABEL_20;
    v16 = 5;
    v14 = v24;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v16))(v14);
LABEL_20:
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::__shared_weak_count::__release_weak(v7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
}

void sub_2169C8778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35)
{
  std::__shared_weak_count *v35;
  _QWORD *v36;
  uint64_t v38;

  if (a35 == v36)
  {
    v38 = 4;
  }
  else
  {
    if (!a35)
      goto LABEL_6;
    v38 = 5;
    v36 = a35;
  }
  (*(void (**)(_QWORD *))(*v36 + 8 * v38))(v36);
LABEL_6:
  if (a31)
    std::__shared_weak_count::__release_weak(a31);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  std::__shared_weak_count::__release_weak(v35);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver25getVinylSlotTestMode_syncENSt3__18functionIFvbEEE_block_invoke(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t TlvValue;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  BOOL v15;
  NSObject *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _BYTE buf[24];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
        goto LABEL_18;
      if (*((_DWORD *)a2 + 1))
      {
        v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = qmi::asString();
          _os_log_error_impl(&dword_216897000, v8, OS_LOG_TYPE_ERROR, "Failed to retrieve vinyl slot test mode %s", buf, 0xCu);
        }
        buf[0] = 0;
        v9 = a1[10];
        if (!v9)
          std::__throw_bad_function_call[abi:ne180100]();
LABEL_17:
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 48))(v9, buf);
LABEL_18:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      TlvValue = qmi::MessageBase::findTlvValue(a2);
      v12 = TlvValue;
      if (!TlvValue)
        goto LABEL_13;
      v13 = v11;
      *(_QWORD *)buf = TlvValue;
      v14 = tlv::parseV<vinyl::tlv::VinylSlotTestModeResp>((unint64_t *)buf, v11);
      if (*(_QWORD *)buf)
      {
        v15 = v14 != 0;
        goto LABEL_16;
      }
      if ((((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 16, v12, v13) & 1) == 0)
      {
LABEL_13:
        v16 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_216897000, v16, OS_LOG_TYPE_ERROR, "Did not status for vinyl slot test mode, defaulting to false", buf, 2u);
        }
      }
      v15 = 0;
LABEL_16:
      buf[0] = v15;
      v9 = a1[10];
      if (!v9)
        std::__throw_bad_function_call[abi:ne180100]();
      goto LABEL_17;
    }
  }
}

void sub_2169C8A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrI18VinylCommandDriverEE56c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void sub_2169C8A74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrI18VinylCommandDriverEE56c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 80);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void VinylQMICommandDriver::enableVinylSlotTestMode_sync(uint64_t a1, char a2, uint64_t a3)
{
  const void **v6;
  char *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *__p[2];
  __int128 v38;
  _QWORD aBlock[5];
  _QWORD v40[6];
  std::__shared_weak_count *v41;
  _BYTE v42[24];
  _BYTE *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = 0u;
  v38 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v6 = (const void **)__p[1];
  if (__p[1] != (void *)v38)
  {
    while (*((_BYTE *)*v6 + 8) != 16)
    {
      if (++v6 == (const void **)v38)
        goto LABEL_8;
    }
  }
  if (v6 == (const void **)v38)
  {
LABEL_8:
    v9 = operator new();
    v10 = v9;
    *(_WORD *)(v9 + 8) = 16;
    *(_QWORD *)v9 = &off_24D5DA8C0;
    v11 = v38;
    if ((unint64_t)v38 >= *((_QWORD *)&v38 + 1))
    {
      v13 = (uint64_t)(v38 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = (uint64_t)(*((_QWORD *)&v38 + 1) - (unint64_t)__p[1]) >> 2;
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      if (*((_QWORD *)&v38 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v38 + 8, v15);
      else
        v16 = 0;
      v17 = (uint64_t *)&v16[8 * v13];
      v18 = &v16[8 * v15];
      *v17 = v10;
      v12 = v17 + 1;
      v20 = (char *)__p[1];
      v19 = (char *)v38;
      if ((void *)v38 != __p[1])
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v17 = v21;
        }
        while (v19 != v20);
        v19 = (char *)__p[1];
      }
      __p[1] = v17;
      *(_QWORD *)&v38 = v12;
      *((_QWORD *)&v38 + 1) = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_QWORD *)v38 = v9;
      v12 = (_QWORD *)(v11 + 8);
    }
    v8 = (_BYTE *)(v10 + 9);
    *(_QWORD *)&v38 = v12;
  }
  else
  {
    if (!v7)
      __cxa_bad_cast();
    v8 = v7 + 9;
  }
  *v8 = a2;
  v22 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v22 || (v23 = *(_QWORD *)(a1 + 8), (v24 = std::__shared_weak_count::lock(v22)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v25 = v24;
  p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
  do
    v27 = __ldxr(p_shared_weak_owners);
  while (__stxr(v27 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v25);
  }
  v35 = QMIServiceMsg::create();
  v30 = MEMORY[0x24BDAC760];
  v40[0] = MEMORY[0x24BDAC760];
  v40[1] = 1174405120;
  v40[2] = ___ZN21VinylQMICommandDriver28enableVinylSlotTestMode_syncEbNSt3__18functionIFvbEEE_block_invoke;
  v40[3] = &__block_descriptor_tmp_55_5;
  v40[4] = a1;
  v40[5] = v23;
  v41 = v25;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = v42;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v42, a3);
  aBlock[0] = v30;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl23EnableVinylSlotTestMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_24D5DA878;
  aBlock[4] = v40;
  v33 = _Block_copy(aBlock);
  v36 = v33;
  if (v35)
  {
    qmi::Client::send();
    v33 = v36;
  }
  if (v33)
    _Block_release(v33);
  if (v43 == v42)
  {
    v34 = 4;
  }
  else
  {
    if (!v43)
      goto LABEL_44;
    v34 = 5;
    v32 = v43;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v34))(v32);
LABEL_44:
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v25);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2169C8E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35)
{
  _QWORD *v35;
  std::__shared_weak_count *v36;
  uint64_t v38;

  if (a35 == v35)
  {
    v38 = 4;
  }
  else
  {
    if (!a35)
      goto LABEL_6;
    v38 = 5;
    v35 = a35;
  }
  (*(void (**)(_QWORD *))(*v35 + 8 * v38))(v35);
LABEL_6:
  if (a31)
    std::__shared_weak_count::__release_weak(a31);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  std::__shared_weak_count::__release_weak(v36);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver28enableVinylSlotTestMode_syncEbNSt3__18functionIFvbEEE_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  BOOL v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        if (*(_DWORD *)(a2 + 4))
        {
          v8 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            v14 = qmi::asString();
            _os_log_error_impl(&dword_216897000, v8, OS_LOG_TYPE_ERROR, "Failed to set vinyl slot test mode %s", buf, 0xCu);
            v9 = *(_DWORD *)(a2 + 4) == 0;
          }
          else
          {
            v9 = 0;
          }
        }
        else
        {
          v9 = 1;
        }
        buf[0] = v9;
        v10 = a1[10];
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v10 + 48))(v10, buf);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2169C9028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::getTapeEid_sync(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  uint64_t v21;
  int v22;
  void *v23;
  const void *v24;
  const void **v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_weak_owners;
  unint64_t v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  _QWORD v53[6];
  std::__shared_weak_count *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  void *v60;
  void *__p[2];
  __int128 v62;
  uint64_t aBlock;
  __int128 v64;
  void *v65;
  _QWORD *v66;

  v5 = operator new();
  v6 = v5;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_BYTE *)(v5 + 16) = 1;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)v5 = &off_24D5DA368;
  v7 = *(_QWORD *)(a1 + 176);
  v8 = *(uint64_t **)(a1 + 168);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)(a1 + 160);
    v11 = v8 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v66 = (_QWORD *)(a1 + 176);
    if (v14)
    {
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v14);
      v10 = *(_QWORD **)(a1 + 160);
      v8 = *(uint64_t **)(a1 + 168);
    }
    else
    {
      v15 = 0;
    }
    v16 = (uint64_t *)(v14 + 8 * v11);
    v17 = (void *)(v14 + 8 * v15);
    v65 = v17;
    *v16 = v6;
    *((_QWORD *)&v64 + 1) = v16 + 1;
    if (v8 == v10)
    {
      v9 = v16 + 1;
    }
    else
    {
      do
      {
        v18 = *--v8;
        *v8 = 0;
        *--v16 = v18;
      }
      while (v8 != v10);
      v9 = (_QWORD *)*((_QWORD *)&v64 + 1);
      v17 = v65;
    }
    v19 = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v16;
    *(_QWORD *)(a1 + 168) = v9;
    v64 = v19;
    v20 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v17;
    v65 = v20;
    aBlock = v19;
    std::__split_buffer<std::unique_ptr<VinylTransaction>>::~__split_buffer((uint64_t)&aBlock);
  }
  else
  {
    *v8 = v5;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 168) = v9;
  v21 = *(v9 - 1);
  *(_BYTE *)(v21 + 17) = 1;
  v22 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 128) = v22 + 1;
  *(_DWORD *)(v21 + 12) = v22;
  *(_BYTE *)(v21 + 16) = VinylSlotIdToInt();
  if (a3)
    v23 = _Block_copy(a3);
  else
    v23 = 0;
  v24 = *(const void **)(v21 + 56);
  *(_QWORD *)(v21 + 56) = v23;
  if (v24)
    _Block_release(v24);
  *(_OWORD *)__p = 0u;
  v62 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v25 = (const void **)__p[1];
  if (__p[1] != (void *)v62)
  {
    while (*((_BYTE *)*v25 + 8) != 1)
    {
      if (++v25 == (const void **)v62)
        goto LABEL_29;
    }
  }
  if (v25 == (const void **)v62)
  {
LABEL_29:
    v28 = operator new();
    v29 = v28;
    *(_BYTE *)(v28 + 8) = 1;
    *(_QWORD *)v28 = &off_24D5DA910;
    *(_DWORD *)(v28 + 12) = 0;
    v27 = (char *)(v28 + 12);
    *(_BYTE *)(v28 + 16) = 0;
    v30 = v62;
    if ((unint64_t)v62 >= *((_QWORD *)&v62 + 1))
    {
      v32 = (uint64_t)(v62 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v32 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v33 = (uint64_t)(*((_QWORD *)&v62 + 1) - (unint64_t)__p[1]) >> 2;
      if (v33 <= v32 + 1)
        v33 = v32 + 1;
      if (*((_QWORD *)&v62 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v62 + 8, v34);
      else
        v35 = 0;
      v36 = (uint64_t *)&v35[8 * v32];
      v37 = &v35[8 * v34];
      *v36 = v29;
      v31 = v36 + 1;
      v39 = (char *)__p[1];
      v38 = (char *)v62;
      if ((void *)v62 != __p[1])
      {
        do
        {
          v40 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v36 = v40;
        }
        while (v38 != v39);
        v38 = (char *)__p[1];
      }
      __p[1] = v36;
      *(_QWORD *)&v62 = v31;
      *((_QWORD *)&v62 + 1) = v37;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_QWORD *)v62 = v28;
      v31 = (_QWORD *)(v30 + 8);
    }
    *(_QWORD *)&v62 = v31;
  }
  else
  {
    if (!v26)
      __cxa_bad_cast();
    v27 = v26 + 12;
  }
  v41 = *(_DWORD *)(v21 + 12);
  *(_DWORD *)v27 = v41;
  v27[4] = *(_BYTE *)(v21 + 16);
  v42 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v42 || (v43 = *(_QWORD *)(a1 + 8), (v44 = std::__shared_weak_count::lock(v42)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v45 = v44;
  p_shared_weak_owners = (unint64_t *)&v44->__shared_weak_owners_;
  do
    v47 = __ldxr(p_shared_weak_owners);
  while (__stxr(v47 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v44->__shared_owners_;
  do
    v49 = __ldaxr(p_shared_owners);
  while (__stlxr(v49 - 1, p_shared_owners));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v45);
  }
  v56 = a1 + 96;
  v57 = QMIServiceMsg::create();
  v58 = 25000;
  v59 = 0;
  v60 = 0;
  v50 = MEMORY[0x24BDAC760];
  v53[0] = MEMORY[0x24BDAC760];
  v53[1] = 1174405120;
  v53[2] = ___ZN21VinylQMICommandDriver15getTapeEid_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__15arrayIhLm16EEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2;
  v53[3] = &__block_descriptor_tmp_60_4;
  v53[4] = a1;
  v53[5] = v43;
  v54 = v45;
  do
    v51 = __ldxr(p_shared_weak_owners);
  while (__stxr(v51 + 1, p_shared_weak_owners));
  v55 = v41;
  aBlock = v50;
  *(_QWORD *)&v64 = 0x40000000;
  *((_QWORD *)&v64 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl17TapeGetEidMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v65 = &unk_24D5DA940;
  v66 = v53;
  v52 = _Block_copy(&aBlock);
  v60 = v52;
  if (v57)
  {
    qmi::Client::send();
    v52 = v60;
  }
  if (v52)
    _Block_release(v52);
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  std::__shared_weak_count::__release_weak(v45);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2169C94B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__shared_weak_count *v23;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver15getTapeEid_syncEN10subscriber7SimSlotEU13block_pointerFvN3ctu6resultINSt3__15arrayIhLm16EEENS4_5tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  VinylQMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t TlvValue;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint8_t buf[8];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(VinylQMICommandDriver **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_18;
      v8 = *((_DWORD *)a2 + 1);
      if (v8)
      {
        v9 = *((_QWORD *)v5 + 5);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v10;
          _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E getTapeEid[txid=%d] received an error; cancelling this transaction.",
            buf,
            8u);
          v8 = *((_DWORD *)a2 + 1);
        }
        v11 = *(_DWORD *)(a1 + 56);
        if (v8 == 3)
          v12 = 9;
        else
        VinylQMICommandDriver::cancelTransactionWithError_sync(v5, v11, v12, 0, 0);
        goto LABEL_18;
      }
      v13 = *(_DWORD *)(a1 + 56);
      TlvValue = qmi::MessageBase::findTlvValue(a2);
      v16 = TlvValue;
      if (TlvValue)
      {
        v17 = v15;
        *(_QWORD *)buf = TlvValue;
        v18 = tlv::parseV<vinyl::tlv::RespTapeEidResultEid>((unint64_t *)buf, v15);
        if (*(_QWORD *)buf)
        {
          VinylQMICommandDriver::finishTransactionWithProfileId_sync((os_log_t *)v5, v13, v18, v19);
          goto LABEL_18;
        }
        if ((((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 17, v16, v17) & 1) != 0)
        {
LABEL_18:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
      }
      v20 = *((_QWORD *)v5 + 5);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_216897000, v20, OS_LOG_TYPE_DEFAULT, "#E CSN response is missing the CSN TLV; that's really bad.",
          buf,
          2u);
      }
      VinylQMICommandDriver::cancelTransactionWithError_sync(v5, *(_DWORD *)(a1 + 56), 5, 0, 0);
      goto LABEL_18;
    }
  }
}

void sub_2169C9710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void VinylQMICommandDriver::enableTapeProfile_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E enableTapeProfile failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 14, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::longDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Enable Tape Profile", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169C98E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::disableTapeProfile_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, int a4, void (**aBlock)(_QWORD, _QWORD))
{
  char v9;
  void *v10;
  NSObject *v11;
  uint64_t Transaction_sync;
  NSObject *v13;
  std::string *v14;
  std::string v15;
  void *aBlocka;
  char v17[8];
  void *__p;
  void *v19;
  uint8_t buf[4];
  std::string *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#E disableTapeProfile failed: empty data is not allowed", (uint8_t *)&v15, 2u);
    }
    v17[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v17);
    if (v17[0] == 1 && __p)
    {
      v19 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (a4)
      v9 = 15;
    else
      v9 = 25;
    if (aBlock)
      v10 = _Block_copy(aBlock);
    else
      v10 = 0;
    aBlocka = v10;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, v9, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v13 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::longDescription(&v15, Transaction_sync);
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v15;
      else
        v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v21 = v14;
      _os_log_impl(&dword_216897000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: Disable Tape Profile", buf, 0xCu);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169C9B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::deleteTapeProfile_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E deleteTapeProfile failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 16, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::longDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Delete Tape Profile", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169C9D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::getTapeEuiccInfo_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E tapeEuiccInfo failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 4, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::longDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: eUICC Info", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169C9F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeSetProprietaryData_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E tapeSetProprietaryData failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 23, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::longDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Set proprietary data: ", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169CA170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::getTapeEuiccChallenge_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E getTapeEuiccChallenge failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 3, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::longDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: eUICC Challenge: ", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169CA38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeAuthenticateServer_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E tapeAuthenticateServer failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 11, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::shortDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: tape authenticate server", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169CA5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapePrepareDownload_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E tapePrepareDownload failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 5, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::shortDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: tape prepare download", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169CA7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeLoadBoundProfilePackage_sync(VinylQMICommandDriver *a1, uint64_t a2, uint64_t a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  void *v10;
  uint64_t Transaction_sync;
  NSObject *v12;
  uint8_t *v13;
  int NextPayload;
  uint64_t v15;
  void *v16;
  int v17;
  void *v18;
  NSObject *v19;
  void *__p;
  void *v21;
  uint64_t v22;
  uint8_t buf[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *aBlocka;
  char v29[8];
  void *v30;
  void *v31;
  uint8_t v32[16];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E tapeLoadBoundProfilePackage failed: empty data is not allowed", buf, 2u);
    }
    v29[0] = 2;
    LOWORD(v30) = 4;
    BYTE2(v30) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v29);
    if (v29[0] == 1)
    {
      v10 = v30;
      if (v30)
      {
        v31 = v30;
LABEL_31:
        operator delete(v10);
      }
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 6, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    v12 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::shortDescription((std::string *)buf, Transaction_sync);
      v13 = (SBYTE7(v24) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      LODWORD(v33) = 136315138;
      *(_QWORD *)((char *)&v33 + 4) = v13;
      _os_log_impl(&dword_216897000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: bound profile package", (uint8_t *)&v33, 0xCu);
      if (SBYTE7(v24) < 0)
        operator delete(*(void **)buf);
    }
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    *(_OWORD *)buf = 0u;
    v21 = 0;
    v22 = 0;
    __p = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
    MEMORY[0x2199FDE64](buf, &__p);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
    v33 = 0uLL;
    v34 = 0;
    while (1)
    {
      NextPayload = ES10TapeLoadBoundProfilePackage::getNextPayload();
      v16 = (void *)*((_QWORD *)&v33 + 1);
      v15 = v33;
      if (*((_QWORD *)&v33 + 1) == (_QWORD)v33)
        break;
      v17 = NextPayload;
      *(_DWORD *)(Transaction_sync + 48) = 0;
      v18 = *(void **)(Transaction_sync + 24);
      if (v18)
      {
        *(_QWORD *)(Transaction_sync + 32) = v18;
        operator delete(v18);
        *(_QWORD *)(Transaction_sync + 24) = 0;
        *(_QWORD *)(Transaction_sync + 32) = 0;
        *(_QWORD *)(Transaction_sync + 40) = 0;
        v16 = (void *)*((_QWORD *)&v33 + 1);
        v15 = v33;
      }
      *(_QWORD *)(Transaction_sync + 24) = v15;
      *(_QWORD *)(Transaction_sync + 32) = v16;
      *(_QWORD *)(Transaction_sync + 40) = v34;
      v34 = 0;
      v33 = 0uLL;
      if (((!VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), v17) | v17) & 1) != 0)
        goto LABEL_25;
    }
    v19 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v32 = 0;
      _os_log_error_impl(&dword_216897000, v19, OS_LOG_TYPE_ERROR, "No data to send - exiting", v32, 2u);
LABEL_25:
      v16 = (void *)v33;
    }
    if (v16)
    {
      *((_QWORD *)&v33 + 1) = v16;
      operator delete(v16);
    }
    v10 = *(void **)buf;
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      goto LABEL_31;
    }
  }
}

void sub_2169CAB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock,char a25,void *__p,uint64_t a27)
{
  if (a25 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeListProfilesInfo_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E tapeListProfilesInfo failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 13, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::shortDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: tape list profiles", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169CAD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL VinylQMICommandDriver::tapeListNotifications_sync(VinylQMICommandDriver *a1, uint64_t a2, void *aBlock)
{
  void *v5;
  uint64_t Transaction_sync;
  NSObject *v7;
  std::string *p_p;
  std::string __p;
  void *aBlocka;
  uint8_t buf[4];
  std::string *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (aBlock)
    v5 = _Block_copy(aBlock);
  else
    v5 = 0;
  aBlocka = v5;
  Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 7, a2, (uint64_t *)&aBlocka);
  if (aBlocka)
    _Block_release(aBlocka);
  LOWORD(__p.__r_.__value_.__l.__data_) = 10431;
  __p.__r_.__value_.__s.__data_[2] = 0;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(Transaction_sync + 24), (char *)&__p, &__p.__r_.__value_.__s.__data_[3], 3uLL);
  v7 = *((_QWORD *)a1 + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    VinylTransaction::shortDescription(&__p, Transaction_sync);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v13 = p_p;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I %s: tape list notifications", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
}

void sub_2169CAEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeGetNotification_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E tapeGetNotification failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 8, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::shortDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: tape get notification", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169CB0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeDeleteNotification_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E tapeDeleteNotification failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 9, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::shortDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: tape delete notification", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169CB308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL VinylQMICommandDriver::tapeResetMemory_sync(VinylQMICommandDriver *a1, uint64_t a2, void *aBlock)
{
  void *v5;
  uint64_t Transaction_sync;
  NSObject *v7;
  std::string *p_p;
  std::string __p;
  void *aBlocka;
  uint8_t buf[4];
  std::string *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (aBlock)
    v5 = _Block_copy(aBlock);
  else
    v5 = 0;
  aBlocka = v5;
  Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 17, a2, (uint64_t *)&aBlocka);
  if (aBlocka)
    _Block_release(aBlocka);
  LODWORD(__p.__r_.__value_.__l.__data_) = -2113653569;
  WORD2(__p.__r_.__value_.__r.__words[0]) = 1538;
  __p.__r_.__value_.__s.__data_[6] = -64;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(Transaction_sync + 24), (char *)&__p, &__p.__r_.__value_.__s.__data_[7], 7uLL);
  v7 = *((_QWORD *)a1 + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    VinylTransaction::shortDescription(&__p, Transaction_sync);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v13 = p_p;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I %s: tape reset memory", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
}

void sub_2169CB4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeCancelSession_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E tapeCancelSession failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 12, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::shortDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: tape cancel session", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169CB6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeSetNickname_sync(VinylQMICommandDriver *a1, uint64_t a2, __n128 *a3, void (**aBlock)(_QWORD, _QWORD))
{
  void *v8;
  NSObject *v9;
  uint64_t Transaction_sync;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  void *aBlocka;
  char v15[8];
  void *__p;
  void *v17;
  uint8_t buf[4];
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3->n128_u64[0] == a3->n128_u64[1])
  {
    v9 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E TapeSetNickname failed: empty data is not allowed", (uint8_t *)&v13, 2u);
    }
    v15[0] = 2;
    LOWORD(__p) = 4;
    BYTE2(__p) = 0;
    ((void (**)(_QWORD, char *))aBlock)[2](aBlock, v15);
    if (v15[0] == 1 && __p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (aBlock)
      v8 = _Block_copy(aBlock);
    else
      v8 = 0;
    aBlocka = v8;
    Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 19, a2, (uint64_t *)&aBlocka);
    if (aBlocka)
      _Block_release(aBlocka);
    std::vector<unsigned char>::__move_assign(Transaction_sync + 24, a3);
    v11 = *((_QWORD *)a1 + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::shortDescription(&v13, Transaction_sync);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v19 = v12;
      _os_log_impl(&dword_216897000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: tape set nickname", buf, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
  }
}

void sub_2169CB8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15)
{
  if (a13 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL VinylQMICommandDriver::tapeGetRulesAuthTable_sync(VinylQMICommandDriver *a1, uint64_t a2, void *aBlock)
{
  void *v5;
  uint64_t Transaction_sync;
  NSObject *v7;
  std::string *p_p;
  std::string __p;
  void *aBlocka;
  uint8_t buf[4];
  std::string *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (aBlock)
    v5 = _Block_copy(aBlock);
  else
    v5 = 0;
  aBlocka = v5;
  Transaction_sync = VinylQMICommandDriver::createTransaction_sync((uint64_t)a1, 20, a2, (uint64_t *)&aBlocka);
  if (aBlocka)
    _Block_release(aBlocka);
  LOWORD(__p.__r_.__value_.__l.__data_) = 17343;
  __p.__r_.__value_.__s.__data_[2] = 0;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(Transaction_sync + 24), (char *)&__p, &__p.__r_.__value_.__s.__data_[3], 3uLL);
  v7 = *((_QWORD *)a1 + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    VinylTransaction::shortDescription(&__p, Transaction_sync);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v13 = p_p;
    _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I %s: tape get rules auth table", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return VinylQMICommandDriver::sendOutgoingTapeData_sync(a1, *(_DWORD *)(Transaction_sync + 12), 1);
}

void sub_2169CBA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void VinylQMICommandDriver::tapeGetDeviceCapabilities_sync(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  int v21;
  void *v22;
  const void *v23;
  const void **v24;
  char *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_weak_owners;
  unint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  _QWORD v52[6];
  std::__shared_weak_count *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  void *v59;
  void *__p[2];
  __int128 v61;
  uint64_t aBlock;
  __int128 v63;
  void *v64;
  _QWORD *v65;

  v4 = operator new();
  v5 = v4;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_BYTE *)(v4 + 16) = 1;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)v4 = &off_24D5DA428;
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(uint64_t **)(a1 + 168);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD **)(a1 + 160);
    v10 = v7 - v9;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v65 = (_QWORD *)(a1 + 176);
    if (v13)
    {
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v13);
      v9 = *(_QWORD **)(a1 + 160);
      v7 = *(uint64_t **)(a1 + 168);
    }
    else
    {
      v14 = 0;
    }
    v15 = (uint64_t *)(v13 + 8 * v10);
    v16 = (void *)(v13 + 8 * v14);
    v64 = v16;
    *v15 = v5;
    *((_QWORD *)&v63 + 1) = v15 + 1;
    if (v7 == v9)
    {
      v8 = v15 + 1;
    }
    else
    {
      do
      {
        v17 = *--v7;
        *v7 = 0;
        *--v15 = v17;
      }
      while (v7 != v9);
      v8 = (_QWORD *)*((_QWORD *)&v63 + 1);
      v16 = v64;
    }
    v18 = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v15;
    *(_QWORD *)(a1 + 168) = v8;
    v63 = v18;
    v19 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v16;
    v64 = v19;
    aBlock = v18;
    std::__split_buffer<std::unique_ptr<VinylTransaction>>::~__split_buffer((uint64_t)&aBlock);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a1 + 168) = v8;
  v20 = *(v8 - 1);
  *(_BYTE *)(v20 + 17) = 1;
  v21 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 128) = v21 + 1;
  *(_DWORD *)(v20 + 12) = v21;
  if (a2)
    v22 = _Block_copy(a2);
  else
    v22 = 0;
  v23 = *(const void **)(v20 + 56);
  *(_QWORD *)(v20 + 56) = v22;
  if (v23)
    _Block_release(v23);
  *(_OWORD *)__p = 0u;
  v61 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v24 = (const void **)__p[1];
  if (__p[1] != (void *)v61)
  {
    while (*((_BYTE *)*v24 + 8) != 1)
    {
      if (++v24 == (const void **)v61)
        goto LABEL_29;
    }
  }
  if (v24 == (const void **)v61)
  {
LABEL_29:
    v27 = operator new();
    v28 = v27;
    *(_BYTE *)(v27 + 8) = 1;
    *(_QWORD *)v27 = &off_24D5DA988;
    *(_DWORD *)(v27 + 12) = 0;
    v26 = (_DWORD *)(v27 + 12);
    *(_BYTE *)(v27 + 16) = 0;
    v29 = v61;
    if ((unint64_t)v61 >= *((_QWORD *)&v61 + 1))
    {
      v31 = (uint64_t)(v61 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v31 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v32 = (uint64_t)(*((_QWORD *)&v61 + 1) - (unint64_t)__p[1]) >> 2;
      if (v32 <= v31 + 1)
        v32 = v31 + 1;
      if (*((_QWORD *)&v61 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)&v61 + 8, v33);
      else
        v34 = 0;
      v35 = (uint64_t *)&v34[8 * v31];
      v36 = &v34[8 * v33];
      *v35 = v28;
      v30 = v35 + 1;
      v38 = (char *)__p[1];
      v37 = (char *)v61;
      if ((void *)v61 != __p[1])
      {
        do
        {
          v39 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *--v35 = v39;
        }
        while (v37 != v38);
        v37 = (char *)__p[1];
      }
      __p[1] = v35;
      *(_QWORD *)&v61 = v30;
      *((_QWORD *)&v61 + 1) = v36;
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_QWORD *)v61 = v27;
      v30 = (_QWORD *)(v29 + 8);
    }
    *(_QWORD *)&v61 = v30;
  }
  else
  {
    if (!v25)
      __cxa_bad_cast();
    v26 = v25 + 12;
  }
  v40 = *(_DWORD *)(v20 + 12);
  *v26 = v40;
  v41 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v41 || (v42 = *(_QWORD *)(a1 + 8), (v43 = std::__shared_weak_count::lock(v41)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v44 = v43;
  p_shared_weak_owners = (unint64_t *)&v43->__shared_weak_owners_;
  do
    v46 = __ldxr(p_shared_weak_owners);
  while (__stxr(v46 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v43->__shared_owners_;
  do
    v48 = __ldaxr(p_shared_owners);
  while (__stlxr(v48 - 1, p_shared_owners));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v44);
  }
  v55 = a1 + 96;
  v56 = QMIServiceMsg::create();
  v57 = 25000;
  v58 = 0;
  v59 = 0;
  v49 = MEMORY[0x24BDAC760];
  v52[0] = MEMORY[0x24BDAC760];
  v52[1] = 1174405120;
  v52[2] = ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2;
  v52[3] = &__block_descriptor_tmp_74_4;
  v52[4] = a1;
  v52[5] = v42;
  v53 = v44;
  do
    v50 = __ldxr(p_shared_weak_owners);
  while (__stxr(v50 + 1, p_shared_weak_owners));
  v54 = v40;
  aBlock = v49;
  *(_QWORD *)&v63 = 0x40000000;
  *((_QWORD *)&v63 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl32TapeGetDeviceCapabilitiesMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v64 = &unk_24D5DA9B8;
  v65 = v52;
  v51 = _Block_copy(&aBlock);
  v59 = v51;
  if (v56)
  {
    qmi::Client::send();
    v51 = v59;
  }
  if (v51)
    _Block_release(v51);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  std::__shared_weak_count::__release_weak(v44);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2169CBF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__shared_weak_count *v23;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  os_log_t *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TlvValue;
  int v15;
  uint64_t v16;
  int v17;
  capabilities::ct *v18;
  int v19;
  capabilities::ct *v20;
  int v21;
  unint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  unsigned __int8 *Transaction_sync;
  unsigned __int8 *v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  const char *v46;
  _QWORD v47[5];
  _QWORD v48[2];
  uint64_t (*v49)(uint64_t, uint8_t *);
  void *v50;
  uint8_t *v51;
  _QWORD v52[2];
  void (*v53)(uint64_t, uint8_t *);
  void *v54;
  os_log_t *v55;
  int v56;
  std::__shared_weak_count *v58;
  __int128 v59;
  __int128 v60;
  uint8_t v61;
  uint8_t buf[8];
  uint8_t *v63;
  uint64_t v64;
  __n128 (*v65)(uint64_t, uint64_t);
  uint64_t (*v66)();
  __int128 v67;
  __int128 v68;
  char v69;
  uint8_t v70[4];
  _BYTE *v71;
  _BYTE v72[17];
  __int128 v73;
  uint8_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(os_log_t **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    v58 = v6;
    if (v6)
    {
      v7 = v6;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_38;
      v8 = *((_DWORD *)a2 + 1);
      if (v8)
      {
        v9 = v5[5];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v10;
          _os_log_impl(&dword_216897000, v9, OS_LOG_TYPE_DEFAULT, "#E getDeviceCapabilities[txid=%d] received an error; cancelling this transaction.",
            buf,
            8u);
          v8 = *((_DWORD *)a2 + 1);
        }
        v11 = *(_DWORD *)(a1 + 56);
        VinylQMICommandDriver::cancelTransactionWithError_sync((VinylQMICommandDriver *)v5, v11, v12, 0, 0);
        goto LABEL_38;
      }
      *(_QWORD *)buf = 0;
      v63 = buf;
      v64 = 0x5002000000;
      v65 = __Block_byref_object_copy__63;
      v66 = __Block_byref_object_dispose__64;
      v67 = 0u;
      v68 = 0u;
      v69 = 0;
      v13 = MEMORY[0x24BDAC760];
      v52[0] = MEMORY[0x24BDAC760];
      v52[1] = 0x40000000;
      v53 = (void (*)(uint64_t, uint8_t *))___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_65;
      v54 = &__block_descriptor_tmp_67_6;
      v55 = v5;
      v56 = *(_DWORD *)(a1 + 56);
      TlvValue = qmi::MessageBase::findTlvValue(a2);
      v16 = TlvValue;
      if (TlvValue)
      {
        v17 = v15;
        *(_QWORD *)v72 = TlvValue;
        *(_DWORD *)v70 = tlv::parseV<vinyl::tlv::RespTapeDeviceCapsResultTransactionId>((unint64_t *)v72, v15);
        if (*(_QWORD *)v72)
        {
          v53((uint64_t)v52, v70);
          goto LABEL_12;
        }
        if ((((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 16, v16, v17) & 1) != 0)
        {
LABEL_12:
          v48[0] = v13;
          v48[1] = 0x40000000;
          v49 = ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_68;
          v50 = &unk_24D5DA1C8;
          v51 = buf;
          v18 = (capabilities::ct *)qmi::MessageBase::findTlvValue(a2);
          v20 = v18;
          if (v18)
          {
            v21 = v19;
            *(_QWORD *)v72 = v18;
            v22 = tlv::parseV<vinyl::tlv::RespTapeDeviceCapsRadioRelVers>((_BYTE **)v72, v19);
            *(_DWORD *)v70 = v22;
            LOWORD(v71) = WORD2(v22);
            if (*(_QWORD *)v72)
            {
              v18 = (capabilities::ct *)v49((uint64_t)v48, v70);
              LODWORD(v20) = 1;
            }
            else
            {
              v18 = (capabilities::ct *)((uint64_t (*)(_QWORD, uint64_t, capabilities::ct *, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 17, v20, v21);
              LODWORD(v20) = (_DWORD)v18;
            }
          }
          if ((capabilities::ct::supports5G(v18) & v20) == 1)
          {
            v47[0] = v13;
            v47[1] = 0x40000000;
            v47[2] = ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2_71;
            v47[3] = &unk_24D5DA1F0;
            v47[4] = buf;
            v25 = qmi::MessageBase::findTlvValue(a2);
            v27 = v25;
            if (v25)
            {
              v28 = v26;
              *(_QWORD *)v72 = v25;
              v29 = tlv::parseV<vinyl::tlv::RespTapeDeviceCapsRadioRel5GVers>((_BYTE **)v72, v26);
              *(_WORD *)v70 = v29;
              v70[2] = BYTE2(v29);
              if (*(_QWORD *)v72)
                ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2_71((uint64_t)v47, v70);
              else
                ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 18, v27, v28);
            }
          }
          if ((_DWORD)v20)
          {
            v30 = *(_DWORD *)(a1 + 56);
            v31 = *(_OWORD *)(v63 + 56);
            v59 = *(_OWORD *)(v63 + 40);
            v60 = v31;
            v61 = v63[72];
            Transaction_sync = (unsigned __int8 *)VinylQMICommandDriver::findTransaction_sync((VinylQMICommandDriver *)v5, v30);
            if (Transaction_sync)
            {
              v33 = Transaction_sync;
              v35 = v5[5];
              if (v34)
              {
                v36 = (uint64_t)v34;
                if (os_log_type_enabled(v5[5], OS_LOG_TYPE_DEFAULT))
                {
                  VinylTransaction::shortDescription((std::string *)v72, v36);
                  v42 = (SBYTE6(v73) & 0x80u) == 0 ? v72 : *(_BYTE **)v72;
                  *(_DWORD *)v70 = 136315138;
                  v71 = v42;
                  _os_log_impl(&dword_216897000, v35, OS_LOG_TYPE_DEFAULT, "#I %s completed.", v70, 0xCu);
                  if (SBYTE6(v73) < 0)
                    operator delete(*(void **)v72);
                }
                v43 = *(_QWORD *)(v36 + 56);
                v72[0] = 1;
                *(_OWORD *)&v72[1] = v59;
                v73 = v60;
                v74 = v61;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 16))(v43, v72, v37, v38, v39, v40, v41);
                VinylQMICommandDriver::deleteTransaction_sync((VinylQMICommandDriver *)v5, v30);
              }
              else if (os_log_type_enabled(v5[5], OS_LOG_TYPE_ERROR))
              {
                v46 = vinyl::asString(v33[8]);
                *(_DWORD *)v72 = 136315138;
                *(_QWORD *)&v72[4] = v46;
                _os_log_error_impl(&dword_216897000, v35, OS_LOG_TYPE_ERROR, "Vinyl Response for command with deice cap result for %s was quite unexpected! Ignoring", v72, 0xCu);
              }
            }
            goto LABEL_37;
          }
          v23 = v5[5];
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v72 = 0;
            v24 = "#E Did not actually do something.";
            goto LABEL_35;
          }
          goto LABEL_36;
        }
      }
      v23 = v5[5];
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v72 = 0;
        v24 = "#E TxId response is missing the TLV; that's really bad.";
LABEL_35:
        _os_log_impl(&dword_216897000, v23, OS_LOG_TYPE_DEFAULT, v24, v72, 2u);
      }
LABEL_36:
      VinylQMICommandDriver::cancelTransactionWithError_sync((VinylQMICommandDriver *)v5, *(_DWORD *)(a1 + 56), 5, 0, 0);
LABEL_37:
      _Block_object_dispose(buf, 8);
LABEL_38:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2169CC490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__63(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_65(uint64_t a1, _DWORD *a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (*a2 != *(_DWORD *)(a1 + 40))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#E TxId response is missing the TLV; that's really bad.",
        v3,
        2u);
    }
  }
}

uint64_t ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_68(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*a2)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_BYTE *)(v2 + 40) = *a2;
    *(_WORD *)(v2 + 41) = 0;
  }
  if (a2[2])
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_BYTE *)(v3 + 46) = a2[2];
    *(_WORD *)(v3 + 47) = 0;
  }
  if (a2[3])
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_BYTE *)(v4 + 49) = a2[3];
    *(_WORD *)(v4 + 50) = 0;
  }
  if (a2[4])
  {
    v5 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_BYTE *)(v5 + 52) = a2[4];
    *(_WORD *)(v5 + 53) = 0;
  }
  if (a2[1])
  {
    v6 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_BYTE *)(v6 + 43) = a2[1];
    *(_WORD *)(v6 + 44) = 0;
  }
  if (a2[5])
  {
    v7 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_BYTE *)(v7 + 55) = a2[5];
    *(_WORD *)(v7 + 56) = 0;
  }
  return result;
}

uint64_t ___ZN21VinylQMICommandDriver30tapeGetDeviceCapabilities_syncEU13block_pointerFvN3ctu6resultI22TapeDeviceCapabilitiesNSt3__15tupleIJ16VinylDriverErrorhhEEEEEE_block_invoke_2_71(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*a2)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_BYTE *)(v2 + 64) = *a2;
    *(_WORD *)(v2 + 65) = 0;
  }
  if (a2[1])
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_BYTE *)(v3 + 67) = a2[1];
    *(_WORD *)(v3 + 68) = 0;
  }
  if (a2[2])
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_BYTE *)(v4 + 70) = a2[2];
    *(_WORD *)(v4 + 71) = 0;
  }
  return result;
}

void VinylQMICommandDriver::setVirtualSimMode_sync(_QWORD *a1, char a2, int a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _OWORD v27[2];
  __int16 v28;
  __int16 v29;
  __int16 v30;
  _QWORD aBlock[6];
  _QWORD v32[6];
  std::__shared_weak_count *v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((a2 & 1) != 0)
  {
    if (a3)
    {
      v6 = a1[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        LOWORD(aBlock[0]) = 0;
        _os_log_error_impl(&dword_216897000, v6, OS_LOG_TYPE_ERROR, "dual vsim unsupported", (uint8_t *)aBlock, 2u);
      }
      v29 = 2818;
      v7 = *(_QWORD *)(a4 + 24);
      if (!v7)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v7 + 48))(v7, &v29);
      return;
    }
    if (a1[26])
    {
      v10 = a1[5];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(aBlock[0]) = 0;
        _os_log_error_impl(&dword_216897000, v10, OS_LOG_TYPE_ERROR, "previous vsim enablement waiting for response, busy", (uint8_t *)aBlock, 2u);
      }
      v28 = 1282;
      v11 = *(_QWORD *)(a4 + 24);
      if (!v11)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v11 + 48))(v11, &v28);
      return;
    }
    memset(v27, 0, sizeof(v27));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v27);
    v12 = (std::__shared_weak_count *)a1[2];
    if (!v12 || (v13 = a1[1], (v14 = std::__shared_weak_count::lock(v12)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v15 = v14;
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
    v25 = QMIServiceMsg::create();
    v20 = MEMORY[0x24BDAC760];
    v32[0] = MEMORY[0x24BDAC760];
    v32[1] = 1174405120;
    v32[2] = ___ZN21VinylQMICommandDriver22setVirtualSimMode_syncEbbNSt3__18functionIFvN3ctu6resultIb10VinylErrorEEEEE_block_invoke;
    v32[3] = &__block_descriptor_tmp_75_3;
    v32[4] = a1;
    v32[5] = v13;
    v33 = v15;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    v22 = v34;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v34, a4);
    aBlock[0] = v20;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl17VSimEnableMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_24D5DA9E0;
    aBlock[4] = v32;
    v23 = _Block_copy(aBlock);
    v26 = v23;
    if (v25)
    {
      qmi::Client::send();
      v23 = v26;
    }
    if (v23)
      _Block_release(v23);
    if (v35 == v34)
    {
      v24 = 4;
    }
    else
    {
      if (!v35)
      {
LABEL_35:
        if (v33)
          std::__shared_weak_count::__release_weak(v33);
        std::__shared_weak_count::__release_weak(v15);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v27);
        return;
      }
      v24 = 5;
      v22 = v35;
    }
    (*(void (**)(_QWORD *))(*v22 + 8 * v24))(v22);
    goto LABEL_35;
  }
  v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(aBlock[0]) = 0;
    _os_log_error_impl(&dword_216897000, v8, OS_LOG_TYPE_ERROR, "disabling vsim mode unsupported", (uint8_t *)aBlock, 2u);
  }
  v30 = 2818;
  v9 = *(_QWORD *)(a4 + 24);
  if (!v9)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v9 + 48))(v9, &v30);
}

void sub_2169CC978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,_QWORD *a37)
{
  std::__shared_weak_count *v37;
  _QWORD *v38;
  uint64_t v40;

  if (a37 == v38)
  {
    v40 = 4;
  }
  else
  {
    if (!a37)
      goto LABEL_6;
    v40 = 5;
    v38 = a37;
  }
  (*(void (**)(_QWORD *))(*v38 + 8 * v40))(v38);
LABEL_6:
  if (a33)
    std::__shared_weak_count::__release_weak(a33);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  std::__shared_weak_count::__release_weak(v37);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN21VinylQMICommandDriver22setVirtualSimMode_syncEbbNSt3__18functionIFvN3ctu6resultIb10VinylErrorEEEEE_block_invoke(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t TlvValue;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  NSObject *v20;
  char v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[2];
  __int16 v32;
  __int16 v33;
  __int16 v34;
  std::__shared_weak_count *v36;
  _BYTE buf[24];
  _BYTE *v38;
  _QWORD v39[4];

  v39[3] = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v36 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
        goto LABEL_40;
      v8 = *((_DWORD *)a2 + 1);
      if (v8)
      {
        if (v8 == 57)
        {
          v34 = 2818;
          v9 = a1[10];
          if (!v9)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v9 + 48))(v9, &v34);
          LOBYTE(v34) = 0;
          goto LABEL_40;
        }
        TlvValue = qmi::MessageBase::findTlvValue(a2);
        v15 = TlvValue;
        if (TlvValue)
        {
          v16 = v14;
          *(_QWORD *)buf = TlvValue;
          v17 = tlv::parseV<vinyl::tlv::RespVSimEnableError>((unint64_t *)buf, v14);
          if (*(_QWORD *)buf)
          {
            v18 = v17;
            if (v17 == 2)
            {
              if (*(_BYTE *)(v5 + 216))
              {
                v32 = 257;
                v19 = a1[10];
                if (!v19)
                  std::__throw_bad_function_call[abi:ne180100]();
                (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v19 + 48))(v19, &v32);
                LOBYTE(v32) = 0;
              }
              else
              {
                v28 = *(NSObject **)(v5 + 40);
                if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl(&dword_216897000, v28, OS_LOG_TYPE_ERROR, "previous vsim enablement waiting for indication, busy", buf, 2u);
                }
                v33 = 1282;
                v29 = a1[10];
                if (!v29)
                  std::__throw_bad_function_call[abi:ne180100]();
                (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v29 + 48))(v29, &v33);
                LOBYTE(v33) = 0;
              }
              goto LABEL_40;
            }
LABEL_22:
            v20 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              v30 = qmi::asString();
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v30;
              _os_log_error_impl(&dword_216897000, v20, OS_LOG_TYPE_ERROR, "Failed to dynamically enable VSIM: %s", buf, 0xCu);
            }
            if (v18 == 3)
              v21 = 3;
            else
              v21 = 0;
            if (v18 == 1)
              v22 = 11;
            else
              v22 = v21;
            v31[0] = 2;
            v31[1] = v22;
            v23 = a1[10];
            if (!v23)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v23 + 48))(v23, v31);
            v31[0] = 0;
            goto LABEL_40;
          }
          ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x24BED8BD0])(*(unsigned __int16 *)a2, 16, v15, v16);
        }
        v18 = 0;
        goto LABEL_22;
      }
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)(a1 + 7));
      v10 = v5 + 184;
      if (buf != (_BYTE *)(v5 + 184))
      {
        v11 = v38;
        v12 = *(_QWORD *)(v5 + 208);
        if (v38 == buf)
        {
          if (v12 == v10)
          {
            memset(v39, 0, 24);
            (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)buf + 24))(buf, v39);
            (*(void (**)(_BYTE *))(*(_QWORD *)v38 + 32))(v38);
            v38 = 0;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v5 + 208) + 24))(*(_QWORD *)(v5 + 208), buf);
            (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 208) + 32))(*(_QWORD *)(v5 + 208));
            *(_QWORD *)(v5 + 208) = 0;
            v38 = buf;
            (*(void (**)(_QWORD *, uint64_t))(v39[0] + 24))(v39, v5 + 184);
            (*(void (**)(_QWORD *))(v39[0] + 32))(v39);
          }
          else
          {
            (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)buf + 24))(buf, v5 + 184);
            (*(void (**)(_BYTE *))(*(_QWORD *)v38 + 32))(v38);
            v38 = *(_BYTE **)(v5 + 208);
          }
          *(_QWORD *)(v5 + 208) = v10;
        }
        else if (v12 == v10)
        {
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 24))(v5 + 184, buf);
          (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 208) + 32))(*(_QWORD *)(v5 + 208));
          *(_QWORD *)(v5 + 208) = v38;
          v38 = buf;
        }
        else
        {
          v38 = *(_BYTE **)(v5 + 208);
          *(_QWORD *)(v5 + 208) = v11;
        }
      }
      v24 = v38;
      if (v38 == buf)
      {
        v25 = 4;
        v24 = buf;
      }
      else
      {
        if (!v38)
          goto LABEL_40;
        v25 = 5;
      }
      (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_40:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2169CCE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrI18VinylCommandDriverEE56c54_ZTSNSt3__18functionIFvN3ctu6resultIb10VinylErrorEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void sub_2169CCEC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrI18VinylCommandDriverEE56c54_ZTSNSt3__18functionIFvN3ctu6resultIb10VinylErrorEEEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 80);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

uint64_t VinylQMICommandDriver::start_sync(VinylQMICommandDriver *this)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I Command driver start called", v4, 2u);
  }
  return qmi::Client::start((VinylQMICommandDriver *)((char *)this + 96));
}

uint64_t VinylQMICommandDriver::stop_sync(VinylQMICommandDriver *this)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v8[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I Command driver STOP called", v8, 2u);
  }
  v3 = (_QWORD *)*((_QWORD *)this + 20);
  v4 = (_QWORD *)*((_QWORD *)this + 21);
  while (v4 != v3)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  *((_QWORD *)this + 21) = v3;
  return qmi::Client::stop((VinylQMICommandDriver *)((char *)this + 96));
}

void VinylQMICommandDriver::dumpState_sync(VinylQMICommandDriver *this)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *i;
  NSObject *v7;
  std::string *p_buf;
  std::string buf;
  uint8_t v10[4];
  std::string *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_DWORD *)this + 32);
    v4 = (uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3;
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v3;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v4;
    _os_log_impl(&dword_216897000, v2, OS_LOG_TYPE_DEFAULT, "#I fNextTxid=%d; %lu outstanding transactions",
      (uint8_t *)&buf,
      0x12u);
  }
  v5 = (uint64_t *)*((_QWORD *)this + 20);
  for (i = (uint64_t *)*((_QWORD *)this + 21); v5 != i; ++v5)
  {
    v7 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      VinylTransaction::longDescription(&buf, *v5);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      *(_DWORD *)v10 = 136315138;
      v11 = p_buf;
      _os_log_impl(&dword_216897000, v7, OS_LOG_TYPE_DEFAULT, "#I %s", v10, 0xCu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
}

void VinylTransactionWithBoolResult::~VinylTransactionWithBoolResult(VinylTransactionWithBoolResult *this)
{
  const void *v2;
  void *v3;

  *(_QWORD *)this = &off_24D5DA488;
  v2 = (const void *)*((_QWORD *)this + 7);
  if (v2)
    _Block_release(v2);
  *(_QWORD *)this = off_24D5DA280;
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  VinylTransactionWithBoolResult::~VinylTransactionWithBoolResult(this);
  JUMPOUT(0x2199FEAC4);
}

void VinylTransactionWithProfileIdResult::~VinylTransactionWithProfileIdResult(VinylTransactionWithProfileIdResult *this)
{
  const void *v2;
  void *v3;

  *(_QWORD *)this = &off_24D5DA4E8;
  v2 = (const void *)*((_QWORD *)this + 7);
  if (v2)
    _Block_release(v2);
  *(_QWORD *)this = off_24D5DA280;
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  VinylTransactionWithProfileIdResult::~VinylTransactionWithProfileIdResult(this);
  JUMPOUT(0x2199FEAC4);
}

void VinylTransactionWithFirmwareUpdateDataResult::~VinylTransactionWithFirmwareUpdateDataResult(VinylTransactionWithFirmwareUpdateDataResult *this)
{
  const void *v2;
  void *v3;

  *(_QWORD *)this = &off_24D5DA518;
  v2 = (const void *)*((_QWORD *)this + 7);
  if (v2)
    _Block_release(v2);
  *(_QWORD *)this = off_24D5DA280;
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  VinylTransactionWithFirmwareUpdateDataResult::~VinylTransactionWithFirmwareUpdateDataResult(this);
  JUMPOUT(0x2199FEAC4);
}

void VinylTapeTransactionWithDeviceCapabilitiesResult::~VinylTapeTransactionWithDeviceCapabilitiesResult(VinylTapeTransactionWithDeviceCapabilitiesResult *this)
{
  const void *v2;
  void *v3;

  *(_QWORD *)this = &off_24D5DA688;
  v2 = (const void *)*((_QWORD *)this + 7);
  if (v2)
    _Block_release(v2);
  *(_QWORD *)this = off_24D5DA280;
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  VinylTapeTransactionWithDeviceCapabilitiesResult::~VinylTapeTransactionWithDeviceCapabilitiesResult(this);
  JUMPOUT(0x2199FEAC4);
}

void VinylTransactionWithDataResult::~VinylTransactionWithDataResult(VinylTransactionWithDataResult *this)
{
  void *v2;
  const void *v3;
  void *v4;

  *(_QWORD *)this = &off_24D5DA2B0;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_24D5DA4B8;
  v3 = (const void *)*((_QWORD *)this + 7);
  if (v3)
    _Block_release(v3);
  *(_QWORD *)this = off_24D5DA280;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  const void *v3;
  void *v4;

  *(_QWORD *)this = &off_24D5DA2B0;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_24D5DA4B8;
  v3 = (const void *)*((_QWORD *)this + 7);
  if (v3)
    _Block_release(v3);
  *(_QWORD *)this = off_24D5DA280;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x2199FEAC4);
}

void VinylTransactionResultBase<std::vector<unsigned char>>::sendError(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_2169CD510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *__p, uint64_t a11)
{
  if (a9 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VinylTransactionResultBase<BOOL>::sendError(uint64_t a1, __int16 a2, __int16 a3, char a4)
{
  uint64_t v4;
  char v6;
  __int16 v7;
  char v8;

  v4 = *(_QWORD *)(a1 + 56);
  v6 = 2;
  v8 = a4;
  v7 = a2 | (a3 << 8);
  return (*(uint64_t (**)(void))(v4 + 16))();
}

uint64_t VinylTransactionResultBase<std::array<unsigned char,16ul>>::sendError(uint64_t a1, __int16 a2, __int16 a3, char a4)
{
  uint64_t v4;
  char v6;
  __int16 v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 56);
  v6 = 2;
  v8 = a4;
  v7 = a2 | (a3 << 8);
  return (*(uint64_t (**)(void))(v4 + 16))();
}

void VinylTransactionResultBase<VinylFirmwareUpdateData>::sendError(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_2169CD66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  if (a10 == 1)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VinylTransactionResultBase<TapeDeviceCapabilities>::sendError(uint64_t a1, __int16 a2, __int16 a3, char a4)
{
  uint64_t v4;
  char v6;
  __int16 v7;
  char v8;

  v4 = *(_QWORD *)(a1 + 56);
  v6 = 2;
  v8 = a4;
  v7 = a2 | (a3 << 8);
  return (*(uint64_t (**)(void))(v4 + 16))();
}

void std::vector<std::unique_ptr<VinylTransaction>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<VinylTransaction>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *VinylTransactionResultBase<BOOL>::~VinylTransactionResultBase(_QWORD *a1)
{
  const void *v2;
  void *v3;

  *a1 = &off_24D5DA488;
  v2 = (const void *)a1[7];
  if (v2)
    _Block_release(v2);
  *a1 = off_24D5DA280;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void VinylTransactionResultBase<BOOL>::~VinylTransactionResultBase(_QWORD *a1)
{
  const void *v2;
  void *v3;

  *a1 = &off_24D5DA488;
  v2 = (const void *)a1[7];
  if (v2)
    _Block_release(v2);
  *a1 = off_24D5DA280;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2199FEAC4);
}

_QWORD *VinylTransactionResultBase<std::vector<unsigned char>>::~VinylTransactionResultBase(_QWORD *a1)
{
  const void *v2;
  void *v3;

  *a1 = &off_24D5DA4B8;
  v2 = (const void *)a1[7];
  if (v2)
    _Block_release(v2);
  *a1 = off_24D5DA280;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void VinylTransactionResultBase<std::vector<unsigned char>>::~VinylTransactionResultBase(_QWORD *a1)
{
  const void *v2;
  void *v3;

  *a1 = &off_24D5DA4B8;
  v2 = (const void *)a1[7];
  if (v2)
    _Block_release(v2);
  *a1 = off_24D5DA280;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2199FEAC4);
}

_QWORD *VinylTransactionResultBase<std::array<unsigned char,16ul>>::~VinylTransactionResultBase(_QWORD *a1)
{
  const void *v2;
  void *v3;

  *a1 = &off_24D5DA4E8;
  v2 = (const void *)a1[7];
  if (v2)
    _Block_release(v2);
  *a1 = off_24D5DA280;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void VinylTransactionResultBase<std::array<unsigned char,16ul>>::~VinylTransactionResultBase(_QWORD *a1)
{
  const void *v2;
  void *v3;

  *a1 = &off_24D5DA4E8;
  v2 = (const void *)a1[7];
  if (v2)
    _Block_release(v2);
  *a1 = off_24D5DA280;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2199FEAC4);
}

_QWORD *VinylTransactionResultBase<VinylFirmwareUpdateData>::~VinylTransactionResultBase(_QWORD *a1)
{
  const void *v2;
  void *v3;

  *a1 = &off_24D5DA518;
  v2 = (const void *)a1[7];
  if (v2)
    _Block_release(v2);
  *a1 = off_24D5DA280;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void VinylTransactionResultBase<VinylFirmwareUpdateData>::~VinylTransactionResultBase(_QWORD *a1)
{
  const void *v2;
  void *v3;

  *a1 = &off_24D5DA518;
  v2 = (const void *)a1[7];
  if (v2)
    _Block_release(v2);
  *a1 = off_24D5DA280;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2199FEAC4);
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char v32;
  char *v33;
  char *v34;

  if (a5 < 1)
    return;
  v5 = a5;
  v6 = __src;
  v10 = *(_BYTE **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    v27 = &v13[(_QWORD)v16 + v5];
    v28 = v26;
    do
    {
      v29 = *v6++;
      *v28++ = v29;
      --v5;
    }
    while (v5);
    v30 = *(char **)a1;
    if (*(char **)a1 != __dst)
    {
      v31 = __dst;
      do
      {
        v32 = *--v31;
        *--v26 = v32;
      }
      while (v31 != v30);
      v10 = *(_BYTE **)(a1 + 8);
    }
    v33 = (char *)v16 + v15;
    if (v10 != __dst)
      memmove(v27, __dst, v10 - __dst);
    v34 = *(char **)a1;
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = &v27[v10 - __dst];
    *(_QWORD *)(a1 + 16) = v33;
    if (v34)
      operator delete(v34);
    return;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(_BYTE **)(a1 + 8);
LABEL_17:
    v21 = &__dst[v5];
    v22 = &v20[-v5];
    v23 = v20;
    if (&v20[-v5] < v10)
    {
      v24 = (char *)(&v10[v5] - v20);
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&__dst[v5], __dst, v20 - v21);
    if (v18 != v6)
      memmove(__dst, v6, v18 - v6);
    return;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqCommand>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqCommand>::getSize()
{
  return tlv::size<wms::tlv::MessageTag>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqCommand>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<vinyl::tlv::ReqCommand>(a2, a1 + 12);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqCommand>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5DA560;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a1 + 20);
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::PayloadData>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5DA5B0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::PayloadData>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5DA5B0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::PayloadData>::getSize(uint64_t a1)
{
  return tlv::size<uim::tlv::WriteTransparent>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::PayloadData>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _WORD *v4;
  uint64_t v5;
  void *result;
  char *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_WORD *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<vinyl::tlv::PayloadData>((_WORD **)a2, a1 + 16);
  v7 = (char *)(*a2 - v5);
  *(_BYTE *)v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::PayloadData>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5DA5B0;
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 24), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24));
  return v2;
}

void sub_2169CDEBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C40970CA704);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqTapeReqCommand>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqTapeReqCommand>::getSize()
{
  return tlv::size<wms::tlv::MessageTag>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqTapeReqCommand>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<vinyl::tlv::ReqCommand>(a2, a1 + 12);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqTapeReqCommand>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5DA600;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a1 + 20);
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeRequestPayloadData>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5DA650;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeRequestPayloadData>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5DA650;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeRequestPayloadData>::getSize(uint64_t a1)
{
  return tlv::size<vinyl::tlv::TapeRequestPayloadData>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeRequestPayloadData>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<vinyl::tlv::TapeRequestPayloadData>(a2, a1 + 16);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeRequestPayloadData>::clone(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5DA650;
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a1 + 16);
  *(_WORD *)(v2 + 20) = *(_WORD *)(a1 + 20);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 24), v3, v4, v4 - (_QWORD)v3);
  return v2;
}

void sub_2169CE10C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x1091C4022169CEDLL);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::array<unsigned char,16ul>>::__init_with_size[abi:ne180100]<std::array<unsigned char,16ul>*,std::array<unsigned char,16ul>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<wms::tlv::Route>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2169CE18C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *VinylTransactionResultBase<TapeDeviceCapabilities>::~VinylTransactionResultBase(_QWORD *a1)
{
  const void *v2;
  void *v3;

  *a1 = &off_24D5DA688;
  v2 = (const void *)a1[7];
  if (v2)
    _Block_release(v2);
  *a1 = off_24D5DA280;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void VinylTransactionResultBase<TapeDeviceCapabilities>::~VinylTransactionResultBase(_QWORD *a1)
{
  const void *v2;
  void *v3;

  *a1 = &off_24D5DA688;
  v2 = (const void *)a1[7];
  if (v2)
    _Block_release(v2);
  *a1 = off_24D5DA280;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2199FEAC4);
}

uint64_t *std::shared_ptr<VinylCommandDriver>::shared_ptr[abi:ne180100]<VinylCommandDriver,std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver*)#1},void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24D5DA6B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<QMIDataSystemDeterminationManager>::__enable_weak_this[abi:ne180100]<QMIDataSystemDeterminationManager,QMIDataSystemDeterminationManager,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_2169CE2D4(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver*)#1}::operator() const(VinylCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2169CE2F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<VinylCommandDriver *,std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver *)#1},std::allocator<VinylCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2199FEAC4);
}

void std::__shared_ptr_pointer<VinylCommandDriver *,std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver *)#1},std::allocator<VinylCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver*)#1}::operator() const(VinylCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<VinylCommandDriver *,std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver *)#1},std::allocator<VinylCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<VinylCommandDriver> ctu::SharedSynchronizable<VinylCommandDriver>::make_shared_ptr<VinylCommandDriver>(VinylCommandDriver*)::{lambda(VinylCommandDriver*)#1}::operator() const(VinylCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZNK3qmi6Client13setIndHandlerIN5vinyl4Info10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169CE454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIN5vinyl8TapeInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169CE550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIN5vinyl10VSimEnable10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169CE64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MessageBase::tryTlv<vinyl::tlv::IndResult>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  int v5;
  unint64_t v6[2];

  result = qmi::MessageBase::findTlvValue(a1);
  v6[0] = result;
  v6[1] = v4;
  if (result)
  {
    result = tlv::parseV<vinyl::tlv::IndResult>(v6, v4);
    if (*(_BYTE *)a2)
    {
      *(_WORD *)(a2 + 12) = v5;
    }
    else
    {
      *(_DWORD *)(a2 + 12) = v5;
      *(_BYTE *)a2 = 1;
    }
    *(_QWORD *)(a2 + 4) = result;
    if (!v6[0])
      *(_BYTE *)a2 = 0;
  }
  return result;
}

uint64_t qmi::MessageBase::tryTlv<vinyl::tlv::IndTapeIndResult>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6[2];

  result = qmi::MessageBase::findTlvValue(a1);
  v6[0] = result;
  v6[1] = v4;
  if (result)
  {
    result = tlv::parseV<vinyl::tlv::IndTapeIndResult>(v6, v4);
    if (*(_BYTE *)a2)
    {
      *(_DWORD *)(a2 + 12) = v5;
      *(_WORD *)(a2 + 16) = WORD2(v5);
    }
    else
    {
      *(_QWORD *)(a2 + 12) = v5;
      *(_BYTE *)a2 = 1;
    }
    *(_QWORD *)(a2 + 4) = result;
    if (!v6[0])
      *(_BYTE *)a2 = 0;
  }
  return result;
}

void qmi::MessageBase::tryTlv<vinyl::tlv::PayloadData>(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12[2];

  v12[0] = qmi::MessageBase::findTlvValue(a1);
  v12[1] = v4;
  if (v12[0])
  {
    tlv::parseV<vinyl::tlv::PayloadData>(v12, v4, &v9);
    v5 = *a3;
    *((_DWORD *)a3 + 2) = v9;
    if (v5)
    {
      v6 = (void *)*((_QWORD *)a3 + 2);
      if (v6)
      {
        *((_QWORD *)a3 + 3) = v6;
        operator delete(v6);
        v7 = *a3;
      }
      else
      {
        v7 = 1;
      }
      v8 = (void *)v10;
      *((_OWORD *)a3 + 1) = v10;
      *((_QWORD *)a3 + 4) = v11;
    }
    else
    {
      v8 = (void *)v10;
      *((_OWORD *)a3 + 1) = v10;
      *((_QWORD *)a3 + 4) = v11;
      v7 = 1;
      *a3 = 1;
    }
    if (!v12[0] && v7)
    {
      if (v8)
      {
        *((_QWORD *)a3 + 3) = v8;
        operator delete(v8);
      }
      *a3 = 0;
    }
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl7Message8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169CE8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl11TapeMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169CE9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<vinyl::tlv::ReqProfileId>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 16)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 16;
    *(_QWORD *)v7 = &off_24D5DA7F8;
    *(_QWORD *)(v7 + 9) = 0;
    v6 = v7 + 9;
    *(_QWORD *)(v7 + 17) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 9;
  }
  return (char *)v6;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileId>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileId>::getSize()
{
  return tlv::size<wds::tlv::Ipv4AddressExtended>();
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileId>::write(uint64_t a1, __n128 **a2)
{
  unsigned __int8 v3;
  __n128 *v4;
  uint64_t v5;
  char *v6;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = (uint64_t)(*a2)->n128_i64 + 3;
  *a2 = (__n128 *)v5;
  tlv::writeV<vinyl::tlv::ReqProfileId>(a2, (__n128 *)(a1 + 9));
  v6 = (char *)*a2 - v5;
  v4->n128_u8[0] = v3;
  *(unsigned __int16 *)((char *)v4->n128_u16 + 1) = (unsigned __int16)v6;
}

__n128 qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileId>::clone(uint64_t a1)
{
  uint64_t v2;
  __n128 result;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5DA7F8;
  result = *(__n128 *)(a1 + 9);
  *(__n128 *)(v2 + 9) = result;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileIdList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5DA848;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileIdList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24D5DA848;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2199FEAC4);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileIdList>::getSize(uint64_t a1)
{
  return tlv::size<vinyl::tlv::ReqProfileIdList>((_QWORD *)(a1 + 16));
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileIdList>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<vinyl::tlv::ReqProfileIdList>((_BYTE **)a2, (_DWORD *)(a1 + 16));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::ReqProfileIdList>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_24D5DA848;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  std::vector<std::array<unsigned char,16ul>>::__init_with_size[abi:ne180100]<std::array<unsigned char,16ul>*,std::array<unsigned char,16ul>*>((_QWORD *)(v2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
  return v2;
}

void sub_2169CEDA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2199FEAC4](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl23EnableVinylSlotTestMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169CEE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::VinylSlotTestModeReq>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::VinylSlotTestModeReq>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

_BYTE **qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::VinylSlotTestModeReq>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<wds::tlv::LocalAbort>((_BYTE **)a2, (_BYTE *)(a1 + 9));
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::VinylSlotTestModeReq>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_24D5DA8C0;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetEid>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetEid>::getSize()
{
  return tlv::size<wms::tlv::MemoryStorageIdentification>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetEid>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<vinyl::tlv::TapeReqGetEid>(a2, a1 + 12);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetEid>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5DA910;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl17TapeGetEidMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169CF10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetDeviceCapabilities>::~TlvWrapper()
{
  JUMPOUT(0x2199FEAC4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetDeviceCapabilities>::getSize()
{
  return tlv::size<wms::tlv::MemoryStorageIdentification>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetDeviceCapabilities>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<vinyl::tlv::TapeReqGetEid>(a2, a1 + 12);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::TapeReqGetDeviceCapabilities>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_24D5DA988;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl32TapeGetDeviceCapabilitiesMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169CF2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl17VSimEnableMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2169CF3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *EurOTASPService::EurOTASPService(_QWORD *a1, uint64_t a2, dispatch_object_t *a3)
{
  NSObject *object;

  object = *a3;
  if (*a3)
    dispatch_retain(*a3);
  OTASPService::OTASPService();
  if (object)
    dispatch_release(object);
  *a1 = &off_24D5DAA10;
  return a1;
}

void sub_2169CF490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

uint64_t EurOTASPService::isOTASPCallNumber(uint64_t a1, qmi::MessageBase *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::mutex *ServiceMap;
  std::mutex *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD v30[5];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __n128 (*v34)(_QWORD *, uint64_t);
  void (*v35)(uint64_t);
  _QWORD v36[3];
  uint8_t buf[8];
  std::__shared_weak_count *v38;
  unint64_t v39;

  v31 = 0;
  v32 = &v31;
  v33 = 0x4002000000;
  v34 = __Block_byref_object_copy__5;
  v35 = __Block_byref_object_dispose__5;
  memset(v36, 0, sizeof(v36));
  v30[0] = MEMORY[0x24BDAC760];
  v30[1] = 0x40000000;
  v30[2] = ___ZNK15EurOTASPService17isOTASPCallNumberERKN2vs15VoiceCallStatus10IndicationEN10subscriber7SimSlotE_block_invoke;
  v30[3] = &unk_24D5DAA70;
  v30[4] = &v31;
  *(_QWORD *)buf = v30;
  if (!qmi::MessageBase::applyTlv<vs::tlv::RemoteNumberList,void({block_pointer})(vs::tlv::RemoteNumberList const&)>(a2, 16, (uint64_t)buf)|| (v5 = v32[5], v6 = v32[6], v5 == v6))
  {
LABEL_29:
    v25 = 0;
  }
  else
  {
    v7 = MEMORY[0x24BDC3CF8];
    while (1)
    {
      v8 = (_QWORD *)(v5 + 8);
      if (*(char *)(v5 + 31) < 0)
        v8 = (_QWORD *)*v8;
      ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 40));
      v10 = ServiceMap;
      v11 = *(_QWORD *)(v7 + 8);
      if ((v11 & 0x8000000000000000) != 0)
      {
        v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
        v13 = 5381;
        do
        {
          v11 = v13;
          v14 = *v12++;
          v13 = (33 * v13) ^ v14;
        }
        while (v14);
      }
      *(_QWORD *)buf = 0;
      v38 = 0;
      std::mutex::lock(ServiceMap);
      v39 = v11;
      v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v10[1].__m_.__sig, &v39);
      if (v15)
      {
        v17 = v15[3];
        v16 = (std::__shared_weak_count *)v15[4];
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
      }
      else
      {
        v17 = 0;
        v16 = 0;
      }
      *(_QWORD *)buf = v17;
      v38 = v16;
      std::mutex::unlock(v10);
      if (v16)
      {
        v20 = (unint64_t *)&v16->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        do
          v22 = __ldaxr(v20);
        while (__stlxr(v22 - 1, v20));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (v17 && (*(unsigned int (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v17 + 16))(v17, v8, a3))
        break;
      if (v16)
      {
        v23 = (unint64_t *)&v16->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v5 += 32;
      if (v5 == v6)
        goto LABEL_29;
    }
    v27 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v27, OS_LOG_TYPE_DEFAULT, "#I Number being dialed out is an OTASP number", buf, 2u);
    }
    if (v16)
    {
      v28 = (unint64_t *)&v16->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v25 = 1;
  }
  _Block_object_dispose(&v31, 8);
  *(_QWORD *)buf = v36;
  std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v25;
}

void sub_2169CF76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v10 - 112) = v9;
  std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 112));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZNK15EurOTASPService17isOTASPCallNumberERKN2vs15VoiceCallStatus10IndicationEN10subscriber7SimSlotE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _WORD *v16;
  void **v17;
  void **i;

  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = (void **)(v2 + 5);
  if (v2 + 5 != a2)
  {
    v5 = *a2;
    v4 = a2[1];
    v6 = v4 - *a2;
    v7 = v6 >> 5;
    v8 = v2[7];
    v9 = (_WORD *)v2[5];
    if (v6 >> 5 > (unint64_t)((v8 - (uint64_t)v9) >> 5))
    {
      if (v9)
      {
        std::vector<vs::tlv::RemoteNumberListItem>::__clear[abi:ne180100](v2 + 5);
        operator delete(*v3);
        v8 = 0;
        *v3 = 0;
        v2[6] = 0;
        v2[7] = 0;
      }
      if (v6 < 0)
        goto LABEL_22;
      v10 = v8 >> 4;
      if (v8 >> 4 <= v7)
        v10 = v6 >> 5;
      v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v10;
      if (v11 >> 59)
LABEL_22:
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>((uint64_t)(v2 + 7), v11);
      v2[5] = (uint64_t)v12;
      v2[6] = (uint64_t)v12;
      v2[7] = (uint64_t)v12 + 32 * v13;
      v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>,vs::tlv::RemoteNumberListItem*,vs::tlv::RemoteNumberListItem*,vs::tlv::RemoteNumberListItem*>((uint64_t)(v2 + 7), v5, v4, (uint64_t)v12);
      goto LABEL_15;
    }
    v15 = (v2[6] - (uint64_t)v9) >> 5;
    if (v15 < v7)
    {
      v16 = (_WORD *)(v5 + 32 * v15);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vs::tlv::RemoteNumberListItem *,vs::tlv::RemoteNumberListItem *,vs::tlv::RemoteNumberListItem *,0>((_WORD *)*a2, v16, v9);
      v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>,vs::tlv::RemoteNumberListItem*,vs::tlv::RemoteNumberListItem*,vs::tlv::RemoteNumberListItem*>((uint64_t)(v2 + 7), (uint64_t)v16, v4, v2[6]);
LABEL_15:
      v2[6] = v14;
      return;
    }
    v17 = (void **)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vs::tlv::RemoteNumberListItem *,vs::tlv::RemoteNumberListItem *,vs::tlv::RemoteNumberListItem *,0>((_WORD *)*a2, (_WORD *)a2[1], v9);
    for (i = (void **)v2[6]; i != v17; i -= 4)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    v2[6] = (uint64_t)v17;
  }
}

void sub_2169CF96C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  _Unwind_Resume(a1);
}

void sub_2169CF974(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  _Unwind_Resume(a1);
}

const void **EurOTASPService::startOTASP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *ServiceMap;
  std::mutex *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::mutex *v23;
  CFTypeRef v24;
  CFTypeID v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  NSObject *v30;
  _BOOL4 v31;
  void **v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  void **v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  const void *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v57;
  __int128 v58;
  uint64_t v59;
  void *__p[2];
  uint64_t v61;
  const void *v62;
  char v63[8];
  uint64_t v64;
  _OWORD v65[2];
  _QWORD *v66;
  std::__shared_weak_count *v67;
  CFTypeRef cf;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  void *v71;
  __int128 *p_buf;
  __int128 buf;
  void (*v74)(uint64_t, _QWORD *);
  void *v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 40));
  v7 = ServiceMap;
  v8 = *(_QWORD *)(MEMORY[0x24BDC3CA8] + 8);
  if (v8 < 0)
  {
    v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  buf = 0uLL;
  std::mutex::lock(ServiceMap);
  *(_QWORD *)&v65[0] = v8;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v7[1].__m_.__sig, (unint64_t *)v65);
  if (v12)
  {
    v14 = (const void *)v12[3];
    v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  *(_QWORD *)&buf = v14;
  *((_QWORD *)&buf + 1) = v13;
  std::mutex::unlock(v7);
  cf = v14;
  v69 = (uint64_t)v13;
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(CFTypeRef, _QWORD))(*(_QWORD *)cf + 384))(cf, 0);
  v20 = (std::__shared_weak_count *)v69;
  if (v69)
  {
    v21 = (unint64_t *)(v69 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v62 = 0;
  v23 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 40));
  ctu::shared_ptr_map_impl<ctu::indexed_by_any_map_hashing_key>::get<CarrierSettingsInterface>(v23, &buf);
  (*(void (**)(CFTypeRef *__return_ptr, _QWORD, uint64_t, uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)buf + 96))(&cf, buf, a3, 1, CFSTR("NumberToDialForOTAProvisioning"), 0, 0);
  v24 = cf;
  if (cf && (v25 = CFGetTypeID(cf), v25 == CFStringGetTypeID()))
  {
    v62 = v24;
    CFRetain(v24);
  }
  else
  {
    v62 = 0;
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v58, "*22899");
  ctu::cf::assign();
  *(_OWORD *)__p = v58;
  v61 = v59;
  v59 = 0;
  v58 = 0uLL;
  v29 = *(unsigned __int8 *)(a1 + 76);
  v30 = *(NSObject **)(a1 + 24);
  v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
  if (v29)
  {
    if (v31)
    {
      v32 = __p;
      if (v61 < 0)
        v32 = (void **)__p[0];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v32;
      _os_log_impl(&dword_216897000, v30, OS_LOG_TYPE_DEFAULT, "#I Starting OTASP with number (using NumberToDialForOTAProvisioning): %s", (uint8_t *)&buf, 0xCu);
    }
    *(_BYTE *)(a1 + 81) = 0;
    *(_BYTE *)(a1 + 77) = 1;
    v33 = *(std::__shared_weak_count **)(a2 + 8);
    v57 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      v37 = __p;
      if (v61 < 0)
        v37 = (void **)__p[0];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v37;
      _os_log_impl(&dword_216897000, v36, OS_LOG_TYPE_DEFAULT, "#I Dialing OTASP Call( %s)", (uint8_t *)&buf, 0xCu);
    }
    memset(v65, 0, sizeof(v65));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v65);
    v38 = (_QWORD *)qmi::MutableMessageBase::getTLV<vs::tlv::CallingNumber>(v65, 1);
    if (v61 >= 0)
      v39 = (char *)__p;
    else
      v39 = (char *)__p[0];
    if (v61 >= 0)
      v40 = HIBYTE(v61);
    else
      v40 = (unint64_t)__p[1];
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v38, v39, &v39[v40], v40);
    *(_BYTE *)qmi::MutableMessageBase::getTLV<vs::tlv::CallType>(v65, 16) = 0;
    if ((a3 - 1) >= 3)
      LODWORD(a3) = 0;
    v41 = qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<vs::VoiceDialCall::Request>((uint64_t)v63, a3, v41);
    v42 = v64;
    *(_DWORD *)(v64 + 16) = 45000;
    v43 = (std::__shared_weak_count *)operator new(0x20uLL);
    v43->__shared_owners_ = 0;
    v44 = (unint64_t *)&v43->__shared_owners_;
    v43->__shared_weak_owners_ = 0;
    v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5DAB60;
    v43[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
    v66 = &v43[1].__vftable;
    v67 = v43;
    v45 = (const void *)MEMORY[0x24BDAC760];
    *(_QWORD *)&buf = MEMORY[0x24BDAC760];
    *((_QWORD *)&buf + 1) = 1174405120;
    v74 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN15EurOTASPService11sendDialReqES0_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN2vs8callList9Call_TypeEN10subscriber7SimSlotEE3__0EEOS1_OT__block_invoke;
    v75 = &__block_descriptor_tmp_15_17;
    v76 = &v43[1].__vftable;
    v77 = v43;
    do
      v46 = __ldxr(v44);
    while (__stxr(v46 + 1, v44));
    cf = v45;
    v69 = 0x40000000;
    v70 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2vs13VoiceDialCall8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v71 = &unk_24D5DABA8;
    p_buf = &buf;
    *(_QWORD *)(v42 + 32) = _Block_copy(&cf);
    v47 = v77;
    if (v77)
    {
      v48 = (unint64_t *)&v77->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = v67;
    if (v67)
    {
      v51 = (unint64_t *)&v67->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = v64;
    v64 = 0;
    if (v53)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v64, v53);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v65);
    if (v57)
    {
      v54 = (unint64_t *)&v57->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  else
  {
    if (v31)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_216897000, v30, OS_LOG_TYPE_DEFAULT, "#I Phone not registered, pending OTASP to after registering", (uint8_t *)&buf, 2u);
    }
    *(_BYTE *)(a1 + 81) = 1;
  }
  if (SHIBYTE(v61) < 0)
    operator delete(__p[0]);
  return ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&v62);
}

void sub_2169CFF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN15EurOTASPService24handleOtaspVoiceDialRespEN2vs13VoiceDialCall8ResponseE_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void EurOTASPService::handleVoiceOtaspInd(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  NSObject *v10;
  void *p_p;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  std::mutex *ServiceMap;
  std::mutex *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _BYTE *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  char v52[8];
  uint64_t v53;
  _OWORD v54[2];
  _QWORD *v55;
  std::__shared_weak_count *v56;
  void *__p;
  uint64_t v58;
  uint64_t (*v59)();
  void *v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  _BYTE buf[24];
  void *v64;
  void **v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v10 = *(NSObject **)(a1 + 24);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    convertOtaspStatusToString();
    if (SHIBYTE(v59) >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = p_p;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a5;
    _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#I --->BB Incoming Indication: OTASP_STATUS: %s (%d)", buf, 0x12u);
    if (SHIBYTE(v59) < 0)
      operator delete(__p);
    v10 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p) = 67109120;
    HIDWORD(__p) = a4;
    _os_log_impl(&dword_216897000, v10, OS_LOG_TYPE_DEFAULT, "#I Recived OTASP Call Id: %d", (uint8_t *)&__p, 8u);
  }
  switch((int)a5)
  {
    case 0:
      if (*(_BYTE *)(a1 + 78))
        *(_BYTE *)(a1 + 82) = 1;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      if (*(_BYTE *)(a1 + 78))
        *(_BYTE *)(a1 + 83) = 1;
      break;
    case 8:
      if (*(_BYTE *)(a1 + 77))
      {
        v12 = *(std::__shared_weak_count **)(a3 + 8);
        v51 = v12;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        if (*MEMORY[0x24BDC39A8] == a4)
        {
          v15 = *(NSObject **)(a1 + 24);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl(&dword_216897000, v15, OS_LOG_TYPE_DEFAULT, "#E OTASP call end: We should never send an END with FF. Not ending.", (uint8_t *)&__p, 2u);
          }
        }
        else
        {
          memset(v54, 0, sizeof(v54));
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v54);
          v33 = (_BYTE *)qmi::MutableMessageBase::getTLV<vs::tlv::CallIdentifier>(v54, 1);
          v34 = a2 - 1;
          *v33 = a4;
          if ((a2 - 1) >= 3)
            v34 = -1;
          if (v34 < 3)
            v35 = v34 + 1;
          else
            v35 = 0;
          v36 = qmi::ClientRouter::get();
          qmi::ClientRouter::SendProxy::SendProxy<vs::EndCall::Request>((uint64_t)v52, v35, v36);
          v37 = (std::__shared_weak_count *)operator new(0x20uLL);
          v37->__shared_owners_ = 0;
          v38 = (unint64_t *)&v37->__shared_owners_;
          v37->__shared_weak_owners_ = 0;
          v37->__vftable = (std::__shared_weak_count_vtbl *)&off_24D5DAC08;
          v55 = &v37[1].__vftable;
          v56 = v37;
          v39 = v53;
          v40 = MEMORY[0x24BDAC760];
          __p = (void *)MEMORY[0x24BDAC760];
          v58 = 1174405120;
          v59 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN15EurOTASPService14sendEndcallReqES0_hN10subscriber7SimSlotEE3__0EEOS1_OT__block_invoke;
          v60 = &__block_descriptor_tmp_17_13;
          v61 = &v37[1].__vftable;
          v62 = v37;
          do
            v41 = __ldxr(v38);
          while (__stxr(v41 + 1, v38));
          *(_QWORD *)buf = v40;
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN2vs7EndCall8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
          v64 = &unk_24D5DAC50;
          v65 = &__p;
          *(_QWORD *)(v39 + 32) = _Block_copy(buf);
          v42 = v62;
          if (v62)
          {
            v43 = (unint64_t *)&v62->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v45 = v56;
          if (v56)
          {
            v46 = (unint64_t *)&v56->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = v53;
          v53 = 0;
          if (v48)
            std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v53, v48);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v54);
        }
        if (v51)
        {
          v49 = (unint64_t *)&v51->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
      else if (!*(_BYTE *)(a1 + 79))
      {
        *(_BYTE *)(a1 + 80) = 1;
      }
      *(_BYTE *)(a1 + 84) = 1;
      break;
    case 9:
    case 10:
    case 11:
      return;
    default:
      ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 40));
      v17 = ServiceMap;
      v18 = *(_QWORD *)(MEMORY[0x24BDC3CE8] + 8);
      if (v18 < 0)
      {
        v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
        v20 = 5381;
        do
        {
          v18 = v20;
          v21 = *v19++;
          v20 = (33 * v20) ^ v21;
        }
        while (v21);
      }
      __p = 0;
      v58 = 0;
      std::mutex::lock(ServiceMap);
      *(_QWORD *)&v54[0] = v18;
      v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v17[1].__m_.__sig, (unint64_t *)v54);
      if (v22)
      {
        v24 = (void *)v22[3];
        v23 = (std::__shared_weak_count *)v22[4];
        if (v23)
        {
          v25 = (unint64_t *)&v23->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
      }
      else
      {
        v24 = 0;
        v23 = 0;
      }
      __p = v24;
      v58 = (uint64_t)v23;
      std::mutex::unlock(v17);
      *(_QWORD *)buf = v24;
      *(_QWORD *)&buf[8] = v23;
      if (v23)
      {
        v27 = (unint64_t *)&v23->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)buf + 56))(*(_QWORD *)buf, a5);
      v30 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v31 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96), a5);
      break;
  }
}

void sub_2169D0574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v19;

  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  v19 = a12;
  a12 = 0;
  if (v19)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a12, v19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a13);
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void EurOTASPService::handleNonStdOtaspCallStatusIndication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *ServiceMap;
  std::mutex *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  BOOL v23;
  NSObject *v24;
  uint8_t buf[8];
  std::__shared_weak_count *v26;
  unint64_t v27;

  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 40));
  v7 = ServiceMap;
  v8 = *(_QWORD *)(MEMORY[0x24BDC3CB8] + 8);
  if ((v8 & 0x8000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  *(_QWORD *)buf = 0;
  v26 = 0;
  std::mutex::lock(ServiceMap);
  v27 = v8;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v7[1].__m_.__sig, &v27);
  if (v12)
  {
    v14 = v12[3];
    v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  *(_QWORD *)buf = v14;
  v26 = v13;
  std::mutex::unlock(v7);
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 168))(v14, a3);
  if (v13)
  {
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*(_BYTE *)(a1 + 79))
    v23 = 0;
  else
    v23 = v20 == 1;
  if (v23 && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3))
  {
    *(_BYTE *)(a1 + 79) = 1;
    v24 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_216897000, v24, OS_LOG_TYPE_DEFAULT, "#I Sim has triggered an OTASP", buf, 2u);
    }
  }
}

void sub_2169D07DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<QMIDataContextIPObserver>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t EurOTASPService::handleOtaspCallStatusIndication(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)a1 + 32))(a1, a2 == 9);
}

void EurOTASPService::handleRegistered(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *__p;
  char v16;
  uint8_t buf[4];
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a1 + 81);
  if (a3 == 8)
  {
    *(_BYTE *)(a1 + 76) = 1;
    if (v4)
    {
      v5 = (std::__shared_weak_count *)a2[1];
      v13 = *a2;
      v14 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v13, a4);
      v8 = v14;
      if (v14)
      {
        v9 = (unint64_t *)&v14->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 81))
  {
    v11 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      WirelessTechnologyAsString();
      v12 = v16 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315138;
      v18 = v12;
      _os_log_error_impl(&dword_216897000, v11, OS_LOG_TYPE_ERROR, "Registered, but current technology is %s and not C2K and we don't need to OTASP now. Returning.", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 76) = 1;
  }
}

void sub_2169D0980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void EurOTASPService::~EurOTASPService(EurOTASPService *this)
{
  OTASPService::~OTASPService(this);
  JUMPOUT(0x2199FEAC4);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>,vs::tlv::RemoteNumberListItem*,vs::tlv::RemoteNumberListItem*,vs::tlv::RemoteNumberListItem*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 8);
    do
    {
      v7 = (uint64_t)v6 - 8;
      *(_WORD *)v4 = *((_WORD *)v6 - 4);
      v8 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v14;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 24) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4 += 32;
      v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  LOBYTE(v12) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cat::tlv::Item>,cat::tlv::Item*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

