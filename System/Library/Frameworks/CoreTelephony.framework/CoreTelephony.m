void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void __Block_byref_object_dispose__27(uint64_t a1)
{

}

void __Block_byref_object_dispose__28(uint64_t a1)
{

}

void __Block_byref_object_dispose__29(uint64_t a1)
{

}

void __Block_byref_object_dispose__30(uint64_t a1)
{

}

void __Block_byref_object_dispose__31(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t MCC::getIntValue(MCC *this)
{
  return this->var0;
}

void __destroy_helper_block_ea8_40c21_ZTSN8dispatch5queueE(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 40);
  if (v1)
    dispatch_release(v1);
}

void __copy_helper_block_ea8_40c21_ZTSN8dispatch5queueE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    dispatch_retain(v3);
}

void sub_18425E2A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18425E330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18425E3A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18425E598(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18425E5F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CTServerState *sConnectionStateDelete(CTServerState *result)
{
  if (result)
  {
    CTServerState::~CTServerState(result);
    JUMPOUT(0x186DBA454);
  }
  return result;
}

void CTServerState::~CTServerState(CTServerState *this)
{
  const void *v2;
  const void *v3;
  NSObject *v4;

  v2 = (const void *)*((_QWORD *)this + 15);
  if (v2)
    _Block_release(v2);
  v3 = (const void *)*((_QWORD *)this + 14);
  if (v3)
    _Block_release(v3);
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  std::unique_ptr<ctu::OsLogLogger>::reset[abi:nn180100]((uint64_t *)this + 10, 0);
  std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  v4 = *((_QWORD *)this + 1);
  if (v4)
    dispatch_release(v4);
  xpc_release(*(xpc_object_t *)this);
  *(_QWORD *)this = 0;
}

void ___ZL26_CTServerConnectionDestroyPKv_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  xpc_object_t *v4;
  xpc_object_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD *v14;
  _QWORD *v15;
  xpc_object_t v16;
  void **v17;
  xpc_object_t v18;
  void *v19;
  _QWORD barrier[4];
  xpc_object_t object;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (const void *)v2[3];
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = 0;
    v2 = *(_QWORD **)(a1 + 32);
  }
  if (MEMORY[0x186DBAE5C](*v2) == MEMORY[0x1E0C812E0])
  {
    v4 = *(xpc_object_t **)(a1 + 32);
    v5 = *v4;
    if (*v4)
      xpc_retain(*v4);
    else
      v5 = xpc_null_create();
    barrier[0] = MEMORY[0x1E0C809B0];
    barrier[1] = 1174405120;
    barrier[2] = ___ZL26_CTServerConnectionDestroyPKv_block_invoke_3;
    barrier[3] = &__block_descriptor_tmp_51;
    object = v5;
    if (v5)
      xpc_retain(v5);
    else
      object = xpc_null_create();
    xpc_connection_send_barrier((xpc_connection_t)v5, barrier);
    xpc_release(object);
    object = 0;
    xpc_release(v5);
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 120);
  if (v7)
  {
    CTServerState::dispatchToClient_sync(v6, v7);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(const void **)(v8 + 120);
    *(_QWORD *)(v8 + 120) = 0;
    if (v9)
      _Block_release(v9);
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(const void **)(v10 + 112);
  *(_QWORD *)(v10 + 112) = 0;
  if (v11)
    _Block_release(v11);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(NSObject **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = 0;
  if (v13)
    dispatch_release(v13);
  v14 = *(_QWORD **)(a1 + 32);
  v15 = (_QWORD *)v14[5];
  v14 += 5;
  std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::destroy((uint64_t)(v14 - 1), v15);
  *(v14 - 1) = v14;
  *v14 = 0;
  v14[1] = 0;
  v16 = xpc_null_create();
  v17 = *(void ***)(a1 + 32);
  v18 = xpc_null_create();
  v19 = *v17;
  *v17 = v16;
  xpc_release(v19);
  xpc_release(v18);
}

void std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  const void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::destroy(a1, a2[1]);
    v4 = (const void *)a2[5];
    if (v4)
      _Block_release(v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer})(xpc::dict)>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_QWORD *_CTServerConnectionCreateWithIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD aBlock[7];
  std::string v26;
  __int128 v27;
  uint64_t v28;

  memset(&v26, 0, sizeof(v26));
  if (a2)
  {
    v27 = 0uLL;
    v28 = 0;
    ctu::cf::assign();
    memset(&v26, 0, sizeof(v26));
  }
  else
  {
    v7 = (char *)getprogname();
    std::string::basic_string[abi:nn180100]<0>(&v26, v7);
  }
  v8 = sCTServerConnectionCreate(a1, &v26, 0);
  v9 = (_QWORD *)v8;
  if (v8)
  {
    if (a4)
    {
      v10 = a4[1];
      if (v10)
      {
        v11 = (uint64_t (*)(_QWORD))a4[2];
        if (v11)
          v10 = v11(a4[1]);
      }
      v12 = MEMORY[0x1E0C809B0];
      if (a3)
      {
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 0x40000000;
        aBlock[2] = ___CTServerConnectionCreateWithIdentifier_block_invoke;
        aBlock[3] = &__block_descriptor_tmp_23_0;
        aBlock[4] = a3;
        aBlock[5] = v9;
        aBlock[6] = v10;
        v13 = _Block_copy(aBlock);
        v14 = v9[3];
        v15 = *(const void **)(v14 + 112);
        *(_QWORD *)(v14 + 112) = v13;
        if (v15)
          _Block_release(v15);
      }
      if (!v10)
        goto LABEL_19;
      v16 = a4[3];
      if (!v16)
        goto LABEL_19;
      v24[0] = v12;
      v24[1] = 0x40000000;
      v24[2] = ___CTServerConnectionCreateWithIdentifier_block_invoke_2;
      v24[3] = &__block_descriptor_tmp_24;
      v24[4] = v16;
      v24[5] = v10;
      v17 = _Block_copy(v24);
      v18 = v9[3];
      v19 = *(const void **)(v18 + 120);
      *(_QWORD *)(v18 + 120) = v17;
      if (!v19)
        goto LABEL_19;
    }
    else
    {
      if (!a3)
        goto LABEL_19;
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 0x40000000;
      v23[2] = ___CTServerConnectionCreateWithIdentifier_block_invoke_3;
      v23[3] = &__block_descriptor_tmp_25;
      v23[4] = a3;
      v23[5] = v8;
      v20 = _Block_copy(v23);
      v21 = v9[3];
      v19 = *(const void **)(v21 + 112);
      *(_QWORD *)(v21 + 112) = v20;
      if (!v19)
        goto LABEL_19;
    }
    _Block_release(v19);
LABEL_19:
    sCTServerConnectionStart(v9);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v9;
}

_QWORD *_CTServerConnectionCreateOnTargetQueue(uint64_t a1, uint64_t a2, NSObject *a3, const void *a4)
{
  _QWORD *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  NSObject *v13;
  std::string __p;
  __int128 v16;
  uint64_t v17;

  if (!a3)
    return 0;
  memset(&__p, 0, sizeof(__p));
  if (a2)
  {
    v16 = 0uLL;
    v17 = 0;
    ctu::cf::assign();
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    v8 = (char *)getprogname();
    std::string::basic_string[abi:nn180100]<0>(&__p, v8);
  }
  v7 = (_QWORD *)sCTServerConnectionCreate(a1, &__p, 0);
  if (v7)
  {
    if (a4)
      v9 = _Block_copy(a4);
    else
      v9 = 0;
    v10 = v7[3];
    v11 = *(const void **)(v10 + 112);
    *(_QWORD *)(v10 + 112) = v9;
    if (v11)
      _Block_release(v11);
    dispatch_retain(a3);
    v12 = v7[3];
    v13 = *(NSObject **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = a3;
    if (v13)
      dispatch_release(v13);
    sCTServerConnectionStart(v7);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

uint64_t sCTServerConnectionCreate(uint64_t a1, const std::string *a2, char a3)
{
  uint64_t Instance;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  ctu::OsLogLogger *v9;
  CFTypeRef v10;
  uint64_t (*v11)(uint64_t);
  CFTypeID v12;
  CFTypeID TypeID;
  CFComparisonResult v14;
  CFComparisonResult v15;
  CFComparisonResult v16;
  uint64_t v18;
  CFTypeRef cf;

  if (sFrameworkInit != -1)
    dispatch_once_f(&sFrameworkInit, 0, (dispatch_function_t)sInitializeCTFrameworkStuff);
  Instance = _CFRuntimeCreateInstance();
  v6 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_QWORD *)(Instance + 16) = dispatch_queue_create("CTServerConnection.callback", 0);
    v7 = operator new();
    v8 = xpc_null_create();
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)v7 = v8;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = v7 + 40;
    *(_QWORD *)(v7 + 72) = 0;
    *(_QWORD *)(v7 + 64) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = v7 + 64;
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 112) = 0u;
    *(_QWORD *)(v7 + 128) = 0;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_BYTE *)(v7 + 136) = 1;
    *(_DWORD *)(v7 + 140) = 0;
    *(_DWORD *)(v7 + 137) = 0;
    *(_BYTE *)(v7 + 144) = a3;
    *(_QWORD *)(v6 + 24) = v7;
    dispatch_set_context(*(dispatch_object_t *)(v6 + 16), (void *)v7);
    dispatch_set_finalizer_f(*(dispatch_object_t *)(v6 + 16), (dispatch_function_t)sConnectionStateDelete);
    *(_QWORD *)(v7 + 128) = v6;
    std::string::operator=((std::string *)(v7 + 88), a2);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    v9 = (ctu::OsLogLogger *)operator new();
    ctu::OsLogLogger::OsLogLogger(v9, "com.apple.CTServerConnection", (const char *)a2);
    std::unique_ptr<ctu::OsLogLogger>::reset[abi:nn180100]((uint64_t *)(v7 + 80), (uint64_t)v9);
    cf = 0;
    v18 = MGCopyAnswer();
    ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&cf, (CFTypeRef *)&v18);
    v10 = cf;
    v11 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    if (!cf)
      v11 = 0;
    if (v11)
    {
      v12 = CFGetTypeID(cf);
      TypeID = CFStringGetTypeID();
      v10 = cf;
      if (v12 == TypeID)
      {
        v14 = CFStringCompare((CFStringRef)cf, CFSTR("iPhone"), 0);
        v10 = cf;
        if (v14
          && (v15 = CFStringCompare((CFStringRef)cf, CFSTR("iPod"), 0), v10 = cf, v15)
          && (v16 = CFStringCompare((CFStringRef)cf, CFSTR("iPad"), 0), v10 = cf, v16))
        {
          LOBYTE(v11) = CFStringCompare((CFStringRef)cf, CFSTR("Watch"), 0) == kCFCompareEqualTo;
          v10 = cf;
        }
        else
        {
          LOBYTE(v11) = 1;
        }
      }
      else
      {
        LOBYTE(v11) = 0;
      }
    }
    *(_BYTE *)(v7 + 136) = (_BYTE)v11;
    if (v10)
      CFRelease(v10);
  }
  return v6;
}

_QWORD *ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v4;
  CFTypeID v5;

  v4 = *a2;
  if (*a2 && (v5 = CFGetTypeID(*a2), v5 == CFStringGetTypeID()))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    if (*a2)
      CFRelease(*a2);
  }
  return a1;
}

{
  CFTypeRef v3;
  CFTypeID v4;

  v3 = *a2;
  if (*a2 && (v4 = CFGetTypeID(*a2), v4 == CFStringGetTypeID()))
  {
    *a1 = v3;
    CFRetain(v3);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sCTServerConnectionStart(_QWORD *a1)
{
  xpc_connection_t *v2;
  NSObject *v3;
  __CFNotificationCenter *LocalCenter;
  _QWORD v5[6];

  v2 = (xpc_connection_t *)a1[3];
  v3 = a1[2];
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___Z24sCTServerConnectionStartP20__CTServerConnection_block_invoke;
  v5[3] = &__block_descriptor_tmp_18;
  v5[4] = a1;
  v5[5] = v2;
  _CTServerConnectXpc_sync(v2, v3, (uint64_t)v5);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a1, (CFNotificationCallback)DispatchReEstablish, CFSTR("kCTDaemonReadyLocalNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void _CTServerConnectXpc_sync(xpc_connection_t *a1, NSObject *a2, uint64_t a3)
{
  _xpc_connection_s *mach_service;
  xpc_object_t v6;
  xpc_connection_t v7;
  _xpc_connection_s *v8;
  _QWORD handler[5];

  mach_service = xpc_connection_create_mach_service("com.apple.commcenter.xpc", a2, 2uLL);
  if (!mach_service)
    mach_service = (_xpc_connection_s *)xpc_null_create();
  v6 = xpc_null_create();
  v7 = *a1;
  *a1 = mach_service;
  xpc_release(v7);
  xpc_release(v6);
  v8 = *a1;
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = ___ZL24_CTServerConnectXpc_syncP13CTServerStateP16dispatch_queue_sU13block_pointerFvvE_block_invoke;
  handler[3] = &__block_descriptor_tmp_57;
  handler[4] = a1;
  xpc_connection_set_event_handler(v8, handler);
  if (a3)
    (*(void (**)(uint64_t))(a3 + 16))(a3);
  xpc_connection_resume(*a1);
}

xpc_object_t ___Z24sCTServerConnectionStartP20__CTServerConnection_block_invoke(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = **(_QWORD **)(a1 + 40);
  return xpc_retain(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 40));
}

void sub_18425F040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18425F264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object, uint64_t a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18425F31C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<-[CoreTelephonyClientMux sink:handleNotification:]::$_2>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

id `anonymous namespace'::sCopyInvocationShallow(_anonymous_namespace_ *this, NSInvocation *a2)
{
  _anonymous_namespace_ *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t i;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v2 = this;
  v3 = (void *)-[_anonymous_namespace_ copy](v2, "copy");
  -[_anonymous_namespace_ methodSignature](v2, "methodSignature");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "numberOfArguments");
  v6 = objc_msgSend(v4, "frameLength");
  if (v5)
  {
    v7 = v6;
    for (i = 0; i != v5; ++i)
    {
      MEMORY[0x1E0C80A78]();
      bzero((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      -[_anonymous_namespace_ getArgument:atIndex:](v2, "getArgument:atIndex:", (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), i);
      objc_msgSend(v3, "setArgument:atIndex:", (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), i);
    }
  }

  return v3;
}

void sub_18425F440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18425F630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18425F774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_18425F900(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__emplace_hint_unique_key_args<objc_selector *,std::pair<objc_selector * const,objc_selector *> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, _OWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v6 = (void **)std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__find_equal<objc_selector *>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_QWORD *std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__find_equal<objc_selector *>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_184260128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, id *a16, uint64_t a17, uint64_t a18, dispatch_object_t object, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  *(_QWORD *)(v28 - 96) = &a25;
  std::vector<Protocol * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)(v28 - 96));

  a25 = &a22;
  std::vector<Protocol * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)&a25);

  objc_destroyWeak(a16);
  if (object)
    dispatch_release(object);

  std::unique_ptr<-[CoreTelephonyClientMux addDelegate:queue:]::$_0>::~unique_ptr[abi:nn180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Protocol * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1842604B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184260674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t CTLogClient()
{
  if (CTLogClient_once != -1)
    dispatch_once(&CTLogClient_once, &__block_literal_global_12);
  return CTLogClient_logger;
}

uint64_t isFrameworkLoggingSupported()
{
  if (isFrameworkLoggingSupported_once != -1)
    dispatch_once(&isFrameworkLoggingSupported_once, &__block_literal_global_1);
  return isFrameworkLoggingSupported_supported;
}

void sub_18426090C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18426098C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN8dispatch9sync_implIZ54__CoreTelephonyClientMux_proxyWithQueue_errorHandler__E3__3EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  CoreTelephonyClientRemoteAsyncProxy *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  dispatch_object_t object;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(**(id **)v1, "_setReconnectError_sync:", 0);
  objc_msgSend(**(id **)v1, "_ensureConnectionSetup_sync");
  v2 = [CoreTelephonyClientRemoteAsyncProxy alloc];
  v3 = *(_QWORD *)(**(_QWORD **)v1 + 72);
  v4 = **(NSObject ***)(v1 + 16);
  object = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = -[CoreTelephonyClientRemoteAsyncProxy initWithXPCObject:userQueue:errorHandler:](v2, "initWithXPCObject:userQueue:errorHandler:", v3, &object, **(_QWORD **)(v1 + 24));
  v6 = *(void ***)(v1 + 8);
  v7 = *v6;
  *v6 = (void *)v5;

  if (object)
    dispatch_release(object);
}

void sub_184260A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void ___ZN8dispatch9sync_implIZ59__CoreTelephonyClientMux_synchronousProxyWithErrorHandler__E3__4EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)v1, "_setReconnectError_sync:", 0);
  v2 = (void *)MEMORY[0x186DBA8B0](objc_msgSend(*(id *)v1, "_ensureConnectionSetup_sync"));
  v3 = *(void **)(*(_QWORD *)v1 + 72);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZZ59__CoreTelephonyClientMux_synchronousProxyWithErrorHandler__ENK3__4clEv_block_invoke;
  v7[3] = &unk_1E152DA48;
  v8 = *(id *)(v1 + 16);
  objc_msgSend(v3, "synchronousRemoteObjectProxyWithErrorHandler:", v7);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(void ***)(v1 + 8);
  v6 = *v5;
  *v5 = (void *)v4;

  objc_autoreleasePoolPop(v2);
}

void sub_184260B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_184260C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184261224(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 88));

  _Unwind_Resume(a1);
}

void sub_184261320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184261850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CTTelephonyNetworkInfo;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1842618D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CoreTelephonyClient;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_184261F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, xpc_object_t object, xpc_object_t a14)
{
  xpc_release(object);
  xpc_release(a14);
  _Unwind_Resume(a1);
}

const char *CTSubscriptionSlotAsString(uint64_t a1)
{
  const char *v1;

  v1 = "CTSubscriptionSlotUnknown";
  if (a1 == 2)
    v1 = "CTSubscriptionSlotTwo";
  if (a1 == 1)
    return "CTSubscriptionSlotOne";
  else
    return v1;
}

uint64_t CTLogMessageCenter()
{
  if (CTLogMessageCenter_once != -1)
    dispatch_once(&CTLogMessageCenter_once, &__block_literal_global_21);
  return CTLogMessageCenter_logger;
}

void sub_18426225C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18426255C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184262DAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18426307C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

const char *indicatorToString(unsigned int a1)
{
  if (a1 > 0x12)
    return "unknown";
  else
    return off_1E1530110[a1];
}

const char *dataModeToString(int a1)
{
  if ((a1 + 2) > 0x14)
    return "Unknown";
  else
    return off_1E15301A8[a1 + 2];
}

uint64_t MCC::operator=(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  return a1;
}

void MCC::MCC(MCC *this, const MCC *a2)
{
  std::string *p_var1;
  __int128 v3;

  this->var0 = a2->var0;
  p_var1 = (std::string *)&this->var1;
  if (*((char *)&a2->var1.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(p_var1, a2->var1.var0.var0.var0.var1.var0, a2->var1.var0.var0.var0.var1.var1);
  }
  else
  {
    v3 = *(_OWORD *)a2->var1.var0.var0.var0.var0.var0;
    p_var1->__r_.__value_.__r.__words[2] = *((_QWORD *)&a2->var1.var0.var0.var0.var1 + 2);
    *(_OWORD *)&p_var1->__r_.__value_.__l.__data_ = v3;
  }
}

{
  std::string *p_var1;
  __int128 v3;

  this->var0 = a2->var0;
  p_var1 = (std::string *)&this->var1;
  if (*((char *)&a2->var1.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(p_var1, a2->var1.var0.var0.var0.var1.var0, a2->var1.var0.var0.var0.var1.var1);
  }
  else
  {
    v3 = *(_OWORD *)a2->var1.var0.var0.var0.var0.var0;
    p_var1->__r_.__value_.__r.__words[2] = *((_QWORD *)&a2->var1.var0.var0.var0.var1 + 2);
    *(_OWORD *)&p_var1->__r_.__value_.__l.__data_ = v3;
  }
}

void MCC::MCC(MCC *this)
{
  this->var0 = -1;
  *(_OWORD *)&this->var1.var0.var0.var0.var1.var1 = 0uLL;
  this->var1.var0.var0.var0.var1.var0 = 0;
}

{
  this->var0 = -1;
  *(_OWORD *)&this->var1.var0.var0.var0.var1.var1 = 0uLL;
  this->var1.var0.var0.var0.var1.var0 = 0;
}

void MNC::MNC(MNC *this)
{
  *(_WORD *)this = -1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
}

{
  *(_WORD *)this = -1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
}

void sub_184264128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_184264234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1842643EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_184264544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1842645F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  void *v10;

  if (object)
    dispatch_release(object);

  _Unwind_Resume(a1);
}

void sub_184264834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184264B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184264D28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

__CFString *`anonymous namespace'::sRadioAccessTechnologyFromDataMode(int a1)
{
  if ((a1 - 1) > 0x10)
    return 0;
  else
    return off_1E1530C70[a1 - 1];
}

void sub_184264FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

void sub_184265474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;

  if (v14)

  _Unwind_Resume(a1);
}

void sub_184265634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (a15 < 0)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1842656E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184265740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842657C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::reserve(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer begin;
  std::vector<char>::pointer end;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;

  begin = this->__begin_;
  if (this->__end_cap_.__value_ - this->__begin_ < __n)
  {
    if ((__n & 0x8000000000000000) != 0)
      abort();
    end = this->__end_;
    v6 = (char *)operator new(__n);
    v7 = &v6[end - begin];
    v8 = v7;
    if (end != begin)
    {
      v9 = &end[~(unint64_t)begin];
      do
      {
        v10 = *--end;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (end != begin);
      v8 = v6;
    }
    this->__begin_ = v8;
    this->__end_ = v7;
    this->__end_cap_.__value_ = &v6[__n];
    if (begin)
      operator delete(begin);
  }
}

void sub_1842659F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_184265B2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184265C6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184265DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184265E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184265F50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18426633C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTSubscriptionSlotAsUUID(char a1)
{
  _BYTE v2[16];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  memset(v2, 0, 15);
  v2[15] = a1;
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", v2);
}

void sub_18426650C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184266594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18426676C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_184266964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_184266B20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184266BD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184266C2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184266D4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184266E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184266FE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184267144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18426724C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t CTLogNetworkInfo()
{
  if (CTLogNetworkInfo_once != -1)
    dispatch_once(&CTLogNetworkInfo_once, &__block_literal_global_3);
  return CTLogNetworkInfo_logger;
}

void sub_184267438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184267558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842676B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

BOOL MNC::isThreeDigit(MNC *this)
{
  uint64_t v1;

  if (*((char *)this + 31) < 0)
    v1 = *((_QWORD *)this + 2);
  else
    v1 = *((unsigned __int8 *)this + 31);
  return v1 == 3;
}

void __isFrameworkLoggingSupported_block_invoke()
{
  isFrameworkLoggingSupported_supported = 1;
}

void __destroy_helper_block_8_32c74_ZTSN8dispatch5blockIU13block_pointerFvPK10__CFStringPK14__CFDictionaryEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void __destroy_helper_block_8_40c21_ZTSN8dispatch5queueE(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 40);
  if (v1)
    dispatch_release(v1);
}

void sub_1842679FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZZ44__CoreTelephonyClientMux_addDelegate_queue__ENK3__0clEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  if (v2)
  {
    if (isFrameworkLoggingSupported())
    {
      v3 = CTLogClient();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        ___ZZ44__CoreTelephonyClientMux_addDelegate_queue__ENK3__0clEv_block_invoke_cold_1();
    }
  }

}

void sub_184267A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184267B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void __copy_helper_block_8_40c21_ZTSN8dispatch5queueE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    dispatch_retain(v3);
}

_QWORD *_CTServerConnectionCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return _CTServerConnectionCreateWithIdentifier(a1, 0, a2, a3);
}

void __destroy_helper_block_8_48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t MCC::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  if (*a1 != *a2)
    return 0;
  v2 = *((unsigned __int8 *)a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)a1 + 31);
  else
    v3 = *((_QWORD *)a1 + 2);
  v4 = *((unsigned __int8 *)a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 2);
  if (v3 != v4)
    return 0;
  v6 = (const void **)(a1 + 4);
  v9 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v7 = (unsigned __int8 *)(a2 + 4);
  v8 = v9;
  if (v5 < 0)
    v7 = v8;
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, v7, *((_QWORD *)a1 + 2)) == 0;
  if (!*((_BYTE *)a1 + 31))
    return 1;
  v10 = v2 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v11 = v12;
    v14 = *v7++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

void *__copy_helper_block_8_32c74_ZTSN8dispatch5blockIU13block_pointerFvPK10__CFStringPK14__CFDictionaryEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void ___ZL26_CTServerConnectionDestroyPKv_block_invoke(uint64_t a1)
{
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
  xpc_release(*(xpc_object_t *)(a1 + 32));
}

uint64_t **std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void CSIPhoneNumber::CSIPhoneNumber(CSIPhoneNumber *this)
{
  CSIPhoneNumber::CSIPhoneNumber(this, "");
}

{
  CSIPhoneNumber::CSIPhoneNumber(this, "");
}

void sub_184267F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18426809C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionGetCarrierEntitlements(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  const object *v5;
  xpc_object_t object[2];
  xpc_object_t v8;
  CFTypeRef cf;
  uint64_t v10;
  xpc_object_t xdict;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetEntitlements", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v12 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v12, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kCarrierEntitlementResults"))
    {
      v10 = 0;
      object[0] = &xdict;
      object[1] = "kCarrierEntitlementResults";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      xpc::bridge((xpc *)&v8, v5);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v10, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v8);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

_QWORD *ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  CFTypeID v4;

  v3 = *a2;
  if (*a2 && (v4 = CFGetTypeID(*a2), v4 == CFDictionaryGetTypeID()))
  {
    *a1 = v3;
    CFRetain(v3);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

{
  CFTypeRef v4;
  CFTypeID v5;

  v4 = *a2;
  if (*a2 && (v5 = CFGetTypeID(*a2), v5 == CFDictionaryGetTypeID()))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    if (*a2)
      CFRelease(*a2);
  }
  return a1;
}

uint64_t _CTServerConnectionIsUserIdentityModuleRequired(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierSettingsIsUimRequired", object, "kRequest", &v8);
    xpc_release(object[0]);
    v9 = v8;
    v8 = xpc_null_create();
    xpc_release(v8);
    v8 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v9, &v8);
    if (MEMORY[0x186DBAE5C](v8) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v8;
      object[1] = "kCarrierSettingsIsUimRequired";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, (const object *)1);
      xpc_release(v7);
    }
    else
    {
      *a2 = 1;
    }
    xpc_release(v8);
    xpc_release(v9);
  }
  return v2;
}

void sub_18426855C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12)
{
  void *v12;

  xpc_release(object);
  xpc_release(a12);
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void sInitializeCTFrameworkStuff(void *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  _CTServerConnectionTypeID = _CFRuntimeRegisterClass();
  CCMonitor::instance(&v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

unint64_t _CTServerConnectionCopyDualSimCapability(uint64_t a1, CFNumberRef *a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v6;
  xpc_object_t object[2];
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  v2 = 0x1600000000;
  v3 = 1;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSubscriberGetDualSimCapability", object, "kRequest", &v10);
    xpc_release(object[0]);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    v10 = xpc_null_create();
    v6 = SendXpcMessage(a1, &v11, &v10);
    if (HIDWORD(v6))
    {
      v3 = v6;
      v2 = v6 & 0xFFFFFFFF00000000;
    }
    else if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v10;
      object[1] = "kSubscriberDualSimCapabilityKey";
      v9 = 0;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      if (MEMORY[0x186DBAE5C](v9) == MEMORY[0x1E0C81350])
      {
        v2 = 0x2300000000;
        v3 = 1;
      }
      else
      {
        LODWORD(object[0]) = xpc::dyn_cast_or_default((xpc *)&v9, (const object *)4);
        v3 = 0;
        v2 = 0;
        *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, object);
      }
      xpc_release(v9);
    }
    else
    {
      v2 = 0x500000000;
      v3 = 1;
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2 | v3;
}

unint64_t `anonymous namespace'::GetRadioModuleProperty<unsigned char>(uint64_t a1, const char *a2, _BYTE *a3)
{
  unsigned int v3;
  unint64_t v4;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  unint64_t v11;
  int v12;
  xpc_object_t object;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;

  v3 = 1;
  LODWORD(v4) = 22;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioModuleGetProperty", &object, "kRequest", &v17);
    xpc_release(object);
    v8 = v17;
    v18 = v17;
    v17 = xpc_null_create();
    xpc_release(v17);
    v9 = xpc_int64_create(*a3);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v8, a2, v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v17 = xpc_null_create();
    v11 = SendXpcMessage(a1, &v18, &v17);
    v3 = v11;
    v4 = HIDWORD(v11);
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](v17) == MEMORY[0x1E0C812F8])
    {
      object = &v17;
      v15 = "kRadioModuleValid";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v16);
      v12 = xpc::dyn_cast_or_default((xpc *)&v16, 0);
      xpc_release(v16);
      if (v12)
      {
        object = &v17;
        v15 = a2;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v16);
        *a3 = xpc::dyn_cast_or_default((xpc *)&v16, 0);
        xpc_release(v16);
      }
      else
      {
        v3 = 1;
        LODWORD(v4) = 45;
      }
    }
    xpc_release(v17);
    xpc_release(v18);
  }
  return v3 | ((unint64_t)v4 << 32);
}

uint64_t _CTServerConnectionGetCDRXWithLTEState(uint64_t a1, __CFString **a2)
{
  uint64_t v2;
  int v5;
  xpc_object_t object[2];
  xpc_object_t v8;
  xpc_object_t xdict;
  xpc_object_t v10;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetLTEWithCDRXState", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v10 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v10, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kLTEWithCDRXState"))
    {
      object[1] = "kLTEWithCDRXState";
      v8 = 0;
      object[0] = &xdict;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      v5 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      *a2 = lteWithCDRXStateAsString(v5);
      xpc_release(v8);
    }
    xpc_release(xdict);
    xpc_release(v10);
  }
  return v2;
}

__CFString *lteWithCDRXStateAsString(int a1)
{
  __CFString **v1;
  __CFString **v2;

  v1 = kCTLTEWithCDRXStateOff;
  v2 = kCTLTEWithCDRXStateOn;
  if (a1)
    v2 = kCTLTEWithCDRXStateUnknown;
  if (a1 != 1)
    v1 = v2;
  return *v1;
}

uint64_t _CTServerConnectionVerifyCarrierEntitlements(uint64_t a1, ctu *a2)
{
  uint64_t v2;
  xpc_object_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v12;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsQueryEntitlements", &object, "kRequest", &v12);
    xpc_release(object);
    v5 = v12;
    object = v12;
    v12 = xpc_null_create();
    xpc_release(v12);
    ctu::cf_to_xpc(a2, v6);
    xpc_dictionary_set_value(v5, "kCarrierEntitlementsEntitlements", value);
    v7 = value;
    valuea = xpc_null_create();
    xpc_release(v7);
    xpc_release(valuea);
    v2 = SendXpcMessage(a1, &object, 0, v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionSetActiveAudioSystemConfiguration(uint64_t a1, void *a2)
{
  uint64_t v2;
  xpc_object_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v12;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSetActiveAudioSystemConfiguration", &object, "kRequest", &v12);
    xpc_release(object);
    v5 = v12;
    object = v12;
    v12 = xpc_null_create();
    xpc_release(v12);
    CFRetain(a2);
    ctu::cf_to_xpc((ctu *)a2, v6);
    xpc_dictionary_set_value(v5, "kAudioIOState", value);
    v7 = value;
    valuea = xpc_null_create();
    xpc_release(v7);
    xpc_release(valuea);
    v2 = SendXpcMessage(a1, &object, 0, v8);
    CFRelease(a2);
    xpc_release(object);
  }
  return v2;
}

uint64_t SendXpcMessage(uint64_t a1, xpc_object_t *a2, uint64_t a3, uint64_t a4)
{
  return SendXpcMessageIf(*(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 136), a1, a2, a4, 1);
}

uint64_t _CTServerConnectionCopyDataStatus(const void *a1, int a2, const __CFDictionary **a3)
{
  uint64_t v3;
  xpc_object_t *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  const __CFDictionary *v10;
  NSObject *v11;
  _BOOL4 v12;
  const __CFDictionary *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  size_t count;
  unint64_t v19;
  uint64_t i;
  const __CFAllocator *v21;
  CFIndex v22;
  const __CFDictionary *v23;
  xpc_object_t *v24;
  const void *v25;
  uint64_t (*v26)(uint64_t);
  const __CFDictionary *MutableCopy;
  const __CFDictionary *v28;
  uint64_t (*v29)(uint64_t);
  const void *Value;
  const void *v31;
  CFTypeID v32;
  const void *v33;
  const void *v34;
  const void *v35;
  CFTypeID v36;
  const void *v37;
  __CFString **v38;
  xpc_object_t object;
  xpc_object_t v40;
  xpc_object_t xdict;
  xpc_object_t values[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[32];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  xpc_object_t v57[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = 0x1600000001;
  if (a1 && a3)
  {
    v7 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)v57);
    xpc::dict_creator::operator()<char const*>("kGetDataStatus", v7, "kRequest", (xpc_object_t *)buf);
    xpc_release(v57[0]);
    xdict = *(xpc_object_t *)buf;
    *(_QWORD *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    v8 = xpc_int64_create(a2);
    if (!v8)
      v8 = xpc_null_create();
    xpc_dictionary_set_value(xdict, "kPacketContextIdentifer", v8);
    v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    v40 = xpc_null_create();
    v3 = SendXpcMessage((uint64_t)a1, &xdict, &v40);
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)v57 = 0u;
    v58 = 0u;
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](v40) == MEMORY[0x1E0C812F8])
    {
      object = 0;
      *(_QWORD *)buf = &v40;
      *(_QWORD *)&buf[8] = "kGetDataStatusInfo";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &object);
      if (MEMORY[0x186DBAE5C](object) == MEMORY[0x1E0C812C8])
      {
        count = xpc_array_get_count(object);
        if (count)
        {
          v19 = count;
          for (i = 0; i != v19; ++i)
          {
            *(_QWORD *)buf = &object;
            *(_QWORD *)&buf[8] = i;
            xpc::array::object_proxy::operator xpc::object((uint64_t)buf, values);
            v57[i] = (xpc_object_t)xpc::dyn_cast_or_default((xpc *)values, 0);
            xpc_release(values[0]);
          }
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          memset(buf, 0, sizeof(buf));
          v49 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          *(_OWORD *)values = 0u;
          v21 = CFGetAllocator(a1);
          v22 = _FillDictionaryKeysAndValuesForDataStatus(v21, v19, (uint64_t *)v57, (const __CFString **)buf, (CFNumberRef *)values);
          v23 = CFDictionaryCreate(v21, (const void **)buf, (const void **)values, v22, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v22)
          {
            v24 = values;
            do
            {
              v25 = *v24++;
              CFRelease(v25);
              --v22;
            }
            while (v22);
          }
          v26 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!v23)
            v26 = 0;
          if (v26)
          {
            MutableCopy = CFDictionaryCreateMutableCopy(v21, 0, v23);
            v28 = MutableCopy;
            v29 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
            if (!MutableCopy)
              v29 = 0;
            if (v29)
            {
              Value = CFDictionaryGetValue(MutableCopy, CFSTR("kCTRegistrationDataActive"));
              if (Value)
              {
                v31 = Value;
                v32 = CFGetTypeID(Value);
                if (v32 == CFBooleanGetTypeID())
                  v33 = v31;
                else
                  v33 = 0;
              }
              else
              {
                v33 = 0;
              }
              v34 = CFDictionaryGetValue(v28, CFSTR("kCTRegistrationDataAttached"));
              if (v34)
              {
                v35 = v34;
                v36 = CFGetTypeID(v34);
                if (v36 == CFBooleanGetTypeID())
                  v37 = v35;
                else
                  v37 = 0;
              }
              else
              {
                v37 = 0;
              }
              if (v37 == (const void *)*MEMORY[0x1E0C9AE50])
                v38 = kCTRegistrationDataStatusAttached;
              else
                v38 = kCTRegistrationDataStatusUnattached;
              if (v33 == (const void *)*MEMORY[0x1E0C9AE50])
                v38 = kCTRegistrationDataStatusAttachedAndActive;
              CFDictionaryAddValue(v28, CFSTR("kCTRegistrationDataStatus"), *v38);
              *a3 = v28;
            }
            else if (MutableCopy)
            {
              CFRelease(MutableCopy);
            }
          }
          if (v23)
            CFRelease(v23);
        }
      }
      xpc_release(object);
    }
    v10 = *a3;
    v11 = CTLogPacket();
    v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v12)
      {
        v13 = *a3;
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = a2;
        *(_WORD *)&buf[8] = 2112;
        *(_QWORD *)&buf[10] = v13;
        v14 = "Calling _CTServerConnectionCopyDataStatus(): for %d: Data status: %@";
        v15 = v11;
        v16 = 18;
LABEL_13:
        _os_log_impl(&dword_18425C000, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
      }
    }
    else if (v12)
    {
      *(_WORD *)buf = 0;
      v14 = "Calling _CTServerConnectionCopyDataStatus(): Missing data status";
      v15 = v11;
      v16 = 2;
      goto LABEL_13;
    }
    xpc_release(v40);
    xpc_release(xdict);
  }
  return v3;
}

xpc_object_t xpc::array::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t result;

  value = xpc_array_get_value(**(xpc_object_t **)a1, *(_QWORD *)(a1 + 8));
  *a2 = value;
  if (value)
    return xpc_retain(value);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t CTCellularDataPlanGetIsEnabled()
{
  uint64_t Default;
  unsigned __int8 v2;

  Default = CTTelephonyCenterGetDefault();
  v2 = 1;
  _CTServerConnectionGetCellularDataIsEnabled(Default, &v2);
  return v2;
}

uint64_t _CTServerConnectionGetCellularDataIsEnabled(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", object, "kRequest", &v13);
    xpc_release(object[0]);
    v5 = v13;
    v14 = v13;
    v13 = xpc_null_create();
    xpc_release(v13);
    v6 = xpc_BOOL_create(0);
    if (!v6)
      v6 = xpc_null_create();
    xpc_dictionary_set_value(v5, "kEnableCellularData", v6);
    v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    v13 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v14, &v13);
    if (MEMORY[0x186DBAE5C](v13) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v13;
      object[1] = "kEnableCellularData";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v12, 0);
      xpc_release(v12);
      v9 = CTLogPacket();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *a2;
        LODWORD(object[0]) = 67109120;
        HIDWORD(object[0]) = v10;
        _os_log_impl(&dword_18425C000, v9, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetCellularDataIsEnabled(): isEnabled = %d", (uint8_t *)object, 8u);
      }
    }
    else
    {
      v8 = CTLogPacket();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        _CTServerConnectionGetCellularDataIsEnabled_cold_1(v2, SHIDWORD(v2), v8);
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  return v2;
}

uint64_t CTLogPacket()
{
  if (CTLogPacket_once != -1)
    dispatch_once(&CTLogPacket_once, &__block_literal_global_30);
  return CTLogPacket_logger;
}

uint64_t CTTelephonyCenterGetDefault()
{
  uint64_t result;
  __CFRunLoop *Current;
  _QWORD *v2;

  result = _CTTelephonyCenterDefault;
  if (!_CTTelephonyCenterDefault)
  {
    pthread_mutex_lock(&_CTTelephonyCreateMutex);
    if (!_CTTelephonyCenterDefault)
    {
      Current = CFRunLoopGetCurrent();
      v2 = CTTelephonyCenterCreateOnRunloop(Current, (const __CFString *)*MEMORY[0x1E0C9B280]);
      _CTTelephonyCenterDefault = (uint64_t)v2;
      if (v2)
        *(_BYTE *)(v2[3] + 138) = 1;
    }
    pthread_mutex_unlock(&_CTTelephonyCreateMutex);
    return _CTTelephonyCenterDefault;
  }
  return result;
}

_QWORD *CTTelephonyCenterCreateOnRunloop(__CFRunLoop *a1, const __CFString *a2)
{
  const __CFAllocator *v4;
  const char *v5;
  CFStringRef v6;
  _QWORD *v7;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = getprogname();
  v6 = CFStringCreateWithFormat(v4, 0, CFSTR("%s-CTTelephonyCenter"), v5);
  v7 = _CTServerConnectionCreateOnRunLoop((uint64_t)v4, (uint64_t)v6, a1, a2, &__block_literal_global_7);
  if (v6)
    CFRelease(v6);
  if (v7)
    CTTelephonyCenterSetup(v7);
  return v7;
}

void CTTelephonyCenterSetup(const void *a1)
{
  __CFNotificationCenter *LocalCenter;

  _CTServerConnectionSetDefaultConnection((uint64_t)a1);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a1, (CFNotificationCallback)_DaemonReady, CFSTR("kCTDaemonReadyLocalNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

uint64_t _CTServerConnectionSetDefaultConnection(uint64_t result)
{
  if (result)
    *(_BYTE *)(result + 32) = 1;
  return result;
}

_QWORD *_CTServerConnectionCreateOnRunLoop(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5)
{
  _QWORD *v5;
  char *v10;
  void *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  std::string __p;
  __int128 v17;
  uint64_t v18;

  v5 = 0;
  if (a3 && a4)
  {
    memset(&__p, 0, sizeof(__p));
    if (a2)
    {
      v17 = 0uLL;
      v18 = 0;
      ctu::cf::assign();
      memset(&__p, 0, sizeof(__p));
    }
    else
    {
      v10 = (char *)getprogname();
      std::string::basic_string[abi:nn180100]<0>(&__p, v10);
    }
    v5 = (_QWORD *)sCTServerConnectionCreate(a1, &__p, 0);
    if (v5)
    {
      if (a5)
        v11 = _Block_copy(a5);
      else
        v11 = 0;
      v12 = v5[3];
      v13 = *(const void **)(v12 + 112);
      *(_QWORD *)(v12 + 112) = v11;
      if (v13)
        _Block_release(v13);
      CFRetain(a3);
      CFRetain(a4);
      v14 = v5[3];
      *(_QWORD *)(v14 + 16) = a3;
      *(_QWORD *)(v14 + 24) = a4;
      sCTServerConnectionStart(v5);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

uint64_t _FillDictionaryKeysAndValuesForDataStatus(const __CFAllocator *a1, unint64_t a2, uint64_t *a3, const __CFString **a4, CFNumberRef *a5)
{
  CFNumberRef v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFNumber *v19;
  CFIndex v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  uint64_t v30;
  uint64_t v31;
  const __CFNumber *v32;
  const __CFAllocator *allocator;
  void *values[2];
  _QWORD v35[2];
  _OWORD valuePtr[18];
  _QWORD v37[21];

  v37[19] = *MEMORY[0x1E0C80C00];
  if (a2 < 3)
    return 0;
  LODWORD(valuePtr[0]) = *a3;
  v10 = CFNumberCreate(a1, kCFNumberIntType, valuePtr);
  *a5 = v10;
  if (!v10)
    return 0;
  *a4 = CFSTR("kCTRegistrationDataContextID");
  a4[1] = CFSTR("kCTRegistrationDataActive");
  v11 = (const void *)*MEMORY[0x1E0C9AE40];
  v12 = (const void *)*MEMORY[0x1E0C9AE50];
  if (a3[1])
    v13 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v13 = (const void *)*MEMORY[0x1E0C9AE40];
  a5[1] = (CFNumberRef)CFRetain(v13);
  a4[2] = CFSTR("kCTRegistrationDataAttached");
  if (a3[2])
    v14 = v12;
  else
    v14 = v11;
  a5[2] = (CFNumberRef)CFRetain(v14);
  v37[0] = CFSTR("kCTRegistrationDataIndicatorNone");
  v37[1] = CFSTR("kCTRegistrationDataIndicator2G");
  v37[2] = CFSTR("kCTRegistrationDataIndicator2_5G");
  v37[3] = CFSTR("kCTRegistrationDataIndicator3G");
  v37[4] = CFSTR("kCTRegistrationDataIndicator3_5G");
  v37[5] = CFSTR("kCTRegistrationDataIndicator3_75G");
  v37[6] = CFSTR("kCTRegistrationDataIndicatorH_Plus");
  v37[7] = CFSTR("kCTRegistrationDataIndicator4G");
  v37[8] = CFSTR("kCTRegistrationDataIndicator5G");
  v37[9] = CFSTR("kCTRegistrationDataIndicator6G");
  v37[10] = CFSTR("kCTRegistrationDataIndicator7G");
  v37[11] = CFSTR("kCTRegistrationDataIndicator8G");
  v37[12] = CFSTR("kCTRegistrationDataIndicator9G");
  v37[13] = CFSTR("kCTRegistrationDataIndicator4G_5GE");
  v37[14] = CFSTR("kCTRegistrationDataIndicator4G_LTEA");
  v37[15] = CFSTR("kCTRegistrationDataIndicator4G_LTEPlus");
  v37[16] = CFSTR("kCTRegistrationDataIndicator5G_Plus");
  v37[17] = CFSTR("kCTRegistrationDataIndicator5G_Uwb");
  v37[18] = CFSTR("kCTRegistrationDataIndicator5G_UC");
  if (a2 < 5)
    return 3;
  v15 = a3[3];
  if (v15 > 0x12)
  {
    v16 = 3;
  }
  else
  {
    a4[3] = CFSTR("kCTRegistrationDataIndicator");
    a5[3] = (CFNumberRef)v37[v15];
    v16 = 4;
  }
  if (a3[4])
    v19 = (const __CFNumber *)v12;
  else
    v19 = (const __CFNumber *)v11;
  a5[v16] = v19;
  v17 = v16 + 1;
  a4[v16] = CFSTR("kCTRegistrationDataStatusInternationalRoaming");
  if (a2 >= 6)
  {
    allocator = a1;
    v32 = (const __CFNumber *)v12;
    v20 = 0;
    v21 = 0;
    v22 = a3[5] & 0x7FFFFFFFFFFFD67FLL;
    memset(valuePtr, 0, sizeof(valuePtr));
    do
    {
      if (((v22 >> v21) & 1) != 0)
        *((_QWORD *)valuePtr + v20++) = kCTDataConnectionServiceTypeFromIndex(v21);
      ++v21;
    }
    while (v21 != 36);
    if (v20)
    {
      a5[v17] = CFArrayCreate(allocator, (const void **)valuePtr, v20, MEMORY[0x1E0C9B378]);
      a4[v17] = CFSTR("kCTRegistrationDataConnectionServices");
      v17 = v16 + 2;
    }
    if (a2 >= 7)
    {
      a5[v17] = (CFNumberRef)RadioAccessTechnologyToRadioAccessTechnologyString(*((_DWORD *)a3 + 12));
      v23 = v17 + 1;
      a4[v17] = CFSTR("kCTRegistrationRadioAccessTechnology");
      if (a2 == 8)
      {
        v24 = 0;
        v25 = 0;
        v35[0] = CFSTR("kCTDataFamilyTypeIPv4");
        v35[1] = CFSTR("kCTDataFamilyTypeIPv6");
        values[0] = 0;
        values[1] = 0;
        v26 = *((_DWORD *)a3 + 14);
        v27 = 1;
        do
        {
          if ((v27 & v26) != 0)
            values[v25++] = (void *)v35[v24];
          v27 = 1 << ++v24;
        }
        while (v24 != 2);
        if (v25)
        {
          a5[v23] = CFArrayCreate(allocator, (const void **)values, v25, MEMORY[0x1E0C9B378]);
          a4[v23] = CFSTR("kCTRegistrationDataFamilyActive");
          v23 = v17 + 2;
        }
      }
      if (a2 <= 8)
      {
        return v23;
      }
      else
      {
        a4[v23] = CFSTR("kCTRegistrationDataAttachOverride");
        v28 = (const __CFNumber *)v11;
        if (a3[8])
          v29 = v32;
        else
          v29 = (const __CFNumber *)v11;
        v17 = v23 + 1;
        a5[v23] = v29;
        if (a2 != 9)
        {
          a4[v17] = CFSTR("kCTRegistrationDataContextSuspended");
          if (a3[9])
            v28 = v32;
          v30 = v23 + 2;
          a5[v17] = v28;
          if (a2 >= 0xB && (v31 = a3[10]) != 0)
          {
            a4[v30] = CFSTR("kCTRegistrationDataIndicatorOverride");
            v17 = v23 + 3;
            a5[v30] = (CFNumberRef)v37[v31];
          }
          else
          {
            return v23 + 2;
          }
        }
      }
    }
  }
  return v17;
}

__CFString *RadioAccessTechnologyToRadioAccessTechnologyString(int a1)
{
  __CFString **v1;

  if ((a1 + 1) > 0xC)
    v1 = kCTRegistrationRadioAccessTechnologyUnknown;
  else
    v1 = off_1E15324A0[a1 + 1];
  return *v1;
}

uint64_t _CTServerConnectionCopyCellularUsagePolicy(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (a1 && a2 && a3)
  {
    *a3 = 0;
    ctu::cf::assign();
  }
  return 0x1600000001;
}

void setDisallowedCellularDataPolicy(CFMutableDictionaryRef *a1, xpc_object_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  __CFArray *Mutable;
  size_t count;
  const char *i;
  unsigned __int8 v8;
  const __CFString *CellularDataUsagePolicyForEnum;
  xpc_object_t object;
  xpc_object_t *p_xarray;
  const char *v12;
  xpc_object_t xarray;

  p_xarray = a2;
  v12 = "kCUPolicyKeyDisallowedPolicies";
  xarray = 0;
  xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xarray, &xarray);
  v3 = MEMORY[0x186DBAE5C](xarray);
  v4 = MEMORY[0x1E0C812C8];
  if (v3 == MEMORY[0x1E0C812C8])
  {
    if (MEMORY[0x186DBAE5C](xarray) == v4)
    {
      count = xpc_array_get_count(xarray);
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (count)
      {
        for (i = 0; i != (const char *)count; ++i)
        {
          p_xarray = &xarray;
          v12 = i;
          xpc::array::object_proxy::operator xpc::object((uint64_t)&p_xarray, &object);
          v8 = xpc::dyn_cast_or_default((xpc *)&object, 0);
          xpc_release(object);
          CellularDataUsagePolicyForEnum = getCellularDataUsagePolicyForEnum(v8);
          CFArrayAppendValue(Mutable, CellularDataUsagePolicyForEnum);
        }
      }
    }
    else
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    }
    CFDictionarySetValue(*a1, CFSTR("kCTCellularDataUsageDisallowedPolicies"), Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
  xpc_release(xarray);
}

void xpc::dict::object_proxy::operator xpc::array(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
      goto LABEL_5;
  }
  if (MEMORY[0x186DBAE5C](v4) == MEMORY[0x1E0C812C8])
  {
    xpc_retain(v4);
    goto LABEL_7;
  }
LABEL_5:
  *a2 = xpc_null_create();
LABEL_7:
  xpc_release(v4);
}

void setLegacyCellularDataPolicy(CFMutableDictionaryRef *a1, uint64_t a2)
{
  char v3;
  const void **v4;
  _QWORD v5[2];
  xpc_object_t object;

  v5[0] = a2;
  v5[1] = "kCUPolicyKeyDataAllowed";
  object = 0;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v5, &object);
  if (MEMORY[0x186DBAE5C](object) != MEMORY[0x1E0C81350])
  {
    v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    v4 = (const void **)MEMORY[0x1E0C9AE50];
    if ((v3 & 0xFE) != 0)
      v4 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(*a1, CFSTR("kCTCellularUsagePolicyDataAllowed"), *v4);
  }
  xpc_release(object);
}

void setCellularDataPolicy(CFMutableDictionaryRef *a1, uint64_t a2)
{
  unsigned __int8 v3;
  const __CFString *CellularDataUsagePolicyForEnum;
  _QWORD v5[2];
  xpc_object_t object;

  v5[0] = a2;
  v5[1] = "kCUPolicyKeyDataAllowed";
  object = 0;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v5, &object);
  if (MEMORY[0x186DBAE5C](object) != MEMORY[0x1E0C81350])
  {
    v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    CellularDataUsagePolicyForEnum = getCellularDataUsagePolicyForEnum(v3);
    if (CellularDataUsagePolicyForEnum)
      CFDictionarySetValue(*a1, CFSTR("kCTCellularDataUsagePolicy"), CellularDataUsagePolicyForEnum);
  }
  xpc_release(object);
}

void setWiFiDataPolicy(CFMutableDictionaryRef *a1, uint64_t a2)
{
  unsigned __int8 v3;
  const __CFString *CellularDataUsagePolicyForEnum;
  _QWORD v5[2];
  xpc_object_t object;

  v5[0] = a2;
  v5[1] = "kCUPolicyKeyWiFiAllowed";
  object = 0;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v5, &object);
  if (MEMORY[0x186DBAE5C](object) != MEMORY[0x1E0C81350])
  {
    v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    CellularDataUsagePolicyForEnum = getCellularDataUsagePolicyForEnum(v3);
    if (CellularDataUsagePolicyForEnum)
      CFDictionarySetValue(*a1, CFSTR("kCTWiFiDataUsagePolicy"), CellularDataUsagePolicyForEnum);
  }
  xpc_release(object);
}

const __CFString *getCellularDataUsagePolicyForEnum(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("kCTCellularDataUsagePolicyAllowWhileInHome");
  if (!a1)
    v1 = CFSTR("kCTCellularDataUsagePolicyAlwaysAllow");
  if (a1 == 2)
    return CFSTR("kCTCellularDataUsagePolicyDeny");
  else
    return v1;
}

unint64_t _CTServerConnectionRegisterForEvent(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL4 v7;
  unsigned int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD block[6];
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (a1 && *(_QWORD *)(a1 + 16))
  {
    CCMonitor::instance(&v22);
    v6 = *(_QWORD *)(a1 + 24);
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 136) == 0;
    else
      v7 = 1;
    v10 = v23;
    if (!v23)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v7)
      {
LABEL_12:
        CCMonitor::instance(&v22);
        v13 = v23;
        if (v23)
        {
          v14 = (unint64_t *)&v23->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v8 = 1;
        LODWORD(v9) = 1;
        goto LABEL_20;
      }
    }
    else
    {
LABEL_11:
      if (v7)
        goto LABEL_12;
    }
    v8 = v16;
    v9 = HIDWORD(v16);
    if (!HIDWORD(v16))
    {
LABEL_20:
      v17 = *(NSObject **)(a1 + 16);
      v18 = *(_QWORD *)(a1 + 24);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___CTServerConnectionRegisterForEvent_block_invoke;
      block[3] = &unk_1E1532C70;
      v21 = a2;
      block[4] = a3;
      block[5] = v18;
      dispatch_async(v17, block);
    }
  }
  else
  {
    v8 = 1;
    LODWORD(v9) = 22;
  }
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t `anonymous namespace'::RegisterClientForEvent(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v16;

  if (!*(_QWORD *)(a1 + 16))
    return 0x1600000001;
  if (a2 < -1)
    return 0;
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7)
  {
    v8 = v7;
    v16 = v7;
  }
  else
  {
    v8 = xpc_null_create();
    v16 = v8;
    if (!v8)
      goto LABEL_9;
  }
  if (MEMORY[0x186DBAE5C](v8) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v8);
    v9 = v8;
    goto LABEL_11;
  }
LABEL_9:
  v9 = xpc_null_create();
  v16 = v9;
LABEL_11:
  xpc_release(v8);
  v10 = xpc_string_create("kRegisterNotification");
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v9, "kRequest", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_int64_create(a2);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v9, "kEvent", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v4 = SendXpcMessageIf(1, a1, &v16, v14, a3);
  xpc_release(v9);
  return v4;
}

uint64_t _CTServerConnectionCellMonitorCopyCellInfo(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  uint64_t v3;
  xpc_object_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t object;
  const char *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCellMonitorGetCellInfo", &object, "kRequest", &v15);
    xpc_release(object);
    v16 = v15;
    v15 = xpc_null_create();
    xpc_release(v15);
    object = &v16;
    v13 = "kCellMonitorCellAll";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v14);
    xpc_release(v14);
    v14 = 0;
    v15 = xpc_null_create();
    v3 = SendXpcMessage(a1, &v16, &v15);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](v15) == MEMORY[0x1E0C812F8])
    {
      v11 = 0;
      object = &v15;
      v13 = "kCellMonitorCellInfo";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v11);
      if (MEMORY[0x186DBAE5C](v11) != MEMORY[0x1E0C81350])
      {
        object = 0;
        v10 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v10);
        v7 = object;
        v8 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
        if (!object)
          v8 = 0;
        if (v8)
        {
          *a2 = 1;
          *a3 = v7;
        }
        else if (object)
        {
          CFRelease(object);
        }
      }
      xpc_release(v11);
    }
    xpc_release(v15);
    xpc_release(v16);
  }
  return v3;
}

unint64_t _CTServerConnectionSendEnhancedLinkQualityTrafficInfo(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v12;
  int v13;
  xpc_object_t object[2];
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;

  v3 = 0x1600000000;
  v4 = 1;
  if (a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioEnhancedLQMSendTrafficInfo", object, "kRequest", &v17);
    xpc_release(object[0]);
    v7 = v17;
    v18 = v17;
    v17 = xpc_null_create();
    xpc_release(v17);
    v8 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v8)
      v8 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kRadioEnhancedLQMSendTrafficInfoPayload", v8);
    v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    v10 = xpc_int64_create(a2);
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kRadioEnhancedLQMSendTrafficInfoType", v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    v17 = xpc_null_create();
    v12 = SendXpcMessage(a1, &v18, &v17);
    v3 = 0x400000000;
    if (MEMORY[0x186DBAE5C](v17) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v17;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v16);
      v13 = xpc::dyn_cast_or_default((xpc *)&v16, 0);
      xpc_release(v16);
      if (v13)
      {
        v3 = v12 & 0xFFFFFFFF00000000;
        v4 = v12;
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 2;
    }
    xpc_release(v17);
    xpc_release(v18);
  }
  return v3 & 0xFFFFFFFF00000000 | v4;
}

xpc::dict_creator *xpc::dict_creator::dict_creator(xpc::dict_creator *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;

  v2 = xpc_dictionary_create(0, 0, 0);
  if ((v2 || (v2 = xpc_null_create()) != 0) && MEMORY[0x186DBAE5C](v2) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v2);
    v3 = v2;
  }
  else
  {
    v3 = xpc_null_create();
  }
  xpc_release(v2);
  *(_QWORD *)this = v3;
  v4 = xpc_null_create();
  xpc_release(v4);
  return this;
}

uint64_t _CTServerConnectionGetRegistrationStatus(uint64_t a1, __CFString **a2)
{
  uint64_t v2;
  int v5;
  NSObject *v6;
  xpc_object_t v8;
  xpc_object_t object;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v12);
    xpc_release(object);
    v13 = v12;
    v12 = xpc_null_create();
    xpc_release(v12);
    object = &v13;
    v10 = "kRegistrationStatus";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v11);
    xpc_release(v11);
    v11 = 0;
    v12 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v13, &v12);
    v5 = 0;
    if (MEMORY[0x186DBAE5C](v12) == MEMORY[0x1E0C812F8])
    {
      object = &v12;
      v10 = "kRegistrationStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      v5 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      xpc_release(v8);
    }
    *a2 = registrationStatusToRegistrationStatusString(v5);
    v6 = CTLogRegistration();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      _CTServerConnectionGetRegistrationStatus_cold_1();
    xpc_release(v12);
    xpc_release(v13);
  }
  return v2;
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t result;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value)
    return xpc_retain(value);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

void xpc::dict_creator::operator()<char const*>(char *string@<X2>, xpc_object_t *a2@<X0>, const char *a3@<X1>, xpc_object_t *a4@<X8>)
{
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;

  v7 = xpc_string_create(string);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    xpc_retain(v7);
    v8 = v7;
  }
  else
  {
    v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, a3, v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = *a2;
  *a4 = *a2;
  if (v10)
    xpc_retain(v10);
  else
    *a4 = xpc_null_create();
  xpc_release(v7);
}

uint64_t SendXpcMessage(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  return SendXpcMessageIf((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 136) != 0) & (sInternalDeadFlag ^ 1u), a1, a2, a3);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;

  v4 = xpc_null_create();
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), v4);
  *a2 = v4;
  v5 = xpc_null_create();
  xpc_release(v5);
}

__CFString *registrationStatusToRegistrationStatusString(int a1)
{
  __CFString **v1;

  if ((a1 - 1) > 5)
    v1 = kCTRegistrationStatusUnknown;
  else
    v1 = off_1E1532548[a1 - 1];
  return *v1;
}

uint64_t CTLogRegistration()
{
  if (CTLogRegistration_once != -1)
    dispatch_once(&CTLogRegistration_once, &__block_literal_global_27);
  return CTLogRegistration_logger;
}

uint64_t SendXpcMessageIf(int a1, uint64_t a2, xpc_object_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  BOOL v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  xpc_object_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  if (!a1)
    return 0;
  CCMonitor::instance(&v15);
  v9 = !a2 || (v8 = *(_QWORD *)(a2 + 24)) == 0 || *(_BYTE *)(v8 + 136) == 0;
  v11 = v16;
  if (!v16)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v9)
      return 0x100000001;
  }
  else
  {
LABEL_11:
    if (v9)
      return 0x100000001;
  }
  v14 = *a3;
  if (v14)
    xpc_retain(v14);
  else
    v14 = xpc_null_create();
  _HandlePrepWorkBeforeSend(a2, a5);
  xpc_connection_send_message(*(xpc_connection_t *)(a2 + 40), v14);
  xpc_release(v14);
  return 0;
}

uint64_t SendXpcMessageIf(int a1, uint64_t a2, xpc_object_t *a3, xpc_object_t *a4)
{
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  xpc_object_t v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t object;
  xpc_object_t *v24;
  const char *v25;

  v5 = MEMORY[0x1E0C812F8];
  if (a1)
  {
    CCMonitor::instance(&v24);
    v9 = !a2 || (v8 = *(_QWORD *)(a2 + 24)) == 0 || *(_BYTE *)(v8 + 136) == 0;
    v12 = (std::__shared_weak_count *)v25;
    if (!v25)
      goto LABEL_14;
    v13 = (unint64_t *)(v25 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v9)
        goto LABEL_15;
    }
    else
    {
LABEL_14:
      if (v9)
      {
LABEL_15:
        v15 = 1;
        v16 = 1;
        return v15 | (v16 << 32);
      }
    }
    v17 = *a3;
    if (v17)
      xpc_retain(v17);
    else
      v17 = xpc_null_create();
    _HandlePrepWorkBeforeSend(a2, 1);
    v18 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a2 + 40), v17);
    if ((v18 || (v18 = xpc_null_create()) != 0) && MEMORY[0x186DBAE5C](v18) == v5)
    {
      xpc_retain(v18);
      v19 = v18;
    }
    else
    {
      v19 = xpc_null_create();
    }
    v20 = xpc_null_create();
    v21 = *a4;
    *a4 = v19;
    xpc_release(v21);
    xpc_release(v20);
  }
  else
  {
    v10 = xpc_dictionary_create(0, 0, 0);
    if ((v10 || (v10 = xpc_null_create()) != 0) && MEMORY[0x186DBAE5C](v10) == v5)
    {
      xpc_retain(v10);
      v11 = v10;
    }
    else
    {
      v11 = xpc_null_create();
    }
    xpc_release(v10);
    v17 = xpc_null_create();
    v18 = *a4;
    *a4 = v11;
  }
  xpc_release(v18);
  xpc_release(v17);
  if (MEMORY[0x186DBAE5C](*a4) == v5)
  {
    if (xpc_dictionary_get_value(*a4, "kPosixError"))
    {
      v24 = a4;
      v25 = "kPosixError";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v24, &object);
      v16 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      v15 = 1;
      return v15 | (v16 << 32);
    }
    if (!xpc_dictionary_get_value(*a4, "kMachError"))
    {
      v15 = 0;
      v16 = 0;
      return v15 | (v16 << 32);
    }
    v24 = a4;
    v25 = "kMachError";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v24, &object);
    v16 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    v16 = 5;
  }
  v15 = 2;
  return v15 | (v16 << 32);
}

void CCMonitor::instance(_QWORD *a1@<X8>)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  {
    CCMonitor::instance(void)::sInstance = 0;
    unk_1ECDA4F90 = 0;
  }
  {
    if (CCMonitor::instance(void)::sOnceToken == -1)
      goto LABEL_5;
  }
  else
  {
    CCMonitor::instance(void)::sOnceToken = 0;
  }
  dispatch_once(&CCMonitor::instance(void)::sOnceToken, &__block_literal_global_11);
LABEL_5:
  v3 = unk_1ECDA4F90;
  *a1 = CCMonitor::instance(void)::sInstance;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void _HandlePrepWorkBeforeSend(uint64_t a1, int a2)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if (*(_DWORD *)(v3 + 140) != 1)
      {
        _CTServerConnectionCheckIn(a1);
        if (a2)
        {
          {
            CCMonitor::instance(&v8);
            v5 = v9;
            if (v9)
            {
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v7 = __ldaxr(p_shared_owners);
              while (__stlxr(v7 - 1, p_shared_owners));
              if (!v7)
              {
                ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
                std::__shared_weak_count::__release_weak(v5);
              }
            }
          }
        }
      }
    }
  }
}

unint64_t `anonymous namespace'::ReregisterClientForAllEvents(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  unsigned int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  if (!*(_QWORD *)(a1 + 16))
  {
    v4 = 1;
    v5 = 22;
    return v4 | (unint64_t)(v5 << 32);
  }
  CCMonitor::instance(&v21);
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 136) == 0;
  else
    v3 = 1;
  v6 = v22;
  if (!v22)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v3)
    {
LABEL_11:
      CCMonitor::instance(&v21);
      v9 = v22;
      if (v22)
      {
        v10 = (unint64_t *)&v22->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 = 1;
      v4 = 1;
      return v4 | (unint64_t)(v5 << 32);
    }
  }
  else
  {
LABEL_10:
    if (v3)
      goto LABEL_11;
  }
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v14 = (_QWORD *)(v12 + 40);
  if (v13 == (_QWORD *)(v12 + 40))
  {
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v15 = *((_DWORD *)v13 + 8);
      if (v15 >= -1)
      {
        v5 = HIDWORD(v16) ? HIDWORD(v16) : v5;
        if (HIDWORD(v16))
          v4 = v16;
      }
      v17 = (_QWORD *)v13[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v13[2];
          v19 = *v18 == (_QWORD)v13;
          v13 = v18;
        }
        while (!v19);
      }
      v13 = v18;
    }
    while (v18 != v14);
  }
  return v4 | (unint64_t)(v5 << 32);
}

void _CTServerConnectionCheckIn(uint64_t a1)
{
  uint64_t v1;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v1 + 136))
  {
    if (*(char *)(v1 + 111) < 0)
    {
      if (!*(_QWORD *)(v1 + 96))
        return;
    }
    else if (!*(_BYTE *)(v1 + 111))
    {
      return;
    }
    v3 = xpc_dictionary_create(0, 0, 0);
    if ((v3 || (v3 = xpc_null_create()) != 0) && MEMORY[0x186DBAE5C](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
    xpc_release(v3);
    v5 = xpc_string_create("kWhois");
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kRequest", v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    v7 = *(_QWORD *)(a1 + 24);
    v8 = (const char *)(v7 + 88);
    if (*(char *)(v7 + 111) < 0)
      v8 = *(const char **)v8;
    v9 = xpc_string_create(v8);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kName", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v11 = getprogname();
    if (v11)
    {
      v12 = xpc_string_create(v11);
      if (!v12)
        v12 = xpc_null_create();
      xpc_dictionary_set_value(v4, "kProgName", v12);
      v13 = xpc_null_create();
      xpc_release(v12);
      xpc_release(v13);
    }
    v14 = *(_QWORD *)(a1 + 24);
    *(_BYTE *)(v14 + 137) = 0;
    if (*(_DWORD *)(v14 + 140) != 1)
      *(_DWORD *)(v14 + 140) = 1;
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), v4);
    xpc_release(v4);
  }
}

_QWORD *ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v4;
  CFTypeID v5;

  v4 = *a2;
  if (*a2 && (v5 = CFGetTypeID(*a2), v5 == CFArrayGetTypeID()))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    if (*a2)
      CFRelease(*a2);
  }
  return a1;
}

{
  CFTypeRef v3;
  CFTypeID v4;

  v3 = *a2;
  if (*a2 && (v4 = CFGetTypeID(*a2), v4 == CFArrayGetTypeID()))
  {
    *a1 = v3;
    CFRetain(v3);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_18426B414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void ___Z11hasBasebandv_block_invoke()
{
  const __CFBoolean *v0;
  uint64_t v1;
  CFTypeRef cf;

  cf = 0;
  v1 = MGCopyAnswer();
  ctu::cf::CFSharedRef<__CFBoolean const>::CFSharedRef<void const,void>(&cf, (CFTypeRef *)&v1);
  LOBYTE(v1) = 0;
  ctu::cf::assign((ctu::cf *)&v1, (BOOL *)cf, v0);
  hasBaseband(void)::hasBaseband = v1;
  if (cf)
    CFRelease(cf);
}

_QWORD *ctu::cf::CFSharedRef<__CFBoolean const>::CFSharedRef<void const,void>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v4;
  CFTypeID v5;

  v4 = *a2;
  if (*a2 && (v5 = CFGetTypeID(*a2), v5 == CFBooleanGetTypeID()))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    if (*a2)
      CFRelease(*a2);
  }
  return a1;
}

xpc_object_t __copy_helper_block_8_48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void sub_18426B5D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZZ41__CoreTelephonyClientMux_removeDelegate__ENK3__1clEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  if (v2)
  {
    if (isFrameworkLoggingSupported())
    {
      v3 = CTLogClient();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        ___ZZ41__CoreTelephonyClientMux_removeDelegate__ENK3__1clEv_block_invoke_cold_1();
    }
  }

}

void sub_18426B6A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZZ41__CoreTelephonyClientMux_removeDelegate__ENK3__1clEv_block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1(&dword_18425C000, v0, v1, "Updating selectors after delegate removal failed with: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_1();
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_0_3(void **a1)
{
  operator delete(*a1);
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

void OUTLINED_FUNCTION_4_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_4_3(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x16u);
}

void std::__tree<std::__value_type<objc_object *,`anonymous namespace'::DelegateContext>,std::__map_value_compare<`anonymous namespace',std::__map_value_compare,std::less<`anonymous namespace'>,true>,std::allocator<std::__map_value_compare>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    operator delete(a2);
  }
}

void sub_18426B910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18426B9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18426BAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18426BBD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<-[CoreTelephonyClientMux removeDelegate:]::$_1>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

void sub_18426BCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CoreTelephonyClientMux;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18426BEA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18426C03C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

uint64_t CTLogClientCache()
{
  if (CTLogClientCache_once != -1)
    dispatch_once(&CTLogClientCache_once, &__block_literal_global_18_0);
  return CTLogClientCache_logger;
}

void sub_18426C3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

void sub_18426C528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<objc_selector *,`anonymous namespace'::CachePolicy>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,`anonymous namespace'::CachePolicy>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,`anonymous namespace'::CachePolicy>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<objc_object *,`anonymous namespace'::DelegateContext>,std::__map_value_compare<`anonymous namespace',std::__map_value_compare,std::less<`anonymous namespace'>,true>,std::allocator<std::__map_value_compare>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t *v7;

  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = a2;
    do
    {
      v4 = (uint64_t *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, a2);
  operator delete(a2);
  return v4;
}

void std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:nn180100]<std::pair<__CTAssertionType * const,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_18426C858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

unint64_t _CTServerConnectionGetRadioModuleIsDead(uint64_t a1, _BYTE *a2)
{
  if ((hasBaseband() & 1) != 0)
  handleUnsupportedRequestForCurrentBundle("GetRadioModuleIsDead");
  return 0x1300000001;
}

uint64_t hasBaseband(void)
{
  if (hasBaseband(void)::onceToken != -1)
    dispatch_once(&hasBaseband(void)::onceToken, &__block_literal_global_15);
  return hasBaseband(void)::hasBaseband;
}

void sub_18426CDA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18426CE84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _CTServerConnectionDestroy(uint64_t a1)
{
  uint64_t v2;
  __CFNotificationCenter *LocalCenter;
  _xpc_connection_s *v4;
  uint64_t v5;
  mach_port_name_t v6;
  ipc_space_t *v7;
  NSObject *v8;
  _QWORD v9[5];
  _QWORD barrier[5];

  _CTServerConnectionCleanup(a1);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, (const void *)a1);
  v4 = *(_xpc_connection_s **)(a1 + 40);
  v5 = MEMORY[0x1E0C809B0];
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    barrier[0] = v5;
    barrier[1] = 0x40000000;
    barrier[2] = ___ZL26_CTServerConnectionDestroyPKv_block_invoke;
    barrier[3] = &__block_descriptor_tmp_50;
    barrier[4] = v4;
    xpc_connection_send_barrier(v4, barrier);
  }
  v6 = *(_DWORD *)(a1 + 36);
  if (v6)
  {
    v7 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v6, 1u, -1);
    mach_port_deallocate(*v7, *(_DWORD *)(a1 + 36));
    *(_DWORD *)(a1 + 36) = 0;
  }
  v8 = *(NSObject **)(a1 + 16);
  v9[0] = v5;
  v9[1] = 0x40000000;
  v9[2] = ___ZL26_CTServerConnectionDestroyPKv_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_52;
  v9[4] = v2;
  dispatch_async(v8, v9);
  dispatch_release(*(dispatch_object_t *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
}

void _CTServerConnectionCleanup(uint64_t a1)
{
  mach_port_t v1;
  __CFMachPort *v2;
  __CFMachPort *v3;

  v1 = *(_DWORD *)(a1 + 36);
  if (v1)
  {
    v2 = CFMachPortCreateWithPort(0, v1, 0, 0, 0);
    if (v2)
    {
      v3 = v2;
      CFMachPortInvalidate(v2);
      CFRelease(v3);
    }
  }
}

os_log_t ___Z10sMsgCtrLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.CoreTelephony", "msg.ctr");
  sMsgCtrLog(void)::logger = (uint64_t)result;
  return result;
}

void sub_18426D298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_18426D4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_18426D638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_18426D7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void ___ZN9CCMonitor8instanceEv_block_invoke()
{
  CCMonitor *v0;
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v0 = (CCMonitor *)operator new();
  CCMonitor::CCMonitor(v0);
  *(_QWORD *)&v6 = v1;
  v2 = (_QWORD *)operator new();
  *v2 = &off_1E152D138;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = v0;
  *((_QWORD *)&v6 + 1) = v2;
  std::shared_ptr<CCMonitor>::operator=[abi:nn180100]((uint64_t)&CCMonitor::instance(void)::sInstance, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  CCMonitor::initialize((NSObject **)CCMonitor::instance(void)::sInstance);
}

void CCMonitor::CCMonitor(CCMonitor *this)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = dispatch_queue_create("CCMonitor", 0);
  *((_DWORD *)this + 2) = -1;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = -1;
  *((_BYTE *)this + 28) = 1;
  *((_QWORD *)this + 4) = 850045863;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v2 = os_log_type_enabled(0, OS_LOG_TYPE_DEBUG);
  if (v2)
    CCMonitor::CCMonitor(v2, v3, v4, v5, v6, v7, v8, v9);
}

void sub_18426DC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void _CTServerConnectionSetTargetQueue(_QWORD *a1, NSObject *a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD block[5];
  dispatch_object_t object;
  _QWORD *v8;

  if (a1 && a2)
  {
    v4 = a1[3];
    CFRetain(a1);
    dispatch_retain(a2);
    v5 = a1[2];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___CTServerConnectionSetTargetQueue_block_invoke;
    block[3] = &__block_descriptor_tmp_27;
    block[4] = v4;
    object = a2;
    dispatch_retain(a2);
    v8 = a1;
    dispatch_async(v5, block);
    if (object)
      dispatch_release(object);
    dispatch_release(a2);
  }
}

void sub_18426DF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18426E154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18426E25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18426E2EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18426E404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t sMsgCtrLog(void)
{
  if (sMsgCtrLog(void)::once != -1)
    dispatch_once(&sMsgCtrLog(void)::once, &__block_literal_global_27_0);
  return sMsgCtrLog(void)::logger;
}

void sub_18426E69C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18426E744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18426E990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 112), 8);
  _Unwind_Resume(a1);
}

unint64_t _CTServerConnectionRegisterBlockForNotification(uint64_t a1, CFStringRef theString2, uint64_t a3)
{
  int v5;

  if (!a1)
    return 0x1600000001;
  v5 = sCTEventForNotificationString(theString2);
  if (v5)
    return _CTServerConnectionRegisterForEvent(a1, v5, a3);
  else
    return 0;
}

unint64_t _CTServerConnectionRegisterForNotification(uint64_t a1, CFStringRef theString2)
{
  int v3;

  if (!a1)
    return 0x1600000001;
  v3 = sCTEventForNotificationString(theString2);
  if (v3)
    return _CTServerConnectionRegisterForEvent(a1, v3, 0);
  else
    return 0;
}

uint64_t sCTEventForNotificationString(CFStringRef theString2)
{
  unint64_t v2;
  uint64_t *v3;
  const __CFString **v4;
  uint64_t *v5;
  const __CFString *v6;
  uint64_t result;

  {
    *(_QWORD *)algn_1ECDA4A38 = CFSTR("CTPhoneNumberRegistrationRequestFinishedNotification");
    qword_1ECDA4A40 = (uint64_t)CFSTR("CTPhoneNumberRegistrationResponseNotification");
    unk_1ECDA4A48 = CFSTR("CTPhoneNumberRegistrationStateNotification");
    qword_1ECDA4A50 = (uint64_t)CFSTR("RadioTransmitSpeedNotification");
    unk_1ECDA4A58 = CFSTR("kCTAudioCallDropToneCompleteNotification");
    qword_1ECDA4A60 = (uint64_t)CFSTR("kCTAudioSampleRateSwitchCompleteNotification");
    unk_1ECDA4A68 = CFSTR("kCTAudioTTYModeStatusNotification");
    qword_1ECDA4A70 = (uint64_t)CFSTR("kCTAudioVocoderInfoNotification");
    unk_1ECDA4A78 = CFSTR("kCTAudioVoiceMuteStatusNotification");
    qword_1ECDA4A80 = (uint64_t)CFSTR("kCTBBKeepAliveOffloadStartNotification");
    unk_1ECDA4A88 = CFSTR("kCTBBKeepAliveOffloadStopNotification");
    qword_1ECDA4A90 = (uint64_t)CFSTR("kCTCallAlternateStatusChangeNotification");
    unk_1ECDA4A98 = CFSTR("kCTCallAudioToneRelayNotification");
    qword_1ECDA4AA0 = (uint64_t)CFSTR("kCTCallBarredNotification");
    unk_1ECDA4AA8 = CFSTR("kCTCallCauseCodeNotification");
    qword_1ECDA4AB0 = (uint64_t)CFSTR("kCTCallControlFailureNotification");
    unk_1ECDA4AB8 = CFSTR("kCTCallDeflectedNotification");
    qword_1ECDA4AC0 = (uint64_t)CFSTR("kCTCallForwardedNotification");
    unk_1ECDA4AC8 = CFSTR("kCTCallForwardingActiveNotification");
    qword_1ECDA4AD0 = (uint64_t)CFSTR("kCTCallHandoverEndedNotification");
    unk_1ECDA4AD8 = CFSTR("kCTCallHandoverLikelyNotification");
    qword_1ECDA4AE0 = (uint64_t)CFSTR("kCTCallHandoverStartedNotification");
    unk_1ECDA4AE8 = CFSTR("kCTCallIdentificationChangeNotification");
    qword_1ECDA4AF0 = (uint64_t)CFSTR("kCTCallIdentificationSuppressionRejectedNotification");
    unk_1ECDA4AF8 = CFSTR("kCTCallInputFrequencyLevelChangeNotification");
    qword_1ECDA4B00 = (uint64_t)CFSTR("kCTCallManagementStateChangeNotification");
    unk_1ECDA4B08 = CFSTR("kCTCallMediaStatusActiveNotification");
    qword_1ECDA4B10 = (uint64_t)CFSTR("kCTCallMediaStatusInactiveNotification");
    unk_1ECDA4B18 = CFSTR("kCTCallOutputFrequencyLevelChangeNotification");
    qword_1ECDA4B20 = (uint64_t)CFSTR("kCTCallServiceRequestAnswerNotification");
    unk_1ECDA4B28 = CFSTR("kCTCallServiceRequestDialNotification");
    qword_1ECDA4B30 = (uint64_t)CFSTR("kCTCallStatusBecameAlertingNotification");
    unk_1ECDA4B38 = CFSTR("kCTCallStatusChangeNotification");
    qword_1ECDA4B40 = (uint64_t)CFSTR("kCTCallSubTypeChangeNotification");
    unk_1ECDA4B48 = CFSTR("kCTCarrierEntitlementsAuthTokenAvailable");
    qword_1ECDA4B50 = (uint64_t)CFSTR("kCTCarrierEntitlementsInfoAvailableNotification");
    unk_1ECDA4B58 = CFSTR("kCTCarrierSettingsNewCarrierNotification");
    qword_1ECDA4B60 = (uint64_t)CFSTR("kCTCarrierSettingsNewOperatorNotification");
    unk_1ECDA4B68 = CFSTR("kCTCellMonitorUpdateNotification");
    qword_1ECDA4B70 = (uint64_t)CFSTR("kCTCellularDataPlanStatusNotification");
    unk_1ECDA4B78 = CFSTR("kCTCellularDataSettingsChangeNotification");
    qword_1ECDA4B80 = (uint64_t)CFSTR("kCTCellularDataUsageInfoNotfication");
    unk_1ECDA4B88 = CFSTR("kCTCellularPlanSimSubscriptionStatusNotification");
    qword_1ECDA4B90 = (uint64_t)CFSTR("kCTConnectionInvalidatedNotification");
    unk_1ECDA4B98 = CFSTR("kCTDTMFDigitsChangedNotification");
    qword_1ECDA4BA0 = (uint64_t)CFSTR("kCTDaemonReadyNotification");
    unk_1ECDA4BA8 = CFSTR("kCTDataServiceAvailabilityNotification");
    qword_1ECDA4BB0 = (uint64_t)CFSTR("kCTEMBMSUpdateNotification");
    unk_1ECDA4BB8 = CFSTR("kCTEmergencyCallBackModeStatusNotification");
    qword_1ECDA4BC0 = (uint64_t)CFSTR("kCTEmergencyCallContextNotification");
    unk_1ECDA4BC8 = CFSTR("kCTEmergencyCallStatusChangeNotification");
    qword_1ECDA4BD0 = (uint64_t)CFSTR("kCTEntitlementsDiagnosticsNotification");
    unk_1ECDA4BD8 = CFSTR("kCTEventSMSMessageCellBroadcastStringGeofencingStarted");
    qword_1ECDA4BE0 = (uint64_t)CFSTR("kCTIMSConnectionChangedNotification");
    unk_1ECDA4BE8 = CFSTR("kCTIndicatorRadioTransmitNotification");
    qword_1ECDA4BF0 = (uint64_t)CFSTR("kCTIndicatorsBeginStateDumpNotification");
    unk_1ECDA4BF8 = CFSTR("kCTIndicatorsDstUpdateNotification");
    qword_1ECDA4C00 = (uint64_t)CFSTR("kCTIndicatorsEndStateDumpNotification");
    unk_1ECDA4C08 = CFSTR("kCTIndicatorsSUPLINITNotification");
    qword_1ECDA4C10 = (uint64_t)CFSTR("kCTIndicatorsSignalStrengthNotification");
    unk_1ECDA4C18 = CFSTR("kCTIndicatorsTimeUpdateNotification");
    qword_1ECDA4C20 = (uint64_t)CFSTR("kCTIndicatorsUnconditionalCallForwardingNotification");
    unk_1ECDA4C28 = CFSTR("kCTIndicatorsVoiceMailNotification");
    qword_1ECDA4C30 = (uint64_t)CFSTR("kCTMMSConfigurationChangeNotification");
    qword_1ECDA4C38 = (uint64_t)CFSTR("kCTMessageReceiveDeferredNotification");
    qword_1ECDA4C40 = (uint64_t)CFSTR("kCTMessageReceivedNotification");
    qword_1ECDA4C48 = (uint64_t)CFSTR("kCTMessageSendErrorNotification");
    qword_1ECDA4C50 = (uint64_t)CFSTR("kCTMessageSendProgressNotification");
    qword_1ECDA4C58 = (uint64_t)CFSTR("kCTMessageSentNotification");
    qword_1ECDA4C60 = (uint64_t)CFSTR("kCTOtaspStatusChangeNotification");
    qword_1ECDA4C68 = (uint64_t)CFSTR("kCTPerAppNetworkDataAccessPolicyChangedNotification");
    qword_1ECDA4C70 = (uint64_t)CFSTR("kCTPhoneBookErrorNotification");
    qword_1ECDA4C78 = (uint64_t)CFSTR("kCTPhoneBookFetchNotification");
    qword_1ECDA4C80 = (uint64_t)CFSTR("kCTPhoneBookSelectedNotification");
    qword_1ECDA4C88 = (uint64_t)CFSTR("kCTPhoneBookWriteNotification");
    qword_1ECDA4C90 = (uint64_t)CFSTR("kCTPostponementStatusChangeNotification");
    qword_1ECDA4C98 = (uint64_t)CFSTR("kCTPowerRadioModuleDeadNotification");
    qword_1ECDA4CA0 = (uint64_t)CFSTR("kCTPowerRadioModuleEnterLowPowerNotification");
    qword_1ECDA4CA8 = (uint64_t)CFSTR("kCTPowerRadioModuleEnteredLowPowerNotification");
    qword_1ECDA4CB0 = (uint64_t)CFSTR("kCTPowerRadioModuleExitLowPowerNotification");
    qword_1ECDA4CB8 = (uint64_t)CFSTR("kCTPowerRadioModuleNotReadyErrorNotification");
    qword_1ECDA4CC0 = (uint64_t)CFSTR("kCTPowerRadioModuleReadyNotification");
    qword_1ECDA4CC8 = (uint64_t)CFSTR("kCTPullCallIsPossibleChangeNotification");
    qword_1ECDA4CD0 = (uint64_t)CFSTR("kCTQualityOfServiceFlowStatusChangeNotification");
    qword_1ECDA4CD8 = (uint64_t)CFSTR("kCTRadioBasebandOperatingModeChangedNotification");
    qword_1ECDA4CE0 = (uint64_t)CFSTR("kCTRadioEnhancedLinkQualityNotification");
    qword_1ECDA4CE8 = (uint64_t)CFSTR("kCTRadioEnhancedLinkQualitySupportedMetricsNotification");
    qword_1ECDA4CF0 = (uint64_t)CFSTR("kCTRadioModuleUplinkChangedNotification");
    qword_1ECDA4CF8 = (uint64_t)CFSTR("kCTRadioStateChangedNotification");
    qword_1ECDA4D00 = (uint64_t)CFSTR("kCTRadioVoiceLinkQualityNotification");
    qword_1ECDA4D08 = (uint64_t)CFSTR("kCTRegistrationCauseCodeNotification");
    qword_1ECDA4D10 = (uint64_t)CFSTR("kCTRegistrationCellChangedNotification");
    qword_1ECDA4D18 = (uint64_t)CFSTR("kCTRegistrationCellularDataPlanActivateFailedNotification");
    qword_1ECDA4D20 = (uint64_t)CFSTR("kCTRegistrationCellularDataPlanHideIndicatorNotification");
    qword_1ECDA4D28 = (uint64_t)CFSTR("kCTRegistrationCustomerServiceProfileUpdateNotification");
    qword_1ECDA4D30 = (uint64_t)CFSTR("kCTRegistrationDataActivateFailedNotification");
    qword_1ECDA4D38 = (uint64_t)CFSTR("kCTRegistrationDataStatusChangedNotification");
    qword_1ECDA4D40 = (uint64_t)CFSTR("kCTRegistrationDisplayStatusChangedNotification");
    qword_1ECDA4D48 = (uint64_t)CFSTR("kCTRegistrationNetworkListAvailableNotification");
    qword_1ECDA4D50 = (uint64_t)CFSTR("kCTRegistrationNetworkListFailedNotification");
    qword_1ECDA4D58 = (uint64_t)CFSTR("kCTRegistrationNewServingNetworkNotification");
    qword_1ECDA4D60 = (uint64_t)CFSTR("kCTRegistrationOperatorNameChangedNotification");
    qword_1ECDA4D68 = (uint64_t)CFSTR("kCTRegistrationStatusChangedNotification");
    qword_1ECDA4D70 = (uint64_t)CFSTR("kCTReliableNetworkFallbackToCellularChangedNotification");
    qword_1ECDA4D78 = (uint64_t)CFSTR("kCTRestrictedForegroundResumeNotification");
    qword_1ECDA4D80 = (uint64_t)CFSTR("kCTSIMSupportSIMNewInsertionNotification");
    qword_1ECDA4D88 = (uint64_t)CFSTR("kCTSIMSupportSIMPINEntryErrorNotification");
    qword_1ECDA4D90 = (uint64_t)CFSTR("kCTSIMSupportSIMPUKEntryErrorNotification");
    qword_1ECDA4D98 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusChangeNotification");
    qword_1ECDA4DA0 = (uint64_t)CFSTR("kCTSIMToolkitCallSetUpNotification");
    qword_1ECDA4DA8 = (uint64_t)CFSTR("kCTSIMToolkitControlCallNotification");
    qword_1ECDA4DB0 = (uint64_t)CFSTR("kCTSIMToolkitControlSSNotification");
    qword_1ECDA4DB8 = (uint64_t)CFSTR("kCTSIMToolkitControlUSSDNotification");
    qword_1ECDA4DC0 = (uint64_t)CFSTR("kCTSIMToolkitDisplayListNotification");
    qword_1ECDA4DC8 = (uint64_t)CFSTR("kCTSIMToolkitDisplayTextNotification");
    qword_1ECDA4DD0 = (uint64_t)CFSTR("kCTSIMToolkitGetInputNotification");
    qword_1ECDA4DD8 = (uint64_t)CFSTR("kCTSIMToolkitIdleTextNotification");
    qword_1ECDA4DE0 = (uint64_t)CFSTR("kCTSIMToolkitLanguageNotification");
    qword_1ECDA4DE8 = (uint64_t)CFSTR("kCTSIMToolkitLocalInformationNotification");
    qword_1ECDA4DF0 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneNotification");
    qword_1ECDA4DF8 = (uint64_t)CFSTR("kCTSIMToolkitRequestUserAttentionNotification");
    qword_1ECDA4E00 = (uint64_t)CFSTR("kCTSIMToolkitSentDTMFNotification");
    qword_1ECDA4E08 = (uint64_t)CFSTR("kCTSIMToolkitSentSMSMessageNotification");
    qword_1ECDA4E10 = (uint64_t)CFSTR("kCTSIMToolkitSentSSNotification");
    qword_1ECDA4E18 = (uint64_t)CFSTR("kCTSIMToolkitSentUSSDNotification");
    qword_1ECDA4E20 = (uint64_t)CFSTR("kCTSIMToolkitSessionCompleteNotification");
    qword_1ECDA4E28 = (uint64_t)CFSTR("kCTSMSCellBroadcastStringReceivedNotification");
    qword_1ECDA4E30 = (uint64_t)CFSTR("kCTSMSCellBroadcastTelemetryNotification");
    qword_1ECDA4E38 = (uint64_t)CFSTR("kCTSMSClass0StringReceivedNotification");
    qword_1ECDA4E40 = (uint64_t)CFSTR("kCTSMSDatabaseFullNotification");
    qword_1ECDA4E48 = (uint64_t)CFSTR("kCTSMSMessageReceivedNotification");
    qword_1ECDA4E50 = (uint64_t)CFSTR("kCTSMSMessageSendErrorNotificiation");
    qword_1ECDA4E58 = (uint64_t)CFSTR("kCTSMSMessageSentNotification");
    qword_1ECDA4E60 = (uint64_t)CFSTR("kCTSMSReadyStateNotification");
    qword_1ECDA4E68 = (uint64_t)CFSTR("kCTSMSSignificantChangeNotification");
    qword_1ECDA4E70 = (uint64_t)CFSTR("kCTSMSTestMessageReceivedNotification");
    qword_1ECDA4E78 = (uint64_t)CFSTR("kCTSPCUnlockSuccessfulNotification");
    qword_1ECDA4E80 = (uint64_t)CFSTR("kCTServiceProvisioningFailedNotification");
    qword_1ECDA4E88 = (uint64_t)CFSTR("kCTServiceProvisioningStartedNotification");
    qword_1ECDA4E90 = (uint64_t)CFSTR("kCTServiceProvisioningSuccessfulNotification");
    qword_1ECDA4E98 = (uint64_t)CFSTR("kCTSettingCallCapabilitiesChangedNotification");
    qword_1ECDA4EA0 = (uint64_t)CFSTR("kCTSettingChangedNotification");
    qword_1ECDA4EA8 = (uint64_t)CFSTR("kCTSettingPhoneNumberAvailableNotification");
    qword_1ECDA4EB0 = (uint64_t)CFSTR("kCTSettingPhoneNumberChangedNotification");
    qword_1ECDA4EB8 = (uint64_t)CFSTR("kCTSettingRequestErrorNotification");
    qword_1ECDA4EC0 = (uint64_t)CFSTR("kCTSettingRequestSuccessNotification");
    qword_1ECDA4EC8 = (uint64_t)CFSTR("kCTSettingSaveErrorNotification");
    qword_1ECDA4ED0 = (uint64_t)CFSTR("kCTSettingSaveSuccessNotification");
    qword_1ECDA4ED8 = (uint64_t)CFSTR("kCTSetupAudioInterruptionsChangedNotification");
    qword_1ECDA4EE0 = (uint64_t)CFSTR("kCTSimSupportUICCAuthenticationInfoNotification");
    qword_1ECDA4EE8 = (uint64_t)CFSTR("kCTTimeAvailabilityNotification");
    qword_1ECDA4EF0 = (uint64_t)CFSTR("kCTTimeUpdateNotification");
    qword_1ECDA4EF8 = (uint64_t)CFSTR("kCTTimezoneUpdateNotification");
    qword_1ECDA4F00 = (uint64_t)CFSTR("kCTUSSDSessionBeginNotification");
    qword_1ECDA4F08 = (uint64_t)CFSTR("kCTUSSDSessionEndNotification");
    qword_1ECDA4F10 = (uint64_t)CFSTR("kCTUSSDSessionErrorNotification");
    qword_1ECDA4F18 = (uint64_t)CFSTR("kCTUSSDSessionStringNotification");
    qword_1ECDA4F20 = (uint64_t)CFSTR("kCTUSSDSessionTerminatedNotification");
    qword_1ECDA4F28 = (uint64_t)CFSTR("kCTVVMAssertionActiveNotification");
    qword_1ECDA4F30 = (uint64_t)CFSTR("kCTVoicePrivacyStatusChangeNotification");
    qword_1ECDA4F38 = (uint64_t)CFSTR("kCTVoicemailDatabaseResetNotification");
    qword_1ECDA4F40 = (uint64_t)CFSTR("kCTVoicemailWakeupNotification");
  }
  v2 = 163;
  do
  {
    v4 = (const __CFString **)&v3[v2 >> 1];
    v6 = *v4;
    v5 = (uint64_t *)(v4 + 1);
    if (CFStringCompare(v6, theString2, 0) == kCFCompareLessThan)
    {
      v3 = v5;
      v2 += ~(v2 >> 1);
    }
    else
    {
      v2 >>= 1;
    }
  }
  while (v2);
  if (v3 == &-[CoreTelephonyClient supportsCellular]::onceToken)
    return 0;
  result = CFEqual((CFTypeRef)*v3, theString2);
  if (!(_DWORD)result)
    return result;
    return 0;
  else
    return *(unsigned int *)((char *)&sCTEventForNotificationString(__CFString const*)::kRightMappedValues
                           + (((char *)v3
}

void CCMonitor::initialize(NSObject **this)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v3;
  _QWORD *v4;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, this, (CFNotificationCallback)CCMonitor::sHandleDaemonReady, CFSTR("kCTDaemonReadyNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  this[2] = 1;
  v3 = *this;
  v4 = (_QWORD *)operator new();
  *v4 = 1;
  dispatch_async_f(v3, v4, (dispatch_function_t)dispatch::async<CCMonitor::initialize(void)::$_0>(dispatch_queue_s *,std::unique_ptr<CCMonitor::initialize(void)::$_0,std::default_delete<CCMonitor::initialize(void)::$_0>>)::{lambda(void *)#1}::__invoke);
}

void ___ZL24_CTServerConnectXpc_syncP13CTServerStateP16dispatch_queue_sU13block_pointerFvvE_block_invoke(uint64_t a1, void *a2)
{
  xpc_object_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  char v21;
  xpc_object_t v22;
  xpc_object_t v23;
  const void *v24;
  int v25;
  uint64_t *v26;
  int v27;
  int v28;
  BOOL v29;
  const void *v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  void *v36;
  uint64_t v37;
  const void *v38;
  xpc_object_t object;

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = MEMORY[0x186DBAE5C](a2);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 == MEMORY[0x1E0C812F8])
  {
    if (v2)
    {
      xpc_retain(v2);
      v9 = v2;
    }
    else
    {
      v9 = xpc_null_create();
      if (!v9)
      {
        v22 = xpc_null_create();
        xpc_release(0);
        goto LABEL_37;
      }
    }
    if (MEMORY[0x186DBAE5C](v9) == v5)
    {
      xpc_retain(v9);
      v22 = v9;
    }
    else
    {
      v22 = xpc_null_create();
    }
    xpc_release(v9);
    if (v2)
    {
      xpc_retain(v2);
LABEL_38:
      if (MEMORY[0x186DBAE5C](v2) == v5)
      {
        xpc_retain(v2);
        v23 = v2;
        goto LABEL_41;
      }
LABEL_39:
      v23 = xpc_null_create();
LABEL_41:
      v24 = *(const void **)(v3 + 128);
      if (v24)
      {
        CFRetain(*(CFTypeRef *)(v3 + 128));
        v33 = MEMORY[0x1E0C809B0];
        v34 = 1174405120;
        v35 = ___ZL19sHandleNotificationP13CTServerStateN3xpc4dictE_block_invoke;
        v36 = &__block_descriptor_tmp_83;
        v37 = v3;
        v38 = v24;
        object = v23;
        if (v23)
          xpc_retain(v23);
        else
          object = xpc_null_create();
        CTServerState::dispatchToClient_sync(v3, &v33);
        xpc_release(object);
      }
      xpc_release(v23);
      xpc_release(v2);
      xpc_release(v22);
      return;
    }
LABEL_37:
    v2 = xpc_null_create();
    if (!v2)
      goto LABEL_39;
    goto LABEL_38;
  }
  if (v2 == (xpc_object_t)MEMORY[0x1E0C81260])
  {
    if (MEMORY[0x186DBAE5C](*(_QWORD *)v3) != MEMORY[0x1E0C812E0])
      return;
    v10 = xpc_null_create();
    v11 = xpc_null_create();
    v12 = *(void **)v3;
    *(_QWORD *)v3 = v10;
    xpc_release(v12);
    xpc_release(v11);
    if (sNeverReconnect == 1)
      *(_BYTE *)(v3 + 136) = 0;
    if (*(_DWORD *)(v3 + 140) != 2)
      *(_DWORD *)(v3 + 140) = 2;
    v13 = *(uint64_t **)(v3 + 40);
    if (!v13)
      return;
    v14 = *(uint64_t **)(v3 + 40);
    while (1)
    {
      v15 = *((_DWORD *)v14 + 8);
      if (v15 < 0)
      {
        if (v15 == -1)
        {
          v16 = 0;
          while (1)
          {
LABEL_77:
            v32 = *((_DWORD *)v13 + 8);
            if (v32 <= -2)
            {
              if (v32 == -2)
                goto LABEL_82;
              ++v13;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
            {
              if ((v16 & 1) != 0)
                return;
LABEL_82:
              if (*(_BYTE *)(v3 + 136))
                CTServerState::sendNotification_sync((_QWORD *)v3, -2, CFSTR("kCTConnectionInvalidatedNotification"), 0);
              return;
            }
          }
        }
        ++v14;
      }
      v14 = (uint64_t *)*v14;
      if (!v14)
      {
        v16 = 1;
        goto LABEL_77;
      }
    }
  }
  if (v2 != (xpc_object_t)MEMORY[0x1E0C81258])
  {
    if (v2 == (xpc_object_t)MEMORY[0x1E0C81288])
      return;
    v6 = (char *)MEMORY[0x186DBADB4](v2);
    v7 = **(NSObject ***)(v3 + 80);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      ___ZL24_CTServerConnectXpc_syncP13CTServerStateP16dispatch_queue_sU13block_pointerFvvE_block_invoke_cold_1(v6, v7, v8);
      if (!v6)
        return;
    }
    else if (!v6)
    {
      return;
    }
    free(v6);
    return;
  }
  v17 = *(_QWORD *)(v3 + 48);
  if (!v17)
    goto LABEL_65;
  v18 = *(uint64_t **)(v3 + 40);
  if (!v18)
  {
    v25 = 1;
    goto LABEL_64;
  }
  v19 = *(uint64_t **)(v3 + 40);
  while (1)
  {
    v20 = *((_DWORD *)v19 + 8);
    if (v20 < 0)
      break;
LABEL_28:
    v19 = (uint64_t *)*v19;
    if (!v19)
    {
      v21 = 1;
      goto LABEL_50;
    }
  }
  if (v20 != -1)
  {
    ++v19;
    goto LABEL_28;
  }
  v21 = 0;
LABEL_50:
  v26 = *(uint64_t **)(v3 + 40);
  while (2)
  {
    v27 = *((_DWORD *)v26 + 8);
    if (v27 > -3)
    {
LABEL_54:
      v26 = (uint64_t *)*v26;
      if (!v26)
      {
        v25 = 1;
        goto LABEL_57;
      }
      continue;
    }
    break;
  }
  if (v27 != -3)
  {
    ++v26;
    goto LABEL_54;
  }
  v25 = 0;
  do
  {
LABEL_57:
    v28 = *((_DWORD *)v18 + 8);
    if (v28 <= -2)
    {
      if (v28 == -2)
        goto LABEL_62;
      ++v18;
    }
    v18 = (uint64_t *)*v18;
  }
  while (v18);
  if ((v21 & 1) != 0)
    goto LABEL_64;
LABEL_62:
  if (*(_BYTE *)(v3 + 136))
    CTServerState::sendNotification_sync((_QWORD *)v3, -2, CFSTR("kCTConnectionInvalidatedNotification"), 0);
LABEL_64:
  if (v17 == (v25 ^ 1))
LABEL_65:
    v29 = *(_QWORD *)(v3 + 72) == 0;
  else
    v29 = 0;
  if (sNeverReconnect == 1)
  {
    *(_BYTE *)(v3 + 136) = 0;
  }
  else
  {
    if (!*(_BYTE *)(v3 + 136))
      v29 = 1;
    if (!v29)
    {
      v30 = *(const void **)(v3 + 128);
      if (v30)
      {
        v31 = **(NSObject ***)(v3 + 80);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v33) = 0;
          _os_log_impl(&dword_18425C000, v31, OS_LOG_TYPE_DEFAULT, "#I Connection interrupted. Attempting to reestablish connection", (uint8_t *)&v33, 2u);
        }
        CFRetain(v30);
        v33 = MEMORY[0x1E0C809B0];
        v34 = 0x40000000;
        v35 = ___ZL12_XpcCallbackPvP13CTServerState_block_invoke;
        v36 = &__block_descriptor_tmp_58;
        v37 = v3;
        v38 = v30;
        CTServerState::dispatchToClient_sync(v3, &v33);
      }
    }
  }
}

void xpc::dict::object_proxy::operator xpc::dict(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
      goto LABEL_5;
  }
  if (MEMORY[0x186DBAE5C](v4) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v4);
    goto LABEL_7;
  }
LABEL_5:
  *a2 = xpc_null_create();
LABEL_7:
  xpc_release(v4);
}

__CFString *sNotificationStringForCTEvent(int a1)
{
  __CFString *result;
  __CFString **v3;

  result = 0;
  switch(a1)
  {
    case -3:
      v3 = kCTDaemonReadyNotification;
      goto LABEL_165;
    case -2:
      v3 = kCTConnectionInvalidatedNotification;
      goto LABEL_165;
    case 1:
      v3 = kCTCallStatusChangeNotification;
      goto LABEL_165;
    case 2:
      v3 = kCTCallStatusBecameAlertingNotification;
      goto LABEL_165;
    case 3:
      v3 = kCTCallSubTypeChangeNotification;
      goto LABEL_165;
    case 4:
      v3 = kCTCallIdentificationChangeNotification;
      goto LABEL_165;
    case 5:
      v3 = kCTCallForwardedNotification;
      goto LABEL_165;
    case 6:
      v3 = kCTCallControlFailureNotification;
      goto LABEL_165;
    case 7:
      v3 = kCTCallCauseCodeNotification;
      goto LABEL_165;
    case 8:
      v3 = kCTCallAudioToneRelayNotification;
      goto LABEL_165;
    case 9:
      v3 = kCTCallMediaStatusActiveNotification;
      goto LABEL_165;
    case 10:
      v3 = kCTCallMediaStatusInactiveNotification;
      goto LABEL_165;
    case 11:
      v3 = kCTUSSDSessionBeginNotification;
      goto LABEL_165;
    case 12:
      v3 = kCTUSSDSessionStringNotification;
      goto LABEL_165;
    case 13:
      v3 = kCTUSSDSessionEndNotification;
      goto LABEL_165;
    case 14:
      v3 = kCTUSSDSessionErrorNotification;
      goto LABEL_165;
    case 15:
      v3 = kCTUSSDSessionTerminatedNotification;
      goto LABEL_165;
    case 16:
      v3 = kCTIndicatorsSignalStrengthNotification;
      goto LABEL_165;
    case 18:
      v3 = kCTIndicatorsVoiceMailNotification;
      goto LABEL_165;
    case 19:
      v3 = kCTIndicatorsSUPLINITNotification;
      goto LABEL_165;
    case 20:
      v3 = kCTIndicatorsUnconditionalCallForwardingNotification;
      goto LABEL_165;
    case 21:
      v3 = kCTIndicatorsTimeUpdateNotification;
      goto LABEL_165;
    case 22:
      v3 = kCTIndicatorsDstUpdateNotification;
      goto LABEL_165;
    case 23:
      v3 = kCTSMSMessageReceivedNotification;
      goto LABEL_165;
    case 24:
      v3 = kCTSMSMessageSentNotification;
      goto LABEL_165;
    case 25:
      v3 = kCTSMSMessageSendErrorNotificiation;
      goto LABEL_165;
    case 26:
      v3 = kCTSMSClass0StringReceivedNotification;
      goto LABEL_165;
    case 27:
      v3 = kCTSMSCellBroadcastStringReceivedNotification;
      goto LABEL_165;
    case 28:
      v3 = kCTSMSCellBroadcastTelemetryNotification;
      goto LABEL_165;
    case 29:
      v3 = kCTEventSMSMessageCellBroadcastStringGeofencingStarted;
      goto LABEL_165;
    case 30:
      v3 = kCTSMSTestMessageReceivedNotification;
      goto LABEL_165;
    case 31:
      v3 = kCTMessageReceivedNotification;
      goto LABEL_165;
    case 32:
      v3 = kCTMessageReceiveDeferredNotification;
      goto LABEL_165;
    case 33:
      v3 = kCTMessageSentNotification;
      goto LABEL_165;
    case 34:
      v3 = kCTMessageSendErrorNotification;
      goto LABEL_165;
    case 35:
      v3 = kCTMessageSendProgressNotification;
      goto LABEL_165;
    case 36:
      v3 = kCTMMSConfigurationChangeNotification;
      goto LABEL_165;
    case 37:
      v3 = kCTPhoneBookSelectedNotification;
      goto LABEL_165;
    case 38:
      v3 = kCTPhoneBookFetchNotification;
      goto LABEL_165;
    case 39:
      v3 = kCTPhoneBookWriteNotification;
      goto LABEL_165;
    case 40:
      v3 = kCTPhoneBookErrorNotification;
      goto LABEL_165;
    case 41:
      v3 = kCTPowerRadioModuleNotReadyErrorNotification;
      goto LABEL_165;
    case 43:
      v3 = kCTRegistrationCellChangedNotification;
      goto LABEL_165;
    case 44:
      v3 = kCTRegistrationNewServingNetworkNotification;
      goto LABEL_165;
    case 45:
      v3 = kCTRegistrationOperatorNameChangedNotification;
      goto LABEL_165;
    case 46:
      v3 = kCTRegistrationStatusChangedNotification;
      goto LABEL_165;
    case 47:
      v3 = kCTRegistrationDisplayStatusChangedNotification;
      goto LABEL_165;
    case 48:
      v3 = kCTRegistrationCauseCodeNotification;
      goto LABEL_165;
    case 49:
      v3 = kCTRegistrationNetworkListAvailableNotification;
      goto LABEL_165;
    case 50:
      v3 = kCTRegistrationNetworkListFailedNotification;
      goto LABEL_165;
    case 51:
      v3 = kCTRegistrationDataStatusChangedNotification;
      goto LABEL_165;
    case 52:
      v3 = kCTRegistrationDataActivateFailedNotification;
      goto LABEL_165;
    case 53:
      v3 = kCTSettingRequestSuccessNotification;
      goto LABEL_165;
    case 54:
      v3 = kCTSettingRequestErrorNotification;
      goto LABEL_165;
    case 55:
      v3 = kCTSettingSaveSuccessNotification;
      goto LABEL_165;
    case 56:
      v3 = kCTSettingSaveErrorNotification;
      goto LABEL_165;
    case 57:
      v3 = kCTSettingChangedNotification;
      goto LABEL_165;
    case 58:
      v3 = kCTSIMSupportSIMStatusChangeNotification;
      goto LABEL_165;
    case 59:
      v3 = kCTSIMSupportSIMPINEntryErrorNotification;
      goto LABEL_165;
    case 60:
      v3 = kCTSIMSupportSIMPUKEntryErrorNotification;
      goto LABEL_165;
    case 61:
      v3 = kCTCellMonitorUpdateNotification;
      goto LABEL_165;
    case 62:
      v3 = kCTPowerRadioModuleDeadNotification;
      goto LABEL_165;
    case 63:
      v3 = kCTSIMSupportSIMNewInsertionNotification;
      goto LABEL_165;
    case 64:
      v3 = kCTSIMToolkitControlCallNotification;
      goto LABEL_165;
    case 65:
      v3 = kCTSIMToolkitControlSSNotification;
      goto LABEL_165;
    case 66:
      v3 = kCTSIMToolkitControlUSSDNotification;
      goto LABEL_165;
    case 67:
      v3 = kCTSIMToolkitDisplayTextNotification;
      goto LABEL_165;
    case 68:
      v3 = kCTSIMToolkitGetInputNotification;
      goto LABEL_165;
    case 69:
      v3 = kCTSIMToolkitPlayToneNotification;
      goto LABEL_165;
    case 70:
      v3 = kCTSIMToolkitDisplayListNotification;
      goto LABEL_165;
    case 71:
      v3 = kCTSIMToolkitSentSMSMessageNotification;
      goto LABEL_165;
    case 72:
      v3 = kCTSIMToolkitSentSSNotification;
      goto LABEL_165;
    case 73:
      v3 = kCTSIMToolkitSentUSSDNotification;
      goto LABEL_165;
    case 74:
      v3 = kCTSIMToolkitCallSetUpNotification;
      goto LABEL_165;
    case 75:
      v3 = kCTSIMToolkitLocalInformationNotification;
      goto LABEL_165;
    case 76:
      v3 = kCTSIMToolkitRequestUserAttentionNotification;
      goto LABEL_165;
    case 77:
      v3 = kCTSIMToolkitIdleTextNotification;
      goto LABEL_165;
    case 78:
      v3 = kCTSIMToolkitSentDTMFNotification;
      goto LABEL_165;
    case 79:
      v3 = kCTSIMToolkitLanguageNotification;
      goto LABEL_165;
    case 80:
      v3 = kCTAudioVoiceMuteStatusNotification;
      goto LABEL_165;
    case 81:
      v3 = kCTAudioTTYModeStatusNotification;
      goto LABEL_165;
    case 82:
      v3 = kCTSettingCallCapabilitiesChangedNotification;
      goto LABEL_165;
    case 83:
      v3 = kCTSettingPhoneNumberChangedNotification;
      goto LABEL_165;
    case 84:
      v3 = kCTSMSSignificantChangeNotification;
      goto LABEL_165;
    case 85:
      v3 = kCTAudioCallDropToneCompleteNotification;
      goto LABEL_165;
    case 86:
      v3 = kCTSIMToolkitSessionCompleteNotification;
      goto LABEL_165;
    case 87:
      v3 = kCTSMSDatabaseFullNotification;
      goto LABEL_165;
    case 88:
      v3 = kCTCallDeflectedNotification;
      goto LABEL_165;
    case 89:
      v3 = kCTCallBarredNotification;
      goto LABEL_165;
    case 90:
      v3 = kCTCallIdentificationSuppressionRejectedNotification;
      goto LABEL_165;
    case 91:
      v3 = kCTCallForwardingActiveNotification;
      goto LABEL_165;
    case 92:
      v3 = kCTEmergencyCallStatusChangeNotification;
      goto LABEL_165;
    case 93:
      v3 = kCTEmergencyCallContextNotification;
      goto LABEL_165;
    case 94:
      v3 = kCTRegistrationCustomerServiceProfileUpdateNotification;
      goto LABEL_165;
    case 95:
      v3 = kCTCellularDataPlanStatusNotification;
      goto LABEL_165;
    case 96:
      v3 = kCTPhoneNumberRegistrationResponseNotification;
      goto LABEL_165;
    case 97:
      v3 = kCTRegistrationCellularDataPlanActivateFailedNotification;
      goto LABEL_165;
    case 98:
      v3 = kCTRegistrationCellularDataPlanHideIndicatorNotification;
      goto LABEL_165;
    case 99:
      v3 = kCTIndicatorRadioTransmitNotification;
      goto LABEL_165;
    case 100:
      v3 = kCTRadioTransmitSpeedNotification;
      goto LABEL_165;
    case 101:
      v3 = kCTCarrierSettingsNewCarrierNotification;
      goto LABEL_165;
    case 102:
      v3 = kCTCarrierSettingsNewOperatorNotification;
      goto LABEL_165;
    case 103:
      v3 = kCTPhoneNumberRegistrationRequestFinishedNotification;
      goto LABEL_165;
    case 104:
      v3 = kCTCallAlternateStatusChangeNotification;
      goto LABEL_165;
    case 105:
      v3 = kCTCallServiceRequestDialNotification;
      goto LABEL_165;
    case 106:
      v3 = kCTCallServiceRequestAnswerNotification;
      goto LABEL_165;
    case 108:
      v3 = kCTVoicePrivacyStatusChangeNotification;
      goto LABEL_165;
    case 109:
      v3 = kCTOtaspStatusChangeNotification;
      goto LABEL_165;
    case 110:
      v3 = kCTEmergencyCallBackModeStatusNotification;
      goto LABEL_165;
    case 111:
      v3 = kCTCallManagementStateChangeNotification;
      goto LABEL_165;
    case 112:
      v3 = kCTDTMFDigitsChangedNotification;
      goto LABEL_165;
    case 113:
      v3 = kCTPostponementStatusChangeNotification;
      goto LABEL_165;
    case 114:
      v3 = kCTServiceProvisioningStartedNotification;
      goto LABEL_165;
    case 115:
      v3 = kCTServiceProvisioningSuccessfulNotification;
      goto LABEL_165;
    case 116:
      v3 = kCTServiceProvisioningFailedNotification;
      goto LABEL_165;
    case 117:
      v3 = kCTSPCUnlockSuccessfulNotification;
      goto LABEL_165;
    case 118:
      v3 = kCTPowerRadioModuleEnterLowPowerNotification;
      goto LABEL_165;
    case 119:
      v3 = kCTPowerRadioModuleEnteredLowPowerNotification;
      goto LABEL_165;
    case 120:
      v3 = kCTPowerRadioModuleExitLowPowerNotification;
      goto LABEL_165;
    case 121:
      v3 = kCTIndicatorsBeginStateDumpNotification;
      goto LABEL_165;
    case 122:
      v3 = kCTIndicatorsEndStateDumpNotification;
      goto LABEL_165;
    case 123:
      v3 = kCTQualityOfServiceFlowStatusChangeNotification;
      goto LABEL_165;
    case 124:
      v3 = kCTCarrierEntitlementsInfoAvailableNotification;
      goto LABEL_165;
    case 125:
      v3 = kCTCarrierEntitlementsAuthTokenAvailable;
      goto LABEL_165;
    case 126:
      v3 = kCTPowerRadioModuleReadyNotification;
      goto LABEL_165;
    case 127:
      v3 = kCTPhoneNumberRegistrationStateNotification;
      goto LABEL_165;
    case 128:
      v3 = kCTSettingPhoneNumberAvailableNotification;
      goto LABEL_165;
    case 129:
      v3 = kCTAudioVocoderInfoNotification;
      goto LABEL_165;
    case 130:
      v3 = kCTAudioSampleRateSwitchCompleteNotification;
      goto LABEL_165;
    case 131:
      v3 = kCTTimeUpdateNotification;
      goto LABEL_165;
    case 132:
      v3 = kCTTimezoneUpdateNotification;
      goto LABEL_165;
    case 133:
      v3 = kCTTimeAvailabilityNotification;
      goto LABEL_165;
    case 134:
      v3 = kCTVoicemailDatabaseResetNotification;
      goto LABEL_165;
    case 135:
      v3 = kCTVoicemailWakeupNotification;
      goto LABEL_165;
    case 136:
      v3 = kCTSimSupportUICCAuthenticationInfoNotification;
      goto LABEL_165;
    case 137:
      v3 = kCTCellularDataUsageInfoNotfication;
      goto LABEL_165;
    case 138:
      v3 = kCTRadioVoiceLinkQualityNotification;
      goto LABEL_165;
    case 141:
      v3 = kCTDataServiceAvailabilityNotification;
      goto LABEL_165;
    case 142:
      v3 = kCTCellularTransmitStateNotification;
      goto LABEL_165;
    case 143:
      v3 = kCTCallHandoverStartedNotification;
      goto LABEL_165;
    case 144:
      v3 = kCTCallHandoverEndedNotification;
      goto LABEL_165;
    case 145:
      v3 = kCTCallHandoverLikelyNotification;
      goto LABEL_165;
    case 146:
      v3 = kCTCallInputFrequencyLevelChangeNotification;
      goto LABEL_165;
    case 147:
      v3 = kCTCallOutputFrequencyLevelChangeNotification;
      goto LABEL_165;
    case 148:
      v3 = kCTPullCallIsPossibleChangeNotification;
      goto LABEL_165;
    case 149:
      v3 = kCTRadioEnhancedLinkQualityNotification;
      goto LABEL_165;
    case 150:
      v3 = kCTRadioEnhancedLinkQualitySupportedMetricsNotification;
      goto LABEL_165;
    case 151:
      v3 = kCTVVMAssertionActiveNotification;
      goto LABEL_165;
    case 152:
      v3 = kCTSMSReadyStateNotification;
      goto LABEL_165;
    case 153:
      v3 = kCTSetupAudioInterruptionsChangedNotification;
      goto LABEL_165;
    case 154:
      v3 = kCTRestrictedForegroundResumeNotification;
      goto LABEL_165;
    case 155:
      v3 = kCTReliableNetworkFallbackToCellularChangedNotification;
      goto LABEL_165;
    case 162:
      v3 = kCTIMSConnectionChangedNotification;
      goto LABEL_165;
    case 163:
      v3 = kCTBBKeepAliveOffloadStartNotification;
      goto LABEL_165;
    case 164:
      v3 = kCTBBKeepAliveOffloadStopNotification;
      goto LABEL_165;
    case 165:
      v3 = kCTCellularPlanSimSubscriptionStatusNotification;
      goto LABEL_165;
    case 166:
      v3 = kCTPerAppNetworkDataAccessPolicyChangedNotification;
      goto LABEL_165;
    case 167:
      v3 = kCTEntitlementsDiagnosticsNotification;
      goto LABEL_165;
    case 168:
      v3 = kCTRadioBasebandOperatingModeChangedNotification;
      goto LABEL_165;
    case 169:
      v3 = kCTRadioStateChangedNotification;
      goto LABEL_165;
    case 170:
      v3 = kCTCellularDataSettingsChangeNotification;
      goto LABEL_165;
    case 171:
      v3 = kCTEMBMSUpdateNotification;
      goto LABEL_165;
    case 172:
      v3 = kCTRadioModuleUplinkChangedNotification;
LABEL_165:
      result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

void CTServerState::sendNotification_sync(_QWORD *a1, int a2, const void *a3, const void *a4)
{
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  const void *v12;
  void *v13;
  uint64_t *v14;
  void *v15;
  const void *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD block[4];
  void *aBlock;
  const void *v26;
  const void *v27;
  _QWORD v28[4];
  void *v29;
  const void *v30;
  uint8_t buf[4];
  const void *v32;
  __int16 v33;
  const void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a1[16])
  {
    if (a1[2] || a1[1])
    {
      {
        CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog = (uint64_t)CFSTR("kCTRegistrationDisplayStatusChangedNotification");
      }
      v7 = a1[5];
      if (!v7)
        goto LABEL_25;
      v8 = a1 + 5;
      do
      {
        v9 = *(_DWORD *)(v7 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v7;
        else
          v11 = (uint64_t *)(v7 + 8);
        if (!v10)
          v8 = (_QWORD *)v7;
        v7 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 5 && *((_DWORD *)v8 + 8) <= a2 && (v12 = (const void *)v8[5]) != 0)
      {
        v13 = _Block_copy(v12);
        if (a4)
        {
          CFRetain(a4);
          v14 = &CTLogPacket_logger;
          if ((const void *)CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog == a3)
            v14 = &CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog;
          if ((char *)v14
             - (char *)&CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog != 8
            && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v32 = a3;
            v33 = 2112;
            v34 = a4;
            _os_log_impl(&dword_18425C000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "Processing %@: %@", buf, 0x16u);
          }
        }
        v28[0] = MEMORY[0x1E0C809B0];
        v28[1] = 1174405120;
        v28[2] = ___ZNK13CTServerState21sendNotification_syncE7CTEventPK10__CFStringPK14__CFDictionary_block_invoke;
        v28[3] = &__block_descriptor_tmp_3;
        if (v13)
          v15 = _Block_copy(v13);
        else
          v15 = 0;
        v29 = v15;
        v30 = a4;
        CTServerState::dispatchToClient_sync((uint64_t)a1, v28);
        v21 = v29;
        if (!v29)
          goto LABEL_39;
      }
      else
      {
LABEL_25:
        v16 = (const void *)a1[14];
        if (!v16)
          return;
        v13 = _Block_copy(v16);
        CFRetain(a3);
        if (a4)
        {
          CFRetain(a4);
          v17 = &CTLogPacket_logger;
          if ((const void *)CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog == a3)
            v17 = &CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog;
          if ((char *)v17
             - (char *)&CTServerState::sendNotification_sync(CTEvent,__CFString const*,__CFDictionary const*)const::notificationsToLog != 8
            && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v32 = a3;
            v33 = 2112;
            v34 = a4;
            _os_log_impl(&dword_18425C000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "Processing %@: %@", buf, 0x16u);
          }
        }
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 1174405120;
        block[2] = ___ZNK13CTServerState21sendNotification_syncE7CTEventPK10__CFStringPK14__CFDictionary_block_invoke_4;
        block[3] = &__block_descriptor_tmp_5_1;
        if (v13)
          v18 = _Block_copy(v13);
        else
          v18 = 0;
        aBlock = v18;
        v26 = a3;
        v27 = a4;
        CTServerState::dispatchToClient_sync((uint64_t)a1, block);
        v21 = aBlock;
        if (!aBlock)
          goto LABEL_39;
      }
      _Block_release(v21);
LABEL_39:
      if (v13)
        _Block_release(v13);
      return;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      CTServerState::sendNotification_sync((uint64_t)a3, v22, v23);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    CTServerState::sendNotification_sync((uint64_t)a3, v19, v20);
  }
}

void CTServerState::dispatchToClient_sync(uint64_t a1, dispatch_block_t block)
{
  __CFRunLoop *v3;
  const void *v4;
  NSObject *v5;

  v3 = *(__CFRunLoop **)(a1 + 16);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 24))
      v4 = *(const void **)(a1 + 24);
    else
      v4 = (const void *)*MEMORY[0x1E0C9B280];
    CFRunLoopPerformBlock(*(CFRunLoopRef *)(a1 + 16), v4, block);
    CFRunLoopWakeUp(v3);
  }
  else
  {
    v5 = *(NSObject **)(a1 + 8);
    if (v5)
      dispatch_async(v5, block);
  }
}

const __CFString *SymbolMapping::getSymbolMapping(const __CFString *this, const __CFString *a2)
{
  const __CFString *result;

  result = (const __CFString *)sGetCanonicalizedNotificationString(this);
  if (!result)
    return this;
  return result;
}

void SymbolMapping::mapAllSymbols(SymbolMapping *this@<X0>, _QWORD *a2@<X8>)
{
  CFMutableDictionaryRef Mutable;
  CFIndex Count;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t i;
  const __CFString *v11;
  CFTypeID v12;
  uint64_t CanonicalizedNotificationString;
  CFTypeID v14;
  CFTypeID TypeID;
  const __CFDictionary *v16;
  SymbolMapping *v17;
  CFTypeID v18;
  SymbolMapping *v19;
  CFTypeID v20;
  CFTypeID v21;
  const __CFString *v22;
  CFTypeID v23;
  uint64_t v24;
  const void *v25;
  __CFDictionary *v26;
  const __CFString *v27;
  void *value;
  void **values;
  void *v30;
  uint64_t v31;
  void **keys;
  void *v33;
  uint64_t v34;
  CFTypeRef cf;

  if (this)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    cf = Mutable;
    Count = CFDictionaryGetCount(this);
    keys = 0;
    v33 = 0;
    v34 = 0;
    if (Count)
    {
      v7 = Count;
      std::vector<void const*>::__vallocate[abi:nn180100](&keys, Count);
      v8 = (char *)v33;
      bzero(v33, 8 * v7);
      v33 = &v8[8 * v7];
      values = 0;
      v30 = 0;
      v31 = 0;
      std::vector<void const*>::__vallocate[abi:nn180100](&values, v7);
      v9 = (char *)v30;
      bzero(v30, 8 * v7);
      v30 = &v9[8 * v7];
      CFDictionaryGetKeysAndValues(this, (const void **)keys, (const void **)values);
      for (i = 0; i != v7; ++i)
      {
        v11 = (const __CFString *)keys[i];
        if (v11)
        {
          v12 = CFGetTypeID(keys[i]);
          if (v12 != CFStringGetTypeID())
            v11 = 0;
        }
        CanonicalizedNotificationString = sGetCanonicalizedNotificationString(v11);
        if (CanonicalizedNotificationString)
          v11 = (const __CFString *)CanonicalizedNotificationString;
        v14 = CFGetTypeID(values[i]);
        TypeID = CFDictionaryGetTypeID();
        v17 = (SymbolMapping *)values[i];
        if (v14 == TypeID)
        {
          if (v17)
          {
            v18 = CFGetTypeID(values[i]);
            if (v18 == CFDictionaryGetTypeID())
              v19 = v17;
            else
              v19 = 0;
          }
          else
          {
            v19 = 0;
          }
          value = 0;
          SymbolMapping::mapAllSymbols((uint64_t *)&value, v19, v16);
          CFDictionarySetValue(Mutable, v11, value);
          if (value)
            CFRelease(value);
        }
        else
        {
          v20 = CFGetTypeID(values[i]);
          v21 = CFStringGetTypeID();
          v22 = (const __CFString *)values[i];
          if (v20 == v21)
          {
            if (v22)
            {
              v23 = CFGetTypeID(values[i]);
              if (v23 != CFStringGetTypeID())
                v22 = 0;
            }
            v24 = sGetCanonicalizedNotificationString(v22);
            if (v24)
              v25 = (const void *)v24;
            else
              v25 = v22;
            v26 = Mutable;
            v27 = v11;
          }
          else
          {
            v26 = Mutable;
            v27 = v11;
            v25 = values[i];
          }
          CFDictionarySetValue(v26, v27, v25);
        }
      }
    }
    else
    {
      values = 0;
      v30 = 0;
      v31 = 0;
      CFDictionaryGetKeysAndValues(this, 0, 0);
    }
    ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(a2, &cf);
    if (values)
    {
      v30 = values;
      operator delete(values);
    }
    if (keys)
    {
      v33 = keys;
      operator delete(keys);
    }
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t sGetCanonicalizedNotificationString(CFStringRef theString2)
{
  unint64_t v2;
  uint64_t *v3;
  const __CFString **v4;
  uint64_t *v5;
  const __CFString *v6;

  {
    *(_QWORD *)algn_1ECDA3D48 = CFSTR("kCFSIMToolkitNextAction");
    qword_1ECDA3D50 = (uint64_t)CFSTR("kCFSIMToolkitNextActionDisplayList");
    unk_1ECDA3D58 = CFSTR("kCFSIMToolkitNextActionDisplayText");
    qword_1ECDA3D60 = (uint64_t)CFSTR("kCFSIMToolkitNextActionGetInput");
    unk_1ECDA3D68 = CFSTR("kCFSIMToolkitNextActionLaunchBrowser");
    qword_1ECDA3D70 = (uint64_t)CFSTR("kCFSIMToolkitNextActionOther");
    unk_1ECDA3D78 = CFSTR("kCFSIMToolkitNextActionPlayTone");
    qword_1ECDA3D80 = (uint64_t)CFSTR("kCFSIMToolkitNextActionSendSMS");
    unk_1ECDA3D88 = CFSTR("kCFSIMToolkitNextActionSendSS");
    qword_1ECDA3D90 = (uint64_t)CFSTR("kCFSIMToolkitNextActionSendUSSD");
    unk_1ECDA3D98 = CFSTR("kCFSIMToolkitNextActionSetUpCall");
    qword_1ECDA3DA0 = (uint64_t)CFSTR("kCTCallBarringSettingAvailableNotification");
    unk_1ECDA3DA8 = CFSTR("kCTCallBarringSettingReqeustErrorNotification");
    qword_1ECDA3DB0 = (uint64_t)CFSTR("kCTCallBarringSettingSaveErrorNotification");
    unk_1ECDA3DB8 = CFSTR("kCTCallBarringSettingSavedNotification");
    qword_1ECDA3DC0 = (uint64_t)CFSTR("kCTCallForwardingSettingAvailableNotification");
    unk_1ECDA3DC8 = CFSTR("kCTCallForwardingSettingReqeustErrorNotification");
    qword_1ECDA3DD0 = (uint64_t)CFSTR("kCTCallForwardingSettingSaveErrorNotification");
    unk_1ECDA3DD8 = CFSTR("kCTCallForwardingSettingSavedNotification");
    qword_1ECDA3DE0 = (uint64_t)CFSTR("kCTCallWaitingSettingAvailableNotification");
    unk_1ECDA3DE8 = CFSTR("kCTCallWaitingSettingReqeustErrorNotification");
    qword_1ECDA3DF0 = (uint64_t)CFSTR("kCTCallWaitingSettingSaveErrorNotification");
    unk_1ECDA3DF8 = CFSTR("kCTCallWaitingSettingSavedNotification");
    qword_1ECDA3E00 = (uint64_t)CFSTR("kCTCallingLineIdRestrictionSettingAvailableNotification");
    unk_1ECDA3E08 = CFSTR("kCTCallingLineIdRestrictionSettingReqeustErrorNotification");
    qword_1ECDA3E10 = (uint64_t)CFSTR("kCTCallingLineIdRestrictionSettingSaveErrorNotification");
    unk_1ECDA3E18 = CFSTR("kCTCallingLineIdRestrictionSettingSavedNotification");
    qword_1ECDA3E20 = (uint64_t)CFSTR("kCTCallingLinePresentationSettingAvailableNotification");
    unk_1ECDA3E28 = CFSTR("kCTCallingLinePresentationSettingReqeustErrorNotification");
    qword_1ECDA3E30 = (uint64_t)CFSTR("kCTCampOnly");
    unk_1ECDA3E38 = CFSTR("kCTCapabilityAgent3");
    qword_1ECDA3E40 = (uint64_t)CFSTR("kCTCapabilityBrandedCallingInfo");
    unk_1ECDA3E48 = CFSTR("kCTCapabilityCanChangeSetting");
    qword_1ECDA3E50 = (uint64_t)CFSTR("kCTCapabilityCanChangeSettingEnableStillProvisioning");
    unk_1ECDA3E58 = CFSTR("kCTCapabilityCannotChangeSettingNeedToCallCarrier");
    qword_1ECDA3E60 = (uint64_t)CFSTR("kCTCapabilityNetworkSlicing");
    unk_1ECDA3E68 = CFSTR("kCTCapabilityPhoneServices");
    qword_1ECDA3E70 = (uint64_t)CFSTR("kCTCapabilitySatellite");
    unk_1ECDA3E78 = CFSTR("kCTCapabilityTurnOffCellular");
    qword_1ECDA3E80 = (uint64_t)CFSTR("kCTCapabilityVoLTE");
    unk_1ECDA3E88 = CFSTR("kCTCapabilityWiFiCalling");
    qword_1ECDA3E90 = (uint64_t)CFSTR("kCTConnectedLineIdRestrictionSettingAvailableNotification");
    unk_1ECDA3E98 = CFSTR("kCTConnectedLineIdRestrictionSettingReqeustErrorNotification");
    qword_1ECDA3EA0 = (uint64_t)CFSTR("kCTConnectedLinePresentationSettingAvailableNotification");
    unk_1ECDA3EA8 = CFSTR("kCTConnectedLinePresentationSettingReqeustErrorNotification");
    qword_1ECDA3EB0 = (uint64_t)CFSTR("kCTEmergencyCallBackMode");
    unk_1ECDA3EB8 = CFSTR("kCTEncryptedIdentityWiFiCalling");
    qword_1ECDA3EC0 = (uint64_t)CFSTR("kCTEncryptedIdentityWiFiHotspot");
    unk_1ECDA3EC8 = CFSTR("kCTIMSConnectionType");
    qword_1ECDA3ED0 = (uint64_t)CFSTR("kCTIMSConnectionTypeCellular");
    unk_1ECDA3ED8 = CFSTR("kCTIMSConnectionTypeWifi");
    qword_1ECDA3EE0 = (uint64_t)CFSTR("kCTIMSIsConnectionUp");
    unk_1ECDA3EE8 = CFSTR("kCTIMSTransportType");
    qword_1ECDA3EF0 = (uint64_t)CFSTR("kCTIMSTransportTypeCellular");
    unk_1ECDA3EF8 = CFSTR("kCTIMSTransportTypeWiFi");
    qword_1ECDA3F00 = (uint64_t)CFSTR("kCTIndicatorsDstUpdateDstIsInEffect");
    unk_1ECDA3F08 = CFSTR("kCTIndicatorsGradedSignalStrength");
    qword_1ECDA3F10 = (uint64_t)CFSTR("kCTIndicatorsRawSignalStrength");
    unk_1ECDA3F18 = CFSTR("kCTIndicatorsSignalStrength");
    qword_1ECDA3F20 = (uint64_t)CFSTR("kCTIndicatorsSignalStrengthDisplayValue");
    unk_1ECDA3F28 = CFSTR("kCTIndicatorsSignalStrengthMaxDisplayValue");
    qword_1ECDA3F30 = (uint64_t)CFSTR("kCTIndicatorsTimeUpdateAbsoluteTime");
    unk_1ECDA3F38 = CFSTR("kCTIndicatorsTimeUpdateTimeZoneOffset");
    qword_1ECDA3F40 = (uint64_t)CFSTR("kCTIndicatorsUnconditionalCallForwarding");
    qword_1ECDA3F48 = (uint64_t)CFSTR("kCTLTEWithCDRXStateKey");
    qword_1ECDA3F50 = (uint64_t)CFSTR("kCTLTEWithCDRXStateOff");
    qword_1ECDA3F58 = (uint64_t)CFSTR("kCTLTEWithCDRXStateOn");
    qword_1ECDA3F60 = (uint64_t)CFSTR("kCTLTEWithCDRXStateUnknown");
    qword_1ECDA3F68 = (uint64_t)CFSTR("kCTNetworkSlicingCategories");
    qword_1ECDA3F70 = (uint64_t)CFSTR("kCTNetworkSlicingCategoryID");
    qword_1ECDA3F78 = (uint64_t)CFSTR("kCTNetworkSlicingCategoryName");
    qword_1ECDA3F80 = (uint64_t)CFSTR("kCTNetworkSlicingCategoryState");
    qword_1ECDA3F88 = (uint64_t)CFSTR("kCTRegistrationAbbreviatedOperatorName");
    qword_1ECDA3F90 = (uint64_t)CFSTR("kCTRegistrationBandActive");
    qword_1ECDA3F98 = (uint64_t)CFSTR("kCTRegistrationBandSupported");
    qword_1ECDA3FA0 = (uint64_t)CFSTR("kCTRegistrationC2KBaseId");
    qword_1ECDA3FA8 = (uint64_t)CFSTR("kCTRegistrationC2KBaseLat");
    qword_1ECDA3FB0 = (uint64_t)CFSTR("kCTRegistrationC2KBaseLong");
    qword_1ECDA3FB8 = (uint64_t)CFSTR("kCTRegistrationC2KNetworkId");
    qword_1ECDA3FC0 = (uint64_t)CFSTR("kCTRegistrationC2KSystemId");
    qword_1ECDA3FC8 = (uint64_t)CFSTR("kCTRegistrationCauseCode");
    qword_1ECDA3FD0 = (uint64_t)CFSTR("kCTRegistrationCellularDataPlanAccountURL");
    qword_1ECDA3FD8 = (uint64_t)CFSTR("kCTRegistrationCellularDataPlanNewAccount");
    qword_1ECDA3FE0 = (uint64_t)CFSTR("kCTRegistrationChangedDueToSimRemoval");
    qword_1ECDA3FE8 = (uint64_t)CFSTR("kCTRegistrationDataActivateFailure");
    qword_1ECDA3FF0 = (uint64_t)CFSTR("kCTRegistrationDataActivateFailureString");
    qword_1ECDA3FF8 = (uint64_t)CFSTR("kCTRegistrationDataActivationPreventionNotSupported");
    qword_1ECDA4000 = (uint64_t)CFSTR("kCTRegistrationDataActivationPreventionReason");
    qword_1ECDA4008 = (uint64_t)CFSTR("kCTRegistrationDataActivationPreventionReasonIntlRoamingOff");
    qword_1ECDA4010 = (uint64_t)CFSTR("kCTRegistrationDataActivationPreventionReasonOff");
    qword_1ECDA4018 = (uint64_t)CFSTR("kCTRegistrationDataActivationPreventionReasonSilentIntlRoamingOff");
    qword_1ECDA4020 = (uint64_t)CFSTR("kCTRegistrationDataActivationWasForMMS");
    qword_1ECDA4028 = (uint64_t)CFSTR("kCTRegistrationDataActive");
    qword_1ECDA4030 = (uint64_t)CFSTR("kCTRegistrationDataAttachOverride");
    qword_1ECDA4038 = (uint64_t)CFSTR("kCTRegistrationDataAttached");
    qword_1ECDA4040 = (uint64_t)CFSTR("kCTRegistrationDataConnectionServices");
    qword_1ECDA4048 = (uint64_t)CFSTR("kCTRegistrationDataContextID");
    qword_1ECDA4050 = (uint64_t)CFSTR("kCTRegistrationDataContextSuspended");
    qword_1ECDA4058 = (uint64_t)CFSTR("kCTRegistrationDataFamilyActive");
    qword_1ECDA4060 = (uint64_t)CFSTR("kCTRegistrationDataFamilyInactive");
    qword_1ECDA4068 = (uint64_t)CFSTR("kCTRegistrationDataHideIndicator");
    qword_1ECDA4070 = (uint64_t)CFSTR("kCTRegistrationDataIndicator");
    qword_1ECDA4078 = (uint64_t)CFSTR("kCTRegistrationDataIndicator2G");
    qword_1ECDA4080 = (uint64_t)CFSTR("kCTRegistrationDataIndicator2_5G");
    qword_1ECDA4088 = (uint64_t)CFSTR("kCTRegistrationDataIndicator3G");
    qword_1ECDA4090 = (uint64_t)CFSTR("kCTRegistrationDataIndicator3_5G");
    qword_1ECDA4098 = (uint64_t)CFSTR("kCTRegistrationDataIndicator3_75G");
    qword_1ECDA40A0 = (uint64_t)CFSTR("kCTRegistrationDataIndicator4G");
    qword_1ECDA40A8 = (uint64_t)CFSTR("kCTRegistrationDataIndicator4G_5GE");
    qword_1ECDA40B0 = (uint64_t)CFSTR("kCTRegistrationDataIndicator4G_LTEA");
    qword_1ECDA40B8 = (uint64_t)CFSTR("kCTRegistrationDataIndicator4G_LTEPlus");
    qword_1ECDA40C0 = (uint64_t)CFSTR("kCTRegistrationDataIndicator5G");
    qword_1ECDA40C8 = (uint64_t)CFSTR("kCTRegistrationDataIndicator5G_Plus");
    qword_1ECDA40D0 = (uint64_t)CFSTR("kCTRegistrationDataIndicator5G_UC");
    qword_1ECDA40D8 = (uint64_t)CFSTR("kCTRegistrationDataIndicator5G_Uwb");
    qword_1ECDA40E0 = (uint64_t)CFSTR("kCTRegistrationDataIndicator6G");
    qword_1ECDA40E8 = (uint64_t)CFSTR("kCTRegistrationDataIndicator7G");
    qword_1ECDA40F0 = (uint64_t)CFSTR("kCTRegistrationDataIndicator8G");
    qword_1ECDA40F8 = (uint64_t)CFSTR("kCTRegistrationDataIndicator9G");
    qword_1ECDA4100 = (uint64_t)CFSTR("kCTRegistrationDataIndicatorH_Plus");
    qword_1ECDA4108 = (uint64_t)CFSTR("kCTRegistrationDataIndicatorNone");
    qword_1ECDA4110 = (uint64_t)CFSTR("kCTRegistrationDataIndicatorOverride");
    qword_1ECDA4118 = (uint64_t)CFSTR("kCTRegistrationDataRate2G");
    qword_1ECDA4120 = (uint64_t)CFSTR("kCTRegistrationDataRate3G");
    qword_1ECDA4128 = (uint64_t)CFSTR("kCTRegistrationDataRate4G");
    qword_1ECDA4130 = (uint64_t)CFSTR("kCTRegistrationDataRate5G");
    qword_1ECDA4138 = (uint64_t)CFSTR("kCTRegistrationDataRate6G");
    qword_1ECDA4140 = (uint64_t)CFSTR("kCTRegistrationDataRate7G");
    qword_1ECDA4148 = (uint64_t)CFSTR("kCTRegistrationDataRate8G");
    qword_1ECDA4150 = (uint64_t)CFSTR("kCTRegistrationDataRate9G");
    qword_1ECDA4158 = (uint64_t)CFSTR("kCTRegistrationDataRateUnknown");
    qword_1ECDA4160 = (uint64_t)CFSTR("kCTRegistrationDataStatus");
    qword_1ECDA4168 = (uint64_t)CFSTR("kCTRegistrationDataStatusAttached");
    qword_1ECDA4170 = (uint64_t)CFSTR("kCTRegistrationDataStatusAttachedAndActive");
    qword_1ECDA4178 = (uint64_t)CFSTR("kCTRegistrationDataStatusInternationalRoaming");
    qword_1ECDA4180 = (uint64_t)CFSTR("kCTRegistrationDataStatusUnattached");
    qword_1ECDA4188 = (uint64_t)CFSTR("kCTRegistrationDisplayStatus");
    qword_1ECDA4190 = (uint64_t)CFSTR("kCTRegistrationGsmCellId");
    qword_1ECDA4198 = (uint64_t)CFSTR("kCTRegistrationGsmLac");
    qword_1ECDA41A0 = (uint64_t)CFSTR("kCTRegistrationIMSContext");
    qword_1ECDA41A8 = (uint64_t)CFSTR("kCTRegistrationIMSContextCellular");
    qword_1ECDA41B0 = (uint64_t)CFSTR("kCTRegistrationIMSContextWiFi");
    qword_1ECDA41B8 = (uint64_t)CFSTR("kCTRegistrationIMSStatus");
    qword_1ECDA41C0 = (uint64_t)CFSTR("kCTRegistrationIMSStatusSMS");
    qword_1ECDA41C8 = (uint64_t)CFSTR("kCTRegistrationIMSStatusVoice");
    qword_1ECDA41D0 = (uint64_t)CFSTR("kCTRegistrationIMSTransportType");
    qword_1ECDA41D8 = (uint64_t)CFSTR("kCTRegistrationIMSTransportTypeCellular");
    qword_1ECDA41E0 = (uint64_t)CFSTR("kCTRegistrationIMSTransportTypeWiFi");
    qword_1ECDA41E8 = (uint64_t)CFSTR("kCTRegistrationInHomeCountry");
    qword_1ECDA41F0 = (uint64_t)CFSTR("kCTRegistrationIsFemtoCell");
    qword_1ECDA41F8 = (uint64_t)CFSTR("kCTRegistrationIsForcedRegisteredHome");
    qword_1ECDA4200 = (uint64_t)CFSTR("kCTRegistrationMobileCountryCode");
    qword_1ECDA4208 = (uint64_t)CFSTR("kCTRegistrationMobileNetworkCode");
    qword_1ECDA4210 = (uint64_t)CFSTR("kCTRegistrationNetworkCode");
    qword_1ECDA4218 = (uint64_t)CFSTR("kCTRegistrationNetworkList");
    qword_1ECDA4220 = (uint64_t)CFSTR("kCTRegistrationNetworkListComplete");
    qword_1ECDA4228 = (uint64_t)CFSTR("kCTRegistrationNetworkName");
    qword_1ECDA4230 = (uint64_t)CFSTR("kCTRegistrationNetworkSelectionMenu");
    qword_1ECDA4238 = (uint64_t)CFSTR("kCTRegistrationNetworkSelectionModeAutomatic");
    qword_1ECDA4240 = (uint64_t)CFSTR("kCTRegistrationNetworkSelectionModeDisabled");
    qword_1ECDA4248 = (uint64_t)CFSTR("kCTRegistrationNetworkSelectionModeManual");
    qword_1ECDA4250 = (uint64_t)CFSTR("kCTRegistrationNetworkSelectionStateChosen");
    qword_1ECDA4258 = (uint64_t)CFSTR("kCTRegistrationNetworkSelectionStateIdle");
    qword_1ECDA4260 = (uint64_t)CFSTR("kCTRegistrationNetworkSelectionStateJoinedOnManual");
    qword_1ECDA4268 = (uint64_t)CFSTR("kCTRegistrationNetworkSelectionStateJoining");
    qword_1ECDA4270 = (uint64_t)CFSTR("kCTRegistrationNetworkSelectionStateScanned");
    qword_1ECDA4278 = (uint64_t)CFSTR("kCTRegistrationNetworkSelectionStateScanning");
    qword_1ECDA4280 = (uint64_t)CFSTR("kCTRegistrationNetworkSelectionStateUnknown");
    qword_1ECDA4288 = (uint64_t)CFSTR("kCTRegistrationOperatorName");
    qword_1ECDA4290 = (uint64_t)CFSTR("kCTRegistrationRATSelection12");
    qword_1ECDA4298 = (uint64_t)CFSTR("kCTRegistrationRATSelection13");
    qword_1ECDA42A0 = (uint64_t)CFSTR("kCTRegistrationRATSelection14");
    qword_1ECDA42A8 = (uint64_t)CFSTR("kCTRegistrationRATSelectionAutomatic");
    qword_1ECDA42B0 = (uint64_t)CFSTR("kCTRegistrationRATSelectionCDMA1x");
    qword_1ECDA42B8 = (uint64_t)CFSTR("kCTRegistrationRATSelectionCDMA1xEVDO");
    qword_1ECDA42C0 = (uint64_t)CFSTR("kCTRegistrationRATSelectionCDMAHybrid");
    qword_1ECDA42C8 = (uint64_t)CFSTR("kCTRegistrationRATSelectionDual");
    qword_1ECDA42D0 = (uint64_t)CFSTR("kCTRegistrationRATSelectionGSM");
    qword_1ECDA42D8 = (uint64_t)CFSTR("kCTRegistrationRATSelectionLTE");
    qword_1ECDA42E0 = (uint64_t)CFSTR("kCTRegistrationRATSelectionNR");
    qword_1ECDA42E8 = (uint64_t)CFSTR("kCTRegistrationRATSelectionNRNonStandAlone");
    qword_1ECDA42F0 = (uint64_t)CFSTR("kCTRegistrationRATSelectionNRStandAlone");
    qword_1ECDA42F8 = (uint64_t)CFSTR("kCTRegistrationRATSelectionTDSCDMA");
    qword_1ECDA4300 = (uint64_t)CFSTR("kCTRegistrationRATSelectionUMTS");
    qword_1ECDA4308 = (uint64_t)CFSTR("kCTRegistrationRATSelectionUnknown");
    qword_1ECDA4310 = (uint64_t)CFSTR("kCTRegistrationRadioAccessTechnology");
    qword_1ECDA4318 = (uint64_t)CFSTR("kCTRegistrationRadioAccessTechnologyCDMA1x");
    qword_1ECDA4320 = (uint64_t)CFSTR("kCTRegistrationRadioAccessTechnologyCDMAEVDO");
    qword_1ECDA4328 = (uint64_t)CFSTR("kCTRegistrationRadioAccessTechnologyCDMAHybrid");
    qword_1ECDA4330 = (uint64_t)CFSTR("kCTRegistrationRadioAccessTechnologyGSM");
    qword_1ECDA4338 = (uint64_t)CFSTR("kCTRegistrationRadioAccessTechnologyGSMCompact");
    qword_1ECDA4340 = (uint64_t)CFSTR("kCTRegistrationRadioAccessTechnologyLTE");
    qword_1ECDA4348 = (uint64_t)CFSTR("kCTRegistrationRadioAccessTechnologyNR");
    qword_1ECDA4350 = (uint64_t)CFSTR("kCTRegistrationRadioAccessTechnologyTDSCDMA");
    qword_1ECDA4358 = (uint64_t)CFSTR("kCTRegistrationRadioAccessTechnologyUTRAN");
    qword_1ECDA4360 = (uint64_t)CFSTR("kCTRegistrationRadioAccessTechnologyUnknown");
    qword_1ECDA4368 = (uint64_t)CFSTR("kCTRegistrationRadioAccessTechnologyeHRPD");
    qword_1ECDA4370 = (uint64_t)CFSTR("kCTRegistrationStatus");
    qword_1ECDA4378 = (uint64_t)CFSTR("kCTRegistrationStatusDenied");
    qword_1ECDA4380 = (uint64_t)CFSTR("kCTRegistrationStatusEmergencyOnly");
    qword_1ECDA4388 = (uint64_t)CFSTR("kCTRegistrationStatusNotRegistered");
    qword_1ECDA4390 = (uint64_t)CFSTR("kCTRegistrationStatusRegisteredHome");
    qword_1ECDA4398 = (uint64_t)CFSTR("kCTRegistrationStatusRegisteredRoaming");
    qword_1ECDA43A0 = (uint64_t)CFSTR("kCTRegistrationStatusSearching");
    qword_1ECDA43A8 = (uint64_t)CFSTR("kCTRegistrationStatusUnknown");
    qword_1ECDA43B0 = (uint64_t)CFSTR("kCTRegistrationSuppressRatIndicator");
    qword_1ECDA43B8 = (uint64_t)CFSTR("kCTReturnUnknownError");
    qword_1ECDA43C0 = (uint64_t)CFSTR("kCTSIMSupportIntegratedCircuitCardIdentity");
    qword_1ECDA43C8 = (uint64_t)CFSTR("kCTSIMSupportMobileSubscriberIdentity");
    qword_1ECDA43D0 = (uint64_t)CFSTR("kCTSIMSupportSIMPINEntryAttemptsRemainingCount");
    qword_1ECDA43D8 = (uint64_t)CFSTR("kCTSIMSupportSIMPUKEntryAttemptsRemainingCount");
    qword_1ECDA43E0 = (uint64_t)CFSTR("kCTSIMSupportSIMStatus");
    qword_1ECDA43E8 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusCorporateLocked");
    qword_1ECDA43F0 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusInserted");
    qword_1ECDA43F8 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusMemoryFailure");
    qword_1ECDA4400 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusNetworkLocked");
    qword_1ECDA4408 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusNotInserted");
    qword_1ECDA4410 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusNotReady");
    qword_1ECDA4418 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusOperatorLocked");
    qword_1ECDA4420 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusOperatorSubsetLocked");
    qword_1ECDA4428 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusPINLocked");
    qword_1ECDA4430 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusPUKLocked");
    qword_1ECDA4438 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusPermanentlyLocked");
    qword_1ECDA4440 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusReady");
    qword_1ECDA4448 = (uint64_t)CFSTR("kCTSIMSupportSIMStatusServiceProviderLocked");
    qword_1ECDA4450 = (uint64_t)CFSTR("kCTSIMSupportSIMTrayAbsent");
    qword_1ECDA4458 = (uint64_t)CFSTR("kCTSIMSupportSIMTrayInsertedNoSIM");
    qword_1ECDA4460 = (uint64_t)CFSTR("kCTSIMSupportSIMTrayInsertedWithSIM");
    qword_1ECDA4468 = (uint64_t)CFSTR("kCTSIMSupportSIMTrayStatusUnknown");
    qword_1ECDA4470 = (uint64_t)CFSTR("kCTSIMToolkitCallSetUpInCallIcon");
    qword_1ECDA4478 = (uint64_t)CFSTR("kCTSIMToolkitCallSetUpInCallText");
    qword_1ECDA4480 = (uint64_t)CFSTR("kCTSIMToolkitCallSetUpPhoneNumber");
    qword_1ECDA4488 = (uint64_t)CFSTR("kCTSIMToolkitCallSetUpPriority");
    qword_1ECDA4490 = (uint64_t)CFSTR("kCTSIMToolkitCallSetUpPriorityHigh");
    qword_1ECDA4498 = (uint64_t)CFSTR("kCTSIMToolkitCallSetUpPriorityLow");
    qword_1ECDA44A0 = (uint64_t)CFSTR("kCTSIMToolkitCallSetUpPriorityMedium");
    qword_1ECDA44A8 = (uint64_t)CFSTR("kCTSIMToolkitCallSetUpRedial");
    qword_1ECDA44B0 = (uint64_t)CFSTR("kCTSIMToolkitControlAllowed");
    qword_1ECDA44B8 = (uint64_t)CFSTR("kCTSIMToolkitControlModified");
    qword_1ECDA44C0 = (uint64_t)CFSTR("kCTSIMToolkitControlRejected");
    qword_1ECDA44C8 = (uint64_t)CFSTR("kCTSIMToolkitControlResult");
    qword_1ECDA44D0 = (uint64_t)CFSTR("kCTSIMToolkitDisplayListCount");
    qword_1ECDA44D8 = (uint64_t)CFSTR("kCTSIMToolkitDisplayListStyle");
    qword_1ECDA44E0 = (uint64_t)CFSTR("kCTSIMToolkitDisplayListStyleMenu");
    qword_1ECDA44E8 = (uint64_t)CFSTR("kCTSIMToolkitDisplayListStylePicker");
    qword_1ECDA44F0 = (uint64_t)CFSTR("kCTSIMToolkitDisplayTextOrderOutBehavior");
    qword_1ECDA44F8 = (uint64_t)CFSTR("kCTSIMToolkitDisplayTextOrderOutBehaviorClose");
    qword_1ECDA4500 = (uint64_t)CFSTR("kCTSIMToolkitDisplayTextOrderOutBehaviorSendOK");
    qword_1ECDA4508 = (uint64_t)CFSTR("kCTSIMToolkitDisplayTextPriority");
    qword_1ECDA4510 = (uint64_t)CFSTR("kCTSIMToolkitDisplayTextPriorityHigh");
    qword_1ECDA4518 = (uint64_t)CFSTR("kCTSIMToolkitDisplayTextPriorityNormal");
    qword_1ECDA4520 = (uint64_t)CFSTR("kCTSIMToolkitDisplayTextTerminalDelay");
    qword_1ECDA4528 = (uint64_t)CFSTR("kCTSIMToolkitDisplayTextTerminalDelayDisabled");
    qword_1ECDA4530 = (uint64_t)CFSTR("kCTSIMToolkitDisplayTextTerminalDelayEnabled");
    qword_1ECDA4538 = (uint64_t)CFSTR("kCTSIMToolkitGetInputDefaultText");
    qword_1ECDA4540 = (uint64_t)CFSTR("kCTSIMToolkitGetInputIsEditable");
    qword_1ECDA4548 = (uint64_t)CFSTR("kCTSIMToolkitGetInputIsSecret");
    qword_1ECDA4550 = (uint64_t)CFSTR("kCTSIMToolkitGetInputMaximumLength");
    qword_1ECDA4558 = (uint64_t)CFSTR("kCTSIMToolkitGetInputMinimumLength");
    qword_1ECDA4560 = (uint64_t)CFSTR("kCTSIMToolkitGetInputType");
    qword_1ECDA4568 = (uint64_t)CFSTR("kCTSIMToolkitGetInputTypeBoolean");
    qword_1ECDA4570 = (uint64_t)CFSTR("kCTSIMToolkitGetInputTypeDigits");
    qword_1ECDA4578 = (uint64_t)CFSTR("kCTSIMToolkitGetInputTypeString");
    qword_1ECDA4580 = (uint64_t)CFSTR("kCTSIMToolkitHelpAvailable");
    qword_1ECDA4588 = (uint64_t)CFSTR("kCTSIMToolkitIcon");
    qword_1ECDA4590 = (uint64_t)CFSTR("kCTSIMToolkitLanguage");
    qword_1ECDA4598 = (uint64_t)CFSTR("kCTSIMToolkitMenuItems");
    qword_1ECDA45A0 = (uint64_t)CFSTR("kCTSIMToolkitNoDisplay");
    qword_1ECDA45A8 = (uint64_t)CFSTR("kCTSIMToolkitNotificationResponseBack");
    qword_1ECDA45B0 = (uint64_t)CFSTR("kCTSIMToolkitNotificationResponseBusy");
    qword_1ECDA45B8 = (uint64_t)CFSTR("kCTSIMToolkitNotificationResponseCancelled");
    qword_1ECDA45C0 = (uint64_t)CFSTR("kCTSIMToolkitNotificationResponseHelp");
    qword_1ECDA45C8 = (uint64_t)CFSTR("kCTSIMToolkitNotificationResponseNotSupported");
    qword_1ECDA45D0 = (uint64_t)CFSTR("kCTSIMToolkitNotificationResponseRefused");
    qword_1ECDA45D8 = (uint64_t)CFSTR("kCTSIMToolkitNotificationResponseSuccess");
    qword_1ECDA45E0 = (uint64_t)CFSTR("kCTSIMToolkitNotificationResponseSuccessNoIcon");
    qword_1ECDA45E8 = (uint64_t)CFSTR("kCTSIMToolkitNotificationResponseTimeout");
    qword_1ECDA45F0 = (uint64_t)CFSTR("kCTSIMToolkitPlayTone");
    qword_1ECDA45F8 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneBusy");
    qword_1ECDA4600 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneCallDropped");
    qword_1ECDA4608 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneCallWaiting");
    qword_1ECDA4610 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneCongestion");
    qword_1ECDA4618 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneDial");
    qword_1ECDA4620 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneDuration");
    qword_1ECDA4628 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneError");
    qword_1ECDA4630 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneGeneralBeep");
    qword_1ECDA4638 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneNegativeAck");
    qword_1ECDA4640 = (uint64_t)CFSTR("kCTSIMToolkitPlayTonePositiveAck");
    qword_1ECDA4648 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneRadioPathAck");
    qword_1ECDA4650 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneRinging");
    qword_1ECDA4658 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneSMS");
    qword_1ECDA4660 = (uint64_t)CFSTR("kCTSIMToolkitPlayToneUserRing");
    qword_1ECDA4668 = (uint64_t)CFSTR("kCTSIMToolkitSentSSString");
    qword_1ECDA4670 = (uint64_t)CFSTR("kCTSIMToolkitSentUSSDString");
    qword_1ECDA4678 = (uint64_t)CFSTR("kCTSIMToolkitSession");
    qword_1ECDA4680 = (uint64_t)CFSTR("kCTSIMToolkitSimSlot");
    qword_1ECDA4688 = (uint64_t)CFSTR("kCTSIMToolkitText");
    qword_1ECDA4690 = (uint64_t)CFSTR("kCTSIMToolkitTimeout");
    qword_1ECDA4698 = (uint64_t)CFSTR("kCTSettingCallBarringFacility");
    qword_1ECDA46A0 = (uint64_t)CFSTR("kCTSettingCallBarringFacilityAllIncoming");
    qword_1ECDA46A8 = (uint64_t)CFSTR("kCTSettingCallBarringFacilityAllIncomingServices");
    qword_1ECDA46B0 = (uint64_t)CFSTR("kCTSettingCallBarringFacilityAllOutgoing");
    qword_1ECDA46B8 = (uint64_t)CFSTR("kCTSettingCallBarringFacilityAllOutgoingServices");
    qword_1ECDA46C0 = (uint64_t)CFSTR("kCTSettingCallBarringFacilityAllServices");
    qword_1ECDA46C8 = (uint64_t)CFSTR("kCTSettingCallBarringFacilityIncomingNotOnSim");
    qword_1ECDA46D0 = (uint64_t)CFSTR("kCTSettingCallBarringFacilityIncomingWhileRoamingOutsideHomeCountry");
    qword_1ECDA46D8 = (uint64_t)CFSTR("kCTSettingCallBarringFacilityOutgoingInternational");
    qword_1ECDA46E0 = (uint64_t)CFSTR("kCTSettingCallBarringFacilityOutgoingInternationalExceptHomeCountry");
    qword_1ECDA46E8 = (uint64_t)CFSTR("kCTSettingCallClass");
    qword_1ECDA46F0 = (uint64_t)CFSTR("kCTSettingCallClassData");
    qword_1ECDA46F8 = (uint64_t)CFSTR("kCTSettingCallClassDataCircuitAsync");
    qword_1ECDA4700 = (uint64_t)CFSTR("kCTSettingCallClassDataCircuitSync");
    qword_1ECDA4708 = (uint64_t)CFSTR("kCTSettingCallClassFax");
    qword_1ECDA4710 = (uint64_t)CFSTR("kCTSettingCallClassPADAccess");
    qword_1ECDA4718 = (uint64_t)CFSTR("kCTSettingCallClassPacketAccess");
    qword_1ECDA4720 = (uint64_t)CFSTR("kCTSettingCallClassShortMessageSerice");
    qword_1ECDA4728 = (uint64_t)CFSTR("kCTSettingCallClassVoice");
    qword_1ECDA4730 = (uint64_t)CFSTR("kCTSettingCallForwardingNoReplyTime");
    qword_1ECDA4738 = (uint64_t)CFSTR("kCTSettingCallForwardingNumber");
    qword_1ECDA4740 = (uint64_t)CFSTR("kCTSettingCallForwardingReason");
    qword_1ECDA4748 = (uint64_t)CFSTR("kCTSettingCallForwardingReasonAll");
    qword_1ECDA4750 = (uint64_t)CFSTR("kCTSettingCallForwardingReasonAllConditional");
    qword_1ECDA4758 = (uint64_t)CFSTR("kCTSettingCallForwardingReasonMobileBusy");
    qword_1ECDA4760 = (uint64_t)CFSTR("kCTSettingCallForwardingReasonNoReply");
    qword_1ECDA4768 = (uint64_t)CFSTR("kCTSettingCallForwardingReasonNotReachable");
    qword_1ECDA4770 = (uint64_t)CFSTR("kCTSettingCallForwardingReasonUnconditional");
    qword_1ECDA4778 = (uint64_t)CFSTR("kCTSettingCallingLineIdRestriction");
    qword_1ECDA4780 = (uint64_t)CFSTR("kCTSettingCallingLineIdRestrictionDisabled");
    qword_1ECDA4788 = (uint64_t)CFSTR("kCTSettingCallingLineIdRestrictionEnabled");
    qword_1ECDA4790 = (uint64_t)CFSTR("kCTSettingCallingLineIdRestrictionModifiable");
    qword_1ECDA4798 = (uint64_t)CFSTR("kCTSettingCallingLineIdRestrictionModification");
    qword_1ECDA47A0 = (uint64_t)CFSTR("kCTSettingCallingLineIdRestrictionNetworkControlled");
    qword_1ECDA47A8 = (uint64_t)CFSTR("kCTSettingCallingLineIdRestrictionNotAvailable");
    qword_1ECDA47B0 = (uint64_t)CFSTR("kCTSettingCallingLineIdRestrictionNotModifiable");
    qword_1ECDA47B8 = (uint64_t)CFSTR("kCTSettingCallingLineIdRestrictionTemporarilyDisabled");
    qword_1ECDA47C0 = (uint64_t)CFSTR("kCTSettingCallingLineIdRestrictionTemporarilyEnabled");
    qword_1ECDA47C8 = (uint64_t)CFSTR("kCTSettingCallingLineIdRestrictionUnknown");
    qword_1ECDA47D0 = (uint64_t)CFSTR("kCTSettingCallingLinePresentation");
    qword_1ECDA47D8 = (uint64_t)CFSTR("kCTSettingCallingLinePresentationDisabled");
    qword_1ECDA47E0 = (uint64_t)CFSTR("kCTSettingCallingLinePresentationEnabled");
    qword_1ECDA47E8 = (uint64_t)CFSTR("kCTSettingCallingLinePresentationNotAvailable");
    qword_1ECDA47F0 = (uint64_t)CFSTR("kCTSettingCallingLinePresentationUnknown");
    qword_1ECDA47F8 = (uint64_t)CFSTR("kCTSettingCallingNamePresentation");
    qword_1ECDA4800 = (uint64_t)CFSTR("kCTSettingCallingNamePresentationDisabled");
    qword_1ECDA4808 = (uint64_t)CFSTR("kCTSettingCallingNamePresentationEnabled");
    qword_1ECDA4810 = (uint64_t)CFSTR("kCTSettingCallingNamePresentationUnknown");
    qword_1ECDA4818 = (uint64_t)CFSTR("kCTSettingConnectedLineIdRestriction");
    qword_1ECDA4820 = (uint64_t)CFSTR("kCTSettingConnectedLineIdRestrictionAvailable");
    qword_1ECDA4828 = (uint64_t)CFSTR("kCTSettingConnectedLineIdRestrictionNotAvailable");
    qword_1ECDA4830 = (uint64_t)CFSTR("kCTSettingConnectedLineIdRestrictionUnknown");
    qword_1ECDA4838 = (uint64_t)CFSTR("kCTSettingConnectedLinePresentation");
    qword_1ECDA4840 = (uint64_t)CFSTR("kCTSettingConnectedLinePresentationDisabled");
    qword_1ECDA4848 = (uint64_t)CFSTR("kCTSettingConnectedLinePresentationEnabled");
    qword_1ECDA4850 = (uint64_t)CFSTR("kCTSettingConnectedLinePresentationNotAvailable");
    qword_1ECDA4858 = (uint64_t)CFSTR("kCTSettingConnectedLinePresentationUnknown");
    qword_1ECDA4860 = (uint64_t)CFSTR("kCTSettingEnabled");
    qword_1ECDA4868 = (uint64_t)CFSTR("kCTSettingMMIProcedure");
    qword_1ECDA4870 = (uint64_t)CFSTR("kCTSettingMMIProcedureActivation");
    qword_1ECDA4878 = (uint64_t)CFSTR("kCTSettingMMIProcedureDeactivation");
    qword_1ECDA4880 = (uint64_t)CFSTR("kCTSettingMMIProcedureErasure");
    qword_1ECDA4888 = (uint64_t)CFSTR("kCTSettingMMIProcedureInterrogation");
    qword_1ECDA4890 = (uint64_t)CFSTR("kCTSettingMMIProcedureRegistration");
    qword_1ECDA4898 = (uint64_t)CFSTR("kCTSettingMyEffectivePhoneNumber");
    qword_1ECDA48A0 = (uint64_t)CFSTR("kCTSettingMyPhoneNumber");
    qword_1ECDA48A8 = (uint64_t)CFSTR("kCTSettingMyPhoneNumberEditable");
    qword_1ECDA48B0 = (uint64_t)CFSTR("kCTSettingMyPhoneNumberExists");
    qword_1ECDA48B8 = (uint64_t)CFSTR("kCTSettingNewPassword");
    qword_1ECDA48C0 = (uint64_t)CFSTR("kCTSettingPIN2ErrorCode");
    qword_1ECDA48C8 = (uint64_t)CFSTR("kCTSettingPIN2ErrorCodeAsString");
    qword_1ECDA48D0 = (uint64_t)CFSTR("kCTSettingPINErrorCode");
    qword_1ECDA48D8 = (uint64_t)CFSTR("kCTSettingPINErrorCodeAsString");
    qword_1ECDA48E0 = (uint64_t)CFSTR("kCTSettingPassword");
    qword_1ECDA48E8 = (uint64_t)CFSTR("kCTSettingServiceCenterAddress");
    qword_1ECDA48F0 = (uint64_t)CFSTR("kCTSettingServiceCenterAddressAvailableNotification");
    qword_1ECDA48F8 = (uint64_t)CFSTR("kCTSettingServiceCenterAddressRequestErrorNotification");
    qword_1ECDA4900 = (uint64_t)CFSTR("kCTSettingServiceCenterAddressSaveErrorNotification");
    qword_1ECDA4908 = (uint64_t)CFSTR("kCTSettingServiceCenterAddressSavedNotification");
    qword_1ECDA4910 = (uint64_t)CFSTR("kCTSettingSupplementaryServiceType");
    qword_1ECDA4918 = (uint64_t)CFSTR("kCTSettingType");
    qword_1ECDA4920 = (uint64_t)CFSTR("kCTSettingTypeCallBarring");
    qword_1ECDA4928 = (uint64_t)CFSTR("kCTSettingTypeCallForwarding");
    qword_1ECDA4930 = (uint64_t)CFSTR("kCTSettingTypeCallWaiting");
    qword_1ECDA4938 = (uint64_t)CFSTR("kCTSettingTypeCallingLineIdRestriction");
    qword_1ECDA4940 = (uint64_t)CFSTR("kCTSettingTypeCallingLinePresentation");
    qword_1ECDA4948 = (uint64_t)CFSTR("kCTSettingTypeCallingNamePresentation");
    qword_1ECDA4950 = (uint64_t)CFSTR("kCTSettingTypeConnectedLineIdRestriction");
    qword_1ECDA4958 = (uint64_t)CFSTR("kCTSettingTypeConnectedLinePresentation");
    qword_1ECDA4960 = (uint64_t)CFSTR("kCTSettingTypePIN");
    qword_1ECDA4968 = (uint64_t)CFSTR("kCTSettingTypePIN2");
    qword_1ECDA4970 = (uint64_t)CFSTR("kCTSettingTypeSIMLock");
    qword_1ECDA4978 = (uint64_t)CFSTR("kCTSettingTypeServiceCenterAddress");
    qword_1ECDA4980 = (uint64_t)CFSTR("kCTSettingTypeSupplementaryServicePassword");
    qword_1ECDA4988 = (uint64_t)CFSTR("kCTUSSDSessionErrorCode");
    qword_1ECDA4990 = (uint64_t)CFSTR("kCTUSSDSessionErrorString");
    qword_1ECDA4998 = (uint64_t)CFSTR("kCTWirelessTechnologyCDMA2000");
    qword_1ECDA49A0 = (uint64_t)CFSTR("kCTWirelessTechnologyLTE");
    qword_1ECDA49A8 = (uint64_t)CFSTR("kCTWirelessTechnologyNR");
    qword_1ECDA49B0 = (uint64_t)CFSTR("kCTWirelessTechnologyType");
    qword_1ECDA49B8 = (uint64_t)CFSTR("kCTWirelessTechnologyUMTS");
    qword_1ECDA49C0 = (uint64_t)CFSTR("kCTWirelessTechnologyUnknown");
  }
  v2 = 401;
  do
  {
    v4 = (const __CFString **)&v3[v2 >> 1];
    v6 = *v4;
    v5 = (uint64_t *)(v4 + 1);
    if (CFStringCompare(v6, theString2, 0) == kCFCompareLessThan)
    {
      v3 = v5;
      v2 += ~(v2 >> 1);
    }
    else
    {
      v2 >>= 1;
    }
  }
  while (v2);
  if (v3 == &CTLogCoreAnalytics_once || !CFEqual((CFTypeRef)*v3, theString2))
    return 0;
    return 0;
  return *v3;
}

void sub_18427230C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842723D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  _Unwind_Resume(a1);
}

void CSIPhoneNumber::CSIPhoneNumber(CSIPhoneNumber *this, char *a2)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  CSIPhoneNumber::CSIPhoneNumber(this, (__int128 *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  CSIPhoneNumber::CSIPhoneNumber(this, (__int128 *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void CSIPhoneNumber::CSIPhoneNumber(CSIPhoneNumber *this, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)this = 0x8100000001;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (std::string *)((char *)this + 32);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 60) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_DWORD *)((char *)this + 111) = 0;
  *(_QWORD *)((char *)this + 116) = 0x400000000;
  *((_BYTE *)this + 124) = 0;
  *((_BYTE *)this + 128) = 0;
  CSIPhoneNumber::convertLettersToPhoneNumber(this);
}

std::string *CSIPhoneNumber::convertLettersToPhoneNumber(CSIPhoneNumber *this)
{
  _BYTE *v1;
  _BOOL8 v2;
  int v3;
  std::string *v4;
  _BYTE *v5;
  unsigned int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  __darwin_ct_rune_t v10;
  unsigned int v11;
  char v12;
  int v13;
  std::string *v15;

  v1 = (char *)this + 32;
  if (*((char *)this + 55) < 0)
    v1 = (_BYTE *)*((_QWORD *)this + 4);
  v15 = (std::string *)((char *)this + 32);
  v2 = *v1 == 43;
  if (*v1 == 43)
    v3 = 145;
  else
    v3 = 129;
  *((_DWORD *)this + 1) = v3;
  v4 = (std::string *)((char *)this + 8);
  if (*((char *)this + 31) < 0)
  {
    *((_QWORD *)this + 2) = 0;
    v5 = (_BYTE *)*((_QWORD *)this + 1);
  }
  else
  {
    *((_BYTE *)this + 31) = 0;
    v5 = (char *)this + 8;
  }
  *v5 = 0;
  LOBYTE(v6) = v1[v2];
  if ((_BYTE)v6)
  {
    v7 = &v1[v2 + 1];
    v8 = MEMORY[0x1E0C80978];
    while ((v6 & 0x80) == 0)
    {
      v9 = *(_DWORD *)(v8 + 4 * (char)v6 + 60);
      if ((v9 & 0x100) != 0)
        goto LABEL_16;
      if ((v9 & 0x400) == 0)
        goto LABEL_18;
LABEL_27:
      std::string::push_back(v4, v6);
LABEL_28:
      v13 = *v7++;
      LOBYTE(v6) = v13;
      if (!v13)
        return std::string::operator=(v15, v4);
    }
    if (!__maskrune((char)v6, 0x100uLL))
    {
LABEL_18:
      if (v6 > 0x3Fu || ((1 << v6) & 0x88001C0800000000) == 0)
        goto LABEL_28;
      goto LABEL_27;
    }
LABEL_16:
    v10 = __toupper((char)v6) << 24;
    if (v10 > 1342177279)
    {
      v11 = v10 >> 26;
      if (HIBYTE(v10) < 0x57u)
        v12 = 56;
      else
        v12 = 57;
      if (v11 >= 0x15)
        LOBYTE(v6) = v12;
      else
        LOBYTE(v6) = 55;
    }
    else
    {
      v6 = ((21846 * ((v10 >> 24) - 65)) >> 16) + ((21846 * ((v10 >> 24) - 65)) >> 31) + 50;
    }
    goto LABEL_27;
  }
  return std::string::operator=(v15, v4);
}

uint64_t CTTelephonyCenterSetDefaultRunloop(__CFRunLoop *a1, __CFString *a2)
{
  return sCTTelephonyCenterSetDefaultRunloop(0, a1, a2);
}

void sub_184272874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 112), 8);

  _Unwind_Resume(a1);
}

void CSIPhoneNumber::getFullNumber(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  std::string __p;

  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    __p = *(std::string *)((char *)this + 8);
  CSIPhoneNumber::getFullNumberHelper(&__p, (uint64_t)this, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void CSIPhoneNumber::getFullNumberHelper(std::string *__s@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  uint64_t v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string *v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string::size_type v18;
  const std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  std::string v24;
  char v25;

  if ((*(_DWORD *)(a2 + 4) & 0x70) != 0x10)
    goto LABEL_36;
  v5 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  size = __s->__r_.__value_.__l.__size_;
  v7 = (v5 & 0x80u) == 0 ? HIBYTE(__s->__r_.__value_.__r.__words[2]) : __s->__r_.__value_.__l.__size_;
  if (!v7)
    goto LABEL_36;
  v8 = __s;
  v9 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if ((v5 & 0x80) != 0)
  {
    v8 = (std::string *)__s->__r_.__value_.__r.__words[0];
    v9 = __s->__r_.__value_.__l.__size_;
  }
  if (v9 >= 4)
  {
    v10 = (std::string *)((char *)v8 + v9);
    v11 = v8;
    do
    {
      v12 = (std::string *)memchr(v11, 43, v9 - 3);
      if (!v12)
        break;
      if (LODWORD(v12->__r_.__value_.__l.__data_) == 825307179)
      {
        if (v12 == v10 || v12 != v8)
          break;
        v18 = v7 - 1;
        v19 = __s;
        v20 = 4;
LABEL_30:
        std::string::basic_string(&v24, v19, v20, v18, (std::allocator<char> *)&v25);
        if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s->__r_.__value_.__l.__data_);
        *__s = v24;
        goto LABEL_33;
      }
      v11 = (std::string *)((char *)&v12->__r_.__value_.__l.__data_ + 1);
      v9 = (char *)v10 - (char *)v11;
    }
    while ((char *)v10 - (char *)v11 >= 4);
  }
  v13 = __s;
  if ((v5 & 0x80) != 0)
  {
    v13 = (std::string *)__s->__r_.__value_.__r.__words[0];
    v5 = size;
  }
  if (v5 >= 3)
  {
    v14 = (std::string *)((char *)v13 + v5);
    v15 = v13;
    do
    {
      v16 = (std::string *)memchr(v15, 48, v5 - 2);
      if (!v16)
        break;
      if (LOWORD(v16->__r_.__value_.__l.__data_) == 12592 && v16->__r_.__value_.__s.__data_[2] == 49)
      {
        if (v16 != v14 && v16 == v13)
        {
          v18 = v7 - 1;
          v19 = __s;
          v20 = 3;
          goto LABEL_30;
        }
        break;
      }
      v15 = (std::string *)((char *)&v16->__r_.__value_.__l.__data_ + 1);
      v5 = (char *)v14 - (char *)v15;
    }
    while ((char *)v14 - (char *)v15 >= 3);
  }
LABEL_33:
  v21 = __s;
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
    v21 = (std::string *)__s->__r_.__value_.__r.__words[0];
  if (v21->__r_.__value_.__s.__data_[0] != 43)
  {
    v22 = std::string::insert(__s, 0, "+", 1uLL);
    if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a3, v22->__r_.__value_.__l.__data_, v22->__r_.__value_.__l.__size_);
    }
    else
    {
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v23;
    }
  }
  else
  {
LABEL_36:
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = __s->__r_.__value_.__r.__words[2];
    __s->__r_.__value_.__l.__size_ = 0;
    __s->__r_.__value_.__r.__words[2] = 0;
    __s->__r_.__value_.__r.__words[0] = 0;
  }
}

void sub_184272D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184272E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_184272FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

unint64_t CTTelephonyCenterAddObserver(uint64_t a1, const void *a2, void (__cdecl *a3)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef), const __CFString *cf1, const void *a5, CFNotificationSuspensionBehavior a6)
{
  __CFNotificationCenter *LocalCenter;

  if (!cf1
    || CFEqual(cf1, CFSTR("kCTCallCauseCodeNotification"))
    || CFEqual(cf1, CFSTR("kCTCallForwardedNotification"))
    || CFEqual(cf1, CFSTR("kCTCallDeflectedNotification"))
    || CFEqual(cf1, CFSTR("kCTCallBarredNotification"))
    || CFEqual(cf1, CFSTR("kCTCallStatusChangeNotification"))
    || CFEqual(cf1, CFSTR("kCTCallSubTypeChangeNotification"))
    || CFEqual(cf1, CFSTR("kCTCallAlternateStatusChangeNotification"))
    || CFEqual(cf1, CFSTR("kCTCallIdentificationChangeNotification"))
    || CFEqual(cf1, CFSTR("kCTCallIdentificationSuppressionRejectedNotification"))
    || CFEqual(cf1, CFSTR("kCTCallControlFailureNotification"))
    || CFEqual(cf1, CFSTR("kCTSIMToolkitControlCallNotification")))
  {
    pthread_once(&_CTTelephonyCenterRegisterTimeChangeNotificationOnce, _CTTelephonyCenterRegisterTimeChangeNotification);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a2, a3, cf1, a5, a6);
  if (cf1)
    return _CTServerConnectionRegisterForNotification(a1, cf1);
  else
    return _CTServerConnectionRegisterForEvent(a1, -1, 0);
}

void sub_1842735EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184273844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_184273B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sCTTelephonyCenterSetDefaultRunloop(uint64_t result, __CFRunLoop *a2, const __CFString *a3)
{
  int v5;
  uint64_t v6;
  _BOOL4 v7;
  _QWORD *v8;

  v5 = result;
  v6 = _CTTelephonyCenterDefault;
  if (_CTTelephonyCenterDefault)
    goto LABEL_6;
  pthread_mutex_lock(&_CTTelephonyCreateMutex);
  v7 = _CTTelephonyCenterDefault != 0;
  if (!_CTTelephonyCenterDefault)
  {
    v8 = CTTelephonyCenterCreateOnRunloop(a2, a3);
    _CTTelephonyCenterDefault = (uint64_t)v8;
    if (v8)
      *((_BYTE *)v8 + 33) = v5;
  }
  result = pthread_mutex_unlock(&_CTTelephonyCreateMutex);
  v6 = _CTTelephonyCenterDefault;
  if (v7)
  {
LABEL_6:
    if (v6)
    {
      pthread_mutex_lock(&_CTTelephonyCreateMutex);
      if (!*(_BYTE *)(_CTTelephonyCenterDefault + 33))
      {
        _CTServerConnectionAddToRunLoop((_QWORD *)_CTTelephonyCenterDefault, a2, a3);
        if (v5)
          *(_BYTE *)(_CTTelephonyCenterDefault + 33) = 1;
      }
      return pthread_mutex_unlock(&_CTTelephonyCreateMutex);
    }
  }
  return result;
}

void _CTServerConnectionAddToRunLoop(_QWORD *a1, CFTypeRef cf, const void *a3)
{
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[8];

  if (a1 && a3 && cf)
  {
    if (a1[2])
    {
      CFRetain(cf);
      CFRetain(a3);
      v6 = a1[3];
      CFRetain(a1);
      v7 = a1[2];
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 0x40000000;
      v8[2] = ___CTServerConnectionAddToRunLoop_block_invoke;
      v8[3] = &__block_descriptor_tmp_26_2;
      v8[4] = v6;
      v8[5] = cf;
      v8[6] = a3;
      v8[7] = a1;
      dispatch_async(v7, v8);
    }
  }
}

void sub_184274014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, xpc_object_t a11, xpc_object_t a12)
{
  xpc_release(object);
  xpc_release(a11);
  xpc_release(a12);
  _Unwind_Resume(a1);
}

uint64_t _is3DigitMNCWithIMSI(int a1, _BYTE *a2)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  if (a1 <= 343)
  {
    if (a1 == 330)
    {
      if (!a2 || a2[3] != 49 || a2[4] - 49 > 1)
        return 0;
      return a2[5] == 48;
    }
    if (a1 == 334)
    {
      if (a2)
      {
        v5 = a2[3];
        if (v5 != 49)
        {
          if (v5 != 48)
            return 0;
          v6 = a2[4];
          if (v6 != 50 && v6 != 57 && v6 != 53)
            return 0;
          return a2[5] == 48;
        }
        if (a2[4] == 52)
          return a2[5] == 48;
      }
      return 0;
    }
    goto LABEL_32;
  }
  if (a1 == 344)
  {
    if (a2 && a2[3] == 48 && a2[4] == 51)
    {
      v7 = a2[5];
LABEL_86:
      v12 = v7 == 48;
      return !v12;
    }
    return 1;
  }
  if (a1 == 738)
  {
    if (!a2 || a2[3] != 48 || a2[4] != 48)
      return 0;
    v8 = a2[5];
    return v8 == 50;
  }
  if (a1 != 405)
  {
LABEL_32:
    if (a1 == 722 && a2 && a2[3] == 48 && a2[4] == 55)
      return 0;
    if (a1)
      v10 = a1 == 101;
    else
      v10 = 1;
    if (v10 && a2 && a2[3] == 70 && a2[4] == 65 && a2[5] == 67)
      return 1;
    if (a1 > 543)
    {
      switch(a1)
      {
        case 544:
          if (!a2 || a2[3] != 49 || a2[4] != 49)
            return 0;
          return a2[5] == 48;
        case 708:
          if (!a2 || a2[3] != 48 || a2[4] != 48)
            return 0;
          return a2[5] == 49;
        case 714:
          if (!a2 || a2[3] != 48)
            return 0;
LABEL_71:
          if (a2[4] == 50)
            return a2[5] == 48;
          return 0;
      }
      return _is3DigitMNC(a1);
    }
    if (a1 == 262)
    {
      if (!a2 || a2[3] != 56)
        return 0;
      goto LABEL_71;
    }
    if (a1 != 502)
      return _is3DigitMNC(a1);
    if (!a2 || a2[3] != 49 || a2[4] != 53)
      return 0;
    v8 = a2[5] & 0xFE;
    return v8 == 50;
  }
  if (!a2)
    return 1;
  result = 0;
  switch(a2[3])
  {
    case '0':
      v3 = a2[4];
      v11 = v3 >= 0x3A;
      v4 = (0x1DFFFFFFFFFFFFuLL >> v3) & 1;
      if (v11)
        return 1;
      else
        return v4;
    case '1':
      return result;
    case '2':
      v11 = __CFADD__(a2[4] - 53, 5);
      goto LABEL_81;
    case '4':
      v12 = a2[4] == 56;
      return !v12;
    case '5':
      v11 = __CFADD__(a2[4] - 55, 6);
LABEL_81:
      result = !v11;
      break;
    case '6':
      v12 = (a2[4] & 0xFE) == 54;
      return !v12;
    case '7':
      v7 = a2[4];
      goto LABEL_86;
    default:
      return 1;
  }
  return result;
}

void ___ZL32CTTelephonyCenterCreateOnRunloopP11__CFRunLoopPK10__CFString_block_invoke(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  _ServerConnectionCallback(a2, a3);
}

void sub_184274418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842744BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t MCCAndMNC::operator<(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  _OWORD *v5;
  char v6;
  std::string::size_type size;
  std::string::size_type v8;
  int v9;
  std::string *p_p;
  uint64_t v11;
  std::string *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  _BOOL4 v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  unsigned int v23;
  std::string __p;
  std::string v26;

  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
  }
  v5 = (_OWORD *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v5;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
  }
  v6 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  else
    size = v26.__r_.__value_.__l.__size_;
  v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = __p.__r_.__value_.__l.__size_;
  if (size == v8)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      v19 = memcmp(v26.__r_.__value_.__l.__data_, p_p, v26.__r_.__value_.__l.__size_) == 0;
      if ((v9 & 0x80000000) == 0)
        goto LABEL_25;
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v11 = HIBYTE(v26.__r_.__value_.__r.__words[2]) - 1;
      v12 = &v26;
      do
      {
        v14 = v12->__r_.__value_.__s.__data_[0];
        v12 = (std::string *)((char *)v12 + 1);
        v13 = v14;
        v16 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v15 = v16;
        v18 = v11-- != 0;
        v19 = v13 == v15;
      }
      while (v13 == v15 && v18);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if ((v6 & 0x80) == 0)
          goto LABEL_26;
LABEL_31:
        operator delete(v26.__r_.__value_.__l.__data_);
        if (v19)
          goto LABEL_27;
        goto LABEL_32;
      }
    }
    else
    {
      v19 = 1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_25;
    }
  }
  else
  {
    v19 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)&v26.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_31;
LABEL_26:
  if (v19)
  {
LABEL_27:
    if (*(char *)(a1 + 63) < 0)
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    else
      v26 = *(std::string *)(a1 + 40);
    if ((*(char *)(a2 + 63) & 0x80000000) == 0)
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 40);
      v20 = *(_QWORD *)(a2 + 56);
LABEL_42:
      __p.__r_.__value_.__r.__words[2] = v20;
      goto LABEL_46;
    }
    v21 = *(const std::string::value_type **)(a2 + 40);
    v22 = *(_QWORD *)(a2 + 48);
    goto LABEL_45;
  }
LABEL_32:
  if (*(char *)(a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    v26 = *v4;
  if ((*(char *)(a2 + 31) & 0x80000000) == 0)
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v5;
    v20 = *(_QWORD *)(a2 + 24);
    goto LABEL_42;
  }
  v21 = *(const std::string::value_type **)(a2 + 8);
  v22 = *(_QWORD *)(a2 + 16);
LABEL_45:
  std::string::__init_copy_ctor_external(&__p, v21, v22);
LABEL_46:
  v23 = std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v26, (void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return (v23 >> 7) & 1;
}

uint64_t MCCAndMNC::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t result;

  result = MCC::operator==(a1, a2);
  if ((_DWORD)result)
    return MCC::operator==(a1 + 16, a2 + 16);
  return result;
}

uint64_t MNC::getIntegerWidth(MNC *this)
{
  uint64_t v1;

  if (*((char *)this + 31) < 0)
    v1 = *((_QWORD *)this + 2);
  else
    v1 = *((unsigned __int8 *)this + 31);
  if (v1 == 3)
    return 3;
  else
    return 2;
}

uint64_t MCC::operator!=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return MCC::operator==(a1, a2) ^ 1;
}

BOOL MCC::valid(MCC *this)
{
  unint64_t var1;

  if ((__int16)this->var0 == -1)
    return 0;
  if (*((char *)&this->var1.var0.var0.var0.var1 + 23) < 0)
    var1 = this->var1.var0.var0.var0.var1.var1;
  else
    var1 = *((unsigned __int8 *)&this->var1.var0.var0.var0.var1 + 23);
  return var1 != 0;
}

void MCC::getStringValue(MCC *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)&this->var1.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, this->var1.var0.var0.var0.var1.var0, this->var1.var0.var0.var0.var1.var1);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this->var1.var0.var0.var0.var0.var0;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)&this->var1.var0.var0.var0.var1 + 2);
  }
}

uint64_t MCCAndMNC::MCCAndMNC(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  unint64_t v5;
  std::string v8;
  __int16 v9;
  std::string __p;

  *(_WORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (std::string *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5 >= 4)
  {
    std::string::basic_string(&v8, (const std::string *)a2, 0, 3uLL, (std::allocator<char> *)&v9);
    MCC::MCC(&v9, &v8);
    *(_WORD *)a1 = v9;
    std::string::operator=(v3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    std::string::basic_string(&v8, (const std::string *)a2, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v9);
    MCC::MCC(&v9, &v8);
    *(_WORD *)(a1 + 32) = v9;
    std::string::operator=(v4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
  }
  return a1;
}

void MCCAndMNC::MCCAndMNC(MCCAndMNC *this, const MCC *a2, const MNC *a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *(_WORD *)this = a2->var0;
  v5 = (std::string *)((char *)this + 8);
  if (*((char *)&a2->var1.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, a2->var1.var0.var0.var0.var1.var0, a2->var1.var0.var0.var0.var1.var1);
  }
  else
  {
    v6 = *(_OWORD *)a2->var1.var0.var0.var0.var0.var0;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)&a2->var1.var0.var0.var0.var1 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_WORD *)this + 16) = *(_WORD *)a3;
  v7 = (std::string *)((char *)this + 40);
  if (*((char *)a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 1), *((_QWORD *)a3 + 2));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a3 + 8);
    *((_QWORD *)this + 7) = *((_QWORD *)a3 + 3);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void MCCAndMNC::MCCAndMNC(MCCAndMNC *this)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:nn180100]<0>(__p, "");
  MCCAndMNC::MCCAndMNC((uint64_t)this, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:nn180100]<0>(__p, "");
  MCCAndMNC::MCCAndMNC((uint64_t)this, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

_WORD *MCCAndMNC::MCCAndMNC(_WORD *a1, const std::string *a2, const std::string *a3)
{
  _WORD *v5;

  v5 = MCC::MCC(a1, a2);
  MCC::MCC(v5 + 16, a3);
  return a1;
}

{
  _WORD *v5;

  v5 = MCC::MCC(a1, a2);
  MCC::MCC(v5 + 16, a3);
  return a1;
}

uint64_t CCMonitor::addToCache(CCMonitor *this, const xpc::object *a2, const xpc::object *a3)
{
  const object *v4;

  xpc::bridge(a2, (const object *)a2);
  xpc::bridge(a3, v4);
  return 0;
}

_WORD *MCC::MCC(_WORD *a1, const std::string *a2)
{
  std::string *v4;
  __int128 v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *__p[2];
  __int128 v13;
  _OWORD v14[10];

  *a1 = -1;
  v4 = (std::string *)(a1 + 4);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    v4->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  std::istringstream::basic_istringstream[abi:nn180100](&v7, a2, 8);
  MEMORY[0x186DBA358](&v7, a1);
  *(_QWORD *)&v7 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v7 + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v8 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v13) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x186DBA418]((char *)v14 + 8);
  return a1;
}

uint64_t _CTServerConnectionCopyCurrentOperatorName(uint64_t a1, _QWORD *a2, const void *a3)
{
  uint64_t v3;
  unsigned int v7;
  xpc_object_t v8;
  xpc_object_t v9;
  const object *v11;
  CFTypeRef v12;
  NSObject *v13;
  xpc_object_t v14;
  CFTypeRef cf;
  CFTypeRef v16;
  xpc_object_t object;
  const char *v18;
  xpc_object_t v19;
  xpc_object_t xdict;
  xpc_object_t v21;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v21 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v21;
    v18 = "kRegistrationOperatorName";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v19);
    xpc_release(v19);
    v19 = 0;
    v7 = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
    v8 = xpc_int64_create(v7);
    if (!v8)
      v8 = xpc_null_create();
    xpc_dictionary_set_value(v21, "kRegistrationLocalize", v8);
    v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v21, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kRegistrationOperatorName"))
    {
      v16 = 0;
      object = &xdict;
      v18 = "kRegistrationOperatorName";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v14);
      xpc::bridge((xpc *)&v14, v11);
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v16, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v14);
      v12 = v16;
      v16 = 0;
      *a2 = v12;
      v13 = CTLogRegistration();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        _CTServerConnectionCopyCurrentOperatorName();
      if (v16)
        CFRelease(v16);
    }
    xpc_release(xdict);
    xpc_release(v21);
  }
  return v3;
}

void _ServerConnectionCallback(const __CFString *a1, CFDictionaryRef theDict)
{
  __CFNotificationCenter *LocalCenter;

  if (CFSTR("kCTIndicatorsSignalStrengthNotification") == a1)
  {
    _CTIndicatorsHandleSignalStrengthNotification(a1, theDict);
  }
  else if (CFSTR("kCTIndicatorsVoiceMailNotification") == a1)
  {
    _CTIndicatorsHandleVoiceMailAvailableNotification(a1, theDict);
  }
  else if (CFSTR("kCTUSSDSessionStringNotification") == a1)
  {
    _CTCallHandleUSSDSessionStringNotification(a1, theDict);
  }
  else if (CFSTR("kCTIndicatorsUnconditionalCallForwardingNotification") == a1)
  {
    _CTIndicatorsHandleUnconditionalCallForwardingNotification(a1, theDict);
  }
  else if (CFSTR("kCTRegistrationDataStatusChangedNotification") == a1
         || CFSTR("kCTRegistrationDataActivateFailedNotification") == a1)
  {
    _CTRegistrationHandleDataStatusChangedNotification(a1, theDict);
  }
  else if (CFSTR("kCTCallStatusChangeNotification") == a1
         || CFSTR("kCTCallSubTypeChangeNotification") == a1
         || CFSTR("kCTCallAlternateStatusChangeNotification") == a1
         || CFSTR("kCTCallStatusBecameAlertingNotification") == a1
         || CFSTR("kCTCallIdentificationChangeNotification") == a1
         || CFSTR("kCTCallForwardedNotification") == a1
         || CFSTR("kCTCallCauseCodeNotification") == a1
         || CFSTR("kCTCallAudioToneRelayNotification") == a1
         || CFSTR("kCTSetupAudioInterruptionsChangedNotification") == a1)
  {
    _CTCallHandleChangeNotification(a1, theDict);
  }
  else if (CFSTR("kCTCallControlFailureNotification") == a1)
  {
    _CTCallHandleCallControlErrorNotification(a1, theDict);
  }
  else if (CFSTR("kCTRestrictedForegroundResumeNotification") == a1)
  {
    _CTCallInvalidateCallCache();
  }
  else if (a1)
  {
    if (CFSTR("kCTConnectionInvalidatedNotification") == a1)
      _CTCallInvalidateCallCache();
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, a1, 0, theDict, 1u);
  }
}

uint64_t _is3DigitMNC(int a1)
{
  uint64_t result;
  unsigned int v3;

  if ((a1 - 301) >= 0x63 && (a1 - 701) > 0x62)
    return 0;
  result = 0;
  if (a1 > 364)
  {
    if ((a1 - 365) <= 0xB && ((1 << (a1 - 109)) & 0x803) != 0 || a1 == 732 || a1 == 722)
      return 1;
  }
  else
  {
    v3 = a1 - 302;
    if (v3 <= 0x3A && ((1 << v3) & 0x405511000007F01) != 0)
      return 1;
  }
  return result;
}

void formPLMN(const MCC *a1@<X0>, const MNC *a2@<X1>, std::string *a3@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v7;
  std::string __p;
  std::string var0;

  if (*((char *)&a1->var1.var0.var0.var0.var1 + 23) < 0)
    std::string::__init_copy_ctor_external(&var0, a1->var1.var0.var0.var0.var1.var0, a1->var1.var0.var0.var0.var1.var1);
  else
    var0 = (std::string)a1->var1.var0.var0;
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    __p = *(std::string *)((char *)a2 + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = std::string::append(&var0, (const std::string::value_type *)p_p, size);
  *a3 = *v7;
  v7->__r_.__value_.__r.__words[0] = 0;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(var0.__r_.__value_.__r.__words[2]) < 0)
    operator delete(var0.__r_.__value_.__l.__data_);
}

unint64_t SendXpcMessageWithCaching(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  unint64_t *p_shared_owners;
  xpc_object_t object;
  xpc_object_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v5 = SendXpcMessageIf((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 136) != 0) & (sInternalDeadFlag ^ 1u), a1, a2, a3);
  v6 = HIDWORD(v5);
  if (!v5)
  {
    if (MEMORY[0x186DBAE5C](*a3) != MEMORY[0x1E0C812F8])
      goto LABEL_37;
    CCMonitor::instance(&v27);
    v9 = *a2;
    v26 = v9;
    if (v9)
      xpc_retain(v9);
    else
      v26 = xpc_null_create();
    v21 = *a3;
    object = v21;
    if (v21)
    {
      v22 = xpc_retain(v21);
    }
    else
    {
      v22 = xpc_null_create();
      object = v22;
    }
    CCMonitor::addToCache((CCMonitor *)v22, (const xpc::object *)&v26, (const xpc::object *)&object);
    xpc_release(object);
    xpc_release(v26);
    v18 = v28;
    if (!v28)
      goto LABEL_37;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    goto LABEL_35;
  }
  if ((_DWORD)v5 == 1 && HIDWORD(v5) == 1)
  {
    CCMonitor::instance(&v27);
    v8 = *a2;
    object = v8;
    if (v8)
      xpc_retain(v8);
    else
      object = xpc_null_create();
    CCMonitor::findCachedValue((const xpc::object *)&object, &v26);
    v10 = v26;
    v11 = MEMORY[0x1E0C812F8];
    if (v26 && MEMORY[0x186DBAE5C](v26) == v11)
    {
      xpc_retain(v10);
      v12 = v10;
    }
    else
    {
      v12 = xpc_null_create();
    }
    v13 = xpc_null_create();
    v14 = *a3;
    *a3 = v12;
    xpc_release(v14);
    xpc_release(v13);
    xpc_release(v10);
    v26 = 0;
    xpc_release(object);
    v15 = v28;
    if (v28)
    {
      v16 = (unint64_t *)&v28->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (MEMORY[0x186DBAE5C](*a3) != v11)
    {
      LODWORD(v6) = 1;
      LODWORD(v5) = 1;
      return v5 | ((unint64_t)v6 << 32);
    }
    CCMonitor::instance(&v27);
    v18 = v28;
    if (!v28)
    {
LABEL_37:
      LODWORD(v6) = 0;
      LODWORD(v5) = 0;
      return v5 | ((unint64_t)v6 << 32);
    }
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
LABEL_35:
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_37;
  }
  return v5 | ((unint64_t)v6 << 32);
}

uint64_t _CTServerConnectionGetRadioAccessTechnology(uint64_t a1, __CFString **a2)
{
  uint64_t v2;
  int v5;
  xpc_object_t v7;
  xpc_object_t object;
  const char *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v11);
    xpc_release(object);
    v12 = v11;
    v11 = xpc_null_create();
    xpc_release(v11);
    object = &v12;
    v9 = "kRegistrationRAT";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v10);
    xpc_release(v10);
    v10 = 0;
    v11 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v12, &v11);
    if (MEMORY[0x186DBAE5C](v11) == MEMORY[0x1E0C812F8])
    {
      object = &v11;
      v9 = "kRegistrationRAT";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v7);
      v5 = xpc::dyn_cast_or_default((xpc *)&v7, (const object *)0xB);
      xpc_release(v7);
    }
    else
    {
      v5 = 11;
    }
    *a2 = RadioAccessTechnologyToRadioAccessTechnologyString(v5);
    xpc_release(v11);
    xpc_release(v12);
  }
  return v2;
}

unint64_t _CTServerConnectionGetCapabilityStatusExtended(uint64_t a1, CFTypeRef cf1, _BYTE *a3, xpc_object_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  xpc_object_t v10;
  void *v11;
  xpc_object_t v12;
  xpc_object_t value;
  const object *v15;
  xpc_object_t v16;
  CFTypeRef cf;
  xpc_object_t v18;
  xpc_object_t object;
  const char *v20;
  xpc_object_t v21;
  xpc_object_t xdict;
  xpc_object_t v23;

  v4 = 0x1600000000;
  LODWORD(v5) = 1;
  if (cf1 && a1 && a3)
  {
    if (!CFEqual(cf1, CFSTR("kCTCapabilityVoLTE"))
      && !CFEqual(cf1, CFSTR("kCTCapabilityWiFiCalling"))
      && !CFEqual(cf1, CFSTR("kCTCapabilityPhoneServices")))
    {
      LODWORD(v5) = 1;
      return v4 & 0xFFFFFFFF00000000 | v5;
    }
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v10 = xdict;
    v23 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v10, "kTelephonyCapability", v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    object = &v23;
    v20 = "kTelephonyCapabilityStatus";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v21);
    xpc_release(v21);
    v21 = 0;
    xdict = xpc_null_create();
    v5 = SendXpcMessageWithCaching(a1, &v23, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      *a3 = 0;
      if (!xpc_dictionary_get_value(xdict, "kTelephonyCapabilityStatus"))
      {
        v4 = 0x2300000000;
        LODWORD(v5) = 1;
        goto LABEL_11;
      }
      object = &xdict;
      v20 = "kTelephonyCapabilityStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v18);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v18, 0);
      xpc_release(v18);
      value = xpc_dictionary_get_value(xdict, "kTelephonyCapabilityInformation");
      if (a4 && value)
      {
        v18 = 0;
        object = &xdict;
        v20 = "kTelephonyCapabilityInformation";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v16);
        xpc::bridge((xpc *)&v16, v15);
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v18, &cf);
        if (cf)
          CFRelease(cf);
        xpc_release(v16);
        *a4 = v18;
      }
    }
    v4 = v5 & 0xFFFFFFFF00000000;
LABEL_11:
    xpc_release(xdict);
    xpc_release(v23);
  }
  return v4 & 0xFFFFFFFF00000000 | v5;
}

uint64_t _CTServerConnectionCopyOperatorName(uint64_t a1, _QWORD *a2)
{
  return _CTServerConnectionCopyCurrentOperatorName(a1, a2, (const void *)*MEMORY[0x1E0C9AE40]);
}

uint64_t _CTServerConnectionCopyMobileCountryCode(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v6;
  xpc_object_t object[2];
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    v10 = v9;
    v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kRegistrationMCC";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    v8 = 0;
    object[0] = xpc_null_create();
    v2 = SendXpcMessage(a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](object[0]) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(object[0], "kRegistrationMCC"))
    {
      v9 = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationMCC");
      v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyISOForMCC(uint64_t a1, ctu *a2, _QWORD *a3)
{
  uint64_t v3;
  xpc_object_t v7;
  const void *v8;
  xpc_object_t v9;
  const object *v10;
  xpc_object_t object[2];
  xpc_object_t v13;
  CFTypeRef cf;
  uint64_t v15;
  xpc_object_t value;
  xpc_object_t xdict;
  xpc_object_t v18;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v7 = xdict;
    v18 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    ctu::cf_to_xpc(a2, v8);
    xpc_dictionary_set_value(v7, "kRegistrationISOForMCC", value);
    v9 = value;
    value = xpc_null_create();
    xpc_release(v9);
    xpc_release(value);
    value = 0;
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v18, &xdict);
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kRegistrationISOForMCC"))
    {
      v15 = 0;
      object[0] = &xdict;
      object[1] = "kRegistrationISOForMCC";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v13);
      xpc::bridge((xpc *)&v13, v10);
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v15, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v13);
      *a3 = v15;
    }
    xpc_release(xdict);
    xpc_release(v18);
  }
  return v3;
}

const char *CTStewieServiceStatusReasonAsString(unint64_t a1)
{
  if (a1 > 0xB)
    return "???";
  else
    return off_1E1530330[a1];
}

__CFString *CTRegistrationGetStatus()
{
  uint64_t Default;
  __CFString *v2;

  v2 = CFSTR("kCTRegistrationStatusUnknown");
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetRegistrationStatus(Default, &v2);
  return v2;
}

CFStringRef CTRegistrationCopyOperatorName(const __CFAllocator *a1)
{
  uint64_t Default;
  CFStringRef Copy;
  CFStringRef theString;

  theString = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyOperatorName(Default, &theString);
  if (!theString)
    return 0;
  Copy = CFStringCreateCopy(a1, theString);
  CFRelease(theString);
  return Copy;
}

void sub_184275D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184275E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_184275FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_184276070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  _Unwind_Resume(a1);
}

void sub_184276208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  os_unfair_lock_s *v5;

  os_unfair_lock_unlock(v5);

  _Unwind_Resume(a1);
}

void sub_184276638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184276870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_184276A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_184276D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_184276F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1842771FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18427731C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184277400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842774A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184277594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_184277624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427776C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842777FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184277908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  _Unwind_Resume(a1);
}

void sub_184277A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184277C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_184277CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184277DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_184277E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184277FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_184278088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184278134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  _Unwind_Resume(a1);
}

void sub_184278250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842783AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184278448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842784FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184278584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842786B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184278810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842788A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184278958(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184278A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_184278BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_184278C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184278D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184278E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184278FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  _Unwind_Resume(a1);
}

void sub_184279114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_184279300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v7 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_184279408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18427955C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1842795FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184279754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842798C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_18427996C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184279A48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184279BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_184279C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184279D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184279D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184279E64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184279F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_18427A020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427A1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_18427A238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427A2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18427A384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427A4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_18427A54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427A614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427A858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18427A99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18427AAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_18427AB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427ACF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_18427AD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427AEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_18427AF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427B094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_18427B130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427B1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427B378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427B42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427B4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18427B5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_18427B688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427B7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_18427B848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427BA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18427BB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18427BC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427BD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_18427BDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427C018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18427C1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18427C4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;
  id *v34;
  id *v35;

  v35 = v34;

  objc_destroyWeak(v35);
  objc_destroyWeak(&location);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18427C6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

void sub_18427C86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void CTGetRootVersionString(std::string *a1@<X8>)
{
  std::string *v2;
  std::string v3;

  std::string::basic_string[abi:nn180100]<0>(&v3, "CoreTelephony-");
  v2 = std::string::append(&v3, "12088", 5uLL);
  *a1 = *v2;
  v2->__r_.__value_.__r.__words[0] = 0;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void CSIPhoneNumber::CSIPhoneNumber(CSIPhoneNumber *a1, __int128 *a2, int a3)
{
  _DWORD *v4;

  CSIPhoneNumber::CSIPhoneNumber(a1, a2);
  *v4 = a3;
}

{
  _DWORD *v4;

  CSIPhoneNumber::CSIPhoneNumber(a1, a2);
  *v4 = a3;
}

uint64_t CSIPhoneNumber::CSIPhoneNumber(uint64_t a1, int a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = a2;
  v5 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 111) = 0;
  *(_QWORD *)(a1 + 116) = 0x400000000;
  *(_BYTE *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  return a1;
}

BOOL CSIPhoneNumber::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;

  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 0;
  v8 = (const void **)(a1 + 8);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 16)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
    return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
  return 0;
}

BOOL CSIPhoneNumber::operator!=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;

  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 1;
  v8 = (const void **)(a1 + 8);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 16)))
      return 1;
  }
  else if (*(_BYTE *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 1;
  }
LABEL_16:
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
    return *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4);
  return 1;
}

std::string *CSIPhoneNumber::setBaseNumber(CSIPhoneNumber *this, const char *a2)
{
  return std::string::__assign_external((std::string *)((char *)this + 8), a2);
}

std::string *CSIPhoneNumber::setBaseNumber(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

BOOL CSIPhoneNumber::hasSameBaseNumber(CSIPhoneNumber *this, const CSIPhoneNumber *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  _BOOL8 result;

  v2 = *((unsigned __int8 *)this + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)this + 31);
  else
    v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 2);
  if (v3 != v4)
    return 0;
  v6 = (const void **)((char *)this + 8);
  v9 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v7 = (unsigned __int8 *)a2 + 8;
  v8 = v9;
  if (v5 < 0)
    v7 = v8;
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, v7, *((_QWORD *)this + 2)) == 0;
  if (!*((_BYTE *)this + 31))
    return 1;
  v10 = v2 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v11 = v12;
    v14 = *v7++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t CSIPhoneNumber::setTypeOfAddress(uint64_t this, int a2)
{
  *(_DWORD *)(this + 4) = a2;
  return this;
}

uint64_t CSIPhoneNumber::setEmergencyCategory(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  *(_BYTE *)(this + 60) = 1;
  return this;
}

uint64_t CSIPhoneNumber::getEmergencyCategory(CSIPhoneNumber *this)
{
  if (*((_BYTE *)this + 60))
    return *((unsigned int *)this + 14);
  else
    return 0;
}

uint64_t CSIPhoneNumber::hasEmergencyCategorySet(CSIPhoneNumber *this)
{
  return *((unsigned __int8 *)this + 60);
}

uint64_t CSIPhoneNumber::getTypeOfAddress(CSIPhoneNumber *this)
{
  return *((unsigned int *)this + 1);
}

void CSIPhoneNumber::getFormatted(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type **v4;
  std::string::size_type v5;
  int v6;
  const char *v7;
  uint64_t v8;
  int v9;
  const std::string::value_type *v10;
  const std::string::value_type *v11;

  v4 = (const std::string::value_type **)((char *)this + 8);
  if (*((char *)this + 31) < 0)
  {
    v5 = *((_QWORD *)this + 2);
    if (v5 > 0xA)
    {
      std::string::__init_copy_ctor_external(a2, *v4, v5);
      return;
    }
LABEL_7:
    v6 = 0;
    if (v5 <= 7)
      v7 = "nnn-nnnn";
    else
      v7 = "(nnn) nnn-nnnn";
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    while (1)
    {
      v9 = *(unsigned __int8 *)v7++;
      LODWORD(v8) = v9;
      if (v9 == 110)
      {
        v10 = (const std::string::value_type *)v4;
        if (*((char *)this + 31) < 0)
          v10 = *v4;
        v8 = v6;
        if (!v10[v6])
          return;
        v11 = (const std::string::value_type *)v4;
        if (*((char *)this + 31) < 0)
          v11 = *v4;
        ++v6;
        LOBYTE(v8) = v11[v8];
      }
      else if (!(_DWORD)v8)
      {
        return;
      }
      std::string::push_back(a2, v8);
    }
  }
  v5 = *((unsigned __int8 *)this + 31);
  if (*((unsigned __int8 *)this + 31) < 0xBu)
    goto LABEL_7;
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
  a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
}

void CSIPhoneNumber::getFullOriginalNumber(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  std::string __p;

  if (*((char *)this + 55) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  else
    __p = *(std::string *)((char *)this + 32);
  CSIPhoneNumber::getFullNumberHelper(&__p, (uint64_t)this, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

std::string *CSIPhoneNumber::getBaseNumberNoPauseDigits@<X0>(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  const std::string *v3;
  std::string::size_type v4;
  char v6;

  v3 = (const std::string *)((char *)this + 8);
  v4 = std::string::find((const std::string *)((char *)this + 8), 44, 0);
  return std::string::basic_string(a2, v3, 0, v4, (std::allocator<char> *)&v6);
}

void CSIPhoneNumber::getFullNumberNoPauseDigits(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  const std::string *v4;
  std::string::size_type v5;
  std::string __p;
  char v7;

  v4 = (const std::string *)((char *)this + 8);
  v5 = std::string::find((const std::string *)((char *)this + 8), 44, 0);
  std::string::basic_string(&__p, v4, 0, v5, (std::allocator<char> *)&v7);
  CSIPhoneNumber::getFullNumberHelper(&__p, (uint64_t)this, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void CSIPhoneNumber::getBaseNumber(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

uint64_t CSIPhoneNumber::getCLIRRequestState(CSIPhoneNumber *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t CSIPhoneNumber::setCLIRRequestState(uint64_t result, int a2)
{
  *(_DWORD *)(result + 120) = a2;
  return result;
}

void CSIPhoneNumber::getDtmfString(CSIPhoneNumber *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 8), *((_QWORD *)this + 9));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 4);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 10);
  }
}

std::string *CSIPhoneNumber::setDtmfString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 64), a2);
}

uint64_t CSIPhoneNumber::getTypeOfNumber(CSIPhoneNumber *this)
{
  return *(unsigned int *)this;
}

_DWORD *CSIPhoneNumber::setTypeOfNumber(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

uint64_t CSIPhoneNumber::setIsListedAsEmergency(uint64_t this, char a2)
{
  *(_BYTE *)(this + 112) = a2;
  return this;
}

uint64_t CSIPhoneNumber::getIsListedAsEmergency(CSIPhoneNumber *this)
{
  return *((unsigned __int8 *)this + 112);
}

uint64_t CSIPhoneNumber::setIsEmSMSTextSupported(uint64_t this, char a2)
{
  *(_BYTE *)(this + 113) = a2;
  return this;
}

uint64_t CSIPhoneNumber::getIsEmSMSTextSupported(CSIPhoneNumber *this)
{
  return *((unsigned __int8 *)this + 113);
}

uint64_t CSIPhoneNumber::setIsEmVoiceSupported(uint64_t this, char a2)
{
  *(_BYTE *)(this + 114) = a2;
  return this;
}

uint64_t CSIPhoneNumber::getIsEmVoiceSupported(CSIPhoneNumber *this)
{
  return *((unsigned __int8 *)this + 114);
}

uint64_t CSIPhoneNumber::getMMIValidity(CSIPhoneNumber *this)
{
  return *((unsigned int *)this + 29);
}

uint64_t CSIPhoneNumber::setMMIValidity(uint64_t result, int a2)
{
  *(_DWORD *)(result + 116) = a2;
  return result;
}

BOOL CSIPhoneNumber::getIsMMI(CSIPhoneNumber *this)
{
  char *v1;
  int v2;
  int v3;
  int v4;
  char *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v1 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v1 = (char *)*((_QWORD *)this + 1);
  v2 = 0;
  v3 = 0;
  v4 = 0;
  while (2)
  {
    v5 = (char *)this + 8;
    v6 = *((unsigned __int8 *)this + 31);
    if ((*((_BYTE *)this + 31) & 0x80) != 0)
    {
      v5 = (char *)*((_QWORD *)this + 1);
      v6 = *((_QWORD *)this + 2);
    }
    v7 = (unsigned __int8 *)&v5[v6];
    if (v1 != (char *)v7)
    {
      switch(v4)
      {
        case 0:
          v8 = *v1;
          if (v8 == 35)
          {
            v4 = 2;
            goto LABEL_39;
          }
          if (v8 == 42)
          {
            v4 = 1;
            goto LABEL_39;
          }
          v4 = 0;
          break;
        case 1:
          v9 = *v1;
          if ((*v1 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v9 + 60) & 0x400) != 0)
            goto LABEL_22;
          v4 = 3;
          if ((_DWORD)v9 == 35 || (_DWORD)v9 == 42)
            goto LABEL_39;
          v4 = 1;
          break;
        case 2:
          if ((*v1 & 0x80000000) == 0)
          {
            v10 = *v1;
            if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v10 + 60) & 0x400) != 0)
              goto LABEL_22;
            if ((_DWORD)v10 == 35)
            {
              v4 = 3;
              goto LABEL_39;
            }
          }
          v4 = 2;
          break;
        case 3:
          if ((*v1 & 0x80000000) == 0
            && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v1 + 60) & 0x400) != 0)
          {
LABEL_22:
            --v1;
            v4 = 4;
            goto LABEL_39;
          }
          v4 = 3;
          break;
        case 4:
          v11 = *v1;
          if ((_DWORD)v11 == 35)
            goto LABEL_30;
          if ((_DWORD)v11 == 42)
          {
            v4 = 5;
            goto LABEL_39;
          }
          if ((v11 & 0x80) != 0)
          {
            v4 = 4;
          }
          else
          {
            v13 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v11 + 60);
            v4 = 4;
            if ((v13 & 0x400) != 0 && ++v2 != 4)
              goto LABEL_39;
          }
          break;
        case 5:
          v12 = *v1;
          if ((_DWORD)v12 == 35)
          {
LABEL_30:
            v4 = 6;
            goto LABEL_39;
          }
          if ((_DWORD)v12 == 42)
          {
            ++v3;
            v4 = 5;
            if (v3 != 4)
              goto LABEL_39;
          }
          else
          {
            v4 = 5;
            if ((v12 & 0x80) == 0
              && ((_DWORD)v12 == 43 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v12 + 60) & 0x400) != 0))
            {
              goto LABEL_39;
            }
          }
          break;
        case 6:
          return v1 == (char *)v7 && v4 == 6;
        default:
LABEL_39:
          ++v1;
          continue;
      }
    }
    return v1 == (char *)v7 && v4 == 6;
  }
}

uint64_t CSIPhoneNumber::getIsUSSD(CSIPhoneNumber *this)
{
  const std::string *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  CSIPhoneNumber *v6;
  int v8;
  int v9;
  char *v11;
  std::string::size_type v12;
  std::string::size_type v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const std::string *v18;
  uint64_t result;
  const std::string *v20;
  int v21;
  int v22;

  v2 = (const std::string *)((char *)this + 8);
  v3 = *((unsigned __int8 *)this + 31);
  v4 = *((unsigned __int8 *)this + 31);
  if ((v3 & 0x80u) == 0)
    v5 = *((unsigned __int8 *)this + 31);
  else
    v5 = *((_QWORD *)this + 2);
  if (v5 == 5)
  {
    v6 = (v3 & 0x80u) == 0 ? (CSIPhoneNumber *)((char *)this + 8) : (CSIPhoneNumber *)v2->__r_.__value_.__r.__words[0];
    if (*(_DWORD *)v6 == 909124394 && *((_BYTE *)v6 + 4) == 35)
      return 1;
    v8 = *(_DWORD *)v6;
    v9 = *((unsigned __int8 *)v6 + 4);
    if (v8 == 925901610 && v9 == 35)
      return 1;
  }
  v11 = (char *)this + 8;
  if ((v3 & 0x80) != 0)
  {
    v11 = (char *)v2->__r_.__value_.__r.__words[0];
    v4 = *((_QWORD *)this + 2);
  }
  if (v11[v4 - 1] == 35)
  {
    v12 = std::string::find((const std::string *)((char *)this + 8), 59, 0);
    v13 = std::string::find(v2, 44, 0);
    if (v12 != -1 || v13 != -1)
    {
      v3 = *((unsigned __int8 *)this + 31);
      goto LABEL_22;
    }
    return 1;
  }
LABEL_22:
  if ((v3 & 0x80) != 0)
    v14 = *((_QWORD *)this + 2);
  else
    v14 = v3;
  if (v14 > 2)
    return 0;
  v15 = *((_QWORD *)this + 2);
  v16 = v3;
  if ((v3 & 0x80u) == 0)
    v17 = v3;
  else
    v17 = v15;
  if (v17 == 2)
  {
    if ((v3 & 0x80u) == 0)
      v20 = v2;
    else
      v20 = (const std::string *)v2->__r_.__value_.__r.__words[0];
    result = memcmp(v20, "00", 2uLL);
    if (!(_DWORD)result)
      return result;
  }
  else if (v17 == 1)
  {
    v18 = (v3 & 0x80u) == 0 ? v2 : (const std::string *)v2->__r_.__value_.__r.__words[0];
    if (v18->__r_.__value_.__s.__data_[0] == 48)
      return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if (v15 == 1 || (result = 0, v22 = *(unsigned __int8 *)v2->__r_.__value_.__l.__data_, v22 != 35) && v22 != 42)
    {
      v21 = *(unsigned __int8 *)v2->__r_.__value_.__l.__data_;
      v16 = v15;
LABEL_49:
      if (v21 == 49)
        return v16 != 2;
      return 1;
    }
  }
  else
  {
    v21 = v2->__r_.__value_.__s.__data_[0];
    if (v3 == 1)
      goto LABEL_49;
    result = 0;
    if (v21 != 35 && v21 != 42)
    {
      v21 = v2->__r_.__value_.__s.__data_[0];
      goto LABEL_49;
    }
  }
  return result;
}

BOOL CSIPhoneNumber::isOriginalNumberSame(CSIPhoneNumber *this, const CSIPhoneNumber *a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  int64_t v24;
  BOOL v25;
  int64_t v26;
  BOOL v27;

  v2 = *((unsigned __int8 *)this + 55);
  if (*((char *)this + 55) < 0)
    v3 = *((_QWORD *)this + 5);
  else
    v3 = *((unsigned __int8 *)this + 55);
  v4 = *((char *)a2 + 55);
  v5 = *((_QWORD *)a2 + 5);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 55);
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  if (v6 < 5)
    return 0;
  v8 = (unsigned __int8 *)this + 32;
  v9 = (unsigned __int8 *)a2 + 32;
  if (v5 >= v3)
  {
    if (v4 >= 0)
      v16 = (unsigned __int8 *)a2 + 32;
    else
      v16 = *(unsigned __int8 **)v9;
    v17 = (unsigned __int8 *)*((_QWORD *)this + 4);
    if ((v2 & 0x80u) != 0)
      v2 = *((_QWORD *)this + 5);
    else
      v17 = (unsigned __int8 *)this + 32;
    v18 = &v16[v5];
    if (v2)
    {
      v19 = v16;
      v20 = (char *)&v16[v5];
      do
      {
        if (*v19 == *v17)
        {
          v21 = 1;
          while (v2 != v21)
          {
            if (&v19[v21] == v18)
              goto LABEL_49;
            v22 = v19[v21];
            v23 = v17[v21++];
            if (v22 != v23)
              goto LABEL_36;
          }
          v20 = (char *)v19;
        }
LABEL_36:
        ++v19;
      }
      while (v19 != v18);
    }
    else
    {
      v20 = (char *)&v16[v5];
    }
LABEL_49:
    v26 = v20 - (char *)v16;
    if (v2)
      v27 = v20 == (char *)v18;
    else
      v27 = 0;
    v25 = v27 || v26 == -1;
  }
  else
  {
    if ((v2 & 0x80) != 0)
    {
      v8 = (unsigned __int8 *)*((_QWORD *)this + 4);
      v2 = *((_QWORD *)this + 5);
    }
    if (v4 < 0)
      v9 = *(unsigned __int8 **)v9;
    v10 = &v8[v2];
    if (v2)
    {
      v11 = v8;
      v12 = (char *)&v8[v2];
      do
      {
        if (*v11 == *v9)
        {
          v13 = 1;
          while (v5 != v13)
          {
            if (&v11[v13] == v10)
              goto LABEL_45;
            v14 = v11[v13];
            v15 = v9[v13++];
            if (v14 != v15)
              goto LABEL_19;
          }
          v12 = (char *)v11;
        }
LABEL_19:
        ++v11;
      }
      while (v11 != v10);
    }
    else
    {
      v12 = (char *)v8;
    }
LABEL_45:
    v24 = v12 - (char *)v8;
    v25 = v12 == (char *)v10 || v24 == -1;
  }
  return !v25;
}

uint64_t CSIPhoneNumber::setMatchedEmMetricListType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 124) = a2;
  *(_BYTE *)(result + 128) = 1;
  return result;
}

uint64_t CSIPhoneNumber::getMatchedEmMetricListType(CSIPhoneNumber *this)
{
  return *(_QWORD *)((char *)this + 124);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void std::vector<MMSHeaderEncoding const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<MMSHeaderEncoding const*>::__append((void **)a1, a2 - v2);
  }
}

void MMSHeaderEncodingMap::MMSHeaderEncodingMap(MMSHeaderEncodingMap *this)
{
  uint64_t v2;

  v2 = ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony", "msg.mms.pdu.hdr.encmap");
  *(_QWORD *)(v2 + 56) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  *((_DWORD *)this + 16) = 1065353216;
  std::vector<MMSHeaderEncoding const*>::resize(v2 + 8, 1uLL);
}

MMSBinaryHeader *MMSHeaderEncodingMap::addEncoding(MMSHeaderEncodingMap *this, char a2, char *a3, MMSBinaryHeader *a4)
{
  unsigned __int8 *v7;
  MMSBinaryHeader *result;
  MMSBinaryHeader *v9;

  v9 = a4;
  v7 = (unsigned __int8 *)operator new();
  MMSHeaderEncoding::MMSHeaderEncoding((uint64_t)v7, (uint64_t *)&v9, a2, a3);
  MMSHeaderEncodingMap::addEncoding((uint64_t)this, v7);
  result = v9;
  v9 = 0;
  if (result)
    return (MMSBinaryHeader *)(*(uint64_t (**)(MMSBinaryHeader *))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int8 *MMSHeaderEncodingMap::addEncoding(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 *result;
  __int128 *v8;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t *)(a1 + 8);
  if (v4 >= (*(_QWORD *)(a1 + 16) - v5) >> 3)
  {
    v8 = 0;
    std::vector<MMSHeaderEncoding const*>::resize(a1 + 8, v4 + 1, &v8);
    fflush((FILE *)*MEMORY[0x1E0C80C10]);
    v4 = *a2;
    v5 = *v6;
  }
  *(_QWORD *)(v5 + 8 * v4) = a2;
  v8 = (__int128 *)(a2 + 8);
  result = std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 32, (uint64_t)(a2 + 8), (uint64_t)&std::piecewise_construct, &v8);
  *((_QWORD *)result + 5) = a2;
  return result;
}

void std::vector<MMSHeaderEncoding const*>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<MMSHeaderEncoding const*>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t MMSHeaderEncodingMap::encodingForNumber(MMSHeaderEncodingMap *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 2) - v2) >> 3))
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * a2);
}

uint64_t MMSHeaderEncodingMap::encodingForName(MMSHeaderEncodingMap *this, char *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  if ("Content-Disposition" == a2)
  {
    v5 = *((_QWORD *)this + 1)
       + 8 * MMSContentDispositionHeader::getContentDispositionEncodingByte(this);
    return *(_QWORD *)v5;
  }
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  v3 = std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::find<std::string>((_QWORD *)this + 4, (uint64_t)__p);
  v4 = v3;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (v4)
      goto LABEL_4;
  }
  else if (v3)
  {
LABEL_4:
    v5 = (uint64_t)(v4 + 40);
    return *(_QWORD *)v5;
  }
  return 0;
}

void MMSHeaderEncodingMap::createHeader(MMSHeaderEncodingMap *this, char *a2)
{
  uint64_t v3;
  MMSSimpleHeader *v4;

  v3 = MMSHeaderEncodingMap::encodingForName(this, a2);
  if (v3)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 32) + 96))(*(_QWORD *)(v3 + 32));
  }
  else
  {
    v4 = (MMSSimpleHeader *)operator new();
    MMSSimpleHeader::MMSSimpleHeader(v4, a2, 0);
  }
}

void std::vector<MMSHeaderEncoding const*>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      abort();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a2);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

void std::vector<MMSHeaderEncoding const*>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      abort();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unsigned __int8 *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v5 = (unsigned __int8 *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)v27, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:nn180100](a1 + 32, i + 16, v5) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  memset(v27, 0, sizeof(v27));
  std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__rehash<true>(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v25 >= v11)
          v25 %= v11;
      }
      else
      {
        v25 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  a4[2] = 0;
  v8 = operator new(0x30uLL);
  *a4 = v8;
  a4[1] = v7;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *((_BYTE *)a4 + 16) = 1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:nn180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  char v17;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v17, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(unsigned __int8 ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = (uint64_t)(a1 + 4);
    do
    {
      v15 = *((_QWORD *)v13 + 1);
      if (v8 == v15)
      {
        if ((std::equal_to<std::string>::operator()[abi:nn180100](v14, v13 + 16, v2) & 1) != 0)
          return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v7)
            v15 %= *(_QWORD *)&v7;
        }
        else
        {
          v15 &= *(_QWORD *)&v7 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = *(unsigned __int8 **)v13;
    }
    while (v13);
  }
  return v13;
}

void sub_18427E8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v18;

  _Unwind_Resume(a1);
}

void sub_18427E9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_18427EB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18427ED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18427F0B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18427F138(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18427F1D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427F21C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427F2E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18427F37C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427F444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18427F4CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18427F568(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427F5B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427F674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18427F710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427F828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18427F948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_18427FA10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427FA70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427FAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18427FC00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18427FCF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427FE4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18427FEFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18427FF94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18427FFE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184280068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184280160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184280220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842802F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184280380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18428041C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184280464(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184280528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842805C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842806DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842807FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1842808C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184280924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18428099C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184280AB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184280BA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184280CF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184280DC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_184280E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184280EC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184280F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18428108C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842811E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184281400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18428177C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, char a15, void *a16, uint64_t a17, void *a18, void *a19, int a20,char a21,void *a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  if ((a15 & 1) != 0)
  {

  }
  if (!a22)

  if ((a21 & 1) != 0)
  {

  }
  if (!*(_QWORD *)(v31 - 96))

  _Unwind_Resume(a1);
}

void sub_18428197C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184281A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184281AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184281CD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184281E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184282064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842821C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1842822AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18428230C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184282384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842824A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842825BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184282738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18428282C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842828DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18428293C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842829D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184282B00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184282BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184282D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184282EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_184282F88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184282FE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184283060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184283180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18428328C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842833FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184283560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_184283644(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842836A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18428371C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18428383C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184283948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184283A68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184283AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184283B8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184283BD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184283C98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184283D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  return CTDTMFPlayStart();
}

uint64_t CTDTMFPlayStart(int a1)
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionStartDTMFTone(Default, a1);
}

uint64_t CTDTMFPlayStop()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionStopDTMFTone(Default);
}

uint64_t CTDTMFSendDigitsNow()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionSendDTMFDigitsNow(Default);
}

xpc_object_t CTDTMFCopyHardPauseDigits(_BYTE *a1)
{
  uint64_t Default;
  xpc_object_t v4;

  v4 = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyHardPauseDigits(Default, &v4, a1);
  return v4;
}

uint64_t CTDTMFCancelHardPause()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionCancelHardPause(Default);
}

uint64_t CTUSSDSessionSendResponse(uint64_t a1)
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionSendUSSDResponse(Default, a1);
}

uint64_t CTUSSDSessionCancel()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionCancelUSSDSession(Default);
}

uint64_t CTCallGetTypeID()
{
  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  return _kCTCallTypeID;
}

_QWORD *_CTCallRegisterClass()
{
  _QWORD *result;
  const __CFAllocator *v1;

  result = malloc_type_calloc(1uLL, 0x60uLL, 0x10D00408820D60FuLL);
  _kCTCallClass = (uint64_t)result;
  if (result)
  {
    *result = 0;
    result[1] = "CTCall";
    result[4] = _CallDestroy;
    result[5] = _CallEqual;
    result[6] = _CallHash;
    result[8] = _CallCopyDescription;
    _kCTCallTypeID = _CFRuntimeRegisterClass();
    v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    _UuidToCallMap = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &_CTCallRegisterClass_kDictionaryNoRetainKeyCallBacks, &_CTCallRegisterClass_kDictionaryNoRetainValueCallBacks);
    result = CFArrayCreateMutable(v1, 0, MEMORY[0x1E0C9B378]);
    _CurrentCalls = (uint64_t)result;
  }
  return result;
}

const __CFArray *CTCopyCurrentCalls(const __CFAllocator *a1)
{
  return _CTCallCopyCurrentCallsWithTypes(a1, 3u, 1);
}

const __CFArray *_CTCallCopyCurrentCallsWithTypes(const __CFAllocator *a1, unsigned int a2, int a3)
{
  const void *Default;
  const __CFArray *MutableCopy;
  CFIndex Count;
  unint64_t v9;
  _DWORD *ValueAtIndex;
  CFTypeRef cf;

  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  pthread_mutex_lock(&_GlobalCallsLock);
  if (!a3 || (_CurrentCallsUpToDate & 1) == 0)
  {
    pthread_mutex_unlock(&_GlobalCallsLock);
    Default = (const void *)CTTelephonyCenterGetDefault();
    cf = 0;
    _CTServerConnectionCopyAllCallsWithTypes(Default, a2, (CFArrayRef *)&cf);
    if (cf)
      CFRelease(cf);
    pthread_mutex_lock(&_GlobalCallsLock);
    _CurrentCallsUpToDate = 1;
  }
  MutableCopy = CFArrayCreateMutableCopy(a1, 0, (CFArrayRef)_CurrentCalls);
  pthread_mutex_unlock(&_GlobalCallsLock);
  Count = CFArrayGetCount(MutableCopy);
  if (Count >= 1)
  {
    v9 = Count + 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, v9 - 2);
      if (CTCallGetStatus((uint64_t)ValueAtIndex) == 5 || (ValueAtIndex[18] & a2) == 0)
        CFArrayRemoveValueAtIndex(MutableCopy, v9 - 2);
      --v9;
    }
    while (v9 > 1);
  }
  return MutableCopy;
}

const __CFArray *CTCopyCurrentCallsWithTypes(const __CFAllocator *a1, const __CFArray *a2)
{
  unsigned int v3;

  v3 = _ExtractCallTypes(a2);
  return _CTCallCopyCurrentCallsWithTypes(a1, v3, 1);
}

CFIndex CTGetCurrentCallCount()
{
  return _CTGetCurrentCallCountWithTypes(3u);
}

CFIndex _CTGetCurrentCallCountWithTypes(unsigned int a1)
{
  const __CFArray *v2;
  CFIndex Count;

  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  v2 = _CTCallCopyCurrentCallsWithTypes((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a1, 1);
  Count = CFArrayGetCount(v2);
  CFRelease(v2);
  return Count;
}

CFIndex CTGetCurrentCallCountWithTypes(const __CFArray *a1)
{
  unsigned int v1;

  v1 = _ExtractCallTypes(a1);
  return _CTGetCurrentCallCountWithTypes(v1);
}

void *CTCallDialEmergency(const void *a1)
{
  return _CTCallDial(a1, 0, 2u, 0, 0);
}

void *_CTCallDial(const void *a1, void *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  const void *Default;
  const __CFArray *v11;
  void *value;
  CFRange v14;

  value = 0;
  Default = (const void *)CTTelephonyCenterGetDefault();
  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  _CTServerConnectionCreateCall(Default, a1, a2, a3, a4, a5, (uint64_t *)&value);
  if (!value)
    return 0;
  pthread_mutex_lock(&_GlobalCallsLock);
  v11 = (const __CFArray *)_CurrentCalls;
  v14.length = CFArrayGetCount((CFArrayRef)_CurrentCalls);
  v14.location = 0;
  if (CFArrayGetFirstIndexOfValue(v11, v14, value) == -1)
    CFArrayAppendValue((CFMutableArrayRef)_CurrentCalls, value);
  pthread_mutex_unlock(&_GlobalCallsLock);
  return value;
}

void *CTCallDialWithSourceIdentifier(const void *a1, uint64_t a2)
{
  return _CTCallDial(a1, 0, 0, a2, 0);
}

void *CTCallDialWithIDAndSourceIdentifier(const void *a1, uint64_t a2)
{
  return _CTCallDial(a1, 0, 0, a2, 0);
}

void *CTCallDialWithID(const void *a1)
{
  return _CTCallDial(a1, 0, 0, 0, 0);
}

void *CTCallDialVoicemail()
{
  return _CTCallDial(0, 0, 1u, 0, 0);
}

void *CTCallDialWithAssist(const void *a1, void *a2)
{
  return _CTCallDial(a1, a2, 0, 0, 0);
}

void *CTCallDial(const void *a1)
{
  return _CTCallDial(a1, 0, 0, 0, 0);
}

const __CFDictionary *CTCallDialWithOptions(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  const void *Value;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  unsigned int v6;
  const __CFNumber *v7;
  const void *v8;
  int valuePtr;

  if (result)
  {
    v1 = result;
    Value = CFDictionaryGetValue(result, CFSTR("kCTCallPhoneNumber"));
    v3 = (const __CFString *)CFDictionaryGetValue(v1, CFSTR("kCTCallType"));
    v4 = v3;
    if (v3)
    {
      if (CFStringCompare(v3, CFSTR("kCTCallTypeNormal"), 0))
      {
        if (CFStringCompare(v4, CFSTR("kCTCallTypeVoicemail"), 0))
        {
          if (CFStringCompare(v4, CFSTR("kCTCallTypeEmergency"), 0))
          {
            if (CFStringCompare(v4, CFSTR("kCTCallTypeVideoConference"), 0))
            {
              if (CFStringCompare(v4, CFSTR("kCTCallTypeAudioConference"), 0))
              {
                if (CFStringCompare(v4, CFSTR("kCTCallTypeVOIP"), 0))
                  LODWORD(v4) = 7;
                else
                  LODWORD(v4) = 5;
              }
              else
              {
                LODWORD(v4) = 4;
              }
            }
            else
            {
              LODWORD(v4) = 3;
            }
          }
          else
          {
            LODWORD(v4) = 2;
          }
        }
        else
        {
          LODWORD(v4) = 1;
        }
      }
      else
      {
        LODWORD(v4) = 0;
      }
    }
    v5 = (const __CFString *)CFDictionaryGetValue(v1, CFSTR("kCTCallSourceMode"));
    if (v5)
      v6 = CTCallSourceToCCCallSourceMode(v5);
    else
      v6 = 0;
    v7 = (const __CFNumber *)CFDictionaryGetValue(v1, CFSTR("kCTCallId"));
    valuePtr = -1;
    if (v7)
      CFNumberGetValue(v7, kCFNumberIntType, &valuePtr);
    v8 = CFDictionaryGetValue(v1, CFSTR("kCTCallAudioSourceId"));
    return (const __CFDictionary *)_CTCallDial(Value, 0, v4, (uint64_t)v8, v6);
  }
  return result;
}

uint64_t CTCallSourceToCCCallSourceMode(const __CFString *a1)
{
  if (CFStringCompare(a1, CFSTR("kCTCallSourceModeRelay"), 0) == kCFCompareEqualTo)
    return 1;
  CFStringCompare(a1, CFSTR("kCTCallSourceModeNormal"), 0);
  return 0;
}

BOOL CTCallAnswer(uint64_t a1)
{
  return CTCallAnswerWithSourceIdentifier(a1, 0);
}

BOOL CTCallAnswerWithSourceIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t Default;

  if (CTCallGetStatus(a1) != 4)
    return 0;
  Default = CTTelephonyCenterGetDefault();
  return (unint64_t)_CTServerConnectionAnswerCall(Default, a1, a2, 0) >> 32 == 0;
}

uint64_t CTCallGetStatus(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;

  _os_nospin_lock_lock();
  v2 = *(_DWORD *)(a1 + 68);
  _os_nospin_lock_unlock();
  if (v2 == 196608)
    v3 = 3;
  else
    v3 = v2;
  if (v2 == 0x40000)
    return 4;
  else
    return v3;
}

const __CFDictionary *CTCallAnswerWithOptions(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  uint64_t v2;
  const void *Value;
  const __CFString *v4;
  unsigned int v5;
  const __CFString *v6;
  uint64_t Default;

  if (result)
  {
    v1 = result;
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("kCTCall"));
    if (result)
    {
      v2 = (uint64_t)result;
      Value = CFDictionaryGetValue(v1, CFSTR("kCTCallAudioSourceId"));
      v4 = (const __CFString *)CFDictionaryGetValue(v1, CFSTR("kCTCallSourceMode"));
      v5 = v4 ? CTCallSourceToCCCallSourceMode(v4) : 0;
      result = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("kCTCallAnswerBehavior"));
      if (result)
      {
        v6 = (const __CFString *)result;
        if (CFStringCompare((CFStringRef)result, CFSTR("kCTCallAnswerAndEndActive"), 0))
        {
          if (CFStringCompare(v6, CFSTR("kCTCallAnswerAndEndHeld"), 0))
          {
            if (CFStringCompare(v6, CFSTR("kCTCallAnswerOnly"), 0) || CTCallGetStatus(v2) != 4)
            {
              return 0;
            }
            else
            {
              Default = CTTelephonyCenterGetDefault();
              return (const __CFDictionary *)((unint64_t)_CTServerConnectionAnswerCall(Default, v2, (uint64_t)Value, v5) >> 32 == 0);
            }
          }
          else
          {
            return (const __CFDictionary *)_endHeldCallAndAnswer(v2, v5);
          }
        }
        else
        {
          return (const __CFDictionary *)_endActiveCallAndAnswer(v2, (uint64_t)Value, v5);
        }
      }
    }
  }
  return result;
}

BOOL _endActiveCallAndAnswer(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const void *Default;
  const __CFAllocator *v6;
  _BOOL8 v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  const void *ValueAtIndex;

  if (CTCallGetStatus(a1) != 4)
    return 0;
  Default = (const void *)CTTelephonyCenterGetDefault();
  v6 = CFGetAllocator(Default);
  v7 = 1;
  v8 = _CTCallCopyCurrentCallsWithTypes(v6, 3u, 1);
  Count = CFArrayGetCount(v8);
  if (Count >= 1)
  {
    v10 = Count;
    v11 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
      if (CTCallGetStatus((uint64_t)ValueAtIndex) == 1)
        break;
      if (v10 == ++v11)
      {
        v7 = 1;
        goto LABEL_9;
      }
    }
    v7 = (unint64_t)_CTServerConnectionEndCall((uint64_t)Default, a2, a3) >> 32 == 0;
  }
LABEL_9:
  CFRelease(v8);
  return v7;
}

BOOL _endHeldCallAndAnswer(uint64_t a1, unsigned int a2)
{
  const void *Default;
  const __CFAllocator *v4;
  _BOOL8 v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const void *ValueAtIndex;

  if (CTCallGetStatus(a1) != 4)
    return 0;
  Default = (const void *)CTTelephonyCenterGetDefault();
  v4 = CFGetAllocator(Default);
  v5 = 1;
  v6 = _CTCallCopyCurrentCallsWithTypes(v4, 3u, 1);
  Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    v8 = Count;
    v9 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
      if (CTCallGetStatus((uint64_t)ValueAtIndex) == 2)
        break;
      if (v8 == ++v9)
      {
        v5 = 1;
        goto LABEL_9;
      }
    }
    v5 = (unint64_t)_CTServerConnectionAnswerWaitingCallEndingHeld((uint64_t)Default, a2) >> 32 == 0;
  }
LABEL_9:
  CFRelease(v6);
  return v5;
}

BOOL CTCallAnswerEndingActiveWithSourceIdentifier(uint64_t a1, uint64_t a2)
{
  return _endActiveCallAndAnswer(a1, a2, 0);
}

BOOL CTCallAnswerEndingActive(uint64_t a1)
{
  return _endActiveCallAndAnswer(a1, 0, 0);
}

BOOL CTCallAnswerEndingHeld(uint64_t a1)
{
  return _endHeldCallAndAnswer(a1, 0);
}

BOOL CTCallSwitchCallSource(_BOOL8 result, const __CFString *a2)
{
  uint64_t v2;
  unsigned int v3;
  const __CFUUID *v4;
  uint64_t Default;
  unint64_t v6;

  if (result)
  {
    v2 = result;
    if (a2)
      v3 = CTCallSourceToCCCallSourceMode(a2);
    else
      v3 = 0;
    v4 = _CopyCallUUIDSync((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v2);
    Default = CTTelephonyCenterGetDefault();
    v6 = _CTServerConnectionSwitchCallSource(Default, v4, v3);
    if (v4)
      CFRelease(v4);
    return HIDWORD(v6) == 0;
  }
  return result;
}

const __CFUUID *_CopyCallUUIDSync(const __CFAllocator *a1, uint64_t a2)
{
  const __CFUUID *result;
  CFUUIDBytes v4;

  result = *(const __CFUUID **)(a2 + 24);
  if (result)
  {
    v4 = CFUUIDGetUUIDBytes(result);
    return CFUUIDCreateFromUUIDBytes(a1, v4);
  }
  return result;
}

BOOL CTCallSwitchCallSourceAll(const __CFString *a1)
{
  unsigned int v1;
  uint64_t Default;

  if (a1)
    v1 = CTCallSourceToCCCallSourceMode(a1);
  else
    v1 = 0;
  Default = CTTelephonyCenterGetDefault();
  return (unint64_t)_CTServerConnectionSwitchCallSourceAll(Default, v1) >> 32 == 0;
}

BOOL CTCallDisconnect(uint64_t a1)
{
  int Status;
  int v3;
  uint64_t Default;
  unint64_t v6;

  Status = CTCallGetStatus(a1);
  _os_nospin_lock_lock();
  v3 = *(_DWORD *)(a1 + 72);
  _os_nospin_lock_unlock();
  if (Status == 5)
    return 0;
  Default = CTTelephonyCenterGetDefault();
  if (Status == 4 && (v3 & 3) != 0)
    v6 = _CTServerConnectionSendToVoicemail(Default, a1);
  else
    v6 = _CTServerConnectionEndThisCall(Default, a1);
  return HIDWORD(v6) == 0;
}

BOOL CTCallDisconnectWithCauseCode(_BOOL8 result, unsigned int a2)
{
  uint64_t v3;
  uint64_t Default;

  if (result)
  {
    v3 = result;
    if (CTCallGetStatus(result) == 5)
    {
      return 0;
    }
    else
    {
      Default = CTTelephonyCenterGetDefault();
      return (unint64_t)_CTServerConnectionEndCallWithCauseCode(Default, v3, a2) >> 32 == 0;
    }
  }
  return result;
}

BOOL CTCallListDisconnect()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return (unint64_t)_CTServerConnectionEndCall(Default, 0, 0) >> 32 == 0;
}

BOOL CTCallListDisconnectAll()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return (unint64_t)_CTServerConnectionEndAllCalls(Default) >> 32 == 0;
}

BOOL CTCallHold(uint64_t a1)
{
  unsigned int Status;
  uint64_t Default;

  Status = CTCallGetStatus(a1);
  if ((*(_DWORD *)(a1 + 72) & 0x1C) != 0 || Status <= 5 && ((1 << Status) & 0x25) != 0)
    return 0;
  Default = CTTelephonyCenterGetDefault();
  return (unint64_t)_CTServerConnectionHoldActiveCall(Default, a1) >> 32 == 0;
}

uint64_t CTCallResume(uint64_t a1)
{
  int Status;
  unsigned __int8 v3;
  uint64_t Default;
  unsigned __int8 v6;

  v6 = 0;
  Status = CTCallGetStatus(a1);
  v3 = 0;
  if (Status == 2)
  {
    Default = CTTelephonyCenterGetDefault();
    if (_CTServerConnectionResumeHeldCall(Default, &v6, a1) >> 32)
      return 0;
    else
      return v6;
  }
  return v3;
}

uint64_t CTCallSwap(uint64_t a1)
{
  uint64_t Default;
  unsigned __int8 v5;

  v5 = 0;
  Default = CTTelephonyCenterGetDefault();
  if (_CTServerConnectionSwapCalls(Default, &v5, a1) >> 32)
    return v5;
  else
    return 1;
}

uint64_t CTCallJoinConference(uint64_t a1)
{
  int Status;
  unsigned __int8 v2;
  uint64_t Default;
  unsigned __int8 v5;

  v5 = 0;
  Status = CTCallGetStatus(a1);
  v2 = 0;
  if (Status == 2)
  {
    Default = CTTelephonyCenterGetDefault();
    if (_CTServerConnectionAddHeldToMultiPartyCall(Default, &v5) >> 32)
      return 0;
    else
      return v5;
  }
  return v2;
}

BOOL CTCallLeaveConference(uint64_t a1)
{
  int Status;
  _BOOL8 result;
  uint64_t Default;

  Status = CTCallGetStatus(a1);
  result = 0;
  if (Status)
  {
    if (Status != 5)
    {
      Default = CTTelephonyCenterGetDefault();
      return (unint64_t)_CTServerConnectionCreatePrivateConversation(Default, a1) >> 32 == 0;
    }
  }
  return result;
}

CFTypeRef CTCallStartVideoConference(const void *a1, int a2, double a3)
{
  uint64_t v6;
  int v7;
  CFTypeRef result;
  CFTypeRef cf;

  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  cf = 0;
  if (CTCallCreateCallRef(*MEMORY[0x1E0C9AE00], CFSTR("kCTCallTypeVideoConference"), (uint64_t *)&cf, 0)
    && CTCallSetCallInfo((uint64_t)cf, a1, 0, 0, v6, 0)
    && CTCallSetCallStartTime((uint64_t)cf, 0, a3))
  {
    v7 = a2 ? 3 : 4;
    if (CTCallSetCallStatus((uint64_t)cf, v7, 0)
      && CTCallSetCallStatus((uint64_t)cf, 1, 0))
    {
      return cf;
    }
  }
  result = cf;
  if (cf)
  {
    CFRelease(cf);
    return 0;
  }
  return result;
}

uint64_t CTCallCreateCallRef(uint64_t a1, const void *a2, uint64_t *a3, __CFString **a4)
{
  int v6;
  int v7;
  uint64_t Instance;
  uint64_t v9;
  __CFString **v10;
  __CFString *v11;

  v6 = _GetCallTypeFlagForString(a2);
  if (!a3 || (v7 = v6) == 0)
  {
    if (!a4)
      return 0;
    v10 = kCTCallErrorInvalidArgument;
LABEL_12:
    v11 = *v10;
    *a4 = *v10;
    CFRetain(v11);
    return 0;
  }
  if ((v6 & 0x1C) == 0)
  {
    if (!a4)
      return 0;
    v10 = kCTCallErrorOperationNotAllowed;
    goto LABEL_12;
  }
  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    if (a4)
    {
      v10 = kCTCallErrorNoMemory;
      goto LABEL_12;
    }
    return 0;
  }
  *(_DWORD *)(Instance + 16) = 0;
  *(_WORD *)(Instance + 66) = 256;
  *(_OWORD *)(Instance + 24) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 49) = 0u;
  *(_QWORD *)(Instance + 84) = 2;
  *(_DWORD *)(Instance + 68) = 0;
  *(_DWORD *)(Instance + 72) = v7;
  *(_QWORD *)(Instance + 112) = 0;
  *(_QWORD *)(Instance + 120) = 0;
  *(_QWORD *)(Instance + 96) = 0;
  *(_QWORD *)(Instance + 104) = 0;
  *(_WORD *)(Instance + 80) = 0;
  *(_BYTE *)(Instance + 82) = 0;
  v9 = 1;
  *a3 = Instance;
  return v9;
}

uint64_t CTCallSetCallInfo(uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5, _QWORD *a6)
{
  const void *v11;
  const void *v12;
  const void *v13;
  uint64_t v14;

  _os_nospin_lock_lock();
  if ((*(_BYTE *)(a1 + 72) & 0x1C) != 0)
  {
    v11 = *(const void **)(a1 + 32);
    if (v11)
      CFRelease(v11);
    *(_QWORD *)(a1 + 32) = a2;
    if (a2)
      CFRetain(a2);
    v12 = *(const void **)(a1 + 40);
    if (v12)
      CFRelease(v12);
    *(_QWORD *)(a1 + 40) = a3;
    if (a3)
      CFRetain(a3);
    v13 = *(const void **)(a1 + 120);
    if (v13)
      CFRelease(v13);
    *(_QWORD *)(a1 + 120) = a4;
    if (a4)
      CFRetain(a4);
    v14 = 1;
  }
  else
  {
    if (a6)
    {
      *a6 = CFSTR("Operation not allowed");
      CFRetain(CFSTR("Operation not allowed"));
    }
    v14 = 0;
  }
  _os_nospin_lock_unlock();
  return v14;
}

uint64_t CTCallSetCallStartTime(uint64_t a1, uint64_t a2, double a3)
{
  _os_nospin_lock_lock();
  if ((*(_BYTE *)(a1 + 72) & 0x1C) != 0)
  {
    *(double *)(a1 + 96) = a3;
    *(double *)(a1 + 112) = a3;
    a2 = 1;
  }
  else if (a2)
  {
    *(_QWORD *)a2 = CFSTR("Operation not allowed");
    CFRetain(CFSTR("Operation not allowed"));
    a2 = 0;
  }
  _os_nospin_lock_unlock();
  return a2;
}

uint64_t CTCallSetCallStatus(uint64_t a1, int a2, _QWORD *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t Default;
  unint64_t v18;
  int IsDefaultConnection;
  int v20;
  unsigned __int8 v21;
  signed int v22;
  CFUUIDBytes v23;

  _os_nospin_lock_lock();
  if ((*(_BYTE *)(a1 + 72) & 0x1C) == 0)
  {
    if (a3)
    {
      *a3 = CFSTR("Operation not allowed");
      CFRetain(CFSTR("Operation not allowed"));
    }
    goto LABEL_9;
  }
  v6 = *(_DWORD *)(a1 + 68);
  if (v6 != a2)
  {
    if (a2 != 5)
    {
      switch(v6)
      {
        case 0:
          if ((a2 - 3) >= 2)
            goto LABEL_9;
          pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
          v12 = *(_DWORD *)(a1 + 72);
          if (v12 == 4)
            v13 = 3;
          else
            v13 = 7;
          if (v12 == 8)
            v14 = 5;
          else
            v14 = v13;
          *(_QWORD *)&v23.byte0 = 0;
          *(_QWORD *)&v23.byte8 = 0;
          if (v12 == 16)
            v15 = 4;
          else
            v15 = v14;
          v22 = 0;
          v21 = 0;
          v16 = convertToCallStatus(a2);
          _os_nospin_lock_unlock();
          Default = CTTelephonyCenterGetDefault();
          v18 = _CTServerConnectionAddCall(Default, v15, v16, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 120), &v21, (uint64_t *)&v23, *(double *)(a1 + 96), &v22);
          IsDefaultConnection = _CTServerConnectionIsDefaultConnection(Default);
          if (HIDWORD(v18) || !v21)
          {
            _os_nospin_lock_lock();
          }
          else
          {
            v20 = IsDefaultConnection;
            if (IsDefaultConnection)
            {
              pthread_mutex_lock(&_GlobalCallsLock);
              _os_nospin_lock_lock();
              _CTCallUpdateFromCallInfo(v20, (char *)a1, &v23, v22);
              pthread_mutex_unlock(&_GlobalCallsLock);
            }
            else
            {
              _os_nospin_lock_lock();
              _CTCallUpdateFromCallInfo(0, (char *)a1, &v23, v22);
            }
          }
          v10 = v21;
          goto LABEL_10;
        case 1:
          if (a2 != 2)
            goto LABEL_9;
          break;
        case 2:
          if (a2 != 1)
            goto LABEL_9;
          break;
        case 3:
        case 4:
          goto LABEL_27;
        case 5:
          if (!a2)
            break;
          goto LABEL_9;
        default:
          if (v6 != 0x40000)
            goto LABEL_9;
LABEL_27:
          if ((a2 - 1) >= 2)
            goto LABEL_9;
          break;
      }
    }
    pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
    v7 = convertToCallStatus(a2);
    _os_nospin_lock_unlock();
    v8 = CTTelephonyCenterGetDefault();
    v9 = _CTServerConnectionUpdateCallStatus(v8, *(const __CFUUID **)(a1 + 24), v7, *(double *)(a1 + 96), *(double *)(a1 + 104));
    _os_nospin_lock_lock();
    if (!HIDWORD(v9))
    {
      *(_DWORD *)(a1 + 68) = a2;
      goto LABEL_6;
    }
LABEL_9:
    v10 = 0;
    goto LABEL_10;
  }
LABEL_6:
  v10 = 1;
LABEL_10:
  _os_nospin_lock_unlock();
  return v10;
}

uint64_t CTCallEndVideoConference(uint64_t a1, double a2)
{
  if (CTCallGetStatus(a1) == 5 || !CTCallSetCallEndTime(a1, 0, a2))
    return 0;
  else
    return CTCallSetCallStatus(a1, 5, 0);
}

uint64_t CTCallSetCallEndTime(uint64_t a1, uint64_t a2, double a3)
{
  __CFString **v6;
  __CFString *v7;

  _os_nospin_lock_lock();
  if ((*(_BYTE *)(a1 + 72) & 0x1C) != 0)
  {
    if (*(double *)(a1 + 96) <= a3)
    {
      *(double *)(a1 + 104) = a3;
      a2 = 1;
      goto LABEL_9;
    }
    if (a2)
    {
      v6 = kCTCallErrorInvalidArgument;
LABEL_7:
      v7 = *v6;
      *(_QWORD *)a2 = *v6;
      CFRetain(v7);
      a2 = 0;
    }
  }
  else if (a2)
  {
    v6 = kCTCallErrorOperationNotAllowed;
    goto LABEL_7;
  }
LABEL_9:
  _os_nospin_lock_unlock();
  return a2;
}

uint64_t CTCallShouldPlayAudioTone(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (a1)
  {
    _os_nospin_lock_lock();
    v1 = *(unsigned __int8 *)(v1 + 80);
    _os_nospin_lock_unlock();
  }
  return v1;
}

uint64_t CTCallShouldSetupAudioInterruption(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (a1)
  {
    _os_nospin_lock_lock();
    v1 = *(unsigned __int8 *)(v1 + 81);
    _os_nospin_lock_unlock();
  }
  return v1;
}

uint64_t CTCallDidDeviceOriginateEnd(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (a1)
  {
    _os_nospin_lock_lock();
    v1 = *(unsigned __int8 *)(v1 + 82);
    _os_nospin_lock_unlock();
  }
  return v1;
}

uint64_t CTCallIsOutgoing(uint64_t a1)
{
  uint64_t v2;

  _os_nospin_lock_lock();
  v2 = *(unsigned __int8 *)(a1 + 64);
  _os_nospin_lock_unlock();
  return v2;
}

uint64_t CTCallIsConferenced(uint64_t a1)
{
  uint64_t v2;

  _os_nospin_lock_lock();
  v2 = *(unsigned __int8 *)(a1 + 65);
  _os_nospin_lock_unlock();
  return v2;
}

uint64_t CTCallIsToVoicemail(uint64_t a1)
{
  uint64_t v2;

  _os_nospin_lock_lock();
  v2 = *(unsigned __int8 *)(a1 + 66);
  _os_nospin_lock_unlock();
  return v2;
}

const __CFString *CTCallGetCallType(uint64_t a1)
{
  const __CFString *v2;

  _os_nospin_lock_lock();
  v2 = _GetCallTypeStringForFlag(*(_DWORD *)(a1 + 72));
  _os_nospin_lock_unlock();
  return v2;
}

const __CFString *CTCallGetCallSubType(uint64_t a1)
{
  const __CFString *v2;

  _os_nospin_lock_lock();
  v2 = _GetCallSubTypeString(*(_DWORD *)(a1 + 76));
  _os_nospin_lock_unlock();
  return v2;
}

CFStringRef CTCallCopyAddress(const __CFAllocator *a1, uint64_t a2)
{
  const __CFString *v4;
  CFStringRef Copy;

  _os_nospin_lock_lock();
  v4 = *(const __CFString **)(a2 + 32);
  if (v4)
    Copy = CFStringCreateCopy(a1, v4);
  else
    Copy = 0;
  _os_nospin_lock_unlock();
  return Copy;
}

CFStringRef CTCallCopyName(const __CFAllocator *a1, uint64_t a2)
{
  const __CFString *v4;
  CFStringRef Copy;

  _os_nospin_lock_lock();
  v4 = *(const __CFString **)(a2 + 40);
  if (v4)
    Copy = CFStringCreateCopy(a1, v4);
  else
    Copy = 0;
  _os_nospin_lock_unlock();
  return Copy;
}

CFStringRef CTCallCopyCountryCode(const __CFAllocator *a1, uint64_t a2)
{
  const __CFString *v4;
  uint64_t Default;
  CFTypeRef v6;
  CFStringRef Copy;
  CFTypeRef cf;

  _os_nospin_lock_lock();
  v4 = *(const __CFString **)(a2 + 48);
  if (v4)
    goto LABEL_8;
  _os_nospin_lock_unlock();
  cf = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyCountryCode(Default, &cf);
  _os_nospin_lock_lock();
  v4 = *(const __CFString **)(a2 + 48);
  v6 = cf;
  if (!v4 && cf)
  {
    CFRetain(cf);
    v4 = (const __CFString *)cf;
    *(_QWORD *)(a2 + 48) = cf;
    v6 = v4;
  }
  if (v6)
  {
    CFRelease(v6);
    v4 = *(const __CFString **)(a2 + 48);
  }
  if (v4)
LABEL_8:
    Copy = CFStringCreateCopy(a1, v4);
  else
    Copy = 0;
  _os_nospin_lock_unlock();
  return Copy;
}

CFStringRef CTCallCopyNetworkCode(const __CFAllocator *a1, uint64_t a2)
{
  const __CFString *v4;
  CFStringRef Copy;

  _os_nospin_lock_lock();
  v4 = *(const __CFString **)(a2 + 56);
  if (v4)
    Copy = CFStringCreateCopy(a1, v4);
  else
    Copy = 0;
  _os_nospin_lock_unlock();
  return Copy;
}

BOOL CTCallAddressBlocked(uint64_t a1)
{
  _BOOL8 v2;

  _os_nospin_lock_lock();
  v2 = *(_DWORD *)(a1 + 84) == 1;
  _os_nospin_lock_unlock();
  return v2;
}

BOOL CTCallIsAlerting(uint64_t a1)
{
  _BOOL8 v2;

  _os_nospin_lock_lock();
  v2 = *(_DWORD *)(a1 + 68) == 196608;
  _os_nospin_lock_unlock();
  return v2;
}

BOOL CTCallIsWaiting(uint64_t a1)
{
  _BOOL8 v2;

  _os_nospin_lock_lock();
  v2 = *(_DWORD *)(a1 + 68) == 0x40000;
  _os_nospin_lock_unlock();
  return v2;
}

uint64_t CTCallGetStartTime(uint64_t a1, double *a2)
{
  double v4;
  uint64_t v5;

  _os_nospin_lock_lock();
  v4 = *(double *)(a1 + 96);
  if (v4 == 2.22507386e-308)
  {
    v5 = 0;
  }
  else
  {
    *a2 = v4;
    v5 = 1;
  }
  _os_nospin_lock_unlock();
  return v5;
}

uint64_t CTCallGetDuration(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;

  _os_nospin_lock_lock();
  v4 = a1[12];
  if (v4 == 2.22507386e-308)
  {
    v7 = 0;
  }
  else
  {
    v5 = a1[13];
    if (v5 == 2.22507386e-308)
      v6 = CFAbsoluteTimeGetCurrent() - a1[14];
    else
      v6 = v5 - v4;
    *a2 = v6;
    v7 = 1;
  }
  _os_nospin_lock_unlock();
  return v7;
}

uint64_t CTCallGetCauseCode(uint64_t a1)
{
  uint64_t v2;

  _os_nospin_lock_lock();
  v2 = *(unsigned int *)(a1 + 88);
  _os_nospin_lock_unlock();
  return v2;
}

const __CFString *CTCallGetCauseCodeString(uint64_t a1)
{
  int v2;
  const __CFString *v3;

  _os_nospin_lock_lock();
  v2 = *(_DWORD *)(a1 + 88);
  if (v2 <= 79)
  {
    if (!v2)
    {
      v3 = CFSTR("kCTCallDisconnectNoError");
      goto LABEL_13;
    }
    if (v2 == 28)
    {
      v3 = CFSTR("kCTCallDisconnectUserBusy");
      goto LABEL_13;
    }
LABEL_12:
    v3 = CFSTR("kCTCallDisconnectOtherReason");
    goto LABEL_13;
  }
  if (v2 == 80)
  {
    v3 = CFSTR("kCTCallDisconnectSecondaryDeviceAlreadyInUse");
    goto LABEL_13;
  }
  if (v2 == 81)
  {
    v3 = CFSTR("kCTCallDisconnectAnsweredElsewhere");
    goto LABEL_13;
  }
  if (v2 != 82)
    goto LABEL_12;
  v3 = CFSTR("kCTCallDisconnectCallHandedToAnotherDevice");
LABEL_13:
  _os_nospin_lock_unlock();
  return v3;
}

uint64_t CTCallGetMultiPartyCallCountMax()
{
  uint64_t Default;
  uint64_t v2;

  v2 = 5;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetMultiPartyCallCountMaximum(Default, &v2);
  return v2;
}

const __CFUUID *CTCallCopyUUID(const __CFAllocator *a1, uint64_t a2)
{
  const __CFUUID *v4;

  _os_nospin_lock_lock();
  v4 = _CopyCallUUIDSync(a1, a2);
  _os_nospin_lock_unlock();
  return v4;
}

CFStringRef CTCallCopyUniqueStringID(const __CFAllocator *a1, uint64_t a2)
{
  const __CFUUID *v4;
  CFStringRef v5;

  if (!a2)
    return 0;
  _os_nospin_lock_lock();
  v4 = *(const __CFUUID **)(a2 + 24);
  if (v4)
    v5 = CFUUIDCreateString(a1, v4);
  else
    v5 = CFSTR("<Unknown>");
  _os_nospin_lock_unlock();
  return v5;
}

uint64_t _CTCallGetIdentifier(uint64_t a1)
{
  uint64_t v2;

  _os_nospin_lock_lock();
  v2 = *(_OWORD *)&CFUUIDGetUUIDBytes((CFUUIDRef)*(_QWORD *)(a1 + 24));
  _os_nospin_lock_unlock();
  return v2;
}

uint64_t _CTCallGetCallStatusFromFlags(char a1, int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;

  v2 = _CTCallGetCallStatusFromFlags_kCTCallStatusTypeMap[a1 & 0xF];
  if (v2 == 196608)
    v3 = 3;
  else
    v3 = _CTCallGetCallStatusFromFlags_kCTCallStatusTypeMap[a1 & 0xF];
  if (v2 == 0x40000)
    v4 = 4;
  else
    v4 = v3;
  if (a2)
    return v2;
  else
    return v4;
}

uint64_t _CTCallCreateFromCallInfo(const void *a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5, const char *a6, int a7, int a8, unsigned int a9, int a10, unsigned int a11, char *cStr, unsigned __int8 a13)
{
  const __CFAllocator *v20;
  CFUUIDRef v21;
  int IsDefaultConnection;
  const void *Value;
  uint64_t v24;
  uint64_t Instance;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  int v30;
  int v31;
  int v32;
  double v33;
  int v34;
  double v35;
  int v36;
  const __CFArray *v37;
  CFIndex FirstIndexOfValue;
  CFIndex v39;
  const void *ValueAtIndex;
  const __CFArray *v41;
  CFUUIDBytes v44;
  CFRange v45;
  CFRange v46;

  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  v20 = CFGetAllocator(a1);
  *(_QWORD *)&v44.byte0 = a2;
  *(_QWORD *)&v44.byte8 = a3;
  v21 = CFUUIDCreateFromUUIDBytes(v20, v44);
  IsDefaultConnection = _CTServerConnectionIsDefaultConnection((uint64_t)a1);
  if (IsDefaultConnection)
  {
    pthread_mutex_lock(&_GlobalCallsLock);
    if (!v21)
    {
      v24 = 0;
      goto LABEL_76;
    }
    Value = CFDictionaryGetValue((CFDictionaryRef)_UuidToCallMap, v21);
    if (Value)
    {
      v24 = (uint64_t)Value;
      CFRetain(Value);
      goto LABEL_8;
    }
  }
  else if (!v21)
  {
    return 0;
  }
  Instance = _CFRuntimeCreateInstance();
  v24 = Instance;
  if (!Instance)
  {
    CFRelease(v21);
    goto LABEL_75;
  }
  *(_DWORD *)(Instance + 16) = 0;
  *(_QWORD *)(Instance + 24) = CFRetain(v21);
  *(_BYTE *)(v24 + 67) = 0;
  *(_QWORD *)(v24 + 136) = 0;
  *(_WORD *)(v24 + 80) = 0;
  *(_BYTE *)(v24 + 82) = 0;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_QWORD *)(v24 + 112) = 0;
  *(_QWORD *)(v24 + 120) = 0;
LABEL_8:
  CFRelease(v21);
  if (a4 && !*(_QWORD *)(v24 + 32) && *a4)
    *(_QWORD *)(v24 + 32) = CFStringCreateWithCString(v20, a4, 0x8000100u);
  if (a5 && *a5)
  {
    v26 = *(const void **)(v24 + 40);
    if (v26)
      CFRelease(v26);
    *(_QWORD *)(v24 + 40) = CFStringCreateWithCString(v20, a5, 0x8000100u);
  }
  if (a11 != 0xFFFF)
  {
    v27 = *(const void **)(v24 + 48);
    if (v27)
      CFRelease(v27);
    *(_QWORD *)(v24 + 48) = CFStringCreateWithFormat(v20, 0, CFSTR("%03d"), a11);
  }
  if (cStr && *cStr)
  {
    v28 = *(const void **)(v24 + 136);
    if (v28)
      CFRelease(v28);
    *(_QWORD *)(v24 + 136) = CFStringCreateWithCString(v20, cStr, 0x8000100u);
  }
  if (a6 && *a6)
  {
    v29 = *(const void **)(v24 + 120);
    if (v29)
      CFRelease(v29);
    *(_QWORD *)(v24 + 120) = CFStringCreateWithCString(v20, a6, 0x8000100u);
  }
  *(_BYTE *)(v24 + 64) = (a9 & 0x80000000) == 0;
  if ((a9 & 0xF) != 9)
    *(_DWORD *)(v24 + 68) = _CTCallGetCallStatusFromFlags_kCTCallStatusTypeMap[a9 & 0xF];
  *(_DWORD *)(v24 + 84) = HIWORD(a9) & 3;
  *(_BYTE *)(v24 + 65) = (a9 & 0x40000000) != 0;
  *(_BYTE *)(v24 + 66) = (a9 & 0x20000000) != 0;
  v30 = 2;
  if ((a9 & 0x20000000) == 0)
  {
    if ((a9 & 0x10000000) != 0)
    {
      v30 = 4;
    }
    else if ((a9 & 0x1000000) != 0)
    {
      v30 = 16;
    }
    else if ((a9 & 0x8000000) != 0)
    {
      v30 = 8;
    }
    else
    {
      v30 = 1;
    }
  }
  if ((a9 & 0x80000) != 0)
    v31 = 4;
  else
    v31 = 1;
  if ((a9 & 0x40000) != 0)
    v32 = 2;
  else
    v32 = v31;
  *(_DWORD *)(v24 + 72) = v30;
  *(_DWORD *)(v24 + 76) = v32;
  if ((a9 & 0x19000000) != 0)
  {
    if (*(_BYTE *)(v24 + 67))
      goto LABEL_62;
    v33 = (double)a7 - *MEMORY[0x1E0C9ADF8];
    *(double *)(v24 + 96) = v33;
  }
  else
  {
    v34 = *(_DWORD *)(v24 + 68);
    v33 = 2.22507386e-308;
    if ((v34 - 3) >= 2 && v34 != 196608 && v34 != 0x40000)
      v33 = (double)a7 - *MEMORY[0x1E0C9ADF8];
    *(double *)(v24 + 96) = v33;
    if (v34 != 5 && v34)
    {
      v35 = 2.22507386e-308;
      goto LABEL_61;
    }
  }
  v35 = v33 + (double)a8;
LABEL_61:
  *(double *)(v24 + 104) = v35;
LABEL_62:
  if (a10)
    *(double *)(v24 + 112) = (double)a10 - *MEMORY[0x1E0C9ADF8];
  *(_DWORD *)(v24 + 88) = BYTE1(a9);
  if (IsDefaultConnection)
    v36 = a13;
  else
    v36 = 0;
  if ((a9 & 0xF) != 6)
  {
    if (v36)
    {
      CFDictionaryAddValue((CFMutableDictionaryRef)_UuidToCallMap, *(const void **)(v24 + 24), (const void *)v24);
      v41 = (const __CFArray *)_CurrentCalls;
      v46.length = CFArrayGetCount((CFArrayRef)_CurrentCalls);
      v46.location = 0;
      if (CFArrayGetFirstIndexOfValue(v41, v46, (const void *)v24) == -1)
        CFArrayAppendValue((CFMutableArrayRef)_CurrentCalls, (const void *)v24);
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (!v36)
  {
LABEL_75:
    if (!IsDefaultConnection)
      return v24;
LABEL_76:
    pthread_mutex_unlock(&_GlobalCallsLock);
    return v24;
  }
  v37 = (const __CFArray *)_CurrentCalls;
  v45.length = CFArrayGetCount((CFArrayRef)_CurrentCalls);
  v45.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v37, v45, (const void *)v24);
  if (FirstIndexOfValue == -1)
    goto LABEL_76;
  v39 = FirstIndexOfValue;
  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)_CurrentCalls, FirstIndexOfValue);
  CFRetain(ValueAtIndex);
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)_CurrentCalls, v39);
  pthread_mutex_unlock(&_GlobalCallsLock);
  if (ValueAtIndex)
    CFRelease(ValueAtIndex);
  return v24;
}

void _CTCallHandleChangeNotification(const __CFString *cf1, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v5;
  const void *Default;
  const __CFAllocator *v7;
  const void *v8;
  CFArrayRef v9;
  const __CFAllocator *v10;
  const __CFArray *v11;
  __CFNotificationCenter *LocalCenter;
  const __CFString *v13;
  const void *v14;
  const __CFAllocator *v15;
  CFArrayRef Copy;

  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("kCTCall"));
    if (Value)
    {
      v5 = Value;
      Default = (const void *)CTTelephonyCenterGetDefault();
      v7 = CFGetAllocator(Default);
      v8 = (const void *)*MEMORY[0x1E0C9AE50];
      if (v8 == CFDictionaryGetValue(theDict, CFSTR("kCTCallIsTheOnlyCall")))
      {
        v15 = CFGetAllocator(v5);
        pthread_mutex_lock(&_GlobalCallsLock);
        Copy = CFArrayCreateCopy(v15, (CFArrayRef)_CurrentCalls);
        CFArrayRemoveAllValues((CFMutableArrayRef)_CurrentCalls);
        CFArrayAppendValue((CFMutableArrayRef)_CurrentCalls, v5);
        _CurrentCallsUpToDate = 1;
        pthread_mutex_unlock(&_GlobalCallsLock);
        v11 = Copy;
      }
      else
      {
        pthread_mutex_lock(&_GlobalCallsLock);
        v9 = CFArrayCreateCopy(v7, (CFArrayRef)_CurrentCalls);
        CFArrayRemoveAllValues((CFMutableArrayRef)_CurrentCalls);
        _CurrentCallsUpToDate = 0;
        pthread_mutex_unlock(&_GlobalCallsLock);
        CFRelease(v9);
        v10 = CFGetAllocator(v5);
        v11 = _CTCallCopyCurrentCallsWithTypes(v10, 0xFFFFFFFF, 0);
        if (!v11)
          goto LABEL_12;
      }
      CFRelease(v11);
LABEL_12:
      LocalCenter = CFNotificationCenterGetLocalCenter();
      v13 = cf1;
      v14 = v5;
      goto LABEL_13;
    }
  }
  if (CFEqual(cf1, CFSTR("kCTCallForwardedNotification"))
    || CFEqual(cf1, CFSTR("kCTCallDeflectedNotification"))
    || CFEqual(cf1, CFSTR("kCTCallBarredNotification")))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    v13 = cf1;
    v14 = 0;
LABEL_13:
    CFNotificationCenterPostNotification(LocalCenter, v13, v14, theDict, 1u);
  }
}

void _CTCallHandleUSSDSessionStringNotification(const __CFString *a1, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v5;
  __CFNotificationCenter *LocalCenter;

  Value = CFDictionaryGetValue(theDict, CFSTR("kCTUSSDSessionString"));
  if (Value)
  {
    v5 = Value;
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, a1, v5, theDict, 1u);
  }
}

void _CTCallHandleCallControlErrorNotification(const __CFString *a1, const __CFDictionary *a2)
{
  const void *Default;
  const __CFAllocator *v5;
  CFArrayRef Copy;
  const void *v7;
  const __CFAllocator *v8;
  const __CFArray *v9;
  __CFNotificationCenter *LocalCenter;

  Default = (const void *)CTTelephonyCenterGetDefault();
  v5 = CFGetAllocator(Default);
  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  pthread_mutex_lock(&_GlobalCallsLock);
  Copy = CFArrayCreateCopy(v5, (CFArrayRef)_CurrentCalls);
  CFArrayRemoveAllValues((CFMutableArrayRef)_CurrentCalls);
  _CurrentCallsUpToDate = 0;
  pthread_mutex_unlock(&_GlobalCallsLock);
  CFRelease(Copy);
  v7 = (const void *)CTTelephonyCenterGetDefault();
  v8 = CFGetAllocator(v7);
  v9 = _CTCallCopyCurrentCallsWithTypes(v8, 0xFFFFFFFF, 0);
  if (v9)
    CFRelease(v9);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, a1, 0, a2, 1u);
}

void _CTCallInvalidateCallCache()
{
  CFArrayRef Copy;

  pthread_once(&_kCTCallRegisterClass, (void (*)(void))_CTCallRegisterClass);
  pthread_mutex_lock(&_GlobalCallsLock);
  Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)_CurrentCalls);
  CFArrayRemoveAllValues((CFMutableArrayRef)_CurrentCalls);
  _CurrentCallsUpToDate = 0;
  pthread_mutex_unlock(&_GlobalCallsLock);
  CFRelease(Copy);
}

uint64_t CTCallGetEmergencyStatus()
{
  uint64_t Default;
  unsigned __int8 v2;

  v2 = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetEmergencyCallStatus(Default, &v2);
  return v2;
}

uint64_t CTCopyCallManagementState()
{
  uint64_t Default;
  uint64_t v2;

  v2 = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyCallManagementState(Default, &v2);
  return v2;
}

uint64_t CTGetEmergencyWiFiConfig()
{
  uint64_t Default;
  uint64_t v2;

  v2 = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetEmergencyConfig(Default, &v2);
  return v2;
}

uint64_t CTStartOTASP()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionStartOTASP(Default, 0);
}

uint64_t CTStartManualOTASP(unsigned int a1)
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionStartOTASP(Default, a1);
}

uint64_t CTCallSetAudioToneRelayFlag(uint64_t result, char a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    _os_nospin_lock_lock();
    *(_BYTE *)(v3 + 80) = a2;
    return _os_nospin_lock_unlock();
  }
  return result;
}

uint64_t CTCallSetSetupAudioInterruptionFlag(uint64_t result, char a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    _os_nospin_lock_lock();
    *(_BYTE *)(v3 + 81) = a2;
    return _os_nospin_lock_unlock();
  }
  return result;
}

uint64_t CTCallSetDeviceOriginatedEndFlag(uint64_t result, char a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    _os_nospin_lock_lock();
    *(_BYTE *)(v3 + 82) = a2;
    return _os_nospin_lock_unlock();
  }
  return result;
}

BOOL CTCallDialService(const __CFDictionary *a1, _QWORD *a2)
{
  const void *Value;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t Default;
  BOOL v9;

  Value = CFDictionaryGetValue(a1, CFSTR("kCTCallDialServiceAddress"));
  v5 = CFDictionaryGetValue(a1, CFSTR("kCTCallDialServiceCallType"));
  v6 = CFDictionaryGetValue(a1, CFSTR("kCTCallDialServiceProvider"));
  v7 = CFDictionaryGetValue(a1, CFSTR("kCTCallDialServiceSource"));
  Default = CTTelephonyCenterGetDefault();
  if (Value)
    v9 = v5 == 0;
  else
    v9 = 1;
  if (!v9 && v6 != 0)
    return _CTServerConnectionDialService(Default, (uint64_t)Value, (uint64_t)v7, v5, v6) >> 32 == 0;
  if (a2)
  {
    *a2 = CFSTR("Invalid argument");
    CFRetain(CFSTR("Invalid argument"));
  }
  return 0;
}

CFStringRef CTCallCopyISOCountryCode(const __CFAllocator *a1, uint64_t a2)
{
  const __CFString *v4;
  CFStringRef Copy;

  if (!a2)
    return 0;
  _os_nospin_lock_lock();
  v4 = *(const __CFString **)(a2 + 136);
  if (v4)
    Copy = CFStringCreateCopy(a1, v4);
  else
    Copy = 0;
  _os_nospin_lock_unlock();
  return Copy;
}

const __CFDictionary *CTCallPullCallFromOtherDevice(const __CFDictionary *result)
{
  __CFDictionary *v1;
  CFNumberRef v2;
  const void *Default;
  uint64_t v4;
  unsigned int v5;
  int valuePtr;

  if (result)
  {
    v1 = result;
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("kCTCallStartTime"));
    if (result)
    {
      valuePtr = 0;
      CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
      v5 = llround(CFAbsoluteTimeGetCurrent() - (double)valuePtr);
      v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v5);
      if (v2)
        CFDictionaryAddValue(v1, CFSTR("kCTCallDuration"), v2);
      v4 = 0;
      Default = (const void *)CTTelephonyCenterGetDefault();
      if ((unint64_t)_CTServerConnectionPullCallFromOtherDevice(Default, v1, &v4) >> 32)
        v4 = 0;
      if (v2)
        CFRelease(v2);
      return (const __CFDictionary *)v4;
    }
  }
  return result;
}

__CFDictionary *CTCreateCallInfoForHandoffCall(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  const __CFString *v4;
  CFStringRef Copy;
  const __CFString *v6;
  CFStringRef v7;
  double Current;
  CFNumberRef v9;
  int v10;
  CFStringRef v11;
  const __CFString *v12;
  unsigned int valuePtr;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  _os_nospin_lock_lock();
  v4 = *(const __CFString **)(a1 + 32);
  if (v4)
    Copy = CFStringCreateCopy(v2, v4);
  else
    Copy = 0;
  v6 = *(const __CFString **)(a1 + 40);
  if (v6)
    v7 = CFStringCreateCopy(v2, v6);
  else
    v7 = 0;
  Current = *(double *)(a1 + 96);
  if (Current == 2.22507386e-308 || Current <= 0.0)
    Current = CFAbsoluteTimeGetCurrent();
  valuePtr = llround(Current);
  v9 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
  v10 = *(unsigned __int8 *)(a1 + 64);
  v11 = CFUUIDCreateString(v2, *(CFUUIDRef *)(a1 + 24));
  if (Copy)
    CFDictionaryAddValue(Mutable, CFSTR("kCTCallPhoneNumber"), Copy);
  if (v7)
    CFDictionaryAddValue(Mutable, CFSTR("kCTCallCallerName"), v7);
  if (v9)
    CFDictionaryAddValue(Mutable, CFSTR("kCTCallStartTime"), v9);
  if (v10)
    v12 = CFSTR("kCTCallDirectionOutgoing");
  else
    v12 = CFSTR("kCTCallDirectionIncoming");
  CFDictionaryAddValue(Mutable, CFSTR("kCTCallDirection"), v12);
  if (v11)
    CFDictionaryAddValue(Mutable, CFSTR("kCTCallId"), v11);
  if (Copy)
    CFRelease(Copy);
  if (v7)
    CFRelease(v7);
  if (v9)
    CFRelease(v9);
  if (v11)
    CFRelease(v11);
  _os_nospin_lock_unlock();
  return Mutable;
}

uint64_t CTCallIsCallHandoffPossible()
{
  uint64_t Default;
  unsigned __int8 v3;

  v3 = 0;
  Default = CTTelephonyCenterGetDefault();
  if ((unint64_t)_CTServerConnectionPullCallIsPossible(Default, &v3) >> 32)
    return 0;
  else
    return v3;
}

uint64_t CTCallCreateFromSerializedData(uint64_t result)
{
  const __CFData *v1;
  const void *Default;

  if (result)
  {
    v1 = (const __CFData *)result;
    Default = (const void *)CTTelephonyCenterGetDefault();
    return _CTCallCreateFromSerializedData(Default, v1);
  }
  return result;
}

void *CTCallPhoneNumberIsMmiOrUssd(void *result)
{
  void *v1;
  uint64_t Default;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;

  if (result)
  {
    v1 = result;
    Default = CTTelephonyCenterGetDefault();
    v6 = 0;
    v3 = _CTServerConnectionPhoneNumberIsMmiOrUssd(Default, v1, &v6) >> 32;
    v4 = v6 && v3 == 0;
    v5 = MEMORY[0x1E0C9AE40];
    if (v4)
      v5 = MEMORY[0x1E0C9AE50];
    return *(void **)v5;
  }
  return result;
}

uint64_t CTCallMediaStatusIsActive()
{
  uint64_t Default;
  unint64_t IsActive;
  uint64_t *v2;
  uint64_t v3;
  char v5;

  v5 = 0;
  Default = CTTelephonyCenterGetDefault();
  IsActive = _CTServerConnectionMediaStatusIsActive(Default, &v5);
  if (v5)
    v2 = (uint64_t *)MEMORY[0x1E0C9AE50];
  else
    v2 = (uint64_t *)MEMORY[0x1E0C9AE40];
  v3 = *v2;
  if (HIDWORD(IsActive))
    return 0;
  else
    return v3;
}

void _CallDestroy(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  pthread_mutex_lock(&_GlobalCallsLock);
  _os_nospin_lock_lock();
  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    if (CFDictionaryGetValue((CFDictionaryRef)_UuidToCallMap, v2) == (const void *)a1)
      CFDictionaryRemoveValue((CFMutableDictionaryRef)_UuidToCallMap, *(const void **)(a1 + 24));
    CFRelease(*(CFTypeRef *)(a1 + 24));
  }
  pthread_mutex_unlock(&_GlobalCallsLock);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 136);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 56);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(a1 + 120);
  if (v8)
    CFRelease(v8);
}

BOOL _CallEqual(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  const __CFUUID *v4;
  const __CFAllocator *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  BOOL v9;
  _BOOL8 v10;
  _BOOL8 v11;

  if (a1 >= a2)
    v2 = a2;
  else
    v2 = a1;
  if (a1 >= a2)
    v3 = a1;
  else
    v3 = a2;
  _os_nospin_lock_lock();
  _os_nospin_lock_lock();
  v4 = *(const __CFUUID **)(v2 + 24);
  if (v4 && *(_QWORD *)(v3 + 24))
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
    v7 = CFUUIDCreateString(v5, *(CFUUIDRef *)(v3 + 24));
    v8 = v7;
    if (v6)
      v9 = v7 == 0;
    else
      v9 = 1;
    if (v9)
    {
      v11 = 0;
      v10 = 0;
      if (!v6)
      {
        if (!v7)
          goto LABEL_20;
        goto LABEL_19;
      }
    }
    else
    {
      v11 = CFStringCompare(v6, v7, 0) == kCFCompareEqualTo;
    }
    CFRelease(v6);
    v10 = v11;
    if (v8)
LABEL_19:
      CFRelease(v8);
  }
  else
  {
    v10 = 0;
  }
LABEL_20:
  _os_nospin_lock_unlock();
  _os_nospin_lock_unlock();
  return v10;
}

CFHashCode _CallHash(uint64_t a1)
{
  CFHashCode v2;

  _os_nospin_lock_lock();
  v2 = CFHash(*(CFTypeRef *)(a1 + 24));
  _os_nospin_lock_unlock();
  return v2;
}

CFStringRef _CallCopyDescription(uint64_t a1)
{
  const __CFAllocator *v2;
  const __CFAllocator *v3;
  const __CFUUID *v4;
  const __CFString *v5;
  const __CFString *v6;
  CFStringRef v7;
  char buffer[16];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  _os_nospin_lock_lock();
  v2 = CFGetAllocator((CFTypeRef)a1);
  v3 = v2;
  v11 = 0;
  *(_OWORD *)buffer = 0u;
  v10 = 0u;
  v4 = *(const __CFUUID **)(a1 + 24);
  if (v4)
  {
    v5 = CFUUIDCreateString(v2, v4);
    if (v5)
    {
      v6 = v5;
      CFStringGetCString(v5, buffer, 40, 0x8000100u);
      CFRelease(v6);
    }
  }
  v7 = CFStringCreateWithFormat(v3, 0, CFSTR("<CTCall %p [%p]>{status = %d, type = 0x%x, subtype = 0x%x, uuid = %p [%s], address = %p, start = %g, session start = %g, end = %g, audioToneRelay = %u, setupAudioInterruption = %u, deviceOriginatedEnd = %u}"), a1, v3, *(unsigned int *)(a1 + 68), *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76), *(_QWORD *)(a1 + 24), buffer, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 80), *(unsigned __int8 *)(a1 + 81), *(unsigned __int8 *)(a1 + 82));
  _os_nospin_lock_unlock();
  return v7;
}

uint64_t convertToCallStatus(int a1)
{
  uint64_t result;
  unsigned int v2;

  switch(a1)
  {
    case 1:
      result = 0;
      break;
    case 2:
      result = 1;
      break;
    case 3:
      result = 4;
      break;
    case 4:
      result = 5;
      break;
    default:
      if (a1 == 0x40000)
        v2 = 8;
      else
        v2 = 6;
      if (a1 == 196608)
        result = 7;
      else
        result = v2;
      break;
  }
  return result;
}

CFUUIDRef _CTCallUpdateFromCallInfo(int a1, char *cf, CFUUIDBytes *a3, signed int a4)
{
  const __CFAllocator *v8;
  CFUUIDRef result;
  const __CFArray *v10;
  CFRange v11;

  v8 = CFGetAllocator(cf);
  result = CFUUIDCreateFromUUIDBytes(v8, *a3);
  *((_QWORD *)cf + 3) = result;
  if (result)
  {
    cf[64] = a4 >= 0;
    *((_DWORD *)cf + 17) = _CTCallGetCallStatusFromFlags_kCTCallStatusTypeMap[a4 & 0xF];
    cf[65] = (a4 & 0x40000000) != 0;
    cf[66] = (a4 & 0x20000000) != 0;
    *(int8x8_t *)(cf + 84) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a4), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF00000003);
    if (a1)
    {
      _os_nospin_lock_unlock();
      CFDictionaryAddValue((CFMutableDictionaryRef)_UuidToCallMap, *((const void **)cf + 3), cf);
      v10 = (const __CFArray *)_CurrentCalls;
      v11.length = CFArrayGetCount((CFArrayRef)_CurrentCalls);
      v11.location = 0;
      if (CFArrayGetFirstIndexOfValue(v10, v11, cf) == -1)
        CFArrayAppendValue((CFMutableArrayRef)_CurrentCalls, cf);
      return (CFUUIDRef)_os_nospin_lock_lock();
    }
  }
  return result;
}

uint64_t CTTelephonyCenterGetRunLoop(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __CTTelephonyCenterGetRunLoop_block_invoke;
  v4[3] = &unk_1E152D2D8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t CTTelephonyCenterSetDefaultDispatchQueue(NSObject *a1)
{
  return sCTTelephonyCenterSetDefaultDispatchQueue(0, a1);
}

uint64_t sCTTelephonyCenterSetDefaultDispatchQueue(uint64_t result, NSObject *a2)
{
  int v3;
  uint64_t v4;
  _BOOL4 v5;
  const __CFAllocator *v6;
  const char *v7;
  CFStringRef v8;
  _BYTE *v9;

  v3 = result;
  v4 = _CTTelephonyCenterDefault;
  if (_CTTelephonyCenterDefault)
    goto LABEL_9;
  pthread_mutex_lock(&_CTTelephonyCreateMutex);
  v5 = _CTTelephonyCenterDefault != 0;
  if (!_CTTelephonyCenterDefault)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = getprogname();
    v8 = CFStringCreateWithFormat(v6, 0, CFSTR("%s-CTTelephonyCenter"), v7);
    v9 = _CTServerConnectionCreateOnTargetQueue((uint64_t)v6, (uint64_t)v8, a2, &__block_literal_global_0);
    if (v8)
      CFRelease(v8);
    if (v9)
    {
      CTTelephonyCenterSetup(v9);
      _CTTelephonyCenterDefault = (uint64_t)v9;
      v9[33] = v3;
    }
    else
    {
      _CTTelephonyCenterDefault = 0;
    }
  }
  result = pthread_mutex_unlock(&_CTTelephonyCreateMutex);
  v4 = _CTTelephonyCenterDefault;
  if (v5)
  {
LABEL_9:
    if (v4)
    {
      pthread_mutex_lock(&_CTTelephonyCreateMutex);
      if (!*(_BYTE *)(_CTTelephonyCenterDefault + 33))
      {
        _CTServerConnectionSetTargetQueue((_QWORD *)_CTTelephonyCenterDefault, a2);
        if (v3)
          *(_BYTE *)(_CTTelephonyCenterDefault + 33) = 1;
      }
      return pthread_mutex_unlock(&_CTTelephonyCreateMutex);
    }
  }
  return result;
}

uint64_t CTTelephonyCenterSetDefaultRunloopPermanently(__CFRunLoop *a1, __CFString *a2)
{
  return sCTTelephonyCenterSetDefaultRunloop(1, a1, a2);
}

uint64_t CTTelephonyCenterSetDefaultDispatchQueuePermanently(NSObject *a1)
{
  return sCTTelephonyCenterSetDefaultDispatchQueue(1, a1);
}

void _CTTelephonyCenterRegisterTimeChangeNotification(void)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)_CTTelephonyCenterDefault, (CFNotificationCallback)_SignificantTimeChange, CFSTR("SignificantTimeChangeNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void CTTelephonyCenterRemoveObserver(uint64_t a1, const void *a2, const __CFString *a3, const void *a4)
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a2, a3, a4);
}

void CTTelephonyCenterRemoveEveryObserver(uint64_t a1, const void *a2)
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, a2);
}

uint64_t CTTelephonyCenterSendBarrier(uint64_t a1)
{
  return _CTServerConnectionSendBarrier(a1, 0);
}

void ___ZL38CTTelephonyCenterCreateOnDispatchQueueP16dispatch_queue_s_block_invoke(int a1, __CFString *a2, CFDictionaryRef theDict)
{
  _ServerConnectionCallback(a2, theDict);
}

void _DaemonReady(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCTTelephonyCenterDaemonRestartNotification"), 0, 0, 1u);
}

void _SignificantTimeChange(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  NSObject *global_queue;

  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_11);
}

void ___ZL22_SignificantTimeChangeP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke()
{
  const void *Default;
  const __CFAllocator *v1;
  const __CFArray *v2;

  Default = (const void *)CTTelephonyCenterGetDefault();
  if (Default)
    v1 = CFGetAllocator(Default);
  else
    v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = _CTCallCopyCurrentCallsWithTypes(v1, 0xFFFFFFFF, 0);
  if (v2)
    CFRelease(v2);
}

void sub_184287B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_184287DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_184287F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18428804C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1842880F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18428822C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1842882D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842884A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_184288614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842887D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842889BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<-[CoreTelephonyClientDelegateProxy forwardInvocation:]::$_0>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

uint64_t CTGetSignalStrength()
{
  uint64_t var4;

  LODWORD(var4) = 0;
  CTIndicatorsGetSignalStrength(0, &var4, 0);
  return var4;
}

uint64_t CTIndicatorsGetSignalStrength(_DWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t Default;
  _DWORD *v7;
  uint64_t *v8;
  int *v9;
  int v11;
  uint64_t v12;

  v12 = 0;
  v11 = 0;
  Default = CTTelephonyCenterGetDefault();
  if (a1)
    v7 = a1;
  else
    v7 = (_DWORD *)&v12 + 1;
  if (a2)
    v8 = a2;
  else
    v8 = &v12;
  if (a3)
    v9 = a3;
  else
    v9 = &v11;
  *v9 = 0;
  *(_DWORD *)v8 = 0;
  *v7 = 0;
  return _CTServerConnectionGetSignalStrength(Default, v7, v8, v9);
}

void CTIndicatorsCopyVoicemailStatus(char *a1, int *a2, CFURLRef *a3)
{
  char *v3;
  int *v4;
  CFURLRef *p_cf;
  char v6;
  const void *Default;
  uint64_t VoiceMailAvailable;
  char v9;
  CFTypeRef cf;
  char v11;
  int v12;

  v12 = 0;
  v11 = 0;
  cf = 0;
  v9 = 0;
  if (a1)
    v3 = a1;
  else
    v3 = &v11;
  if (a2)
    v4 = a2;
  else
    v4 = &v12;
  *v3 = 0;
  if (a3)
    p_cf = a3;
  else
    p_cf = (CFURLRef *)&cf;
  *v4 = 0;
  *p_cf = 0;
  v6 = 1;
  Default = (const void *)CTTelephonyCenterGetDefault();
  do
  {
    VoiceMailAvailable = _CTServerConnectionGetVoiceMailAvailable(Default, v3, &v9, v4, p_cf);
    if ((v6 & 1) == 0)
      break;
    v6 = 0;
  }
  while (VoiceMailAvailable == 0x500000002);
  if (!v9)
    *v4 = -1;
  if (cf)
    CFRelease(cf);
}

void _CTIndicatorsHandleSignalStrengthNotification(const __CFString *a1, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  const __CFNumber *v5;
  __CFNotificationCenter *LocalCenter;
  int valuePtr;

  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("kCTIndicatorsSignalStrength"));
  if (Value)
  {
    v5 = Value;
    valuePtr = 0;
    if (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr))
    {
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterPostNotification(LocalCenter, a1, v5, theDict, 1u);
    }
  }
}

void _CTIndicatorsHandleVoiceMailAvailableNotification(const __CFString *a1, CFDictionaryRef theDict)
{
  const void *Value;
  __CFNotificationCenter *LocalCenter;

  Value = CFDictionaryGetValue(theDict, CFSTR("kCTIndicatorsVoiceMailAvailable"));
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, a1, Value, theDict, 1u);
}

void _CTIndicatorsHandleUnconditionalCallForwardingNotification(const __CFString *a1, CFDictionaryRef theDict)
{
  const void *Value;
  __CFNotificationCenter *LocalCenter;

  Value = CFDictionaryGetValue(theDict, CFSTR("kCTIndicatorsUnconditionalCallForwarding"));
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, a1, Value, theDict, 1u);
}

unint64_t CTSettingRequest(const __CFDictionary *a1)
{
  unint64_t result;
  __CFString *v3;
  uint64_t v4;
  const __CFString *Value;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;

  result = (unint64_t)CFDictionaryGetValue(a1, CFSTR("kCTSettingType"));
  if (result)
  {
    v3 = (__CFString *)result;
    result = CTTelephonyCenterGetDefault();
    v4 = result;
    if (v3 == CFSTR("kCTSettingTypeCallWaiting"))
    {
      Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("kCTSettingCallClass"));
      return _CTServerConnectionFetchCallWaitingValue(v4, Value);
    }
    else if (v3 == CFSTR("kCTSettingTypeCallForwarding"))
    {
      v6 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("kCTSettingCallForwardingReason"));
      v7 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("kCTSettingCallClass"));
      return _CTServerConnectionFetchCallForwardingValue(v4, v6, v7);
    }
    else if (v3 == CFSTR("kCTSettingTypeCallBarring"))
    {
      v8 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("kCTSettingCallBarringFacility"));
      v9 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("kCTSettingCallClass"));
      CFDictionaryGetValue(a1, CFSTR("kCTSettingPassword"));
      return _CTServerConnectionFetchCallBarringValue(v4, v8, v9);
    }
    else if (v3 == CFSTR("kCTSettingTypeConnectedLinePresentation"))
    {
      return _CTServerConnectionFetchConnectedLinePresentationValue(result);
    }
    else if (v3 == CFSTR("kCTSettingTypeCallingLinePresentation"))
    {
      return _CTServerConnectionFetchCallingLinePresentationValue(result);
    }
    else if (v3 == CFSTR("kCTSettingTypeConnectedLineIdRestriction"))
    {
      return _CTServerConnectionFetchConnectedLineIdRestrictionValue(result);
    }
    else if (v3 == CFSTR("kCTSettingTypeCallingLineIdRestriction"))
    {
      return _CTServerConnectionFetchCallingLineIdRestrictionValue(result);
    }
    else if (v3 == CFSTR("kCTSettingTypeSIMLock"))
    {
      return _CTServerConnectionFetchSimLockValue(result);
    }
    else if (v3 == CFSTR("kCTSettingTypeServiceCenterAddress"))
    {
      return _CTServerConnectionFetchServiceCenterAddressValue(result);
    }
  }
  return result;
}

uint64_t CTSettingSave(const __CFDictionary *a1)
{
  uint64_t result;
  __CFString *v3;
  uint64_t v4;
  const __CFString *Value;
  _BOOL4 v6;
  const __CFNumber *v7;
  int *p_valuePtr;
  const __CFString *v9;
  const __CFString *v10;
  _BOOL4 v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  _BOOL4 v15;
  const void *v16;
  _BOOL4 v17;
  int valuePtr;

  result = (uint64_t)CFDictionaryGetValue(a1, CFSTR("kCTSettingType"));
  if (result)
  {
    v3 = (__CFString *)result;
    result = CTTelephonyCenterGetDefault();
    v4 = result;
    if (v3 == CFSTR("kCTSettingTypeCallWaiting"))
    {
      Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("kCTSettingCallClass"));
      v6 = CFDictionaryGetValue(a1, CFSTR("kCTSettingEnabled")) == (const void *)*MEMORY[0x1E0C9AE50];
      return _CTServerConnectionSaveCallWaitingValue(v4, Value, v6);
    }
    else if (v3 == CFSTR("kCTSettingTypeCallForwarding"))
    {
      valuePtr = 0;
      v7 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("kCTSettingCallForwardingNoReplyTime"));
      if (v7)
      {
        p_valuePtr = &valuePtr;
        if (!CFNumberGetValue(v7, kCFNumberSInt32Type, &valuePtr))
          p_valuePtr = 0;
      }
      else
      {
        p_valuePtr = 0;
      }
      v13 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("kCTSettingCallForwardingReason"));
      v14 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("kCTSettingCallClass"));
      v15 = CFDictionaryGetValue(a1, CFSTR("kCTSettingEnabled")) == (const void *)*MEMORY[0x1E0C9AE50];
      v16 = CFDictionaryGetValue(a1, CFSTR("kCTSettingCallForwardingNumber"));
      return _CTServerConnectionSaveCallForwardingValue(v4, v13, v14, v15, (uint64_t)v16, p_valuePtr);
    }
    else if (v3 == CFSTR("kCTSettingTypeCallBarring"))
    {
      v9 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("kCTSettingCallBarringFacility"));
      v10 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("kCTSettingCallClass"));
      v11 = CFDictionaryGetValue(a1, CFSTR("kCTSettingEnabled")) == (const void *)*MEMORY[0x1E0C9AE50];
      CFDictionaryGetValue(a1, CFSTR("kCTSettingPassword"));
      return _CTServerConnectionSaveCallBarringValue(v4, v9, v10, v11);
    }
    else if (v3 == CFSTR("kCTSettingTypeCallingLineIdRestriction"))
    {
      v12 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("kCTSettingCallingLineIdRestriction"));
      return _CTServerConnectionSaveCallingLineIdRestrictionValue(v4, v12);
    }
    else if (v3 == CFSTR("kCTSettingTypeSIMLock"))
    {
      v17 = CFDictionaryGetValue(a1, CFSTR("kCTSettingEnabled")) == (const void *)*MEMORY[0x1E0C9AE50];
      CFDictionaryGetValue(a1, CFSTR("kCTSettingPassword"));
      return _CTServerConnectionSaveSimLockValue(v4, v17);
    }
    else if (v3 == CFSTR("kCTSettingTypeServiceCenterAddress"))
    {
      CFDictionaryGetValue(a1, CFSTR("kCTSettingServiceCenterAddress"));
      return _CTServerConnectionSaveServiceCenterAddressValue(v4);
    }
    else if (v3 == CFSTR("kCTSettingTypePIN"))
    {
      CFDictionaryGetValue(a1, CFSTR("kCTSettingPassword"));
      CFDictionaryGetValue(a1, CFSTR("kCTSettingNewPassword"));
      return _CTServerConnectionChangePinPassword(v4);
    }
    else if (v3 == CFSTR("kCTSettingTypePIN2"))
    {
      CFDictionaryGetValue(a1, CFSTR("kCTSettingPassword"));
      CFDictionaryGetValue(a1, CFSTR("kCTSettingNewPassword"));
      return _CTServerConnectionChangePin2Password(v4);
    }
  }
  return result;
}

CFStringRef CTSettingCopyMyPhoneNumber()
{
  const void *Default;
  CFTypeRef cf;
  CFStringRef v3;

  v3 = 0;
  Default = (const void *)CTTelephonyCenterGetDefault();
  cf = 0;
  _CTServerConnectionCopyPhoneNumber(Default, 0, (CFStringRef *)&cf, &v3, 0, 0);
  if (cf)
    CFRelease(cf);
  return v3;
}

CFDictionaryRef CTSettingCopyMyPhoneNumberExtended()
{
  const void *Default;
  unsigned int v1;
  void *v2;
  const __CFString *v3;
  CFIndex v4;
  CFDictionaryRef v5;
  __CFString *v7;
  void *v8;
  void *v9;
  CFTypeRef v10;
  CFTypeRef cf;
  void *values[3];
  void *keys[4];

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  Default = (const void *)CTTelephonyCenterGetDefault();
  v1 = 0;
  v2 = (void *)*MEMORY[0x1E0C9AE40];
  do
  {
    v10 = 0;
    cf = 0;
    v8 = v2;
    v9 = v2;
    _CTServerConnectionCopyPhoneNumber(Default, v1, (CFStringRef *)&cf, (CFStringRef *)&v10, &v9, &v8);
    if (cf)
      CFRelease(cf);
    if (v1 > 2)
      break;
    ++v1;
  }
  while (!v10);
  v7 = 0;
  if ((unint64_t)_CTServerConnectionGetSIMStatus((uint64_t)Default, &v7) >> 32)
  {
    v3 = CFSTR("kCTSIMSupportSIMStatusNotReady");
    v7 = CFSTR("kCTSIMSupportSIMStatusNotReady");
  }
  else
  {
    v3 = v7;
  }
  if (CFStringCompare(v3, CFSTR("kCTSIMSupportSIMStatusReady"), 1uLL))
    v8 = v2;
  else
    v2 = v8;
  keys[0] = CFSTR("kCTSettingMyPhoneNumberExists");
  keys[1] = CFSTR("kCTSettingMyPhoneNumberEditable");
  keys[2] = CFSTR("kCTSettingMyPhoneNumber");
  values[0] = v9;
  values[1] = v2;
  values[2] = (void *)v10;
  if (v10)
    v4 = 3;
  else
    v4 = 2;
  v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v10)
    CFRelease(v10);
  return v5;
}

CFTypeRef CTSettingCopyEffectiveSimInfo()
{
  const void *Default;
  unint64_t v1;
  CFTypeRef result;
  BOOL v3;
  CFTypeRef cf;

  Default = (const void *)CTTelephonyCenterGetDefault();
  cf = 0;
  v1 = _CTServerConnectionCopyEffectiveSimInfo(Default, (CFDictionaryRef *)&cf);
  result = cf;
  if (HIDWORD(v1))
    v3 = cf == 0;
  else
    v3 = 1;
  if (!v3)
  {
    CFRelease(cf);
    return 0;
  }
  return result;
}

uint64_t CTSettingSetIMSIOverride()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionPreferencesSetValue(Default, (uint64_t)CFSTR("IMSIOverride"));
}

uint64_t CTSettingSetFakePrimaryDNSKey()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionPreferencesSetValue(Default, (uint64_t)CFSTR("FakePrimaryDns"));
}

uint64_t CTSettingCopyFakePrimaryDNSKey()
{
  uint64_t Default;
  uint64_t v2;

  Default = CTTelephonyCenterGetDefault();
  v2 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, (uint64_t)CFSTR("FakePrimaryDns"), &v2);
  return v2;
}

uint64_t CTSettingSetFakeSecondaryDNSKey()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionPreferencesSetValue(Default, (uint64_t)CFSTR("FakeSecondaryDns"));
}

uint64_t CTSettingCopyFakeSecondaryDNSKey()
{
  uint64_t Default;
  uint64_t v2;

  Default = CTTelephonyCenterGetDefault();
  v2 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, (uint64_t)CFSTR("FakeSecondaryDns"), &v2);
  return v2;
}

uint64_t CTSettingSetVerifyCarrierBundles()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionPreferencesSetValue(Default, (uint64_t)CFSTR("VerifyBundles"));
}

BOOL CTSettingCopyVerifyCarrierBundles()
{
  uint64_t Default;
  CFBooleanRef BOOLean;

  Default = CTTelephonyCenterGetDefault();
  BOOLean = 0;
  _CTServerConnectionPreferencesCopyValue(Default, (uint64_t)CFSTR("VerifyBundles"), (uint64_t *)&BOOLean);
  return CFBooleanGetValue(BOOLean) == 1;
}

uint64_t CTSettingSetVerifyAPN()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionPreferencesSetValue(Default, (uint64_t)CFSTR("VerifyAPN"));
}

BOOL CTSettingCopyVerifyAPN()
{
  uint64_t Default;
  CFBooleanRef BOOLean;

  Default = CTTelephonyCenterGetDefault();
  BOOLean = 0;
  _CTServerConnectionPreferencesCopyValue(Default, (uint64_t)CFSTR("VerifyAPN"), (uint64_t *)&BOOLean);
  return CFBooleanGetValue(BOOLean) == 1;
}

uint64_t CTSettingSetDualIPBringUp()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionPreferencesSetValue(Default, (uint64_t)CFSTR("DualIPBringUp"));
}

BOOL CTSettingCopyDualIPBringUp()
{
  uint64_t Default;
  CFBooleanRef BOOLean;

  Default = CTTelephonyCenterGetDefault();
  BOOLean = 0;
  _CTServerConnectionPreferencesCopyValue(Default, (uint64_t)CFSTR("DualIPBringUp"), (uint64_t *)&BOOLean);
  return CFBooleanGetValue(BOOLean) == 1;
}

uint64_t CTSettingSetWiFiCallingInCallHandover()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionPreferencesSetValue(Default, (uint64_t)CFSTR("WiFiCallingInCallHandover"));
}

BOOL CTSettingCopyWiFiCallingInCallHandover()
{
  uint64_t Default;
  const void *v1;
  CFTypeID TypeID;
  _BOOL8 v3;
  const void *v5;

  Default = CTTelephonyCenterGetDefault();
  v5 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, (uint64_t)CFSTR("WiFiCallingInCallHandover"), (uint64_t *)&v5);
  v1 = v5;
  if (!v5)
    return 0;
  TypeID = CFBooleanGetTypeID();
  v3 = TypeID == CFGetTypeID(v1) && CFBooleanGetValue((CFBooleanRef)v1) != 0;
  CFRelease(v1);
  return v3;
}

uint64_t CTSettingSetEPDGAddress()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionPreferencesSetValue(Default, (uint64_t)CFSTR("EPDGAddress"));
}

uint64_t CTSettingSetPCSCFAddress()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionPreferencesSetValue(Default, (uint64_t)CFSTR("PCSCFAddress"));
}

uint64_t CTSettingCopyEPDGAddress()
{
  uint64_t Default;
  uint64_t v2;

  Default = CTTelephonyCenterGetDefault();
  v2 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, (uint64_t)CFSTR("EPDGAddress"), &v2);
  return v2;
}

uint64_t CTSettingCopyPCSCFAddress()
{
  uint64_t Default;
  uint64_t v2;

  Default = CTTelephonyCenterGetDefault();
  v2 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, (uint64_t)CFSTR("PCSCFAddress"), &v2);
  return v2;
}

uint64_t CTSettingSetShowVoLTEStatusIndicator()
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionPreferencesSetValue(Default, (uint64_t)CFSTR("ShowVoLTEStatusIndicator"));
}

BOOL CTSettingCopyShowVoLTEStatusIndicator()
{
  uint64_t Default;
  const __CFBoolean *v1;
  CFTypeID TypeID;
  const __CFBoolean *v4;

  Default = CTTelephonyCenterGetDefault();
  v4 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, (uint64_t)CFSTR("ShowVoLTEStatusIndicator"), (uint64_t *)&v4);
  v1 = v4;
  if (v4 && (TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(v1)))
    return CFBooleanGetValue(v1) != 0;
  else
    return 0;
}

const void *CTSettingsCopyiWlanGatewayAddress()
{
  uint64_t Default;
  const void *v1;
  CFTypeID TypeID;
  const void *v4;

  Default = CTTelephonyCenterGetDefault();
  v4 = 0;
  _CTServerConnectionPreferencesCopyValue(Default, (uint64_t)CFSTR("iWlanGatewayAddress"), (uint64_t *)&v4);
  v1 = v4;
  if (!v4)
    return 0;
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v1))
    return 0;
  return v1;
}

__CFString *CTSIMSupportGetSIMStatus()
{
  uint64_t Default;
  __CFString *v2;

  v2 = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetSIMStatus(Default, &v2);
  return v2;
}

uint64_t CTSIMSupportPINUnlock(uint64_t a1)
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionPINUnlock(Default, a1);
}

uint64_t CTSIMSupportPUKUnlock(uint64_t a1, uint64_t a2)
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionPUKUnlock(Default, a1, a2);
}

uint64_t CTSIMSupportGetRemainingPINAttempts()
{
  uint64_t Default;
  int v2;

  v2 = -1;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetRemainingPINAttemptCount(Default, &v2);
  return v2;
}

uint64_t CTSIMSupportGetRemainingPUKAttempts()
{
  uint64_t Default;
  int v2;

  v2 = -1;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetRemainingPUKAttemptCount(Default, &v2);
  return v2;
}

CFStringRef CTSIMSupportCopyMobileSubscriberIdentity(const __CFAllocator *a1)
{
  uint64_t Default;
  CFStringRef Copy;
  CFStringRef theString;

  theString = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyMobileSubscriberIdentity(Default, &theString);
  if (!theString)
    return 0;
  Copy = CFStringCreateCopy(a1, theString);
  CFRelease(theString);
  return Copy;
}

CFStringRef CTSIMSupportCopyMobileSubscriberCountryCode(const __CFAllocator *a1)
{
  uint64_t Default;
  CFStringRef Copy;
  CFStringRef theString;

  theString = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyMobileSubscriberCountryCode(Default, &theString);
  if (!theString)
    return 0;
  Copy = CFStringCreateCopy(a1, theString);
  CFRelease(theString);
  return Copy;
}

CFStringRef CTSIMSupportCopyMobileSubscriberNetworkCode(const __CFAllocator *a1)
{
  uint64_t Default;
  CFStringRef Copy;
  CFStringRef theString;

  theString = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyMobileSubscriberNetworkCode(Default, &theString);
  if (!theString)
    return 0;
  Copy = CFStringCreateCopy(a1, theString);
  CFRelease(theString);
  return Copy;
}

uint64_t CTRegistrationCopyLocalizedOperatorName()
{
  uint64_t Default;
  uint64_t v2;

  v2 = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyLocalizedOperatorName(Default, &v2);
  return v2;
}

CFStringRef CTRegistrationCopyAbbreviatedOperatorName(const __CFAllocator *a1)
{
  uint64_t Default;
  CFStringRef Copy;
  CFStringRef theString;

  theString = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionCopyAbbreviatedOperatorName(Default, &theString);
  if (!theString)
    return 0;
  Copy = CFStringCreateCopy(a1, theString);
  CFRelease(theString);
  return Copy;
}

uint64_t CTRegistrationNetworkSelectionMenuAvailable()
{
  uint64_t Default;
  unsigned __int8 v2;

  v2 = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionNetworkSelectionMenuAvailable(Default, &v2);
  return v2;
}

unint64_t CTRegistrationAutomaticallySelectNetwork()
{
  uint64_t Default;
  unint64_t result;

  Default = CTTelephonyCenterGetDefault();
  result = _CTServerConnectionAutomaticallySelectNetwork(Default);
  if (HIDWORD(result))
    return _CTServerConnectionAutomaticallySelectNetwork(Default);
  return result;
}

unint64_t CTRegistrationRequestNetworkList()
{
  uint64_t Default;
  unint64_t result;

  Default = CTTelephonyCenterGetDefault();
  result = _CTServerConnectionFetchNetworkList(Default);
  if (HIDWORD(result))
    return _CTServerConnectionFetchNetworkList(Default);
  return result;
}

unint64_t CTRegistrationManuallySelectNetwork(const __CFDictionary *a1)
{
  uint64_t Default;
  unint64_t result;

  Default = CTTelephonyCenterGetDefault();
  result = _CTServerConnectionSelectNetwork(Default, a1);
  if (HIDWORD(result))
    return _CTServerConnectionSelectNetwork(Default, a1);
  return result;
}

uint64_t CTRegistrationCopyManualNetworkSelection()
{
  uint64_t Default;
  uint64_t v2;

  v2 = 0;
  Default = CTTelephonyCenterGetDefault();
  if ((unint64_t)_CTServerConnectionCopyManualNetworkSelection(Default, &v2) >> 32)
    _CTServerConnectionCopyManualNetworkSelection(Default, &v2);
  return v2;
}

__CFString *CTRegistrationGetNetworkSelectionMode()
{
  uint64_t Default;
  __CFString *v2;

  v2 = 0;
  Default = CTTelephonyCenterGetDefault();
  if ((unint64_t)_CTServerConnectionGetNetworkSelectionMode(Default, &v2) >> 32)
    _CTServerConnectionGetNetworkSelectionMode(Default, &v2);
  return v2;
}

__CFString *CTRegistrationGetNetworkSelectionState()
{
  uint64_t Default;
  __CFString *v2;

  v2 = 0;
  Default = CTTelephonyCenterGetDefault();
  if ((unint64_t)_CTServerConnectionGetNetworkSelectionState(Default, &v2) >> 32)
    _CTServerConnectionGetNetworkSelectionState(Default, &v2);
  return v2;
}

uint64_t CTRegistrationGetDataAttached()
{
  uint64_t Default;
  unsigned __int8 v2;

  v2 = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionIsDataAttached(Default, &v2);
  return v2;
}

const __CFString *CTRegistrationGetDataIndicator()
{
  const __CFString *v0;
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  BOOL v3;
  CFTypeID v4;
  void *value;

  v0 = CFSTR("kCTRegistrationDataIndicatorNone");
  v1 = (const __CFDictionary *)CTRegistrationCopyDataStatus();
  if (v1)
  {
    v2 = v1;
    value = 0;
    if (CFDictionaryGetValueIfPresent(v1, CFSTR("kCTRegistrationDataIndicator"), (const void **)&value))
      v3 = value == 0;
    else
      v3 = 1;
    if (!v3)
    {
      v4 = CFGetTypeID(value);
      if (v4 == CFStringGetTypeID())
        v0 = (const __CFString *)value;
    }
    CFRelease(v2);
  }
  return v0;
}

CFTypeRef CTRegistrationCopyDataStatus()
{
  const void *Default;
  uint64_t v1;
  BOOL v2;
  CFTypeRef cf;

  cf = 0;
  Default = (const void *)CTTelephonyCenterGetDefault();
  v1 = _CTServerConnectionCopyDataStatus(Default, 0, (const __CFDictionary **)&cf);
  if (HIDWORD(v1))
    v2 = (_DWORD)v1 == 2;
  else
    v2 = 0;
  if (v2 && HIDWORD(v1) == 268435459)
  {
    if (cf)
      CFRelease(cf);
    cf = 0;
    _CTServerConnectionCopyDataStatus(Default, 0, (const __CFDictionary **)&cf);
  }
  return cf;
}

uint64_t CTRegistrationGetDataContextActive(int a1)
{
  uint64_t Default;
  unsigned __int8 v4;

  v4 = 0;
  Default = CTTelephonyCenterGetDefault();
  _CTServerConnectionGetPacketContextActive(Default, a1, &v4);
  return v4;
}

uint64_t CTRegistrationSetDataContextActive(int a1, unsigned int a2)
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionSetPacketContextActive(Default, a1, a2);
}

void _CTRegistrationHandleDataStatusChangedNotification(const __CFString *a1, CFDictionaryRef theDict)
{
  const void *Value;
  const __CFBoolean *v5;
  const __CFBoolean *v6;
  CFTypeID v7;
  CFTypeID v8;
  CFTypeID TypeID;
  const __CFAllocator *v10;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v12;
  const void *v13;
  const void *v14;
  __CFString **v15;
  __CFNotificationCenter *LocalCenter;

  if (!theDict)
    return;
  Value = CFDictionaryGetValue(theDict, CFSTR("kCTRegistrationDataContextID"));
  v5 = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("kCTRegistrationDataActivationWasForMMS"));
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    if (v7 != CFBooleanGetTypeID())
    {
      LODWORD(v6) = 0;
      if (!Value)
        return;
      goto LABEL_8;
    }
    LODWORD(v6) = CFBooleanGetValue(v6) == 1;
  }
  if (!Value)
    return;
LABEL_8:
  v8 = CFGetTypeID(Value);
  TypeID = CFNumberGetTypeID();
  if ((_DWORD)v6 || v8 == TypeID)
  {
    v10 = CFGetAllocator(theDict);
    MutableCopy = CFDictionaryCreateMutableCopy(v10, 0, theDict);
    if (MutableCopy)
    {
      v12 = MutableCopy;
      v13 = (const void *)*MEMORY[0x1E0C9AE50];
      if (v13 == CFDictionaryGetValue(theDict, CFSTR("kCTRegistrationDataActive")))
      {
        v15 = kCTRegistrationDataStatusAttachedAndActive;
      }
      else
      {
        v14 = CFDictionaryGetValue(theDict, CFSTR("kCTRegistrationDataAttached"));
        v15 = kCTRegistrationDataStatusUnattached;
        if (v13 == v14)
          v15 = kCTRegistrationDataStatusAttached;
      }
      CFDictionaryAddValue(v12, CFSTR("kCTRegistrationDataStatus"), *v15);
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterPostNotification(LocalCenter, a1, 0, v12, 1u);
      CFRelease(v12);
    }
  }
}

uint64_t CTRegistrationGetEmergencyCallBackMode()
{
  uint64_t Default;
  unsigned __int8 v2;

  Default = CTTelephonyCenterGetDefault();
  v2 = 0;
  _CTServerConnectionGetEmergencyCallBackMode(Default, &v2);
  return v2;
}

uint64_t CTRegistrationIsInE911OverLTEMode()
{
  uint64_t Default;
  unsigned __int8 v2;

  Default = CTTelephonyCenterGetDefault();
  v2 = 0;
  _CTServerConnectionGetE911OverLTEModeStatus(Default, &v2);
  return v2;
}

uint64_t CTRegistrationIsCDMAInternationalRoamingSettingAllowed()
{
  uint64_t Default;
  unsigned __int8 v2;

  Default = CTTelephonyCenterGetDefault();
  v2 = 0;
  if ((unint64_t)_CTServerConnectionIsCDMAInternationalRoamingSettingAllowed(Default, &v2) >> 32)
    _CTServerConnectionIsCDMAInternationalRoamingSettingAllowed(Default, &v2);
  return v2;
}

uint64_t CTRegistrationGetCDMAInternationalRoaming()
{
  uint64_t Default;
  unsigned __int8 v2;

  Default = CTTelephonyCenterGetDefault();
  v2 = 0;
  if ((unint64_t)_CTServerConnectionGetCDMAInternationalRoaming(Default, &v2) >> 32)
    _CTServerConnectionGetCDMAInternationalRoaming(Default, &v2);
  return v2;
}

uint64_t CTRegistrationSetCDMAInternationalRoaming(unsigned int a1)
{
  uint64_t Default;
  unsigned __int8 v4;

  Default = CTTelephonyCenterGetDefault();
  v4 = 0;
  if ((unint64_t)_CTServerConnectionSetCDMAInternationalRoaming(Default, a1, &v4) >> 32)
    _CTServerConnectionSetCDMAInternationalRoaming(Default, a1, &v4);
  return v4;
}

__CFArray *CTRegistrationCopySupportedDataRates()
{
  uint64_t Default;
  __CFArray *v2;

  Default = CTTelephonyCenterGetDefault();
  v2 = 0;
  if ((unint64_t)_CTServerConnectionCopySupportedDataRates(Default, &v2) >> 32)
    _CTServerConnectionCopySupportedDataRates(Default, &v2);
  return v2;
}

void _CTHandleNotification(_QWORD **a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, const char *a7, const char *a8, const char *a9)
{
  const __CFAllocator *v15;
  const __CFAllocator *v16;
  CFDictionaryRef v17;
  __CFString **v18;
  __CFString *v19;
  const __CFString *v20;
  uint64_t v21;
  __CFString **v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  __CFString **v27;
  CFIndex v28;
  uint64_t v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  CFStringRef v34;
  const __CFString *v35;
  BOOL v36;
  _BOOL8 v37;
  int v38;
  int v39;
  const __CFString *v40;
  _QWORD **v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  const __CFAllocator *v46;
  void **v47;
  const __CFAllocator *v48;
  __CFString **v49;
  CFStringRef v50;
  _QWORD *v51;
  __CFString **v52;
  CFStringRef v53;
  _QWORD *v54;
  CFStringRef v55;
  _QWORD *v56;
  void **v57;
  const void *v58;
  __CFString *v59;
  __CFString **v60;
  CFIndex v61;
  uint64_t v62;
  unint64_t v63;
  void **v64;
  void **v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  void **v70;
  const __CFAllocator *alloc;
  int v72;
  void *v73[2];
  _OWORD valuePtr[18];
  CFNumberRef values[2];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  void *keys[2];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v15 = CFGetAllocator(a1);
  v16 = v15;
  *(_OWORD *)values = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  *(_OWORD *)keys = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  if (a2 > 50)
  {
    if (a2 <= 96)
    {
      switch(a2)
      {
        case '3':
LABEL_35:
          alloc = v15;
          v29 = _FillDictionaryKeysAndValuesForDataStatus(v15, a4, (uint64_t *)a3, (const __CFString **)keys, values);
          v28 = v29;
          if (a2 == 44 && v29 >= 1)
          {
            v20 = CFSTR("kCTRegistrationNewServingNetworkNotification");
            break;
          }
          if (v29 <= 0)
            v20 = 0;
          else
            v20 = CFSTR("kCTRegistrationDataStatusChangedNotification");
          goto LABEL_105;
        case '4':
          goto LABEL_21;
        case ':':
        case ';':
        case '<':
          if (!a4)
            return;
          keys[0] = CFSTR("kCTSIMSupportSIMStatus");
          v19 = _CTServerConnectionSIMStatusToSIMStatusString(*(_DWORD *)a3);
          values[0] = (CFNumberRef)v19;
          alloc = v16;
          if (a2 == 60)
          {
            v20 = CFSTR("kCTSIMSupportSIMPUKEntryErrorNotification");
            if (a4 < 2)
              goto LABEL_90;
            LODWORD(valuePtr[0]) = *(_QWORD *)(a3 + 8);
            v48 = v16;
            goto LABEL_83;
          }
          if (a2 == 59)
          {
            v20 = CFSTR("kCTSIMSupportSIMPINEntryErrorNotification");
LABEL_85:
            if (a4 >= 2)
            {
              LODWORD(valuePtr[0]) = *(_QWORD *)(a3 + 8);
              values[1] = CFNumberCreate(v16, kCFNumberSInt32Type, valuePtr);
              if (values[1])
              {
                v49 = kCTSIMSupportSIMPINEntryAttemptsRemainingCount;
LABEL_88:
                keys[1] = *v49;
                goto LABEL_89;
              }
            }
            goto LABEL_90;
          }
          v20 = CFSTR("kCTSIMSupportSIMStatusChangeNotification");
          if (v19 == CFSTR("kCTSIMSupportSIMStatusPINLocked"))
            goto LABEL_85;
          v28 = 1;
          if (a4 >= 2 && v19 == CFSTR("kCTSIMSupportSIMStatusPUKLocked"))
          {
            LODWORD(valuePtr[0]) = *(_QWORD *)(a3 + 8);
            v48 = alloc;
LABEL_83:
            values[1] = CFNumberCreate(v48, kCFNumberSInt32Type, valuePtr);
            if (!values[1])
              goto LABEL_90;
            v49 = kCTSIMSupportSIMPUKEntryAttemptsRemainingCount;
            goto LABEL_88;
          }
          break;
        case '?':
          v20 = CFSTR("kCTSIMSupportSIMNewInsertionNotification");
          alloc = v15;
          values[0] = (CFNumberRef)CFStringCreateWithCString(v15, a7, 0x8000100u);
          if (values[0])
          {
            keys[0] = CFSTR("kCTSIMSupportMobileSubscriberIdentity");
            v28 = 1;
          }
          else
          {
            v28 = 0;
          }
          v50 = CFStringCreateWithCString(alloc, a8, 0x8000100u);
          *(_QWORD *)((unint64_t)values | (8 * v28)) = v50;
          if (!v50)
            goto LABEL_105;
          v51 = (_QWORD *)((unint64_t)keys | (8 * v28++));
          *v51 = CFSTR("kCTSIMSupportIntegratedCircuitCardIdentity");
          break;
        default:
          return;
      }
LABEL_106:
      v17 = CFDictionaryCreate(alloc, (const void **)keys, (const void **)values, v28, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v17 && v20)
      {
        CFRelease(v20);
        v20 = 0;
      }
      if (v28 >= 1)
      {
        v57 = (void **)values;
        do
        {
          v58 = *v57++;
          CFRelease(v58);
          --v28;
        }
        while (v28);
      }
      if (!v20)
        goto LABEL_114;
      goto LABEL_113;
    }
    if (a2 > 116)
    {
      if (a2 != 117)
      {
        if (a2 != 123 || !a4)
          return;
        alloc = v15;
        v20 = CFSTR("kCTQualityOfServiceFlowStatusChangeNotification");
        keys[0] = CFSTR("kCTQualityOfServiceFlowIdentifier");
        LODWORD(valuePtr[0]) = *(_QWORD *)a3;
        values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, valuePtr);
        keys[1] = CFSTR("kCTQualityOfServiceFlowStatus");
        values[1] = (CFNumberRef)_CTServerConnectionQosFlowStatusToQosFlowStatusString(*(unsigned __int8 *)(a3 + 8));
LABEL_89:
        v28 = 2;
        goto LABEL_106;
      }
      v17 = 0;
      v18 = kCTSPCUnlockSuccessfulNotification;
LABEL_55:
      v20 = *v18;
      if (!*v18)
        goto LABEL_114;
LABEL_113:
      CTServerState::sendNotification_sync(a1[3], a2, v20, v17);
      CFRelease(v20);
      goto LABEL_114;
    }
    if (a2 != 97)
    {
      if (a2 != 99 || !a4)
        return;
      v21 = *(_QWORD *)(a3 + 8);
      if (v21 == 2)
      {
        alloc = v15;
        v20 = CFSTR("kCTIndicatorRadioTransmitNotification");
        v22 = kCTRadioTransmitUTBFStatus;
      }
      else
      {
        if (v21 != 3)
          return;
        alloc = v15;
        v20 = CFSTR("kCTIndicatorRadioTransmitNotification");
        v22 = kCTRadioTransmitDCHStatus;
      }
LABEL_74:
      keys[0] = *v22;
      v47 = (void **)MEMORY[0x1E0C9AE50];
      if (!*(_QWORD *)a3)
        v47 = (void **)MEMORY[0x1E0C9AE40];
      values[0] = (CFNumberRef)*v47;
LABEL_90:
      v28 = 1;
      goto LABEL_106;
    }
LABEL_21:
    if (a4 < 3)
      return;
    LODWORD(valuePtr[0]) = *(_QWORD *)a3;
    values[0] = CFNumberCreate(v15, kCFNumberIntType, valuePtr);
    if (!values[0])
      return;
    alloc = v16;
    keys[0] = CFSTR("kCTRegistrationDataContextID");
    keys[1] = CFSTR("kCTRegistrationDataActive");
    v23 = (const void *)*MEMORY[0x1E0C9AE40];
    v24 = (const void *)*MEMORY[0x1E0C9AE50];
    if (*(_QWORD *)(a3 + 8))
      v25 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v25 = (const void *)*MEMORY[0x1E0C9AE40];
    values[1] = (CFNumberRef)CFRetain(v25);
    *(_QWORD *)&v84 = CFSTR("kCTRegistrationDataAttached");
    if (*(_QWORD *)(a3 + 16))
      v26 = v24;
    else
      v26 = v23;
    *(_QWORD *)&v76 = CFRetain(v26);
    v27 = kCTRegistrationDataActivateFailedNotification;
    if (a2 != 52)
      v27 = kCTRegistrationCellularDataPlanActivateFailedNotification;
    v20 = *v27;
    if (a4 < 4)
    {
      v28 = 3;
      goto LABEL_106;
    }
    switch(*(_QWORD *)(a3 + 24))
    {
      case 0xFFFFFFFFFFFFFFFCLL:
        *((_QWORD *)&v76 + 1) = CFSTR("kCTRegistrationDataActivationPreventionReasonIntlRoamingOff");
        *(_QWORD *)&v77 = v24;
        *((_QWORD *)&v84 + 1) = CFSTR("kCTRegistrationDataActivationPreventionReason");
        *(_QWORD *)&v85 = CFSTR("kCTRegistrationDataActivationWasForMMS");
        v28 = 5;
        break;
      case 0xFFFFFFFFFFFFFFFDLL:
        v60 = kCTRegistrationDataActivationPreventionNotSupported;
        goto LABEL_129;
      case 0xFFFFFFFFFFFFFFFELL:
        v60 = kCTRegistrationDataActivationPreventionReasonIntlRoamingOff;
        goto LABEL_129;
      case 0xFFFFFFFFFFFFFFFFLL:
        v60 = kCTRegistrationDataActivationPreventionReasonOff;
LABEL_129:
        *((_QWORD *)&v76 + 1) = *v60;
        *((_QWORD *)&v84 + 1) = CFSTR("kCTRegistrationDataActivationPreventionReason");
        v28 = 4;
        break;
      default:
        LODWORD(valuePtr[0]) = *(_QWORD *)(a3 + 24);
        v28 = 3;
        *((_QWORD *)&v76 + 1) = CFNumberCreate(alloc, kCFNumberSInt32Type, valuePtr);
        if (*((_QWORD *)&v76 + 1))
        {
          *((_QWORD *)&v84 + 1) = CFSTR("kCTRegistrationDataActivateFailure");
          v28 = 4;
        }
        v59 = _CTErrorString(valuePtr[0]);
        values[v28] = (CFNumberRef)v59;
        if (v59 && !CFEqual(v59, CFSTR("kCTReturnUnknownError")))
          keys[v28++] = CFSTR("kCTRegistrationDataActivateFailureString");
        break;
    }
    if (a4 < 5)
    {
      if (a2 != 97)
        goto LABEL_106;
    }
    else
    {
      v61 = 0;
      v62 = 0;
      v63 = *(_QWORD *)(a3 + 32) & 0x7FFFFFFFFFFFD67FLL;
      memset(valuePtr, 0, sizeof(valuePtr));
      do
      {
        if (((v63 >> v62) & 1) != 0)
          *((_QWORD *)valuePtr + v61++) = kCTDataConnectionServiceTypeFromIndex(v62);
        ++v62;
      }
      while (v62 != 36);
      if (v61)
      {
        values[v28] = CFArrayCreate(alloc, (const void **)valuePtr, v61, MEMORY[0x1E0C9B378]);
        keys[v28++] = CFSTR("kCTRegistrationDataConnectionServices");
      }
      v64 = (void **)MEMORY[0x1E0C9AE40];
      v65 = (void **)MEMORY[0x1E0C9AE50];
      if (a2 == 52 && a4 == 6)
      {
        v66 = 0;
        v67 = 0;
        *(_QWORD *)&valuePtr[0] = CFSTR("kCTDataFamilyTypeIPv4");
        *((_QWORD *)&valuePtr[0] + 1) = CFSTR("kCTDataFamilyTypeIPv6");
        v73[0] = 0;
        v73[1] = 0;
        v68 = *(_DWORD *)(a3 + 40);
        v69 = 1;
        do
        {
          if ((v69 & v68) != 0)
            v73[v67++] = (void *)*((_QWORD *)valuePtr + v66);
          v69 = 1 << ++v66;
        }
        while (v66 != 2);
        if (v67)
        {
          values[v28] = CFArrayCreate(alloc, (const void **)v73, v67, MEMORY[0x1E0C9B378]);
          keys[v28++] = CFSTR("kCTRegistrationDataFamilyInactive");
        }
      }
      if (a2 != 97)
        goto LABEL_105;
      if (a4 >= 6)
      {
        if (*(_QWORD *)(a3 + 40))
          v70 = v64;
        else
          v70 = v65;
        values[v28] = (CFNumberRef)*v70;
        keys[v28++] = CFSTR("kCTRegistrationCellularDataPlanNewAccount");
      }
    }
    values[v28] = (CFNumberRef)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a9, 0x8000100u);
    keys[v28++] = CFSTR("kCTRegistrationCellularDataPlanAccountURL");
LABEL_105:
    if (v28)
      goto LABEL_106;
LABEL_117:
    v17 = 0;
    if (!v20)
    {
LABEL_114:
      if (v17)
        CFRelease(v17);
      return;
    }
    goto LABEL_113;
  }
  switch(a2)
  {
    case 11:
      v17 = 0;
      v18 = kCTUSSDSessionBeginNotification;
      goto LABEL_55;
    case 12:
      alloc = v15;
      if (a4)
      {
        keys[0] = CFSTR("kCTUSSDSessionStringIsOutgoing");
        v30 = (const void *)*MEMORY[0x1E0C9AE40];
        v31 = (const void *)*MEMORY[0x1E0C9AE50];
        if (*(_QWORD *)a3)
          v32 = (const void *)*MEMORY[0x1E0C9AE50];
        else
          v32 = (const void *)*MEMORY[0x1E0C9AE40];
        values[0] = (CFNumberRef)CFRetain(v32);
        keys[1] = CFSTR("kCTUSSDSessionResponseRequested");
        if (*(_QWORD *)(a3 + 8))
          v33 = v31;
        else
          v33 = v30;
        values[1] = (CFNumberRef)CFRetain(v33);
        v34 = CFStringCreateWithCString(alloc, a9, 0x8000100u);
        v35 = &stru_1E1536FB8;
        if (v34)
          v35 = v34;
        *(_QWORD *)&v76 = v35;
        *(_QWORD *)&v84 = CFSTR("kCTUSSDSessionString");
        v28 = 3;
      }
      else
      {
        v28 = 0;
      }
      v52 = kCTUSSDSessionStringNotification;
      goto LABEL_104;
    case 13:
      v17 = 0;
      v18 = kCTUSSDSessionEndNotification;
      goto LABEL_55;
    case 14:
      v20 = CFSTR("kCTUSSDSessionErrorNotification");
      if (!a4)
        goto LABEL_117;
      keys[0] = CFSTR("kCTUSSDSessionErrorCode");
      LODWORD(valuePtr[0]) = *(_QWORD *)a3;
      alloc = v15;
      values[0] = CFNumberCreate(v15, kCFNumberSInt32Type, valuePtr);
      v36 = values[0] == 0;
      v37 = values[0] != 0;
      *(_QWORD *)((unint64_t)keys | (8 * v37)) = CFSTR("kCTUSSDSessionErrorString");
      if (v36)
        v28 = 1;
      else
        v28 = 2;
      *(_QWORD *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * v37)) = _CTErrorString(valuePtr[0]);
      goto LABEL_106;
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 29:
      return;
    case 26:
      alloc = v15;
      values[0] = (CFNumberRef)CFStringCreateWithCString(v15, a9, 0x8000100u);
      if (values[0])
      {
        keys[0] = CFSTR("kCTSMSClass0String");
        v28 = 1;
      }
      else
      {
        v28 = 0;
      }
      v53 = CFStringCreateWithCString(alloc, a7, 0x8000100u);
      *(_QWORD *)((unint64_t)values | (8 * v28)) = v53;
      if (v53)
      {
        v54 = (_QWORD *)((unint64_t)keys | (8 * v28++));
        *v54 = CFSTR("kCTSMSClass0AddressString");
      }
      v52 = kCTSMSClass0StringReceivedNotification;
      goto LABEL_104;
    case 30:
      alloc = v15;
      values[0] = (CFNumberRef)CFStringCreateWithCString(v15, a9, 0x8000100u);
      if (values[0])
      {
        keys[0] = CFSTR("kCTSMSTestMessageBody");
        v28 = 1;
      }
      else
      {
        v28 = 0;
      }
      v55 = CFStringCreateWithCString(alloc, a7, 0x8000100u);
      *(_QWORD *)((unint64_t)values | (8 * v28)) = v55;
      if (v55)
      {
        v56 = (_QWORD *)((unint64_t)keys | (8 * v28++));
        *v56 = CFSTR("kCTSMSTestMessageAddress");
      }
      v52 = kCTSMSTestMessageReceivedNotification;
LABEL_104:
      v20 = *v52;
      goto LABEL_105;
    case 31:
      v38 = *(_DWORD *)a3;
      v39 = *(_DWORD *)(a3 + 8);
      v40 = CFSTR("kCTMessageReceivedNotification");
      v41 = a1;
      v42 = 31;
      goto LABEL_69;
    case 32:
      v38 = *(_DWORD *)a3;
      v39 = *(_DWORD *)(a3 + 8);
      v40 = CFSTR("kCTMessageReceiveDeferredNotification");
      v41 = a1;
      v42 = 32;
      goto LABEL_69;
    case 33:
      v38 = *(_DWORD *)a3;
      v39 = *(_DWORD *)(a3 + 8);
      v40 = CFSTR("kCTMessageSentNotification");
      v41 = a1;
      v42 = 33;
LABEL_69:
      v43 = 0;
      v44 = 0;
      goto LABEL_71;
    case 34:
      v38 = *(_DWORD *)a3;
      v39 = *(_DWORD *)(a3 + 8);
      v43 = *(_DWORD *)(a3 + 16);
      v44 = *(_DWORD *)(a3 + 24);
      v40 = CFSTR("kCTMessageSendErrorNotification");
      v41 = a1;
      v42 = 34;
LABEL_71:
      _CTSendMessageNotification(v41, v42, v40, v38, v39, v43, v44);
      break;
    case 35:
      keys[0] = CFSTR("kCTMessageIdKey");
      keys[1] = CFSTR("kCTMessageSendBytesKey");
      *(_QWORD *)&v84 = CFSTR("kCTMessageSendTotalBytesKey");
      v45 = *(_QWORD *)(a3 + 8);
      LODWORD(valuePtr[0]) = *(_QWORD *)a3;
      v20 = CFSTR("kCTMessageSendProgressNotification");
      v72 = *(_QWORD *)(a3 + 16);
      LODWORD(v73[0]) = v45;
      v46 = v15;
      v28 = 3;
      values[0] = CFNumberCreate(v15, kCFNumberSInt32Type, valuePtr);
      values[1] = CFNumberCreate(v46, kCFNumberSInt32Type, v73);
      alloc = v46;
      *(_QWORD *)&v76 = CFNumberCreate(v46, kCFNumberSInt32Type, &v72);
      goto LABEL_106;
    case 36:
      alloc = v15;
      v20 = CFSTR("kCTMMSConfigurationChangeNotification");
      v22 = kCTMMSConfiguredKey;
      goto LABEL_74;
    default:
      if (a2 == 44)
        goto LABEL_35;
      break;
  }
}

void _CTSendMessageNotification(_QWORD **a1, int a2, const void *a3, int a4, int a5, int a6, int a7)
{
  const __CFAllocator *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFIndex v15;
  CFNumberRef v16;
  CFDictionaryRef v17;
  CFDictionaryRef v18;
  void **p_values;
  const void *v20;
  int v21;
  int v22;
  int v23;
  int valuePtr;
  void *values;
  CFNumberRef v27;
  uint64_t v28;
  void *keys[2];
  const __CFString *v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v23 = a5;
  valuePtr = a4;
  v21 = a7;
  v22 = a6;
  v12 = CFGetAllocator(a1);
  v30 = 0;
  v31 = 0;
  v27 = 0;
  v28 = 0;
  v13 = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
  values = v13;
  if (!v13)
    return;
  v14 = v13;
  keys[0] = CFSTR("kCTMessageIdKey");
  if (!CFNumberCreate(v12, kCFNumberSInt32Type, &v23))
  {
    CFRelease(v14);
    return;
  }
  keys[1] = CFSTR("kCTMessageTypeKey");
  if (a6)
  {
    v27 = CFNumberCreate(v12, kCFNumberSInt32Type, &v22);
    if (v27)
    {
      v30 = CFSTR("kCTMessageSendErrorKey");
      v15 = 3;
      if (!a7)
        goto LABEL_10;
LABEL_8:
      v16 = CFNumberCreate(v12, kCFNumberSInt32Type, &v21);
      *(&values + v15) = v16;
      if (v16)
        keys[v15++] = CFSTR("kCTMessageSendModemErrorKey");
      goto LABEL_10;
    }
  }
  v15 = 2;
  if (a7)
    goto LABEL_8;
LABEL_10:
  v17 = CFDictionaryCreate(v12, (const void **)keys, (const void **)&values, v15, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v17)
  {
    v18 = v17;
    CTServerState::sendNotification_sync(a1[3], a2, a3, v17);
    CFRelease(v18);
  }
  p_values = &values;
  do
  {
    v20 = *p_values++;
    CFRelease(v20);
    --v15;
  }
  while (v15);
}

unint64_t _CTServerConnectionPerformMigration(void *a1, BOOL a2, BOOL a3, BOOL a4, BOOL a5)
{
  _QWORD *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  const void *v20;
  uint64_t (*v21)(uint64_t);
  NSObject *v22;
  uint64_t v23;
  unint64_t v24;
  xpc_object_t v25;
  int v26;
  xpc_object_t v27;
  xpc_object_t v28;
  int v29;
  NSObject *v30;
  xpc_object_t v32;
  xpc_object_t value;
  xpc_object_t v34;
  xpc_object_t v35;
  _OWORD v36[2];
  uint64_t v37;
  xpc_object_t object;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  memset(v36, 0, sizeof(v36));
  v10 = _CTServerConnectionCreate(*MEMORY[0x1E0C9AE00], (uint64_t)_ServerConnectionCallback, v36);
  if (v10)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kInternalToolPerformMigration", &object, "kRequest", &v34);
    xpc_release(object);
    v11 = v34;
    v35 = v34;
    v34 = xpc_null_create();
    xpc_release(v34);
    v12 = xpc_BOOL_create(a2);
    if (!v12)
      v12 = xpc_null_create();
    xpc_dictionary_set_value(v11, "kIsEraseInstall", v12);
    v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    v14 = xpc_BOOL_create(a3);
    if (!v14)
      v14 = xpc_null_create();
    xpc_dictionary_set_value(v11, "kIsUpgrade", v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    v16 = xpc_BOOL_create(a4);
    if (!v16)
      v16 = xpc_null_create();
    xpc_dictionary_set_value(v11, "kIsRestore", v16);
    v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
    v18 = xpc_BOOL_create(a5);
    if (!v18)
      v18 = xpc_null_create();
    xpc_dictionary_set_value(v11, "kIsDifferentDevice", v18);
    v19 = xpc_null_create();
    xpc_release(v18);
    xpc_release(v19);
    if (a1)
    {
      CFRetain(a1);
      v21 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    }
    else
    {
      v21 = 0;
    }
    if (v21)
    {
      ctu::cf_to_xpc((ctu *)a1, v20);
      xpc_dictionary_set_value(v11, "kLastSystemVersionString", value);
      v25 = value;
      value = xpc_null_create();
      xpc_release(v25);
      xpc_release(value);
      value = 0;
      v26 = objc_msgSend(a1, "intValue");
      if (v26 >= 1)
      {
        v27 = xpc_int64_create(v26);
        if (!v27)
          v27 = xpc_null_create();
        xpc_dictionary_set_value(v11, "kLastSystemVersion", v27);
        v28 = xpc_null_create();
        xpc_release(v27);
        xpc_release(v28);
      }
    }
    v34 = xpc_null_create();
    v24 = SendXpcMessage((uint64_t)v10, &v35, &v34);
    v23 = HIDWORD(v24);
    if (MEMORY[0x186DBAE5C](v34) == MEMORY[0x1E0C812F8])
    {
      object = &v34;
      v39 = "kMigrationResult";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v32);
      v29 = xpc::dyn_cast_or_default((xpc *)&v32, 0);
      xpc_release(v32);
      if (v29)
      {
        v23 = HIDWORD(v24);
      }
      else
      {
        LODWORD(v24) = 1;
        v23 = 60;
      }
    }
    CFRelease(v10);
    v30 = CTLogMigration();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(object) = 67109376;
      HIDWORD(object) = v23;
      LOWORD(v39) = 1024;
      *(_DWORD *)((char *)&v39 + 2) = v24;
      _os_log_impl(&dword_18425C000, v30, OS_LOG_TYPE_DEFAULT, "_CTServerConnectionPerformMigration done: error (%d) with domain (%d)", (uint8_t *)&object, 0xEu);
    }
    xpc_release(v34);
    if (a1)
      CFRelease(a1);
    xpc_release(v35);
  }
  else
  {
    v22 = CTLogMigration();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      _CTServerConnectionPerformMigration_cold_1(v22);
    v23 = 22;
    LODWORD(v24) = 1;
  }
  return v24 | (unint64_t)(v23 << 32);
}

void sub_18428D4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, xpc_object_t a11, xpc_object_t a12)
{
  const void *v12;

  xpc_release(object);
  xpc_release(a11);
  if (v12)
    CFRelease(v12);
  xpc_release(a12);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

unint64_t _CTServerConnectionRegisterSupportedEnhancedLinkQualityMetric(uint64_t a1)
{
  xpc_object_t v2;
  void *v3;
  xpc_object_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  xpc_object_t object[2];
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;

  if (a1)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioEnhancedLQMRegister", object, "kRequest", &v11);
    xpc_release(object[0]);
    v2 = v11;
    v12 = v11;
    v11 = xpc_null_create();
    xpc_release(v11);
    v3 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v3)
      v3 = xpc_null_create();
    xpc_dictionary_set_value(v2, "kRadioEnhancedLQMRegisterSupportedMetrics", v3);
    v4 = xpc_null_create();
    xpc_release(v3);
    xpc_release(v4);
    v11 = xpc_null_create();
    v5 = SendXpcMessage(a1, &v12, &v11);
    v6 = 0x400000000;
    if (MEMORY[0x186DBAE5C](v11) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v11;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v10);
      v7 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
      if (v7)
        v6 = v5 & 0xFFFFFFFF00000000;
      else
        LODWORD(v5) = 2;
    }
    else
    {
      LODWORD(v5) = 2;
    }
    xpc_release(v11);
    xpc_release(v12);
  }
  else
  {
    v6 = 0x1600000000;
    LODWORD(v5) = 1;
  }
  return v6 & 0xFFFFFFFF00000000 | v5;
}

unint64_t _CTServerConnectionQueryEnhancedLinkQualityMetric(const void *a1, unsigned int a2, CFDataRef *a3)
{
  unint64_t v3;
  uint64_t v4;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  int v11;
  const UInt8 *data;
  const __CFAllocator *v13;
  xpc_object_t object[2];
  xpc_object_t v16;
  xpc_object_t xdict;
  xpc_object_t v18;

  v3 = 0x1600000000;
  LODWORD(v4) = 1;
  if (a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioEnhancedLQMQuery", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v8 = xdict;
    v18 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v9 = xpc_int64_create(a2);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kRadioEnhancedLQMQueryPayload", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xdict = xpc_null_create();
    v4 = SendXpcMessage((uint64_t)a1, &v18, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && (object[0] = &xdict,
          object[1] = "kDidSucceed",
          xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v16),
          v11 = xpc::dyn_cast_or_default((xpc *)&v16, 0),
          xpc_release(v16),
          v11))
    {
      v3 = v4 & 0xFFFFFFFF00000000;
      object[0] = 0;
      data = (const UInt8 *)xpc_dictionary_get_data(xdict, "kRadioEnhancedLQMResult", (size_t *)object);
      v13 = CFGetAllocator(a1);
      *a3 = CFDataCreate(v13, data, (CFIndex)object[0]);
    }
    else
    {
      v3 = 0x500000000;
      LODWORD(v4) = 2;
    }
    xpc_release(xdict);
    xpc_release(v18);
  }
  return v3 & 0xFFFFFFFF00000000 | v4;
}

unint64_t _CTServerConnectionGetSupportedEnhancedLinkQualityMetric(uint64_t a1, xpc_object_t *a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v6;
  int v7;
  xpc_object_t object[2];
  xpc_object_t v10;
  xpc_object_t xdict;
  xpc_object_t v12;

  v2 = 0x1600000000;
  v3 = 1;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioEnhancedLQMGetSupportedMetrics", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v12 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v6 = SendXpcMessage(a1, &v12, &xdict);
    v2 = 0x400000000;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      object[0] = &xdict;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v10);
      v7 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
      object[0] = 0;
      xpc_dictionary_get_value(xdict, "kRadioEnhancedLQMSupportedMetrics");
      v10 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v10);
      *a2 = object[0];
      if (v7)
      {
        v2 = v6 & 0xFFFFFFFF00000000;
        v3 = v6;
      }
      else
      {
        v3 = 2;
      }
    }
    else
    {
      v3 = 2;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

const char *CTDataRateAsString(unint64_t a1)
{
  if (a1 > 8)
    return "???";
  else
    return off_1E152E2D8[a1];
}

MMSEnumerationHeader *MMSMessageClassHeader::createPrototype(MMSMessageClassHeader *this)
{
  MMSEnumerationHeader *v1;
  uint64_t v2;

  v1 = (MMSEnumerationHeader *)operator new();
  v2 = MMSEnumerationHeader::MMSEnumerationHeader((uint64_t)v1, 0, 0);
  *(_QWORD *)v2 = off_1E152CE40;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 16) = 1;
  MMSEnumerationHeader::addNameForValue((MMSEnumerationHeader *)v2, "Personal", 128);
  MMSEnumerationHeader::addNameForValue(v1, "Advertisement", 129);
  MMSEnumerationHeader::addNameForValue(v1, "Informational", 130);
  MMSEnumerationHeader::addNameForValue(v1, "Auto", 131);
  return v1;
}

_QWORD *MMSMessageClassHeader::createInstance(MMSMessageClassHeader *this)
{
  uint64_t v2;
  _QWORD *result;

  v2 = operator new();
  result = (_QWORD *)MMSEnumerationHeader::MMSEnumerationHeader(v2, *((_QWORD *)this + 1), 0);
  *result = off_1E152CE40;
  result[5] = 0;
  result[6] = 0;
  result[4] = 0;
  return result;
}

uint64_t MMSMessageClassHeader::copy(MMSMessageClassHeader *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;

  v2 = operator new();
  v3 = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *(_QWORD *)((char *)v3 + 17) = *(_QWORD *)((char *)this + 17);
  v3[3] = *((_QWORD *)this + 3);
  *v3 = off_1E152CE40;
  v4 = (std::string *)(v3 + 4);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
  return v2;
}

uint64_t MMSMessageClassHeader::parseValue(MMSMessageClassHeader *this, std::string::value_type *a2)
{
  if ((MMSEnumerationHeader::parseNamedValue(this, a2) & 1) == 0)
    std::string::__assign_external((std::string *)((char *)this + 32), a2);
  return 1;
}

uint64_t MMSMessageClassHeader::valueAsString(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 17) < 0)
    return MMSEnumerationHeader::valueAsString(a1, this);
  std::string::operator=(this, (const std::string *)(a1 + 32));
  return 1;
}

uint64_t MMSMessageClassHeader::decodeValue(MMSMessageClassHeader *this, MMSPduDecoder *a2)
{
  _BOOL4 v4;
  uint64_t result;
  unsigned __int8 v6;

  v6 = 0;
  v4 = MMSPduDecoder::peekByte(a2, &v6);
  result = 0;
  if (v4)
  {
    if ((char)v6 < 0)
      return MMSEnumerationHeader::decodeValue(this, a2);
    else
      return MMSPduDecoder::decodeHttpToken((uint64_t)a2, (std::string *)((char *)this + 32));
  }
  return result;
}

uint64_t MMSMessageClassHeader::encodeValue(MMSMessageClassHeader *this, MMSPduEncoder *a2)
{
  int v2;
  const char *v3;

  v2 = *((char *)this + 17);
  if (v2 < 0)
  {
    MMSPduEncoder::encodeByte(a2, v2);
  }
  else
  {
    v3 = (char *)this + 32;
    if (*((char *)this + 55) < 0)
      v3 = *(const char **)v3;
    MMSPduEncoder::encodeHttpToken(a2, v3);
  }
  return 1;
}

const char *MMSMessageClassHeader::headerTypeName(MMSMessageClassHeader *this)
{
  return "message-class";
}

void MMSMessageClassHeader::~MMSMessageClassHeader(void **this)
{
  *this = off_1E152CE40;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  MMSEnumerationHeader::~MMSEnumerationHeader((MMSEnumerationHeader *)this);
}

{
  *this = off_1E152CE40;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  MMSEnumerationHeader::~MMSEnumerationHeader((MMSEnumerationHeader *)this);
  JUMPOUT(0x186DBA454);
}

const char *CTBootstrapStatusAsString(unsigned int a1)
{
  if (a1 > 2)
    return "??";
  else
    return off_1E152E5A8[a1];
}

uint64_t CTLogSubscriber()
{
  if (CTLogSubscriber_once != -1)
    dispatch_once(&CTLogSubscriber_once, &__block_literal_global_6);
  return CTLogSubscriber_logger;
}

uint64_t CTLogPostponement()
{
  if (CTLogPostponement_once != -1)
    dispatch_once(&CTLogPostponement_once, &__block_literal_global_9);
  return CTLogPostponement_logger;
}

uint64_t CTLogClientXPC()
{
  if (CTLogClientXPC_once != -1)
    dispatch_once(&CTLogClientXPC_once, &__block_literal_global_15);
  return CTLogClientXPC_logger;
}

uint64_t CTLogRadioModule()
{
  if (CTLogRadioModule_once != -1)
    dispatch_once(&CTLogRadioModule_once, &__block_literal_global_24);
  return CTLogRadioModule_logger;
}

uint64_t CTLogMigration()
{
  if (CTLogMigration_once != -1)
    dispatch_once(&CTLogMigration_once, &__block_literal_global_33);
  return CTLogMigration_logger;
}

uint64_t CTLogStewieMonitor()
{
  if (CTLogStewieMonitor_once != -1)
    dispatch_once(&CTLogStewieMonitor_once, &__block_literal_global_36);
  return CTLogStewieMonitor_logger;
}

uint64_t CTLogStewieDataClient()
{
  if (CTLogStewieDataClient_once != -1)
    dispatch_once(&CTLogStewieDataClient_once, &__block_literal_global_39);
  return CTLogStewieDataClient_logger;
}

uint64_t CTLogConnectionPair()
{
  if (CTLogConnectionPair_once != -1)
    dispatch_once(&CTLogConnectionPair_once, &__block_literal_global_42);
  return CTLogConnectionPair_logger;
}

uint64_t CTLogCoreAnalytics()
{
  if (CTLogCoreAnalytics_once != -1)
    dispatch_once(&CTLogCoreAnalytics_once, &__block_literal_global_45);
  return CTLogCoreAnalytics_logger;
}

void sub_184290AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_184290DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18429103C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184291208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842913B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_184291604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_184291938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_184291B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184291CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184291EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;

  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

void sub_184291FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18429219C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842922AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18429244C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184292618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184292808(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184292914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184292AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184292CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184292EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842930BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;

  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

void sub_1842931D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184293370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18429356C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18429376C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18429396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184293B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184293D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184293F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184294174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184294374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184294574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184294778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184294978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184294B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184294D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184294F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184295164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18429534C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184295548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184295748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184295948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184295B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;

  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

void sub_184295C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184295DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184295FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842961B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  v28 = v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842963DC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184296524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842966E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;

  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

void sub_1842967F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184297B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12)
{
  xpc_release(object);
  xpc_release(a12);
  _Unwind_Resume(a1);
}

void sub_184297F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, xpc_object_t a11, xpc_object_t a12)
{
  xpc_release(object);
  xpc_release(a11);
  xpc_release(a12);
  _Unwind_Resume(a1);
}

void sub_1842989E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, xpc_object_t object, xpc_object_t a14)
{
  const void *v14;
  const void *v15;

  xpc_release(object);
  xpc_release(a14);
  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_184298C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13)
{
  uint64_t v13;

  xpc_release(object);
  xpc_release(a13);
  xpc_release(*(xpc_object_t *)(v13 - 24));
  _Unwind_Resume(a1);
}

void sub_184298F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, CFTypeRef cf, xpc_object_t a13, xpc_object_t object)
{
  if (cf)
    CFRelease(cf);
  xpc_release(object);
  xpc_release(a13);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void acknowledgeMessageWithId(unsigned int a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  NSObject *v9;
  NSObject *v10;
  xpc_object_t object[2];
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;

  if (_messageCenterServerConnection)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsAcknowledgeMessage", object, "kRequest", &v13);
    xpc_release(object[0]);
    v4 = v13;
    v14 = v13;
    v13 = xpc_null_create();
    xpc_release(v13);
    v5 = xpc_int64_create(a1);
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kSmsMessageID", v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    v7 = xpc_BOOL_create(a2 != 0);
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kSmsMessageIsMobileOriginated", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v13 = xpc_null_create();
    if ((unint64_t)SendXpcMessage(_messageCenterServerConnection, &v14, &v13) >> 32)
    {
      v10 = CTLogMessageCenter();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        acknowledgeMessageWithId();
    }
    else if (MEMORY[0x186DBAE5C](v13) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v13;
      object[1] = "kSmsMessageWasAcknowledged";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
      xpc::dyn_cast_or_default((xpc *)&v12, 0);
      xpc_release(v12);
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  else
  {
    v9 = CTLogMessageCenter();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      acknowledgeMessageWithId();
  }
}

void sub_1842991F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13, xpc_object_t a14)
{
  xpc_release(object);
  xpc_release(a13);
  xpc_release(a14);
  _Unwind_Resume(a1);
}

void sub_18429949C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13, xpc_object_t a14)
{
  xpc_release(object);
  xpc_release(a13);
  xpc_release(a14);
  _Unwind_Resume(a1);
}

void sub_184299C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, xpc_object_t a13, xpc_object_t a14)
{
  xpc_release(object);
  xpc_release(a13);
  xpc_release(a14);
  _Unwind_Resume(a1);
}

void sub_184299DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13)
{
  uint64_t v13;

  xpc_release(object);
  xpc_release(a13);
  xpc_release(*(xpc_object_t *)(v13 - 24));
  _Unwind_Resume(a1);
}

void sub_18429A380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  xpc_release(object);
  xpc_release(a11);
  xpc_release(a16);
  _Unwind_Resume(a1);
}

void sub_18429A5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, xpc_object_t object, xpc_object_t a14)
{
  xpc_release(object);
  xpc_release(a14);
  _Unwind_Resume(a1);
}

void sub_18429A7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  uint64_t v13;

  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v13 - 24));
  _Unwind_Resume(a1);
}

_QWORD *ctu::cf::CFSharedRef<__CFData const>::CFSharedRef<void const,void>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  CFTypeID v4;

  v3 = *a2;
  if (*a2 && (v4 = CFGetTypeID(*a2), v4 == CFDataGetTypeID()))
  {
    *a1 = v3;
    CFRetain(v3);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_18429AD7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429AE04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429AEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429AEE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429AFAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429B048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429B160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429B280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_18429B348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429B3A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429B420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18429B53C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429B62C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429B7B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429B8E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429B9A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429BA04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429BAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18429BBF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429BCC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429BDB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429BE38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429BED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429BF1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429C020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18429C0FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429C204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429C2D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18429C388(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429C3DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429C440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18429C528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429C5E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429C6E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429C76C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429C808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429C850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429C914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429C9F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429CACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429CB54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429CBF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429CC38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429CCFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429CD90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429CE80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429CF98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18429D064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429D0B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429D11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18429D204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429D2E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429D450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429D57C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429D63C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429D69C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429D754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18429D890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429D968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429DA50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429DAD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429DB74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429DBBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429DCC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18429DD9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429DE7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429DF04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429DFA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429DFE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429E0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429E140(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429E23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429E340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429E400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429E454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429E4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18429E5CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429E690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429E768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429E7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429E88C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429E8D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429E9D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18429EAB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429EBBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429EC90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18429ED40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429ED94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429EDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18429EEDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429EFA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429F0A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429F12C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429F1C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429F210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429F314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18429F3F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429F4D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429F558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429F5F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429F63C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429F740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18429F828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429F934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429FA08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18429FAB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429FB0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429FB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18429FC58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429FD64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429FE74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18429FEFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18429FF98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18429FFE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A00E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842A01C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A02A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A036C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A0420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A0468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A052C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A05DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A076C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A0BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, int a12, char a13, void *a14, void *a15, int a16, char a17, void *a18, void *a19, void *a20,void *a21,int a22,char a23,void *a24,void *a25,void *a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  if ((a13 & 1) != 0)
  {

  }
  if (!a18)

  if ((a17 & 1) != 0)
  {

  }
  if (!a24)

  if ((a23 & 1) != 0)
  {

  }
  if (!v33)

  if ((*(_DWORD *)(v34 - 124) & 1) != 0)
  {

  }
  if (!v31)

  if ((*(_DWORD *)(v34 - 100) & 1) != 0)
  {

  }
  if (!v28)

  _Unwind_Resume(a1);
}

void sub_1842A0DB8()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x1842A0DA8);
  JUMPOUT(0x1842A0DA0);
}

void sub_1842A0DC4()
{
  JUMPOUT(0x1842A0DACLL);
}

void sub_1842A0E3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A0EC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A0F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842A113C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A1310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A14B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A1638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;

  if ((v12 & 1) != 0)
  {

  }
  if (!v11)

  _Unwind_Resume(a1);
}

void sub_1842A16C8()
{
  JUMPOUT(0x1842A16BCLL);
}

void sub_1842A1740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A1794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A17F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842A18E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A19E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A1C24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A2478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34)
{
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  uint64_t v39;

  if ((*(_DWORD *)(v39 - 148) & 1) != 0)
  {

  }
  if (!a14)

  if ((v37 & 1) != 0)
  {

  }
  if (!a19)

  if ((v35 & 1) != 0)
  {

  }
  if (!a21)

  if ((*(_DWORD *)(v39 - 136) & 1) != 0)
  {

  }
  if (!a26)

  if ((*(_DWORD *)(v39 - 128) & 1) != 0)
  {

  }
  if (!*(_QWORD *)(v39 - 184))

  if ((*(_DWORD *)(v39 - 120) & 1) != 0)
  {

  }
  if (!*(_QWORD *)(v39 - 176))

  if ((*(_DWORD *)(v39 - 108) & 1) != 0)
  {

  }
  if (!*(_QWORD *)(v39 - 160))

  _Unwind_Resume(a1);
}

void sub_1842A28C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A2968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A2A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842A2CB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A2FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A3230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A3328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842A33D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A3438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A34B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842A35AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A3680(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A3790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A3818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842A38B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A38FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A39C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A3A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A3B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A3DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, int a13, char a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if ((a14 & 1) != 0)
  {

  }
  if (!v18)

  _Unwind_Resume(a1);
}

void sub_1842A3F0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A3F78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A4004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842A415C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A4280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A4444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A45C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1842A46AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A4718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A47C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842A492C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842A4A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A4BB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A4CBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842A4D7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A4DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A4E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842A4F48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842A5010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842A5428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842A55C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842A5740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842A58D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842A59A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842A5A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842A5BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842A5CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

__CFString *_CTErrorString(unsigned int a1)
{
  __CFString **v1;

  v1 = &kCTErrorStrings[a1];
  if (a1 >= 0x43)
    v1 = (__CFString **)&kCTReturnUnknownError;
  return *v1;
}

void sub_1842A6768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842A683C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842A69BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842A6B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  _Unwind_Resume(a1);
}

void sub_1842A6C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842A6DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842A6EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842A7048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842A71C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1842A7328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842A7424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842A7568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842A7660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842A77F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842A7974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1842A7AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842A7BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842A7D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842A7E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842A7FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842A8124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1842A8288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842A8384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842A84C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842A8658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t MMSContentType::nameForEncodedContentType(_anonymous_namespace_ *a1, std::string *a2)
{
  uint64_t v2;
  char v5;
  uint64_t **ContentTypes;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t **v11;
  unsigned int v12;
  BOOL v13;
  uint64_t **v14;
  const char *v15;
  size_t v16;

  if ((a1 & 0x80) == 0)
    return 0;
  v5 = (char)a1;
  v9 = ContentTypes[1];
  v7 = ContentTypes + 1;
  v8 = v9;
  if (!v9)
    return 0;
  v10 = v5 & 0x7F;
  v11 = v7;
  do
  {
    v12 = *((_DWORD *)v8 + 8);
    v13 = v12 >= v10;
    if (v12 >= v10)
      v14 = (uint64_t **)v8;
    else
      v14 = (uint64_t **)(v8 + 1);
    if (v13)
      v11 = (uint64_t **)v8;
    v8 = *v14;
  }
  while (*v14);
  if (v11 == v7 || *((_DWORD *)v11 + 8) > v10)
    return 0;
  std::string::__assign_external(a2, (const std::string::value_type *)v11[5]);
  v2 = 1;
  std::string::append(a2, "/", 1uLL);
  v15 = (const char *)v11[6];
  v16 = strlen(v15);
  std::string::append(a2, v15, v16);
  return v2;
}

uint64_t **`anonymous namespace'::getContentTypes(_anonymous_namespace_ *this)
{
  uint64_t **result;
  uint64_t **v2;
  unsigned int v3[462];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t **)operator new();
  memcpy(v3, &unk_1E152F0B0, sizeof(v3));
  return result;
}

uint64_t MMSContentType::encodedContentTypeForName(MMSContentType *this, const char *a2)
{
  uint64_t v3;
  uint64_t **ContentTypes;
  uint64_t **v5;
  uint64_t *v6;
  size_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::string __p;
  int v18;
  std::string v19;

  if (!this)
    return 0;
  {
    v3 = MMSContentType::encodedContentTypeForName(char const*)::sNameToEncodingMap;
  }
  else
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_DWORD *)(v3 + 32) = 1065353216;
    MMSContentType::encodedContentTypeForName(char const*)::sNameToEncodingMap = v3;
  }
  if (!*(_QWORD *)(v3 + 24))
  {
    v5 = ContentTypes + 1;
    v6 = *ContentTypes;
    if (*ContentTypes != (uint64_t *)(ContentTypes + 1))
    {
      do
      {
        memset(&v19, 0, sizeof(v19));
        std::string::basic_string[abi:nn180100]<0>(&v19, (char *)v6[5]);
        std::string::push_back(&v19, 47);
        v7 = strlen((const char *)v6[6]);
        std::string::append(&v19, (const std::string::value_type *)v6[6], v7);
        v8 = MMSContentType::encodedContentTypeForName(char const*)::sNameToEncodingMap;
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
        else
          __p = v19;
        v18 = *((_DWORD *)v6 + 8);
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int>>(v8, (uint64_t)&__p, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
        v9 = (uint64_t *)v6[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (uint64_t *)v6[2];
            v11 = *v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v11);
        }
        v6 = v10;
      }
      while (v10 != (uint64_t *)v5);
    }
  }
  v12 = (_QWORD *)MMSContentType::encodedContentTypeForName(char const*)::sNameToEncodingMap;
  std::string::basic_string[abi:nn180100]<0>(&__p, (char *)this);
  v13 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v12, (uint64_t)&__p);
  v14 = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v14)
      return (v14[40] | 0x80);
    return 0;
  }
  if (!v13)
    return 0;
  return (v14[40] | 0x80);
}

void MMSContentType::contentTypeForName(MMSContentType *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  const std::string::value_type *v7;
  std::string *p_s1;
  const char *v9;
  std::string *v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  char *v17;
  MMSGeneralContentType *v18;
  char *v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  char *__s1;
  uint64_t v24;
  uint64_t v25;
  std::string v26;

  if (this)
    v4 = (char *)this;
  else
    v4 = "";
  v5 = strchr(v4, 59);
  memset(&v26, 0, sizeof(v26));
  __s1 = 0;
  v24 = 0;
  v25 = 0;
  if (v5)
  {
    v6 = v5;
    std::string::__assign_external(&v26, v4, ((_BYTE)v5 - (_BYTE)v4));
    v7 = v6 + 1;
    p_s1 = (std::string *)&__s1;
  }
  else
  {
    p_s1 = &v26;
    v7 = v4;
  }
  std::string::__assign_external(p_s1, v7);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v26;
  else
    v10 = (std::string *)v26.__r_.__value_.__r.__words[0];
  v11 = MMSContentType::encodedContentTypeForName((MMSContentType *)v10, v9);
  if (v11)
  {
    v12 = v11;
    v13 = operator new();
    MMSEncodedContentType::MMSEncodedContentType((MMSEncodedContentType *)v13, v12 & 0x7F);
LABEL_12:
    *a2 = v14;
    goto LABEL_13;
  }
  v16 = strchr(v4, 47);
  if (!v16)
  {
    v13 = operator new();
    MMSGeneralContentType::MMSGeneralContentType((MMSGeneralContentType *)v13, "*", "*");
    goto LABEL_12;
  }
  v17 = v16;
  __p[0] = 0;
  __p[1] = 0;
  v22 = 0;
  std::string::basic_string[abi:nn180100](__p, v4, ((_BYTE)v16 - (_BYTE)v4));
  v18 = (MMSGeneralContentType *)operator new();
  v13 = (uint64_t)v18;
  if (v22 >= 0)
    v19 = (char *)__p;
  else
    v19 = (char *)__p[0];
  MMSGeneralContentType::MMSGeneralContentType(v18, v19, v17 + 1);
  *a2 = v20;
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
LABEL_13:
  if (SHIBYTE(v25) < 0)
  {
    if (!v24)
      goto LABEL_25;
    v15 = __s1;
  }
  else
  {
    if (!HIBYTE(v25))
      goto LABEL_25;
    v15 = (const char *)&__s1;
  }
  MMSParameterContainer::parseParameters((MMSParameterContainer *)(v13 + 8), v15);
LABEL_25:
  if (SHIBYTE(v25) < 0)
    operator delete(__s1);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

uint64_t MMSContentType::multipartMixedContentType(MMSContentType *this)
{
  _QWORD *v1;

  {
    v1 = (_QWORD *)MMSContentType::multipartMixedContentType(void)::multipartMixedContentType;
  }
  else
  {
    v1 = (_QWORD *)operator new();
    MMSContentType::contentTypeForName((MMSContentType *)"application/vnd.wap.multipart.mixed", v1);
    MMSContentType::multipartMixedContentType(void)::multipartMixedContentType = (uint64_t)v1;
  }
  return *v1;
}

uint64_t MMSContentType::multipartRelatedContentType(MMSContentType *this)
{
  _QWORD *v1;

  {
    v1 = (_QWORD *)MMSContentType::multipartRelatedContentType(void)::multipartRelatedContentType;
  }
  else
  {
    v1 = (_QWORD *)operator new();
    MMSContentType::contentTypeForName((MMSContentType *)"application/vnd.wap.multipart.related", v1);
    MMSContentType::multipartRelatedContentType(void)::multipartRelatedContentType = (uint64_t)v1;
  }
  return *v1;
}

uint64_t MMSContentType::toString(uint64_t a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[4];
  void *__p[2];
  __int128 v15;
  __int128 v16;
  _BYTE v17[144];
  uint64_t v18;

  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v13, 0, sizeof(v13));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v13);
  v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v5 = strlen(v4);
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"/", 1);
  v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v9 = strlen(v8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v13 + 8, &v11);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v11;
  *(_QWORD *)(a2 + 16) = v12;
  MMSParameterContainer::toString((MMSHeaderContainer *)(a1 + 8), (std::string *)a2);
  *(_QWORD *)&v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(*(_QWORD *)&v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v13[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186DBA418](v17);
  return 1;
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = v4;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

BOOL MMSContentType::compare(MMSContentType *this, const char *a2, const char *a3)
{
  const char *v6;
  const char *v8;

  v6 = (const char *)(*(uint64_t (**)(MMSContentType *))(*(_QWORD *)this + 16))(this);
  if (strcasecmp(v6, a2))
    return 0;
  v8 = (const char *)(*(uint64_t (**)(MMSContentType *))(*(_QWORD *)this + 24))(this);
  return strcasecmp(v8, a3) == 0;
}

BOOL MMSContentType::isMultipart(MMSContentType *this)
{
  return MMSContentType::compare(this, "application", "vnd.wap.multipart.mixed")
      || MMSContentType::compare(this, "application", "vnd.wap.multipart.related")
      || MMSContentType::compare(this, "application", "vnd.wap.multipart.alternative");
}

BOOL MMSContentType::isMultipartAlternative(MMSContentType *this)
{
  return MMSContentType::compare(this, "application", "vnd.wap.multipart.alternative");
}

void MMSEncodedContentType::MMSEncodedContentType(MMSEncodedContentType *this, unsigned int a2)
{
  _anonymous_namespace_ *v4;
  uint64_t **ContentTypes;
  _anonymous_namespace_ *v6;
  uint64_t *v7;
  uint64_t *v8;
  _anonymous_namespace_ *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t **v12;
  unsigned int v13;

  *(_QWORD *)this = off_1E152C5E0;
  MMSParameterContainer::MMSParameterContainer((MMSEncodedContentType *)((char *)this + 8));
  *(_QWORD *)this = &off_1E152CDC0;
  v8 = ContentTypes[1];
  v6 = (_anonymous_namespace_ *)(ContentTypes + 1);
  v7 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = v6;
  do
  {
    v10 = *((_DWORD *)v7 + 8);
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = (uint64_t **)v7;
    else
      v12 = (uint64_t **)(v7 + 1);
    if (v11)
      v9 = (_anonymous_namespace_ *)v7;
    v7 = *v12;
  }
  while (*v12);
  if (v9 == v6 || *((_DWORD *)v9 + 8) > a2)
LABEL_12:
    v9 = v6;
    v13 = 0;
  else
    v13 = a2;
  *((_DWORD *)this + 20) = v13;
}

uint64_t *MMSEncodedContentType::type(MMSEncodedContentType *this)
{
  uint64_t **ContentTypes;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t **v7;
  unsigned int v8;
  BOOL v9;
  uint64_t **v10;

  v5 = ContentTypes[1];
  v3 = ContentTypes + 1;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *((_DWORD *)this + 20);
  v7 = v3;
  do
  {
    v8 = *((_DWORD *)v4 + 8);
    v9 = v8 >= v6;
    if (v8 >= v6)
      v10 = (uint64_t **)v4;
    else
      v10 = (uint64_t **)(v4 + 1);
    if (v9)
      v7 = (uint64_t **)v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 != v3 && v6 >= *((_DWORD *)v7 + 8))
    return v7[5];
  else
    return 0;
}

uint64_t *MMSEncodedContentType::subtype(MMSEncodedContentType *this)
{
  uint64_t **ContentTypes;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t **v7;
  unsigned int v8;
  BOOL v9;
  uint64_t **v10;

  v5 = ContentTypes[1];
  v3 = ContentTypes + 1;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *((_DWORD *)this + 20);
  v7 = v3;
  do
  {
    v8 = *((_DWORD *)v4 + 8);
    v9 = v8 >= v6;
    if (v8 >= v6)
      v10 = (uint64_t **)v4;
    else
      v10 = (uint64_t **)(v4 + 1);
    if (v9)
      v7 = (uint64_t **)v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 != v3 && v6 >= *((_DWORD *)v7 + 8))
    return v7[6];
  else
    return 0;
}

uint64_t MMSEncodedContentType::encode(MMSEncodedContentType *this, MMSPduEncoder *a2)
{
  MMSParameterContainer *v4;
  unsigned int v5;
  void *__p[2];
  __int128 v8;
  uint64_t v9;

  v4 = (MMSEncodedContentType *)((char *)this + 8);
  if (MMSHeaderContainer::headerCount((MMSEncodedContentType *)((char *)this + 8)))
  {
    v9 = 0;
    *(_OWORD *)__p = 0u;
    v8 = 0u;
    MMSPduEncoder::MMSPduEncoder((uint64_t)__p, *(_DWORD *)a2);
    MMSPduEncoder::encodeWspWellKnownMedia((MMSPduEncoder *)__p, *((_DWORD *)this + 20));
    MMSParameterContainer::encode(v4, (MMSPduEncoder *)__p);
    if (v8 >= 0)
      v5 = HIBYTE(v8);
    else
      v5 = v8;
    MMSPduEncoder::encodeWspValueLength(a2, v5);
    MMSPduEncoder::append(a2, (MMSPduEncoder *)__p);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[1]);
  }
  else
  {
    MMSPduEncoder::encodeWspShortInteger(a2, *((_BYTE *)this + 80));
  }
  return 1;
}

void MMSEncodedContentType::copy(MMSEncodedContentType *this)
{
  MMSEncodedContentType *v2;

  v2 = (MMSEncodedContentType *)operator new();
  MMSEncodedContentType::MMSEncodedContentType(v2, *((_DWORD *)this + 20));
}

MMSGeneralContentType *MMSGeneralContentType::fromString(MMSGeneralContentType *this, const char *a2)
{
  char *v3;
  char *v4;
  MMSGeneralContentType *v5;
  MMSGeneralContentType *v6;
  char *v7;
  void *__p[2];
  uint64_t v10;

  v3 = strchr((char *)this, 47);
  if (!v3)
    return 0;
  v4 = v3;
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  std::string::basic_string[abi:nn180100](__p, this, ((_BYTE)v3 - (_BYTE)this));
  v5 = (MMSGeneralContentType *)operator new();
  v6 = v5;
  if (v10 >= 0)
    v7 = (char *)__p;
  else
    v7 = (char *)__p[0];
  MMSGeneralContentType::MMSGeneralContentType(v5, v7, v4 + 1);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  return v6;
}

void MMSGeneralContentType::MMSGeneralContentType(MMSGeneralContentType *this, char *a2, char *a3)
{
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;

  *(_QWORD *)this = off_1E152C5E0;
  MMSParameterContainer::MMSParameterContainer((MMSGeneralContentType *)((char *)this + 8));
  *(_QWORD *)this = off_1E152CE00;
  v6 = (char *)this + 80;
  if (a2)
    v7 = a2;
  else
    v7 = "";
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 10, v7);
  v8 = (char *)this + 104;
  if (a3)
    v9 = a3;
  else
    v9 = "";
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 13, v9);
  if (*((char *)this + 103) < 0)
  {
    v6 = (_BYTE *)*((_QWORD *)this + 10);
    v10 = *((_QWORD *)this + 11);
  }
  else
  {
    v10 = *((unsigned __int8 *)this + 103);
  }
  v11 = &v6[v10];
  while (v6 != v11)
  {
    *v6 = __tolower((char)*v6);
    ++v6;
  }
  if (*((char *)this + 127) < 0)
  {
    v8 = (_BYTE *)*((_QWORD *)this + 13);
    v12 = *((_QWORD *)this + 14);
  }
  else
  {
    v12 = *((unsigned __int8 *)this + 127);
  }
  v13 = &v8[v12];
  while (v8 != v13)
  {
    *v8 = __tolower((char)*v8);
    ++v8;
  }
}

uint64_t MMSGeneralContentType::type(MMSGeneralContentType *this)
{
  uint64_t result;

  result = (uint64_t)this + 80;
  if (*((char *)this + 103) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t MMSGeneralContentType::subtype(MMSGeneralContentType *this)
{
  uint64_t result;

  result = (uint64_t)this + 104;
  if (*((char *)this + 127) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t MMSGeneralContentType::encode(MMSGeneralContentType *this, MMSPduEncoder *a2)
{
  MMSParameterContainer *v4;
  size_t v5;
  std::string *v6;
  char *v7;
  const std::string::value_type *v8;
  char *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  void **v16;
  unsigned int v17;
  const char *v18;
  std::string v20;
  void *__p[2];
  uint64_t v22;
  void *v23[2];
  __int128 v24;
  uint64_t v25;
  void *v26[2];
  uint64_t v27;

  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  MMSContentType::toString((uint64_t)this, (uint64_t)v26);
  v4 = (MMSGeneralContentType *)((char *)this + 8);
  if (MMSHeaderContainer::headerCount((MMSGeneralContentType *)((char *)this + 8)))
  {
    v25 = 0;
    *(_OWORD *)v23 = 0u;
    v24 = 0u;
    MMSPduEncoder::MMSPduEncoder((uint64_t)v23, *(_DWORD *)a2);
    if (*((char *)this + 103) >= 0)
      v5 = *((unsigned __int8 *)this + 103);
    else
      v5 = *((_QWORD *)this + 11);
    memset(&v20, 0, sizeof(v20));
    v6 = &v20;
    std::string::basic_string[abi:nn180100]((uint64_t)&v20, v5 + 1);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if (v5)
    {
      if (*((char *)this + 103) >= 0)
        v7 = (char *)this + 80;
      else
        v7 = (char *)*((_QWORD *)this + 10);
      memmove(v6, v7, v5);
    }
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
    v10 = (const std::string::value_type *)*((_QWORD *)this + 13);
    v9 = (char *)this + 104;
    v8 = v10;
    v11 = v9[23];
    if (v11 >= 0)
      v12 = v9;
    else
      v12 = v8;
    if (v11 >= 0)
      v13 = v9[23];
    else
      v13 = *((_QWORD *)v9 + 1);
    v14 = std::string::append(&v20, v12, v13);
    v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v22 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (v22 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    MMSPduEncoder::encodeHttpToken((MMSPduEncoder *)v23, (const char *)v16);
    MMSParameterContainer::encode(v4, (MMSPduEncoder *)v23);
    if (v24 >= 0)
      v17 = HIBYTE(v24);
    else
      v17 = v24;
    MMSPduEncoder::encodeWspValueLength(a2, v17);
    MMSPduEncoder::append(a2, (MMSPduEncoder *)v23);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v24) < 0)
      operator delete(v23[1]);
  }
  else
  {
    if (v27 >= 0)
      v18 = (const char *)v26;
    else
      v18 = (const char *)v26[0];
    MMSPduEncoder::encodeHttpToken(a2, v18);
  }
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  return 1;
}

void MMSGeneralContentType::copy(MMSGeneralContentType *this)
{
  MMSGeneralContentType *v2;
  char *v3;
  char *v4;

  v2 = (MMSGeneralContentType *)operator new();
  v3 = (char *)this + 80;
  if (*((char *)this + 103) < 0)
    v3 = *(char **)v3;
  v4 = (char *)this + 104;
  if (*((char *)this + 127) < 0)
    v4 = *(char **)v4;
  MMSGeneralContentType::MMSGeneralContentType(v2, v3, v4);
}

void MMSEncodedContentType::~MMSEncodedContentType(MMSEncodedContentType *this)
{
  *(_QWORD *)this = off_1E152C5E0;
  MMSParameterContainer::~MMSParameterContainer((MMSEncodedContentType *)((char *)this + 8));
}

{
  *(_QWORD *)this = off_1E152C5E0;
  MMSParameterContainer::~MMSParameterContainer((MMSEncodedContentType *)((char *)this + 8));
  JUMPOUT(0x186DBA454);
}

void MMSGeneralContentType::~MMSGeneralContentType(void **this)
{
  *this = off_1E152CE00;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  *this = off_1E152C5E0;
  MMSParameterContainer::~MMSParameterContainer((MMSParameterContainer *)(this + 1));
}

{
  *this = off_1E152CE00;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  *this = off_1E152C5E0;
  MMSParameterContainer::~MMSParameterContainer((MMSParameterContainer *)(this + 1));
  JUMPOUT(0x186DBA454);
}

uint64_t **std::map<unsigned int,`anonymous namespace'::ContentType>::map[abi:nn180100](uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v4;
  unsigned int *v5;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    v5 = a2;
    v6 = (int *)&a2[6 * a3];
    do
    {
      v7 = a1[1];
      v8 = v4;
      if (*a1 == v4)
        goto LABEL_9;
      v9 = a1[1];
      v10 = v4;
      if (v7)
      {
        do
        {
          v8 = v9;
          v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = *v5;
      if (*((_DWORD *)v8 + 8) < *v5)
      {
LABEL_9:
        if (v7)
          v13 = (uint64_t **)v8;
        else
          v13 = (uint64_t **)v4;
        if (v7)
          v14 = (uint64_t **)(v8 + 1);
        else
          v14 = (uint64_t **)v4;
        if (*v14)
          goto LABEL_28;
      }
      else
      {
        v14 = (uint64_t **)v4;
        v13 = (uint64_t **)v4;
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v7;
              v15 = *((_DWORD *)v7 + 8);
              if (v12 >= v15)
                break;
              v7 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_24;
            }
            if (v15 >= v12)
              goto LABEL_28;
            v7 = v13[1];
            if (!v7)
            {
              v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      v16 = operator new(0x38uLL);
      v17 = *((_QWORD *)v5 + 2);
      v16[2] = *(_OWORD *)v5;
      *((_QWORD *)v16 + 6) = v17;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v13;
      *v14 = (uint64_t *)v16;
      v18 = (uint64_t *)**a1;
      if (v18)
      {
        *a1 = v18;
        v19 = *v14;
      }
      else
      {
        v19 = (uint64_t *)v16;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v19);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_28:
      v5 += 6;
    }
    while (v5 != (unsigned int *)v6);
  }
  return a1;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v4 = (unsigned __int8 *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v7 = v6;
  }
  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)v26, (uint64_t *)a2, v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:nn180100](a1 + 32, i + 16, v4) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  memset(v26, 0, sizeof(v26));
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__construct_node_hash<std::pair<std::string const,unsigned int>>(a1, v9, a3, v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__construct_node_hash<std::pair<std::string const,unsigned int>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 16;
  a4[2] = 0;
  v8 = (char *)operator new(0x30uLL);
  *a4 = v8;
  a4[1] = v7;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *((_BYTE *)a4 + 16) = 1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  char v17;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v17, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(unsigned __int8 ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = (uint64_t)(a1 + 4);
    do
    {
      v15 = *((_QWORD *)v13 + 1);
      if (v15 == v8)
      {
        if ((std::equal_to<std::string>::operator()[abi:nn180100](v14, v13 + 16, v2) & 1) != 0)
          return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v7)
            v15 %= *(_QWORD *)&v7;
        }
        else
        {
          v15 &= *(_QWORD *)&v7 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = *(unsigned __int8 **)v13;
    }
    while (v13);
  }
  return v13;
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0;
  v13[1] = 0;
  MEMORY[0x186DBA364](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x186DBA370](v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      v18 = 0;
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t std::stringbuf::str[abi:nn180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:nn180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:nn180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void sub_1842AA544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1842AA74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1842AA97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1842AABE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1842AAE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1842AB0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1842AB308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1842AB558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1842AB788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1842AB9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1842ABBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1842ABE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1842ABFD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842AC07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1842AC1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1842AC3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842AC614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1842AC80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842AC97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842ACB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1842ACCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842ACDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1842ACF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842AD17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1842AD394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1842AD5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1842AD774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1842AD964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842ADB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842ADD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842ADFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1842AE1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1842AE334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842AE4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842AE860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842AEA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842AEB50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B34D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  uint64_t v25;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v25 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1842B3684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, id);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__2(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1842B3794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842B3908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

const char *radioStateAsString(unsigned int a1)
{
  if (a1 > 6)
    return "Unknown";
  else
    return off_1E152F920[a1];
}

const char *cellularDiagnosticsStateAsString(int a1)
{
  const char *result;

  switch(a1)
  {
    case -2:
      result = "Not supported";
      break;
    case -1:
      result = "Not available";
      break;
    case 0:
      result = "No issue";
      break;
    case 1:
      result = "Baseband dead";
      break;
    case 2:
      result = "eUICC FW failed";
      break;
    case 3:
      result = "Baseband RFFE failed";
      break;
    default:
      if (a1 == 255)
        result = "Other issue";
      else
        result = "Internal error";
      break;
  }
  return result;
}

void sub_1842B4124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1842B41BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B42B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B4340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      abort();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

const char *CTDeviceTypeAsString(uint64_t a1)
{
  const char *v1;

  v1 = "CTDeviceTypeUnknown";
  if (a1 == 1)
    v1 = "CTDeviceTypePairedWatch";
  if (a1 == 2)
    return "CTDeviceTypeThisDevice";
  else
    return v1;
}

const char *CTPlanTransferEndpointAsString(uint64_t a1)
{
  const char *v1;

  v1 = "CTPlanTransferEndpointUnknown";
  if (a1 == 1)
    v1 = "CTPlanTransferEndpointSource";
  if (a1 == 2)
    return "CTPlanTransferEndpointTarget";
  else
    return v1;
}

const char *CTPlanTransferCapabilityAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xD)
    return "CTPlanTransferCapabilityUnknown";
  else
    return off_1E152F958[a1 - 1];
}

const char *CTPlanTransferStatusAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return "CTPlanTransferStatusUnknown";
  else
    return off_1E152F9C8[a1 - 1];
}

const char *CTPlanStatusAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xA)
    return "CTPlanStatusUnknown";
  else
    return off_1E152F9E0[a1 - 1];
}

const char *CTPlanPurchaseTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return "CTPlanPurchaseTypeUnknown";
  else
    return off_1E152FA38[a1 - 1];
}

const char *CTPlanDataMeasureUnitAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return "CTPlanDataMeasureUnitUnknown";
  else
    return off_1E152FA50[a1 - 1];
}

const char *CTPlanTypeAsString(uint64_t a1)
{
  const char *v1;

  v1 = "CTPlanTypeUnknown";
  if (a1 == 2)
    v1 = "CTPlanTypePrepaid";
  if (a1 == 1)
    return "CTPlanTypePostpaid";
  else
    return v1;
}

id CTPlanAttributeSetAsString(uint64_t a1)
{
  void *v2;
  unsigned int i;
  uint64_t v4;
  id v5;
  const char *v6;
  void *v7;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; i != 3; ++i)
    {
      v4 = (1 << i);
      if ((v4 & a1) != 0)
      {
        v5 = objc_alloc(MEMORY[0x1E0CB3940]);
        v6 = "CTPlanAttributeNone";
        if (i <= 2)
          v6 = off_1E152FA70[v4 - 1];
        v7 = (void *)objc_msgSend(v5, "initWithFormat:", CFSTR("[%s]"), v6);
        objc_msgSend(v2, "appendString:", v7);

      }
    }
  }
  else
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", "CTPlanAttributeNone");
  }
  return v2;
}

const char *CTPlanAddOnPurchaseTypeAsString(uint64_t a1)
{
  const char *v1;

  v1 = "CTPlanAddOnPurchaseTypeUnknown";
  if (a1 == 1)
    v1 = "CTPlanAddOnPurchaseTypeNotAllowed";
  if (a1 == 2)
    return "CTPlanAddOnPurchaseTypeWebsheet";
  else
    return v1;
}

const char *CTPlanAddOnCarrierFlowTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return "CTPlanAddOnCarrierFlowTypeUnknown";
  else
    return off_1E152FA90[a1 - 1];
}

const char *CTPlanSetupResultTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return "CTPlanSetupResultTypeUnknown";
  else
    return off_1E152FAA8[a1 - 1];
}

const char *CTPlanSetupTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return "CTPlanSetupTypeUnknown";
  else
    return off_1E152FAC0[a1 - 1];
}

const char *CTCellularPlanDeviceIdentifierAsString(uint64_t a1)
{
  const char *v1;

  v1 = "EID";
  if (a1 == 2)
    v1 = "IMEI";
  if (a1 == 3)
    return "All";
  else
    return v1;
}

const char *CTPlanPurchaseOptionAsString(uint64_t a1)
{
  const char *v1;

  v1 = "CTPlanPurchaseOptionDefault";
  if (a1 == 1)
    v1 = "CTPlanAllowPurchaseOverBootstrap";
  if (a1 == 2)
    return "CTPlanDisallowPurchaseOverBootstrap";
  else
    return v1;
}

void sub_1842B4A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842B4A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842B4B68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1842B4C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1842B4D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842B4E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B4EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B4F50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B4FF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B5088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842B50F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842B5224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1842B5340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842B53E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842B54EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B5568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTCellularPlanProvisioningRequest>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842B5640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B56C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<NSString>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842B5798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B5828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<NSNumber>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842B5910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B5A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842B5AA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B5B40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B5C0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842B5CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842B5D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842B5DFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B5E64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTCellularPlanProvisioningOnDeviceActivationRequest>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842B5F3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B6034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842B60D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B616C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B6204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B62D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842B6370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842B6408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B6498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B6540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B65E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B666C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B66F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842B6798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1842B687C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842B6920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B69C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B6A4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B6B6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1842B6C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842B6D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842B6E34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B6EB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B6F24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B6FA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842B709C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842B713C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B71D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B725C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842B72EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842B740C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B74B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B7540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B7628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842B771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842B7840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B78BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTPlan>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842B7994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B7A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTDeviceIdentifier>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842B7AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B7BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842B7CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842B7E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B7E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTPlanList>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842B7F60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B7FE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B8110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1842B822C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842B8368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B83E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B8458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B84D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842B85C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842B8690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842B8740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B87A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B88B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842B89B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842B8AD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B8B4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B8BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842B8CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842B8DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842B8E80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B8EE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B8F5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B8FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842B90E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842B91B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842B9250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842B92E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B9350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B9460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B9508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B9594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B967C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842B9770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842B97FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842B98EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B9968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B99DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B9AC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842B9B64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B9BFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B9CC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842B9D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842B9E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842B9EA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842B9F08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842B9FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842BA0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842BA130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842BA1B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BA220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BA2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842BA344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842BA464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BA50C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BA598(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BA664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842BA734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842BA7E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BA84C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BA924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842BA9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842BAAA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BAB0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BABA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842BAC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842BAD50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BADF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BAE84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BAF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842BAFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842BB088(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842BB12C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BB220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BB300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842BB3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842BB480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BB4E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSimSetupUsage>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842BB5C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BB664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842BB6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842BB818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BB8C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BB94C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BBA18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842BBAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842BBBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1842BBC5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BBCC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BBDC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1842BBE9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842BBF40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BBFE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BC080(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BC120(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BC240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BC320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842BC3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842BC4A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BC508(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BC684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1842BC7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1842BC838()
{
  JUMPOUT(0x1842BC828);
}

void sub_1842BC8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842BC954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BC9BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BCA30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BCACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BCB6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BCBE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BCCF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BCD9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BCE28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BCEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842BCF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842BCFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842BD060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842BD150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842BD220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842BD2D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BD338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTPlanSetupDetails>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842BD410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BD4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842BD548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842BD668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BD710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BD79C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BD824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842BD894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842BD988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842BDA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842BDB38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BDBA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BDC14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BDD08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842BDDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842BDE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842BDF94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BE010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BE084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BE16C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842BE208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842BE2A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BE364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842BE454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842BE4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842BE584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BE614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BE6B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BE84C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1842BE9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1842BEA30()
{
  JUMPOUT(0x1842BEA18);
}

void sub_1842BEA38()
{
  JUMPOUT(0x1842BEA1CLL);
}

void sub_1842BEA40()
{
  JUMPOUT(0x1842BEA20);
}

void sub_1842BEAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842BEBA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BEC4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BECEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BED8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BEE2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BEECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BEF6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BF00C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BF0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842BF124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842BF218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842BF2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842BF380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842BF414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BF488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842BF580(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842BF65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842BF708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BF77C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842BF89C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BF970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842BFA20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BFAB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BFB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842BFBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842BFCFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842BFDA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BFE30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842BFEFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842BFFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842C0070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842C0108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C0170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C0248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842C02EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C0378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C043C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842C052C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842C05C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842C06C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C0740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTRemotePlanIdentifier>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C0818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C08C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C09A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842C0A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842C0B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1842C0BC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C0C2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C0D20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C0E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842C0EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842C0FAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C1028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C109C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C1174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842C1244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842C12D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842C1368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C13D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C1464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842C14F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842C1618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C16C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C174C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C1840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C1940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842C1A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1842C1A9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C1B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C1BF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842C1CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842C1D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1842C1E1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C1E84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C1F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842C2048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842C20F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C2168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C2288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C2388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842C2434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C24A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C2538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C2650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C2750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842C2868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C28F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C2974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C2A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842C2AF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842C2BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842C2C78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C2CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTCellularPlanTransferCrossPlatformRequest>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C2DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C2E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842C2F7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C307C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842C3120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842C3220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C32A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C332C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C343C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C34E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C3570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C363C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842C370C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842C37B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842C38AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C3928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<NSArray<CTCellularPlanCrossPlatformLabel *>>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C3A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C3B20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C3BC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C3C54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C3D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C3E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842C3ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842C3F60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C3FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C403C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C4130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C4224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842C42C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842C4354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C43BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C4430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C4540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C4614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842C4694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842C471C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C47AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C4878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842C4930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842C4A10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842C4A8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliSystemConfiguration>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C4B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C4BFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C4CF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C4D94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C4ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842C4F9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C509C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C511C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageID>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C51F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C52EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842C53B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842C5438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C550C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842C5588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageEnvelope>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C5660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C56F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C57BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842C5874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842C5954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842C59D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageIDList>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C5AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C5B40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C5C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1842C5CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageRevokeData>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C5DA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C5E2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C5F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v18;

  _Unwind_Resume(a1);
}

void sub_1842C6060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C6154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C61D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C62BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842C63D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C64C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C6544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliDestination>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C661C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C6714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842C6828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C6940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1842C69C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C6A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliOperationID>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C6B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C6C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v18;

  _Unwind_Resume(a1);
}

void sub_1842C6D54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C6E8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842C6F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C6F88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliFetchRemoteCapabilitiesOptions>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C7060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C70E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C7204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1842C7350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C7444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842C74C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C75AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842C7670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842C7758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C7838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842C78B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliCapabilitiesInformation>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C798C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C7A24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C7B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842C7C8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842C7D14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C7D88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageComposingIndicator>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C7E60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C7F0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C7FAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C8174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1842C82F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C8460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1842C860C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v6;

  _Unwind_Resume(a1);
}

void sub_1842C86B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C874C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C87C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C8848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C88CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C8A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id *v8;

  _Unwind_Resume(a1);
}

void sub_1842C8ACC()
{
  JUMPOUT(0x1842C8AB8);
}

void sub_1842C8AD4()
{
  JUMPOUT(0x1842C8ABCLL);
}

void sub_1842C8C00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C8D38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842C8E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842C8F04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C8F78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageText>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C9050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C90FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C919C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C9374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1842C93E8()
{
  JUMPOUT(0x1842C93D8);
}

void sub_1842C9514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C9654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842C9798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842C9820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C9894(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliMessageGeoLocationPush>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842C996C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C9A18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C9AB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842C9C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1842C9D04()
{
  JUMPOUT(0x1842C9CF4);
}

void sub_1842C9E30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842C9F70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842CA0B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842CA13C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CA1B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliFileTransferDescriptor>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CA288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CA334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842CA3D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842CA5AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1842CA620()
{
  JUMPOUT(0x1842CA610);
}

void sub_1842CA74C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CA848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842CA964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1842CA9E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CAA84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842CABE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id *v6;

  _Unwind_Resume(a1);
}

void sub_1842CAD2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CAE20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842CAEA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CAF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842CB04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842CB134(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CB214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842CB290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliChatBotRenderInformationData>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CB368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CB400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842CB4E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842CB560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliDeepLinkBase64String>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CB638(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CB730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842CB7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842CB8D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CB9B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842CBA34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliDeepLinkBase64StringDecoded>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CBB0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CBBA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842CBCC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842CBD50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CBDC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliChatBotSpamReportInformation>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CBE9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CBF20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CC040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1842CC190(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CC2C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842CC350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CC3C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CC438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliChatBotResponseForSuggestedReply>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CC510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CC640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1842CC790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CC8C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842CC950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CC9C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CCA38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliChatBotResponseForSuggestedAction>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CCB10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CCC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1842CCD90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CCEC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842CCF50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CCFC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CD038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliSuggestedActionDevice>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CD110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CD240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1842CD390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CD4C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842CD550(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CD5C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CD638(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliSuggestedActionSettings>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CD710(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CD840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1842CD990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CDAA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1842CDB2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliGroupChatInformation>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CDC04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CDC88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CDD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1842CDEB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CDFF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842CE078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliGroupChatUri>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CE150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CE1D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliGroupChatParticipantList>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CE2AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CE330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CE450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1842CE5A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CE6D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842CE760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CE7D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CE848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CE968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1842CEAB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CEBF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842CEC78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CECEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTLazuliGroupChatSubject>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1842CEDC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CEE48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CEF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1842CF0B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CF1F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842CF278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CF314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842CF38C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CF4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1842CF5FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CF714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1842CF798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CF80C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CF90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1842CFA3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CFB30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842CFBB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CFC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842CFDAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842CFEA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842CFF20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D0008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1842D011C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D01EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842D02A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D0384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1842D0400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionGetThumperName(uint64_t a1, const __CFString **a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  uint64_t v9;
  const __CFString *v10;
  xpc_object_t xdict;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kThumperGetCarrierName", &object, "kRequest", &xdict);
    xpc_release(object);
    object = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &xdict);
    v5 = MEMORY[0x186DBAE5C](xdict);
    v6 = MEMORY[0x1E0C812F8];
    if (v5 == MEMORY[0x1E0C812F8])
    {
      *a2 = 0;
      if (MEMORY[0x186DBAE5C](xdict) != v6 || !xpc_dictionary_get_value(xdict, "kThumperCarrierName"))
        goto LABEL_7;
      v10 = 0;
      xpc_dictionary_get_value(xdict, "kThumperCarrierName");
      v9 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v10, (CFTypeRef *)&v9);
      v7 = v10;
    }
    else
    {
      v7 = &stru_1E1536FB8;
    }
    *a2 = v7;
LABEL_7:
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2;
}

void sub_1842D060C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1842D0914(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842D09BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842D0BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842D0D7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1842D0F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842D1118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842D12C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842D14CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v29 = v28;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842D1664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842D1808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v29 = v28;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842D19A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842D1B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842D1CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  void *v25;
  void *v26;
  uint64_t v27;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);

  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1842D1F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842D2064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t _CTCallHistoryStoreGetCountOfMissedCallSince()
{
  return 0;
}

uint64_t _CTCallHistoryStoreGetCountOfMissedCallWithTypesSince()
{
  return 0;
}

double _CTCallHistoryStoreCallTimersGetAll()
{
  return 0.0;
}

const char *CTEnhancedLQMIndicationTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8)
    return "CTEnhancedLQMIndicationTypeUnknown";
  else
    return off_1E152FF68[a1 - 1];
}

void sub_1842D30F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842D3168(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842D31D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842D32D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1842D33DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842D3574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1842D3690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D3844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1842D3A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1842D3AC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D3BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1842D3CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842D3D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D3E14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D3EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D3F34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D4018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D413C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1842D4310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1842D4440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1842D4664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Block_object_dispose((const void *)(v3 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1842D4790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1842D494C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1842D4A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842D4B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1842D4CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D4EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Block_object_dispose((const void *)(v3 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842D5020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D5214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1842D53EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842D54A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D55B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D5758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1842D5878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D58F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842D5974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D5A04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D5A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D5B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D5BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D5C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D5CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D5D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D5DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D5E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D5F08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D5F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D6028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D6134(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1842D6244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D6358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1842D646C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D6598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842D66C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842D67F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1842D6928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842D69C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D6A58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D6AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D6B78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D6C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D6C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842D6D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1842D6E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842D7050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1842D7170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D720C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D729C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D73BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D744C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D74DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D75E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1842D76F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D7794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D7820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842D78B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D7940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842D7AE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1842D7C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842D7D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1842D7ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842D7FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D807C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842D8228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1842D8348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D8460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D84E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842D8550(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D863C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842D86B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842D87C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842D8908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842D8AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842D8BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D8D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842D8E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D8FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842D90FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D9208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1842D927C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842D92D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842D93CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1842D94CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842D95E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1842D96E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842D9804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1842D9904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842D99E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842D9ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842D9B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D9C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842D9CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D9DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842D9E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842D9F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842D9FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842DA078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842DA144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842DA1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842DA2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842DA454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842DA5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842DA754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842DA8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842DAA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1842DAC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1842DAD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842DAE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842DAF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842DB050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  _Unwind_Resume(a1);
}

void sub_1842DB18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842DB320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842DB4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842DB6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t MMSExpiryHeader::MMSExpiryHeader(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 24), "com.apple.telephony", "msg.mms.pdu.hdr.expiry");
  result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(_QWORD *)a1 = &off_1E152C788;
  *(_DWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 36) = 0;
  return result;
}

uint64_t MMSExpiryHeader::parseValue(MMSExpiryHeader *this, const char *a2)
{
  return 0;
}

uint64_t MMSExpiryHeader::decodeValue(MMSExpiryHeader *this, MMSPduDecoder *a2)
{
  int v4;
  uint64_t result;
  int v6;
  NSObject *v7;
  unsigned int v8;

  v8 = 0;
  v4 = MMSPduDecoder::decodeWspValueLength(a2, &v8);
  result = 0;
  if (v4)
  {
    if (*((_DWORD *)a2 + 4) - *((_DWORD *)a2 + 5) < v8)
      return 0;
    MMSPduDecoder::decodeByte(a2, (unsigned __int8 *)this + 36);
    v6 = *((char *)this + 36);
    if (v6 >= -126)
    {
      v7 = *((_QWORD *)this + 3);
      result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        MMSExpiryHeader::decodeValue(v6, (uint64_t)this, v7);
        return 0;
      }
    }
    else
    {
      return MMSPduDecoder::decodeWspLongInteger(a2, (unsigned int *)this + 8);
    }
  }
  return result;
}

uint64_t MMSExpiryHeader::encodeValue(MMSExpiryHeader *this, MMSPduEncoder *a2)
{
  unsigned int v4;
  void *__p[2];
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  MMSPduEncoder::MMSPduEncoder((uint64_t)__p, *(_DWORD *)a2);
  MMSPduEncoder::encodeByte((MMSPduEncoder *)__p, *((_BYTE *)this + 36));
  MMSPduEncoder::encodeWspLongInteger((MMSPduEncoder *)__p, *((_DWORD *)this + 8));
  if (v7 >= 0)
    v4 = HIBYTE(v7);
  else
    v4 = v7;
  MMSPduEncoder::encodeWspValueLength(a2, v4);
  MMSPduEncoder::append(a2, (MMSPduEncoder *)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[1]);
  return 1;
}

uint64_t MMSExpiryHeader::createInstance(MMSExpiryHeader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v2 + 24), "com.apple.telephony", "msg.mms.pdu.hdr.expiry");
  result = MMSBinaryHeader::MMSBinaryHeader(v2, v3);
  *(_QWORD *)v2 = &off_1E152C788;
  *(_DWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 36) = 0;
  return result;
}

uint64_t MMSExpiryHeader::copy(MMSExpiryHeader *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v2 + 24), (MMSExpiryHeader *)((char *)this + 24));
  result = MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *(_QWORD *)v2 = &off_1E152C788;
  *(_DWORD *)(v2 + 32) = *((_DWORD *)this + 8);
  *(_BYTE *)(v2 + 36) = *((_BYTE *)this + 36);
  return result;
}

uint64_t MMSExpiryHeader::valueAsString(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[4];
  void *__p[2];
  __int128 v12;
  __int128 v13;
  _BYTE v14[144];
  uint64_t v15;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v12 = 0u;
  v13 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v10, 0, sizeof(v10));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v10);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)", ", 2);
  if (*(unsigned __int8 *)(a1 + 36) == 128)
    v6 = "Absolute";
  else
    v6 = "Relative";
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, 8);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v10 + 8, &v8);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)&v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(*(_QWORD *)&v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v10[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186DBA418](v14);
  return 1;
}

const char *MMSExpiryHeader::headerTypeName(MMSExpiryHeader *this)
{
  return "date";
}

void MMSExpiryHeader::~MMSExpiryHeader(MMSExpiryHeader *this)
{
  uint64_t v1;

  MMSBinaryHeader::~MMSBinaryHeader(this);
  MEMORY[0x186DBA1B4](v1 + 24);
}

{
  uint64_t v1;

  MMSBinaryHeader::~MMSBinaryHeader(this);
  MEMORY[0x186DBA1B4](v1 + 24);
  JUMPOUT(0x186DBA454);
}

uint64_t MMSIndexedDateHeader::MMSIndexedDateHeader(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result;

  result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(_QWORD *)result = &off_1E152CD48;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a4;
  return result;
}

uint64_t MMSIndexedDateHeader::parseValue(MMSIndexedDateHeader *this, const char *a2)
{
  return 0;
}

uint64_t MMSIndexedDateHeader::decodeValue(MMSIndexedDateHeader *this, MMSPduDecoder *a2)
{
  int v4;
  uint64_t result;
  unsigned int v6;

  v6 = 0;
  v4 = MMSPduDecoder::decodeWspValueLength(a2, &v6);
  result = 0;
  if (v4)
  {
    result = MMSPduDecoder::decodeWspIntegerValue(a2, (unsigned int *)this + 6);
    if ((_DWORD)result)
      return MMSPduDecoder::decodeWspLongInteger(a2, (unsigned int *)this + 5);
  }
  return result;
}

uint64_t MMSIndexedDateHeader::encodeValue(MMSIndexedDateHeader *this, MMSPduEncoder *a2)
{
  unsigned int v4;
  void *__p[2];
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  MMSPduEncoder::MMSPduEncoder((uint64_t)__p, *(_DWORD *)a2);
  MMSPduEncoder::encodeWspIntegerValue((MMSPduEncoder *)__p, *((_DWORD *)this + 6));
  MMSPduEncoder::encodeWspLongInteger((MMSPduEncoder *)__p, *((_DWORD *)this + 5));
  if (v7 >= 0)
    v4 = HIBYTE(v7);
  else
    v4 = v7;
  MMSPduEncoder::encodeWspValueLength(a2, v4);
  MMSPduEncoder::append(a2, (MMSPduEncoder *)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[1]);
  return 1;
}

uint64_t MMSIndexedDateHeader::valueAsString(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  _OWORD v6[4];
  void *__p[2];
  __int128 v8;
  __int128 v9;
  _BYTE v10[144];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v8 = 0u;
  v9 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v6, 0, sizeof(v6));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v6);
  std::ostream::operator<<();
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v6 + 8, &v4);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)&v6[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(*(_QWORD *)&v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v6[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v8) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186DBA418](v10);
  return 1;
}

uint64_t MMSIndexedDateHeader::createInstance(MMSIndexedDateHeader *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = MMSBinaryHeader::MMSBinaryHeader(v2, *((_QWORD *)this + 1));
  *(_QWORD *)result = &off_1E152CD48;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

_QWORD *MMSIndexedDateHeader::copy(MMSIndexedDateHeader *this)
{
  uint64_t v2;
  _QWORD *result;

  v2 = operator new();
  result = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *result = &off_1E152CD48;
  *(_QWORD *)((char *)result + 20) = *(_QWORD *)((char *)this + 20);
  return result;
}

const char *MMSIndexedDateHeader::headerTypeName(MMSIndexedDateHeader *this)
{
  return "indexed-date";
}

void MMSIndexedDateHeader::~MMSIndexedDateHeader(MMSIndexedDateHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);
  JUMPOUT(0x186DBA454);
}

const char *CTStewieStatusAsString(unint64_t a1)
{
  if (a1 > 6)
    return "???";
  else
    return off_1E1530390[a1];
}

const char *CTStewieStatusReasonAsString(unint64_t a1)
{
  if (a1 > 8)
    return "???";
  else
    return off_1E15303C8[a1];
}

const char *CTStewieTransportTypeAsString(unint64_t a1)
{
  if (a1 > 2)
    return "???";
  else
    return off_1E1530410[a1];
}

void sub_1842DC68C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842DC860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842DC8DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842DCA3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842DCC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842DCDD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const __CFString *kCTDataConnectionServiceTypeFromIndex(unsigned int a1)
{
  if (a1 <= 0x23)
    return kDataConnectionTypeMap[a1];
  else
    return CFSTR("Err");
}

uint64_t kCTDataConnectionTypeFromString(CFStringRef theString1)
{
  uint64_t i;

  if (!theString1)
    return 36;
  for (i = 0; i != 36; ++i)
  {
    if (CFStringCompare(theString1, kDataConnectionTypeMap[i], 1uLL) == kCFCompareEqualTo)
      break;
  }
  return i;
}

const void *VMCopyDictionaryForNotificationString(__CFString *a1)
{
  const void *v1;
  const void *v2;
  _OWORD v4[2];
  uint64_t v5;

  if (!a1)
    return 0;
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  NetworkNotification::NetworkNotification((NetworkNotification *)v4, a1);
  v1 = (const void *)NetworkNotification::parsedNotification((NetworkNotification *)v4);
  v2 = v1;
  if (v1)
    CFRetain(v1);
  NetworkNotification::~NetworkNotification((NetworkNotification *)v4);
  return v2;
}

uint64_t MMSStringHeader::parseValue(std::string *this, const char *a2)
{
  if (a2)
    std::string::__assign_external(this + 1, a2);
  return 1;
}

uint64_t MMSStringHeader::valueAsString(const std::string *a1, std::string *this)
{
  std::string::operator=(this, a1 + 1);
  return 1;
}

BOOL MMSStringHeader::convertString(uint64_t a1, std::string *a2, MMSCharsetHeader *this, MMSCharsetHeader *a4)
{
  CFStringEncoding v7;
  CFStringEncoding v8;
  CFStringEncoding v9;
  CFStringEncoding v10;
  int v11;
  const UInt8 *v12;
  CFIndex v13;
  const __CFString *v14;
  const __CFString *v15;
  CFIndex Length;
  _BOOL8 v17;
  UInt8 *v18;
  CFIndex maxBufLen;
  CFRange v21;
  CFRange v22;

  v7 = MMSCharsetHeader::cfEncodingForMibEnum(this);
  if (v7 == -1)
    return 0;
  v8 = v7;
  v9 = MMSCharsetHeader::cfEncodingForMibEnum(a4);
  if (v9 == -1)
    return 0;
  v10 = v9;
  v11 = *(char *)(a1 + 23);
  v12 = v11 >= 0 ? (const UInt8 *)a1 : *(const UInt8 **)a1;
  v13 = v11 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
  v14 = CFStringCreateWithBytes(0, v12, v13, v8, 0);
  if (!v14)
    return 0;
  v15 = v14;
  Length = CFStringGetLength(v14);
  maxBufLen = 0;
  v21.location = 0;
  v21.length = Length;
  CFStringGetBytes(v15, v21, v10, 0x3Fu, 0, 0, 0, &maxBufLen);
  v17 = maxBufLen != 0;
  if (maxBufLen)
  {
    v18 = (UInt8 *)operator new[]();
    v22.location = 0;
    v22.length = Length;
    CFStringGetBytes(v15, v22, v10, 0x3Fu, 0, v18, maxBufLen, &maxBufLen);
    std::string::__assign_external(a2, (const std::string::value_type *)v18, maxBufLen);
    CFRelease(v15);
    MEMORY[0x186DBA43C](v18, 0x1000C8077774924);
  }
  else
  {
    CFRelease(v15);
  }
  return v17;
}

_QWORD *MMSTextStringHeader::MMSTextStringHeader(_QWORD *a1, uint64_t a2, char *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  char *v7;

  v5 = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)a1, a2);
  *v5 = off_1E152C870;
  v6 = v5 + 3;
  if (a3)
    v7 = a3;
  else
    v7 = "";
  std::string::basic_string[abi:nn180100]<0>(v6, v7);
  *a1 = off_1E152CB68;
  return a1;
}

_QWORD *MMSTextStringHeader::createInstance(MMSTextStringHeader *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)operator new();
  v3 = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)v2, *((_QWORD *)this + 1));
  *v3 = off_1E152C870;
  std::string::basic_string[abi:nn180100]<0>(v3 + 3, "");
  *v2 = off_1E152CB68;
  return v2;
}

_QWORD *MMSTextStringHeader::copy(MMSTextStringHeader *this)
{
  _QWORD *v2;
  std::string *v3;
  std::string *v4;

  v2 = (_QWORD *)operator new();
  v3 = (std::string *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)v2, (uint64_t)this);
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E152C870;
  v4 = v3 + 1;
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
  *v2 = off_1E152CB68;
  return v2;
}

uint64_t MMSTextStringHeader::decodeValue(std::string *this, MMSPduDecoder *a2)
{
  return MMSPduDecoder::decodeWspTextString((uint64_t)a2, this + 1);
}

uint64_t MMSTextStringHeader::encodeValue(MMSTextStringHeader *this, MMSPduEncoder *a2)
{
  const char *v3;

  v3 = (char *)this + 24;
  if (*((char *)this + 47) < 0)
    v3 = *(const char **)v3;
  MMSPduEncoder::encodeWspTextString(a2, v3);
  return 1;
}

const char *MMSTextStringHeader::headerTypeName(MMSTextStringHeader *this)
{
  return "text-string";
}

_QWORD *MMSQuotedStringHeader::MMSQuotedStringHeader(_QWORD *a1, uint64_t a2, char *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  char *v7;

  v5 = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)a1, a2);
  *v5 = off_1E152C870;
  v6 = v5 + 3;
  if (a3)
    v7 = a3;
  else
    v7 = "";
  std::string::basic_string[abi:nn180100]<0>(v6, v7);
  *a1 = off_1E152CEE0;
  return a1;
}

_QWORD *MMSQuotedStringHeader::createInstance(MMSQuotedStringHeader *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)operator new();
  v3 = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)v2, *((_QWORD *)this + 1));
  *v3 = off_1E152C870;
  std::string::basic_string[abi:nn180100]<0>(v3 + 3, "");
  *v2 = off_1E152CEE0;
  return v2;
}

_QWORD *MMSQuotedStringHeader::copy(MMSQuotedStringHeader *this)
{
  _QWORD *v2;
  std::string *v3;
  std::string *v4;

  v2 = (_QWORD *)operator new();
  v3 = (std::string *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)v2, (uint64_t)this);
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E152C870;
  v4 = v3 + 1;
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
  *v2 = off_1E152CEE0;
  return v2;
}

uint64_t MMSQuotedStringHeader::decodeValue(std::string *this, MMSPduDecoder *a2)
{
  MMSPduDecoder::skipByte((uint64_t)a2);
  return MMSPduDecoder::decodeString((uint64_t)a2, this + 1, 0xFFFFFFFF);
}

uint64_t MMSQuotedStringHeader::encodeValue(MMSQuotedStringHeader *this, MMSPduEncoder *a2)
{
  const char *v4;

  MMSPduEncoder::encodeByte(a2, 34);
  v4 = (char *)this + 24;
  if (*((char *)this + 47) < 0)
    v4 = *(const char **)v4;
  MMSPduEncoder::encodeString(a2, v4);
  return 1;
}

const char *MMSQuotedStringHeader::headerTypeName(MMSQuotedStringHeader *this)
{
  return "quoted-string";
}

uint64_t MMSEncodedStringHeader::MMSEncodedStringHeader(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  int v8;
  unsigned int v9;

  v5 = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *v5 = off_1E152C870;
  v6 = v5 + 3;
  if (a3)
    v7 = a3;
  else
    v7 = "";
  std::string::basic_string[abi:nn180100]<0>(v6, v7);
  *(_QWORD *)a1 = off_1E152CF58;
  *(_DWORD *)(a1 + 48) = 3;
  if (a3)
  {
    LOBYTE(v8) = *a3;
    if (*a3)
    {
      v9 = 1;
      while ((v8 & 0x80) == 0)
      {
        v8 = a3[v9++];
        if (!v8)
          return a1;
      }
      *(_DWORD *)(a1 + 48) = 106;
    }
  }
  return a1;
}

uint64_t MMSEncodedStringHeader::createInstance(MMSEncodedStringHeader *this)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = operator new();
  v3 = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(v2, *((_QWORD *)this + 1));
  *v3 = off_1E152C870;
  std::string::basic_string[abi:nn180100]<0>(v3 + 3, "");
  *(_QWORD *)v2 = off_1E152CF58;
  *(_DWORD *)(v2 + 48) = 3;
  return v2;
}

uint64_t MMSEncodedStringHeader::copy(MMSEncodedStringHeader *this)
{
  uint64_t v2;
  std::string *v3;
  std::string *v4;

  v2 = operator new();
  v3 = (std::string *)MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E152C870;
  v4 = v3 + 1;
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
  *(_QWORD *)v2 = off_1E152CF58;
  *(_DWORD *)(v2 + 48) = *((_DWORD *)this + 12);
  return v2;
}

uint64_t MMSEncodedStringHeader::decodeValue(MMSEncodedStringHeader *this, MMSPduDecoder *a2)
{
  int v3;

  v3 = 0;
  return MMSPduDecoder::decodeEncodedString(a2, (std::string *)this + 1, (unsigned int *)this + 12, &v3);
}

uint64_t MMSEncodedStringHeader::encodeValue(MMSEncodedStringHeader *this, MMSPduEncoder *a2)
{
  MMSPduEncoder::encodeEncodedString(a2, (uint64_t)this + 24, (MMSCharsetHeader *)*((unsigned int *)this + 12));
  return 1;
}

uint64_t MMSEncodedStringHeader::parseValue(MMSEncodedStringHeader *this, const char *a2)
{
  int v2;
  int v3;

  *((_DWORD *)this + 12) = 3;
  LOBYTE(v2) = *a2;
  if (*a2)
  {
    v3 = 1;
    while ((v2 & 0x80) == 0)
    {
      v2 = a2[v3++];
      if (!v2)
        goto LABEL_7;
    }
    *((_DWORD *)this + 12) = 106;
  }
LABEL_7:
  std::string::__assign_external((std::string *)this + 1, a2);
  return 1;
}

const char *MMSEncodedStringHeader::headerTypeName(MMSEncodedStringHeader *this)
{
  return "encoded-string";
}

_QWORD *MMSSensitiveEncodedStringHeader::MMSSensitiveEncodedStringHeader(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD *result;

  result = (_QWORD *)MMSEncodedStringHeader::MMSEncodedStringHeader(a1, a2, a3);
  *result = off_1E152D0C0;
  return result;
}

uint64_t MMSSensitiveEncodedStringHeader::isSensitive(MMSSensitiveEncodedStringHeader *this)
{
  return 1;
}

uint64_t MMSSensitiveEncodedStringHeader::createInstance(MMSSensitiveEncodedStringHeader *this)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = operator new();
  v3 = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(v2, *((_QWORD *)this + 1));
  *v3 = off_1E152C870;
  std::string::basic_string[abi:nn180100]<0>(v3 + 3, "");
  *(_DWORD *)(v2 + 48) = 3;
  *(_QWORD *)v2 = off_1E152D0C0;
  return v2;
}

uint64_t MMSSensitiveEncodedStringHeader::copy(MMSSensitiveEncodedStringHeader *this)
{
  uint64_t v2;
  std::string *v3;
  std::string *v4;

  v2 = operator new();
  v3 = (std::string *)MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E152C870;
  v4 = v3 + 1;
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
  *(_DWORD *)(v2 + 48) = *((_DWORD *)this + 12);
  *(_QWORD *)v2 = off_1E152D0C0;
  return v2;
}

_QWORD *MMSSubjectHeader::MMSSubjectHeader(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD *result;

  result = (_QWORD *)MMSEncodedStringHeader::MMSEncodedStringHeader(a1, a2, a3);
  *result = off_1E152CA50;
  return result;
}

uint64_t MMSSubjectHeader::decodeValue(MMSSubjectHeader *this, MMSPduDecoder *a2)
{
  int v3;

  v3 = 0;
  return MMSPduDecoder::decodeEncodedString(a2, (std::string *)this + 1, (unsigned int *)this + 12, &v3);
}

uint64_t MMSSubjectHeader::encodeValue(MMSSubjectHeader *this, MMSPduEncoder *a2)
{
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (*((char *)this + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  else
    __p = *(std::string *)((_BYTE *)this + 1);
  MMSPduEncoder::encodeEncodedString(a2, (uint64_t)&__p, (MMSCharsetHeader *)*((unsigned int *)this + 12));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

uint64_t MMSSubjectHeader::copy(MMSSubjectHeader *this)
{
  uint64_t v2;
  std::string *v3;
  std::string *v4;

  v2 = operator new();
  v3 = (std::string *)MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E152C870;
  v4 = v3 + 1;
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
  *(_DWORD *)(v2 + 48) = *((_DWORD *)this + 12);
  *(_QWORD *)v2 = off_1E152CA50;
  return v2;
}

uint64_t MMSSubjectHeader::createInstance(MMSSubjectHeader *this)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = operator new();
  v3 = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(v2, *((_QWORD *)this + 1));
  *v3 = off_1E152C870;
  std::string::basic_string[abi:nn180100]<0>(v3 + 3, "");
  *(_DWORD *)(v2 + 48) = 3;
  *(_QWORD *)v2 = off_1E152CA50;
  return v2;
}

uint64_t MMSIndexedEncodedStringHeader::MMSIndexedEncodedStringHeader(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  uint64_t result;

  result = MMSEncodedStringHeader::MMSEncodedStringHeader(a1, a2, a4);
  *(_QWORD *)result = off_1E152D048;
  *(_DWORD *)(result + 52) = a3;
  return result;
}

_QWORD *MMSIndexedEncodedStringHeader::createInstance(MMSIndexedEncodedStringHeader *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)operator new();
  v3 = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)v2, *((_QWORD *)this + 1));
  *v3 = off_1E152C870;
  std::string::basic_string[abi:nn180100]<0>(v3 + 3, "");
  *v2 = off_1E152D048;
  v2[6] = 3;
  return v2;
}

_QWORD *MMSIndexedEncodedStringHeader::copy(MMSIndexedEncodedStringHeader *this)
{
  _QWORD *v2;
  std::string *v3;
  std::string *v4;

  v2 = (_QWORD *)operator new();
  v3 = (std::string *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)v2, (uint64_t)this);
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E152C870;
  v4 = v3 + 1;
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
  *v2 = off_1E152D048;
  v2[6] = *((_QWORD *)this + 6);
  return v2;
}

uint64_t MMSIndexedEncodedStringHeader::decodeValue(MMSIndexedEncodedStringHeader *this, MMSPduDecoder *a2)
{
  int v4;
  uint64_t result;
  unsigned int v6;
  int v7;

  v6 = 0;
  v4 = MMSPduDecoder::decodeWspValueLength(a2, &v6);
  result = 0;
  if (v4)
  {
    result = MMSPduDecoder::decodeWspIntegerValue(a2, (unsigned int *)this + 13);
    if ((_DWORD)result)
    {
      v7 = 0;
      return MMSPduDecoder::decodeEncodedString(a2, (std::string *)this + 1, (unsigned int *)this + 12, &v7);
    }
  }
  return result;
}

uint64_t MMSIndexedEncodedStringHeader::encodeValue(MMSIndexedEncodedStringHeader *this, MMSPduEncoder *a2)
{
  unsigned int v4;
  void *__p[2];
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  MMSPduEncoder::MMSPduEncoder((uint64_t)__p, *(_DWORD *)a2);
  MMSPduEncoder::encodeWspIntegerValue((MMSPduEncoder *)__p, *((_DWORD *)this + 13));
  MMSPduEncoder::encodeEncodedString((MMSPduEncoder *)__p, (uint64_t)this + 24, (MMSCharsetHeader *)*((unsigned int *)this + 12));
  if (v7 >= 0)
    v4 = HIBYTE(v7);
  else
    v4 = v7;
  MMSPduEncoder::encodeWspValueLength(a2, v4);
  MMSPduEncoder::append(a2, (MMSPduEncoder *)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[1]);
  return 1;
}

const char *MMSIndexedEncodedStringHeader::headerTypeName(MMSIndexedEncodedStringHeader *this)
{
  return "indexed-encoded-string";
}

void MMSTextStringHeader::~MMSTextStringHeader(void **this)
{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
  JUMPOUT(0x186DBA454);
}

void MMSQuotedStringHeader::~MMSQuotedStringHeader(void **this)
{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
  JUMPOUT(0x186DBA454);
}

void MMSEncodedStringHeader::~MMSEncodedStringHeader(void **this)
{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
  JUMPOUT(0x186DBA454);
}

void MMSSensitiveEncodedStringHeader::~MMSSensitiveEncodedStringHeader(void **this)
{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
  JUMPOUT(0x186DBA454);
}

void MMSSubjectHeader::~MMSSubjectHeader(void **this)
{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
  JUMPOUT(0x186DBA454);
}

void MMSIndexedEncodedStringHeader::~MMSIndexedEncodedStringHeader(void **this)
{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
  JUMPOUT(0x186DBA454);
}

void sub_1842E02E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v23 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842E0408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842E0614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E0740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842E08D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1842E09EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842E0B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1842E0C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1842E0DEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E0F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1842E10DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E1228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void handleUnsupportedRequestForCurrentBundle(const char *a1)
{
  __CFBundle *MainBundle;
  CFStringRef Identifier;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle)
    {
      Identifier = CFBundleGetIdentifier(MainBundle);
      v4 = CTLogCoreAnalytics();
      v5 = v4;
      if (Identifier)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
          handleUnsupportedRequestForCurrentBundle((uint64_t)a1, (uint64_t)Identifier, v5);
        return;
      }
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        return;
      v7 = 136315138;
      v8 = a1;
      v6 = "No bundle ID found for unsupported request '%s'";
    }
    else
    {
      v5 = CTLogCoreAnalytics();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        return;
      v7 = 136315138;
      v8 = a1;
      v6 = "No bundle found for unsupported request '%s'";
    }
    _os_log_impl(&dword_18425C000, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v7, 0xCu);
  }
}

void sub_1842E16C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1842E1920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842E1A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842E1BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1842E1E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842E1F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842E2008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842E218C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842E233C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842E245C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842E25E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1842E26F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842E285C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1842E29EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1842E2ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842E2B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E2C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842E2D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E2D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842E2E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

_anonymous_namespace_ *`anonymous namespace'::sCellIdStringFromCellId(_anonymous_namespace_ *this, objc_object *a2)
{
  _anonymous_namespace_ *v2;
  uint64_t v3;

  v2 = this;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%04x"), -[_anonymous_namespace_ intValue](v2, "intValue"));
    v3 = objc_claimAutoreleasedReturnValue();
LABEL_5:

    v2 = (_anonymous_namespace_ *)v3;
    return v2;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = 0;
    goto LABEL_5;
  }
  return v2;
}

void sub_1842E2F0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E30F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

void sub_1842E3190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::isSlotOne(_anonymous_namespace_ *this, CTServiceDescriptor *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  -[_anonymous_namespace_ instance](this, "instance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "isEqualToNumber:", v3);

  return v4;
}

void sub_1842E3204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E32A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842E3328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842E3594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1842E36B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842E37F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1842E3ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842E3B90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1842E3C74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1842E3D30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1842E3E44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_atomic_property_(NSObject **a1, NSObject **a2)
{
  NSObject *v3;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
    dispatch_retain(v3);
}

void __assign_helper_atomic_property_(NSObject **a1, dispatch_object_t *a2)
{
  dispatch_object_t v3;
  NSObject *v4;

  v3 = *a2;
  if (*a2)
    dispatch_retain(*a2);
  v4 = *a1;
  *a1 = v3;
  if (v4)
    dispatch_release(v4);
}

void OUTLINED_FUNCTION_3_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

const char *CTCellularHealthStatusAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return "CTCellularHealthUnknown";
  else
    return off_1E1530D00[a1 - 1];
}

const char *CTStewieNotifyOptionAsString(unint64_t a1)
{
  if (a1 > 3)
    return "???";
  else
    return off_1E1530DC0[a1];
}

void sub_1842E5498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1842E5668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E57BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842E5878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E590C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E59E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E5AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842E5BEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842E5F4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E6030(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E60AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E61C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E62F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842E63AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E6468(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E653C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842E6628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E67C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E6880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E68D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E6954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E69B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E6A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842E6AB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E6C28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E6CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E6D68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842E6E00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E6E70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E6EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842E6FB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842E7518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::sIsPhoneNumberValid(_anonymous_namespace_ *this, NSString *a2)
{
  int v2;
  _anonymous_namespace_ *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v2 = (int)a2;
  v3 = this;
  v4 = v3;
  if (v2 && -[_anonymous_namespace_ hasPrefix:](v3, "hasPrefix:", CFSTR("+")))
  {
    objc_msgSend(v4, "substringFromIndex:", 1);
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
  }
  if (v4 && objc_msgSend(v4, "length") && (unint64_t)objc_msgSend(v4, "length") <= 0xF)
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "isSupersetOfSet:", v7);

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_1842E76A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E783C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E7A1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (v2 != v3)
  {

  }
  _Unwind_Resume(a1);
}

void sub_1842E7B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E7BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E7CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E7DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842E7F3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842E835C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E841C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E8498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E8590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E86B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842E8760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E881C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1842E88F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842E89D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E8C20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E8CE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E8DB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842E8E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E8EDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842E8F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842E8FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E9188(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::sIsShortHandleValid(_anonymous_namespace_ *this, NSNumber *a2)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  _BOOL8 v4;

  v2 = this;
  v3 = v2;
  if (v2)
  {
    -[_anonymous_namespace_ unsignedLongLongValue](v2, "unsignedLongLongValue");
    v4 = (unint64_t)-[_anonymous_namespace_ unsignedLongLongValue](v3, "unsignedLongLongValue") >> 57 == 0;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1842E9200(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E92E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842E939C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E9430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E94CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842E9578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E9718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842E97EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842E98D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842E9984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842E9A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1842E9AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842E9BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842EA028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842EA0FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842EA250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842EA4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (v18 != v19)
  {

  }
  if (v15 != v16)
  {

  }
  _Unwind_Resume(a1);
}

void sub_1842EA5E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842EA6F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842EA818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842EA950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1842EAE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1842EB008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842EB32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  if (v25 != v24)
  {

  }
  if (a18 != v23)
  {

  }
  if (v19 != v20)
  {

  }
  _Unwind_Resume(a1);
}

void sub_1842EB4C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842EB628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842EB7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842EB95C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842EBD88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842EBE88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842EBF34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842EBFB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842EC038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842EC108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1842EC240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842EC298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842EC314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842EC370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842EC3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842EC438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842EC88C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842EC960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842ECAA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842ECCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (v17 != v18)
  {

  }
  if (v13 != v14)
  {

  }
  _Unwind_Resume(a1);
}

void sub_1842ECE2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842ECF3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842ED05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842ED190(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1842ED890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1842EDAC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842EDE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  if (a13 != a16)
  {

  }
  if (a21 != a20)
  {

  }
  if (v26 != v27)
  {

  }
  if (v22 != v23)
  {

  }
  _Unwind_Resume(a1);
}

void sub_1842EE060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842EE1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842EE388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842EE54C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *ctu::cf::CFSharedRef<__CFNumber const>::CFSharedRef<void const,void>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  CFTypeID v4;

  v3 = *a2;
  if (*a2 && (v4 = CFGetTypeID(*a2), v4 == CFNumberGetTypeID()))
  {
    *a1 = v3;
    CFRetain(v3);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_1842EEAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t CTCellularDataPlanCopyAccountUrlString()
{
  return 0;
}

uint64_t CTCellularDataPlanSetIsEnabled(unsigned int a1)
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionSetCellularDataIsEnabled(Default, a1);
}

uint64_t CTCellularDataPlanSetWebsheetVisibility(unsigned int a1)
{
  uint64_t Default;

  Default = CTTelephonyCenterGetDefault();
  return _CTServerConnectionSetDataPlanWebsheetVisibility(Default, a1);
}

const char *CTNetworkSelectionStateAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return "CTNetworkSelectionStateUnknown";
  else
    return off_1E1530E10[a1 - 1];
}

const char *CTNetworkSelectionModeAsString(uint64_t a1)
{
  const char *v1;

  v1 = "CTNetworkSelectionModeDisabled";
  if (a1 == 2)
    v1 = "CTNetworkSelectionModeManual";
  if (a1 == 1)
    return "CTNetworkSelectionModeAutomatic";
  else
    return v1;
}

id CTNetworkSelectionModeToNetworkSelectionModeString(uint64_t a1)
{
  id *v1;
  __CFString **v2;

  v1 = (id *)kCTRegistrationNetworkSelectionModeAutomatic;
  v2 = kCTRegistrationNetworkSelectionModeManual;
  if (a1 != 2)
    v2 = kCTRegistrationNetworkSelectionModeDisabled;
  if (a1 != 1)
    v1 = (id *)v2;
  return *v1;
}

const char *CTConnectionPairStateAsString(unint64_t a1)
{
  if (a1 > 2)
    return "???";
  else
    return off_1E1530E90[a1];
}

const char *CTConnectionPairConnectionIDAsString(uint64_t a1)
{
  const char *v1;

  v1 = "???";
  if (a1 == 1)
    v1 = "kCTConnectionPairConnectionIDTwo";
  if (a1)
    return v1;
  else
    return "kCTConnectionPairConnectionIDOne";
}

void sub_1842EF334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842EF454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  id *v14;
  uint64_t v15;

  objc_destroyWeak(v14);

  objc_destroyWeak((id *)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_1842EF5DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842EF6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842EF910(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1842EF9CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842EFA70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842EFB94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842EFC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CTConnectionPair;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

id **_ZNSt3__110unique_ptrIZZ32__CTConnectionPair_receiveData__EUb_E3__0NS_14default_deleteIS1_EEED1B8nn180100Ev(id **a1)
{
  id *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    objc_destroyWeak(v2);
    MEMORY[0x186DBA454](v2, 0x10C0C40FA4D3208);
  }
  return a1;
}

id **_ZZN8dispatch5asyncIZZ32__CTConnectionPair_receiveData__EUb_E3__0EEvPU28objcproto17OS_dispatch_queue8NSObjectNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1)
{
  id WeakRetained;
  _QWORD *v3;
  id v4;
  id *v6;

  v6 = (id *)a1;
  WeakRetained = objc_loadWeakRetained((id *)a1);
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = objc_loadWeakRetained((id *)WeakRetained + 3);
    objc_msgSend(v4, "receivedData:fromConnectionId:", *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));

    if (v3[5])
    {
      if (v3[9] && v3[4] == 1)
        objc_msgSend(v3, "receiveData:", *(_QWORD *)(a1 + 16));
    }
  }

  return _ZNSt3__110unique_ptrIZZ32__CTConnectionPair_receiveData__EUb_E3__0NS_14default_deleteIS1_EEED1B8nn180100Ev(&v6);
}

void sub_1842EFD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  _ZNSt3__110unique_ptrIZZ32__CTConnectionPair_receiveData__EUb_E3__0NS_14default_deleteIS1_EEED1B8nn180100Ev((id **)va);
  _Unwind_Resume(a1);
}

void sub_1842EFE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842F000C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1842F0164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1842F0254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842F03EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842F05F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1842F0704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842F089C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842F0A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

uint64_t **std::map<objc_selector *,`anonymous namespace'::CachePolicy>::map[abi:nn180100](uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t *v18;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    v5 = a2;
    v6 = &a2[2 * a3];
    while (1)
    {
      v7 = a1[1];
      v8 = v4;
      if (*a1 != v4)
      {
        v9 = a1[1];
        v10 = v4;
        if (v7)
        {
          do
          {
            v8 = v9;
            v9 = (uint64_t *)v9[1];
          }
          while (v9);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v10[2];
            v11 = *v8 == (_QWORD)v10;
            v10 = v8;
          }
          while (v11);
        }
        v12 = *v5;
        if (v8[4] >= *v5)
          break;
      }
      if (v7)
        v13 = v8;
      else
        v13 = v4;
      if (v7)
        v14 = v8 + 1;
      else
        v14 = v4;
      if (!*v14)
        goto LABEL_25;
LABEL_28:
      v5 += 2;
      if (v5 == v6)
        return a1;
    }
    v14 = v4;
    v13 = v4;
    if (v7)
    {
      v15 = a1[1];
      while (1)
      {
        while (1)
        {
          v13 = v15;
          v16 = v15[4];
          if (v12 >= v16)
            break;
          v15 = (uint64_t *)*v13;
          v14 = v13;
          if (!*v13)
            goto LABEL_25;
        }
        if (v16 >= v12)
          goto LABEL_28;
        v15 = (uint64_t *)v13[1];
        if (!v15)
        {
          v14 = v13 + 1;
          break;
        }
      }
    }
LABEL_25:
    v17 = operator new(0x30uLL);
    v17[2] = *(_OWORD *)v5;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v13;
    *v14 = (uint64_t)v17;
    v18 = (uint64_t *)**a1;
    if (v18)
    {
      *a1 = v18;
      v17 = (_OWORD *)*v14;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    goto LABEL_28;
  }
  return a1;
}

void sub_1842F1AF8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  _Unwind_Resume(a1);
}

void sub_1842F1B78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842F1BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::pair<objc_object * const,`anonymous namespace'::DelegateContext>::~pair(uint64_t a1)
{
  NSObject *v2;

  objc_destroyWeak((id *)(a1 + 16));
  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  return a1;
}

void sub_1842F1D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1842F1E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842F1FE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842F21C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::sCTAssertionDestroy(id *this, const void *a2)
{
  NSObject *v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  id v10;
  int v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = CTLogClient();
  v4 = v3;
  if (this)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412290;
      v12 = (_anonymous_namespace_ *)this;
      _os_log_impl(&dword_18425C000, v4, OS_LOG_TYPE_DEFAULT, "enter sCTAssertionDestroy for assertion %@", (uint8_t *)&v11, 0xCu);
    }
    v5 = this[2];
    if (v5)
    {
      objc_msgSend(v5, "setAssertionForConnectionType:enable:completion:", *((unsigned int *)this + 8), 0, &__block_literal_global_948);
    }
    else
    {
      v6 = CTLogClient();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    }
    WeakRetained = objc_loadWeakRetained(this + 3);
    v8 = WeakRetained;
    if (WeakRetained)
    {
      objc_msgSend(WeakRetained, "removeAssertionForInvalidationNotification:", this);
    }
    else
    {
      v9 = CTLogClient();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    }
    v10 = this[2];
    if (v10)
      CFRelease(v10);

  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
  }
}

void sub_1842F24A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CFStringRef `anonymous namespace'::sCTAssertionCopyDescription(CFStringRef this, const void *a2)
{
  CFStringRef v2;
  const __CFAllocator *v3;

  if (this)
  {
    v2 = this;
    v3 = CFGetAllocator(this);
    return CFStringCreateWithFormat(v3, 0, CFSTR("<CTClientAssertion %p [%p]>"), v2, v3);
  }
  return this;
}

void ___ZN12_GLOBAL__N_119sCTAssertionDestroyEPKv_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = a2;
  if (v2)
  {
    v3 = CTLogClient();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      ___ZN12_GLOBAL__N_119sCTAssertionDestroyEPKv_block_invoke_cold_1();
  }
  else
  {
    v4 = CTLogClient();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_18425C000, v4, OS_LOG_TYPE_DEFAULT, "sCTAssertionDestroy succeeded", v5, 2u);
    }
  }

}

void sub_1842F258C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::map<objc_selector *,objc_selector *>::map[abi:nn180100](uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__emplace_hint_unique_key_args<objc_selector *,std::pair<objc_selector * const,objc_selector *> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_1842F2604(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

id std::vector<Protocol * {__strong}>::push_back[abi:nn180100](char **a1, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  id result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v25 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v24 = v16;
    *(_QWORD *)v15 = *a2;
    v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v9 = (char *)v23.i64[1];
      v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v16;
    v24 = v21;
    v22 = v20.i64[0];
    result = (id)std::__split_buffer<Protocol * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    result = *a2;
    *(_QWORD *)v7 = result;
    v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void std::vector<Protocol * {__strong}>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<objc_object *,`anonymous namespace'::DelegateContext>,void *>>>::destroy[abi:nn180100]<std::pair<objc_object * const,std::__value_type<objc_object *,`anonymous namespace'::DelegateContext>>,void,void>(uint64_t a1)
{
  NSObject *v2;

  objc_destroyWeak((id *)(a1 + 16));
  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void ___ZZ59__CoreTelephonyClientMux_synchronousProxyWithErrorHandler__ENK3__4clEv_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;

  v3 = a2;
  if (isFrameworkLoggingSupported())
  {
    v4 = CTLogClient();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      ___ZZ59__CoreTelephonyClientMux_synchronousProxyWithErrorHandler__ENK3__4clEv_block_invoke_cold_1();
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);

}

void sub_1842F2CD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842F2D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<-[CoreTelephonyClientMux sink:handleNotification:]::$_2>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

void ___ZN8dispatch9sync_implIZ69__CoreTelephonyClientMux_removeAssertionForInvalidationNotification__E3__6EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _BOOL4 v3;
  const char *v4;
  uint8_t *v5;
  __int16 v6;
  uint8_t buf[2];

  v1 = std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__erase_unique<__CTAssertionType *>(**(_QWORD **)(a1 + 32) + 40, (unint64_t *)(*(_QWORD *)(a1 + 32) + 8));
  v2 = CTLogClient();
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v1)
  {
    if (!v3)
      return;
    v6 = 0;
    v4 = "removed assertion from InvalidationNotification list";
    v5 = (uint8_t *)&v6;
  }
  else
  {
    if (!v3)
      return;
    *(_WORD *)buf = 0;
    v4 = "assertion not found from InvalidationNotification list";
    v5 = buf;
  }
  _os_log_impl(&dword_18425C000, v2, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
}

uint64_t std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__erase_unique<__CTAssertionType *>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__remove_node_pointer((uint64_t **)a1, v4);
  std::__destroy_at[abi:nn180100]<std::pair<__CTAssertionType * const,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

void std::__destroy_at[abi:nn180100]<std::pair<__CTAssertionType * const,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,0>(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
}

void ___ZN8dispatch9sync_implIZ90__CoreTelephonyClientMux_registerBlockForInvalidationNotification_callbackQueue_callback__E3__8EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  dispatch_object_t object[4];

  object[3] = *(dispatch_object_t *)MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)v1 + 40;
  v3 = *(NSObject **)(v1 + 24);
  object[0] = v3;
  if (v3)
    dispatch_retain(v3);
  object[1] = (dispatch_object_t)_Block_copy(*(const void **)(v1 + 16));
  std::map<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>::insert_or_assign[abi:nn180100]<std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>(v2, (unint64_t *)(v1 + 8), (__int128 *)object);

  if (object[0])
    dispatch_release(object[0]);
  if (isFrameworkLoggingSupported())
  {
    v4 = CTLogClient();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(NSObject **)(v1 + 8);
      LODWORD(object[0]) = 138412290;
      *(dispatch_object_t *)((char *)object + 4) = v5;
      _os_log_impl(&dword_18425C000, v4, OS_LOG_TYPE_DEFAULT, "assertion %@ added to the invalidation notice list", (uint8_t *)object, 0xCu);
    }
  }
}

void sub_1842F3038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, void *a10)
{

  if (object)
    dispatch_release(object);
  _Unwind_Resume(a1);
}

char *std::map<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>::insert_or_assign[abi:nn180100]<std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>(uint64_t a1, unint64_t *a2, __int128 *a3)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
  {
    v5 = (_QWORD *)(a1 + 8);
    return std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__emplace_hint_unique_key_args<__CTAssertionType *,__CTAssertionType * const&,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>((uint64_t **)a1, v5, a2, a2, a3);
  }
  v4 = *a2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = v3[4];
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == (_QWORD *)(a1 + 8) || v4 < v5[4])
    return std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__emplace_hint_unique_key_args<__CTAssertionType *,__CTAssertionType * const&,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>((uint64_t **)a1, v5, a2, a2, a3);
  std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>::operator=[abi:nn180100]((uint64_t)(v5 + 5), (uint64_t *)a3);
  return (char *)v5;
}

uint64_t std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>::operator=[abi:nn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;

  v4 = *a2;
  *a2 = 0;
  v5 = *(NSObject **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    dispatch_release(v5);
  v6 = a2[1];
  a2[1] = 0;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;

  return a1;
}

char *std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__emplace_hint_unique_key_args<__CTAssertionType *,__CTAssertionType * const&,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>(uint64_t **a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, __int128 *a5)
{
  void **v8;
  char *v9;
  uint64_t **v10;
  __int128 v11;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v8 = (void **)std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__find_equal<objc_selector *>(a1, a2, &v16, &v15, a3);
  v9 = (char *)*v8;
  if (!*v8)
  {
    v10 = (uint64_t **)v8;
    v14 = 0;
    v9 = (char *)operator new(0x38uLL);
    v13[1] = a1 + 1;
    *((_QWORD *)v9 + 4) = *a4;
    v11 = *a5;
    *(_QWORD *)a5 = 0;
    *((_QWORD *)a5 + 1) = 0;
    *(_OWORD *)(v9 + 40) = v11;
    LOBYTE(v14) = 1;
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__insert_node_at(a1, v16, v10, (uint64_t *)v9);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,void *>>>>::reset[abi:nn180100]((uint64_t)v13, 0);
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<__CTAssertionType * const,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void OUTLINED_FUNCTION_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void OUTLINED_FUNCTION_9(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 0x16u);
}

uint64_t OUTLINED_FUNCTION_10(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

uint64_t ___ZN8dispatch9sync_implIU13block_pointerFU13block_pointerFvP6CTCallEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS7_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch9sync_implIU13block_pointerFP5NSSetvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch9sync_implIU13block_pointerFP8NSStringvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

void sub_1842F4500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842F475C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842F4964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842F4B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842F4D20(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842F4EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842F50B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842F52BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842F54D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842F56D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842F5834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842F59A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1842F5B04(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t MMSConstrainedHeader::MMSConstrainedHeader(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(_QWORD *)result = off_1E152CBE0;
  *(_QWORD *)(result + 20) = 0;
  *(_QWORD *)(result + 36) = 0;
  *(_QWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t MMSConstrainedHeader::parseValue(MMSConstrainedHeader *this, MMSContentType *a2)
{
  int v4;

  v4 = MMSContentType::encodedContentTypeForName(a2, (const char *)a2);
  if (v4)
  {
    *((_DWORD *)this + 5) = v4;
  }
  else if (a2)
  {
    std::string::__assign_external((std::string *)this + 1, (const std::string::value_type *)a2);
  }
  return 1;
}

uint64_t MMSConstrainedHeader::valueAsString(uint64_t a1, std::string *this)
{
  if ((*(_DWORD *)(a1 + 20) & 0x80) != 0)
    return MMSContentType::nameForEncodedContentType((_anonymous_namespace_ *)*(_DWORD *)(a1 + 20), this);
  std::string::operator=(this, (const std::string *)(a1 + 24));
  return 1;
}

uint64_t MMSConstrainedHeader::createInstance(MMSConstrainedHeader *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = MMSBinaryHeader::MMSBinaryHeader(v2, *((_QWORD *)this + 1));
  *(_QWORD *)result = off_1E152CBE0;
  *(_QWORD *)(result + 20) = 0;
  *(_QWORD *)(result + 36) = 0;
  *(_QWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t MMSConstrainedHeader::copy(MMSConstrainedHeader *this)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;

  v2 = operator new();
  v3 = MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *(_QWORD *)v3 = off_1E152CBE0;
  *(_DWORD *)(v3 + 20) = *((_DWORD *)this + 5);
  v4 = (std::string *)(v3 + 24);
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
  return v2;
}

uint64_t MMSConstrainedHeader::decodeValue(MMSConstrainedHeader *this, MMSPduDecoder *a2)
{
  _BOOL4 v4;
  uint64_t result;
  unsigned __int8 v6;

  v6 = 0;
  v4 = MMSPduDecoder::peekByte(a2, &v6);
  result = 0;
  if (v4)
  {
    if ((char)v6 < 0)
      return MMSPduDecoder::decodeWspShortInteger(a2, (unsigned int *)this + 5);
    else
      return MMSPduDecoder::decodeWspExtensionMedia((uint64_t)a2, (std::string *)this + 1);
  }
  return result;
}

uint64_t MMSConstrainedHeader::encodeValue(MMSConstrainedHeader *this, MMSPduEncoder *a2)
{
  int v3;
  const char *v4;

  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x80) != 0)
  {
    MMSPduEncoder::encodeWspShortInteger(a2, v3);
  }
  else
  {
    v4 = (char *)this + 24;
    if (*((char *)this + 47) < 0)
      v4 = *(const char **)v4;
    MMSPduEncoder::encodeHttpToken(a2, v4);
  }
  return 1;
}

const char *MMSConstrainedHeader::headerTypeName(MMSConstrainedHeader *this)
{
  return "constrained";
}

void MMSConstrainedHeader::~MMSConstrainedHeader(void **this)
{
  *this = off_1E152CBE0;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  *this = off_1E152CBE0;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
  JUMPOUT(0x186DBA454);
}

void sub_1842F84F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1842F8640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1842F879C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1842F8934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1842F8A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842F8B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  void *v10;

  if (object)
    dispatch_release(object);

  _Unwind_Resume(a1);
}

void sub_1842F8C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<-[CoreTelephonyClient dispatchBlockToClientAsync:]::$_0>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

uint64_t MMSPduDecoder::MMSPduDecoder(ctu::OsLogLogger *a1, uint64_t a2, int a3, int a4)
{
  uint64_t result;

  result = ctu::OsLogLogger::OsLogLogger(a1, "com.apple.telephony", "msg.mms.pdu");
  *(_DWORD *)(result + 24) = 106;
  *(_DWORD *)(result + 28) = 106;
  *(_WORD *)(result + 32) = 1;
  *(_BYTE *)(result + 34) = 1;
  *(_DWORD *)(result + 36) = a4;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void MMSPduDecoder::MMSPduDecoder(MMSPduDecoder *this, MMSPduDecoder *a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v5 = ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony", "msg.mms.pdu");
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = *((_QWORD *)a2 + 3);
  *(_BYTE *)(v5 + 32) = *((_BYTE *)a2 + 32);
  *(_BYTE *)(v5 + 33) = *((_BYTE *)a2 + 33);
  *(_BYTE *)(v5 + 34) = *((_BYTE *)a2 + 34);
  *(_DWORD *)(v5 + 36) = *((_DWORD *)a2 + 9);
  v6 = *((unsigned int *)a2 + 5);
  v7 = (*((_DWORD *)a2 + 4) - v6);
  if (v7 >= a3)
    LODWORD(v7) = a3;
  *(_QWORD *)(v5 + 8) = *((_QWORD *)a2 + 1) + v6;
  *(_DWORD *)(v5 + 16) = v7;
  *(_DWORD *)(v5 + 20) = 0;
}

BOOL MMSPduDecoder::peekByte(MMSPduDecoder *this, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;

  v3 = *((_DWORD *)this + 4);
  v2 = *((unsigned int *)this + 5);
  if (v2 < v3)
    *a2 = *(_BYTE *)(*((_QWORD *)this + 1) + v2);
  return v2 < v3;
}

BOOL MMSPduDecoder::decodeByte(MMSPduDecoder *this, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  v3 = *((_DWORD *)this + 4);
  v2 = *((unsigned int *)this + 5);
  if (v2 < v3)
  {
    v4 = *((_QWORD *)this + 1);
    *((_DWORD *)this + 5) = v2 + 1;
    *a2 = *(_BYTE *)(v4 + v2);
  }
  return v2 < v3;
}

uint64_t MMSPduDecoder::skipByte(uint64_t this)
{
  unsigned int v1;

  v1 = *(_DWORD *)(this + 20);
  if (v1 < *(_DWORD *)(this + 16))
    *(_DWORD *)(this + 20) = v1 + 1;
  return this;
}

uint64_t MMSPduDecoder::decodeHttpToken(uint64_t a1, std::string *a2)
{
  uint64_t result;
  int v5;
  unint64_t size;
  uint64_t v7;
  std::string *v8;
  unsigned int v9;
  int v10;

  result = MMSPduDecoder::decodeString(a1, a2, 0xFFFFFFFF);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 33)
      && ((v5 = SHIBYTE(a2->__r_.__value_.__r.__words[2]), v5 >= 0)
        ? (size = HIBYTE(a2->__r_.__value_.__r.__words[2]))
        : (size = a2->__r_.__value_.__l.__size_),
          size))
    {
      v7 = 0;
      if (v5 >= 0)
        v8 = a2;
      else
        v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v9 = 1;
      while (1)
      {
        v10 = v8->__r_.__value_.__s.__data_[v7];
        if (v10 < 0 || memchr("()<>@,;:\\\"/[]?={} \t", v10, 0x14uLL))
          break;
        v7 = v9;
        if (size <= v9++)
          return 1;
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t MMSPduDecoder::decodeString(uint64_t a1, std::string *this, unsigned int a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (a3 == -1)
  {
    v5 = *(unsigned int *)(a1 + 20);
    v6 = (*(_DWORD *)(a1 + 16) - v5);
    if ((_DWORD)v6)
    {
      v7 = 0;
      while (*(_BYTE *)(*(_QWORD *)(a1 + 8) + v5 + v7))
      {
        if (v6 == ++v7)
          goto LABEL_16;
      }
    }
    else
    {
      LODWORD(v7) = 0;
    }
    if ((_DWORD)v7 == (_DWORD)v6 || *(_BYTE *)(*(_QWORD *)(a1 + 8) + v5 + v7))
      goto LABEL_16;
    v4 = v7 + 1;
  }
  else
  {
    v4 = a3;
    if (!a3)
    {
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      {
        *this->__r_.__value_.__l.__data_ = 0;
        this->__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        this->__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
      }
      return 1;
    }
    LODWORD(v5) = *(_DWORD *)(a1 + 20);
    LODWORD(v6) = *(_DWORD *)(a1 + 16) - v5;
  }
  if (v4 <= v6)
  {
    std::string::__assign_external(this, (const std::string::value_type *)(*(_QWORD *)(a1 + 8) + v5), v4 - 1);
    *(_DWORD *)(a1 + 20) += v4;
    return 1;
  }
LABEL_16:
  result = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  return result;
}

uint64_t MMSPduDecoder::decodeWspTextString(uint64_t a1, std::string *a2)
{
  uint64_t v2;
  int v3;

  v2 = *(unsigned int *)(a1 + 20);
  if (v2 >= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(char *)(*(_QWORD *)(a1 + 8) + v2);
  if (*(_BYTE *)(a1 + 33))
  {
    if (v3 < 0)
      return 0;
  }
  if (v3 == 127)
    *(_DWORD *)(a1 + 20) = v2 + 1;
  return MMSPduDecoder::decodeString(a1, a2, 0xFFFFFFFF);
}

uint64_t MMSPduDecoder::decodeWspValueLength(MMSPduDecoder *this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *((unsigned int *)this + 5);
  if (v2 >= *((_DWORD *)this + 4))
    return 0;
  v3 = *((_QWORD *)this + 1);
  *((_DWORD *)this + 5) = v2 + 1;
  v4 = *(unsigned __int8 *)(v3 + v2);
  if (v4 > 0x1F)
    return 0;
  if (v4 == 31)
    return MMSPduDecoder::decodeWspUintvarInteger(this, a2);
  *a2 = v4;
  return 1;
}

uint64_t MMSPduDecoder::decodeWspUintvarInteger(MMSPduDecoder *this, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  char v7;

  v2 = 0;
  *a2 = 0;
  v3 = 5;
  while (1)
  {
    v5 = *((_DWORD *)this + 4);
    v4 = *((unsigned int *)this + 5);
    if (v5 == (_DWORD)v4)
      return 0;
    if (v4 >= v5)
      break;
    v6 = *((_QWORD *)this + 1);
    *((_DWORD *)this + 5) = v4 + 1;
    v7 = *(_BYTE *)(v6 + v4);
    v2 = v7 & 0x7F | (*a2 << 7);
    *a2 = v2;
    if ((v7 & 0x80) == 0)
      return 1;
    if (!--v3)
      return 0;
  }
  *a2 = v2 << 7;
  return 1;
}

uint64_t MMSPduDecoder::decodeWspLongInteger(MMSPduDecoder *this, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v8;
  int v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 4);
  v2 = *((unsigned int *)this + 5);
  if (v2 >= v3)
    return 0;
  v4 = *((_QWORD *)this + 1);
  v5 = v2 + 1;
  *((_DWORD *)this + 5) = v2 + 1;
  v6 = *(unsigned __int8 *)(v4 + v2);
  if (v6 > 0x1E || v3 - v5 < v6)
    return 0;
  *a2 = 0;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *((unsigned int *)this + 5);
      if (v10 < *((_DWORD *)this + 4))
      {
        *((_DWORD *)this + 5) = v10 + 1;
        v9 = *(unsigned __int8 *)(v4 + v10);
        v8 = *a2;
      }
      v8 = v9 | (v8 << 8);
      *a2 = v8;
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t MMSPduDecoder::decodeWspShortInteger(MMSPduDecoder *this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *((unsigned int *)this + 5);
  if (v2 >= *((_DWORD *)this + 4))
    return 0;
  v3 = *((_QWORD *)this + 1);
  *((_DWORD *)this + 5) = v2 + 1;
  v4 = *(char *)(v3 + v2);
  if ((v4 & 0x80000000) == 0)
    return 0;
  *a2 = v4 & 0x7F;
  return 1;
}

uint64_t MMSPduDecoder::decodeWspIntegerValue(MMSPduDecoder *this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;

  v2 = *((unsigned int *)this + 5);
  if (v2 >= *((_DWORD *)this + 4))
    return 0;
  v3 = *((_QWORD *)this + 1);
  if ((*(char *)(v3 + v2) & 0x80000000) == 0)
    return MMSPduDecoder::decodeWspLongInteger(this, a2);
  *((_DWORD *)this + 5) = v2 + 1;
  v5 = *(char *)(v3 + v2);
  if ((v5 & 0x80000000) == 0)
    return 0;
  *a2 = v5 & 0x7F;
  return 1;
}

uint64_t MMSPduDecoder::decodeWspExtensionMedia(uint64_t a1, std::string *a2)
{
  return MMSPduDecoder::decodeString(a1, a2, 0xFFFFFFFF);
}

BOOL MMSPduDecoder::convertStringToTargetCharsetInPlace(std::string *a1, MMSCharsetHeader *a2, MMSCharsetHeader *a3)
{
  return MMSPduDecoder::convertStringToTargetCharset((uint64_t)a1, a1, a2, a3);
}

BOOL MMSPduDecoder::convertStringToTargetCharset(uint64_t a1, std::string *a2, MMSCharsetHeader *a3, MMSCharsetHeader *a4)
{
  uint64_t v4;

  v4 = 0;
  if ((_DWORD)a3 != (_DWORD)a4 && (_DWORD)a4)
  {
    if ((_DWORD)a4 != 106 || (_DWORD)a3 != 3)
      return MMSStringHeader::convertString(a1, a2, a3, a4);
    return 1;
  }
  return v4;
}

uint64_t MMSPduDecoder::decodeEncodedString(MMSPduDecoder *this, std::string *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  NSObject *v18;
  const char *v20;
  unsigned int v21;
  const char *v22;
  int v23;
  unsigned int v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned int *)this + 5);
  if (v4 >= *((_DWORD *)this + 4))
    return 0;
  if (*(_BYTE *)(*((_QWORD *)this + 1) + v4) == 127)
  {
    *((_DWORD *)this + 5) = v4 + 1;
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
    }
    v13 = MMSPduDecoder::decodeString((uint64_t)this, a2, 0xFFFFFFFF);
    v17 = 4;
    *a3 = 4;
    if (a4)
    {
      *a4 = 4;
      v17 = *a3;
    }
    v14 = (unsigned int *)((char *)this + 24);
    if (MMSPduDecoder::convertStringToTargetCharset((uint64_t)a2, a2, (MMSCharsetHeader *)v17, (MMSCharsetHeader *)*((unsigned int *)this + 6)))
    {
      goto LABEL_38;
    }
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      MMSPduDecoder::decodeEncodedString(a3);
  }
  else
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 1) + v4))
    {
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        *a2->__r_.__value_.__l.__data_ = 0;
        a2->__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        a2->__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
      }
      v15 = *((_DWORD *)this + 6);
      if (!v15)
        v15 = 106;
      *a3 = v15;
      if (a4)
        *a4 = v15;
      v16 = *((_DWORD *)this + 5);
      if (v16 < *((_DWORD *)this + 4))
        *((_DWORD *)this + 5) = v16 + 1;
      return 1;
    }
    v24 = 0;
    if (MMSPduDecoder::decodeWspValueLength(this, &v24))
    {
      v9 = v24;
      if (v24 >= 2)
      {
        v10 = *((_DWORD *)this + 4) - *((_DWORD *)this + 5);
        if (v10 >= v24)
        {
          if (MMSPduDecoder::decodeWspIntegerValue(this, a3))
          {
            if (a4)
              *a4 = *a3;
            v12 = *((_DWORD *)this + 4);
            v11 = *((unsigned int *)this + 5);
            if (v11 < v12 && *(_BYTE *)(*((_QWORD *)this + 1) + v11) == 127)
            {
              LODWORD(v11) = v11 + 1;
              *((_DWORD *)this + 5) = v11;
            }
            v13 = MMSPduDecoder::decodeString((uint64_t)this, a2, v9 + v12 - (v10 + v11));
            v14 = (unsigned int *)((char *)this + 24);
            if (!MMSPduDecoder::convertStringToTargetCharset((uint64_t)a2, a2, (MMSCharsetHeader *)*a3, (MMSCharsetHeader *)*((unsigned int *)this + 6)))
            {
              if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
                MMSPduDecoder::decodeEncodedString(a3);
              return v13;
            }
LABEL_38:
            *a3 = *v14;
            return v13;
          }
        }
      }
      return 0;
    }
    *((_DWORD *)this + 5) = v4;
    *a3 = 106;
    if (a4)
      *a4 = 106;
    v13 = MMSPduDecoder::decodeWspTextString((uint64_t)this, a2);
    if ((_DWORD)v13
      && MMSPduDecoder::convertStringToTargetCharset((uint64_t)a2, a2, (MMSCharsetHeader *)*a3, (MMSCharsetHeader *)*((unsigned int *)this + 6)))
    {
      *a3 = *((_DWORD *)this + 6);
      return 1;
    }
    v18 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
    {
      v20 = MMSCharsetHeader::charsetNameForMibEnum((MMSCharsetHeader *)*a3);
      v21 = *a3;
      v22 = MMSCharsetHeader::charsetNameForMibEnum((MMSCharsetHeader *)*((unsigned int *)this + 6));
      v23 = *((_DWORD *)this + 6);
      *(_DWORD *)buf = 136316162;
      v26 = v20;
      v27 = 1024;
      v28 = v21;
      v29 = 2080;
      v30 = v22;
      v31 = 1024;
      v32 = v23;
      v33 = 1024;
      v34 = v13;
      _os_log_error_impl(&dword_18425C000, v18, OS_LOG_TYPE_ERROR, "unable to convert from charset %s (%d) to %s (%d) decodeWspSuccess = (%d)", buf, 0x28u);
    }
  }
  return v13;
}

uint64_t MMSPduDecoder::skip(uint64_t this, unsigned int a2)
{
  int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(this + 20);
  v3 = *(_DWORD *)(this + 16) - v2;
  if (v3 >= a2)
    v3 = a2;
  *(_DWORD *)(this + 20) = v3 + v2;
  return this;
}

std::string *MMSPduDecoder::printableBytes(std::string *result, unsigned int a2, unsigned int a3, std::string *a4)
{
  unsigned int v4;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char __str[8];
  __int16 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a3 - a2;
  if (a3 > a2)
  {
    v6 = result;
    v11 = 0;
    *(_QWORD *)__str = 0;
    v7 = a3 - 1;
    v8 = a2;
    do
    {
      snprintf(__str, 0xAuLL, "%.2hhx", *(unsigned __int8 *)(v6->__r_.__value_.__l.__size_ + v8));
      v9 = strlen(__str);
      result = std::string::append(a4, __str, v9);
      if (v7 != v8)
        result = std::string::append(a4, " ", 1uLL);
      ++v8;
      --v4;
    }
    while (v4);
  }
  return result;
}

MMSSimpleHeader *MMSPduDecoder::decodeSimpleHeader(MMSPduDecoder *this, const MMSHeaderEncodingMap *a2)
{
  unsigned int v4;
  MMSSimpleHeader *v5;
  MMSSimpleHeader *v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  std::string v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  memset(&v18, 0, sizeof(v18));
  v4 = *((_DWORD *)this + 5);
  v5 = (MMSSimpleHeader *)operator new();
  MMSSimpleHeader::MMSSimpleHeader(v5, 0, 0);
  if ((MMSSimpleHeader::decodeName(v6, this) & 1) == 0)
  {
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      MMSPduDecoder::decodeSimpleHeader();
    goto LABEL_10;
  }
  MMSPduDecoder::printableBytes((std::string *)this, v4, *((_DWORD *)this + 5), &v18);
  v7 = *((_DWORD *)this + 5);
  if (((*(uint64_t (**)(MMSSimpleHeader *, MMSPduDecoder *))(*(_QWORD *)v5 + 24))(v5, this) & 1) == 0)
  {
    v16 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      MMSPduDecoder::decodeSimpleHeader((uint64_t)v5, v16);
    v10 = 0;
    *((_DWORD *)this + 5) = v7;
    goto LABEL_14;
  }
  std::string::append(&v18, ": ", 2uLL);
  MMSPduDecoder::printableBytes((std::string *)this, v7, *((_DWORD *)this + 5), &v18);
  if (*((_BYTE *)this + 32))
  {
    v8 = (char *)(*(uint64_t (**)(MMSSimpleHeader *))(*(_QWORD *)v5 + 64))(v5);
    v9 = MMSHeaderEncodingMap::encodingForName(a2, v8);
    if (v9)
    {
      v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 96))(*(_QWORD *)(v9 + 32));
      v11 = MMSSimpleHeader::value(v5);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v11);
      v13 = *(NSObject **)this;
      if (v12)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          v14 = (*(uint64_t (**)(MMSSimpleHeader *))(*(_QWORD *)v5 + 64))(v5);
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
          *(_DWORD *)buf = 136315394;
          v20 = v14;
          v21 = 2080;
          v22 = v15;
          _os_log_impl(&dword_18425C000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: replaced simple header with %s header", buf, 0x16u);
        }
        goto LABEL_14;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        MMSPduDecoder::decodeSimpleHeader((uint64_t)v5, v13);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_10:
      v10 = 0;
LABEL_14:
      (*(void (**)(MMSSimpleHeader *))(*(_QWORD *)v5 + 8))(v5);
      v5 = (MMSSimpleHeader *)v10;
    }
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v5;
}

uint64_t MMSPduDecoder::decodeEncodedHeader(MMSPduDecoder *this, const MMSHeaderEncodingMap *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  NSObject *v16;
  int v18;
  std::string *v19;
  uint64_t v20;
  std::string *v21;
  std::string v22;
  uint8_t buf[4];
  _BYTE v24[10];
  _BYTE v25[6];
  _DWORD v26[7];

  v2 = 0;
  *(_QWORD *)&v26[5] = *MEMORY[0x1E0C80C00];
  memset(&v22, 0, sizeof(v22));
  v3 = *((unsigned int *)this + 5);
  if (v3 < *((_DWORD *)this + 4))
  {
    v5 = *((_QWORD *)this + 1);
    *((_DWORD *)this + 5) = v3 + 1;
    v6 = *(_BYTE *)(v5 + v3) & 0x7F;
    v7 = MMSHeaderEncodingMap::encodingForNumber(a2, v6);
    if (v7)
    {
      v8 = v7;
      MMSPduDecoder::printableBytes((std::string *)this, v3, *((_DWORD *)this + 5), &v22);
      v9 = *((_DWORD *)this + 5);
      v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 32) + 96))(*(_QWORD *)(v8 + 32));
      v2 = v10;
      if (v10)
      {
        v11 = *((_DWORD *)this + 5);
        if (((*(uint64_t (**)(uint64_t, MMSPduDecoder *))(*(_QWORD *)v10 + 24))(v10, this) & 1) == 0)
        {
          if ((*((_DWORD *)this + 4) - *((_DWORD *)this + 5)) >= 0x1E)
            v12 = 30;
          else
            v12 = *((_DWORD *)this + 4) - *((_DWORD *)this + 5);
          std::string::append(&v22, " ", 1uLL);
          MMSPduDecoder::printableBytes((std::string *)this, *((_DWORD *)this + 5) - 1, *((_DWORD *)this + 5) + v12, &v22);
          v13 = *(NSObject **)this;
          if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
          {
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
            if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v21 = &v22;
            else
              v21 = (std::string *)v22.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)v24 = v20;
            *(_WORD *)&v24[8] = 1024;
            *(_DWORD *)v25 = v12;
            *(_WORD *)&v25[4] = 2080;
            *(_QWORD *)v26 = v21;
            _os_log_error_impl(&dword_18425C000, v13, OS_LOG_TYPE_ERROR, "unable to decode encoded header '%s': next %d bytes: %s", buf, 0x1Cu);
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
          v2 = 0;
          *((_DWORD *)this + 5) = v11;
        }
        std::string::append(&v22, ": ", 2uLL);
        MMSPduDecoder::printableBytes((std::string *)this, v9, *((_DWORD *)this + 5), &v22);
      }
    }
    else
    {
      v14 = *((_DWORD *)this + 5);
      if ((*((_DWORD *)this + 4) - v14) >= 0x1E)
        v15 = 30;
      else
        v15 = *((_DWORD *)this + 4) - v14;
      MMSPduDecoder::printableBytes((std::string *)this, v14 - 1, v15 + v14, &v22);
      v16 = *(NSObject **)this;
      if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      {
        v18 = *((_DWORD *)this + 5);
        if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v22;
        else
          v19 = (std::string *)v22.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)v24 = v6;
        *(_WORD *)&v24[4] = 1024;
        *(_DWORD *)&v24[6] = v18;
        *(_WORD *)v25 = 1024;
        *(_DWORD *)&v25[2] = v15;
        LOWORD(v26[0]) = 2080;
        *(_QWORD *)((char *)v26 + 2) = v19;
        _os_log_error_impl(&dword_18425C000, v16, OS_LOG_TYPE_ERROR, "unknown header encoding 0x%.2x at byte %u: next %d bytes %s", buf, 0x1Eu);
      }
      v2 = 0;
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v2;
}

MMSSimpleHeader *MMSPduDecoder::decodeHeader(MMSPduDecoder *this, const MMSHeaderEncodingMap *a2)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 5);
  if (v2 >= *((_DWORD *)this + 4))
    return 0;
  if ((*(char *)(*((_QWORD *)this + 1) + v2) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 34))
      return MMSPduDecoder::decodeSimpleHeader(this, a2);
    return 0;
  }
  return (MMSSimpleHeader *)MMSPduDecoder::decodeEncodedHeader(this, a2);
}

MMSSimpleHeader *MMSPduDecoder::decodeSpecificHeader(MMSPduDecoder *this, const MMSHeaderEncodingMap *a2, const char *a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;

  v4 = *((unsigned int *)this + 5);
  if (v4 >= *((_DWORD *)this + 4))
    return 0;
  v9 = MMSHeaderEncodingMap::encodingForNumber(a2, *(_BYTE *)(*((_QWORD *)this + 1) + v4) & 0x7F);
  if (!v9 || std::string::compare((const std::string *)(v9 + 8), a3))
  {
    if (a4)
    {
      v10 = *(NSObject **)this;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        MMSPduDecoder::decodeSpecificHeader((uint64_t)a3, v10, v11);
    }
    return 0;
  }
  return MMSPduDecoder::decodeHeader(this, a2);
}

uint64_t MMSPduDecoder::decodeMessageHeaders(MMSPduDecoder *this, MMSMessage *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  const MMSHeaderEncodingMap *v7;
  uint64_t *v8;
  _BYTE *v9;
  int v10;
  MMSHeader *v11;

  {
    MMSPduDecoder::decodeMessageHeaders(MMSMessage *)::requiredHeaders[0] = (uint64_t)"X-Mms-Message-Type";
    byte_1EDD0E1D0 = 1;
    qword_1EDD0E1D8 = (uint64_t)"X-Mms-Transaction-ID";
    byte_1EDD0E1E0 = 0;
    qword_1EDD0E1E8 = (uint64_t)"X-Mms-MMS-Version";
    byte_1EDD0E1F0 = 1;
    qword_1EDD0E1F8 = 0;
    byte_1EDD0E200 = 0;
    if ("X-Mms-Message-Type")
      goto LABEL_3;
    return MMSPduDecoder::decodeHeaders(this, a2);
  }
  if (!MMSPduDecoder::decodeMessageHeaders(MMSMessage *)::requiredHeaders[0])
    return MMSPduDecoder::decodeHeaders(this, a2);
LABEL_3:
  v4 = 0;
  v5 = 1;
  v6 = MMSPduDecoder::decodeMessageHeaders(MMSMessage *)::requiredHeaders;
  while (1)
  {
    v7 = (const MMSHeaderEncodingMap *)(*(uint64_t (**)(MMSMessage *))(*(_QWORD *)a2 + 16))(a2);
    v8 = &MMSPduDecoder::decodeMessageHeaders(MMSMessage *)::requiredHeaders[2 * v4];
    v10 = *((unsigned __int8 *)v8 + 8);
    v9 = v8 + 1;
    v11 = MMSPduDecoder::decodeSpecificHeader(this, v7, (const char *)*v6, v10);
    if (!v11)
      break;
    MMSHeaderContainer::addHeader(a2, v11, 0);
LABEL_7:
    v4 = v5;
    v6 = &MMSPduDecoder::decodeMessageHeaders(MMSMessage *)::requiredHeaders[2 * v5++];
    if (!*v6)
      return MMSPduDecoder::decodeHeaders(this, a2);
  }
  if (!*v9)
    goto LABEL_7;
  return 0;
}

uint64_t MMSPduDecoder::decodeHeaders(MMSPduDecoder *this, MMSHeaderContainer *a2)
{
  uint64_t v4;
  const MMSHeaderEncodingMap *v5;
  MMSHeader *v6;
  MMSHeader *v7;
  const char *v8;

  v4 = 1;
  while (1)
  {
    if (*((_DWORD *)this + 4) == *((_DWORD *)this + 5))
      return 1;
    v5 = (const MMSHeaderEncodingMap *)(*(uint64_t (**)(MMSHeaderContainer *))(*(_QWORD *)a2 + 16))(a2);
    v6 = MMSPduDecoder::decodeHeader(this, v5);
    if (!v6)
      break;
    v7 = v6;
    MMSHeaderContainer::addHeader(a2, v6, 1);
    v8 = (const char *)(*(uint64_t (**)(MMSHeader *))(*(_QWORD *)v7 + 64))(v7);
    if (!strcmp(v8, "Content-Type"))
      return v4;
  }
  return 0;
}

uint64_t MMSPduDecoder::convertMimePartBody(MMSPduDecoder *this, const std::string::value_type **a2)
{
  MMSParameterContainer *v4;
  MMSCharsetHeader *v5;
  int *v6;
  uint64_t v7;
  unsigned int v8;
  std::string *v9;
  uint64_t v10;
  std::string v12;

  v4 = (MMSParameterContainer *)(MMSHeaderContainer::contentType((MMSHeaderContainer *)a2) + 8);
  v5 = (MMSCharsetHeader *)MMSParameterContainer::charset(v4);
  if (!(_DWORD)v5)
  {
    v5 = (MMSCharsetHeader *)*((unsigned int *)this + 7);
    MMSParameterContainer::setCharset(v4, *((_DWORD *)this + 7));
  }
  v6 = (int *)((char *)this + 24);
  if ((_DWORD)v5 == *((_DWORD *)this + 6))
    return 0;
  memset(&v12, 0, sizeof(v12));
  std::string::__assign_external(&v12, a2[9], *((unsigned int *)a2 + 24));
  if (MMSPduDecoder::convertStringToTargetCharset((uint64_t)&v12, &v12, v5, (MMSCharsetHeader *)*v6)
    || MMSStringHeader::convertString((uint64_t)&v12, &v12, (MMSCharsetHeader *)*v6, (MMSCharsetHeader *)*v6)|| MMSStringHeader::convertString((uint64_t)&v12, &v12, (MMSCharsetHeader *)3, (MMSCharsetHeader *)*v6))
  {
    v8 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v12;
    else
      v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = v12.__r_.__value_.__r.__words[1];
    MMSMimePart::setBody((std::vector<char> *)a2, (char *)v9, v8);
    MMSParameterContainer::setCharset(v4, *v6);
    v10 = MMSHeaderContainer::headerWithName((MMSHeaderContainer *)a2, "Content-Disposition");
    if (v10)
      MMSParameterContainer::setCharset((MMSParameterContainer *)(v10 + 32), *v6);
    v7 = 1;
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      MMSPduDecoder::convertMimePartBody(v5, (unsigned int *)this + 6);
    v7 = 0;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v7;
}

MMSHeaderContainer *MMSPduDecoder::decodeMultipartAlternativePart(os_log_t *this)
{
  MMSHeaderContainer **v2;
  unint64_t v3;
  MMSHeaderContainer *v4;
  unsigned int v5;
  uint64_t v6;
  void *__p;
  _BYTE *v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  if (MMSPduDecoder::decodeMultipartBody(this, &__p))
  {
    v2 = (MMSHeaderContainer **)__p;
    if (v9 != __p)
    {
      v3 = 0;
      v4 = 0;
      v5 = 1;
      while (1)
      {
        if (v4)
        {
          if ((int)compareParts(v4, v2[v3]) < 1)
          {
            v2 = (MMSHeaderContainer **)__p;
            v6 = *((_QWORD *)__p + v3);
            if (v6)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
              v2 = (MMSHeaderContainer **)__p;
            }
            goto LABEL_8;
          }
          (*(void (**)(MMSHeaderContainer *))(*(_QWORD *)v4 + 8))(v4);
          v2 = (MMSHeaderContainer **)__p;
        }
        v4 = v2[v3];
LABEL_8:
        v3 = v5++;
        if (v3 >= (v9 - (_BYTE *)v2) >> 3)
          goto LABEL_15;
      }
    }
  }
  if (os_log_type_enabled(*this, OS_LOG_TYPE_ERROR))
    MMSPduDecoder::decodeMultipartAlternativePart();
  v4 = 0;
LABEL_15:
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v4;
}

BOOL MMSPduDecoder::decodeMultipartBody(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  MMSMimePart *v6;
  MMSMimePart *v7;
  unsigned int v8;
  unint64_t v9;
  MMSMimePart **v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  MMSMimePart **v17;
  _QWORD *v18;
  _QWORD *v19;
  MMSMimePart *v20;
  _BOOL8 v21;
  int v22;
  MMSMimePart *v23;
  MMSMimePart *v24;
  int v25;
  unint64_t v26;
  MMSMimePart **v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  MMSMimePart **v34;
  _QWORD *v35;
  _QWORD *v36;
  MMSMimePart *v37;
  _QWORD *v38;
  _QWORD *v39;
  NSObject *v41;
  std::string __p;
  unsigned int v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  unsigned int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v43 = 0;
  v4 = *(_DWORD *)(a1 + 20);
  if ((MMSPduDecoder::decodeWspUintvarInteger((MMSPduDecoder *)a1, &v43) & 1) != 0)
  {
    memset(&__p, 0, sizeof(__p));
    MMSPduDecoder::printableBytes((std::string *)a1, v4, *(_DWORD *)(a1 + 20), &__p);
    v5 = v43;
    if (v43)
    {
      v6 = MMSPduDecoder::decodeMimePart((MMSPduDecoder *)a1);
      if (!v6)
      {
        v21 = 0;
LABEL_51:
        v38 = *(_QWORD **)a2;
        v39 = *(_QWORD **)(a2 + 8);
        if (*(_QWORD **)a2 != v39)
        {
          do
          {
            if (*v38)
              (*(void (**)(_QWORD))(*(_QWORD *)*v38 + 8))(*v38);
            ++v38;
          }
          while (v38 != v39);
          v38 = *(_QWORD **)a2;
        }
        *(_QWORD *)(a2 + 8) = v38;
        goto LABEL_57;
      }
      v7 = v6;
      v8 = 0;
      while (1)
      {
        v10 = *(MMSMimePart ***)(a2 + 8);
        v9 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v10 >= v9)
        {
          v12 = ((uint64_t)v10 - *(_QWORD *)a2) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
LABEL_63:
            abort();
          v13 = v9 - *(_QWORD *)a2;
          v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1))
            v14 = v12 + 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
            v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(a2 + 16, v15);
          else
            v16 = 0;
          v17 = (MMSMimePart **)&v16[8 * v12];
          *v17 = v7;
          v11 = v17 + 1;
          v19 = *(_QWORD **)a2;
          v18 = *(_QWORD **)(a2 + 8);
          if (v18 != *(_QWORD **)a2)
          {
            do
            {
              v20 = (MMSMimePart *)*--v18;
              *--v17 = v20;
            }
            while (v18 != v19);
            v18 = *(_QWORD **)a2;
          }
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 8) = v11;
          *(_QWORD *)(a2 + 16) = &v16[8 * v15];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v10 = v7;
          v11 = v10 + 1;
        }
        *(_QWORD *)(a2 + 8) = v11;
        if (++v8 == v5)
          break;
        v7 = MMSPduDecoder::decodeMimePart((MMSPduDecoder *)a1);
        if (!v7)
        {
          v21 = v8 >= v5;
          goto LABEL_51;
        }
      }
    }
    v22 = *(_DWORD *)(a1 + 20);
    if (*(_DWORD *)(a1 + 16) != v22)
    {
      v23 = MMSPduDecoder::decodeMimePart((MMSPduDecoder *)a1);
      if (v23)
      {
        v24 = v23;
        v25 = 0;
        while (1)
        {
          v27 = *(MMSMimePart ***)(a2 + 8);
          v26 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v27 >= v26)
          {
            v29 = ((uint64_t)v27 - *(_QWORD *)a2) >> 3;
            if ((unint64_t)(v29 + 1) >> 61)
              goto LABEL_63;
            v30 = v26 - *(_QWORD *)a2;
            v31 = v30 >> 2;
            if (v30 >> 2 <= (unint64_t)(v29 + 1))
              v31 = v29 + 1;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v31;
            if (v32)
              v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(a2 + 16, v32);
            else
              v33 = 0;
            v34 = (MMSMimePart **)&v33[8 * v29];
            *v34 = v24;
            v28 = v34 + 1;
            v36 = *(_QWORD **)a2;
            v35 = *(_QWORD **)(a2 + 8);
            if (v35 != *(_QWORD **)a2)
            {
              do
              {
                v37 = (MMSMimePart *)*--v35;
                *--v34 = v37;
              }
              while (v35 != v36);
              v35 = *(_QWORD **)a2;
            }
            *(_QWORD *)a2 = v34;
            *(_QWORD *)(a2 + 8) = v28;
            *(_QWORD *)(a2 + 16) = &v33[8 * v32];
            if (v35)
              operator delete(v35);
          }
          else
          {
            *v27 = v24;
            v28 = v27 + 1;
          }
          ++v25;
          *(_QWORD *)(a2 + 8) = v28;
          v22 = *(_DWORD *)(a1 + 20);
          if (*(_DWORD *)(a1 + 16) == v22)
            break;
          v24 = MMSPduDecoder::decodeMimePart((MMSPduDecoder *)a1);
          if (!v24)
            goto LABEL_48;
        }
        if (v25)
        {
          v41 = *(NSObject **)a1;
          if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            v45 = v25 + v5;
            v46 = 1024;
            v47 = v5;
            _os_log_impl(&dword_18425C000, v41, OS_LOG_TYPE_DEFAULT, "#I found %u actual entries with nEntries = %u", buf, 0xEu);
          }
        }
      }
      else
      {
LABEL_48:
        *(_DWORD *)(a1 + 20) = v22;
      }
    }
    v21 = 1;
LABEL_57:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return v21;
  }
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
    MMSPduDecoder::decodeMultipartBody();
  return 0;
}

uint64_t compareParts(MMSHeaderContainer *a1, MMSHeaderContainer *a2)
{
  MMSContentType *v3;
  int v4;
  MMSContentType *v5;
  int v6;

  v3 = (MMSContentType *)MMSHeaderContainer::contentType(a1);
  if (v3)
    v4 = !MMSContentType::compare(v3, "text", "plain");
  else
    v4 = 100;
  v5 = (MMSContentType *)MMSHeaderContainer::contentType(a2);
  if (v5)
    v6 = MMSContentType::compare(v5, "text", "plain") - 1;
  else
    v6 = -100;
  return (v6 + v4);
}

MMSMimePart *MMSPduDecoder::decodeMimePart(MMSPduDecoder *this)
{
  unsigned int v2;
  unsigned int v3;
  MMSMimePart *v4;
  std::string *v6;
  int v7;
  uint64_t v8;
  MMSHeader *v9;
  int v10;
  unint64_t v11;
  void *v12;
  MMSHeaderContainer *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  MMSContentType *v20;
  uint64_t v21;
  MMSHeaderContainer *v22;
  MMSHeaderContainer *v23;
  int v24;
  unsigned int v25;
  const char *v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[2];
  char v35;
  void *__p[2];
  char v37;
  unsigned int v38;
  std::string v39;
  unsigned int v40;

  v2 = *((_DWORD *)this + 5);
  if (*((_DWORD *)this + 4) != v2)
  {
    v40 = 0;
    if ((MMSPduDecoder::decodeWspUintvarInteger(this, &v40) & 1) != 0)
    {
      memset(&v39, 0, sizeof(v39));
      MMSPduDecoder::printableBytes((std::string *)this, v2, *((_DWORD *)this + 5), &v39);
      v38 = 0;
      v3 = *((_DWORD *)this + 5);
      if (*((_DWORD *)this + 4) == v3 || (MMSPduDecoder::decodeWspUintvarInteger(this, &v38) & 1) == 0)
      {
        if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
          MMSPduDecoder::decodeMimePart();
        goto LABEL_13;
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      {
        *v39.__r_.__value_.__l.__data_ = 0;
        v39.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v39.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v39.__r_.__value_.__s + 23) = 0;
      }
      v6 = MMSPduDecoder::printableBytes((std::string *)this, v3, *((_DWORD *)this + 5), &v39);
      v7 = *((_DWORD *)this + 5);
      if (*((_DWORD *)this + 4) == v7)
      {
        if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
          MMSPduDecoder::decodeMimePart();
        goto LABEL_13;
      }
      v8 = MMSHeaderContainer::contentTypeEncoding((MMSHeaderContainer *)v6);
      v9 = (MMSHeader *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 32) + 96))(*(_QWORD *)(v8 + 32));
      if (((*(uint64_t (**)(MMSHeader *, MMSPduDecoder *))(*(_QWORD *)v9 + 24))(v9, this) & 1) == 0)
      {
        if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
          MMSPduDecoder::decodeMimePart();
        std::string::basic_string[abi:nn180100]<0>(__p, "");
        MMSPduDecoder::dump((uint64_t)this, "bad_part_content_type", (uint64_t)__p);
        if ((v37 & 0x80000000) == 0)
          goto LABEL_13;
        v12 = __p[0];
LABEL_30:
        operator delete(v12);
LABEL_13:
        v4 = 0;
LABEL_14:
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        return v4;
      }
      v10 = *((_DWORD *)this + 5);
      v11 = v7 - v10 + v40;
      if (v11 > *((_DWORD *)this + 4) - v10)
      {
        if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
          MMSPduDecoder::decodeMimePart();
        std::string::basic_string[abi:nn180100]<0>(v34, "");
        MMSPduDecoder::dump((uint64_t)this, "bad_part_headersfLen", (uint64_t)v34);
        if ((v35 & 0x80000000) == 0)
          goto LABEL_13;
        v12 = (void *)v34[0];
        goto LABEL_30;
      }
      v4 = (MMSMimePart *)operator new();
      MMSMimePart::MMSMimePart(v4);
      MMSHeaderContainer::addHeader(v13, v9, 0);
      if ((_DWORD)v11)
      {
        v33 = 0;
        v31 = 0u;
        v32 = 0u;
        MMSPduDecoder::MMSPduDecoder((MMSPduDecoder *)&v31, this, v11);
        if ((MMSPduDecoder::decodeHeaders((MMSPduDecoder *)&v31, v4) & 1) == 0)
        {
          if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
            MMSPduDecoder::decodeMimePart();
          std::string::basic_string[abi:nn180100]<0>(v29, "");
          MMSPduDecoder::dump((uint64_t)this, "bad_part_headers", (uint64_t)v29);
          if (v30 < 0)
            operator delete(v29[0]);
        }
        MEMORY[0x186DBA1B4](&v31);
      }
      v14 = *((_DWORD *)this + 4);
      v15 = *((_DWORD *)this + 5);
      v16 = v14 - v15;
      if (v14 - v15 >= v11)
        v16 = v11;
      v17 = v16 + v15;
      *((_DWORD *)this + 5) = v16 + v15;
      v18 = v38;
      if (v38 > v14 - (v16 + v15))
      {
        if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
          MMSPduDecoder::decodeMimePart();
        std::string::basic_string[abi:nn180100]<0>(v27, "");
        MMSPduDecoder::dump((uint64_t)this, "bad_part_datafLen", (uint64_t)v27);
        if (v28 < 0)
          operator delete(v27[0]);
        (*(void (**)(MMSMimePart *))(*(_QWORD *)v4 + 8))(v4);
        goto LABEL_13;
      }
      if (v38 >= 0x8C)
        v19 = 140;
      else
        v19 = v38;
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      {
        *v39.__r_.__value_.__l.__data_ = 0;
        v39.__r_.__value_.__l.__size_ = 0;
        v17 = *((_DWORD *)this + 5);
      }
      else
      {
        v39.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v39.__r_.__value_.__s + 23) = 0;
      }
      MMSPduDecoder::printableBytes((std::string *)this, v17, v17 + v19, &v39);
      v20 = (MMSContentType *)MMSHeaderContainer::contentType(v4);
      v21 = (uint64_t)v20;
      if (v20 && MMSContentType::isMultipartAlternative(v20))
      {
        v33 = 0;
        v31 = 0u;
        v32 = 0u;
        MMSPduDecoder::MMSPduDecoder((MMSPduDecoder *)&v31, this, v18);
        v22 = MMSPduDecoder::decodeMultipartAlternativePart((os_log_t *)&v31);
        if (v22)
        {
          v23 = v22;
          (*(void (**)(MMSMimePart *))(*(_QWORD *)v4 + 8))(v4);
          v21 = MMSHeaderContainer::contentType(v23);
          MEMORY[0x186DBA1B4](&v31);
          v4 = v23;
LABEL_60:
          v24 = *((_DWORD *)this + 5);
          v25 = *((_DWORD *)this + 4) - v24;
          if (v25 >= v18)
            v25 = v18;
          *((_DWORD *)this + 5) = v25 + v24;
          if (v21)
          {
            v26 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
            if (!strcmp(v26, "text"))
              MMSPduDecoder::convertMimePartBody(this, (const std::string::value_type **)v4);
          }
          goto LABEL_14;
        }
        if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
          MMSPduDecoder::decodeMimePart();
        MEMORY[0x186DBA1B4](&v31);
      }
      MMSMimePart::setBody((std::vector<char> *)v4, (char *)(*((_QWORD *)this + 1) + *((unsigned int *)this + 5)), v18);
      goto LABEL_60;
    }
  }
  if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
    MMSPduDecoder::decodeMimePart();
  return 0;
}

void MMSPduDecoder::dump(uint64_t a1, const char *a2, uint64_t a3)
{
  const void *v4;
  size_t v5;
  std::string __p;

  v4 = *(const void **)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 16);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  MMSPduDecoder::dumpMMSData(a2, v4, v5, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

BOOL MMSPduDecoder::decodeBody(MMSPduDecoder *this, MMSMessage *a2)
{
  _BOOL8 v2;
  uint64_t v5;
  MMSContentType **v6;
  BOOL isMultipartAlternative;
  MMSHeaderContainer **v8;
  unint64_t v9;
  MMSHeaderContainer *v10;
  unsigned int v11;
  uint64_t v12;
  NSObject *v13;
  void *p_p;
  MMSMimePart *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  void *__p;
  MMSHeaderContainer **v21;
  uint64_t v22;
  _BYTE buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 4) == *((_DWORD *)this + 5))
    return 1;
  v5 = MMSHeaderContainer::headerWithName(a2, "Content-Type");
  if (v5)
  {
    v6 = (MMSContentType **)v5;
    if (!MMSContentType::isMultipart(*(MMSContentType **)(v5 + 24)))
    {
      __p = 0;
      v21 = 0;
      v22 = 0;
      (*((void (**)(MMSContentType **, void **))*v6 + 9))(v6, &__p);
      v13 = *(NSObject **)this;
      if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT))
      {
        if (v22 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = p_p;
        _os_log_impl(&dword_18425C000, v13, OS_LOG_TYPE_DEFAULT, "#I contentType is %s, not multipart", buf, 0xCu);
      }
      if (*((_DWORD *)this + 4) != *((_DWORD *)this + 5))
      {
        v15 = (MMSMimePart *)operator new();
        MMSMimePart::MMSMimePart(v15, (const void *)(*((_QWORD *)this + 1) + *((unsigned int *)this + 5)), (*((_DWORD *)this + 4) - *((_DWORD *)this + 5)), 0);
        *(_QWORD *)buf = (*(uint64_t (**)(MMSContentType *))(*(_QWORD *)v6[3] + 32))(v6[3]);
        MMSHeaderContainer::setContentType(v15, (uint64_t *)buf);
        MMSMessage::addPart(a2, v15);
        *((_DWORD *)this + 5) = *((_DWORD *)this + 4);
        v16 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      if (SHIBYTE(v22) < 0)
        operator delete(__p);
      return 1;
    }
    __p = 0;
    v21 = 0;
    v22 = 0;
    v2 = MMSPduDecoder::decodeMultipartBody((uint64_t)this, (uint64_t)&__p);
    if (!v2)
      goto LABEL_38;
    isMultipartAlternative = MMSContentType::isMultipartAlternative(v6[3]);
    v8 = (MMSHeaderContainer **)__p;
    if (isMultipartAlternative)
    {
      if (v21 == __p)
        goto LABEL_36;
      v9 = 0;
      v10 = 0;
      v11 = 1;
      while (1)
      {
        if (v10)
        {
          if ((int)compareParts(v10, v8[v9]) < 1)
          {
            v8 = (MMSHeaderContainer **)__p;
            v12 = *((_QWORD *)__p + v9);
            if (v12)
            {
              (*(void (**)(_QWORD))(*(_QWORD *)v12 + 8))(*((_QWORD *)__p + v9));
              v8 = (MMSHeaderContainer **)__p;
            }
            goto LABEL_13;
          }
          (*(void (**)(MMSHeaderContainer *))(*(_QWORD *)v10 + 8))(v10);
          v8 = (MMSHeaderContainer **)__p;
        }
        v10 = v8[v9];
LABEL_13:
        v9 = v11++;
        if (v9 >= v21 - v8)
        {
          if (v10)
          {
            MMSMessage::addPart(a2, v10);
            goto LABEL_38;
          }
LABEL_36:
          if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
            MMSPduDecoder::decodeBody();
LABEL_38:
          v8 = (MMSHeaderContainer **)__p;
          goto LABEL_39;
        }
      }
    }
    if (v21 != __p)
    {
      v17 = 0;
      v18 = 1;
      do
      {
        MMSMessage::addPart(a2, v8[v17]);
        v17 = v18;
        v8 = (MMSHeaderContainer **)__p;
        ++v18;
      }
      while (v17 < ((char *)v21 - (_BYTE *)__p) >> 3);
      goto LABEL_38;
    }
LABEL_39:
    if (v8)
    {
      v21 = v8;
      operator delete(v8);
    }
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      MMSPduDecoder::decodeBody();
    return 0;
  }
  return v2;
}

uint64_t MMSPduDecoder::decodeContentType(MMSPduDecoder *this)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  unsigned int v5;
  char v6;
  const char *v7;
  void **v8;
  const char *v9;
  int v10;
  MMSGeneralContentType *v11;
  NSObject *v12;
  int v13;
  void *__p[2];
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v1 = *((unsigned int *)this + 5);
  if (v1 >= *((_DWORD *)this + 4))
    return 0;
  if (*(char *)(*((_QWORD *)this + 1) + v1) < 0)
  {
    v6 = *(_BYTE *)(*((_QWORD *)this + 1) + v1);
    *((_DWORD *)this + 5) = v1 + 1;
    v4 = operator new();
    MMSEncodedContentType::MMSEncodedContentType((MMSEncodedContentType *)v4, v6 & 0x7F);
    return v4;
  }
  v19 = 0;
  if (MMSPduDecoder::decodeWspValueLength(this, &v19))
  {
    v3 = *((_DWORD *)this + 5);
    v18 = 0;
    if (MMSPduDecoder::decodeWspIntegerValue(this, &v18))
    {
      v4 = operator new();
      MMSEncodedContentType::MMSEncodedContentType((MMSEncodedContentType *)v4, v18);
      v5 = v3 - *((_DWORD *)this + 5) + v19;
      v19 = v5;
      goto LABEL_24;
    }
    *((_DWORD *)this + 5) = v3;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v16 = 0;
    v10 = MMSPduDecoder::decodeString((uint64_t)this, (std::string *)__p, 0xFFFFFFFF);
    v4 = 0;
    if (v10)
    {
      v11 = (SBYTE7(v16) & 0x80u) == 0 ? (MMSGeneralContentType *)__p : (MMSGeneralContentType *)__p[0];
      v4 = (uint64_t)MMSGeneralContentType::fromString(v11, v9);
      if (!v4)
      {
        v12 = *(NSObject **)this;
        if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
          MMSPduDecoder::decodeContentType((char *)&v16 + 7, __p, v12);
        v4 = 0;
      }
    }
    if (SBYTE7(v16) < 0)
      operator delete(__p[0]);
    if (v10)
    {
      v13 = *((_DWORD *)this + 5);
      v5 = v3 - v13 + v19;
      v19 = v5;
      if (!v4)
      {
LABEL_27:
        if (*((_DWORD *)this + 4) - v13 < v5)
          v5 = *((_DWORD *)this + 4) - v13;
        *((_DWORD *)this + 5) = v5 + v13;
        return v4;
      }
LABEL_24:
      v17 = 0;
      *(_OWORD *)__p = 0u;
      v16 = 0u;
      MMSPduDecoder::MMSPduDecoder((MMSPduDecoder *)__p, this, v5);
      if ((MMSParameterContainer::decode((MMSParameterContainer *)(v4 + 8), (MMSPduDecoder *)__p) & 1) == 0)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v4 = 0;
      }
      MEMORY[0x186DBA1B4](__p);
      v5 = v19;
      v13 = *((_DWORD *)this + 5);
      goto LABEL_27;
    }
    return 0;
  }
  *((_DWORD *)this + 5) = v1;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v16 = 0;
  if (MMSPduDecoder::decodeString((uint64_t)this, (std::string *)__p, 0xFFFFFFFF))
  {
    if ((SBYTE7(v16) & 0x80u) == 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    v4 = (uint64_t)MMSGeneralContentType::fromString((MMSGeneralContentType *)v8, v7);
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      MMSPduDecoder::decodeContentType();
    v4 = 0;
  }
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  return v4;
}

void MMSPduDecoder::printDebugInfo(MMSPduDecoder *this, std::string *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  size_t v9;
  NSObject *v10;
  std::string *v11;
  std::string *v12;
  std::string v13;
  char __str[4];
  std::string *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 4) != *((_DWORD *)this + 5))
  {
    memset(&v13, 0, sizeof(v13));
    v4 = 16;
    *(_DWORD *)__str = 0;
    do
    {
      v6 = *((_DWORD *)this + 4);
      v5 = *((unsigned int *)this + 5);
      if (v6 == (_DWORD)v5)
        break;
      if (v5 >= v6)
      {
        v8 = 0;
      }
      else
      {
        v7 = *((_QWORD *)this + 1);
        *((_DWORD *)this + 5) = v5 + 1;
        v8 = *(unsigned __int8 *)(v7 + v5);
      }
      snprintf(__str, 4uLL, "%.2x ", v8);
      v9 = strlen(__str);
      std::string::append(&v13, __str, v9);
      --v4;
    }
    while (v4);
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      MMSPduDecoder::printDebugInfo();
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (a2)
  {
    v10 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_18425C000, v10, OS_LOG_TYPE_ERROR, "Message so far:", (uint8_t *)&v13, 2u);
      v10 = *(NSObject **)this;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      MMSMessage::prettyMessage(a2, 0, 0, &v13);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v13;
      else
        v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)__str = 136315138;
      v15 = v11;
      _os_log_error_impl(&dword_18425C000, v10, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)__str, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      v10 = *(NSObject **)this;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      MMSMessage::prettyMessage(a2, 1, 0, &v13);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      *(_DWORD *)__str = 136642819;
      v15 = v12;
      _os_log_error_impl(&dword_18425C000, v10, OS_LOG_TYPE_ERROR, "%{sensitive}s", (uint8_t *)__str, 0xCu);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      v10 = *(NSObject **)this;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      MMSPduDecoder::printDebugInfo((MMSMessage *)a2, v10);
  }
}

MMSMessage *MMSPduDecoder::decodeMessage(MMSPduDecoder *this, int a2, int a3)
{
  MMSMessage *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char **v11;
  MMSContentType *v12;
  std::string::size_type v13;
  std::string::size_type size;
  std::string::size_type v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v21;
  int v22;
  char v23;
  char v24;
  std::string __p;
  std::string __str;
  void *v28;
  std::string::size_type v29;
  uint64_t v30;
  char v31;

  v6 = (MMSMessage *)operator new();
  MMSMessage::MMSMessage(v6);
  if (!*((_BYTE *)this + 33))
  {
    v7 = MMSPduDecoder::decodeHeaders(this, v6);
    if (!v7)
      goto LABEL_6;
LABEL_5:
    v7 = MMSPduDecoder::decodeBody(this, v6);
    goto LABEL_6;
  }
  if ((MMSPduDecoder::decodeMessageHeaders(this, v6) & 1) != 0)
    goto LABEL_5;
  v7 = 0;
LABEL_6:
  if (a2 && *((_DWORD *)this + 4) != *((_DWORD *)this + 5))
  {
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      MMSPduDecoder::decodeMessage();
    goto LABEL_53;
  }
  if (!v7)
  {
LABEL_53:
    MMSPduDecoder::printDebugInfo(this, (std::string *)v6);
    (*(void (**)(MMSMessage *))(*(_QWORD *)v6 + 8))(v6);
    return 0;
  }
  if (a3)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    if (MMSHeaderContainer::headerValueAsString(v6, "Subject", (uint64_t)&v28))
    {
      v8 = MMSMessage::partCount(v6);
      if (v8)
      {
        v9 = v8;
        v10 = 0;
        do
        {
          while (1)
          {
            v11 = (char **)MMSMessage::part(v6, v10);
            v12 = (MMSContentType *)MMSHeaderContainer::contentType((MMSHeaderContainer *)v11);
            if (MMSContentType::compare(v12, "text", "plain"))
              break;
            if (++v10 >= v9)
              goto LABEL_49;
          }
          memset(&__str, 0, sizeof(__str));
          std::string::basic_string[abi:nn180100]<0>(&__str, v11[9]);
          if (v30 >= 0)
            v13 = HIBYTE(v30);
          else
            v13 = v29;
          std::string::basic_string(&__p, &__str, 0, v13, (std::allocator<char> *)&v31);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v15 = HIBYTE(v30);
          if (v30 < 0)
            v15 = v29;
          if (size == v15)
          {
            if (v30 >= 0)
              v16 = (unsigned __int8 *)&v28;
            else
              v16 = (unsigned __int8 *)v28;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v21 = (void *)__p.__r_.__value_.__r.__words[0];
              v22 = memcmp(__p.__r_.__value_.__l.__data_, v16, __p.__r_.__value_.__l.__size_);
              operator delete(v21);
              if (!v22)
                goto LABEL_42;
            }
            else
            {
              if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
                goto LABEL_42;
              v17 = 0;
              do
              {
                v18 = __p.__r_.__value_.__s.__data_[v17];
                v19 = v16[v17];
              }
              while (v18 == v19 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v17++);
              if (v18 == v19)
              {
LABEL_42:
                MMSMessage::setSubject(v6, "");
                v23 = 0;
                goto LABEL_43;
              }
            }
          }
          else if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v23 = 1;
LABEL_43:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (++v10 < v9)
            v24 = v23;
          else
            v24 = 0;
        }
        while ((v24 & 1) != 0);
      }
    }
LABEL_49:
    if (SHIBYTE(v30) < 0)
      operator delete(v28);
  }
  return v6;
}

uint64_t MMSPduDecoder::decodeSms(MMSPduDecoder *a1, _QWORD *a2, std::string *a3, std::string *a4, std::string *a5, std::string *a6)
{
  int v12;
  uint64_t result;
  unsigned int v14;

  v14 = 0;
  v12 = MMSPduDecoder::decodeWspIntegerValue(a1, &v14);
  result = 0;
  if (v12)
  {
    result = MMSPduDecoder::decodeString((uint64_t)a1, a3, 0xFFFFFFFF);
    if ((_DWORD)result)
    {
      result = MMSPduDecoder::decodeString((uint64_t)a1, a4, 0xFFFFFFFF);
      if ((_DWORD)result)
      {
        result = MMSPduDecoder::decodeString((uint64_t)a1, a5, 0xFFFFFFFF);
        if ((_DWORD)result)
          result = MMSPduDecoder::decodeString((uint64_t)a1, a6, 0xFFFFFFFF);
      }
    }
  }
  *a2 = v14;
  return result;
}

uint64_t MMSPduDecoder::dumpMMSData(const char *a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  int v12;
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  void **v16;
  FILE *v17;
  FILE *v18;
  void *__p[2];
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  _OWORD v24[4];
  void *v25[2];
  __int128 v26;
  __int128 v27;
  _OWORD v28[9];
  uint64_t v29;

  v29 = 0;
  v27 = 0u;
  memset(v28, 0, sizeof(v28));
  *(_OWORD *)v25 = 0u;
  v26 = 0u;
  memset(v24, 0, sizeof(v24));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v24);
  v23 = 0x500000000000000;
  HIWORD(v22[0]) = 0;
  v22[1] = 0;
  strcpy((char *)v22, "/tmp/");
  if (*(char *)(a4 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a4 + 23);
  else
    v8 = *(_QWORD *)(a4 + 8);
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)v22, 5);
  v10 = strlen(a1);
  v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)a1, v10);
  if (v8)
  {
    v12 = *(char *)(a4 + 23);
    if (v12 >= 0)
      v13 = (const char *)a4;
    else
      v13 = *(const char **)a4;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a4 + 23);
    else
      v14 = *(_QWORD *)(a4 + 8);
  }
  else
  {
    v13 = "_error_";
    v14 = 7;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
  time(0);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)".mms", 4);
  __p[0] = 0;
  __p[1] = 0;
  v21 = 0;
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v24 + 8, __p);
  if (v21 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  v17 = fopen((const char *)v16, "w");
  if (v17)
  {
    v18 = v17;
    fwrite(a2, 1uLL, a3, v17);
    fclose(v18);
  }
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
  *(_QWORD *)&v24[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v24 + *(_QWORD *)(*(_QWORD *)&v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v24[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v26) < 0)
    operator delete(v25[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x186DBA418](v28);
}

void OUTLINED_FUNCTION_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x22u);
}

void OUTLINED_FUNCTION_10_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

void OUTLINED_FUNCTION_11(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t OUTLINED_FUNCTION_13(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

const char *OUTLINED_FUNCTION_14()
{
  unsigned int *v0;

  return MMSCharsetHeader::charsetNameForMibEnum((MMSCharsetHeader *)*v0);
}

const char *OUTLINED_FUNCTION_16(unsigned int *a1)
{
  return MMSCharsetHeader::charsetNameForMibEnum((MMSCharsetHeader *)*a1);
}

void sub_1842FB92C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1842FB9DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842FBAF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842FBCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (v17 != v18)
  {

  }
  if (v13 != v14)
  {

  }
  _Unwind_Resume(a1);
}

void sub_1842FBD9C()
{
  JUMPOUT(0x1842FBD80);
}

void sub_1842FBDA4()
{
  JUMPOUT(0x1842FBD88);
}

void sub_1842FBDAC()
{
  JUMPOUT(0x1842FBD64);
}

void sub_1842FBDB4()
{
  JUMPOUT(0x1842FBD68);
}

void sub_1842FBDBC()
{
  JUMPOUT(0x1842FBD8CLL);
}

void sub_1842FBDC4()
{
  JUMPOUT(0x1842FBD90);
}

void sub_1842FBE38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1842FC14C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842FC23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1842FC418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1842FC5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1842FC6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842FC890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1842FC944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842FCA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842FCC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842FCD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842FCE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1842FCF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842FD154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842FD278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842FD370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842FD4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1842FD5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842FD784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842FD8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842FD934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842FDA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842FDC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842FDD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842FDEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1842FDFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842FE07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842FE278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842FE3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842FE55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1842FE610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1842FE6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842FE900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842FEA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842FEB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1842FEC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842FED90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1842FEE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842FEFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1842FF0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842FF2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842FF3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842FF584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842FF6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842FF850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1842FF98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1842FFAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  v27 = v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1842FFC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1842FFD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1842FFF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_18430003C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18430016C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184300278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1843003BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1843004C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184300608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184300770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_184300938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184300A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184300BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184300C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184300DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184300F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184301060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184301184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_184301350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184301474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843015EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18430175C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184301868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184301A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184301B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184301C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184301D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184301EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184301FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184302114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184302220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1843023D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1843024FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18430262C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184302768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843028B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1843029BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184302B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184302C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184302DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184302ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184302FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_184303160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  v27 = v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1843032CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1843033CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184303560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184303674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843037A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1843038B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184303A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184303B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184303CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_184303DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184303F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_18430402C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184304148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_184304244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843043C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1843044CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843045E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_184304710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_18430485C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184304968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184304A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_184304BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_184304CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184304DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184304F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_18430503C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843051E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184305320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184305448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184305570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1843056B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1843057C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18430597C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184305AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184305BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184305CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184305E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_184305F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843060E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1843061EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184306318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

const char *CTServerConnectionDualSimCapabilityAsString(unsigned int a1)
{
  if (a1 > 4)
    return "???";
  else
    return off_1E1531718[a1];
}

_QWORD *operator<<(_QWORD *a1, _DWORD *a2)
{
  unsigned int v3;
  const char *v4;
  size_t v5;

  v3 = *a2 - 1;
  if (v3 > 2)
    v4 = "kSendErrorTypeNone";
  else
    v4 = off_1E15317F0[v3];
  v5 = strlen(v4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)v4, v5);
  return a1;
}

const char *CTNRDisableReasonAsString(uint64_t a1)
{
  uint64_t v1;
  const char *result;

  if (a1 >= 0x10000)
  {
    if (a1 >= 0x40000)
    {
      if (a1 == 0x40000)
        return "CTNRDisableReasonNoSUCISupport";
      if (a1 == 0x80000000)
        return "CTNRDisableReasonNoCarrierSupport";
    }
    else
    {
      if (a1 == 0x10000)
        return "CTNRDisableReasonInLPM";
      if (a1 == 0x20000)
        return "CTNRDisableReasonVoLTEOff";
    }
    return "CTNRDisableReasonNone";
  }
  else
  {
    v1 = a1 - 1;
    result = "CTNRDisableReasonRoaming";
    switch(v1)
    {
      case 0:
        return result;
      case 1:
        result = "CTNRDisableReasonMSIMRestriction";
        break;
      case 3:
        result = "CTNRDisableReasonDDSSwitch";
        break;
      case 7:
        result = "CTNRDisableReasonSimFile";
        break;
      default:
        return "CTNRDisableReasonNone";
    }
  }
  return result;
}

void sub_1843074F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184307590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184307610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184307670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843076E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1843077A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843078E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184307968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184307A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184307A4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184307B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184307BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184307CC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184307D50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184307DEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184307E34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184307EF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184307F8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184308054(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843080DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184308178(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843081C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184308284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184308318(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184308498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18430870C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, int a11, char a12, void *a13, int a14, char a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if ((a12 & 1) != 0)
  {

  }
  if (!v19)

  if ((a15 & 1) != 0)
  {

  }
  if (!v17)

  _Unwind_Resume(a1);
}

void sub_18430886C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843088E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843089C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184308B70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184308CC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184308E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184308E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184308F24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184308F6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184309030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843090CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184309194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18430921C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843092B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184309300(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843093C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184309460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430964C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184309A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, int a13, char a14, void *a15, void *a16, void *a17, int a18, char a19, void *a20,void *a21,void *a22,int a23,char a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;

  if ((a14 & 1) != 0)
  {

  }
  if (!a20)

  if ((a19 & 1) != 0)
  {

  }
  if (!a25)

  if ((a24 & 1) != 0)
  {

  }
  if (!*(_QWORD *)(v33 - 96))

  _Unwind_Resume(a1);
}

void sub_184309C80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184309D1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184309E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18430A050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18430A2B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18430A4F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18430A7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13, void *a14, void *a15, int a16, char a17, void *a18, void *a19, void *a20,int a21,char a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if ((a13 & 1) != 0)
  {

  }
  if (!v29)

  if ((a17 & 1) != 0)
  {

  }
  if (!v28)

  if ((a22 & 1) != 0)
  {

  }
  if (!v24)

  _Unwind_Resume(a1);
}

void sub_18430A934()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x18430A924);
  JUMPOUT(0x18430A91CLL);
}

void sub_18430A940()
{
  JUMPOUT(0x18430A928);
}

void sub_18430A9B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430AA24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430AAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18430AC08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18430AD64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430AECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18430AFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18430B050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430B0A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430B108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18430B1F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18430B2AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430B3D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18430B4EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18430B5B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430B60C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430B670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18430B758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18430B83C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430BA28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18430BCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, int a11, char a12, void *a13, int a14, char a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if ((a12 & 1) != 0)
  {

  }
  if (!v19)

  if ((a15 & 1) != 0)
  {

  }
  if (!v17)

  _Unwind_Resume(a1);
}

void sub_18430BE1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430BEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430BFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18430C194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18430C2F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430C494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18430C5F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_18430C6DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430C73C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430C7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18430C914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18430CA6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430D4D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18430D664(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430D9A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_18430DAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18430DB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18430DB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18430DDF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18430DFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_48c88_ZTSN8dispatch5blockIU8__strongU13block_pointerFvP18CTStewieMessageAckP12NSDictionaryEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 48));
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_ea8_48c88_ZTSN8dispatch5blockIU8__strongU13block_pointerFvP18CTStewieMessageAckP12NSDictionaryEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;

}

void sub_18430E1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  std::pair<std::string const,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18430E254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c88_ZTSN8dispatch5blockIU8__strongU13block_pointerFvP18CTStewieMessageAckP12NSDictionaryEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_ea8_32c88_ZTSN8dispatch5blockIU8__strongU13block_pointerFvP18CTStewieMessageAckP12NSDictionaryEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

uint64_t std::pair<std::string const,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18430E3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18430E688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_18430E7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18430E854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_18430EAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18430EAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18430F2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void sub_18430F5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  id *v15;
  void *v16;

  objc_destroyWeak(v15);
  _Unwind_Resume(a1);
}

void sub_18430F6F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430F860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430F954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18430FA64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18430FB20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18430FBC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18430FC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18430FD74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>::pair[abi:nn180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)_Block_copy(*((const void **)a2 + 3));
  return this;
}

void ___ZN8dispatch9sync_implIZ27__CTStewieDataClient_start_E3__0EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  NSObject *v7;
  id v8;

  v1 = *(uint64_t ***)(a1 + 32);
  v2 = **v1;
  if (*(_BYTE *)(v2 + 8))
  {
    CTLogStewieDataClient();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      ___ZN8dispatch9sync_implIZ27__CTStewieDataClient_start_E3__0EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke_cold_2();

    *(_BYTE *)v1[1] = 1;
  }
  else if ((objc_msgSend(*(id *)(v2 + 80), "start") & 1) != 0)
  {
    v4 = *v1;
    v5 = v1[1];
    *(_BYTE *)(**v1 + 8) = 1;
    *(_BYTE *)v5 = 1;
    v6 = (void *)*v4;
    objc_msgSend(*(id *)(*v4 + 80), "getState");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stateChanged:");

  }
  else
  {
    CTLogStewieDataClient();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      ___ZN8dispatch9sync_implIZ27__CTStewieDataClient_start_E3__0EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke_cold_1();

  }
}

void sub_18430FF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18430FFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<-[CTStewieDataClient dispatchOnDelegateQueue:]::$_1>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v6 = (void **)std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v13 = 0;
    v7 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    LOBYTE(v13) = 1;
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,void *>>>>::reset[abi:nn180100]((uint64_t)v12, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:nn180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:nn180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_184310324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<-[CTStewieDataClient sendMessage:completion:]::$_2>::~unique_ptr[abi:nn180100]((id **)va);
  _Unwind_Resume(a1);
}

void **std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::find<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

id **_ZNSt3__110unique_ptrIZZZ52__CTStewieDataClient_receivedData_fromConnectionId__EUb_EUb0_E3__3NS_14default_deleteIS1_EEED1B8nn180100Ev(id **a1)
{
  id *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    objc_destroyWeak(v2);
    MEMORY[0x186DBA454](v2, 0xC0C40C9143A96);
  }
  return a1;
}

id **_ZZN8dispatch5asyncIZZZ52__CTStewieDataClient_receivedData_fromConnectionId__EUb_EUb0_E3__3EEvPU28objcproto17OS_dispatch_queue8NSObjectNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  CTStewieMessageAck *v4;
  void *v5;
  id v6;
  CTStewieTransportMessage *v7;
  void *v8;
  id *v10;
  id v11;
  id v12;

  v10 = (id *)a1;
  WeakRetained = (id *)objc_loadWeakRetained((id *)a1);
  v3 = WeakRetained;
  if (WeakRetained && WeakRetained[7] && WeakRetained[8] == (id)1)
  {
    v4 = objc_alloc_init(CTStewieMessageAck);
    -[CTStewieMessageAck setSuccess:](v4, "setSuccess:", 1);
    v12 = 0;
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v4, 1, &v12);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v12;
    if (!v6)
    {
      v7 = -[CTStewieTransportMessage initWithMsgId:]([CTStewieTransportMessage alloc], "initWithMsgId:", *(_QWORD *)(a1 + 8));
      -[CTStewieTransportMessage setData:](v7, "setData:", v5);
      -[CTStewieTransportMessage setMetadata:](v7, "setMetadata:", *(_QWORD *)(a1 + 16));
      v11 = 0;
      objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v7, 1, &v11);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v11;
      if (!v6)
        objc_msgSend(v3[7], "sendData:usingConnection:completion:", v8, 1, *MEMORY[0x1E0CCECE0]);

    }
  }

  return _ZNSt3__110unique_ptrIZZZ52__CTStewieDataClient_receivedData_fromConnectionId__EUb_EUb0_E3__3NS_14default_deleteIS1_EEED1B8nn180100Ev(&v10);
}

void sub_1843105A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a2);
  v7 = v5;

  _ZNSt3__110unique_ptrIZZZ52__CTStewieDataClient_receivedData_fromConnectionId__EUb_EUb0_E3__3NS_14default_deleteIS1_EEED1B8nn180100Ev((id **)va);
  _Unwind_Resume(a1);
}

void sub_1843105EC()
{
  JUMPOUT(0x1843105D8);
}

uint64_t OUTLINED_FUNCTION_5_0(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a2 = a4;
  *(_QWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 12) = 2080;
  *(_QWORD *)(a2 + 14) = result;
  return result;
}

void sub_184310CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184311110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  if (a21 != a16)
  {

  }
  if (a17 != a20)
  {

  }
  if (v30 != v29)
  {

  }
  if (v27 != v28)
  {

  }
  if (v24 != v25)
  {

  }
  _Unwind_Resume(a1);
}

void sub_184311474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431158C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184311788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184311FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184312180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  void *v15;
  id *v16;
  void *v17;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_184312280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1843123DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184312528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184312594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CTStewieStateMonitor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

const __CFString *_GetCallTypeStringForFlag(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 2;
  v1 = v2 >> 1;
  if (v1 > 7)
    return CFSTR("kCTCallTypeNormal");
  else
    return off_1E1531F00[v1];
}

uint64_t _GetCallTypeFlagForString(const void *a1)
{
  if (!a1)
    return 0;
  if (CFEqual(a1, CFSTR("kCTCallTypeVoicemail")))
    return 2;
  if (CFEqual(a1, CFSTR("kCTCallTypeVideoConference")))
    return 4;
  if (CFEqual(a1, CFSTR("kCTCallTypeAudioConference")))
    return 16;
  if (CFEqual(a1, CFSTR("kCTCallTypeVOIP")))
    return 8;
  return CFEqual(a1, CFSTR("kCTCallTypeNormal")) != 0;
}

const __CFString *_GetCallSubTypeString(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("kCTCallSubTypeTelephony");
  if (a1 == 4)
    v1 = CFSTR("kCTCallSubTypeLTE");
  if (a1 == 2)
    return CFSTR("kCTCallSubTypeWifi");
  else
    return v1;
}

uint64_t _GetCallServiceProviderFlagForString(const void *a1)
{
  if (!a1)
    return 0;
  if (CFEqual(a1, CFSTR("kCTCallServiceProviderFaceTime")))
    return 1;
  if (CFEqual(a1, CFSTR("kCTCallServiceProviderAppleCalling")))
    return 2;
  else
    return 0;
}

uint64_t _ExtractCallTypes(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  const void *ValueAtIndex;
  const void *v7;
  CFTypeID v8;

  if (!a1)
    return 0xFFFFFFFFLL;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v3 = Count;
  v4 = 0;
  v5 = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
    if (ValueAtIndex)
    {
      v7 = ValueAtIndex;
      v8 = CFGetTypeID(ValueAtIndex);
      if (v8 == CFStringGetTypeID())
        v5 = _GetCallTypeFlagForString(v7) | v5;
    }
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

__CFString *_CTServerConnectionSIMStatusToSIMStatusString(unsigned int a1)
{
  __CFString **v1;

  if (a1 > 0xC)
    v1 = &kCTSIMSupportSIMStatusReady;
  else
    v1 = (__CFString **)off_1E1531F60[a1];
  return *v1;
}

__CFString *_CTServerConnectionSIMTrayStatusToSIMTrayStatusString(unsigned int a1)
{
  __CFString **v1;

  if (a1 > 3)
    v1 = kCTSIMSupportSIMTrayStatusUnknown;
  else
    v1 = (__CFString **)off_1E1531FC8[a1];
  return *v1;
}

void sub_1843128B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184312978(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184312A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184312B50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184312C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184312D08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184312E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184313038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t getClientKeyForEntitlementType(int a1)
{
  uint64_t result;
  uint64_t *v3;

  result = 0;
  switch(a1)
  {
    case 2:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyFaceTime;
      goto LABEL_19;
    case 3:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyTethering;
      goto LABEL_19;
    case 6:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyVoLTE;
      goto LABEL_19;
    case 7:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyVoWiFi;
      goto LABEL_19;
    case 8:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyThumper;
      goto LABEL_19;
    case 10:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyMultiSIM;
      goto LABEL_19;
    case 11:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeySAWatch;
      goto LABEL_19;
    case 12:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyMultiSIMTransfer;
      goto LABEL_19;
    case 13:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyiPhonePlanTransfer;
      goto LABEL_19;
    case 14:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeySAWatchTransfer;
      goto LABEL_19;
    case 15:
      v3 = (uint64_t *)&kCTCarrierEntitlementKey5GService;
      goto LABEL_19;
    case 16:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyiPadSignup;
      goto LABEL_19;
    case 17:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyCustomQoS;
      goto LABEL_19;
    case 18:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyPrivateNetProvisioning;
      goto LABEL_19;
    case 19:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyNtCarrierService;
      goto LABEL_19;
    case 20:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyHeraService;
      goto LABEL_19;
    case 21:
      v3 = (uint64_t *)&kCTCarrierEntitlementKeyEnhancedThroughput;
LABEL_19:
      result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t _CTServerConnectionCarrierSettingsCopyValue(uint64_t a1, const __CFString *cf, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  CFTypeID v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  void *v15;
  xpc_object_t v16;
  uint64_t v17;
  _QWORD v19[2];
  xpc_object_t object;
  xpc_object_t v21;
  xpc_object_t v22;

  v3 = 0x1600000000;
  v4 = 1;
  if (!a1 || !cf || !a3)
    return v4 | v3;
  v8 = CFGetTypeID(cf);
  if (v8 != CFStringGetTypeID() || CFStringGetLength(cf) < 1)
  {
    v3 = 0x1600000000;
    v4 = 1;
    return v4 | v3;
  }
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = MEMORY[0x1E0C812F8];
  if (v9)
  {
    v11 = v9;
    v22 = v9;
  }
  else
  {
    v11 = xpc_null_create();
    v22 = v11;
    if (!v11)
      goto LABEL_11;
  }
  if (MEMORY[0x186DBAE5C](v11) == v10)
  {
    xpc_retain(v11);
    v12 = v11;
    goto LABEL_13;
  }
LABEL_11:
  v12 = xpc_null_create();
  v22 = v12;
LABEL_13:
  xpc_release(v11);
  v13 = xpc_string_create("kCarrierSettingsGetProperty");
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v12, "kRequest", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v12, "kCarrierSettingsKey", v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v21 = xpc_null_create();
  v17 = SendXpcMessage(a1, &v22, &v21);
  if (MEMORY[0x186DBAE5C](v21) == v10)
  {
    *a3 = 0;
    v19[1] = "kCarrierSettingsKey";
    object = 0;
    v19[0] = &v21;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v19, &object);
    if (MEMORY[0x186DBAE5C](object) != MEMORY[0x1E0C81350])
      *a3 = _CFXPCCreateCFObjectFromXPCObject();
    xpc_release(object);
  }
  else
  {
    syslog(3, "Error copying carrier settings: %d/%d", v17, HIDWORD(v17));
  }
  xpc_release(v21);
  xpc_release(v22);
  v3 = v17 & 0xFFFFFFFF00000000;
  v4 = v17;
  return v4 | v3;
}

uint64_t _CTServerConnectionIsPhoneNumberCredentialValid(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierSettingsIsPhoneNumberCredentialValid", object, "kRequest", &v8);
    xpc_release(object[0]);
    v9 = v8;
    v8 = xpc_null_create();
    xpc_release(v8);
    v8 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v9, &v8);
    if (MEMORY[0x186DBAE5C](v8) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v8;
      object[1] = "kCarrierSettingsIsPhoneNumberCredentialValid";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    else
    {
      *a2 = 0;
    }
    xpc_release(v8);
    xpc_release(v9);
  }
  return v2;
}

unint64_t _CTServerConnectionCopyCarrierBundleInfoArray(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v6;
  xpc_object_t object[2];
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierSettingsGetBundleInfo", object, "kRequest", &v9);
    xpc_release(object[0]);
    v10 = v9;
    v9 = xpc_null_create();
    xpc_release(v9);
    v9 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v10, &v9);
    *a2 = 0;
    if (!HIDWORD(v2) && MEMORY[0x186DBAE5C](v9) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v9;
      object[1] = "kCarrierSettingsBundleInfo";
      v8 = 0;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      if (MEMORY[0x186DBAE5C](v8) != MEMORY[0x1E0C81350])
      {
        object[0] = 0;
        v6 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v6);
        *a2 = object[0];
      }
      xpc_release(v8);
    }
    xpc_release(v9);
    xpc_release(v10);
  }
  return v2;
}

void sub_184313880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184313908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843139A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843139EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184313AB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184313B4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184313C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184313D54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_184313E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184313E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184313ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184313FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843140AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184314208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184314304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1843143B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184314414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843144AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1843145DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184314718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184314838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843148C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18431495C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843149A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184314A68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184314B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184314C48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184314D1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_184314DCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184314E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184314E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184314F68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184315030(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184315130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843151B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184315254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431529C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184315360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843153FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843154C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431554C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843155E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184315630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843156F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184315790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184315880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184315964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_184315A14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184315A68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184315ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184315BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184315C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184315D60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184315E2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184315EE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184315F28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184315FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431609C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843161DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843164E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13, void *a14, void *a15, int a16, char a17, void *a18, void *a19, void *a20,int a21,char a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if ((a13 & 1) != 0)
  {

  }
  if (!v29)

  if ((a17 & 1) != 0)
  {

  }
  if (!v28)

  if ((a22 & 1) != 0)
  {

  }
  if (!v24)

  _Unwind_Resume(a1);
}

void sub_18431661C()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x18431660CLL);
  JUMPOUT(0x184316604);
}

void sub_184316628()
{
  JUMPOUT(0x184316610);
}

void sub_1843166A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431670C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184316798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1843168EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184316A58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184316B88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184316BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184316C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184316CA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184316D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184316EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184317160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if ((a13 & 1) != 0)
  {

  }
  if (!a15)

  _Unwind_Resume(a1);
}

void sub_1843172C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431733C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843173DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18431755C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843176DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431783C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843178C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184317960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843179A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184317A6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184317B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184317BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184317D08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_184317DD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184317E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184317E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184317F70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431804C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431819C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184318378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if ((a13 & 1) != 0)
  {

  }
  if (!v16)

  _Unwind_Resume(a1);
}

void sub_184318498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843184F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184318570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184318688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843187A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843188F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184318A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_184318AD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184318B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184318B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184318C70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184318D4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184318E58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184318EB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184318F34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184318F7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184318FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1843190AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18431913C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184319200(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431925C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843192DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184319324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184319394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184319454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843194E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843195F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184319950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184319A64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184319AC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184319B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184319DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18431A310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Lazuli::SuggestedActionOpenUrlInWebView::~SuggestedActionOpenUrlInWebView(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void Lazuli::SuggestedActionComposeText::~SuggestedActionComposeText(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

Lazuli::SuggestedActionShowLocation *Lazuli::SuggestedActionShowLocation::SuggestedActionShowLocation(Lazuli::SuggestedActionShowLocation *this, const Lazuli::SuggestedActionShowLocation *a2)
{
  __int128 v4;

  v4 = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)this = v4;
  std::__optional_copy_base<Lazuli::SuggestedActionShowQuery,false>::__optional_copy_base[abi:nn180100]((std::string *)this + 1, (uint64_t)a2 + 24);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 64), (__int128 *)a2 + 4);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)this + 4, (__int128 *)a2 + 6);
  return this;
}

void sub_18431A4EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(_BYTE *)(v2 + 88))
  {
    if (*(char *)(v2 + 87) < 0)
      operator delete(*v3);
  }
  std::__optional_destruct_base<Lazuli::SuggestedActionShowQuery,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void Lazuli::SuggestedActionShowLocation::~SuggestedActionShowLocation(void **this)
{
  if (*((_BYTE *)this + 120) && *((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((_BYTE *)this + 88) && *((char *)this + 87) < 0)
    operator delete(this[8]);
  std::__optional_destruct_base<Lazuli::SuggestedActionShowQuery,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(this + 3));
}

std::string *Lazuli::SuggestedActionDialVideoCall::SuggestedActionDialVideoCall(std::string *this, const Lazuli::SuggestedActionDialVideoCall *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 1, (__int128 *)((char *)a2 + 24));
  return this;
}

void sub_18431A5D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void Lazuli::SuggestedActionDialVideoCall::~SuggestedActionDialVideoCall(void **this)
{
  if (*((_BYTE *)this + 48) && *((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *Lazuli::SuggestedActionDialEnrichedCall::SuggestedActionDialEnrichedCall(std::string *this, const Lazuli::SuggestedActionDialEnrichedCall *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 1, (__int128 *)((char *)a2 + 24));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 56), (__int128 *)((char *)a2 + 56));
  return this;
}

void sub_18431A6A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void Lazuli::SuggestedActionDialEnrichedCall::~SuggestedActionDialEnrichedCall(void **this)
{
  if (*((_BYTE *)this + 80) && *((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((_BYTE *)this + 48) && *((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *Lazuli::SuggestedActionDialPhoneNumber::SuggestedActionDialPhoneNumber(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 1, (__int128 *)((char *)a2 + 24));
  return this;
}

void sub_18431A798(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void Lazuli::SuggestedActionCalendar::~SuggestedActionCalendar(void **this)
{
  if (*((_BYTE *)this + 128) && *((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((_BYTE *)this + 96) && *((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void sub_18431A934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431A9BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18431AA58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431AAA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431AB64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431ABF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431ACEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431AE14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18431AEB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431AF0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431AF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18431B0E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18431B334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  void *v29;

  _Unwind_Resume(a1);
}

void Lazuli::ChatBotSuggestedAction::~ChatBotSuggestedAction(Lazuli::ChatBotSuggestedAction *this)
{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 52);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E1531FE8[v2])(&v3, (char *)this + 72);
  *((_DWORD *)this + 52) = -1;
  if (*((_BYTE *)this + 56) && *((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void sub_18431B50C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431B5D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431B68C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431B6D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431B7D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18431B8B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431B994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431BA1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18431BAB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431BB00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431BBC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431BC58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431BD48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431BE1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18431BECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431BF20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431BF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18431C0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18431C1BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431C310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431C400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18431C4A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431C4F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431C578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18431C6C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18431C8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44)
{
  void *v44;

  _Unwind_Resume(a1);
}

void Lazuli::ChatBotMenuL2::~ChatBotMenuL2(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<Lazuli::ChatBotMenuL2Content>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void sub_18431CA84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431CB58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18431CC08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431CC5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431CCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18431CDE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18431CEF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431D04C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431D13C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18431D1DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431D230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431D2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18431D404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18431D60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44)
{
  void *v44;

  _Unwind_Resume(a1);
}

void Lazuli::ChatBotMenuL1::~ChatBotMenuL1(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<Lazuli::ChatBotMenuL1Content>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void sub_18431D798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431D820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18431D8BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431D904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431DA08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18431DAE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431DC14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431DD34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_18431DDFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431DE5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431DED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18431DFF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431E0E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431E250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431E370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_18431E438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431E498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431E510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18431E630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431E71C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431E83C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431E8C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18431E960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431E9A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431EA6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431EB08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431EBD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431EC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431ED50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431ED98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18431EE5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18431EF18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<Lazuli::SuggestedActionShowQuery,false>::__optional_copy_base[abi:nn180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[8] = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](a1, (__int128 *)a2);
    a1[1].__r_.__value_.__s.__data_[8] = 1;
  }
  return a1;
}

void sub_18431EF90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<Lazuli::SuggestedActionShowQuery,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<Lazuli::SuggestedActionShowQuery,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a1 + 24) && *(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_18431F010(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

std::string *Lazuli::ChatBotCreateCalendarEvent::ChatBotCreateCalendarEvent(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 3, (__int128 *)((char *)a2 + 72));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 104), (__int128 *)((char *)a2 + 104));
  return this;
}

void sub_18431F15C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<Lazuli::ChatBotPostbackData,false>::__optional_copy_base[abi:nn180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_18431F1F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::SuggestedActionOpenUrlInWebView,Lazuli::SuggestedActionOpenUrlInApplication,Lazuli::SuggestedActionComposeText,Lazuli::SuggestedActionComposeAudioRecording,Lazuli::SuggestedActionComposeVideoRecording,Lazuli::SuggestedActionShowLocation,Lazuli::SuggestedActionRequestLocationPush,Lazuli::SuggestedActionCalendar,Lazuli::SuggestedActionDialVideoCall,Lazuli::SuggestedActionDialEnrichedCall,Lazuli::SuggestedActionDialPhoneNumber,Lazuli::SuggestedActionDevice,Lazuli::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 136) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<Lazuli::SuggestedActionOpenUrlInWebView,Lazuli::SuggestedActionOpenUrlInApplication,Lazuli::SuggestedActionComposeText,Lazuli::SuggestedActionComposeAudioRecording,Lazuli::SuggestedActionComposeVideoRecording,Lazuli::SuggestedActionShowLocation,Lazuli::SuggestedActionRequestLocationPush,Lazuli::SuggestedActionCalendar,Lazuli::SuggestedActionDialVideoCall,Lazuli::SuggestedActionDialEnrichedCall,Lazuli::SuggestedActionDialPhoneNumber,Lazuli::SuggestedActionDevice,Lazuli::SuggestedActionSettings>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::SuggestedActionOpenUrlInWebView,Lazuli::SuggestedActionOpenUrlInApplication,Lazuli::SuggestedActionComposeText,Lazuli::SuggestedActionComposeAudioRecording,Lazuli::SuggestedActionComposeVideoRecording,Lazuli::SuggestedActionShowLocation,Lazuli::SuggestedActionRequestLocationPush,Lazuli::SuggestedActionCalendar,Lazuli::SuggestedActionDialVideoCall,Lazuli::SuggestedActionDialEnrichedCall,Lazuli::SuggestedActionDialPhoneNumber,Lazuli::SuggestedActionDevice,Lazuli::SuggestedActionSettings>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_18431F248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 136);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E1531FE8[v15])(&a13, v13);
  *(_DWORD *)(v13 + 136) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<Lazuli::SuggestedActionOpenUrlInWebView,Lazuli::SuggestedActionOpenUrlInApplication,Lazuli::SuggestedActionComposeText,Lazuli::SuggestedActionComposeAudioRecording,Lazuli::SuggestedActionComposeVideoRecording,Lazuli::SuggestedActionShowLocation,Lazuli::SuggestedActionRequestLocationPush,Lazuli::SuggestedActionCalendar,Lazuli::SuggestedActionDialVideoCall,Lazuli::SuggestedActionDialEnrichedCall,Lazuli::SuggestedActionDialPhoneNumber,Lazuli::SuggestedActionDevice,Lazuli::SuggestedActionSettings>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::SuggestedActionOpenUrlInWebView,Lazuli::SuggestedActionOpenUrlInApplication,Lazuli::SuggestedActionComposeText,Lazuli::SuggestedActionComposeAudioRecording,Lazuli::SuggestedActionComposeVideoRecording,Lazuli::SuggestedActionShowLocation,Lazuli::SuggestedActionRequestLocationPush,Lazuli::SuggestedActionCalendar,Lazuli::SuggestedActionDialVideoCall,Lazuli::SuggestedActionDialEnrichedCall,Lazuli::SuggestedActionDialPhoneNumber,Lazuli::SuggestedActionDevice,Lazuli::SuggestedActionSettings>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 136);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E1531FE8[v4])(&v7, result);
  *(_DWORD *)(v3 + 136) = -1;
  v5 = *(unsigned int *)(a2 + 136);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E1532050 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 136) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 120) && *(char *)(a2 + 119) < 0)
    operator delete(*(void **)(a2 + 96));
  if (*(_BYTE *)(a2 + 88) && *(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  return std::__optional_destruct_base<Lazuli::SuggestedActionShowQuery,false>::~__optional_destruct_base[abi:nn180100](a2 + 24);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 128) && *(char *)(a2 + 127) < 0)
    operator delete(*(void **)(a2 + 104));
  if (*(_BYTE *)(a2 + 96) && *(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48) && *(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 80) && *(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  if (*(_BYTE *)(a2 + 48) && *(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48) && *(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,Lazuli::SuggestedActionOpenUrlInWebView>::__alt[abi:nn180100]<Lazuli::SuggestedActionOpenUrlInWebView const&>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, __int128 *a3)
{
  return std::__variant_detail::__alt<2ul,Lazuli::SuggestedActionComposeText>::__alt[abi:nn180100]<Lazuli::SuggestedActionComposeText const&>(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  return std::__variant_detail::__alt<5ul,Lazuli::SuggestedActionShowLocation>::__alt[abi:nn180100]<Lazuli::SuggestedActionShowLocation const&>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, __int128 *a3)
{
  return Lazuli::ChatBotCreateCalendarEvent::ChatBotCreateCalendarEvent(this, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, __int128 *a3)
{
  return std::__variant_detail::__alt<8ul,Lazuli::SuggestedActionDialVideoCall>::__alt[abi:nn180100]<Lazuli::SuggestedActionDialVideoCall const&>(this, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, __int128 *a3)
{
  return std::__variant_detail::__alt<9ul,Lazuli::SuggestedActionDialEnrichedCall>::__alt[abi:nn180100]<Lazuli::SuggestedActionDialEnrichedCall const&>(this, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(int a1, std::string *this, __int128 *a3)
{
  return std::__variant_detail::__alt<10ul,Lazuli::SuggestedActionDialPhoneNumber>::__alt[abi:nn180100]<Lazuli::SuggestedActionDialPhoneNumber const&>(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli31SuggestedActionOpenUrlInWebViewENS8_35SuggestedActionOpenUrlInApplicationENS8_26SuggestedActionComposeTextENS8_36SuggestedActionComposeAudioRecordingENS8_36SuggestedActionComposeVideoRecordingENS8_27SuggestedActionShowLocationENS8_34SuggestedActionRequestLocationPushENS8_23SuggestedActionCalendarENS8_28SuggestedActionDialVideoCallENS8_31SuggestedActionDialEnrichedCallENS8_30SuggestedActionDialPhoneNumberENS8_21SuggestedActionDeviceENS8_23SuggestedActionSettingsEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__alt<0ul,Lazuli::SuggestedActionOpenUrlInWebView>::__alt[abi:nn180100]<Lazuli::SuggestedActionOpenUrlInWebView const&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_18431F734(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<2ul,Lazuli::SuggestedActionComposeText>::__alt[abi:nn180100]<Lazuli::SuggestedActionComposeText const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_18431F7C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<5ul,Lazuli::SuggestedActionShowLocation>::__alt[abi:nn180100]<Lazuli::SuggestedActionShowLocation const&>(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  std::__optional_copy_base<Lazuli::SuggestedActionShowQuery,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 24), (uint64_t)a2 + 24);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 64), a2 + 4);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 96), a2 + 6);
  return a1;
}

void sub_18431F84C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(_BYTE *)(v2 + 88))
  {
    if (*(char *)(v2 + 87) < 0)
      operator delete(*v3);
  }
  std::__optional_destruct_base<Lazuli::SuggestedActionShowQuery,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::__variant_detail::__alt<8ul,Lazuli::SuggestedActionDialVideoCall>::__alt[abi:nn180100]<Lazuli::SuggestedActionDialVideoCall const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 1, (__int128 *)((char *)a2 + 24));
  return this;
}

void sub_18431F8D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<9ul,Lazuli::SuggestedActionDialEnrichedCall>::__alt[abi:nn180100]<Lazuli::SuggestedActionDialEnrichedCall const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 1, (__int128 *)((char *)a2 + 24));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 56), (__int128 *)((char *)a2 + 56));
  return this;
}

void sub_18431F964(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48) && *(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<10ul,Lazuli::SuggestedActionDialPhoneNumber>::__alt[abi:nn180100]<Lazuli::SuggestedActionDialPhoneNumber const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 1, (__int128 *)((char *)a2 + 24));
  return this;
}

void sub_18431F9F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 216) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_18431FA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 216);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E15320B8[v15])(&a13, v13);
  *(_DWORD *)(v13 + 216) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 216);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E15320B8[v4])(&v7, result);
  *(_DWORD *)(v3 + 216) = -1;
  v5 = *(unsigned int *)(a2 + 216);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E15320C8 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 216) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli22ChatBotSuggestedActionENS8_21ChatBotSuggestedReplyEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(unsigned int *)(a2 + 208);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E1531FE8[v3])(&v4, a2 + 72);
  *(_DWORD *)(a2 + 208) = -1;
  if (*(_BYTE *)(a2 + 56) && *(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli22ChatBotSuggestedActionENS8_21ChatBotSuggestedReplyEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48) && *(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli22ChatBotSuggestedActionENS8_21ChatBotSuggestedReplyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,Lazuli::ChatBotSuggestedAction>::__alt[abi:nn180100]<Lazuli::ChatBotSuggestedAction const&>(a2, a3);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli22ChatBotSuggestedActionENS8_21ChatBotSuggestedReplyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(int a1, std::string *this, __int128 *a3)
{
  return std::__variant_detail::__alt<1ul,Lazuli::ChatBotSuggestedReply>::__alt[abi:nn180100]<Lazuli::ChatBotSuggestedReply const&>(this, a3);
}

uint64_t std::__variant_detail::__alt<0ul,Lazuli::ChatBotSuggestedAction>::__alt[abi:nn180100]<Lazuli::ChatBotSuggestedAction const&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  std::__optional_copy_base<Lazuli::ChatBotPostbackData,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 32), (__int128 *)(a2 + 32));
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::SuggestedActionOpenUrlInWebView,Lazuli::SuggestedActionOpenUrlInApplication,Lazuli::SuggestedActionComposeText,Lazuli::SuggestedActionComposeAudioRecording,Lazuli::SuggestedActionComposeVideoRecording,Lazuli::SuggestedActionShowLocation,Lazuli::SuggestedActionRequestLocationPush,Lazuli::SuggestedActionCalendar,Lazuli::SuggestedActionDialVideoCall,Lazuli::SuggestedActionDialEnrichedCall,Lazuli::SuggestedActionDialPhoneNumber,Lazuli::SuggestedActionDevice,Lazuli::SuggestedActionSettings>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1 + 72, a2 + 72);
  return a1;
}

void sub_18431FC68(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;

  if (v2[56] && v2[55] < 0)
    operator delete(*v3);
  if (v2[31] < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__alt<1ul,Lazuli::ChatBotSuggestedReply>::__alt[abi:nn180100]<Lazuli::ChatBotSuggestedReply const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__optional_copy_base<Lazuli::ChatBotPostbackData,false>::__optional_copy_base[abi:nn180100](this + 1, (__int128 *)((char *)a2 + 24));
  return this;
}

void sub_18431FCFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<Lazuli::ChatBotMenuL2Content>::__init_with_size[abi:nn180100]<Lazuli::ChatBotMenuL2Content*,Lazuli::ChatBotMenuL2Content*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    std::vector<Lazuli::ChatBotMenuL2Content>::__vallocate[abi:nn180100](result, a4);
    return (_QWORD *)std::vector<Lazuli::ChatBotMenuL2Content>::__construct_at_end<Lazuli::ChatBotMenuL2Content*,Lazuli::ChatBotMenuL2Content*>(v6, a2, a3);
  }
  return result;
}

char *std::vector<Lazuli::ChatBotMenuL2Content>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x11A7B9611A7B962)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::ChatBotMenuL2Content>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[232 * v4];
  return result;
}

uint64_t std::vector<Lazuli::ChatBotMenuL2Content>::__construct_at_end<Lazuli::ChatBotMenuL2Content*,Lazuli::ChatBotMenuL2Content*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(v4 + v7) = *(_DWORD *)(a2 + v7);
      result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor(v4 + v7 + 8, a2 + v7 + 8);
      v7 += 232;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(v3 + 8) = v4;
  return result;
}

void sub_18431FE28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::ChatBotMenuL2Content>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(232 * a2);
}

void std::vector<Lazuli::ChatBotMenuL2Content>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Lazuli::ChatBotMenuL2Content>::__clear[abi:nn180100](v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<Lazuli::ChatBotMenuL2Content>::__clear[abi:nn180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = result;
  v2 = *result;
  v3 = result[1];
  if (v3 != *result)
  {
    do
    {
      v4 = *(unsigned int *)(v3 - 8);
      if ((_DWORD)v4 != -1)
        result = (_QWORD *)((uint64_t (*)(char *, uint64_t))off_1E15320B8[v4])(&v5, v3 - 224);
      *(_DWORD *)(v3 - 8) = -1;
      v3 -= 232;
    }
    while (v3 != v2);
  }
  v1[1] = v2;
  return result;
}

_QWORD *std::vector<Lazuli::ChatBotMenuL1Content>::__init_with_size[abi:nn180100]<Lazuli::ChatBotMenuL1Content*,Lazuli::ChatBotMenuL1Content*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    std::vector<Lazuli::ChatBotMenuL1Content>::__vallocate[abi:nn180100](result, a4);
    return (_QWORD *)std::vector<Lazuli::ChatBotMenuL1Content>::__construct_at_end<Lazuli::ChatBotMenuL1Content*,Lazuli::ChatBotMenuL1Content*>(v6, a2, a3);
  }
  return result;
}

char *std::vector<Lazuli::ChatBotMenuL1Content>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x108421084210843)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::ChatBotMenuL1Content>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[248 * v4];
  return result;
}

uint64_t std::vector<Lazuli::ChatBotMenuL1Content>::__construct_at_end<Lazuli::ChatBotMenuL1Content*,Lazuli::ChatBotMenuL1Content*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(v4 + v7) = *(_DWORD *)(a2 + v7);
      result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedChip,Lazuli::ChatBotMenuL2>,(std::__variant_detail::_Trait)1>::__copy_constructor(v4 + v7 + 8, a2 + v7 + 8);
      v7 += 248;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(v3 + 8) = v4;
  return result;
}

void sub_184320048(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::ChatBotMenuL1Content>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(248 * a2);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedChip,Lazuli::ChatBotMenuL2>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 232) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedChip,Lazuli::ChatBotMenuL2>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedChip,Lazuli::ChatBotMenuL2>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_1843200D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 232);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E15320D8[v15])(&a13, v13);
  *(_DWORD *)(v13 + 232) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedChip,Lazuli::ChatBotMenuL2>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedChip,Lazuli::ChatBotMenuL2>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 232);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E15320D8[v4])(&v7, result);
  *(_DWORD *)(v3 + 232) = -1;
  v5 = *(unsigned int *)(a2 + 232);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E15320E8 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 232) = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli20ChatBotSuggestedChipENS8_13ChatBotMenuL2EEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 224);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E15320B8[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 224) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN6Lazuli20ChatBotSuggestedChipENS8_13ChatBotMenuL2EEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 24);
  std::vector<Lazuli::ChatBotMenuL2Content>::__destroy_vector::operator()[abi:nn180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli20ChatBotSuggestedChipENS8_13ChatBotMenuL2EEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
  return std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(a2 + 2), (uint64_t)(a3 + 2));
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN6Lazuli20ChatBotSuggestedChipENS8_13ChatBotMenuL2EEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(int a1, std::string *this, __int128 *a3)
{
  return std::__variant_detail::__alt<1ul,Lazuli::ChatBotMenuL2>::__alt[abi:nn180100]<Lazuli::ChatBotMenuL2 const&>(this, a3);
}

std::string *std::__variant_detail::__alt<1ul,Lazuli::ChatBotMenuL2>::__alt[abi:nn180100]<Lazuli::ChatBotMenuL2 const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<Lazuli::ChatBotMenuL2Content>::__init_with_size[abi:nn180100]<Lazuli::ChatBotMenuL2Content*,Lazuli::ChatBotMenuL2Content*>(this[1].__r_.__value_.__r.__words, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0x34F72C234F72C235 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_1843202C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<Lazuli::ChatBotMenuL1Content>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Lazuli::ChatBotMenuL1Content>::__clear[abi:nn180100](v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<Lazuli::ChatBotMenuL1Content>::__clear[abi:nn180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = result;
  v2 = *result;
  v3 = result[1];
  if (v3 != *result)
  {
    do
    {
      v4 = *(unsigned int *)(v3 - 8);
      if ((_DWORD)v4 != -1)
        result = (_QWORD *)((uint64_t (*)(char *, uint64_t))off_1E15320D8[v4])(&v5, v3 - 240);
      *(_DWORD *)(v3 - 8) = -1;
      v3 -= 248;
    }
    while (v3 != v2);
  }
  v1[1] = v2;
  return result;
}

const char *CTEmergencyModeTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return "CTEmergencyModeUnknown";
  else
    return off_1E15320F8[a1 - 1];
}

const char *CTEmergencyModeStateAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return "CTEmergencyModeStateInCall";
  else
    return off_1E1532120[a1 - 1];
}

void sub_184320804(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843208FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184320978(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184320B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184320C24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionPerformInternalVinylOperation(uint64_t a1, ctu *a2, _QWORD *a3)
{
  xpc_object_t v6;
  const void *v7;
  xpc_object_t v8;
  uint64_t v9;
  const object *v10;
  xpc_object_t v12;
  CFTypeRef cf;
  xpc_object_t value;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kVinylOperationSync", &object, "kRequest", &v15);
  xpc_release(object);
  v6 = v15;
  v16 = v15;
  v15 = xpc_null_create();
  xpc_release(v15);
  if (a2)
  {
    ctu::cf_to_xpc(a2, v7);
    xpc_dictionary_set_value(v6, "kVinylOperation", value);
    v8 = value;
    value = xpc_null_create();
    xpc_release(v8);
    xpc_release(value);
    value = 0;
  }
  object = xpc_null_create();
  v9 = SendXpcMessage(a1, &v16, &object);
  if (a3)
  {
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](object) == MEMORY[0x1E0C812F8])
    {
      v15 = 0;
      v12 = object;
      if (object)
        xpc_retain(object);
      else
        v12 = xpc_null_create();
      xpc::bridge((xpc *)&v12, v10);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v15, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v12);
      *a3 = v15;
    }
  }
  xpc_release(object);
  xpc_release(v16);
  return v9;
}

void sub_184320E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, CFTypeRef cf, uint64_t a11, uint64_t a12, xpc_object_t a13, xpc_object_t a14)
{
  if (cf)
    CFRelease(cf);
  xpc_release(object);
  xpc_release(a14);
  xpc_release(a13);
  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionDoModuleOperation(uint64_t a1, char *a2, void *a3, void *a4, _QWORD *a5)
{
  uint64_t v5;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t object;

  v5 = 0x1600000001;
  if (a1 && a3 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kModuleOperation", &object, "kRequest", &v16);
    xpc_release(object);
    xpc::dict_creator::operator()<char const*>(a2, &v16, "kModuleOperation", &v17);
    v15 = a3;
    xpc_retain(a3);
    xpc::dict_creator::operator()<xpc::object>(&v17, "kModuleResourcePath", &v15, &v18);
    v14 = a4;
    xpc_retain(a4);
    xpc::dict_creator::operator()<xpc::object>(&v18, "kModuleValue", &v14, &object);
    v19 = object;
    object = xpc_null_create();
    xpc_release(object);
    object = 0;
    xpc_release(v14);
    v14 = 0;
    xpc_release(v18);
    v18 = 0;
    xpc_release(v15);
    v15 = 0;
    xpc_release(v17);
    v17 = 0;
    xpc_release(v16);
    object = xpc_null_create();
    v5 = SendXpcMessage(a1, &v19, &object);
    v11 = object;
    if (a5)
    {
      *a5 = 0;
      if (MEMORY[0x186DBAE5C](v11) == MEMORY[0x1E0C812F8])
      {
        v11 = xpc_null_create();
        v12 = object;
        object = v11;
        *a5 = v12;
      }
      else
      {
        v11 = object;
      }
    }
    xpc_release(v11);
    xpc_release(v19);
  }
  return v5;
}

void sub_184320FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(a15);
  _Unwind_Resume(a1);
}

void xpc::dict_creator::operator()<xpc::object>(xpc_object_t *a1@<X0>, const char *a2@<X1>, xpc_object_t *a3@<X2>, xpc_object_t *a4@<X8>)
{
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;

  v7 = *a3;
  if (*a3)
  {
    xpc_retain(*a3);
LABEL_4:
    xpc_retain(v7);
    v8 = v7;
    goto LABEL_5;
  }
  v7 = xpc_null_create();
  if (v7)
    goto LABEL_4;
  v8 = xpc_null_create();
LABEL_5:
  xpc_dictionary_set_value(*a1, a2, v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = *a1;
  *a4 = *a1;
  if (v10)
    xpc_retain(v10);
  else
    *a4 = xpc_null_create();
  xpc_release(v7);
}

uint64_t _CTServerConnectionDoCSIPropertyOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  xpc_object_t *v10;
  xpc_object_t object[2];
  __int128 v13;
  uint64_t v14;
  std::string v15;
  std::string v16;
  std::string v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  void *v21[2];
  uint64_t v22;

  v4 = 0x1600000001;
  if (a1)
  {
    v6 = *(unsigned __int8 *)(a2 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(a2 + 8);
    if (v6)
    {
      v20 = 0;
      v10 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)v21);
      xpc::dict_creator::operator()<char const*>("kCSIPropertyOperation", v10, "kRequest", &v18);
      xpc_release(v21[0]);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v17 = *(std::string *)a2;
      xpc::dict_creator::operator()<std::string>((char *)&v17, &v18, "kCSIPropertyOperation", &v19);
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v16 = *(std::string *)a3;
      xpc::dict_creator::operator()<std::string>((char *)&v16, &v19, "kCSIPropertyName", object);
      if (*(char *)(a4 + 23) < 0)
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
      else
        v15 = *(std::string *)a4;
      xpc::dict_creator::operator()<std::string>((char *)&v15, object, "kCSIPropertyValue", (xpc_object_t *)&v13);
      v20 = (xpc_object_t)v13;
      *(_QWORD *)&v13 = xpc_null_create();
      xpc_release((xpc_object_t)v13);
      *(_QWORD *)&v13 = 0;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      xpc_release(object[0]);
      object[0] = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      xpc_release(v19);
      v19 = 0;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      xpc_release(v18);
      v19 = xpc_null_create();
      v4 = SendXpcMessage(a1, &v20, &v19);
      if (MEMORY[0x186DBAE5C](v19) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(v19, "kCSIPropertyValue"))
      {
        object[0] = &v19;
        object[1] = "kCSIPropertyValue";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v18);
        v21[0] = 0;
        v21[1] = 0;
        v22 = 0;
        xpc::dyn_cast_or_default();
        if (SHIBYTE(v22) < 0)
          operator delete(v21[0]);
        if (*(char *)(a4 + 23) < 0)
          operator delete(*(void **)a4);
        *(_OWORD *)a4 = v13;
        *(_QWORD *)(a4 + 16) = v14;
        HIBYTE(v14) = 0;
        LOBYTE(v13) = 0;
        xpc_release(v18);
      }
      xpc_release(v19);
      xpc_release(v20);
    }
  }
  return v4;
}

void sub_184321348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 49) < 0)
    operator delete(*(void **)(v31 - 72));
  xpc_release(*(xpc_object_t *)(v31 - 96));
  xpc_release(*(xpc_object_t *)(v31 - 88));
  xpc_release(*(xpc_object_t *)(v31 - 80));
  _Unwind_Resume(a1);
}

void xpc::dict_creator::operator()<std::string>(char *string@<X2>, xpc_object_t *a2@<X0>, const char *a3@<X1>, xpc_object_t *a4@<X8>)
{
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;

  if (string[23] < 0)
    string = *(char **)string;
  v7 = xpc_string_create(string);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    xpc_retain(v7);
    v8 = v7;
  }
  else
  {
    v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, a3, v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = *a2;
  *a4 = *a2;
  if (v10)
    xpc_retain(v10);
  else
    *a4 = xpc_null_create();
  xpc_release(v7);
}

uint64_t sMmsPduLog(void)
{
  if (sMmsPduLog(void)::once != -1)
    dispatch_once(&sMmsPduLog(void)::once, &__block_literal_global_29);
  return sMmsPduLog(void)::logger;
}

os_log_t ___Z10sMmsPduLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.CoreTelephony", "msg.mms.pdu");
  sMmsPduLog(void)::logger = (uint64_t)result;
  return result;
}

uint64_t _CTServerConnectionCellMonitorStart(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCellMonitorStart", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionCellMonitorStop(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCellMonitorStop", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionCellMonitorGetCellCount(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCellMonitorGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v8 = "kCellMonitorCellCount";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object = &v10;
      v8 = "kCellMonitorCellCount";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionCellMonitorGetCellInfo(uint64_t a1, unsigned int a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v4;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v15;
  xpc_object_t object;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;

  v4 = 0x1600000001;
  if (a1 && a3 && a4)
  {
    *a3 = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCellMonitorGetCellInfo", &object, "kRequest", &v19);
    xpc_release(object);
    v9 = v19;
    v20 = v19;
    v19 = xpc_null_create();
    xpc_release(v19);
    v10 = xpc_int64_create(a2);
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kCellMonitorCell", v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    v19 = xpc_null_create();
    v4 = SendXpcMessage(a1, &v20, &v19);
    v12 = MEMORY[0x186DBAE5C](v19);
    v13 = MEMORY[0x1E0C812F8];
    if (v12 == MEMORY[0x1E0C812F8])
    {
      object = &v19;
      v17 = "kCellMonitorCellInfo";
      v18 = 0;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)&object, &v18);
      if (MEMORY[0x186DBAE5C](v18) == v13)
      {
        *a3 = 1;
        object = &v18;
        v17 = "kCellMonitorCellInfoMcc";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)a4 = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoMnc";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 4) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoLac";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 8) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoCi";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 12) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoBsic";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 16) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoFreq";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 20) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoRxLev";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 24) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoC1";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 28) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoC2";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 32) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoTa";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 36) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoTaTimestamp";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_QWORD *)(a4 + 40) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
      }
      xpc_release(v18);
    }
    xpc_release(v19);
    xpc_release(v20);
  }
  return v4;
}

uint64_t _CTServerConnectionCellMonitorGetUmtsCellCount(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCellMonitorGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v8 = "kCellMonitorUmtsCellCount";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object = &v10;
      v8 = "kCellMonitorUmtsCellCount";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionCellMonitorGetUmtsCellInfo(uint64_t a1, unsigned int a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v4;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v15;
  xpc_object_t object;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;

  v4 = 0x1600000001;
  if (a1 && a3 && a4)
  {
    *a3 = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCellMonitorGetCellInfo", &object, "kRequest", &v19);
    xpc_release(object);
    v9 = v19;
    v20 = v19;
    v19 = xpc_null_create();
    xpc_release(v19);
    v10 = xpc_int64_create(a2);
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kCellMonitorUmtsCell", v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    v19 = xpc_null_create();
    v4 = SendXpcMessage(a1, &v20, &v19);
    v12 = MEMORY[0x186DBAE5C](v19);
    v13 = MEMORY[0x1E0C812F8];
    if (v12 == MEMORY[0x1E0C812F8])
    {
      object = &v19;
      v17 = "kCellMonitorCellInfo";
      v18 = 0;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)&object, &v18);
      if (MEMORY[0x186DBAE5C](v18) == v13)
      {
        *a3 = 1;
        object = &v18;
        v17 = "kCellMonitorCellInfoMcc";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)a4 = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoMnc";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 4) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoLac";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 8) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoCi";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 12) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoUarfcn";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 48) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoPsc";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 52) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoRscp";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 56) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        object = &v18;
        v17 = "kCellMonitorCellInfoEcn0";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *(_DWORD *)(a4 + 60) = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
      }
      xpc_release(v18);
    }
    xpc_release(v19);
    xpc_release(v20);
  }
  return v4;
}

void sub_1843223A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184322710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;

  MEMORY[0x186DBA1B4](&a11);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v38 - 73) < 0)
    operator delete(*(void **)(v38 - 96));

  _Unwind_Resume(a1);
}

void sub_184322B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;

  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1843236FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 113) < 0)
    operator delete(*(void **)(v26 - 136));

  _Unwind_Resume(a1);
}

NSString *_mimeEncodeWithEncodingHint(NSString *a1, uint64_t a2)
{
  NSString *v3;
  NSString *v4;
  void *v5;

  v3 = a1;
  if (v3 && _mimeBundleLoadFailed != 1 && ((_mimeBundleLoaded & 1) != 0 || (_loadMimeBundle() & 1) != 0))
  {
    -[NSString mf_encodedHeaderDataWithEncodingHint:](v3, "mf_encodedHeaderDataWithEncodingHint:", a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (NSString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v5, 1);

  }
  else
  {
    v4 = v3;
  }

  return v4;
}

void sub_184323A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184323ADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184324318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a15);

  MEMORY[0x186DBA1B4](va);
  _Unwind_Resume(a1);
}

void addRecipientsFromMMSWithHeader(const char *a1, MMSMessage *a2, CTMessage *a3)
{
  CTMessage *v5;
  char *v6;
  unint64_t v7;
  unsigned int v8;
  char *v9;
  void *v10;
  void *__p[2];
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = a3;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  MMSHeaderContainer::allHeadersWithName((uint64_t)a2, a1, &v13);
  v6 = v14;
  if (v14 != v13)
  {
    v7 = 0;
    v8 = 1;
    v6 = v13;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      v12 = 0;
      if ((*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)&v6[8 * v7] + 72))(*(_QWORD *)&v6[8 * v7], __p))
      {
        if (v12 >= 0)
          v9 = (char *)__p;
        else
          v9 = (char *)__p[0];
        stripAddressType(v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[CTMessage addRecipient:](v5, "addRecipient:", v10);

      }
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
      v7 = v8;
      v6 = v13;
      ++v8;
    }
    while (v7 < (v14 - v13) >> 3);
  }
  if (v6)
  {
    v14 = v6;
    operator delete(v6);
  }

}

void sub_184324610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  void *v16;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

NSString *_mimeDecode(NSString *a1)
{
  NSString *v1;
  NSString *v2;
  NSString *v3;

  v1 = a1;
  if (v1 && (_mimeBundleLoadFailed & 1) == 0 && ((_mimeBundleLoaded & 1) != 0 || (_loadMimeBundle() & 1) != 0))
  {
    -[NSString mf_decodeMimeHeaderValueWithCharsetHint:](v1, "mf_decodeMimeHeaderValueWithCharsetHint:", 0);
    v2 = (NSString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = v1;
  }
  v3 = v2;

  return v3;
}

void sub_1843246C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id stripAddressType(char *a1)
{
  char *v2;
  void *v3;

  v2 = strchr(a1, 47);
  if (strchr(a1, 64) || !v2)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", a1, v2 - a1, 4);
  }
  return v3;
}

uint64_t _loadMimeBundle(void)
{
  void *v0;
  void *v1;
  char *v2;
  uint64_t v3;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithPath:", CFSTR("/System/Library/PrivateFrameworks/MIME.framework"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  v2 = &_mimeBundleLoadFailed;
  if (v0 && objc_msgSend(v0, "load"))
    v2 = &_mimeBundleLoaded;
  *v2 = 1;
  v3 = _mimeBundleLoaded;

  return v3;
}

void sub_1843247AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t createUuidBytes(xpc_object_t *a1)
{
  void *bytes_ptr;
  uint64_t v3;
  xpc_object_t v4;
  uint64_t v5;
  const __CFAllocator *v7;
  const __CFString *v8;
  const __CFUUID *v9;
  void *v10[2];
  uint64_t v11;
  void *__p;
  uint64_t v13;
  uint64_t v14;

  if (MEMORY[0x186DBAE5C](*a1) == MEMORY[0x1E0C812E8] && xpc_data_get_length(*a1) == 16)
  {
    bytes_ptr = (void *)xpc_data_get_bytes_ptr(*a1);
    return *(_QWORD *)bytes_ptr;
  }
  v3 = MEMORY[0x186DBAE5C](*a1);
  v4 = *a1;
  if (v3 == MEMORY[0x1E0C813A0])
  {
    bytes_ptr = (void *)xpc_uuid_get_bytes(v4);
    return *(_QWORD *)bytes_ptr;
  }
  if (MEMORY[0x186DBAE5C](v4) != MEMORY[0x1E0C81390])
    return 0;
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  __p = 0;
  v13 = 0;
  v14 = 0;
  xpc::dyn_cast_or_default();
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v10, 0x8000100u);
  v9 = CFUUIDCreateFromString(v7, v8);
  v5 = *(_OWORD *)&CFUUIDGetUUIDBytes(v9);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  return v5;
}

uint64_t _CTServerConnectionCopyNextCall(const void *a1, int *a2, uint64_t *a3)
{
  return _CTServerConnectionCopyNextCallWithTypes(a1, 3u, a2, a3);
}

uint64_t _CTServerConnectionCopyNextCallWithTypes(const void *a1, unsigned int a2, int *a3, uint64_t *a4)
{
  uint64_t v4;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t object[2];
  xpc_object_t v16;
  xpc_object_t xdict;
  xpc_object_t v18;

  v4 = 0x1600000001;
  if (a3 && a1 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetNextCallInfo", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v9 = xdict;
    v18 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v10 = xpc_int64_create(a2);
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kCallTypes", v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    v12 = xpc_int64_create(*a3);
    if (!v12)
      v12 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kCallCookie", v12);
    v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    xdict = xpc_null_create();
    v4 = SendXpcMessageIf(1, (uint64_t)a1, &v18, &xdict);
    *a4 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kCallCookie"))
    {
      object[0] = &xdict;
      object[1] = "kCallCookie";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v16);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v16, 0);
      xpc_release(v16);
      *a4 = _CTCallCreateFromXpcDictionary(a1, xdict, 1);
    }
    xpc_release(xdict);
    xpc_release(v18);
  }
  return v4;
}

uint64_t _CTServerConnectionIsAnyCallActiveOrHeld(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t xdict;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v11 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v11;
    v8 = "kIsAnyCallActiveOrHeld";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessageIf(1, a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kIsAnyCallActiveOrHeld"))
    {
      object = &xdict;
      v8 = "kIsAnyCallActiveOrHeld";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyUSSDString(uint64_t a1, xpc_object_t *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t object;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetProperty", &object, "kRequest", &v13);
    xpc_release(object);
    v14 = v13;
    v13 = xpc_null_create();
    xpc_release(v13);
    object = &v14;
    v11 = "kUssdString";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v12);
    xpc_release(v12);
    v12 = 0;
    v13 = xpc_null_create();
    v3 = SendXpcMessageIf(1, a1, &v14, &v13);
    *a2 = 0;
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](v13) == MEMORY[0x1E0C812F8])
    {
      object = &v13;
      v11 = "kUssdResponseRequested";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v9);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
      xpc_release(v9);
      v9 = 0;
      object = &v13;
      v11 = "kUssdString";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v9);
      if (MEMORY[0x186DBAE5C](v9) != MEMORY[0x1E0C81350])
      {
        object = 0;
        v8 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v8);
        *a2 = object;
      }
      xpc_release(v9);
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  return v3;
}

uint64_t _CTServerConnectionSendUSSDResponse(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallSendUssdResponse", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  if (a2)
    v5 = _CFXPCCreateXPCObjectFromCFObject();
  else
    v5 = (uint64_t)xpc_string_create("");
  v7 = (xpc_object_t)v5;
  if (!v5)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kUssdString", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v6 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v6;
}

uint64_t _CTServerConnectionSetDTMFType(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v9;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallSetDtmfToneProperty", &object, "kRequest", &v9);
  xpc_release(object);
  v4 = v9;
  object = v9;
  v9 = xpc_null_create();
  xpc_release(v9);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kCallDtmfType", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionGetDTMFType(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallGetDtmfToneProperty", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v8 = "kCallDtmfType";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    v2 = SendXpcMessageIf(1, a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object = &v10;
      v8 = "kCallDtmfType";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetMultiPartyCallCountMaximum(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v8 = "kMultiPartyMaxCallCount";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    v2 = SendXpcMessageIf(1, a1, &v11, &v10);
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object = &v10;
      v8 = "kMultiPartyMaxCallCount";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = (int)xpc::dyn_cast_or_default((xpc *)&v6, (const object *)0x63);
      xpc_release(v6);
    }
    else
    {
      *a2 = 99;
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetEmergencyCallStatus(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v8 = "kEmergencyCallStatus";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    v2 = SendXpcMessageIf(1, a1, &v11, &v10);
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object = &v10;
      v8 = "kEmergencyCallStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    else
    {
      *a2 = 0;
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionEnableVoicePrivacy(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v9;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallModelSetProperty", &object, "kRequest", &v9);
  xpc_release(object);
  v4 = v9;
  object = v9;
  v9 = xpc_null_create();
  xpc_release(v9);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kCallVoicePrivacy", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionGetVoicePrivacy(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v8 = "kCallVoicePrivacy";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    v2 = SendXpcMessageIf(1, a1, &v11, &v10);
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object = &v10;
      v8 = "kCallVoicePrivacy";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    else
    {
      *a2 = 0;
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerSetSupportsVoiceCall(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v9;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallModelSetPropertySync", &object, "kRequest", &v9);
  xpc_release(object);
  v4 = v9;
  object = v9;
  v9 = xpc_null_create();
  xpc_release(v9);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kCallSupportsVoiceCall", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v9 = xpc_null_create();
  v7 = SendXpcMessageIf(1, a1, &object, &v9);
  xpc_release(v9);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionSendToVoicemail(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t object[2];
  xpc_object_t v11;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelSendToVoicemail", object, "kRequest", &v11);
    xpc_release(object[0]);
    v5 = v11;
    v12 = v11;
    v11 = xpc_null_create();
    xpc_release(v11);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a2);
    object[1] = v6;
    v7 = xpc_data_create(object, 0x10uLL);
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v5, "kUuid", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v2 = SendXpcMessageIf(1, a1, &v12, 0, 1);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionCreatePrivateConversation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t object[2];
  xpc_object_t v11;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelCreatePrivateConversation", object, "kRequest", &v11);
    xpc_release(object[0]);
    v5 = v11;
    v12 = v11;
    v11 = xpc_null_create();
    xpc_release(v11);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a2);
    object[1] = v6;
    v7 = xpc_data_create(object, 0x10uLL);
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v5, "kUuid", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v2 = SendXpcMessageIf(1, a1, &v12, 0, 1);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionAnswerCall(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  xpc_object_t v9;
  void *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t object[2];
  xpc_object_t v20;
  xpc_object_t v21;

  v4 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelAnswer", object, "kRequest", &v20);
    xpc_release(object[0]);
    v9 = v20;
    v21 = v20;
    v20 = xpc_null_create();
    xpc_release(v20);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a2);
    object[1] = v10;
    v11 = xpc_data_create(object, 0x10uLL);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kUuid", v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    v13 = xpc_int64_create(a4);
    if (!v13)
      v13 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kCallSourceMode", v13);
    v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
    if (a3)
      v15 = _CFXPCCreateXPCObjectFromCFObject();
    else
      v15 = (uint64_t)xpc_string_create("");
    v16 = (xpc_object_t)v15;
    if (!v15)
      v16 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kSource", v16);
    v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
    v4 = SendXpcMessageIf(1, a1, &v21, 0, 1);
    xpc_release(v21);
  }
  return v4;
}

uint64_t _CTServerConnectionAnswerWaitingCallEndingHeld(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v9;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallModelAnswerWaitingCallEndingHeld", &object, "kRequest", &v9);
  xpc_release(object);
  v4 = v9;
  object = v9;
  v9 = xpc_null_create();
  xpc_release(v9);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kCallSourceMode", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionEndThisCall(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t object[2];
  xpc_object_t v11;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelEnd", object, "kRequest", &v11);
    xpc_release(object[0]);
    v5 = v11;
    v12 = v11;
    v11 = xpc_null_create();
    xpc_release(v11);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a2);
    object[1] = v6;
    v7 = xpc_data_create(object, 0x10uLL);
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v5, "kUuid", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v2 = SendXpcMessageIf(1, a1, &v12, 0, 1);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionEndCall(uint64_t a1, uint64_t a2, unsigned int a3)
{
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v14;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallModelEnd", &object, "kRequest", &v14);
  xpc_release(object);
  v6 = v14;
  object = v14;
  v14 = xpc_null_create();
  xpc_release(v14);
  if (a2)
    v7 = _CFXPCCreateXPCObjectFromCFObject();
  else
    v7 = (uint64_t)xpc_string_create("");
  v9 = (xpc_object_t)v7;
  if (!v7)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kSource", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(a3);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kCallSourceMode", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v8 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionEndAllCalls(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v4;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallModelEnd", &object, "kRequest", &v4);
  xpc_release(object);
  object = v4;
  v4 = xpc_null_create();
  xpc_release(v4);
  v2 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionUpdateCallStatus(uint64_t a1, const __CFUUID *a2, unsigned int a3, double a4, double a5)
{
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  uint64_t v19;
  xpc_object_t v21;
  xpc_object_t v22;
  CFUUIDBytes object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallModelUpdateCallStatus", (xpc_object_t *)&object, "kRequest", &v21);
  xpc_release(*(xpc_object_t *)&object.byte0);
  v10 = v21;
  v22 = v21;
  v21 = xpc_null_create();
  xpc_release(v21);
  object = CFUUIDGetUUIDBytes(a2);
  v11 = xpc_data_create(&object, 0x10uLL);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v10, "kUuid", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(a3);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v10, "kCallStatus", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_double_create(a4);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v10, "kCallStartTime", v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = xpc_double_create(a5);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v10, "kCallEndTime", v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = SendXpcMessageIf(1, a1, &v22, 0, 1);
  xpc_release(v22);
  return v19;
}

unint64_t _CTServerConnectionDialService(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5)
{
  unint64_t v5;
  unsigned int v6;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  void *v18;
  xpc_object_t v19;
  void *v20;
  xpc_object_t v21;
  unint64_t v22;
  xpc_object_t value;
  xpc_object_t xdict;
  xpc_object_t object;

  v5 = 0x1600000000;
  v6 = 1;
  if (a1)
  {
    if (a2)
    {
      if (a4)
      {
        if (a5)
        {
          v10 = _GetCallTypeFlagForString(a4);
          v11 = _GetCallServiceProviderFlagForString(a5);
          v6 = 1;
          if (v10)
          {
            v12 = v11;
            if (v11)
            {
              if ((v10 & 0x1C) != 0)
              {
                xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
                xpc::dict_creator::operator()<char const*>("kCallModelDialService", &object, "kRequest", &xdict);
                xpc_release(object);
                v13 = xdict;
                object = xdict;
                xdict = xpc_null_create();
                xpc_release(xdict);
                v14 = xpc_int64_create(v10);
                if (!v14)
                  v14 = xpc_null_create();
                xpc_dictionary_set_value(v13, "kCallTypes", v14);
                v15 = xpc_null_create();
                xpc_release(v14);
                xpc_release(v15);
                v16 = xpc_int64_create(v12);
                if (!v16)
                  v16 = xpc_null_create();
                xpc_dictionary_set_value(v13, "kProvider", v16);
                v17 = xpc_null_create();
                xpc_release(v16);
                xpc_release(v17);
                v18 = (void *)_CFXPCCreateXPCObjectFromCFObject();
                if (!v18)
                  v18 = xpc_null_create();
                xpc_dictionary_set_value(v13, "kAddress", v18);
                v19 = xpc_null_create();
                xpc_release(v18);
                xpc_release(v19);
                if (a3)
                {
                  v20 = (void *)_CFXPCCreateXPCObjectFromCFObject();
                  if (!v20)
                    v20 = xpc_null_create();
                  xpc_dictionary_set_value(v13, "kSource", v20);
                  v21 = xpc_null_create();
                  xpc_release(v20);
                  xpc_release(v21);
                }
                xdict = xpc_null_create();
                v22 = SendXpcMessageIf(1, a1, &object, &xdict);
                v6 = v22;
                v5 = v22 & 0xFFFFFFFF00000000;
                if (!HIDWORD(v22) && MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
                {
                  value = xpc_dictionary_get_value(xdict, "kCallModelDialService");
                  if (value)
                    v5 = 0;
                  else
                    v5 = 0x2D00000000;
                  if (!value)
                    v6 = 1;
                }
                xpc_release(xdict);
                xpc_release(object);
              }
              else
              {
                v5 = 0x2D00000000;
                v6 = 1;
              }
            }
          }
        }
      }
    }
  }
  return v6 | v5;
}

uint64_t _CTServerConnectionCreateCall(const void *a1, const void *a2, void *a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  uint64_t v7;
  xpc_object_t *v15;
  void *v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t *v19;
  int v20;
  void **p_p;
  xpc_object_t v22;
  xpc_object_t v23;
  char v24;
  xpc_object_t *v25;
  int v26;
  void **v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  const char *v38;
  const char *v39;
  char *cStr;
  uint64_t UuidBytes;
  _QWORD v43[2];
  xpc_object_t object;
  xpc_object_t v45;
  _QWORD v46[2];
  uint64_t v47;
  void *v48;
  __int128 v49;
  void *__p;
  __int128 v51;
  xpc_object_t v52;
  xpc_object_t *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v7 = 0x1600000001;
  if (!a1 || !a7)
    return v7;
  v15 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v53);
  xpc::dict_creator::operator()<char const*>("kCallModelDial", v15, "kRequest", &__p);
  xpc_release(v53);
  v16 = __p;
  v52 = __p;
  __p = xpc_null_create();
  xpc_release(__p);
  v17 = xpc_int64_create(a4);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v16, "kCallTypes", v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  __p = 0;
  v51 = 0uLL;
  v48 = 0;
  v49 = 0uLL;
  if (!a2)
    goto LABEL_16;
  v53 = 0;
  v54 = 0uLL;
  ctu::cf::assign();
  v19 = v53;
  *(_QWORD *)&v55 = v54;
  *(_QWORD *)((char *)&v55 + 7) = *(_QWORD *)((char *)&v54 + 7);
  v20 = SHIBYTE(v54);
  if (SHIBYTE(v51) < 0)
    operator delete(__p);
  __p = v19;
  *(_QWORD *)&v51 = v55;
  *(_QWORD *)((char *)&v51 + 7) = *(_QWORD *)((char *)&v55 + 7);
  HIBYTE(v51) = v20;
  if (v20 >= 0)
    p_p = &__p;
  else
    p_p = v19;
  v22 = xpc_string_create((const char *)p_p);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v16, "kPhoneNumber", v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (!CFEqual(a2, CFSTR("kLocalEmergencyNumber")))
  {
LABEL_16:
    if (a3)
      goto LABEL_17;
    goto LABEL_20;
  }
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
    LOBYTE(__p) = 0;
    HIBYTE(v51) = 0;
    goto LABEL_16;
  }
  *(_BYTE *)__p = 0;
  *(_QWORD *)&v51 = 0;
  if (a3)
  {
LABEL_17:
    std::string::basic_string[abi:nn180100]<0>(v46, "");
    ctu::cf::assign();
    a3 = (void *)v46[0];
    v24 = HIBYTE(v47);
    v46[0] = 0;
    v46[1] = 0;
    v47 = 0;
    if (!a5)
      goto LABEL_29;
LABEL_21:
    v53 = 0;
    v54 = 0uLL;
    ctu::cf::assign();
    v25 = v53;
    *(_QWORD *)&v55 = v54;
    *(_QWORD *)((char *)&v55 + 7) = *(_QWORD *)((char *)&v54 + 7);
    v26 = SHIBYTE(v54);
    if (SHIBYTE(v49) < 0)
      operator delete(v48);
    v48 = v25;
    *(_QWORD *)&v49 = v55;
    *(_QWORD *)((char *)&v49 + 7) = *(_QWORD *)((char *)&v55 + 7);
    HIBYTE(v49) = v26;
    if (v26 >= 0)
      v27 = &v48;
    else
      v27 = v25;
    v28 = xpc_string_create((const char *)v27);
    if (!v28)
      v28 = xpc_null_create();
    xpc_dictionary_set_value(v16, "kSource", v28);
    v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    goto LABEL_29;
  }
LABEL_20:
  v24 = 0;
  if (a5)
    goto LABEL_21;
LABEL_29:
  v30 = xpc_int64_create(a6);
  if (!v30)
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v16, "kCallSourceMode", v30);
  v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  v45 = xpc_null_create();
  v7 = SendXpcMessageIf(1, (uint64_t)a1, &v52, &v45);
  *a7 = 0;
  if (MEMORY[0x186DBAE5C](v45) == MEMORY[0x1E0C812F8])
  {
    v53 = &v45;
    *(_QWORD *)&v54 = "kValid";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v53, &v55);
    v32 = xpc::dyn_cast_or_default((xpc *)&v55, 0);
    xpc_release((xpc_object_t)v55);
    if (v32)
    {
      v53 = &v45;
      *(_QWORD *)&v54 = "kUuid";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v53, &v55);
      UuidBytes = createUuidBytes((xpc_object_t *)&v55);
      v34 = v33;
      xpc_release((xpc_object_t)v55);
      v53 = &v45;
      *(_QWORD *)&v54 = "kCallStartTime";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v53, &v55);
      v35 = xpc::dyn_cast_or_default((xpc *)&v55, 0);
      xpc_release((xpc_object_t)v55);
      v53 = &v45;
      *(_QWORD *)&v54 = "kCallFlags";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v53, &v55);
      v36 = xpc::dyn_cast_or_default((xpc *)&v55, 0);
      xpc_release((xpc_object_t)v55);
      v53 = &v45;
      *(_QWORD *)&v54 = "kMobileCountryCode";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v53, &v55);
      v37 = xpc::dyn_cast_or_default((xpc *)&v55, 0);
      xpc_release((xpc_object_t)v55);
      v55 = 0uLL;
      v56 = 0;
      v43[0] = &v45;
      v43[1] = "kISOCountryCode";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v43, &object);
      v53 = 0;
      v54 = 0uLL;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v54) < 0)
        operator delete(v53);
      xpc_release(object);
      if (v51 >= 0)
        v38 = (const char *)&__p;
      else
        v38 = (const char *)__p;
      if (v49 >= 0)
        v39 = (const char *)&v48;
      else
        v39 = (const char *)v48;
      if (v56 >= 0)
        cStr = (char *)&v55;
      else
        cStr = (char *)v55;
      *a7 = _CTCallCreateFromCallInfo(a1, UuidBytes, v34, v38, "", v39, v35, 0, v36, 0, v37, cStr, 1u);
      if (SHIBYTE(v56) < 0)
        operator delete((void *)v55);
    }
  }
  xpc_release(v45);
  if (v24 < 0)
    operator delete(a3);
  if (SHIBYTE(v49) < 0)
    operator delete(v48);
  if (SHIBYTE(v51) < 0)
    operator delete(__p);
  xpc_release(v52);
  return v7;
}

uint64_t _CTServerConnectionCopyAllCallsWithTypes(const void *a1, unsigned int a2, CFArrayRef *a3)
{
  uint64_t v3;
  xpc_object_t v7;
  xpc_object_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  size_t count;
  xpc_object_t v16;
  char *i;
  CFTypeRef v18;
  uint64_t (*v19)(uint64_t);
  char *v20;
  const void **v21;
  CFTypeRef v22;
  CFTypeRef *v23;
  CFTypeRef *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  CFTypeRef *v29;
  char *v30;
  char *v31;
  const void *v32;
  const __CFAllocator *v34;
  CFTypeRef cf[2];
  xpc_object_t v37;
  xpc_object_t v38;
  char *v39;
  void *__p;
  CFTypeRef *v41;
  CFTypeRef *v42;
  xpc_object_t object;
  char *v44;
  unint64_t v45;
  xpc_object_t xarray;
  xpc_object_t v47;
  xpc_object_t v48;

  v3 = 0x1600000001;
  if (a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetAllCallInfo", &object, "kRequest", &__p);
    xpc_release(object);
    v48 = __p;
    __p = xpc_null_create();
    xpc_release(__p);
    v7 = xpc_int64_create(a2);
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v48, "kCallTypes", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v47 = xpc_null_create();
    v3 = SendXpcMessageIf(1, (uint64_t)a1, &v48, &v47);
    *a3 = 0;
    v9 = MEMORY[0x186DBAE5C](v47);
    v10 = MEMORY[0x1E0C812F8];
    if (v9 != MEMORY[0x1E0C812F8])
      goto LABEL_61;
    xarray = 0;
    object = &v47;
    v44 = "kCallArray";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &xarray);
    v11 = MEMORY[0x186DBAE5C](xarray);
    v12 = MEMORY[0x1E0C812C8];
    if (v11 != MEMORY[0x1E0C812C8])
    {
LABEL_60:
      xpc_release(xarray);
LABEL_61:
      xpc_release(v47);
      xpc_release(v48);
      return v3;
    }
    object = 0;
    v44 = 0;
    v45 = 0;
    __p = 0;
    v41 = 0;
    v42 = 0;
    v13 = xarray;
    if (xarray)
    {
      xpc_retain(xarray);
      v38 = v13;
    }
    else
    {
      v13 = xpc_null_create();
      v38 = v13;
      if (!v13)
      {
        v38 = xpc_null_create();
LABEL_11:
        v39 = 0;
        xpc_release(v13);
        v14 = xarray;
        if (xarray)
          xpc_retain(xarray);
        else
          v14 = xpc_null_create();
        if (MEMORY[0x186DBAE5C](xarray) == v12)
        {
          count = xpc_array_get_count(xarray);
          if (v14)
            goto LABEL_16;
        }
        else
        {
          count = 0;
          if (v14)
          {
LABEL_16:
            xpc_retain(v14);
            v16 = v14;
            goto LABEL_19;
          }
        }
        v16 = xpc_null_create();
LABEL_19:
        xpc_release(v14);
        for (i = v39; i != (char *)count || v38 != v16; v39 = i)
        {
          cf[1] = i;
          v37 = 0;
          cf[0] = &v38;
          xpc::array::object_proxy::operator xpc::dict((uint64_t)cf, &v37);
          if (MEMORY[0x186DBAE5C](v37) == v10)
          {
            cf[0] = 0;
            v18 = (CFTypeRef)_CTCallCreateFromXpcDictionary(a1, v37, 1);
            cf[0] = v18;
            if (v18)
            {
              CFRetain(v18);
              v18 = cf[0];
            }
            if (v18)
              v19 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
            else
              v19 = 0;
            if (v19)
            {
              v20 = v44;
              if ((unint64_t)v44 >= v45)
              {
                v21 = std::vector<ctu::cf::CFSharedRef<void const>>::__emplace_back_slow_path<ctu::cf::CFSharedRef<void const>&>((const void ***)&object, cf);
              }
              else
              {
                *(_QWORD *)v44 = v18;
                if (v18)
                  CFRetain(v18);
                v21 = (const void **)(v20 + 8);
              }
              v44 = (char *)v21;
              v22 = cf[0];
              v23 = v41;
              if (v41 >= v42)
              {
                v25 = ((char *)v41 - (_BYTE *)__p) >> 3;
                if ((unint64_t)(v25 + 1) >> 61)
                  abort();
                v26 = ((char *)v42 - (_BYTE *)__p) >> 2;
                if (v26 <= v25 + 1)
                  v26 = v25 + 1;
                if ((unint64_t)((char *)v42 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                  v27 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v27 = v26;
                if (v27)
                  v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>((uint64_t)&v42, v27);
                else
                  v28 = 0;
                v29 = (CFTypeRef *)&v28[8 * v25];
                *v29 = v22;
                v24 = v29 + 1;
                v31 = (char *)__p;
                v30 = (char *)v41;
                if (v41 != __p)
                {
                  do
                  {
                    v32 = (const void *)*((_QWORD *)v30 - 1);
                    v30 -= 8;
                    *--v29 = v32;
                  }
                  while (v30 != v31);
                  v30 = (char *)__p;
                }
                __p = v29;
                v41 = v24;
                v42 = (CFTypeRef *)&v28[8 * v27];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *v41 = cf[0];
                v24 = v23 + 1;
              }
              v41 = v24;
              v18 = cf[0];
            }
            if (v18)
              CFRelease(v18);
          }
          xpc_release(v37);
          i = v39 + 1;
        }
        xpc_release(v16);
        xpc_release(v38);
        v34 = CFGetAllocator(a1);
        *a3 = CFArrayCreate(v34, (const void **)__p, ((char *)v41 - (_BYTE *)__p) >> 3, MEMORY[0x1E0C9B378]);
        if (__p)
        {
          v41 = (CFTypeRef *)__p;
          operator delete(__p);
        }
        __p = &object;
        std::vector<ctu::cf::CFSharedRef<void const>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
        goto LABEL_60;
      }
    }
    xpc_retain(v13);
    goto LABEL_11;
  }
  return v3;
}

void xpc::array::object_proxy::operator xpc::dict(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;

  value = xpc_array_get_value(**(xpc_object_t **)a1, *(_QWORD *)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
      goto LABEL_5;
  }
  if (MEMORY[0x186DBAE5C](v4) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v4);
    goto LABEL_7;
  }
LABEL_5:
  *a2 = xpc_null_create();
LABEL_7:
  xpc_release(v4);
}

uint64_t ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t _CTServerConnectionCancelUSSDSession(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v4;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallCancelUssdSession", &object, "kRequest", &v4);
  xpc_release(object);
  object = v4;
  v4 = xpc_null_create();
  xpc_release(v4);
  v2 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionStartDTMFTone(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v9;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCallSetDtmfToneProperty", &object, "kRequest", &v9);
  xpc_release(object);
  v4 = v9;
  object = v9;
  v9 = xpc_null_create();
  xpc_release(v9);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kCallDtmfStart", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionStopDTMFTone(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCallSetDtmfToneProperty", object, "kRequest", &v6);
  xpc_release(object[0]);
  v7 = v6;
  v6 = xpc_null_create();
  xpc_release(v6);
  object[0] = &v7;
  object[1] = "kCallDtmfStop";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v5);
  xpc_release(v5);
  v5 = 0;
  v2 = SendXpcMessageIf(1, a1, &v7, 0, 1);
  xpc_release(v7);
  return v2;
}

uint64_t _CTServerConnectionSendDTMFDigitsNow(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCallSetDtmfToneProperty", object, "kRequest", &v6);
  xpc_release(object[0]);
  v7 = v6;
  v6 = xpc_null_create();
  xpc_release(v6);
  object[0] = &v7;
  object[1] = "kCallDtmfSendNow";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v5);
  xpc_release(v5);
  v5 = 0;
  v2 = SendXpcMessageIf(1, a1, &v7, 0, 1);
  xpc_release(v7);
  return v2;
}

uint64_t _CTServerConnectionCancelHardPause(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCallSetDtmfToneProperty", object, "kRequest", &v6);
  xpc_release(object[0]);
  v7 = v6;
  v6 = xpc_null_create();
  xpc_release(v6);
  object[0] = &v7;
  object[1] = "kCallDtmfCancelHardPause";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v5);
  xpc_release(v5);
  v5 = 0;
  v2 = SendXpcMessageIf(1, a1, &v7, 0, 1);
  xpc_release(v7);
  return v2;
}

uint64_t _CTServerConnectionCopyHardPauseDigits(uint64_t a1, xpc_object_t *a2, _BYTE *a3)
{
  uint64_t v3;
  xpc_object_t v7;
  uint64_t (*v8)(uint64_t);
  CFIndex Length;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t object;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallGetDtmfToneProperty", &object, "kRequest", &v16);
    xpc_release(object);
    v17 = v16;
    v16 = xpc_null_create();
    xpc_release(v16);
    object = &v17;
    v14 = "kCallDtmfPauseDigits";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v15);
    xpc_release(v15);
    v15 = 0;
    v16 = xpc_null_create();
    v3 = SendXpcMessageIf(1, a1, &v17, &v16);
    *a2 = 0;
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](v16) == MEMORY[0x1E0C812F8])
    {
      v12 = 0;
      object = &v16;
      v14 = "kCallDtmfPauseDigits";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v12);
      if (MEMORY[0x186DBAE5C](v12) != MEMORY[0x1E0C81350])
      {
        object = 0;
        v11 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v11);
        v7 = object;
        v8 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
        if (!object)
          v8 = 0;
        if (v8 && (Length = CFStringGetLength((CFStringRef)object), v7 = object, Length))
        {
          *a2 = object;
        }
        else if (v7)
        {
          CFRelease(v7);
        }
      }
      object = &v16;
      v14 = "kCallDtmfPauseReadyToSend";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v11);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
      xpc_release(v12);
    }
    xpc_release(v16);
    xpc_release(v17);
  }
  return v3;
}

unint64_t _CTServerConnectionAddHeldToMultiPartyCall(uint64_t a1, _BYTE *a2)
{
  unint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallAddHeldToMultiPartyCall", object, "kRequest", &v8);
    xpc_release(object[0]);
    v9 = v8;
    v8 = xpc_null_create();
    xpc_release(v8);
    v8 = xpc_null_create();
    v2 = SendXpcMessageIf(1, a1, &v9, &v8);
    if (MEMORY[0x186DBAE5C](v8) == MEMORY[0x1E0C812F8] && !HIDWORD(v2))
    {
      object[0] = &v8;
      object[1] = "kCallAddHeldToMultiPartyCall";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, (const object *)1);
      xpc_release(v7);
    }
    xpc_release(v8);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionHoldActiveCall(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t object[2];
  xpc_object_t v11;
  xpc_object_t v12;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCallHoldActive", object, "kRequest", &v11);
  xpc_release(object[0]);
  v4 = v11;
  v12 = v11;
  v11 = xpc_null_create();
  xpc_release(v11);
  object[0] = (xpc_object_t)_CTCallGetIdentifier(a2);
  object[1] = v5;
  v6 = xpc_data_create(object, 0x10uLL);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kUuid", v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = SendXpcMessageIf(1, a1, &v12, 0, 1);
  xpc_release(v12);
  return v8;
}

unint64_t _CTServerConnectionResumeHeldCall(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v3;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v12[2];
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t object[2];
  xpc_object_t v16;

  v3 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallResumeHeld", object, "kRequest", v12);
    xpc_release(object[0]);
    v7 = v12[0];
    v16 = v12[0];
    v12[0] = xpc_null_create();
    xpc_release(v12[0]);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a3);
    object[1] = v8;
    v9 = xpc_data_create(object, 0x10uLL);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kUuid", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v14 = xpc_null_create();
    v3 = SendXpcMessageIf(1, a1, &v16, &v14);
    if (MEMORY[0x186DBAE5C](v14) == MEMORY[0x1E0C812F8] && !HIDWORD(v3))
    {
      v12[0] = &v14;
      v12[1] = "kCallResumeHeld";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v12, &v13);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v13, (const object *)1);
      xpc_release(v13);
    }
    xpc_release(v14);
    xpc_release(v16);
  }
  return v3;
}

unint64_t _CTServerConnectionSwapCalls(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v3;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v12[2];
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t object[2];
  xpc_object_t v16;

  v3 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallSwap", object, "kRequest", v12);
    xpc_release(object[0]);
    v7 = v12[0];
    v16 = v12[0];
    v12[0] = xpc_null_create();
    xpc_release(v12[0]);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a3);
    object[1] = v8;
    v9 = xpc_data_create(object, 0x10uLL);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kUuid", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v14 = xpc_null_create();
    v3 = SendXpcMessageIf(1, a1, &v16, &v14);
    if (MEMORY[0x186DBAE5C](v14) == MEMORY[0x1E0C812F8] && !HIDWORD(v3))
    {
      v12[0] = &v14;
      v12[1] = "kCallSwap";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v12, &v13);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v13, (const object *)1);
      xpc_release(v13);
    }
    xpc_release(v14);
    xpc_release(v16);
  }
  return v3;
}

unint64_t _CTServerConnectionCopyCallManagementState(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v6;
  xpc_object_t object[2];
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    v10 = v9;
    v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kCallManagementState";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    v8 = 0;
    object[0] = xpc_null_create();
    v2 = SendXpcMessageIf(1, a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](object[0]) == MEMORY[0x1E0C812F8] && !HIDWORD(v2))
    {
      v9 = 0;
      v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionStartOTASP(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kStartOtasp", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kStartOtaspShowUI", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

unint64_t _CTServerConnectionAddCall(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, uint64_t *a8, double a9, _DWORD *a10)
{
  unint64_t v10;
  unint64_t v11;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  void *v25;
  xpc_object_t v26;
  void *v27;
  xpc_object_t v28;
  void *v29;
  xpc_object_t v30;
  int64_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  uint64_t v34;
  xpc_object_t object;
  const char *v38;
  xpc_object_t v39;
  xpc_object_t xdict;
  xpc_object_t v41;

  v10 = 0x1600000000;
  LODWORD(v11) = 1;
  if (a1 && a7 && a8 && a10)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCallAdd", &object, "kRequest", &xdict);
    xpc_release(object);
    v20 = xdict;
    v41 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v21 = xpc_double_create(a9);
    if (!v21)
      v21 = xpc_null_create();
    xpc_dictionary_set_value(v20, "kCallStartTime", v21);
    v22 = xpc_null_create();
    xpc_release(v21);
    xpc_release(v22);
    v23 = xpc_int64_create(a3);
    if (!v23)
      v23 = xpc_null_create();
    xpc_dictionary_set_value(v20, "kCallStatus", v23);
    v24 = xpc_null_create();
    xpc_release(v23);
    xpc_release(v24);
    if (a4)
    {
      v25 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v25)
        v25 = xpc_null_create();
      xpc_dictionary_set_value(v20, "kAddress", v25);
      v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
    }
    if (a5)
    {
      v27 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v27)
        v27 = xpc_null_create();
      xpc_dictionary_set_value(v20, "kName", v27);
      v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
    }
    if (a6)
    {
      v29 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v29)
        v29 = xpc_null_create();
      xpc_dictionary_set_value(v20, "kSource", v29);
      v30 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v30);
    }
    switch(a2)
    {
      case 5:
        v31 = 8;
        break;
      case 4:
        v31 = 16;
        break;
      case 3:
        v31 = 4;
        break;
      default:
        v10 = 0x1600000000;
        LODWORD(v11) = 1;
LABEL_36:
        xpc_release(v20);
        return v11 | v10;
    }
    v32 = xpc_int64_create(v31);
    if (!v32)
      v32 = xpc_null_create();
    xpc_dictionary_set_value(v20, "kCallTypes", v32);
    v33 = xpc_null_create();
    xpc_release(v32);
    xpc_release(v33);
    xdict = xpc_null_create();
    v11 = SendXpcMessageIf(1, a1, &v41, &xdict);
    v10 = v11 & 0xFFFFFFFF00000000;
    *a7 = 0;
    *a10 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && !HIDWORD(v11)
      && xpc_dictionary_get_value(xdict, "kUuid")
      && xpc_dictionary_get_value(xdict, "kCallFlags"))
    {
      *a7 = 1;
      object = &xdict;
      v38 = "kUuid";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v39);
      *a8 = createUuidBytes(&v39);
      a8[1] = v34;
      xpc_release(v39);
      object = &xdict;
      v38 = "kCallFlags";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v39);
      *a10 = xpc::dyn_cast_or_default((xpc *)&v39, 0);
      xpc_release(v39);
    }
    xpc_release(xdict);
    v20 = v41;
    goto LABEL_36;
  }
  return v11 | v10;
}

uint64_t _CTServerConnectionRegisterSilentHoursCallback(uint64_t a1, void *aBlock)
{
  uint64_t v3;
  void *v4;
  const void *v5;
  char v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  NSObject *v11;
  xpc_object_t *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v18;
  _QWORD block[5];
  void *v20;
  uint64_t aBlocka;
  uint64_t v22;
  void (*v23)(uint64_t, xpc_object_t *);
  void *v24;
  void *v25;
  xpc_object_t v26;

  if (!a1)
    return 0x1600000001;
  v3 = MEMORY[0x1E0C809B0];
  if (!aBlock)
  {
    v5 = 0;
    v4 = 0;
    aBlocka = MEMORY[0x1E0C809B0];
    v22 = 1174405120;
    v23 = ___CTServerConnectionRegisterSilentHoursCallback_block_invoke;
    v24 = &__block_descriptor_tmp_1;
    goto LABEL_7;
  }
  v4 = _Block_copy(aBlock);
  v5 = v4;
  aBlocka = v3;
  v22 = 1174405120;
  v23 = ___CTServerConnectionRegisterSilentHoursCallback_block_invoke;
  v24 = &__block_descriptor_tmp_1;
  if (!v4)
  {
LABEL_7:
    v6 = 1;
    goto LABEL_8;
  }
  v4 = _Block_copy(v4);
  v6 = 0;
LABEL_8:
  v25 = v4;
  v8 = _Block_copy(&aBlocka);
  v9 = v8;
  v11 = *(NSObject **)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  block[0] = v3;
  block[1] = 1174405120;
  block[2] = ___CTServerConnectionRegisterSilentHoursCallback_block_invoke_58;
  block[3] = &__block_descriptor_tmp_61;
  block[4] = v10;
  if (v8)
    v8 = _Block_copy(v8);
  v20 = v8;
  dispatch_async(v11, block);
  v12 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v26);
  xpc::dict_creator::operator()<char const*>("kCallEnableSilentHours", v12, "kRequest", &v18);
  xpc_release(v26);
  v13 = v18;
  v26 = v18;
  v18 = xpc_null_create();
  xpc_release(v18);
  v14 = xpc_BOOL_create(1);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, "kEnabled", v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v7 = SendXpcMessage(a1, &v26, 0, v16);
  xpc_release(v26);
  if (v20)
    _Block_release(v20);
  if (v9)
    _Block_release(v9);
  if (v25)
    _Block_release(v25);
  if ((v6 & 1) == 0)
    _Block_release(v5);
  return v7;
}

void *__copy_helper_block_8_32c56_ZTSN8dispatch5blockIU13block_pointerFbPK10__CFStringEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_8_32c56_ZTSN8dispatch5blockIU13block_pointerFbPK10__CFStringEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void *__copy_helper_block_8_40c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_8_40c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

uint64_t _CTServerConnectionUnregisterSilentHoursCallback(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v12;
  _QWORD block[5];
  xpc_object_t v14;

  if (!a1)
    return 0x1600000001;
  v4 = a1 + 16;
  v2 = *(NSObject **)(a1 + 16);
  v3 = *(_QWORD *)(v4 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___CTServerConnectionUnregisterSilentHoursCallback_block_invoke;
  block[3] = &__block_descriptor_tmp_64;
  block[4] = v3;
  dispatch_async(v2, block);
  v5 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v14);
  xpc::dict_creator::operator()<char const*>("kCallEnableSilentHours", v5, "kRequest", &v12);
  xpc_release(v14);
  v6 = v12;
  v14 = v12;
  v12 = xpc_null_create();
  xpc_release(v12);
  v7 = xpc_BOOL_create(0);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kEnabled", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v10 = SendXpcMessage(a1, &v14, 0, v9);
  xpc_release(v14);
  return v10;
}

unint64_t _CTServerConnectionIsEmergencyNumber(uint64_t a1, void *a2, _BYTE *a3)
{
  return _CTServerConnectionIsEmergencyNumberHelper(a1, a2, 0, a3);
}

unint64_t _CTServerConnectionIsEmergencyNumberHelper(uint64_t a1, void *a2, unsigned int a3, _BYTE *a4)
{
  unint64_t v4;
  void *v9;
  const void *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  void *__p[2];
  uint64_t v16;
  xpc_object_t xdict;
  xpc_object_t value;
  xpc_object_t v19;
  xpc_object_t object[2];
  uint64_t v21;

  v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    *a4 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetIsValidEmergencyNumber", object, "kRequest", __p);
    xpc_release(object[0]);
    v9 = __p[0];
    v19 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    CFRetain(a2);
    ctu::cf_to_xpc((ctu *)a2, v10);
    xpc_dictionary_set_value(v9, "kPhoneNumber", value);
    v11 = value;
    value = xpc_null_create();
    xpc_release(v11);
    xpc_release(value);
    value = 0;
    v12 = xpc_int64_create(a3);
    if (!v12)
      v12 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kIncludeAllowedNumbers", v12);
    v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    xdict = xpc_null_create();
    v4 = SendXpcMessage(a1, &v19, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kIsValidEmergencyNumber"))
    {
      object[0] = &xdict;
      object[1] = "kIsValidEmergencyNumber";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      *a4 = xpc::dyn_cast_or_default((xpc *)__p, 0);
      xpc_release(__p[0]);
    }
    else if (!HIDWORD(v4))
    {
      object[0] = 0;
      object[1] = 0;
      v21 = 0;
      ctu::cf::assign();
      *(_OWORD *)__p = *(_OWORD *)object;
      v16 = v21;
      *a4 = isEmergencyNumber((const void **)__p);
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
    }
    xpc_release(xdict);
    CFRelease(a2);
    xpc_release(v19);
  }
  return v4;
}

unint64_t _CTServerConnectionIsEmergencyNumberWithWhitelistIncluded(uint64_t a1, void *a2, _BYTE *a3)
{
  return _CTServerConnectionIsEmergencyNumberHelper(a1, a2, 1u, a3);
}

unint64_t _CTServerConnectionPhoneNumberIsMmiOrUssd(uint64_t a1, void *a2, BOOL *a3)
{
  unint64_t IsEmergencyNumberHelper;
  int v5;
  const __CFBoolean *IsMmiOrUssd;
  unsigned __int8 v8;

  IsEmergencyNumberHelper = 0x1600000001;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        *a3 = 0;
        v8 = 0;
        IsEmergencyNumberHelper = _CTServerConnectionIsEmergencyNumberHelper(a1, a2, 1u, &v8);
        v5 = v8;
        *a3 = v8 == 0;
        if (!v5)
        {
          IsMmiOrUssd = (const __CFBoolean *)_CTCallPhoneNumberIsMmiOrUssd();
          *a3 = CFBooleanGetValue(IsMmiOrUssd) != 0;
        }
      }
    }
  }
  return IsEmergencyNumberHelper;
}

unint64_t _CTServerConnectionGetEmergencyConfig(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v6;
  xpc_object_t object[2];
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetEmergencyConfig", object, "kRequest", &v9);
    xpc_release(object[0]);
    v10 = v9;
    v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kEmergencyWiFiConfig";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    v8 = 0;
    object[0] = xpc_null_create();
    v2 = SendXpcMessageIf(1, a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](object[0]) == MEMORY[0x1E0C812F8] && !HIDWORD(v2))
    {
      v9 = 0;
      v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

unint64_t _CTServerConnectionIsValidEmergencyNumber(uint64_t a1, void *a2, NSObject *a3, uint64_t a4)
{
  unint64_t IsEmergencyNumberHelper;
  _QWORD block[5];
  CFTypeRef cf;
  char v11;
  char v12;

  v12 = 0;
  IsEmergencyNumberHelper = _CTServerConnectionIsEmergencyNumberHelper(a1, a2, 0, &v12);
  if (a2)
    CFRetain(a2);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___CTServerConnectionIsValidEmergencyNumber_block_invoke;
  block[3] = &unk_1E152D4E0;
  block[4] = a4;
  cf = a2;
  if (a2)
    CFRetain(a2);
  v11 = v12;
  dispatch_async(a3, block);
  if (cf)
    CFRelease(cf);
  if (a2)
    CFRelease(a2);
  return IsEmergencyNumberHelper;
}

CFTypeRef __copy_helper_block_8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

uint64_t _CTServerConnectionSwitchCallSource(uint64_t a1, const __CFUUID *a2, unsigned int a3)
{
  uint64_t v3;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v13;
  xpc_object_t v14;
  CFUUIDBytes object;

  v3 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSwitchCallSource", (xpc_object_t *)&object, "kRequest", &v13);
    xpc_release(*(xpc_object_t *)&object.byte0);
    v7 = v13;
    v14 = v13;
    v13 = xpc_null_create();
    xpc_release(v13);
    object = CFUUIDGetUUIDBytes(a2);
    v8 = xpc_data_create(&object, 0x10uLL);
    if (!v8)
      v8 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kUuid", v8);
    v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    v10 = xpc_int64_create(a3);
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kCallSourceMode", v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    v3 = SendXpcMessageIf(1, a1, &v14, 0, 1);
    xpc_release(v14);
  }
  return v3;
}

uint64_t _CTServerConnectionSwitchCallSourceAll(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v9;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSwitchCallSource", &object, "kRequest", &v9);
  xpc_release(object);
  v4 = v9;
  object = v9;
  v9 = xpc_null_create();
  xpc_release(v9);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kCallSourceMode", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = SendXpcMessageIf(1, a1, &object, 0, 1);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionPullCallFromOtherDevice(const void *a1, CFDictionaryRef theDict, uint64_t *a3)
{
  uint64_t v3;
  uint64_t (*v7)(uint64_t);
  uint64_t (*v8)(uint64_t);
  const __CFUUID *v11;
  CFComparisonResult v12;
  xpc_object_t *v13;
  xpc_object_t v14;
  const void *v15;
  xpc_object_t v16;
  const void *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  int v25;
  uint64_t UuidBytes;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  CFUUIDBytes *p_bytes;
  const char *p_p;
  char *cStr;
  uint64_t v35;
  uint64_t v36;
  void *__p;
  const char *v38;
  uint64_t v39;
  xpc_object_t v40;
  xpc_object_t v41[2];
  uint64_t v42;
  xpc_object_t v43;
  xpc_object_t object;
  xpc_object_t value;
  xpc_object_t v46;
  int valuePtr;
  CFStringRef uuidStr;
  CFStringRef v49;
  const __CFNumber *v50;
  ctu *v51;
  ctu *v52;
  CFUUIDBytes bytes;
  uint64_t v54;

  v3 = 0x1600000001;
  if (a1 && theDict && a3)
  {
    v52 = 0;
    *(_QWORD *)&bytes.byte0 = CFDictionaryGetValue(theDict, CFSTR("kCTCallPhoneNumber"));
    ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v52, (CFTypeRef *)&bytes);
    v51 = 0;
    *(_QWORD *)&bytes.byte0 = CFDictionaryGetValue(theDict, CFSTR("kCTCallCallerName"));
    ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v51, (CFTypeRef *)&bytes);
    v50 = 0;
    *(_QWORD *)&bytes.byte0 = CFDictionaryGetValue(theDict, CFSTR("kCTCallDuration"));
    ctu::cf::CFSharedRef<__CFNumber const>::CFSharedRef<void const,void>(&v50, (CFTypeRef *)&bytes);
    v49 = 0;
    *(_QWORD *)&bytes.byte0 = CFDictionaryGetValue(theDict, CFSTR("kCTCallDirection"));
    ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v49, (CFTypeRef *)&bytes);
    uuidStr = 0;
    *(_QWORD *)&bytes.byte0 = CFDictionaryGetValue(theDict, CFSTR("kCTCallId"));
    ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&uuidStr, (CFTypeRef *)&bytes);
    v7 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    if (v52)
      v8 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    else
      v8 = 0;
    if (v8)
    {
      if (v50
         ? ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get
         : 0)
      {
        if (v49
           ? ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get
           : 0)
        {
          if (!uuidStr)
            v7 = 0;
          if (v7)
          {
            v11 = CFUUIDCreateFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], uuidStr);
            valuePtr = 0;
            CFNumberGetValue(v50, kCFNumberIntType, &valuePtr);
            v12 = CFStringCompare(v49, CFSTR("kCTCallDirectionOutgoing"), 0);
            v13 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&bytes);
            xpc::dict_creator::operator()<char const*>("kPullCallFromOtherDevice", v13, "kRequest", v41);
            xpc_release(*(xpc_object_t *)&bytes.byte0);
            v14 = v41[0];
            v46 = v41[0];
            v41[0] = xpc_null_create();
            xpc_release(v41[0]);
            ctu::cf_to_xpc(v52, v15);
            xpc_dictionary_set_value(v14, "kPhoneNumber", value);
            v16 = value;
            value = xpc_null_create();
            xpc_release(v16);
            xpc_release(value);
            value = 0;
            ctu::cf_to_xpc(v51, v17);
            xpc_dictionary_set_value(v14, "kCallName", object);
            v18 = object;
            object = xpc_null_create();
            xpc_release(v18);
            xpc_release(object);
            object = 0;
            v19 = xpc_int64_create(valuePtr);
            if (!v19)
              v19 = xpc_null_create();
            xpc_dictionary_set_value(v14, "kCallDuration", v19);
            v20 = xpc_null_create();
            xpc_release(v19);
            xpc_release(v20);
            v21 = xpc_BOOL_create(v12 == kCFCompareEqualTo);
            if (!v21)
              v21 = xpc_null_create();
            xpc_dictionary_set_value(v14, "kCallDirectionMobileOriginated", v21);
            v22 = xpc_null_create();
            xpc_release(v21);
            xpc_release(v22);
            bytes = CFUUIDGetUUIDBytes(v11);
            v23 = xpc_data_create(&bytes, 0x10uLL);
            if (!v23)
              v23 = xpc_null_create();
            xpc_dictionary_set_value(v14, "kUuid", v23);
            v24 = xpc_null_create();
            xpc_release(v23);
            xpc_release(v24);
            v43 = xpc_null_create();
            v3 = SendXpcMessageIf(1, (uint64_t)a1, &v46, &v43);
            *a3 = 0;
            if (MEMORY[0x186DBAE5C](v43) == MEMORY[0x1E0C812F8])
            {
              *(_QWORD *)&bytes.byte0 = &v43;
              *(_QWORD *)&bytes.byte8 = "kValid";
              xpc::dict::object_proxy::operator xpc::object((uint64_t)&bytes, v41);
              v25 = xpc::dyn_cast_or_default((xpc *)v41, 0);
              xpc_release(v41[0]);
              if (v25)
              {
                *(_QWORD *)&bytes.byte0 = &v43;
                *(_QWORD *)&bytes.byte8 = "kUuid";
                xpc::dict::object_proxy::operator xpc::object((uint64_t)&bytes, v41);
                UuidBytes = createUuidBytes(v41);
                v35 = v27;
                v36 = UuidBytes;
                xpc_release(v41[0]);
                *(_QWORD *)&bytes.byte0 = &v43;
                *(_QWORD *)&bytes.byte8 = "kCallStartTime";
                xpc::dict::object_proxy::operator xpc::object((uint64_t)&bytes, v41);
                v28 = xpc::dyn_cast_or_default((xpc *)v41, 0);
                xpc_release(v41[0]);
                *(_QWORD *)&bytes.byte0 = &v43;
                *(_QWORD *)&bytes.byte8 = "kCallFlags";
                xpc::dict::object_proxy::operator xpc::object((uint64_t)&bytes, v41);
                v29 = xpc::dyn_cast_or_default((xpc *)v41, 0);
                xpc_release(v41[0]);
                *(_QWORD *)&bytes.byte0 = &v43;
                *(_QWORD *)&bytes.byte8 = "kMobileCountryCode";
                xpc::dict::object_proxy::operator xpc::object((uint64_t)&bytes, v41);
                v30 = xpc::dyn_cast_or_default((xpc *)v41, 0);
                xpc_release(v41[0]);
                v41[0] = 0;
                v41[1] = 0;
                v42 = 0;
                __p = &v43;
                v38 = "kISOCountryCode";
                xpc::dict::object_proxy::operator xpc::object((uint64_t)&__p, &v40);
                bytes = (CFUUIDBytes)0;
                v54 = 0;
                xpc::dyn_cast_or_default();
                if (SHIBYTE(v54) < 0)
                  operator delete(*(void **)&bytes.byte0);
                xpc_release(v40);
                bytes = (CFUUIDBytes)0;
                v54 = 0;
                ctu::cf::assign();
                __p = 0;
                v38 = 0;
                v39 = 0;
                ctu::cf::assign();
                if (v54 >= 0)
                  p_bytes = &bytes;
                else
                  p_bytes = *(CFUUIDBytes **)&bytes.byte0;
                if (v39 >= 0)
                  p_p = (const char *)&__p;
                else
                  p_p = (const char *)__p;
                if (v42 >= 0)
                  cStr = (char *)v41;
                else
                  cStr = (char *)v41[0];
                *a3 = _CTCallCreateFromCallInfo(a1, v36, v35, (const char *)p_bytes, p_p, "", v28, 0, v29, 0, v30, cStr, 1u);
                if (SHIBYTE(v39) < 0)
                  operator delete(__p);
                if (SHIBYTE(v54) < 0)
                  operator delete(*(void **)&bytes.byte0);
                if (SHIBYTE(v42) < 0)
                  operator delete(v41[0]);
              }
            }
            xpc_release(v43);
            xpc_release(v46);
            if (v11)
              CFRelease(v11);
          }
        }
      }
    }
    if (uuidStr)
      CFRelease(uuidStr);
    if (v49)
      CFRelease(v49);
    if (v50)
      CFRelease(v50);
    if (v51)
      CFRelease(v51);
    if (v52)
      CFRelease(v52);
  }
  return v3;
}

uint64_t _CTServerConnectionPullCallIsPossible(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v7;
  xpc_object_t xdict;
  xpc_object_t v9;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPullCallIsPossible", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v9 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessageIf(1, a1, &v9, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kPullCallIsPossible"))
    {
      object[0] = &xdict;
      object[1] = "kPullCallIsPossible";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    xpc_release(xdict);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionEndCallWithCauseCode(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t object[2];
  xpc_object_t v15;
  xpc_object_t v16;

  v3 = 0x1600000001;
  if (a1 && a2 && (a3 & 0x80000000) == 0)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallModelEnd", object, "kRequest", &v15);
    xpc_release(object[0]);
    v7 = v15;
    v16 = v15;
    v15 = xpc_null_create();
    xpc_release(v15);
    object[0] = (xpc_object_t)_CTCallGetIdentifier(a2);
    object[1] = v8;
    v9 = xpc_data_create(object, 0x10uLL);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kUuid", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v11 = xpc_int64_create(a3);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kDisconnectCauseCode", v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    v3 = SendXpcMessageIf(1, a1, &v16, 0, 1);
    xpc_release(v16);
  }
  return v3;
}

unint64_t _CTServerConnectionMediaStatusIsActive(uint64_t a1, _BYTE *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v6;
  xpc_object_t object[2];
  xpc_object_t v9;
  xpc_object_t xdict;
  xpc_object_t v11;

  v2 = 1;
  LODWORD(v3) = 22;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCallMediaStatus", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v11 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v6 = SendXpcMessageIf(1, a1, &v11, &xdict);
    v2 = v6;
    v3 = HIDWORD(v6);
    if (!(_DWORD)v6)
    {
      if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kActive"))
      {
        object[0] = &xdict;
        object[1] = "kActive";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
        *a2 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
        xpc_release(v9);
        v2 = 0;
      }
      else
      {
        v2 = 1;
        LODWORD(v3) = 35;
      }
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2 | ((unint64_t)v3 << 32);
}

const void **std::vector<ctu::cf::CFSharedRef<void const>>::__emplace_back_slow_path<ctu::cf::CFSharedRef<void const>&>(const void ***a1, const void **a2)
{
  const void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  const void **v12;
  char *v13;
  const void *v14;
  const void **v15;
  const void **v16;
  const void **v17;
  const void *v18;
  int64x2_t v19;
  const void **v20;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v2 = *a1;
  v3 = a1[1] - *a1;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = (char *)v8 - (char *)v2;
  if (v9 >> 2 > v4)
    v4 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v4;
  v25 = v7;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(v7, v10);
  else
    v11 = 0;
  v22 = 0;
  v23.i64[0] = 0;
  v12 = (const void **)&v11[8 * v3];
  v13 = &v11[8 * v10];
  v24 = v13;
  v14 = *a2;
  *v12 = *a2;
  if (v14)
    CFRetain(v14);
  v15 = v12 + 1;
  v23.i64[1] = (uint64_t)(v12 + 1);
  v17 = *a1;
  v16 = a1[1];
  if (v16 == *a1)
  {
    v19 = vdupq_n_s64((unint64_t)v16);
  }
  else
  {
    do
    {
      *--v12 = 0;
      v18 = *--v16;
      *v12 = v18;
      *v16 = 0;
    }
    while (v16 != v17);
    v19 = *(int64x2_t *)a1;
    v15 = (const void **)v23.i64[1];
    v13 = v24;
  }
  *a1 = v12;
  a1[1] = v15;
  v23 = v19;
  v20 = a1[2];
  a1[2] = (const void **)v13;
  v24 = (char *)v20;
  v22 = v19.i64[0];
  std::__split_buffer<ctu::cf::CFSharedRef<void const>>::~__split_buffer((void **)&v22);
  return v15;
}

void **std::__split_buffer<ctu::cf::CFSharedRef<void const>>::~__split_buffer(void **a1)
{
  std::__split_buffer<ctu::cf::CFSharedRef<void const>>::clear[abi:nn180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<ctu::cf::CFSharedRef<void const>>::clear[abi:nn180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  while (v1 != v2)
  {
    v5 = *(const void **)(v1 - 8);
    v1 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v1;
    if (v5)
    {
      CFRelease(v4);
      v1 = *(_QWORD *)(a1 + 16);
    }
  }
}

void std::vector<ctu::cf::CFSharedRef<void const>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<ctu::cf::CFSharedRef<void const>>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<ctu::cf::CFSharedRef<void const>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  const void *v4;
  const void *v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 8)
  {
    v5 = *(const void **)(i - 8);
    v4 = v5;
    if (v5)
      CFRelease(v4);
  }
  a1[1] = v2;
}

_OWORD *std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v6 = (void **)std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v13 = 0;
    v7 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    LOBYTE(v13) = 1;
    std::__tree<std::__value_type<objc_selector *,objc_selector *>,std::__map_value_compare<objc_selector *,std::__value_type<objc_selector *,objc_selector *>,std::less<objc_selector *>,true>,std::allocator<std::__value_type<objc_selector *,objc_selector *>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,void *>>>>::reset[abi:nn180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer})(xpc::dict)>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer})(xpc::dict)>>,0>(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:nn180100]<std::pair<std::string const,dispatch::block<void({block_pointer})(xpc::dict)>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

const char *CTActivationPolicyCarrierLockAsString(uint64_t a1)
{
  const char *v1;

  v1 = "CTActivationPolicyCarrierLockUnknown";
  if (a1 == 1)
    v1 = "CTActivationPolicyCarrierUnlocked";
  if (a1 == 2)
    return "CTActivationPolicyCarrierLocked";
  else
    return v1;
}

uint64_t _CTServerConnectionSelectPhonebook(uint64_t a1, unsigned int a2, uint64_t a3)
{
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v15;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPhoneBookSelect", &object, "kRequest", &v15);
  xpc_release(object);
  v6 = v15;
  object = v15;
  v15 = xpc_null_create();
  xpc_release(v15);
  if (a3)
    v7 = _CFXPCCreateXPCObjectFromCFObject();
  else
    v7 = (uint64_t)xpc_string_create("");
  v9 = (xpc_object_t)v7;
  if (!v7)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kPhoneBookPassword", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(a2);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kPhoneBookName", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v8 = SendXpcMessage(a1, &object, 0, v13);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionSavePhonebookEntry(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint64_t v18;
  xpc_object_t v20;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPhoneBookSaveContact", &object, "kRequest", &v20);
  xpc_release(object);
  v8 = v20;
  object = v20;
  v20 = xpc_null_create();
  xpc_release(v20);
  v9 = xpc_int64_create(a2);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kPhoneBookEntryIndex", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  if (a3)
    v11 = _CFXPCCreateXPCObjectFromCFObject();
  else
    v11 = (uint64_t)xpc_string_create("");
  v13 = (xpc_object_t)v11;
  if (!v11)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kPhoneBookContactName", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (a4)
    v15 = _CFXPCCreateXPCObjectFromCFObject();
  else
    v15 = (uint64_t)xpc_string_create("");
  v16 = (xpc_object_t)v15;
  if (!v15)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kPhoneBookContactNumber", v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v12 = SendXpcMessage(a1, &object, 0, v18);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionFetchPhonebook(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPhoneBookFetch", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionCopyPhoneBookEntry(uint64_t a1, _BYTE *a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t xdict;
  xpc_object_t object;

  v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPhoneBookGetEntry", &object, "kRequest", &xdict);
    xpc_release(object);
    v9 = xdict;
    object = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v10 = xpc_int64_create(a3);
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kPhoneBookEntryIndex", v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    xdict = xpc_null_create();
    v4 = SendXpcMessage(a1, &object, &xdict);
    *a2 = 0;
    *a4 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_count(xdict))
    {
      v14 = 0;
      v13 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v14, (CFTypeRef *)&v13);
      *a4 = v14;
      *a2 = 1;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v4;
}

uint64_t _CTServerConnectionGetPhonebookEntryCount(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPhoneBookGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v8 = "kPhoneBookEntryCount";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object = &v10;
      v8 = "kPhoneBookEntryCount";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t MMSHeaderContainer::contentTypeEncoding(MMSHeaderContainer *this)
{
  uint64_t result;
  MMSContentTypeHeader *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = MMSHeaderContainer::_contentTypeEncoding;
  if (!MMSHeaderContainer::_contentTypeEncoding)
  {
    v2 = (MMSContentTypeHeader *)operator new();
    MMSContentTypeHeader::MMSContentTypeHeader(v2);
    v6 = v3;
    v4 = operator new();
    result = MMSHeaderEncoding::MMSHeaderEncoding(v4, &v6, 4, "Content-Type");
    MMSHeaderContainer::_contentTypeEncoding = result;
    v5 = v6;
    v6 = 0;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      return MMSHeaderContainer::_contentTypeEncoding;
    }
  }
  return result;
}

void MMSHeaderContainer::MMSHeaderContainer(MMSHeaderContainer *this)
{
  *(_QWORD *)this = off_1E152CB40;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 1065353216;
}

void MMSHeaderContainer::MMSHeaderContainer(MMSHeaderContainer *this, const MMSHeaderContainer *a2)
{
  *(_QWORD *)this = off_1E152CB40;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 1065353216;
  MMSHeaderContainer::addHeaders(this, a2);
}

void MMSHeaderContainer::addHeaders(MMSHeaderContainer *this, const MMSHeaderContainer *a2)
{
  uint64_t v2;
  unint64_t v5;
  unsigned int v6;
  MMSHeader *v7;

  v2 = *((_QWORD *)a2 + 1);
  if (*((_QWORD *)a2 + 2) != v2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = (MMSHeader *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v5) + 80))(*(_QWORD *)(v2 + 8 * v5));
      MMSHeaderContainer::addHeader(this, v7, 1);
      v5 = v6;
      v2 = *((_QWORD *)a2 + 1);
      ++v6;
    }
    while (v5 < (*((_QWORD *)a2 + 2) - v2) >> 3);
  }
}

void MMSHeaderContainer::~MMSHeaderContainer(MMSHeaderContainer *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = off_1E152CB40;
  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = *(_QWORD *)(v3 + 8 * v4);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = v5++;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::~__hash_table((uint64_t)this + 32);
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
}

void MMSHeaderContainer::addHeader(MMSHeaderContainer *this, MMSHeader *a2, char a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *__p[2];
  char v29;
  void **v30;

  if ((a3 & 1) != 0)
    goto LABEL_11;
  v5 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) == v5)
    goto LABEL_11;
  v6 = 0;
  v7 = 1;
  while (1)
  {
    v8 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 8 * v6) + 64))(*(_QWORD *)(v5 + 8 * v6));
    v9 = (const char *)(*(uint64_t (**)(MMSHeader *))(*(_QWORD *)a2 + 64))(a2);
    if (!strcmp(v8, v9))
      break;
    v6 = v7;
    v5 = *((_QWORD *)this + 1);
    ++v7;
    if (v6 >= (*((_QWORD *)this + 2) - v5) >> 3)
      goto LABEL_11;
  }
  if (!v7)
  {
LABEL_11:
    v13 = *((_QWORD *)this + 3);
    v14 = (_QWORD *)*((_QWORD *)this + 2);
    if ((unint64_t)v14 >= v13)
    {
      v16 = *((_QWORD *)this + 1);
      v17 = ((uint64_t)v14 - v16) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        abort();
      v18 = v13 - v16;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>((uint64_t)this + 24, v20);
      else
        v21 = 0;
      v22 = &v21[8 * v17];
      v23 = &v21[8 * v20];
      *(_QWORD *)v22 = a2;
      v15 = v22 + 8;
      v25 = (char *)*((_QWORD *)this + 1);
      v24 = (char *)*((_QWORD *)this + 2);
      if (v24 != v25)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *((_QWORD *)v22 - 1) = v26;
          v22 -= 8;
        }
        while (v24 != v25);
        v24 = (char *)*((_QWORD *)this + 1);
      }
      *((_QWORD *)this + 1) = v22;
      *((_QWORD *)this + 2) = v15;
      *((_QWORD *)this + 3) = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v14 = a2;
      v15 = v14 + 1;
    }
    *((_QWORD *)this + 2) = v15;
  }
  else
  {
    v10 = v7 - 1;
    v11 = *((_QWORD *)this + 1);
    v12 = *(_QWORD *)(v11 + 8 * v10);
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v11 = *((_QWORD *)this + 1);
    }
    *(_QWORD *)(v11 + 8 * v10) = a2;
  }
  v27 = (char *)(*(uint64_t (**)(MMSHeader *))(*(_QWORD *)a2 + 64))(a2);
  std::string::basic_string[abi:nn180100]<0>(__p, v27);
  v30 = __p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 32, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v30)+ 5) = a2;
  if (v29 < 0)
    operator delete(__p[0]);
}

void MMSHeaderContainer::createHeader(MMSHeaderContainer *this, char *a2)
{
  MMSHeaderEncodingMap *v3;

  v3 = (MMSHeaderEncodingMap *)(*(uint64_t (**)(MMSHeaderContainer *))(*(_QWORD *)this + 16))(this);
  MMSHeaderEncodingMap::createHeader(v3, a2);
}

MMSHeader *MMSHeaderContainer::addHeader(MMSHeaderContainer *this, char *a2, const char *a3, char a4)
{
  MMSHeaderEncodingMap *v8;
  MMSHeader *v9;
  MMSHeader *v10;

  v8 = (MMSHeaderEncodingMap *)(*(uint64_t (**)(MMSHeaderContainer *))(*(_QWORD *)this + 16))(this);
  MMSHeaderEncodingMap::createHeader(v8, a2);
  v10 = v9;
  if (v9)
  {
    if (((*(uint64_t (**)(MMSHeader *, const char *))(*(_QWORD *)v9 + 16))(v9, a3) & 1) != 0)
    {
      MMSHeaderContainer::addHeader(this, v10, a4);
    }
    else
    {
      (*(void (**)(MMSHeader *))(*(_QWORD *)v10 + 8))(v10);
      return 0;
    }
  }
  return v10;
}

uint64_t MMSHeaderContainer::headerCount(MMSHeaderContainer *this)
{
  return (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
}

uint64_t MMSHeaderContainer::headerWithName(MMSHeaderContainer *this, char *a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *__p[2];
  char v7;

  v2 = (_QWORD *)((char *)this + 32);
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  v3 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v2, (uint64_t)__p);
  v4 = v3;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v4)
      return *((_QWORD *)v4 + 5);
  }
  else if (v3)
  {
    return *((_QWORD *)v4 + 5);
  }
  return 0;
}

{
  _QWORD *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *__p[2];
  char v7;

  v2 = (_QWORD *)((char *)this + 32);
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  v3 = std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::find<std::string>(v2, (uint64_t)__p);
  v4 = v3;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v4)
      return *((_QWORD *)v4 + 5);
  }
  else if (v3)
  {
    return *((_QWORD *)v4 + 5);
  }
  return 0;
}

void MMSHeaderContainer::allHeadersWithName(uint64_t a1, const char *a2, char **a3)
{
  uint64_t v3;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  a3[1] = *a3;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v3)
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t)(a3 + 2);
    do
    {
      v10 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v7) + 64))(*(_QWORD *)(v3 + 8 * v7));
      if (!strcmp(v10, a2))
      {
        v11 = *(_QWORD *)(a1 + 8);
        v13 = a3[1];
        v12 = (unint64_t)a3[2];
        if ((unint64_t)v13 >= v12)
        {
          v15 = (v13 - *a3) >> 3;
          if ((unint64_t)(v15 + 1) >> 61)
            abort();
          v16 = v12 - (_QWORD)*a3;
          v17 = v16 >> 2;
          if (v16 >> 2 <= (unint64_t)(v15 + 1))
            v17 = v15 + 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
            v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>(v9, v18);
          else
            v19 = 0;
          v20 = &v19[8 * v15];
          *(_QWORD *)v20 = *(_QWORD *)(v11 + 8 * v7);
          v14 = v20 + 8;
          v22 = *a3;
          v21 = a3[1];
          if (v21 != *a3)
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *((_QWORD *)v20 - 1) = v23;
              v20 -= 8;
            }
            while (v21 != v22);
            v21 = *a3;
          }
          *a3 = v20;
          a3[1] = v14;
          a3[2] = &v19[8 * v18];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v13 = *(_QWORD *)(v11 + 8 * v7);
          v14 = v13 + 8;
        }
        a3[1] = v14;
      }
      v3 = *(_QWORD *)(a1 + 8);
      v7 = ++v8;
    }
    while (v8 < (unint64_t)((*(_QWORD *)(a1 + 16) - v3) >> 3));
  }
}

uint64_t MMSHeaderContainer::contentTypeHeader(MMSHeaderContainer *this)
{
  return MMSHeaderContainer::headerWithName(this, "Content-Type");
}

{
  return MMSHeaderContainer::headerWithName(this, "Content-Type");
}

uint64_t MMSHeaderContainer::contentType(MMSHeaderContainer *this)
{
  uint64_t result;

  result = MMSHeaderContainer::headerWithName(this, "Content-Type");
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

{
  uint64_t result;

  result = MMSHeaderContainer::headerWithName(this, "Content-Type");
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

BOOL MMSHeaderContainer::setContentType(MMSHeaderContainer *this, MMSContentType *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  MMSContentType::contentTypeForName(a2, &v6);
  v3 = MMSHeaderContainer::setContentType(this, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v3;
}

BOOL MMSHeaderContainer::setContentType(MMSHeaderContainer *a1, uint64_t *a2)
{
  uint64_t v2;
  MMSHeaderContainer *v5;
  uint64_t v6;

  v2 = *a2;
  if (*a2)
  {
    v5 = (MMSHeaderContainer *)operator new();
    v6 = MMSHeaderContainer::contentTypeEncoding(v5);
    MMSContentTypeHeader::MMSContentTypeHeader((uint64_t)v5, v6, a2);
    MMSHeaderContainer::addHeader(a1, v5, 0);
  }
  return v2 != 0;
}

uint64_t MMSHeaderContainer::headerValueAsString(MMSHeaderContainer *a1, char *a2, uint64_t a3)
{
  uint64_t result;

  result = MMSHeaderContainer::headerWithName(a1, a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 72))(result, a3);
  return result;
}

uint64_t MMSHeaderContainer::valueForStringHeader(MMSHeaderContainer *this, char *a2)
{
  uint64_t result;
  uint64_t v3;

  result = MMSHeaderContainer::headerWithName(this, a2);
  if (result)
  {
    v3 = result;
    result += 24;
    if (*(char *)(v3 + 47) < 0)
      return *(_QWORD *)result;
  }
  return result;
}

std::string *MMSHeaderContainer::prettyHeaders@<X0>(std::string *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  std::string::size_type size;
  std::string *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void **v12;
  std::string::size_type v13;
  void *__p[2];
  unsigned __int8 v15;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  size = this->__r_.__value_.__l.__size_;
  if (this->__r_.__value_.__r.__words[2] != size)
  {
    v8 = this;
    v9 = 0;
    v10 = 1;
    do
    {
      v11 = *(_QWORD *)(size + 8 * v9);
      this = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
      if ((_DWORD)this == a2)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(__p, v11, a3);
        if ((v15 & 0x80u) == 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        if ((v15 & 0x80u) == 0)
          v13 = v15;
        else
          v13 = (std::string::size_type)__p[1];
        std::string::append(a4, (const std::string::value_type *)v12, v13);
        if ((char)v15 < 0)
          operator delete(__p[0]);
        this = std::string::append(a4, "\n", 1uLL);
      }
      v9 = v10;
      size = v8->__r_.__value_.__l.__size_;
      ++v10;
    }
    while (v9 < (uint64_t)(v8->__r_.__value_.__r.__words[2] - size) >> 3);
  }
  return this;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unsigned __int8 *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v30;

  v5 = (unsigned __int8 *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v30, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:nn180100](a1 + 32, (unsigned __int8 *)i + 16, v5) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)i + 5) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_41:
    *v27 = i;
    goto LABEL_42;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v26 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

MMSEnumerationHeader *MMSContentDispositionHeader::createPrototype(MMSContentDispositionHeader *this)
{
  char v1;
  MMSEnumerationHeader *v2;
  _QWORD *v3;

  v1 = (char)this;
  v2 = (MMSEnumerationHeader *)operator new();
  v3 = (_QWORD *)MMSEnumerationHeader::MMSEnumerationHeader((uint64_t)v2, 0, 0);
  *v3 = &off_1E152CFD0;
  MMSParameterContainer::MMSParameterContainer((MMSParameterContainer *)(v3 + 4));
  *((_BYTE *)v2 + 104) = 0;
  *((_BYTE *)v2 + 16) = 1;
  MMSEnumerationHeader::addNameForValue(v2, "Form-data", 128);
  MMSEnumerationHeader::addNameForValue(v2, "Attachment", 129);
  MMSEnumerationHeader::addNameForValue(v2, "Inline", 130);
  MMSEnumerationHeader::addNameForValue(v2, "inline", 130);
  *((_BYTE *)v2 + 104) = v1;
  return v2;
}

uint64_t MMSContentDispositionHeader::createInstance(MMSContentDispositionHeader *this)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = operator new();
  v3 = (_QWORD *)MMSEnumerationHeader::MMSEnumerationHeader(v2, *((_QWORD *)this + 1), 0);
  *v3 = &off_1E152CFD0;
  MMSParameterContainer::MMSParameterContainer((MMSParameterContainer *)(v3 + 4));
  *(_BYTE *)(v2 + 104) = *((_BYTE *)this + 104);
  return v2;
}

uint64_t MMSContentDispositionHeader::copy(MMSContentDispositionHeader *this)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = operator new();
  v3 = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *(_QWORD *)((char *)v3 + 17) = *(_QWORD *)((char *)this + 17);
  v3[3] = *((_QWORD *)this + 3);
  *v3 = &off_1E152CFD0;
  MMSParameterContainer::MMSParameterContainer((MMSParameterContainer *)(v3 + 4), (MMSContentDispositionHeader *)((char *)this + 32));
  *(_BYTE *)(v2 + 104) = *((_BYTE *)this + 104);
  return v2;
}

uint64_t MMSContentDispositionHeader::parseValue(MMSContentDispositionHeader *this, char *__s)
{
  char *v4;
  char *v5;
  const std::string::value_type *v6;
  std::string *p_p;
  std::string *v8;
  uint64_t v9;
  const char *v10;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  __p = 0;
  v13 = 0;
  v14 = 0;
  v4 = strchr(__s, 59);
  if (v4)
  {
    v5 = v4;
    std::string::__assign_external(&v15, __s, ((_BYTE)v4 - (_BYTE)__s));
    v6 = v5 + 1;
    p_p = (std::string *)&__p;
  }
  else
  {
    p_p = &v15;
    v6 = __s;
  }
  std::string::__assign_external(p_p, v6);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v15;
  else
    v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
  v9 = MMSEnumerationHeader::parseValue(this, (char *)v8);
  if ((_DWORD)v9)
  {
    if (SHIBYTE(v14) < 0)
    {
      if (!v13)
        goto LABEL_14;
      v10 = (const char *)__p;
    }
    else
    {
      if (!HIBYTE(v14))
        goto LABEL_14;
      v10 = (const char *)&__p;
    }
    MMSParameterContainer::parseParameters((MMSContentDispositionHeader *)((char *)this + 32), v10);
  }
LABEL_14:
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v9;
}

uint64_t MMSContentDispositionHeader::valueAsString(uint64_t a1, std::string *a2)
{
  uint64_t v4;

  v4 = MMSEnumerationHeader::valueAsString(a1, a2);
  if ((_DWORD)v4)
    MMSParameterContainer::toString((MMSHeaderContainer *)(a1 + 32), a2);
  return v4;
}

uint64_t MMSContentDispositionHeader::decodeValue(MMSContentDispositionHeader *this, MMSPduDecoder *a2)
{
  void **v4;
  uint64_t v5;
  void *__p[2];
  unsigned int v8[4];
  uint64_t v9;
  unsigned int v10;

  v10 = 0;
  if (*((_BYTE *)this + 104))
  {
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)v8 = 0;
    MMSPduDecoder::decodeString((uint64_t)a2, (std::string *)__p, 0xFFFFFFFF);
    if ((v8[1] & 0x80000000) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    v5 = (*(uint64_t (**)(MMSContentDispositionHeader *, void **))(*(_QWORD *)this + 16))(this, v4);
    if (SHIBYTE(v8[1]) < 0)
      operator delete(__p[0]);
  }
  else if (MMSPduDecoder::decodeWspValueLength(a2, &v10)
         && v10 <= *((_DWORD *)a2 + 4) - *((_DWORD *)a2 + 5)
         && MMSPduDecoder::decodeByte(a2, (unsigned __int8 *)this + 17))
  {
    --v10;
    v9 = 0;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v8 = 0u;
    MMSPduDecoder::MMSPduDecoder((MMSPduDecoder *)__p, a2, v10);
    v5 = MMSParameterContainer::decode((MMSContentDispositionHeader *)((char *)this + 32), (MMSPduDecoder *)__p);
    if ((_DWORD)v5)
      MMSPduDecoder::skip((uint64_t)a2, v8[1]);
    MEMORY[0x186DBA1B4](__p);
  }
  else
  {
    return 0;
  }
  return v5;
}

BOOL MMSContentDispositionHeader::encodeName(MMSContentDispositionHeader *this, MMSPduEncoder *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    MMSPduEncoder::encodeByte(a2, gContentDispositionEncodingByte | 0x80);
  return v2 != 0;
}

BOOL MMSContentDispositionHeader::encodeValue(MMSContentDispositionHeader *this, MMSPduEncoder *a2)
{
  _BOOL8 v4;
  unsigned int v5;
  void *__p[2];
  __int128 v8;
  uint64_t v9;

  v9 = 0;
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  MMSPduEncoder::MMSPduEncoder((uint64_t)__p, *(_DWORD *)a2);
  MMSPduEncoder::encodeByte((MMSPduEncoder *)__p, *((_BYTE *)this + 17));
  v4 = MMSParameterContainer::encode((MMSContentDispositionHeader *)((char *)this + 32), (MMSPduEncoder *)__p);
  if (v4)
  {
    if (v8 >= 0)
      v5 = HIBYTE(v8);
    else
      v5 = v8;
    MMSPduEncoder::encodeWspValueLength(a2, v5);
    MMSPduEncoder::append(a2, (MMSPduEncoder *)__p);
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[1]);
  return v4;
}

const char *MMSContentDispositionHeader::headerTypeName(MMSContentDispositionHeader *this)
{
  return "content-disposition";
}

uint64_t MMSContentDispositionHeader::setContentDispositionEncodingByte(uint64_t this)
{
  gContentDispositionEncodingByte = this;
  return this;
}

uint64_t MMSContentDispositionHeader::getContentDispositionEncodingByte(MMSContentDispositionHeader *this)
{
  return gContentDispositionEncodingByte;
}

void MMSContentDispositionHeader::~MMSContentDispositionHeader(MMSContentDispositionHeader *this)
{
  *(_QWORD *)this = &off_1E152CFD0;
  MMSParameterContainer::~MMSParameterContainer((MMSContentDispositionHeader *)((char *)this + 32));
  MMSEnumerationHeader::~MMSEnumerationHeader(this);
}

{
  *(_QWORD *)this = &off_1E152CFD0;
  MMSParameterContainer::~MMSParameterContainer((MMSContentDispositionHeader *)((char *)this + 32));
  MMSEnumerationHeader::~MMSEnumerationHeader(this);
  JUMPOUT(0x186DBA454);
}

void sub_18432C6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18432CB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *MMSFromHeader::MMSFromHeader(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;

  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 7), "com.apple.telephony", "msg.mms.pdu.from.hdr");
  result = MMSSensitiveEncodedStringHeader::MMSSensitiveEncodedStringHeader((uint64_t)a1, a2, 0);
  *a1 = off_1E152C568;
  return result;
}

_QWORD *MMSFromHeader::createInstance(MMSFromHeader *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;

  v2 = (_QWORD *)operator new();
  v3 = *((_QWORD *)this + 1);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v2 + 7), "com.apple.telephony", "msg.mms.pdu.from.hdr");
  result = MMSSensitiveEncodedStringHeader::MMSSensitiveEncodedStringHeader((uint64_t)v2, v3, 0);
  *v2 = off_1E152C568;
  return result;
}

uint64_t MMSFromHeader::copy(MMSFromHeader *this)
{
  uint64_t v2;
  std::string *v3;
  std::string *v4;

  v2 = operator new();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v2 + 56), (MMSFromHeader *)((char *)this + 56));
  v3 = (std::string *)MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E152C870;
  v4 = v3 + 1;
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
  *(_DWORD *)(v2 + 48) = *((_DWORD *)this + 12);
  *(_QWORD *)v2 = off_1E152C568;
  return v2;
}

uint64_t MMSFromHeader::parseValue(MMSFromHeader *this, const char *__s1)
{
  int v4;
  std::string *v5;

  v4 = strcmp(__s1, "<insert address>");
  v5 = (std::string *)((char *)this + 24);
  if (v4)
  {
    std::string::__assign_external(v5, __s1);
  }
  else
  {
    if (*((char *)this + 47) < 0)
    {
      *((_QWORD *)this + 4) = 0;
      v5 = (std::string *)*((_QWORD *)this + 3);
    }
    else
    {
      *((_BYTE *)this + 47) = 0;
    }
    v5->__r_.__value_.__s.__data_[0] = 0;
  }
  return 1;
}

uint64_t MMSFromHeader::valueAsString(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
LABEL_3:
    std::string::operator=(this, (const std::string *)(a1 + 24));
    return 1;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    this->__r_.__value_.__l.__size_ = 16;
    this = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 16;
  }
  strcpy((char *)this, "<insert address>");
  return 1;
}

uint64_t MMSFromHeader::decodeValue(MMSFromHeader *this, MMSPduDecoder *a2)
{
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  unsigned __int8 v22;
  NSObject *v23;
  unsigned __int8 v24;
  unsigned int v25;

  if (*((_DWORD *)a2 + 4) == *((_DWORD *)a2 + 5))
    return 0;
  v25 = 0;
  if ((MMSPduDecoder::decodeWspValueLength(a2, &v25) & 1) != 0)
  {
    if (*((_DWORD *)a2 + 4) - *((_DWORD *)a2 + 5) >= v25)
    {
      v24 = 0;
      v21 = MMSPduDecoder::decodeByte(a2, &v24);
      result = 0;
      if (v21)
      {
        v22 = v24;
        if (v24 == 129)
        {
          return 1;
        }
        else if (v24 == 128)
        {
          return MMSPduDecoder::decodeEncodedString(a2, (std::string *)this + 1, (unsigned int *)this + 12, 0);
        }
        else
        {
          v23 = *((_QWORD *)this + 7);
          result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            MMSFromHeader::decodeValue(v22, v23);
            return 0;
          }
        }
      }
    }
    else
    {
      v5 = *((_QWORD *)this + 7);
      result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        MMSFromHeader::decodeValue(v5, v6, v7, v8, v9, v10, v11, v12);
        return 0;
      }
    }
  }
  else
  {
    v13 = *((_QWORD *)this + 7);
    result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      MMSFromHeader::decodeValue(v13, v14, v15, v16, v17, v18, v19, v20);
      return 0;
    }
  }
  return result;
}

uint64_t MMSFromHeader::encodeValue(MMSFromHeader *this, MMSPduEncoder *a2)
{
  uint64_t v4;

  if (*((char *)this + 47) < 0)
  {
    v4 = *((_QWORD *)this + 4);
    if (v4)
      goto LABEL_3;
LABEL_5:
    MMSPduEncoder::encodeByte(a2, 1);
    MMSPduEncoder::encodeByte(a2, 129);
    return 1;
  }
  LODWORD(v4) = *((unsigned __int8 *)this + 47);
  if (!*((_BYTE *)this + 47))
    goto LABEL_5;
LABEL_3:
  MMSPduEncoder::encodeWspValueLength(a2, v4 + 2);
  MMSPduEncoder::encodeByte(a2, 128);
  MMSPduEncoder::encodeEncodedString(a2, (uint64_t)this + 24, (MMSCharsetHeader *)*((unsigned int *)this + 12));
  return 1;
}

const char *MMSFromHeader::headerTypeName(MMSFromHeader *this)
{
  return "from";
}

void MMSFromHeader::~MMSFromHeader(void **this)
{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
  MEMORY[0x186DBA1B4](this + 7);
}

{
  *this = off_1E152C870;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
  MEMORY[0x186DBA1B4](this + 7);
  JUMPOUT(0x186DBA454);
}

uint64_t MMSEnumerationHeader::MMSEnumerationHeader(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  uint64_t v5;

  result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(_QWORD *)result = &off_1E152CCD0;
  *(_BYTE *)(result + 17) = a3;
  *(_QWORD *)(result + 24) = 0;
  v5 = *(_QWORD *)(result + 8);
  if (v5)
  {
    v5 = *(_QWORD *)(v5 + 32);
    if (v5)
      v5 = *(_QWORD *)(v5 + 24);
  }
  *(_QWORD *)(result + 24) = v5;
  return result;
}

void MMSEnumerationHeader::~MMSEnumerationHeader(MMSEnumerationHeader *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E152CCD0;
  if (*((_BYTE *)this + 16))
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
    {
      v3 = (void **)*((_QWORD *)this + 3);
      std::vector<MMSEnumerationValue>::__destroy_vector::operator()[abi:nn180100](&v3);
      MEMORY[0x186DBA454](v2, 0x20C40960023A9);
    }
  }
  MMSBinaryHeader::~MMSBinaryHeader(this);
}

{
  MMSEnumerationHeader::~MMSEnumerationHeader(this);
  JUMPOUT(0x186DBA454);
}

void MMSEnumerationHeader::addNameForValue(MMSEnumerationHeader *this, const char *a2, char a3)
{
  uint64_t *v5;
  const std::string::value_type *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  std::string __p;
  _QWORD v28[5];

  v5 = (uint64_t *)*((_QWORD *)this + 3);
  if (!v5)
  {
    v5 = (uint64_t *)operator new();
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    *((_QWORD *)this + 3) = v5;
  }
  memset(&__p, 0, sizeof(__p));
  if (a2)
    v7 = a2;
  else
    v7 = "";
  std::string::__assign_external(&__p, v7);
  v8 = v5[2];
  v9 = v5[1];
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *v5) >> 5;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59)
      abort();
    v13 = v8 - *v5;
    if (v13 >> 4 > v12)
      v12 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v28[4] = v5 + 2;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSEnumerationValue>>((uint64_t)(v5 + 2), v14);
    else
      v15 = 0;
    v16 = &v15[32 * v11];
    *v16 = a3;
    v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v16 + 3) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v16 + 8) = v17;
    memset(&__p, 0, sizeof(__p));
    v19 = *v5;
    v18 = v5[1];
    if (v18 == *v5)
    {
      v23 = v5[1];
      v20 = &v15[32 * v11];
    }
    else
    {
      v20 = &v15[32 * v11];
      do
      {
        v21 = *(_BYTE *)(v18 - 32);
        v18 -= 32;
        *(v20 - 32) = v21;
        v20 -= 32;
        v22 = *(_OWORD *)(v18 + 8);
        *((_QWORD *)v20 + 3) = *(_QWORD *)(v18 + 24);
        *(_OWORD *)(v20 + 8) = v22;
        *(_QWORD *)(v18 + 16) = 0;
        *(_QWORD *)(v18 + 24) = 0;
        *(_QWORD *)(v18 + 8) = 0;
      }
      while (v18 != v19);
      v23 = *v5;
      v18 = v5[1];
    }
    v24 = v16 + 32;
    *v5 = (uint64_t)v20;
    v28[0] = v23;
    v28[1] = v23;
    v5[1] = (uint64_t)(v16 + 32);
    v28[2] = v18;
    v25 = v5[2];
    v5[2] = (uint64_t)&v15[32 * v14];
    v28[3] = v25;
    std::__split_buffer<MMSEnumerationValue>::~__split_buffer((uint64_t)v28);
    v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v5[1] = (uint64_t)v24;
    if (v26 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_BYTE *)v9 = a3;
    v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v9 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v9 + 8) = v10;
    v5[1] = v9 + 32;
  }
}

uint64_t MMSEnumerationHeader::parseValue(MMSEnumerationHeader *this, char *a2)
{
  if ((MMSEnumerationHeader::parseNamedValue(this, a2) & 1) == 0)
    *((_BYTE *)this + 17) = strtoul(a2, 0, 0);
  return 1;
}

uint64_t MMSEnumerationHeader::parseNamedValue(MMSEnumerationHeader *this, std::string::value_type *__s)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v6;
  unsigned int v7;

  v2 = (uint64_t *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = *v2;
  if (*(_QWORD *)(*((_QWORD *)this + 3) + 8) == v3)
    return 0;
  v6 = 0;
  v7 = 1;
  while (std::string::compare((const std::string *)(v3 + 32 * v6 + 8), __s))
  {
    v6 = v7;
    v3 = **((_QWORD **)this + 3);
    ++v7;
    if (v6 >= (*(_QWORD *)(*((_QWORD *)this + 3) + 8) - v3) >> 5)
      return 0;
  }
  *((_BYTE *)this + 17) = *(_BYTE *)(**((_QWORD **)this + 3) + 32 * v6);
  return 1;
}

BOOL MMSEnumerationHeader::decodeValue(MMSEnumerationHeader *this, MMSPduDecoder *a2)
{
  return MMSPduDecoder::decodeByte(a2, (unsigned __int8 *)this + 17);
}

uint64_t MMSEnumerationHeader::encodeValue(MMSEnumerationHeader *this, MMSPduEncoder *a2)
{
  MMSPduEncoder::encodeByte(a2, *((_BYTE *)this + 17));
  return 1;
}

uint64_t MMSEnumerationHeader::valueAsString(uint64_t a1, std::string *this)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  __int128 v12;
  std::string::size_type v13;
  _OWORD v14[4];
  void *__p[2];
  __int128 v16;
  __int128 v17;
  _BYTE v18[144];
  uint64_t v19;

  v3 = *(uint64_t **)(a1 + 24);
  if (!v3 || (v4 = *v3, v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), v6 = v5 - v4, v5 == v4))
  {
LABEL_6:
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)__p = 0u;
    memset(v14, 0, sizeof(v14));
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v14);
    std::ostream::operator<<();
    std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v14 + 8, &v12);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v12;
    this->__r_.__value_.__r.__words[2] = v13;
    *(_QWORD *)&v14[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v14 + *(_QWORD *)(*(_QWORD *)&v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *((_QWORD *)&v14[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v16) < 0)
      operator delete(__p[1]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x186DBA418](v18);
  }
  else
  {
    v7 = 0;
    v8 = v6 >> 5;
    v9 = 1;
    while (*(unsigned __int8 *)(v4 + 32 * v7) != *(unsigned __int8 *)(a1 + 17))
    {
      v7 = v9;
      if (v8 <= v9++)
        goto LABEL_6;
    }
    std::string::operator=(this, (const std::string *)(v4 + 32 * v7 + 8));
  }
  return 1;
}

uint64_t MMSEnumerationHeader::createInstance(MMSEnumerationHeader *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = MMSEnumerationHeader::MMSEnumerationHeader(v2, *((_QWORD *)this + 1), 0);
  *(_QWORD *)(result + 24) = *((_QWORD *)this + 3);
  return result;
}

_QWORD *MMSEnumerationHeader::copy(MMSEnumerationHeader *this)
{
  uint64_t v2;
  _QWORD *result;

  v2 = operator new();
  result = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *result = &off_1E152CCD0;
  *(_QWORD *)((char *)result + 17) = *(_QWORD *)((char *)this + 17);
  result[3] = *((_QWORD *)this + 3);
  return result;
}

const char *MMSEnumerationHeader::headerTypeName(MMSEnumerationHeader *this)
{
  return "enum";
}

MMSEnumerationHeader *MMSYesNoHeader::createPrototype(MMSYesNoHeader *this)
{
  MMSEnumerationHeader *v1;
  MMSEnumerationHeader *v2;

  v1 = (MMSEnumerationHeader *)operator new();
  v2 = (MMSEnumerationHeader *)MMSEnumerationHeader::MMSEnumerationHeader((uint64_t)v1, 0, 0);
  *(_QWORD *)v2 = &off_1E152C698;
  *((_BYTE *)v2 + 16) = 1;
  MMSEnumerationHeader::addNameForValue(v2, "Yes", 128);
  MMSEnumerationHeader::addNameForValue(v1, "No", 129);
  return v1;
}

_QWORD *MMSYesNoHeader::createInstance(MMSYesNoHeader *this)
{
  uint64_t v2;
  _QWORD *result;

  v2 = operator new();
  result = (_QWORD *)MMSEnumerationHeader::MMSEnumerationHeader(v2, *((_QWORD *)this + 1), 0);
  *result = &off_1E152C698;
  return result;
}

_QWORD *MMSYesNoHeader::copy(MMSYesNoHeader *this)
{
  uint64_t v2;
  _QWORD *result;

  v2 = operator new();
  result = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *(_QWORD *)((char *)result + 17) = *(_QWORD *)((char *)this + 17);
  result[3] = *((_QWORD *)this + 3);
  *result = &off_1E152C698;
  return result;
}

void MMSYesNoHeader::~MMSYesNoHeader(MMSYesNoHeader *this)
{
  MMSEnumerationHeader::~MMSEnumerationHeader(this);
  JUMPOUT(0x186DBA454);
}

void std::vector<MMSEnumerationValue>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<MMSEnumerationValue>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<MMSEnumerationValue>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<MMSEnumerationValue>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<MMSEnumerationValue>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<MMSEnumerationValue>::__destruct_at_end[abi:nn180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<MMSEnumerationValue>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_18432DB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_18432DC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18432DDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18432DF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18432E000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18432E198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18432E3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18432E54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18432E644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18432E784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18432E914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18432EAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18432EC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t MMSMMFlagsHeader::MMSMMFlagsHeader(uint64_t a1, uint64_t a2, char a3, char *a4)
{
  uint64_t v7;
  _QWORD *v8;
  char *v9;

  v7 = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(_QWORD *)v7 = &off_1E152C9D8;
  *(_BYTE *)(v7 + 17) = a3;
  *(_DWORD *)(v7 + 20) = 0;
  v8 = (_QWORD *)(v7 + 24);
  if (a4)
    v9 = a4;
  else
    v9 = "";
  std::string::basic_string[abi:nn180100]<0>(v8, v9);
  return a1;
}

void MMSMMFlagsHeader::~MMSMMFlagsHeader(void **this)
{
  *this = &off_1E152C9D8;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  MMSBinaryHeader::~MMSBinaryHeader((MMSBinaryHeader *)this);
}

{
  MMSMMFlagsHeader::~MMSMMFlagsHeader(this);
  JUMPOUT(0x186DBA454);
}

BOOL MMSMMFlagsHeader::parseValue(std::string *this, char *__s)
{
  char *v4;
  char v5;

  v4 = strchr(__s, 32);
  if (v4)
  {
    if (!strncmp(__s, "add", 3uLL))
    {
      v5 = 0x80;
    }
    else if (!strncmp(__s, "remove", 6uLL))
    {
      v5 = -127;
    }
    else
    {
      if (strncmp(__s, "filter", 6uLL))
      {
LABEL_9:
        std::string::__assign_external(this + 1, v4 + 1);
        return v4 != 0;
      }
      v5 = -126;
    }
    this->__r_.__value_.__s.__data_[17] = v5;
    goto LABEL_9;
  }
  return v4 != 0;
}

uint64_t MMSMMFlagsHeader::decodeValue(MMSMMFlagsHeader *this, MMSPduDecoder *a2)
{
  int v4;
  uint64_t result;
  unsigned int v6;

  v6 = 0;
  v4 = MMSPduDecoder::decodeWspValueLength(a2, &v6);
  result = 0;
  if (v4)
  {
    result = MMSPduDecoder::decodeByte(a2, (unsigned __int8 *)this + 17);
    if ((_DWORD)result)
      return MMSPduDecoder::decodeEncodedString(a2, (std::string *)this + 1, (unsigned int *)this + 5, 0);
  }
  return result;
}

uint64_t MMSMMFlagsHeader::encodeValue(MMSMMFlagsHeader *this, MMSPduEncoder *a2)
{
  unsigned int v4;
  void *__p[2];
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  MMSPduEncoder::MMSPduEncoder((uint64_t)__p, *(_DWORD *)a2);
  MMSPduEncoder::encodeByte((MMSPduEncoder *)__p, *((_BYTE *)this + 17));
  MMSPduEncoder::encodeEncodedString((MMSPduEncoder *)__p, (uint64_t)this + 24, (MMSCharsetHeader *)*((unsigned int *)this + 5));
  if (v7 >= 0)
    v4 = HIBYTE(v7);
  else
    v4 = v7;
  MMSPduEncoder::encodeWspValueLength(a2, v4);
  MMSPduEncoder::append(a2, (MMSPduEncoder *)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[1]);
  return 1;
}

uint64_t MMSMMFlagsHeader::createInstance(MMSMMFlagsHeader *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = MMSBinaryHeader::MMSBinaryHeader(v2, *((_QWORD *)this + 1));
  *(_QWORD *)v3 = &off_1E152C9D8;
  *(_BYTE *)(v3 + 17) = 0x80;
  *(_DWORD *)(v3 + 20) = 0;
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)(v3 + 24), "");
  return v2;
}

uint64_t MMSMMFlagsHeader::copy(MMSMMFlagsHeader *this)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;

  v2 = operator new();
  v3 = MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *(_QWORD *)v3 = &off_1E152C9D8;
  *(_DWORD *)(v3 + 17) = *(_DWORD *)((char *)this + 17);
  *(_DWORD *)(v3 + 20) = *((_DWORD *)this + 5);
  v4 = (std::string *)(v3 + 24);
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
  return v2;
}

uint64_t MMSMMFlagsHeader::valueAsString(uint64_t a1, std::string *this)
{
  int v2;
  std::string *v3;
  std::string *v4;
  std::string::value_type *v6;
  int v7;
  uint64_t v8;
  const std::string::value_type *v9;
  const std::string::value_type *v10;
  std::string::size_type v11;

  v2 = *(unsigned __int8 *)(a1 + 17);
  if (v2 == 130)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      this->__r_.__value_.__l.__size_ = 7;
      v4 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 7;
      v4 = this;
    }
    *(_DWORD *)((char *)v4->__r_.__value_.__r.__words + 3) = 544367988;
    v7 = 1953261926;
    goto LABEL_17;
  }
  if (v2 == 129)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      this->__r_.__value_.__l.__size_ = 7;
      v4 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 7;
      v4 = this;
    }
    *(_DWORD *)((char *)v4->__r_.__value_.__r.__words + 3) = 543520367;
    v7 = 1869440370;
LABEL_17:
    LODWORD(v4->__r_.__value_.__l.__data_) = v7;
    v6 = &v4->__r_.__value_.__s.__data_[7];
    goto LABEL_18;
  }
  if (v2 != 128)
    return 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    this->__r_.__value_.__l.__size_ = 4;
    v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 4;
    v3 = this;
  }
  LODWORD(v3->__r_.__value_.__l.__data_) = 543450209;
  v6 = &v3->__r_.__value_.__s.__data_[4];
LABEL_18:
  *v6 = 0;
  v10 = *(const std::string::value_type **)(a1 + 24);
  v8 = a1 + 24;
  v9 = v10;
  if (*(char *)(v8 + 23) < 0)
  {
    v11 = *(_QWORD *)(v8 + 8);
  }
  else
  {
    v9 = (const std::string::value_type *)v8;
    v11 = *(unsigned __int8 *)(v8 + 23);
  }
  std::string::append(this, v9, v11);
  return 1;
}

const char *MMSMMFlagsHeader::headerTypeName(MMSMMFlagsHeader *this)
{
  return "mmflags";
}

uint64_t _CTServerConnectionGetRegistrationCauseCode(uint64_t a1, int *a2)
{
  uint64_t v2;
  NSObject *v5;
  xpc_object_t v7;
  xpc_object_t object;
  const char *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v11);
    xpc_release(object);
    v12 = v11;
    v11 = xpc_null_create();
    xpc_release(v11);
    object = &v12;
    v9 = "kRegistrationCauseCode";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v10);
    xpc_release(v10);
    v10 = 0;
    v11 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v12, &v11);
    *a2 = -1;
    if (MEMORY[0x186DBAE5C](v11) == MEMORY[0x1E0C812F8])
    {
      object = &v11;
      v9 = "kRegistrationCauseCode";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, (const object *)0xFFFFFFFFLL);
      xpc_release(v7);
      v5 = CTLogRegistration();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        _CTServerConnectionGetRegistrationCauseCode_cold_1(a2, v5);
    }
    xpc_release(v11);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionSetRATSelection(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t v3;
  xpc_object_t v7;
  unsigned int v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  unsigned int v12;
  xpc_object_t v13;
  xpc_object_t v14;
  int v16;
  xpc_object_t v17;
  xpc_object_t object;

  v3 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationSetProperty", &object, "kRequest", &v17);
    xpc_release(object);
    v7 = v17;
    object = v17;
    v17 = xpc_null_create();
    xpc_release(v17);
    v8 = toRatSelection(a2);
    v9 = xpc_int64_create(v8);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kRegistrationRAT", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    if (CFEqual(a2, CFSTR("kCTRegistrationRATSelectionUMTS"))
      || CFEqual(a2, CFSTR("kCTRegistrationRATSelectionGSM"))
      || CFEqual(a2, CFSTR("kCTRegistrationRATSelectionDual"))
      && (!a3
       || (v16 = CFEqual(a3, CFSTR("kCTRegistrationRATSelectionGSM")), a3 = CFSTR("kCTRegistrationRATSelectionGSM"),
                                                                       !v16)))
    {
      a3 = CFSTR("kCTRegistrationRATSelectionUMTS");
    }
    if (a3)
    {
      v12 = toRatSelection(a3);
      v13 = xpc_int64_create(v12);
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(v7, "kRegistrationPreferredRAT", v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
    }
    v3 = SendXpcMessage(a1, &object, 0, v11);
    xpc_release(object);
  }
  return v3;
}

uint64_t _CTServerConnectionGetRATSelection(uint64_t a1, const __CFString **a2, const __CFString **a3)
{
  uint64_t v3;
  unsigned __int8 v7;
  unsigned __int8 v8;
  xpc_object_t v10;
  xpc_object_t object;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v14);
    xpc_release(object);
    v15 = v14;
    v14 = xpc_null_create();
    xpc_release(v14);
    object = &v15;
    v12 = "kRegistrationRATSelection";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v13);
    xpc_release(v13);
    v13 = 0;
    v14 = xpc_null_create();
    v3 = SendXpcMessage(a1, &v15, &v14);
    *a2 = CFSTR("kCTRegistrationRATSelectionUnknown");
    *a3 = CFSTR("kCTRegistrationRATSelectionUnknown");
    if (MEMORY[0x186DBAE5C](v14) == MEMORY[0x1E0C812F8])
    {
      object = &v14;
      v12 = "kRegistrationRATSelection";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      v7 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
      object = &v14;
      v12 = "kRegistrationPreferredRAT";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      v8 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
      convertRatAndPreferred(v7, v8, a2, a3);
    }
    xpc_release(v14);
    xpc_release(v15);
  }
  return v3;
}

uint64_t _CTServerConnectionIsInHomeCountry(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v8 = "kRegistrationIsInHomeCountry";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object = &v10;
      v8 = "kRegistrationIsInHomeCountry";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetSignalStrength(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  xpc_object_t v10;
  xpc_object_t object;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;

  v4 = 0x1600000001;
  if (a1 && a2 && a3 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v14);
    xpc_release(object);
    v15 = v14;
    v14 = xpc_null_create();
    xpc_release(v14);
    object = &v15;
    v12 = "kRegistrationSignalStrength";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v13);
    xpc_release(v13);
    v13 = 0;
    v14 = xpc_null_create();
    v4 = SendXpcMessage(a1, &v15, &v14);
    *a2 = 0;
    *a3 = 100;
    *a4 = 0;
    if (MEMORY[0x186DBAE5C](v14) == MEMORY[0x1E0C812F8])
    {
      object = &v14;
      v12 = "kRegistrationSignalStrength";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
    }
    xpc_release(v14);
    xpc_release(v15);
  }
  return v4;
}

uint64_t _CTServerConnectionGetSignalStrengthDisplayValue(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  xpc_object_t object;
  const char *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetSignalStrengthDisplayValue", &object, "kRequest", &v11);
    xpc_release(object);
    v12 = v11;
    v11 = xpc_null_create();
    xpc_release(v11);
    v11 = xpc_null_create();
    v3 = SendXpcMessage(a1, &v12, &v11);
    *a2 = 0;
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](v11) == MEMORY[0x1E0C812F8])
    {
      object = &v11;
      v9 = "kRegistrationSignalStrengthDisplayValue";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
      object = &v11;
      v9 = "kRegistrationSignalStrengthMaxDisplayValue";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
    }
    xpc_release(v11);
    xpc_release(v12);
  }
  return v3;
}

uint64_t _CTServerConnectionIsDataAttached(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v8 = "kRegistrationIsDataAttached";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object = &v10;
      v8 = "kRegistrationIsDataAttached";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyLocalizedOperatorName(uint64_t a1, _QWORD *a2)
{
  return _CTServerConnectionCopyCurrentOperatorName(a1, a2, (const void *)*MEMORY[0x1E0C9AE50]);
}

uint64_t _CTServerConnectionCopyAbbreviatedOperatorName(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v6;
  xpc_object_t object[2];
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    v10 = v9;
    v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kRegistrationAbbrevOperatorName";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    v8 = 0;
    object[0] = xpc_null_create();
    v2 = SendXpcMessage(a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](object[0]) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(object[0], "kRegistrationAbbrevOperatorName"))
    {
      v9 = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationAbbrevOperatorName");
      v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyProviderNameUsingCarrierBundle(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t xdict;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationProviderName", &object, "kRequest", &xdict);
    xpc_release(object);
    v5 = xdict;
    object = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v6 = xpc_BOOL_create(1);
    if (!v6)
      v6 = xpc_null_create();
    xpc_dictionary_set_value(v5, "kRegistrationUseCarrierBundle", v6);
    v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kRegistrationProviderName"))
    {
      v10 = 0;
      xpc_dictionary_get_value(xdict, "kRegistrationProviderName");
      v9 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v10, (CFTypeRef *)&v9);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionFetchNetworkList(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t v6;
  uint8_t buf[8];

  if (!a1)
    return 0x1600000001;
  v2 = CTLogRegistration();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18425C000, v2, OS_LOG_TYPE_DEFAULT, "Fetching network list", buf, 2u);
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)buf);
  xpc::dict_creator::operator()<char const*>("kRegistrationFetchNetworkList", (xpc_object_t *)buf, "kRequest", &v6);
  xpc_release(*(xpc_object_t *)buf);
  *(_QWORD *)buf = v6;
  v6 = xpc_null_create();
  xpc_release(v6);
  v4 = SendXpcMessage(a1, (xpc_object_t *)buf, 0, v3);
  xpc_release(*(xpc_object_t *)buf);
  return v4;
}

uint64_t _CTServerConnectionCopyNetworkList(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  xpc_object_t *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  const __CFString *v19;
  unsigned int v20;
  void **v21;
  void **v22;
  void **v23;
  int v24;
  NSObject *v25;
  const __CFString *v26;
  size_t count;
  void **v28;
  void **v29;
  void **v30;
  void *v32[2];
  uint64_t v33;
  xpc_object_t v34[2];
  xpc_object_t v35;
  void *__p[2];
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  xpc_object_t v40;
  xpc_object_t xarray;
  xpc_object_t xdict;
  xpc_object_t object;
  xpc_object_t v44;
  _BYTE buf[28];
  __int16 v46;
  void **v47;
  __int16 v48;
  void **v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    v5 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)buf);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", v5, "kRequest", v38);
    xpc_release(*(xpc_object_t *)buf);
    v44 = v38[0];
    v38[0] = xpc_null_create();
    xpc_release(v38[0]);
    *(_QWORD *)buf = &v44;
    *(_QWORD *)&buf[8] = "kRegistrationNetworkList";
    xpc::dict::object_proxy::operator=((uint64_t)buf, &object);
    xpc_release(object);
    object = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v44, &xdict);
    *a2 = 0;
    v6 = MEMORY[0x186DBAE5C](xdict);
    v7 = MEMORY[0x1E0C812F8];
    if (v6 == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kRegistrationNetworkList"))
    {
      xarray = 0;
      *(_QWORD *)buf = &xdict;
      *(_QWORD *)&buf[8] = "kRegistrationNetworkList";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &xarray);
      v16 = MEMORY[0x186DBAE5C](xarray);
      v17 = MEMORY[0x1E0C812C8];
      if (v16 == MEMORY[0x1E0C812C8])
      {
        v18 = 0;
        v19 = CFSTR("kCTRegistrationNetworkCode");
        v20 = 1;
        do
        {
          if (xpc_array_get_count(xarray) <= v18)
            break;
          v40 = 0;
          *(_QWORD *)buf = &xarray;
          *(_QWORD *)&buf[8] = v18;
          xpc::array::object_proxy::operator xpc::dict((uint64_t)buf, &v40);
          if (MEMORY[0x186DBAE5C](v40) == v7)
          {
            v38[0] = 0;
            v38[1] = 0;
            v39 = 0;
            memset(buf, 0, 24);
            ctu::cf::assign();
            *(_OWORD *)__p = *(_OWORD *)buf;
            v37 = *(_QWORD *)&buf[16];
            v21 = *(void ***)buf;
            if (buf[23] >= 0)
              v21 = __p;
            v32[0] = &v40;
            v32[1] = v21;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v32, v34);
            memset(buf, 0, 24);
            xpc::dyn_cast_or_default();
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            xpc_release(v34[0]);
            v34[0] = 0;
            if (SHIBYTE(v37) < 0)
              operator delete(__p[0]);
            __p[0] = 0;
            __p[1] = 0;
            v37 = 0;
            memset(buf, 0, 24);
            ctu::cf::assign();
            *(_OWORD *)v32 = *(_OWORD *)buf;
            v33 = *(_QWORD *)&buf[16];
            v34[0] = &v40;
            v22 = *(void ***)buf;
            if (buf[23] >= 0)
              v22 = v32;
            v34[1] = v22;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v34, &v35);
            memset(buf, 0, 24);
            xpc::dyn_cast_or_default();
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            xpc_release(v35);
            v35 = 0;
            if (SHIBYTE(v33) < 0)
              operator delete(v32[0]);
            memset(buf, 0, 24);
            ctu::cf::assign();
            *(_OWORD *)v32 = *(_OWORD *)buf;
            v33 = *(_QWORD *)&buf[16];
            v23 = *(void ***)buf;
            if (buf[23] >= 0)
              v23 = v32;
            *(_QWORD *)buf = &v40;
            *(_QWORD *)&buf[8] = v23;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, v34);
            v24 = xpc::dyn_cast_or_default((xpc *)v34, 0);
            xpc_release(v34[0]);
            v34[0] = 0;
            if (SHIBYTE(v33) < 0)
              operator delete(v32[0]);
            RadioAccessTechnologyToRadioAccessTechnologyString(v24);
            v25 = CTLogRegistration();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              v26 = v19;
              if (MEMORY[0x186DBAE5C](xarray) == v17)
                count = xpc_array_get_count(xarray);
              else
                count = 0;
              if (v39 >= 0)
                v28 = v38;
              else
                v28 = (void **)v38[0];
              if (v37 >= 0)
                v29 = __p;
              else
                v29 = (void **)__p[0];
              memset(buf, 0, 24);
              ctu::cf::assign();
              *(_OWORD *)v32 = *(_OWORD *)buf;
              v33 = *(_QWORD *)&buf[16];
              v30 = *(void ***)buf;
              if (buf[23] >= 0)
                v30 = v32;
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = v20 - 1;
              *(_WORD *)&buf[8] = 2048;
              *(_QWORD *)&buf[10] = count;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v28;
              v46 = 2080;
              v47 = v29;
              v48 = 2080;
              v49 = v30;
              _os_log_impl(&dword_18425C000, v25, OS_LOG_TYPE_DEFAULT, "Network list %d of %zu: %s (%s) (%s)", buf, 0x30u);
              if (SHIBYTE(v33) < 0)
                operator delete(v32[0]);
              v17 = MEMORY[0x1E0C812C8];
              v19 = v26;
              v7 = MEMORY[0x1E0C812F8];
            }
            if (SHIBYTE(v37) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v39) < 0)
              operator delete(v38[0]);
          }
          xpc_release(v40);
          v18 = v20++;
        }
        while (MEMORY[0x186DBAE5C](xarray) == v17);
      }
      *(_QWORD *)buf = 0;
      v38[0] = (void *)_CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(buf, (CFTypeRef *)v38);
      *a2 = *(_QWORD *)buf;
      xpc_release(xarray);
    }
    else
    {
      v8 = CTLogRegistration();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        _CTServerConnectionCopyNetworkList_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    xpc_release(xdict);
    xpc_release(v44);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyManualNetworkSelection(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v6;
  xpc_object_t object[2];
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    v10 = v9;
    v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kRegistrationCurrentNetworkSelection";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    v8 = 0;
    object[0] = xpc_null_create();
    v2 = SendXpcMessage(a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](object[0]) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(object[0], "kRegistrationCurrentNetworkSelection"))
    {
      v9 = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationCurrentNetworkSelection");
      v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionSelectNetwork(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  uint64_t v22;
  uint8_t buf[16];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1)
  {
    if (theDict)
    {
      CFDictionaryGetValue(theDict, CFSTR("kCTRegistrationNetworkCode"));
      memset(buf, 0, sizeof(buf));
      v24 = 0;
      ctu::cf::assign();
      v22 = 0;
      *(_OWORD *)__p = 0u;
      v3 = CTLogRegistration();
      v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        _CTServerConnectionSelectNetwork_cold_2(v4, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      v5 = CTLogRegistration();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        _CTServerConnectionSelectNetwork_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
      return 0;
    }
  }
  return v2;
}

uint64_t _CTServerConnectionAutomaticallySelectNetwork(uint64_t a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  xpc_object_t v8;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetProperty", &object, "kRequest", &v8);
  xpc_release(object);
  v2 = v8;
  object = v8;
  v8 = xpc_null_create();
  xpc_release(v8);
  v3 = xpc_BOOL_create(1);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(v2, "kRegistrationAutomaticNetworkSelection", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
  v6 = SendXpcMessage(a1, &object, 0, v5);
  xpc_release(object);
  return v6;
}

uint64_t _CTServerConnectionGetNetworkSelectionMode(uint64_t a1, __CFString **a2)
{
  uint64_t v2;
  int v5;
  NSObject *v6;
  xpc_object_t v8;
  xpc_object_t object;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t xdict;
  xpc_object_t v13;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v13 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v13;
    v10 = "kRegistrationNetworkSelectionMode";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v11);
    xpc_release(v11);
    v11 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v13, &xdict);
    *a2 = CFSTR("kCTRegistrationNetworkSelectionModeAutomatic");
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      if (xpc_dictionary_get_value(xdict, "kRegistrationNetworkSelectionMode"))
      {
        object = &xdict;
        v10 = "kRegistrationNetworkSelectionMode";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
        v5 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
        xpc_release(v8);
        *a2 = networkSelectionModeToNetworkSelectionModeString(v5);
        v6 = CTLogRegistration();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          _CTServerConnectionGetNetworkSelectionMode_cold_1();
      }
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v2;
}

uint64_t _CTServerConnectionGetNetworkSelectionState(uint64_t a1, __CFString **a2)
{
  uint64_t v2;
  int v5;
  NSObject *v6;
  xpc_object_t v8;
  xpc_object_t object;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t xdict;
  xpc_object_t v13;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v13 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v13;
    v10 = "kRegistrationNetworkSelectionState";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v11);
    xpc_release(v11);
    v11 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v13, &xdict);
    *a2 = CFSTR("kCTRegistrationNetworkSelectionStateUnknown");
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      if (xpc_dictionary_get_value(xdict, "kRegistrationNetworkSelectionState"))
      {
        object = &xdict;
        v10 = "kRegistrationNetworkSelectionState";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
        v5 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
        xpc_release(v8);
        *a2 = networkSelectionStateToNetworkSelectionStateString(v5);
        v6 = CTLogRegistration();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          _CTServerConnectionGetNetworkSelectionState_cold_1();
      }
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyServingPLMN(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v6;
  xpc_object_t object[2];
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    v10 = v9;
    v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kRegistrationServingPLMN";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    v8 = 0;
    object[0] = xpc_null_create();
    v2 = SendXpcMessage(a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](object[0]) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(object[0], "kRegistrationServingPLMN"))
    {
      v9 = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationServingPLMN");
      v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyLastKnownCountryCode(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  CFTypeRef v6;
  NSObject *v7;
  uint64_t v8;
  xpc_object_t object[2];
  xpc_object_t v10;
  CFTypeRef cf;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", (xpc_object_t *)&cf);
    xpc_release(object[0]);
    v12 = (xpc_object_t)cf;
    cf = xpc_null_create();
    xpc_release((xpc_object_t)cf);
    object[0] = &v12;
    object[1] = "kRegistrationLastMCC";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v10);
    xpc_release(v10);
    v10 = 0;
    object[0] = xpc_null_create();
    v2 = SendXpcMessage(a1, &v12, object);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](object[0]) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(object[0], "kRegistrationLastMCC"))
    {
      cf = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationLastMCC");
      v8 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&cf, (CFTypeRef *)&v8);
      v6 = cf;
      cf = 0;
      *a2 = v6;
      v7 = CTLogRegistration();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        _CTServerConnectionCopyLastKnownCountryCode_cold_1();
      if (cf)
        CFRelease(cf);
    }
    xpc_release(object[0]);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyMobileNetworkCode(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v6;
  xpc_object_t object[2];
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    v10 = v9;
    v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kRegistrationMNC";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    v8 = 0;
    object[0] = xpc_null_create();
    v2 = SendXpcMessage(a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](object[0]) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(object[0], "kRegistrationMNC"))
    {
      v9 = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationMNC");
      v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionGetLocationAreaCode(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t xdict;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v11 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v11;
    v8 = "kRegistrationLAC";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kRegistrationLAC"))
    {
      object = &xdict;
      v8 = "kRegistrationLAC";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetCellID(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t xdict;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v11 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v11;
    v8 = "kRegistrationCellId";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kRegistrationCellId"))
    {
      object = &xdict;
      v8 = "kRegistrationCellId";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionDisableRegistration(uint64_t a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  xpc_object_t v8;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetProperty", &object, "kRequest", &v8);
  xpc_release(object);
  v2 = v8;
  object = v8;
  v8 = xpc_null_create();
  xpc_release(v8);
  v3 = xpc_BOOL_create(1);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(v2, "kRegistrationBrickMode", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
  v6 = SendXpcMessage(a1, &object, 0, v5);
  xpc_release(object);
  return v6;
}

uint64_t _CTServerConnectionEnableRegistration(uint64_t a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  xpc_object_t v8;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetProperty", &object, "kRequest", &v8);
  xpc_release(object);
  v2 = v8;
  object = v8;
  v8 = xpc_null_create();
  xpc_release(v8);
  v3 = xpc_BOOL_create(0);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(v2, "kRegistrationBrickMode", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
  v6 = SendXpcMessage(a1, &object, 0, v5);
  xpc_release(object);
  return v6;
}

uint64_t _CTServerConnectionGetEmergencyCallBackMode(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t xdict;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v11 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v11;
    v8 = "kRegistrationEmergencyCallBackMode";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kRegistrationEmergencyCallBackMode"))
    {
      object = &xdict;
      v8 = "kRegistrationEmergencyCallBackMode";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetE911OverLTEModeStatus(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v7;
  xpc_object_t xdict;
  xpc_object_t v9;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetE911State", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v9 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v9, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kE911State"))
    {
      object[0] = &xdict;
      object[1] = "kE911State";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    xpc_release(xdict);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionGetE911OverWifiModeStatus(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v7;
  xpc_object_t xdict;
  xpc_object_t v9;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetWifiE911State", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v9 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v9, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kWifiE911State"))
    {
      object[0] = &xdict;
      object[1] = "kWifiE911State";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    xpc_release(xdict);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionGetActiveWirelessTechnology(uint64_t a1, __CFString **a2)
{
  uint64_t v2;
  int v5;
  xpc_object_t v7;
  xpc_object_t object;
  const char *v9;
  xpc_object_t v10;
  xpc_object_t xdict;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v12 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v12;
    v9 = "kRegistrationActiveWirelessTech";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v10);
    xpc_release(v10);
    v10 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v12, &xdict);
    *a2 = CFSTR("kCTWirelessTechnologyUnknown");
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kRegistrationActiveWirelessTech"))
    {
      object = &xdict;
      v9 = "kRegistrationActiveWirelessTech";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v7);
      v5 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
      *a2 = wirelessTechnologyToWirelessTechnologyString(v5);
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionSetEnableOnlyHomeNetwork(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetProperty", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_BOOL_create(a2 != 0);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kRegistrationOnlyHomeNetwork", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionGetEnableOnlyHomeNetwork(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t xdict;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v11 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v11;
    v8 = "kRegistrationOnlyHomeNetwork";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 1;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kRegistrationOnlyHomeNetwork"))
    {
      object = &xdict;
      v8 = "kRegistrationOnlyHomeNetwork";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, (const object *)1);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionIsCDMAInternationalRoamingSettingAllowed(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t xdict;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v11 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v11;
    v8 = "kRegistrationIsCDMAInternationalRoamingSettingAllowed";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kRegistrationIsCDMAInternationalRoamingSettingAllowed"))
    {
      object = &xdict;
      v8 = "kRegistrationIsCDMAInternationalRoamingSettingAllowed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetCDMAInternationalRoaming(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t xdict;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v11 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v11;
    v8 = "kRegistrationCDMAInternationalRoaming";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kRegistrationCDMAInternationalRoaming"))
    {
      object = &xdict;
      v8 = "kRegistrationCDMAInternationalRoaming";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionSetCDMAInternationalRoaming(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  uint64_t v9;
  xpc_object_t object[2];
  xpc_object_t v12;
  xpc_object_t xdict;
  xpc_object_t v14;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetPropertySync", object, "kRequest", &xdict);
  xpc_release(object[0]);
  v6 = xdict;
  v14 = xdict;
  xdict = xpc_null_create();
  xpc_release(xdict);
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kRegistrationCDMAInternationalRoaming", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xdict = xpc_null_create();
  v9 = SendXpcMessage(a1, &v14, &xdict);
  if (a3)
  {
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      if (xpc_dictionary_get_value(xdict, "kRegistrationCDMAInternationalRoaming"))
      {
        object[0] = &xdict;
        object[1] = "kRegistrationCDMAInternationalRoaming";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
        *a3 = xpc::dyn_cast_or_default((xpc *)&v12, 0);
        xpc_release(v12);
      }
    }
  }
  xpc_release(xdict);
  xpc_release(v14);
  return v9;
}

uint64_t _CTServerConnectionCopySupportedDataRates(uint64_t a1, __CFArray **a2)
{
  uint64_t v2;
  size_t count;
  __CFArray *Mutable;
  const char *i;
  int v8;
  __CFString *DataRateString;
  xpc_object_t v11;
  xpc_object_t xarray;
  xpc_object_t object;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t xdict;
  xpc_object_t v17;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v17 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v17;
    v14 = "kRegistrationSupportedDataRates";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v15);
    xpc_release(v15);
    v15 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v17, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kRegistrationSupportedDataRates"))
    {
      xarray = 0;
      object = &xdict;
      v14 = "kRegistrationSupportedDataRates";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &xarray);
      if (MEMORY[0x186DBAE5C](xarray) == MEMORY[0x1E0C812C8])
      {
        count = xpc_array_get_count(xarray);
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], count, MEMORY[0x1E0C9B378]);
        if (count)
        {
          for (i = 0; i != (const char *)count; ++i)
          {
            object = &xarray;
            v14 = i;
            xpc::array::object_proxy::operator xpc::object((uint64_t)&object, &v11);
            v8 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
            xpc_release(v11);
            DataRateString = getDataRateString(v8);
            CFArrayAppendValue(Mutable, DataRateString);
          }
        }
        *a2 = Mutable;
      }
      xpc_release(xarray);
    }
    xpc_release(xdict);
    xpc_release(v17);
  }
  return v2;
}

uint64_t _CTServerConnectionShouldDiscourageDisableLteDataRate(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t xdict;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v11 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v11;
    v8 = "kRegistrationDiscourageDisableLteDataRate";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kRegistrationDiscourageDisableLteDataRate"))
    {
      object = &xdict;
      v8 = "kRegistrationDiscourageDisableLteDataRate";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionShouldWarnDisabledLteMayImpactService(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v6;
  xpc_object_t object;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t xdict;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v11 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v11;
    v8 = "kRegistrationShouldWarnLteDisabled";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kRegistrationShouldWarnLteDisabled"))
    {
      object = &xdict;
      v8 = "kRegistrationShouldWarnLteDisabled";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v6);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v6, 0);
      xpc_release(v6);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionFetchTimeFromNetwork(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t v3;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  int v11;
  xpc_object_t v13;
  xpc_object_t xdict;
  xpc_object_t v15;
  xpc_object_t object;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = 0x1600000001;
  if (a1 && a2 - 1 <= 1 && a3)
  {
    *a3 = 2;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kFetchTimeFromNetwork", &object, "kRequest", &xdict);
    xpc_release(object);
    v7 = xdict;
    v15 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v8 = xpc_int64_create(a2);
    if (!v8)
      v8 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kNetworkTimeFetchRequestType", v8);
    v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v15, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kNetworkTimeFetchResult"))
    {
      object = &xdict;
      v17 = "kNetworkTimeFetchResult";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v13);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v13, (const object *)2);
      xpc_release(v13);
    }
    v10 = CTLogRegistration();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *a3;
      LODWORD(object) = 67109376;
      HIDWORD(object) = a2;
      LOWORD(v17) = 1024;
      *(_DWORD *)((char *)&v17 + 2) = v11;
      _os_log_impl(&dword_18425C000, v10, OS_LOG_TYPE_DEFAULT, "Fetching time from network (%d) result was: %d", (uint8_t *)&object, 0xEu);
    }
    xpc_release(xdict);
    xpc_release(v15);
  }
  return v3;
}

uint64_t _CTServerConnectionSetTimeCacheValidityPeriod(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSetTimeCacheValidityPeriod", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kValidityPeriod", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionSetCapability(uint64_t a1, const void *a2, int a3)
{
  return _CTServerConnectionSetCapabilityExtended(a1, a2, a3, 0);
}

uint64_t _CTServerConnectionSetCapabilityExtended(uint64_t a1, CFTypeRef cf1, int a3, uint64_t a4)
{
  uint64_t v4;
  xpc_object_t v9;
  void *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  void *v14;
  xpc_object_t v15;
  xpc_object_t v17;
  xpc_object_t object;

  v4 = 0x1600000001;
  if (a1
    && cf1
    && (CFEqual(cf1, CFSTR("kCTCapabilityVoLTE"))
     || CFEqual(cf1, CFSTR("kCTCapabilityWiFiCalling"))
     || CFEqual(cf1, CFSTR("kCTCapabilityPhoneServices"))))
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationSetPropertySync", &object, "kRequest", &v17);
    xpc_release(object);
    v9 = v17;
    object = v17;
    v17 = xpc_null_create();
    xpc_release(v17);
    v10 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kTelephonyCapability", v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    v12 = xpc_BOOL_create(a3 != 0);
    if (!v12)
      v12 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kTelephonyCapabilityStatus", v12);
    v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    if (a4)
    {
      v14 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v14)
        v14 = xpc_null_create();
      xpc_dictionary_set_value(v9, "kTelephonyCapabilityInformation", v14);
      v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
    }
    v17 = xpc_null_create();
    v4 = SendXpcMessage(a1, &object, &v17);
    xpc_release(v17);
    xpc_release(object);
  }
  return v4;
}

unint64_t _CTServerConnectionGetCapabilityStatus(uint64_t a1, const void *a2, _BYTE *a3)
{
  unint64_t CapabilityStatusExtended;
  CFTypeRef cf;

  cf = 0;
  CapabilityStatusExtended = _CTServerConnectionGetCapabilityStatusExtended(a1, a2, a3, (xpc_object_t *)&cf);
  if (cf)
    CFRelease(cf);
  return CapabilityStatusExtended;
}

unint64_t _CTServerConnectionCanSetCapability(uint64_t a1, const void *a2, _BYTE *a3)
{
  unint64_t CanSetCapabilityExtended;
  CFTypeRef cf;

  cf = 0;
  CanSetCapabilityExtended = _CTServerConnectionCanSetCapabilityExtended(a1, a2, a3, (xpc_object_t *)&cf);
  if (cf)
    CFRelease(cf);
  return CanSetCapabilityExtended;
}

unint64_t _CTServerConnectionCanSetCapabilityExtended(uint64_t a1, CFTypeRef cf1, _BYTE *a3, xpc_object_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  xpc_object_t v10;
  void *v11;
  xpc_object_t v12;
  xpc_object_t value;
  const object *v15;
  xpc_object_t v16;
  CFTypeRef cf;
  xpc_object_t v18;
  xpc_object_t object;
  const char *v20;
  xpc_object_t v21;
  xpc_object_t xdict;
  xpc_object_t v23;

  v4 = 0x1600000000;
  LODWORD(v5) = 1;
  if (cf1 && a1 && a3)
  {
    if (!CFEqual(cf1, CFSTR("kCTCapabilityVoLTE"))
      && !CFEqual(cf1, CFSTR("kCTCapabilityWiFiCalling"))
      && !CFEqual(cf1, CFSTR("kCTCapabilityPhoneServices")))
    {
      LODWORD(v5) = 1;
      return v4 & 0xFFFFFFFF00000000 | v5;
    }
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v10 = xdict;
    v23 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v10, "kTelephonyCapability", v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    object = &v23;
    v20 = "kTelephonyCapabilityCanSet";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v21);
    xpc_release(v21);
    v21 = 0;
    xdict = xpc_null_create();
    v5 = SendXpcMessageWithCaching(a1, &v23, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      *a3 = 0;
      if (!xpc_dictionary_get_value(xdict, "kTelephonyCapabilityCanSet"))
      {
        v4 = 0x2300000000;
        LODWORD(v5) = 1;
        goto LABEL_11;
      }
      object = &xdict;
      v20 = "kTelephonyCapabilityCanSet";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v18);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v18, 0);
      xpc_release(v18);
      value = xpc_dictionary_get_value(xdict, "kTelephonyCapabilityInformation");
      if (a4 && value)
      {
        v18 = 0;
        object = &xdict;
        v20 = "kTelephonyCapabilityInformation";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v16);
        xpc::bridge((xpc *)&v16, v15);
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v18, &cf);
        if (cf)
          CFRelease(cf);
        xpc_release(v16);
        *a4 = v18;
      }
    }
    v4 = v5 & 0xFFFFFFFF00000000;
LABEL_11:
    xpc_release(xdict);
    xpc_release(v23);
  }
  return v4 & 0xFFFFFFFF00000000 | v5;
}

uint64_t _CTServerConnectionPhoneServicesAccountStatusChanged(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4;
  uint64_t v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationUpdateRegisteredLocationStatus", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  if (a2)
  {
    v6 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v6)
      v6 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kTelephonyCapabilityInformation", v6);
    v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
  }
  v8 = SendXpcMessage(a1, &object, 0, v5);
  xpc_release(object);
  return v8;
}

unint64_t _CTServerConnectionRegistrationNotificationAssertionCreate(const void *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unsigned int v4;
  CFAllocatorRef v8;
  _QWORD *v9;
  const void *v10;
  xpc_object_t v11;
  void *v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t xdict;
  xpc_object_t object;

  v3 = 0x1600000000;
  v4 = 1;
  if (a1 && a3)
  {
    *a3 = 0;
    v8 = CFGetAllocator(a1);
    if (v9)
    {
      v10 = v9;
      xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
      xpc::dict_creator::operator()<char const*>("kRegistrationAddNotificationAssertion", &object, "kRequest", &xdict);
      xpc_release(object);
      v11 = xdict;
      object = xdict;
      xdict = xpc_null_create();
      xpc_release(xdict);
      if (a2)
      {
        v12 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        if (!v12)
          v12 = xpc_null_create();
        xpc_dictionary_set_value(v11, "kRegistrationAssertionName", v12);
        v13 = xpc_null_create();
        xpc_release(v12);
        xpc_release(v13);
      }
      xdict = xpc_null_create();
      v14 = SendXpcMessage((uint64_t)a1, &object, &xdict);
      v4 = v14;
      v3 = v14 & 0xFFFFFFFF00000000;
      if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
        && xpc_dictionary_get_value(xdict, "kRegistrationAddNotificationAssertion"))
      {
        *a3 = v10;
      }
      else
      {
        CFRelease(v10);
        v4 = 2;
      }
      xpc_release(xdict);
      xpc_release(object);
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
  }
  return v4 | v3;
}

uint64_t _CTServerConnectionEnableEmergencyCallBackMode(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetProperty", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_BOOL_create(a2 != 0);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kRegistrationEmergencyCallBackMode", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionAddVictimFreq(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint64_t v18;
  xpc_object_t object[2];
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetPropertySync", object, "kRequest", &v22);
  xpc_release(object[0]);
  xdict = v22;
  v22 = xpc_null_create();
  xpc_release(v22);
  object[0] = &xdict;
  object[1] = "kRegistrationAdd";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v21);
  xpc_release(v21);
  v21 = 0;
  v10 = xpc_int64_create(a2);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kRegistrationDesenseClient", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_uint64_create(a3);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kRegistrationVictimFreq", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_int64_create(a4);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kRegistrationBandwidth", v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(a5);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kRegistrationPriority", v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  object[0] = xpc_null_create();
  v18 = SendXpcMessage(a1, &xdict, object);
  xpc_release(object[0]);
  xpc_release(xdict);
  return v18;
}

uint64_t _CTServerConnectionRemoveVictimFreq(uint64_t a1, unsigned int a2, uint64_t a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t object[2];
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetPropertySync", object, "kRequest", &v14);
  xpc_release(object[0]);
  xdict = v14;
  v14 = xpc_null_create();
  xpc_release(v14);
  object[0] = &xdict;
  object[1] = "kRegistrationRemove";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v13);
  xpc_release(v13);
  v13 = 0;
  v6 = xpc_int64_create(a2);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kRegistrationDesenseClient", v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_uint64_create(a3);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kRegistrationVictimFreq", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  object[0] = xpc_null_create();
  v10 = SendXpcMessage(a1, &xdict, object);
  xpc_release(object[0]);
  xpc_release(xdict);
  return v10;
}

uint64_t _CTServerConnectionClearVictimFreq(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v8;
  xpc_object_t object;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetPropertySync", &object, "kRequest", &v12);
  xpc_release(object);
  xdict = v12;
  v12 = xpc_null_create();
  xpc_release(v12);
  object = &xdict;
  v10 = "kRegistrationClear";
  xpc::dict::object_proxy::operator=((uint64_t)&object, &v11);
  xpc_release(v11);
  v11 = 0;
  v4 = xpc_int64_create(a2);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kRegistrationDesenseClient", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  object = &xdict;
  v10 = "kRegistrationVictimFreq";
  xpc::dict::object_proxy::operator=((uint64_t)&object, &v8);
  xpc_release(v8);
  v8 = 0;
  object = xpc_null_create();
  v6 = SendXpcMessage(a1, &xdict, &object);
  xpc_release(object);
  xpc_release(xdict);
  return v6;
}

uint64_t _CTServerConnectionBlockBBFreqReport(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v9;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRegistrationSetPropertySync", &object, "kRequest", &v9);
  xpc_release(object);
  v4 = v9;
  object = v9;
  v9 = xpc_null_create();
  xpc_release(v9);
  v5 = xpc_BOOL_create(a2 != 0);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kRegistrationBlockBBFreqReport", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v9 = xpc_null_create();
  v7 = SendXpcMessage(a1, &object, &v9);
  xpc_release(v9);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionCopyListVictimFreq(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v6;
  xpc_object_t object[2];
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", object, "kRequest", &v9);
    xpc_release(object[0]);
    v10 = v9;
    v9 = xpc_null_create();
    xpc_release(v9);
    object[0] = &v10;
    object[1] = "kRegistrationVictimFreq";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
    xpc_release(v8);
    v8 = 0;
    object[0] = xpc_null_create();
    v2 = SendXpcMessage(a1, &v10, object);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](object[0]) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(object[0], "kRegistrationVictimFreq"))
    {
      v9 = 0;
      xpc_dictionary_get_value(object[0], "kRegistrationVictimFreq");
      v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v6);
      *a2 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v10);
  }
  return v2;
}

uint64_t _CTServerConnectionGetUplinkFreq(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v3;
  xpc_object_t v8;
  xpc_object_t object;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t xdict;
  xpc_object_t v13;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v13 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v13;
    v10 = "kRegistrationUplinkFreq";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v11);
    xpc_release(v11);
    v11 = 0;
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v13, &xdict);
    *a2 = 0;
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kRegistrationUplinkFreq")
      && xpc_dictionary_get_value(xdict, "kRegistrationBandwidth"))
    {
      object = &xdict;
      v10 = "kRegistrationUplinkFreq";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      xpc_release(v8);
      object = &xdict;
      v10 = "kRegistrationBandwidth";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      xpc_release(v8);
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v3;
}

uint64_t _CTServerConnectionCopyRegistrationInfo(const void *a1, __CFDictionary **a2)
{
  uint64_t v2;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  uint64_t (*v8)(uint64_t);
  int v9;
  __CFString *v10;
  NSObject *v11;
  int v12;
  __CFString *v13;
  NSObject *v14;
  xpc_object_t value;
  const void **v16;
  const void **v17;
  int v18;
  const void **v19;
  const void *v20;
  NSObject *v21;
  int v22;
  const void **v23;
  const void *v24;
  NSObject *v25;
  int v26;
  const void **v27;
  const void *v28;
  NSObject *v29;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t xdict;
  xpc_object_t v40;
  __int128 object;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    v40 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationCopyInfo", (xpc_object_t *)&object, "kRequest", &xdict);
    xpc_release((xpc_object_t)object);
    v40 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    *(_QWORD *)&object = &v40;
    *((_QWORD *)&object + 1) = "kRegistrationStatus";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v38);
    xpc_release(v38);
    v38 = 0;
    *(_QWORD *)&object = &v40;
    *((_QWORD *)&object + 1) = "kRegistrationDisplayStatus";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v37);
    xpc_release(v37);
    v37 = 0;
    *(_QWORD *)&object = &v40;
    *((_QWORD *)&object + 1) = "kRegistrationIsInHomeCountry";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v36);
    xpc_release(v36);
    v36 = 0;
    *(_QWORD *)&object = &v40;
    *((_QWORD *)&object + 1) = "kRegistrationIsForcedRegisteredHome";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v35);
    xpc_release(v35);
    v35 = 0;
    *(_QWORD *)&object = &v40;
    *((_QWORD *)&object + 1) = "kRegistrationCampOnly";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v34);
    xpc_release(v34);
    v34 = 0;
    *(_QWORD *)&object = &v40;
    *((_QWORD *)&object + 1) = "kRegistrationAgentStatus";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v33);
    xpc_release(v33);
    v33 = 0;
    *(_QWORD *)&object = &v40;
    *((_QWORD *)&object + 1) = "kRegistrationIMSContext";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v32);
    xpc_release(v32);
    v32 = 0;
    xdict = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage((uint64_t)a1, &v40, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      v5 = CFGetAllocator(a1);
      Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v7 = Mutable;
      v8 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
      if (!Mutable)
        v8 = 0;
      if (v8)
      {
        if (xpc_dictionary_get_value(xdict, "kRegistrationStatus"))
        {
          *(_QWORD *)&object = &xdict;
          *((_QWORD *)&object + 1) = "kRegistrationStatus";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v31);
          v9 = xpc::dyn_cast_or_default((xpc *)&v31, 0);
          xpc_release(v31);
          v10 = registrationStatusToRegistrationStatusString(v9);
          v11 = CTLogRegistration();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(object) = 138412290;
            *(_QWORD *)((char *)&object + 4) = v10;
            _os_log_impl(&dword_18425C000, v11, OS_LOG_TYPE_DEFAULT, "Registration status: %@", (uint8_t *)&object, 0xCu);
          }
          CFDictionaryAddValue(v7, CFSTR("kCTRegistrationStatus"), v10);
        }
        if (xpc_dictionary_get_value(xdict, "kRegistrationDisplayStatus"))
        {
          *(_QWORD *)&object = &xdict;
          *((_QWORD *)&object + 1) = "kRegistrationDisplayStatus";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v31);
          v12 = xpc::dyn_cast_or_default((xpc *)&v31, 0);
          xpc_release(v31);
          v13 = registrationStatusToRegistrationStatusString(v12);
          v14 = CTLogRegistration();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(object) = 138412290;
            *(_QWORD *)((char *)&object + 4) = v13;
            _os_log_impl(&dword_18425C000, v14, OS_LOG_TYPE_DEFAULT, "Registration display status: %@", (uint8_t *)&object, 0xCu);
          }
          CFDictionaryAddValue(v7, CFSTR("kCTRegistrationDisplayStatus"), v13);
        }
        value = xpc_dictionary_get_value(xdict, "kRegistrationIsInHomeCountry");
        v16 = (const void **)MEMORY[0x1E0C9AE50];
        v17 = (const void **)MEMORY[0x1E0C9AE40];
        if (value)
        {
          *(_QWORD *)&object = &xdict;
          *((_QWORD *)&object + 1) = "kRegistrationIsInHomeCountry";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v31);
          v18 = xpc::dyn_cast_or_default((xpc *)&v31, 0);
          xpc_release(v31);
          if (v18)
            v19 = v16;
          else
            v19 = v17;
          v20 = *v19;
          v21 = CTLogRegistration();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(object) = 138412290;
            *(_QWORD *)((char *)&object + 4) = v20;
            _os_log_impl(&dword_18425C000, v21, OS_LOG_TYPE_DEFAULT, "In Home Country: %@", (uint8_t *)&object, 0xCu);
          }
          CFDictionaryAddValue(v7, CFSTR("kCTRegistrationInHomeCountry"), v20);
        }
        if (xpc_dictionary_get_value(xdict, "kRegistrationIsForcedRegisteredHome"))
        {
          *(_QWORD *)&object = &xdict;
          *((_QWORD *)&object + 1) = "kRegistrationIsForcedRegisteredHome";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v31);
          v22 = xpc::dyn_cast_or_default((xpc *)&v31, 0);
          xpc_release(v31);
          if (v22)
            v23 = v16;
          else
            v23 = v17;
          v24 = *v23;
          v25 = CTLogRegistration();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(object) = 138412290;
            *(_QWORD *)((char *)&object + 4) = v24;
            _os_log_impl(&dword_18425C000, v25, OS_LOG_TYPE_DEFAULT, "Forced registered home: %@", (uint8_t *)&object, 0xCu);
          }
          CFDictionaryAddValue(v7, CFSTR("kCTRegistrationIsForcedRegisteredHome"), v24);
        }
        if (xpc_dictionary_get_value(xdict, "kRegistrationCampOnly"))
        {
          *(_QWORD *)&object = &xdict;
          *((_QWORD *)&object + 1) = "kRegistrationCampOnly";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v31);
          v26 = xpc::dyn_cast_or_default((xpc *)&v31, 0);
          xpc_release(v31);
          if (v26)
            v27 = v16;
          else
            v27 = v17;
          v28 = *v27;
          v29 = CTLogRegistration();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(object) = 138412290;
            *(_QWORD *)((char *)&object + 4) = v28;
            _os_log_impl(&dword_18425C000, v29, OS_LOG_TYPE_DEFAULT, "Camp only: %@", (uint8_t *)&object, 0xCu);
          }
          CFDictionaryAddValue(v7, CFSTR("kCTCampOnly"), v28);
        }
        if (xpc_dictionary_get_value(xdict, "kRegistrationAgentStatus"))
        {
          *(_QWORD *)&object = 0;
          xpc_dictionary_get_value(xdict, "kRegistrationAgentStatus");
          v31 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
          ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v31);
          CFDictionaryAddValue(v7, CFSTR("kCTRegistrationIMSStatus"), (const void *)object);
          if ((_QWORD)object)
            CFRelease((CFTypeRef)object);
        }
        if (xpc_dictionary_get_value(xdict, "kRegistrationIMSContext"))
        {
          *(_QWORD *)&object = 0;
          xpc_dictionary_get_value(xdict, "kRegistrationIMSContext");
          v31 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
          ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v31);
          CFDictionaryAddValue(v7, CFSTR("kCTRegistrationIMSContext"), (const void *)object);
          if ((_QWORD)object)
            CFRelease((CFTypeRef)object);
        }
        if (xpc_dictionary_get_value(xdict, "kRegistrationIMSTransportType"))
        {
          *(_QWORD *)&object = 0;
          xpc_dictionary_get_value(xdict, "kRegistrationIMSTransportType");
          v31 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
          ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v31);
          CFDictionaryAddValue(v7, CFSTR("kCTRegistrationIMSTransportType"), (const void *)object);
          if ((_QWORD)object)
            CFRelease((CFTypeRef)object);
        }
        *a2 = v7;
      }
      else if (Mutable)
      {
        CFRelease(Mutable);
      }
    }
    xpc_release(xdict);
    xpc_release(v40);
  }
  return v2;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t _CTServerConnectionCopyBandInfo(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  const object *v5;
  xpc_object_t v7;
  CFTypeRef cf;
  uint64_t v9;
  xpc_object_t object;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t xdict;
  xpc_object_t v14;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationCopyBandInfo", &object, "kRequest", &xdict);
    xpc_release(object);
    v14 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v14;
    v11 = "kRegistrationBands";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v12);
    xpc_release(v12);
    v12 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v14, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kRegistrationBands"))
    {
      v9 = 0;
      object = &xdict;
      v11 = "kRegistrationBands";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v7);
      xpc::bridge((xpc *)&v7, v5);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v9, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v7);
      *a2 = v9;
    }
    xpc_release(xdict);
    xpc_release(v14);
  }
  return v2;
}

uint64_t _CTServerConnectionSetBandInfo(uint64_t a1, ctu *a2)
{
  uint64_t v2;
  xpc_object_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v12;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRegistrationSetBandInfo", &object, "kRequest", &v12);
    xpc_release(object);
    v5 = v12;
    object = v12;
    v12 = xpc_null_create();
    xpc_release(v12);
    ctu::cf_to_xpc(a2, v6);
    xpc_dictionary_set_value(v5, "kRegistrationBands", value);
    v7 = value;
    valuea = xpc_null_create();
    xpc_release(v7);
    xpc_release(valuea);
    v2 = SendXpcMessage(a1, &object, 0, v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionSetCivicInfoBasedOnCurrentLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  void *v9;
  xpc_object_t v10;
  void *v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v15;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSetCivicInfoBasedOnCurrentLocation", &object, "kRequest", &v15);
    xpc_release(object);
    v4 = v15;
    object = v15;
    v15 = xpc_null_create();
    xpc_release(v15);
    v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kCountryCodeBasedOnCurrentLocation", v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kStateBasedOnCurrentLocation", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kCityBasedOnCurrentLocation", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kPostalCodeBasedOnCurrentLocation", v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    v2 = SendXpcMessage(a1, &object, 0, v13);
    xpc_release(object);
  }
  return v2;
}

unint64_t _CTServerConnectionPhoneServicesGetDeviceList(uint64_t a1, ctu *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  xpc_object_t v8;
  const void *v9;
  xpc_object_t v10;
  const object *v11;
  xpc_object_t object[2];
  xpc_object_t v14;
  CFTypeRef cf;
  uint64_t v16;
  xpc_object_t value;
  xpc_object_t xdict;
  xpc_object_t v19;

  v3 = 0x1600000000;
  LODWORD(v4) = 1;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPhoneServicesGetDeviceList", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v8 = xdict;
    v19 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    ctu::cf_to_xpc(a2, v9);
    xpc_dictionary_set_value(v8, "kTelephonyCapability", value);
    v10 = value;
    value = xpc_null_create();
    xpc_release(v10);
    xpc_release(value);
    value = 0;
    xdict = xpc_null_create();
    v4 = SendXpcMessage(a1, &v19, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      if (!xpc_dictionary_get_value(xdict, "kPhoneServicesGetDeviceList"))
      {
        v3 = 0x2300000000;
        LODWORD(v4) = 1;
        goto LABEL_10;
      }
      v16 = 0;
      object[0] = &xdict;
      object[1] = "kPhoneServicesGetDeviceList";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v14);
      xpc::bridge((xpc *)&v14, v11);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v16, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v14);
      *a3 = v16;
    }
    v3 = v4 & 0xFFFFFFFF00000000;
LABEL_10:
    xpc_release(xdict);
    xpc_release(v19);
  }
  return v3 & 0xFFFFFFFF00000000 | v4;
}

unint64_t _CTServerConnectionPhoneServicesGetDeviceInfo(uint64_t a1, ctu *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  xpc_object_t v8;
  const void *v9;
  xpc_object_t v10;
  const object *v11;
  xpc_object_t object[2];
  xpc_object_t v14;
  CFTypeRef cf;
  uint64_t v16;
  xpc_object_t value;
  xpc_object_t xdict;
  xpc_object_t v19;

  v3 = 0x1600000000;
  LODWORD(v4) = 1;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPhoneServicesGetDeviceInfo", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v8 = xdict;
    v19 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    ctu::cf_to_xpc(a2, v9);
    xpc_dictionary_set_value(v8, "kTelephonyCapability", value);
    v10 = value;
    value = xpc_null_create();
    xpc_release(v10);
    xpc_release(value);
    value = 0;
    xdict = xpc_null_create();
    v4 = SendXpcMessage(a1, &v19, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      if (!xpc_dictionary_get_value(xdict, "kPhoneServicesGetDeviceInfo"))
      {
        v3 = 0x2300000000;
        LODWORD(v4) = 1;
        goto LABEL_10;
      }
      v16 = 0;
      object[0] = &xdict;
      object[1] = "kPhoneServicesGetDeviceInfo";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v14);
      xpc::bridge((xpc *)&v14, v11);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v16, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v14);
      *a3 = v16;
    }
    v3 = v4 & 0xFFFFFFFF00000000;
LABEL_10:
    xpc_release(xdict);
    xpc_release(v19);
  }
  return v3 & 0xFFFFFFFF00000000 | v4;
}

uint64_t _CTServerConnectionPhoneServicesAddDevice(uint64_t a1, ctu *a2, ctu *a3, ctu *a4)
{
  uint64_t v4;
  xpc_object_t v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  void *v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v24;
  xpc_object_t object;

  v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPhoneServicesAddDevice", &object, "kRequest", &v24);
    xpc_release(object);
    v9 = v24;
    object = v24;
    v24 = xpc_null_create();
    xpc_release(v24);
    ctu::cf_to_xpc(a2, v10);
    xpc_dictionary_set_value(v9, "kTelephonyCapability", value);
    v11 = value;
    valuea = xpc_null_create();
    xpc_release(v11);
    xpc_release(valuea);
    if (a3)
    {
      ctu::cf_to_xpc(a3, v12);
      xpc_dictionary_set_value(v9, "kPhoneServicesAccountId", v20);
      v13 = v20;
      v21 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v21);
    }
    ctu::cf_to_xpc(a4, v12);
    xpc_dictionary_set_value(v9, "kPhoneServicesDeviceId", v18);
    v14 = v18;
    v19 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v19);
    v15 = xpc_null_create();
    v4 = SendXpcMessage(a1, &object, 0, v16);
    xpc_release(v15);
    xpc_release(object);
  }
  return v4;
}

uint64_t _CTServerConnectionPhoneServicesRemoveDevice(uint64_t a1, ctu *a2, ctu *a3, ctu *a4)
{
  uint64_t v4;
  xpc_object_t v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  void *v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v24;
  xpc_object_t object;

  v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPhoneServicesRemoveDevice", &object, "kRequest", &v24);
    xpc_release(object);
    v9 = v24;
    object = v24;
    v24 = xpc_null_create();
    xpc_release(v24);
    ctu::cf_to_xpc(a2, v10);
    xpc_dictionary_set_value(v9, "kTelephonyCapability", value);
    v11 = value;
    valuea = xpc_null_create();
    xpc_release(v11);
    xpc_release(valuea);
    if (a3)
    {
      ctu::cf_to_xpc(a3, v12);
      xpc_dictionary_set_value(v9, "kPhoneServicesAccountId", v20);
      v13 = v20;
      v21 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v21);
    }
    ctu::cf_to_xpc(a4, v12);
    xpc_dictionary_set_value(v9, "kPhoneServicesDeviceId", v18);
    v14 = v18;
    v19 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v19);
    v15 = xpc_null_create();
    v4 = SendXpcMessage(a1, &object, 0, v16);
    xpc_release(v15);
    xpc_release(object);
  }
  return v4;
}

uint64_t _CTServerConnectionPhoneServicesEnableDevice(uint64_t a1, ctu *a2, ctu *a3, ctu *a4)
{
  uint64_t v4;
  xpc_object_t v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  void *v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v24;
  xpc_object_t object;

  v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPhoneServicesEnableDevice", &object, "kRequest", &v24);
    xpc_release(object);
    v9 = v24;
    object = v24;
    v24 = xpc_null_create();
    xpc_release(v24);
    ctu::cf_to_xpc(a2, v10);
    xpc_dictionary_set_value(v9, "kTelephonyCapability", value);
    v11 = value;
    valuea = xpc_null_create();
    xpc_release(v11);
    xpc_release(valuea);
    if (a3)
    {
      ctu::cf_to_xpc(a3, v12);
      xpc_dictionary_set_value(v9, "kPhoneServicesAccountId", v20);
      v13 = v20;
      v21 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v21);
    }
    ctu::cf_to_xpc(a4, v12);
    xpc_dictionary_set_value(v9, "kPhoneServicesDeviceId", v18);
    v14 = v18;
    v19 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v19);
    v15 = xpc_null_create();
    v4 = SendXpcMessage(a1, &object, 0, v16);
    xpc_release(v15);
    xpc_release(object);
  }
  return v4;
}

uint64_t _CTServerConnectionPhoneServicesDisableDevice(uint64_t a1, ctu *a2, ctu *a3, ctu *a4)
{
  uint64_t v4;
  xpc_object_t v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  void *v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v24;
  xpc_object_t object;

  v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPhoneServicesDisableDevice", &object, "kRequest", &v24);
    xpc_release(object);
    v9 = v24;
    object = v24;
    v24 = xpc_null_create();
    xpc_release(v24);
    ctu::cf_to_xpc(a2, v10);
    xpc_dictionary_set_value(v9, "kTelephonyCapability", value);
    v11 = value;
    valuea = xpc_null_create();
    xpc_release(v11);
    xpc_release(valuea);
    if (a3)
    {
      ctu::cf_to_xpc(a3, v12);
      xpc_dictionary_set_value(v9, "kPhoneServicesAccountId", v20);
      v13 = v20;
      v21 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v21);
    }
    ctu::cf_to_xpc(a4, v12);
    xpc_dictionary_set_value(v9, "kPhoneServicesDeviceId", v18);
    v14 = v18;
    v19 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v19);
    v15 = xpc_null_create();
    v4 = SendXpcMessage(a1, &object, 0, v16);
    xpc_release(v15);
    xpc_release(object);
  }
  return v4;
}

uint64_t _CTServerConnectionIsEncryptedIdentitySupported(uint64_t a1, ctu *a2, _BYTE *a3)
{
  uint64_t v3;
  xpc_object_t v7;
  const void *v8;
  xpc_object_t v9;
  xpc_object_t object[2];
  xpc_object_t v12;
  xpc_object_t value;
  xpc_object_t xdict;
  xpc_object_t v15;

  v3 = 0x1600000001;
  if (a2 && a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetIdentityProtectionSupport", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v7 = xdict;
    v15 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    ctu::cf_to_xpc(a2, v8);
    xpc_dictionary_set_value(v7, "kIdentityProtectionType", value);
    v9 = value;
    value = xpc_null_create();
    xpc_release(v9);
    xpc_release(value);
    value = 0;
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v15, &xdict);
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kIdentityProtectionSupport"))
    {
      object[0] = &xdict;
      object[1] = "kIdentityProtectionSupport";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v12, 0);
      xpc_release(v12);
    }
    xpc_release(xdict);
    xpc_release(v15);
  }
  return v3;
}

void OUTLINED_FUNCTION_3_2(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void NetworkNotification::NetworkNotification(NetworkNotification *this, CFStringRef theString)
{
  CFURLRef v3;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 1) = CFStringCreateMutableCopy(0, 0, theString);
  NetworkNotification::_parseNotificationString(this);
  if (!*((_DWORD *)this + 6))
  {
    v3 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *((CFStringRef *)this + 1), 0);
    *((_QWORD *)this + 2) = v3;
    if (v3)
      *((_DWORD *)this + 6) = 1;
  }
}

void NetworkNotification::_parseNotificationString(NetworkNotification *this)
{
  const __CFString *v2;
  CFIndex Length;
  CFIndex v4;
  CFRange v5;
  CFRange v6;
  NetworkNotification *v7;
  NetworkNotification *v8;
  int TypeForName;
  uint64_t v10;
  const void *v11;
  __CFDictionary *Mutable;
  CFIndex v13;
  CFRange v14;
  int v15;
  CFIndex v16;
  CFIndex location;
  CFIndex v18;
  CFIndex v19;
  CFIndex v20;
  const __CFString *v21;
  CFStringRef v22;
  __CFString *v23;
  BOOL v24;
  const void *v26;
  CFRange v27;
  CFRange result;
  CFRange v29;
  CFRange v30;
  CFRange v31;

  v2 = (const __CFString *)*((_QWORD *)this + 1);
  if (!v2)
    return;
  Length = CFStringGetLength(v2);
  if (!Length)
    return;
  v4 = Length;
  v5 = CFStringFind((CFStringRef)*((_QWORD *)this + 1), CFSTR("?"), 0);
  if (v5.location == -1)
    v6.length = v4;
  else
    v6.length = v5.location;
  v6.location = 0;
  v7 = (NetworkNotification *)CFStringCreateWithSubstring(0, *((CFStringRef *)this + 1), v6);
  v8 = v7;
  if (!v7)
    goto LABEL_36;
  TypeForName = NetworkNotification::_GetTypeForName(v7, (const __CFString *)v7);
  *((_DWORD *)this + 6) = TypeForName;
  v10 = TypeForName - 1;
  if (v10 > 2)
    goto LABEL_36;
  v11 = *off_1E1532438[v10];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_QWORD *)this + 4) = Mutable;
  CFDictionarySetValue(Mutable, v11, v8);
  if (v5.location == -1)
    goto LABEL_36;
  v13 = v5.location + v5.length;
  if (v5.location + v5.length == -1)
    goto LABEL_36;
  v14.length = v4 - v13;
  if (v4 - v13 < 1)
    goto LABEL_36;
  while (1)
  {
    result = (CFRange)xmmword_1843CDDF0;
    v14.location = v13;
    v15 = CFStringFindWithOptions(*((CFStringRef *)this + 1), CFSTR(";"), v14, 0, &result);
    location = result.location;
    v16 = result.length;
    v18 = v15 ? result.location : v4;
    if (v18 - v13 >= 1)
      break;
LABEL_26:
    v13 = v16 + location;
    v14.length = v4 - (v16 + location);
    if (v15)
      v24 = v13 == -1;
    else
      v24 = 1;
    if (v24 || v4 - (v16 + location) <= 0)
      goto LABEL_36;
  }
  v27 = (CFRange)xmmword_1843CDDF0;
  v29.location = v13;
  v29.length = v18 - v13;
  if (CFStringFindWithOptions(*((CFStringRef *)this + 1), CFSTR("="), v29, 0, &v27))
  {
    if (v27.location != v13)
    {
      v19 = v27.length + v27.location;
      v20 = v18 - (v27.length + v27.location);
      if (v20)
      {
        v30.location = v13;
        v30.length = v27.location - v13;
        v21 = CFStringCreateWithSubstring(0, *((CFStringRef *)this + 1), v30);
        v31.location = v19;
        v31.length = v20;
        v22 = CFStringCreateWithSubstring(0, *((CFStringRef *)this + 1), v31);
        v23 = (__CFString *)v22;
        if (v21 && v22)
        {
          if (NetworkNotification::_NotificationKeyIsValidForType(this, v21))
            NetworkNotification::setValueForKey(this, v23, v21, 0);
        }
        else if (!v21)
        {
          goto LABEL_24;
        }
        CFRelease(v21);
LABEL_24:
        if (v23)
          CFRelease(v23);
        goto LABEL_26;
      }
    }
  }
  *((_DWORD *)this + 6) = 0;
LABEL_36:
  if (!*((_DWORD *)this + 6))
  {
    v26 = (const void *)*((_QWORD *)this + 4);
    if (v26)
    {
      CFRelease(v26);
      *((_QWORD *)this + 4) = 0;
    }
  }
  if (v8)
    CFRelease(v8);
}

NetworkNotification *NetworkNotification::NetworkNotification(NetworkNotification *a1, uint64_t a2)
{
  const __CFString *v3;
  std::string __p;
  std::string v6;
  std::string v7;
  const __CFString *v8;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v6 = __p;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    v7 = v6;
  v8 = 0;
  if (ctu::cf::convert_copy())
    v3 = v8;
  else
    v3 = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  NetworkNotification::NetworkNotification(a1, v3);
  if (v3)
    CFRelease(v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

{
  const __CFString *v3;
  std::string __p;
  std::string v6;
  std::string v7;
  const __CFString *v8;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v6 = __p;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    v7 = v6;
  v8 = 0;
  if (ctu::cf::convert_copy())
    v3 = v8;
  else
    v3 = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  NetworkNotification::NetworkNotification(a1, v3);
  if (v3)
    CFRelease(v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void NetworkNotification::~NetworkNotification(NetworkNotification *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 4);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
    CFRelease(v4);
}

uint64_t NetworkNotification::type(NetworkNotification *this)
{
  return *((unsigned int *)this + 6);
}

const void *NetworkNotification::name(NetworkNotification *this)
{
  const __CFDictionary *v2;
  unsigned int v3;

  v2 = (const __CFDictionary *)*((_QWORD *)this + 4);
  if (v2 && (v3 = *((_DWORD *)this + 6) - 1, v3 <= 2))
    return CFDictionaryGetValue(v2, *off_1E1532438[v3]);
  else
    return 0;
}

uint64_t NetworkNotification::parsedNotification(NetworkNotification *this)
{
  return *((_QWORD *)this + 4);
}

CFMutableStringRef NetworkNotification::copyUnparsedNotification(CFStringRef *this)
{
  return CFStringCreateMutableCopy(0, 0, this[1]);
}

uint64_t NetworkNotification::notificationString(NetworkNotification *this)
{
  const __CFString *v2;
  const __CFString *v3;
  CFMutableStringRef v5[2];

  if (*(_BYTE *)this)
  {
    v2 = (const __CFString *)NetworkNotification::name(this);
    if (v2)
    {
      v3 = v2;
      CFRelease(*((CFTypeRef *)this + 1));
      *((_QWORD *)this + 1) = CFStringCreateMutableCopy(0, 0, v3);
      if ((unint64_t)CFDictionaryGetCount(*((CFDictionaryRef *)this + 4)) >= 2)
      {
        v5[0] = *((CFMutableStringRef *)this + 1);
        v5[1] = 0;
        CFStringAppend(v5[0], CFSTR("?"));
        CFDictionaryApplyFunction(*((CFDictionaryRef *)this + 4), (CFDictionaryApplierFunction)_AppendKeyValueToString, v5);
      }
    }
  }
  return *((_QWORD *)this + 1);
}

void _AppendKeyValueToString(const void *a1, const void *a2, int *a3)
{
  __CFString *v6;

  if (!CFEqual(a1, CFSTR("notification")))
  {
    v6 = *(__CFString **)a3;
    if (a3[2] < 1)
      CFStringAppendFormat(v6, 0, CFSTR("%@%@%@"), a1, CFSTR("="), a2);
    else
      CFStringAppendFormat(v6, 0, CFSTR("%@%@%@%@"), CFSTR(";"), a1, CFSTR("="), a2);
    ++a3[2];
  }
}

uint64_t NetworkNotification::url(NetworkNotification *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t NetworkNotification::setValueForKey(NetworkNotification *this, __CFString *a2, CFStringRef theString1, int a4)
{
  uint64_t result;
  int v8;
  _BOOL4 FinalFormForValue;
  void *v10;
  _BOOL4 v11;
  void *value;

  result = 0;
  if (a2 && theString1 && *((_QWORD *)this + 4))
  {
    v8 = *((_DWORD *)this + 6);
    if (v8 == 3)
      goto LABEL_7;
    if (v8 != 2)
    {
      if (v8 == 1)
      {
LABEL_7:
        CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 4), theString1, a2);
        result = 1;
        if (a4 == 1)
          *(_BYTE *)this = 1;
        return result;
      }
      return 0;
    }
    value = 0;
    FinalFormForValue = NetworkNotification::_GetFinalFormForValue(this, theString1, a2, (const void **)&value);
    v10 = value;
    if (!value)
      return 0;
    v11 = FinalFormForValue;
    CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 4), theString1, value);
    if (v11)
      CFRelease(v10);
    if (a4 == 1)
      *(_BYTE *)this = 1;
    return 1;
  }
  return result;
}

BOOL NetworkNotification::_GetFinalFormForValue(NetworkNotification *this, CFStringRef theString1, const __CFString *a3, const void **a4)
{
  NetworkNotification *v7;
  NetworkNotification *v8;
  NetworkNotification *v9;

  v7 = (NetworkNotification *)CFStringCompare(theString1, CFSTR("success"), 0);
  if (!v7)
    return NetworkNotification::_ConvertToBool(v7, a3, a4);
  v7 = (NetworkNotification *)CFStringCompare(theString1, CFSTR("autorenew"), 0);
  if (!v7)
    return NetworkNotification::_ConvertToBool(v7, a3, a4);
  v7 = (NetworkNotification *)CFStringCompare(theString1, CFSTR("intl"), 0);
  if (!v7)
    return NetworkNotification::_ConvertToBool(v7, a3, a4);
  v7 = (NetworkNotification *)CFStringCompare(theString1, CFSTR("stacking"), 0);
  if (!v7)
    return NetworkNotification::_ConvertToBool(v7, a3, a4);
  v8 = (NetworkNotification *)CFStringCompare(theString1, CFSTR("last-updated"), 0);
  if (!v8)
    return NetworkNotification::_ConvertToDate(v8, a3, (CFDateRef *)a4);
  v8 = (NetworkNotification *)CFStringCompare(theString1, CFSTR("end"), 0);
  if (!v8)
    return NetworkNotification::_ConvertToDate(v8, a3, (CFDateRef *)a4);
  v8 = (NetworkNotification *)CFStringCompare(theString1, CFSTR("expiry"), 0);
  if (!v8)
    return NetworkNotification::_ConvertToDate(v8, a3, (CFDateRef *)a4);
  v9 = (NetworkNotification *)CFStringCompare(theString1, CFSTR("used"), 0);
  if (!v9)
    return NetworkNotification::_ConvertToNumber(v9, a3, (CFNumberRef *)a4);
  v9 = (NetworkNotification *)CFStringCompare(theString1, CFSTR("delay"), 0);
  if (!v9)
    return NetworkNotification::_ConvertToNumber(v9, a3, (CFNumberRef *)a4);
  v9 = (NetworkNotification *)CFStringCompare(theString1, CFSTR("bucket"), 0);
  if (!v9)
    return NetworkNotification::_ConvertToNumber(v9, a3, (CFNumberRef *)a4);
  v9 = (NetworkNotification *)CFStringCompare(theString1, CFSTR("allowed"), 0);
  if (!v9)
    return NetworkNotification::_ConvertToNumber(v9, a3, (CFNumberRef *)a4);
  *a4 = a3;
  return 0;
}

BOOL NetworkNotification::_ConvertToBool(NetworkNotification *this, CFStringRef theString, const void **a3)
{
  CFComparisonResult v5;
  CFTypeRef v6;
  CFTypeRef *v7;
  CFRange v9;
  CFRange v10;

  v9.length = CFStringGetLength(theString);
  v9.location = 0;
  if (CFStringCompareWithOptions(CFSTR("yes"), theString, v9, 1uLL) == kCFCompareEqualTo)
  {
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    goto LABEL_5;
  }
  v10.length = CFStringGetLength(theString);
  v10.location = 0;
  v5 = CFStringCompareWithOptions(CFSTR("no"), theString, v10, 1uLL);
  v6 = 0;
  if (v5 == kCFCompareEqualTo)
  {
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
LABEL_5:
    v6 = CFRetain(*v7);
  }
  *a3 = v6;
  return v6 != 0;
}

BOOL NetworkNotification::_ConvertToDate(NetworkNotification *this, CFStringRef string, CFDateRef *a3)
{
  __CFDateFormatter *v5;
  const __CFAllocator *v6;
  CFDateRef DateFromString;

  v5 = (__CFDateFormatter *)NetworkNotification::_ConvertToDate(__CFString const*,void const*&)::customDateFormatter;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!NetworkNotification::_ConvertToDate(__CFString const*,void const*&)::customDateFormatter)
  {
    NetworkNotification::_ConvertToDate(__CFString const*,void const*&)::customDateFormatter = (uint64_t)CFDateFormatterCreate(v6, 0, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat((CFDateFormatterRef)NetworkNotification::_ConvertToDate(__CFString const*,void const*&)::customDateFormatter, CFSTR("MM:dd:yyyy:HH:mm:ss"));
    v5 = (__CFDateFormatter *)NetworkNotification::_ConvertToDate(__CFString const*,void const*&)::customDateFormatter;
  }
  DateFromString = CFDateFormatterCreateDateFromString(v6, v5, string, 0);
  if (!DateFromString)
    return *a3 != 0;
  *a3 = DateFromString;
  return 1;
}

BOOL NetworkNotification::_ConvertToNumber(NetworkNotification *this, CFStringRef string, CFNumberRef *a3)
{
  __CFNumberFormatter *v5;
  const __CFAllocator *v6;
  CFNumberRef NumberFromString;

  v5 = (__CFNumberFormatter *)NetworkNotification::_ConvertToNumber(__CFString const*,void const*&)::numberFormatter;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!NetworkNotification::_ConvertToNumber(__CFString const*,void const*&)::numberFormatter)
  {
    v5 = CFNumberFormatterCreate(v6, 0, kCFNumberFormatterNoStyle);
    NetworkNotification::_ConvertToNumber(__CFString const*,void const*&)::numberFormatter = (uint64_t)v5;
  }
  NumberFromString = CFNumberFormatterCreateNumberFromString(v6, v5, string, 0, 1uLL);
  if (!NumberFromString)
    return *a3 != 0;
  *a3 = NumberFromString;
  return 1;
}

uint64_t NetworkNotification::_GetTypeForName(NetworkNotification *this, const __CFString *a2)
{
  uint64_t result;

  pthread_once(&__NotificationInit, (void (*)(void))_NotificationNameDictionaryInit);
  result = CFSetContainsValue((CFSetRef)__ValidVMNotificationNames, a2);
  if ((_DWORD)result != 1)
  {
    if (CFSetContainsValue((CFSetRef)__ValidDPNotificationNames, a2) == 1)
    {
      return 2;
    }
    else if (CFSetContainsValue((CFSetRef)__ValidPNRNotificationNames, a2) == 1)
    {
      return 3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFSetRef _NotificationNameDictionaryInit(void)
{
  const CFSetCallBacks *v0;
  CFSetRef result;
  void *v2[7];
  void *v3[14];
  void *v4[8];
  void *v5[2];
  void *v6[2];
  void *values[6];

  values[5] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("STATE");
  values[1] = CFSTR("MBOXUPDATE");
  values[2] = CFSTR("GREETINGCHANGED");
  values[3] = CFSTR("SERVERCHANGED");
  values[4] = CFSTR("UNRECOGNIZED");
  v6[0] = CFSTR("DATA-ACTIVATION");
  v6[1] = CFSTR("DATA-USAGE");
  v5[0] = CFSTR("REG-REQ");
  v5[1] = CFSTR("REG-RESP");
  v0 = (const CFSetCallBacks *)MEMORY[0x1E0C9B3B0];
  __ValidVMNotificationNames = (uint64_t)CFSetCreate(0, (const void **)values, 5, MEMORY[0x1E0C9B3B0]);
  __ValidDPNotificationNames = (uint64_t)CFSetCreate(0, (const void **)v6, 2, v0);
  __ValidPNRNotificationNames = (uint64_t)CFSetCreate(0, (const void **)v5, 2, v0);
  v4[0] = CFSTR("state");
  v4[1] = CFSTR("name");
  v4[2] = CFSTR("pw");
  v4[3] = CFSTR("server");
  v4[4] = CFSTR("port");
  v4[5] = CFSTR("m");
  v4[6] = CFSTR("cmd");
  v4[7] = CFSTR("_timestamp");
  v3[0] = CFSTR("notification");
  v3[1] = CFSTR("success");
  v3[2] = CFSTR("MSISDN");
  v3[3] = CFSTR("plan");
  v3[4] = CFSTR("used");
  v3[5] = CFSTR("delay");
  v3[6] = CFSTR("last-updated");
  v3[7] = CFSTR("autorenew");
  v3[8] = CFSTR("intl");
  v3[9] = CFSTR("end");
  v3[10] = CFSTR("bucket");
  v3[11] = CFSTR("allowed");
  v3[12] = CFSTR("expiry");
  v3[13] = CFSTR("stacking");
  v2[0] = CFSTR("notification");
  v2[1] = CFSTR("t");
  v2[2] = CFSTR("n");
  v2[3] = CFSTR("s");
  v2[4] = CFSTR("r");
  v2[5] = CFSTR("u");
  v2[6] = CFSTR("v");
  __ValidVMNotificationKeys = (uint64_t)CFSetCreate(0, (const void **)v4, 8, v0);
  __ValidDPNotificationKeys = (uint64_t)CFSetCreate(0, (const void **)v3, 14, v0);
  result = CFSetCreate(0, (const void **)v2, 7, v0);
  __ValidPNRNotificationKeys = (uint64_t)result;
  return result;
}

uint64_t NetworkNotification::_NotificationKeyIsValidForType(NetworkNotification *this, const __CFString *a2)
{
  unsigned int v4;

  pthread_once(&__NotificationInit, (void (*)(void))_NotificationNameDictionaryInit);
  v4 = *((_DWORD *)this + 6) - 1;
  if (v4 > 2)
    return 0;
  else
    return CFSetContainsValue(*(CFSetRef *)off_1E1532450[v4], a2);
}

const char *asString(unsigned int a1)
{
  if (a1 > 3)
    return "INVALID NOTIFICATION";
  else
    return off_1E1532468[a1];
}

{
  if (a1 > 8)
    return "Unknown";
  else
    return off_1E15345B0[a1];
}

const char *CTEsimCapabilityAsString(unint64_t a1)
{
  if (a1 > 2)
    return "???";
  else
    return off_1E1532488[a1];
}

__CFString *wirelessTechnologyToWirelessTechnologyString(int a1)
{
  __CFString **v1;

  v1 = kCTWirelessTechnologyUnknown;
  if (a1 <= 39)
  {
    if (a1 == 4)
    {
      v1 = kCTWirelessTechnologyUMTS;
      return *v1;
    }
    if (a1 == 8)
    {
      v1 = kCTWirelessTechnologyCDMA2000;
      return *v1;
    }
    if (a1 != 32)
      return *v1;
    goto LABEL_11;
  }
  if (a1 == 40 || a1 == 64)
  {
LABEL_11:
    v1 = kCTWirelessTechnologyLTE;
    return *v1;
  }
  if (a1 == 128)
    v1 = kCTWirelessTechnologyNR;
  return *v1;
}

__CFString *networkSelectionModeToNetworkSelectionModeString(int a1)
{
  __CFString **v1;
  __CFString **v2;

  v1 = kCTRegistrationNetworkSelectionModeAutomatic;
  v2 = kCTRegistrationNetworkSelectionModeManual;
  if (a1 != 1)
    v2 = kCTRegistrationNetworkSelectionModeDisabled;
  if (a1)
    v1 = v2;
  return *v1;
}

uint64_t toRatSelection(const __CFString *a1)
{
  if (a1)
  {
    if (CFEqual(a1, CFSTR("kCTRegistrationRATSelectionGSM")))
    {
      return 1;
    }
    else if (CFEqual(a1, CFSTR("kCTRegistrationRATSelectionUMTS")))
    {
      return 2;
    }
    else if (CFEqual(a1, CFSTR("kCTRegistrationRATSelectionDual")))
    {
      return 3;
    }
    else if (CFEqual(a1, CFSTR("kCTRegistrationRATSelectionCDMA1x")))
    {
      return 4;
    }
    else if (CFEqual(a1, CFSTR("kCTRegistrationRATSelectionCDMA1xEVDO")))
    {
      return 8;
    }
    else if (CFEqual(a1, CFSTR("kCTRegistrationRATSelectionCDMAHybrid")))
    {
      return 12;
    }
    else if (CFEqual(a1, CFSTR("kCTRegistrationRATSelectionLTE")))
    {
      return 16;
    }
    else if (CFEqual(a1, CFSTR("kCTRegistrationRATSelectionTDSCDMA")))
    {
      return 32;
    }
    else if (CFEqual(a1, CFSTR("kCTRegistrationRATSelectionNR")))
    {
      return -48;
    }
    else if (CFEqual(a1, CFSTR("kCTRegistrationRATSelectionNRStandAlone")))
    {
      return 80;
    }
    else if (CFEqual(a1, CFSTR("kCTRegistrationRATSelectionNRNonStandAlone")))
    {
      return -112;
    }
    else if (CFEqual(a1, CFSTR("kCTRegistrationRATSelectionAutomatic")))
    {
      return -1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

__CFString *getDataRateString(int a1)
{
  __CFString **v1;

  if ((a1 - 1) > 7)
    v1 = kCTRegistrationDataRateUnknown;
  else
    v1 = off_1E1532508[a1 - 1];
  return *v1;
}

__CFString *networkSelectionStateToNetworkSelectionStateString(int a1)
{
  __CFString **v1;
  __CFString *result;

  switch(a1)
  {
    case 0:
      v1 = kCTRegistrationNetworkSelectionStateUnknown;
      goto LABEL_10;
    case 1:
      v1 = kCTRegistrationNetworkSelectionStateIdle;
      goto LABEL_10;
    case 2:
      v1 = kCTRegistrationNetworkSelectionStateScanning;
      goto LABEL_10;
    case 3:
      v1 = kCTRegistrationNetworkSelectionStateScanned;
      goto LABEL_10;
    case 4:
      v1 = kCTRegistrationNetworkSelectionStateChosen;
      goto LABEL_10;
    case 5:
      v1 = kCTRegistrationNetworkSelectionStateJoining;
      goto LABEL_10;
    case 6:
      v1 = kCTRegistrationNetworkSelectionStateJoinedOnManual;
LABEL_10:
      result = *v1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void convertRatAndPreferred(int a1, int a2, const __CFString **a3, const __CFString **a4)
{
  uint64_t v5;
  __CFString **v6;
  const __CFString *v7;
  __CFString **v8;

  *a3 = CFSTR("kCTRegistrationRATSelectionUnknown");
  *a4 = CFSTR("kCTRegistrationRATSelectionUnknown");
  if (a1 <= 30)
  {
    switch(a1)
    {
      case 1:
        v6 = kCTRegistrationRATSelection0;
        goto LABEL_18;
      case 2:
        v6 = kCTRegistrationRATSelection1;
        goto LABEL_18;
      case 3:
        *a3 = CFSTR("kCTRegistrationRATSelectionDual");
        if (a2 == 2)
        {
          v8 = kCTRegistrationRATSelection1;
        }
        else
        {
          if (a2 != 1)
            return;
          v8 = kCTRegistrationRATSelection0;
        }
        v7 = *v8;
        break;
      case 4:
        v6 = kCTRegistrationRATSelection3;
        goto LABEL_18;
      case 8:
        v6 = kCTRegistrationRATSelection4;
        goto LABEL_18;
      case 12:
        v6 = kCTRegistrationRATSelection5;
        goto LABEL_18;
      case 15:
      case 18:
      case 19:
        goto LABEL_17;
      case 16:
        v6 = kCTRegistrationRATSelection6;
        goto LABEL_18;
      default:
        goto LABEL_34;
    }
    goto LABEL_19;
  }
  if (a1 > 143)
  {
    if (a1 > 207)
    {
      if (a1 != 208)
      {
        if (a1 != 211 && a1 != 255)
          goto LABEL_34;
        goto LABEL_17;
      }
    }
    else
    {
      if (a1 == 144)
      {
LABEL_25:
        v6 = kCTRegistrationRATSelection10;
        goto LABEL_18;
      }
      if (a1 == 147)
        goto LABEL_17;
      if (a1 != 192)
        goto LABEL_34;
    }
    v6 = kCTRegistrationRATSelection11;
    goto LABEL_18;
  }
  v5 = (a1 - 31);
  if (v5 > 0x31)
    goto LABEL_24;
  if (((1 << (a1 - 31)) & 0x100100001) != 0)
  {
LABEL_17:
    v6 = kCTRegistrationRATSelection7;
    goto LABEL_18;
  }
  if (((1 << (a1 - 31)) & 0x2000200000000) != 0)
  {
    v6 = kCTRegistrationRATSelection9;
LABEL_18:
    v7 = *v6;
    *a3 = v7;
LABEL_19:
    *a4 = v7;
    return;
  }
  if (v5 == 1)
  {
    v6 = kCTRegistrationRATSelection8;
    goto LABEL_18;
  }
LABEL_24:
  if (a1 == 128)
    goto LABEL_25;
LABEL_34:
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    convertRatAndPreferred(a1);
}

uint64_t _CTServerConnectionGetSIMSubscriptionStatus(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t result;
  xpc_object_t *v7;
  int v8;
  _QWORD v9[5];
  xpc_object_t v10;
  xpc_object_t v11;

  result = 0x1600000001;
  if (a1 && a2 && a3)
  {
    v7 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v11);
    xpc::dict_creator::operator()<char const*>("kCPGetSIMSubscriptionStatus", v7, "kRequest", &v10);
    xpc_release(v11);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = ___CTServerConnectionGetSIMSubscriptionStatus_block_invoke;
    v9[3] = &unk_1E152D350;
    v9[4] = a3;
    v8 = SendXpcMessageAsync(a1, &v11, a2, v9);
    xpc_release(v11);
    if (v8)
      return 0;
    else
      return 0x500000002;
  }
  return result;
}

uint64_t _CTServerConnectionProbeSIMConnectivityStatus(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t result;
  xpc_object_t *v7;
  int v8;
  _QWORD v9[5];
  xpc_object_t v10;
  xpc_object_t v11;

  result = 0x1600000001;
  if (a1 && a2 && a3)
  {
    v7 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v11);
    xpc::dict_creator::operator()<char const*>("kCPProbeSIMConnectivity", v7, "kRequest", &v10);
    xpc_release(v11);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = ___CTServerConnectionProbeSIMConnectivityStatus_block_invoke;
    v9[3] = &unk_1E1532580;
    v9[4] = a3;
    v8 = SendXpcMessageAsync(a1, &v11, a2, v9);
    xpc_release(v11);
    if (v8)
      return 0;
    else
      return 0x500000002;
  }
  return result;
}

const void **ctu::cf::CFSharedRef<__CFError>::operator=<void const,void>(const void **a1, CFTypeRef *a2)
{
  const void *v3;
  const void *v5;

  v5 = 0;
  ctu::cf::CFSharedRef<__CFError>::CFSharedRef<void const,void>(&v5, a2);
  v3 = *a1;
  *a1 = v5;
  v5 = v3;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t _CTServerConnectionCopyRemoteMobileEquipmentInfo(uint64_t a1, ctu *a2, NSObject *a3, uint64_t a4)
{
  uint64_t result;
  xpc_object_t v9;
  const void *v10;
  xpc_object_t v11;
  int v12;
  _QWORD v13[5];
  xpc_object_t value;
  xpc_object_t v15;
  xpc_object_t object;

  result = 0x1600000001;
  if (a1 && a2 && a3 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCPCopyRemoteMobileEquipmentInfo", &object, "kRequest", &v15);
    xpc_release(object);
    v9 = v15;
    object = v15;
    v15 = xpc_null_create();
    xpc_release(v15);
    ctu::cf_to_xpc(a2, v10);
    xpc_dictionary_set_value(v9, "kCPRemoteMobileEquipmentInfoDeviceId", value);
    v11 = value;
    value = xpc_null_create();
    xpc_release(v11);
    xpc_release(value);
    v13[4] = a4;
    value = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 0x40000000;
    v13[2] = ___CTServerConnectionCopyRemoteMobileEquipmentInfo_block_invoke;
    v13[3] = &unk_1E152D468;
    v12 = SendXpcMessageAsync(a1, &object, a3, v13);
    xpc_release(object);
    if (v12)
      return 0;
    else
      return 0x500000002;
  }
  return result;
}

unint64_t _CTServerConnectionGetNumberOfDeletablePlansInstalled(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  const object *v6;
  xpc_object_t object[2];
  xpc_object_t v9;
  CFTypeRef cf;
  uint64_t v11;
  xpc_object_t xdict;
  xpc_object_t v13;

  v2 = 0x1600000000;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCPGetNumberOfDeletablePlansInstalled", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v13 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v13, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kCPNumberOfDeletablePlansInstalled"))
    {
      v2 = v3 & 0xFFFFFFFF00000000;
      v11 = 0;
      object[0] = &xdict;
      object[1] = "kCPNumberOfDeletablePlansInstalled";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      xpc::bridge((xpc *)&v9, v6);
      ctu::cf::CFSharedRef<__CFNumber const>::CFSharedRef<void const,void>(&v11, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v9);
      *a2 = v11;
    }
    else
    {
      v2 = 0x2300000000;
      LODWORD(v3) = 1;
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

uint64_t _CTServerConnectionReprovisionSim(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCPReprovisionSim", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionDebugResetSim(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCPResetSim", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionStandaloneSetSelectionOverride(uint64_t a1, uint64_t a2, ctu *a3, uint64_t a4, uint64_t a5)
{
  xpc_object_t v8;
  xpc_object_t v9;
  const void *v11;
  xpc_object_t v12;
  NSObject *global_queue;
  int v14;
  _QWORD v15[5];
  xpc_object_t value;
  xpc_object_t v17;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCPStandaloneOverrideSelection", &object, "kRequest", &v17);
  xpc_release(object);
  object = v17;
  v17 = xpc_null_create();
  xpc_release(v17);
  v8 = xpc_dictionary_create(0, 0, 0);
  if ((v8 || (v8 = xpc_null_create()) != 0) && MEMORY[0x186DBAE5C](v8) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v8);
    v9 = v8;
  }
  else
  {
    v9 = xpc_null_create();
  }
  xpc_release(v8);
  ctu::cf_to_xpc(a3, v11);
  xpc_dictionary_set_value(object, "kCPStandaloneIccid", value);
  v12 = value;
  value = xpc_null_create();
  xpc_release(v12);
  xpc_release(value);
  value = 0;
  global_queue = dispatch_get_global_queue(0, 0);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v15[2] = ___CTServerConnectionStandaloneSetSelectionOverride_block_invoke;
  v15[3] = &unk_1E15325A8;
  v15[4] = a5;
  v14 = SendXpcMessageAsync(a1, &object, global_queue, v15);
  xpc_release(v9);
  xpc_release(object);
  if (v14)
    return 0;
  else
    return 0x500000002;
}

BOOL xpc::operator==<BOOL>(uint64_t a1, BOOL *a2)
{
  xpc_object_t v3;
  _BOOL8 v4;
  xpc_object_t object1;

  object1 = 0;
  xpc::dict::object_proxy::operator xpc::object(a1, &object1);
  v3 = xpc_BOOL_create(*a2);
  if (!v3)
    v3 = xpc_null_create();
  v4 = xpc_equal(object1, v3);
  xpc_release(v3);
  xpc_release(object1);
  return v4;
}

uint64_t _CTServerConnectionStandaloneSetSelectionOverrideNonEsim(uint64_t a1, ctu *a2)
{
  xpc_object_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v12;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCPStandaloneOverrideSelectionLegacy", &object, "kRequest", &v12);
  xpc_release(object);
  v4 = v12;
  object = v12;
  v12 = xpc_null_create();
  xpc_release(v12);
  ctu::cf_to_xpc(a2, v5);
  xpc_dictionary_set_value(v4, "kCPStandaloneIccid", value);
  v6 = value;
  valuea = xpc_null_create();
  xpc_release(v6);
  xpc_release(valuea);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionStandaloneResetSelectionOverride(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCPStandaloneOverrideSelectionReset", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionStandaloneDownloadProfile(uint64_t a1, ctu *a2, ctu *a3, uint64_t a4)
{
  uint64_t result;
  xpc_object_t *v9;
  xpc_object_t v10;
  const void *v11;
  xpc_object_t v12;
  const void *v13;
  xpc_object_t v14;
  NSObject *global_queue;
  int v16;
  _QWORD v17[5];
  xpc_object_t object;
  xpc_object_t value;
  xpc_object_t v20;
  xpc_object_t v21;

  result = 0x1600000001;
  if (a1 && a2 && a3 && a4)
  {
    v9 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v21);
    xpc::dict_creator::operator()<char const*>("kCPStandaloneDownloadProfile", v9, "kRequest", &v20);
    xpc_release(v21);
    v10 = v20;
    v21 = v20;
    v20 = xpc_null_create();
    xpc_release(v20);
    ctu::cf_to_xpc(a2, v11);
    xpc_dictionary_set_value(v10, "kCPStandaloneCsn", value);
    v12 = value;
    value = xpc_null_create();
    xpc_release(v12);
    xpc_release(value);
    value = 0;
    ctu::cf_to_xpc(a3, v13);
    xpc_dictionary_set_value(v10, "kCPStandaloneProfileServer", object);
    v14 = object;
    object = xpc_null_create();
    xpc_release(v14);
    xpc_release(object);
    object = 0;
    global_queue = dispatch_get_global_queue(0, 0);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 0x40000000;
    v17[2] = ___CTServerConnectionStandaloneDownloadProfile_block_invoke;
    v17[3] = &unk_1E15325D0;
    v17[4] = a4;
    v16 = SendXpcMessageAsync(a1, &v21, global_queue, v17);
    xpc_release(v21);
    if (v16)
      return 0;
    else
      return 0x500000002;
  }
  return result;
}

uint64_t _CTServerConnectionStandaloneGetCachedVinylInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef cf;
  xpc_object_t xdict;
  xpc_object_t object;

  result = 0x1600000001;
  if (!a1 || !a2)
    return result;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCPStandaloneGetCacheVinylInfo", &object, "kRequest", &xdict);
  xpc_release(object);
  object = xdict;
  xdict = xpc_null_create();
  xpc_release(xdict);
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5)
  {
    v6 = v5;
    xdict = v5;
  }
  else
  {
    v6 = xpc_null_create();
    xdict = v6;
    if (!v6)
      goto LABEL_7;
  }
  if (MEMORY[0x186DBAE5C](v6) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
LABEL_7:
  xdict = xpc_null_create();
LABEL_9:
  xpc_release(v6);
  SendXpcMessage(a1, &object, &xdict);
  cf = 0;
  xpc_dictionary_get_value(xdict, "kCPStandaloneCachedVinylInfoResult");
  v10 = _CFXPCCreateCFObjectFromXPCObject();
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&cf, (CFTypeRef *)&v10);
  if (cf)
    v7 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v7 = 0;
  if (v7 && cf)
  {
    v8 = a2;
    v9 = 1;
  }
  else
  {
    v8 = a2;
    v9 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(v8, v9);
  if (cf)
    CFRelease(cf);
  xpc_release(xdict);
  xpc_release(object);
  return 0;
}

_QWORD *ctu::cf::CFSharedRef<__CFError>::CFSharedRef<void const,void>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v4;
  CFTypeID v5;

  v4 = *a2;
  if (*a2 && (v5 = CFGetTypeID(*a2), v5 == CFErrorGetTypeID()))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    if (*a2)
      CFRelease(*a2);
  }
  return a1;
}

const char *MMSCharsetHeader::charsetNameForMibEnum(MMSCharsetHeader *this)
{
  _QWORD *v1;
  uint64_t *v2;
  unsigned int v4;

  v4 = this;
  v1 = (_QWORD *)_mibEnumToCharsetMap;
  if (!_mibEnumToCharsetMap)
  {
    initCharsetMaps();
    v1 = (_QWORD *)_mibEnumToCharsetMap;
  }
  v2 = std::__hash_table<std::__hash_value_type<unsigned int,MMSCharset *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MMSCharset *>>>::find<unsigned int>(v1, &v4);
  if (v2)
    return *(const char **)(v2[3] + 8);
  else
    return "UNKNOWN";
}

void initCharsetMaps(void)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int *v4;
  void *__p[2];
  char v6;
  void **v7;

  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  v1 = operator new();
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_DWORD *)(v1 + 32) = 1065353216;
  if (_charsets[0])
  {
    v2 = 0;
    v3 = 1;
    v4 = _charsets;
    do
    {
      __p[0] = v4;
      std::__hash_table<std::__hash_value_type<unsigned int,MMSCharset *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MMSCharset *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v0, (unsigned int *)v4, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)[3] = v4;
      std::string::basic_string[abi:nn180100]<0>(__p, *(char **)&_charsets[4 * v2 + 2]);
      v7 = __p;
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,MMSHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v1, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v7)+ 5) = v4;
      if (v6 < 0)
        operator delete(__p[0]);
      v2 = v3;
      v4 = &_charsets[4 * v3++];
    }
    while (*v4);
  }
  _mibEnumToCharsetMap = v0;
  _nameToCharsetMap = v1;
}

uint64_t MMSCharsetHeader::cfEncodingForMibEnum(MMSCharsetHeader *this)
{
  _QWORD *v1;
  uint64_t *v2;
  unsigned int v4;

  v4 = this;
  v1 = (_QWORD *)_mibEnumToCharsetMap;
  if (!_mibEnumToCharsetMap)
  {
    initCharsetMaps();
    v1 = (_QWORD *)_mibEnumToCharsetMap;
  }
  v2 = std::__hash_table<std::__hash_value_type<unsigned int,MMSCharset *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MMSCharset *>>>::find<unsigned int>(v1, &v4);
  if (v2)
    return *(unsigned int *)(v2[3] + 4);
  else
    return 0xFFFFFFFFLL;
}

uint64_t MMSCharsetHeader::mibEnumForCharsetName(MMSCharsetHeader *this, const char *a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  void *__p[2];
  char v8;

  v3 = (_QWORD *)_nameToCharsetMap;
  if (!_nameToCharsetMap)
  {
    initCharsetMaps();
    v3 = (_QWORD *)_nameToCharsetMap;
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)this);
  v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v3, (uint64_t)__p);
  v5 = v4;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (v5)
      return **((unsigned int **)v5 + 5);
  }
  else if (v4)
  {
    return **((unsigned int **)v5 + 5);
  }
  return 0;
}

_QWORD *MMSCharsetHeader::MMSCharsetHeader(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;

  result = (_QWORD *)MMSIntegerHeader::MMSIntegerHeader(a1, a2, a3);
  *result = &off_1E152C8E8;
  return result;
}

BOOL MMSCharsetHeader::parseValue(MMSCharsetHeader *this, MMSCharsetHeader *a2)
{
  int v3;

  v3 = MMSCharsetHeader::mibEnumForCharsetName(a2, (const char *)a2);
  *((_DWORD *)this + 5) = v3;
  return v3 != 0;
}

uint64_t MMSCharsetHeader::valueAsString(uint64_t a1, std::string *a2)
{
  const char *v3;

  v3 = MMSCharsetHeader::charsetNameForMibEnum((MMSCharsetHeader *)*(unsigned int *)(a1 + 20));
  if (v3)
  {
    std::string::__assign_external(a2, v3);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      a2->__r_.__value_.__l.__size_ = 0;
      a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
    }
    a2->__r_.__value_.__s.__data_[0] = 0;
  }
  return 1;
}

_QWORD *MMSCharsetHeader::createInstance(MMSCharsetHeader *this)
{
  uint64_t v2;
  _QWORD *result;

  v2 = operator new();
  result = (_QWORD *)MMSIntegerHeader::MMSIntegerHeader(v2, *((_QWORD *)this + 1), 0);
  *result = &off_1E152C8E8;
  return result;
}

uint64_t MMSCharsetHeader::copy(MMSCharsetHeader *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *(_DWORD *)(result + 20) = *((_DWORD *)this + 5);
  *(_QWORD *)result = &off_1E152C8E8;
  return result;
}

const char *MMSCharsetHeader::headerTypeName(MMSCharsetHeader *this)
{
  return "charset";
}

void MMSCharsetHeader::~MMSCharsetHeader(MMSCharsetHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);
  JUMPOUT(0x186DBA454);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,MMSCharset *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MMSCharset *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *a2;
      if (v7 <= v6)
        v9 = v6 % v7;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & v6;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v6)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v6)
              return v11;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7)
                v12 %= v7;
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v6;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MMSHeaderEncoding const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MMSHeaderEncoding const*>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v9 = v6 % v7;
      else
        v9 = v6;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v9) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,MMSCharset *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MMSCharset *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MMSCharset *>>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void sub_18433AAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433AB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433AC50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433ACCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433AD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433AE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433AF24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433AFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTRegistrationDisplayStatus>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_18433B078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433B110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18433B1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433B284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433B35C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433B3D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433B4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433B558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433B630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433B6AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433B774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433B82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433B904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433B980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433BA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433BB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433BBD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433BC54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433BD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433BDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18433BEAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433BF48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18433BFE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18433C09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433C148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18433C22C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433C2C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18433C360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18433C454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18433C65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_18433C750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433C7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433C8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433C930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18433C9FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433CA78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433CB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433CBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433CCD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433CD4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTNRStatus>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_18433CE24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433CEBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18433CF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433D040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433D128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433D1C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18433D25C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18433D350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18433D490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433D558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18433D614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433D6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433D7A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433D820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433D8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433D9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433DA78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433DAF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433DBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433DC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433DD4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433DDC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTRatSelection>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_18433DEA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433DF38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18433DFE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433E16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_18433E308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18433E49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18433E57C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18433E670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18433E814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_18433E8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433E9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433EA30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18433EAFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433EBDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433EC58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<NSDictionary>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_18433ED30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433EDB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTBandInfo>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_18433EE8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433EF98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433F0C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18433F20C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18433F40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_18433F594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433F69C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18433F7BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18433F958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_18433FA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433FAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18433FB74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18433FC0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18433FCD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18433FD54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSignalStrengthInfo>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_18433FE2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18433FEC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18433FFB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184340154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_184340238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843402E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18434036C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184340438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843404B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSignalStrengthMeasurements>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_18434058C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184340624(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843406E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184340798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184340870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843408EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTVoiceLinkQualityMetric>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1843409C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184340A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184340B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184340BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184340CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184340D24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTEnhancedLinkQualityMetric>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_184340DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184340E94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184340F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184341008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843410E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18434115C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843411E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843412A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184341358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184341430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843414AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTIMSRegistrationStatus>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_184341584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18434161C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843416D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184341790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184341868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843418E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTIMSRegistrationTransportInfo>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1843419BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184341A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184341B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184341BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184341CA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184341D1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSupportedMaxDataRates>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_184341DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184341E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184341F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184341FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1843420D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184342174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18434220C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184342300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184342440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184342510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843425CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1843426B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18434276C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184342844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843428C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTNetworkList>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_184342998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184342A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184342AD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184342C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184342D60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184342E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184342ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184342FAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184343028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTNetwork>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_184343100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184343198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184343254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184343300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1843433E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184343480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184343518(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843435D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18434368C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184343764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843437E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTNetworkSelectionInfo>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1843438B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184343950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184343A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184343AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184343B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184343C38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184343CD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184343D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184343E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184343F1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184343F98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTEncryptionStatusInfo>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_184344070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184344108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843441C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18434427C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18434435C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843443D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843444A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184344558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184344630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843446AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTRoamingStatus>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_184344784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18434481C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843448F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184344A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_184344AE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184344B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_184344C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184344CF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184344D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184344E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184344EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_184344F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184345038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843450D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18434516C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184345248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184345364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_184345434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184345818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184345CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184345F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1843461C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184346418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18434660C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_184346954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_184346B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_184346DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_184347090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18434733C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_184347448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184347580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184347680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1843477A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1843478A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843479E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  v26 = v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184347BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v23 = v22;

  _Unwind_Resume(a1);
}

void sub_184347CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184347E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_184347F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_184348130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18434828C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_184348438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184348590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1843487C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843488FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184348A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184348B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_184348C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  id *v14;
  void *v15;
  uint64_t v16;

  objc_destroyWeak(v14);
  objc_destroyWeak((id *)(v16 - 40));

  _Unwind_Resume(a1);
}

void sub_184348F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t MMSPduEncoder::MMSPduEncoder(uint64_t result, int a2)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void MMSPduEncoder::MMSPduEncoder(MMSPduEncoder *this)
{
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
}

void MMSPduEncoder::encodeByte(MMSPduEncoder *this, std::string::value_type a2)
{
  std::string::push_back((std::string *)((char *)this + 8), a2);
}

void MMSPduEncoder::encodeString(MMSPduEncoder *this, const char *a2)
{
  int v4;
  int v5;

  if (a2)
  {
    LOBYTE(v4) = *a2;
    if (*a2)
    {
      v5 = 1;
      do
      {
        std::string::push_back((std::string *)((char *)this + 8), v4);
        v4 = a2[v5++];
      }
      while (v4);
    }
  }
  std::string::push_back((std::string *)((char *)this + 8), 0);
}

void MMSPduEncoder::encodeWspShortInteger(MMSPduEncoder *this, char a2)
{
  std::string::push_back((std::string *)((char *)this + 8), a2 | 0x80);
}

void MMSPduEncoder::encodeWspLongInteger(MMSPduEncoder *this, unsigned int a2)
{
  unsigned __int8 v3;
  std::string *v4;
  __int16 v5;
  int v6;
  unsigned int v7;
  int v8;

  v3 = 3;
  while (!(a2 >> (8 * v3)))
  {
    if (!--v3)
    {
      v4 = (std::string *)((char *)this + 8);
      LOBYTE(v5) = 1;
      std::string::push_back((std::string *)((char *)this + 8), 1);
      goto LABEL_6;
    }
  }
  v5 = v3 + 1;
  v4 = (std::string *)((char *)this + 8);
  std::string::push_back((std::string *)((char *)this + 8), v3 + 1);
  if ((v5 & 0x100) != 0)
    return;
LABEL_6:
  v6 = v5;
  v7 = v5 + 1;
  v8 = 8 * v6 - 8;
  do
  {
    std::string::push_back(v4, a2 >> v8);
    --v7;
    v8 -= 8;
  }
  while (v7 > 1);
}

void MMSPduEncoder::encodeWspIntegerValue(MMSPduEncoder *this, unsigned int a2)
{
  if (a2 > 0x7F)
    MMSPduEncoder::encodeWspLongInteger(this, a2);
  else
    std::string::push_back((std::string *)((char *)this + 8), a2 | 0x80);
}

void MMSPduEncoder::encodeWspUintvarInteger(MMSPduEncoder *this, unsigned int a2)
{
  std::string *v2;
  char v4;
  int i;
  int v6;

  v2 = (std::string *)((char *)this + 8);
  if (a2)
  {
    v4 = 1;
    for (i = 28; i != -7; i -= 7)
    {
      v6 = (a2 >> i) & 0x7F;
      v4 &= v6 == 0;
      if ((v4 & 1) == 0)
        std::string::push_back(v2, v6 | ((i != 0) << 7));
    }
  }
  else
  {
    std::string::push_back((std::string *)((char *)this + 8), 0);
  }
}

void MMSPduEncoder::encodeWspValueLength(MMSPduEncoder *this, unsigned int a2)
{
  if (a2 > 0x1E)
  {
    std::string::push_back((std::string *)((char *)this + 8), 31);
    MMSPduEncoder::encodeWspUintvarInteger(this, a2);
  }
  else
  {
    std::string::push_back((std::string *)((char *)this + 8), a2);
  }
}

void MMSPduEncoder::encodeWspTextString(MMSPduEncoder *this, const char *a2)
{
  if (a2 && *a2 < 0)
    std::string::push_back((std::string *)((char *)this + 8), 127);
  MMSPduEncoder::encodeString(this, a2);
}

void MMSPduEncoder::encodeEncodedString(MMSPduEncoder *this, uint64_t a2, MMSCharsetHeader *a3)
{
  std::string *v3;
  char v5;
  uint64_t v6;
  unsigned int v7;
  MMSCharsetHeader *v8;
  BOOL v9;
  std::string *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  void *__p[2];
  __int128 v17;
  uint64_t v18;
  std::string v19;

  v3 = (std::string *)a2;
  v5 = *(_BYTE *)(a2 + 23);
  if ((_DWORD)a3 == 3 || (v5 >= 0 ? (v6 = *(unsigned __int8 *)(a2 + 23)) : (v6 = *(_QWORD *)(a2 + 8)), !v6))
  {
    if (v5 < 0)
      a2 = *(_QWORD *)a2;
    MMSPduEncoder::encodeString(this, (const char *)a2);
  }
  else
  {
    v7 = a3;
    memset(&v19, 0, sizeof(v19));
    v8 = (MMSCharsetHeader *)*((unsigned int *)this + 8);
    v9 = (_DWORD)v8 == (_DWORD)a3 || (_DWORD)v8 == 0;
    if (!v9 && MMSPduDecoder::convertStringToTargetCharset(a2, &v19, a3, v8))
    {
      v7 = *((_DWORD *)this + 8);
      v3 = &v19;
    }
    if (v7 == 106)
    {
      v10 = v3;
      if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
        v10 = (std::string *)v3->__r_.__value_.__r.__words[0];
      do
      {
        v11 = v10->__r_.__value_.__s.__data_[0];
        v10 = (std::string *)((char *)v10 + 1);
        v12 = v11 == 0;
      }
      while (v11 > 0);
      if (v12)
        v7 = 3;
    }
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    LODWORD(__p[0]) = *(_DWORD *)this;
    v18 = 0;
    __p[1] = 0;
    v17 = 0uLL;
    LODWORD(v18) = *((_DWORD *)this + 8);
    MMSPduEncoder::encodeWspIntegerValue((MMSPduEncoder *)__p, v7);
    if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
      v3 = (std::string *)v3->__r_.__value_.__r.__words[0];
    MMSPduEncoder::encodeWspTextString((MMSPduEncoder *)__p, (const char *)v3);
    if (v17 >= 0)
      v13 = HIBYTE(v17);
    else
      v13 = v17;
    MMSPduEncoder::encodeWspValueLength(this, v13);
    if (v17 >= 0)
      v14 = (const std::string::value_type *)&__p[1];
    else
      v14 = (const std::string::value_type *)__p[1];
    if (v17 >= 0)
      v15 = HIBYTE(v17);
    else
      v15 = v17;
    std::string::append((std::string *)((char *)this + 8), v14, v15);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
}

std::string *MMSPduEncoder::append(MMSPduEncoder *this, MMSPduEncoder *a2)
{
  std::string *v2;
  char *v3;
  char *v4;
  char *v5;
  std::string::size_type v6;
  std::string::size_type v7;

  v2 = (std::string *)((char *)this + 8);
  v5 = (char *)*((_QWORD *)a2 + 1);
  v3 = (char *)a2 + 8;
  v4 = v5;
  v6 = *((_QWORD *)v3 + 1);
  if (v3[23] >= 0)
  {
    v7 = v3[23];
  }
  else
  {
    v3 = v4;
    v7 = v6;
  }
  return std::string::append(v2, v3, v7);
}

BOOL MMSPduEncoder::encodeHeaders(MMSPduEncoder *this, const MMSHeaderContainer *a2)
{
  uint64_t v4;
  MMSHeader *v5;
  MMSHeader *v6;
  MMSHeader *v7;
  unint64_t v8;
  MMSHeader *v9;
  uint64_t v10;
  _BOOL8 result;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;

  v4 = MMSHeaderContainer::headerWithName(a2, "Content-Type");
  v5 = (MMSHeader *)MMSHeaderContainer::headerWithName(a2, "X-Mms-Message-Type");
  v6 = (MMSHeader *)MMSHeaderContainer::headerWithName(a2, "X-Mms-Transaction-ID");
  v7 = (MMSHeader *)MMSHeaderContainer::headerWithName(a2, "X-Mms-MMS-Version");
  if (v5 && (MMSHeader::encode(v5, this) & 1) == 0)
  {
    v12 = sMmsPduLog();
    result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    MMSPduEncoder::encodeHeaders(v12, v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  if (v6 && (MMSHeader::encode(v6, this) & 1) == 0)
  {
    v20 = sMmsPduLog();
    result = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    MMSPduEncoder::encodeHeaders(v20, v21, v22, v23, v24, v25, v26, v27);
    return 0;
  }
  if (v7 && (MMSHeader::encode(v7, this) & 1) == 0)
  {
    v28 = sMmsPduLog();
    result = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    MMSPduEncoder::encodeHeaders(v28, v29, v30, v31, v32, v33, v34, v35);
    return 0;
  }
  if (!MMSHeaderContainer::headerCount(a2))
    return 1;
  LODWORD(v8) = 0;
  while (1)
  {
    v9 = (MMSHeader *)MMSHeaderEncodingMap::encodingForNumber(a2, v8);
    if (v9 != (MMSHeader *)v4)
    {
      v10 = (uint64_t)v9;
      if (v9 != v5 && v9 != v6 && v9 != v7 && (MMSHeader::encode(v9, this) & 1) == 0)
        break;
    }
    v8 = (v8 + 1);
    if (MMSHeaderContainer::headerCount(a2) <= v8)
      return 1;
  }
  v36 = sMmsPduLog();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    MMSPduEncoder::encodeHeaders(v10);
  v37 = sMmsPduLog();
  result = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
  if (result)
  {
    MMSPduEncoder::encodeHeaders(v10);
    return 0;
  }
  return result;
}

BOOL MMSPduEncoder::_encodeMimePart(MMSPduEncoder *this, std::string **a2)
{
  const MMSHeaderContainer *v2;
  std::string *v4;
  std::string::size_type size;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  MMSMimePart *v9;
  uint64_t v10;
  MMSCharsetHeader *v11;
  MMSCharsetHeader *v12;
  BOOL v13;
  const MMSHeaderContainer *v15;
  MMSHeaderContainer *v16;
  uint64_t v17;
  std::string *v18;
  int v19;
  int v20;
  MMSHeaderContainer *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  std::string *v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  void *__p[2];
  __int128 v30;
  uint64_t v31;
  std::string v32;

  v2 = (const MMSHeaderContainer *)a2;
  memset(&v32, 0, sizeof(v32));
  v4 = a2[9];
  size = *((unsigned int *)a2 + 24);
  v6 = MMSHeaderContainer::contentType((MMSHeaderContainer *)a2);
  v7 = v6;
  if (v6)
  {
    v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if (!strcmp(v8, "text"))
    {
      v11 = (MMSCharsetHeader *)MMSParameterContainer::charset((MMSParameterContainer *)(v7 + 8));
      std::string::__assign_external(&v32, (const std::string::value_type *)v4, size);
      v12 = (MMSCharsetHeader *)*((unsigned int *)this + 8);
      if ((_DWORD)v12)
        v13 = (_DWORD)v11 == 0;
      else
        v13 = 1;
      if (v13 || (_DWORD)v11 == (_DWORD)v12)
      {
        v9 = 0;
        v10 = v7;
        v15 = v2;
      }
      else
      {
        MMSPduDecoder::convertStringToTargetCharsetInPlace(&v32, v11, v12);
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v4 = &v32;
        else
          v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
        else
          size = v32.__r_.__value_.__l.__size_;
        LODWORD(v11) = *((_DWORD *)this + 8);
        v9 = (MMSMimePart *)operator new();
        MMSMimePart::MMSMimePart(v9);
        MMSHeaderContainer::addHeaders(v16, v2);
        v17 = MMSHeaderContainer::contentType(v9);
        MMSParameterContainer::setCharset((MMSParameterContainer *)(v17 + 8), (int)v11);
        v10 = MMSHeaderContainer::contentType(v9);
        LODWORD(v12) = *((_DWORD *)this + 8);
        v15 = v9;
      }
      if ((_DWORD)v12 == 106)
      {
        v18 = &v32;
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v18 = (std::string *)v32.__r_.__value_.__r.__words[0];
        do
        {
          v20 = v18->__r_.__value_.__s.__data_[0];
          v18 = (std::string *)((char *)v18 + 1);
          v19 = v20;
        }
        while (v20 > 0);
        if (!v19)
        {
          if (!v9)
          {
            v9 = (MMSMimePart *)operator new();
            MMSMimePart::MMSMimePart(v9);
            MMSHeaderContainer::addHeaders(v21, v2);
            v10 = MMSHeaderContainer::contentType(v9);
            v15 = v9;
          }
          LODWORD(v11) = 3;
          v22 = MMSHeaderContainer::contentType(v9);
          MMSParameterContainer::setCharset((MMSParameterContainer *)(v22 + 8), 3);
        }
      }
      if (v15 == v9 && (_DWORD)v11)
      {
        v23 = MMSHeaderContainer::headerWithName(v9, "Content-Disposition");
        if (v23)
          MMSParameterContainer::setCharset((MMSParameterContainer *)(v23 + 32), (int)v11);
        v2 = v9;
      }
      else
      {
        v2 = v15;
      }
    }
    else
    {
      v9 = 0;
      v10 = v7;
    }
    *(_OWORD *)__p = 0u;
    v30 = 0u;
    LODWORD(__p[0]) = *(_DWORD *)this;
    v31 = 0;
    __p[1] = 0;
    v30 = 0uLL;
    LODWORD(v31) = *((_DWORD *)this + 8);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 40))(v10, __p);
    MMSPduEncoder::encodeHeaders((MMSPduEncoder *)__p, v2);
    if (v30 >= 0)
      v24 = HIBYTE(v30);
    else
      v24 = v30;
    MMSPduEncoder::encodeWspUintvarInteger(this, v24);
    MMSPduEncoder::encodeWspUintvarInteger(this, size);
    v25 = (std::string *)((char *)this + 8);
    if (v30 >= 0)
      v26 = (const std::string::value_type *)&__p[1];
    else
      v26 = (const std::string::value_type *)__p[1];
    if (v30 >= 0)
      v27 = HIBYTE(v30);
    else
      v27 = v30;
    std::string::append(v25, v26, v27);
    if (size)
      std::string::append(v25, (const std::string::value_type *)v4, size);
    if (SHIBYTE(v30) < 0)
      operator delete(__p[1]);
    if (v9)
      (*(void (**)(MMSMimePart *))(*(_QWORD *)v9 + 8))(v9);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  return v7 != 0;
}

uint64_t MMSPduEncoder::_encodeBody(MMSPduEncoder *this, MMSMessage *a2)
{
  MMSHeader *v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  std::string **v10;
  uint64_t v11;

  if (MMSMessage::isEmpty(a2))
  {
    if (MMSMessage::requiresContentType(a2))
    {
      MMSHeaderContainer::setContentType(a2, (MMSContentType *)"*/*");
      v4 = (MMSHeader *)MMSHeaderContainer::contentTypeHeader(a2);
      return MMSHeader::encode(v4, this);
    }
    return 1;
  }
  result = MMSHeaderContainer::contentTypeHeader(a2);
  if (result)
  {
    v6 = result;
    result = MMSHeader::encode((MMSHeader *)result, this);
    if ((_DWORD)result)
    {
      if (MMSContentType::isMultipart(*(MMSContentType **)(v6 + 24)))
      {
        v7 = MMSMessage::partCount(a2);
        std::string::push_back((std::string *)((char *)this + 8), v7);
        if (v7)
        {
          v8 = 0;
          v9 = 0;
          do
          {
            v10 = (std::string **)MMSMessage::part(a2, v8);
            result = MMSPduEncoder::_encodeMimePart(this, v10);
            if ((result & 1) == 0)
              break;
            v8 = ++v9;
          }
          while (v7 > v9);
          return result;
        }
      }
      else
      {
        v11 = MMSMessage::part(a2, 0);
        std::string::append((std::string *)((char *)this + 8), *(const std::string::value_type **)(v11 + 72), *(unsigned int *)(v11 + 96));
      }
      return 1;
    }
  }
  return result;
}

uint64_t MMSPduEncoder::encodeMessage(MMSPduEncoder *this, MMSMessage *a2)
{
  if (MMSMessage::prepareForEncoding(a2) && MMSPduEncoder::encodeHeaders(this, a2))
    return MMSPduEncoder::_encodeBody(this, a2);
  else
    return 0;
}

uint64_t MMSPduEncoder::encodeSms(MMSPduEncoder *this, unsigned int a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;

  if (a4)
    v7 = a4;
  else
    v7 = "";
  if (a3)
    v8 = a3;
  else
    v8 = "";
  if (a5)
    v9 = a5;
  else
    v9 = "";
  if (a6)
    v10 = a6;
  else
    v10 = "";
  MMSPduEncoder::encodeWspIntegerValue(this, a2);
  MMSPduEncoder::encodeString(this, v8);
  MMSPduEncoder::encodeString(this, v7);
  MMSPduEncoder::encodeString(this, v9);
  MMSPduEncoder::encodeString(this, v10);
  return 1;
}

void OUTLINED_FUNCTION_1_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  NSObject *v5;

  _os_log_error_impl(a1, v5, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_18434A2E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18434A5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18434A748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionSetInternalManagedState(uint64_t result)
{
  char *v1;

  if ((_DWORD)result == 1)
  {
    v1 = &sNeverReconnect;
  }
  else
  {
    if ((_DWORD)result != 2)
      return result;
    v1 = &sInternalDeadFlag;
  }
  *v1 = 1;
  return result;
}

BOOL operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t std::shared_ptr<CCMonitor>::operator=[abi:nn180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void CCMonitor::~CCMonitor(dispatch_object_t *this)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  dispatch_object_t v11;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, this);
  if (notify_is_valid_token(*((_DWORD *)this + 2)))
    notify_cancel(*((_DWORD *)this + 2));
  if (notify_is_valid_token(*((_DWORD *)this + 6)))
    notify_cancel(*((_DWORD *)this + 6));
  v3 = os_log_type_enabled(0, OS_LOG_TYPE_DEBUG);
  if (v3)
    CCMonitor::~CCMonitor(v3, v4, v5, v6, v7, v8, v9, v10);
  v11 = this[12];
  if (v11)
    CFRelease(v11);
  std::mutex::~mutex((std::mutex *)(this + 4));
  if (*this)
    dispatch_release(*this);
}

void CCMonitor::handleDaemonReady(CCMonitor *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  __CFNotificationCenter *LocalCenter;
  uint64_t v5;
  std::__shared_weak_count *v6;

  CCMonitor::instance(&v5);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCTDaemonReadyLocalNotification"), 0, 0, 1u);
}

void CCMonitor::findCachedValue(const xpc::object *a1@<X1>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  void *v5;

  xpc::bridge(a1, (const object *)a1);
  v4 = xpc_null_create();
  v5 = v4;
  *a2 = v4;
  if (v4)
    xpc_retain(v4);
  else
    *a2 = xpc_null_create();
  xpc_release(v5);
}

void ___ZNK13CTServerState21sendNotification_syncE7CTEventPK10__CFStringPK14__CFDictionary_block_invoke(uint64_t a1)
{
  const void *v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void *__copy_helper_block_8_32c60_ZTSN8dispatch5blockIU13block_pointerFvPK14__CFDictionaryEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_8_32c60_ZTSN8dispatch5blockIU13block_pointerFvPK14__CFDictionaryEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void ___ZNK13CTServerState21sendNotification_syncE7CTEventPK10__CFStringPK14__CFDictionary_block_invoke_4(uint64_t a1)
{
  const void *v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  CFRelease(*(CFTypeRef *)(a1 + 40));
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
}

uint64_t _CTServerConnectionGetTypeID()
{
  if (sFrameworkInit != -1)
    dispatch_once_f(&sFrameworkInit, 0, (dispatch_function_t)sInitializeCTFrameworkStuff);
  return _CTServerConnectionTypeID;
}

void DispatchReEstablish(__CFNotificationCenter *a1, _QWORD *cf, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t v5;
  NSObject *v7;
  _QWORD block[7];

  v5 = cf[3];
  if (v5)
  {
    if ((sNeverReconnect & 1) == 0)
    {
      v7 = cf[2];
      CFRetain(cf);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___ZL19DispatchReEstablishP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke;
      block[3] = &__block_descriptor_tmp_94;
      block[4] = v5;
      block[5] = v7;
      block[6] = cf;
      dispatch_async(v7, block);
    }
  }
}

_QWORD *_CTServerConnectionCreateAndLaunchWithIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD aBlock[7];
  std::string v26;
  __int128 v27;
  uint64_t v28;

  memset(&v26, 0, sizeof(v26));
  if (a2)
  {
    v27 = 0uLL;
    v28 = 0;
    ctu::cf::assign();
    memset(&v26, 0, sizeof(v26));
  }
  else
  {
    v7 = (char *)getprogname();
    std::string::basic_string[abi:nn180100]<0>(&v26, v7);
  }
  v8 = sCTServerConnectionCreate(a1, &v26, 1);
  v9 = (_QWORD *)v8;
  if (v8)
  {
    if (a4)
    {
      v10 = a4[1];
      if (v10)
      {
        v11 = (uint64_t (*)(_QWORD))a4[2];
        if (v11)
          v10 = v11(a4[1]);
      }
      v12 = MEMORY[0x1E0C809B0];
      if (a3)
      {
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 0x40000000;
        aBlock[2] = ___CTServerConnectionCreateAndLaunchWithIdentifier_block_invoke;
        aBlock[3] = &__block_descriptor_tmp_20_0;
        aBlock[4] = a3;
        aBlock[5] = v9;
        aBlock[6] = v10;
        v13 = _Block_copy(aBlock);
        v14 = v9[3];
        v15 = *(const void **)(v14 + 112);
        *(_QWORD *)(v14 + 112) = v13;
        if (v15)
          _Block_release(v15);
      }
      if (!v10)
        goto LABEL_19;
      v16 = a4[3];
      if (!v16)
        goto LABEL_19;
      v24[0] = v12;
      v24[1] = 0x40000000;
      v24[2] = ___CTServerConnectionCreateAndLaunchWithIdentifier_block_invoke_2;
      v24[3] = &__block_descriptor_tmp_21;
      v24[4] = v16;
      v24[5] = v10;
      v17 = _Block_copy(v24);
      v18 = v9[3];
      v19 = *(const void **)(v18 + 120);
      *(_QWORD *)(v18 + 120) = v17;
      if (!v19)
        goto LABEL_19;
    }
    else
    {
      if (!a3)
        goto LABEL_19;
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 0x40000000;
      v23[2] = ___CTServerConnectionCreateAndLaunchWithIdentifier_block_invoke_3;
      v23[3] = &__block_descriptor_tmp_22;
      v23[4] = a3;
      v23[5] = v8;
      v20 = _Block_copy(v23);
      v21 = v9[3];
      v19 = *(const void **)(v21 + 112);
      *(_QWORD *)(v21 + 112) = v20;
      if (!v19)
        goto LABEL_19;
    }
    _Block_release(v19);
LABEL_19:
    sCTServerConnectionStart(v9);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v9;
}

uint64_t _CTServerConnectionSendBarrier(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  _xpc_connection_s *v6;
  _QWORD barrier[4];
  dispatch_object_t object;

  if (!a1)
    return 0x1600000001;
  if (a2)
  {
    xpc_connection_send_barrier(*(xpc_connection_t *)(a1 + 40), a2);
  }
  else
  {
    v4 = dispatch_semaphore_create(0);
    v5 = v4;
    v6 = *(_xpc_connection_s **)(a1 + 40);
    barrier[0] = MEMORY[0x1E0C809B0];
    barrier[1] = 1174405120;
    barrier[2] = ___CTServerConnectionSendBarrier_block_invoke;
    barrier[3] = &__block_descriptor_tmp_28_0;
    object = v4;
    if (v4)
      dispatch_retain(v4);
    xpc_connection_send_barrier(v6, barrier);
    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    if (object)
      dispatch_release(object);
    if (v5)
      dispatch_release(v5);
  }
  return 0;
}

void __copy_helper_block_8_32c25_ZTSN8dispatch9semaphoreE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    dispatch_retain(v3);
}

void __destroy_helper_block_8_32c25_ZTSN8dispatch9semaphoreE(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 32);
  if (v1)
    dispatch_release(v1);
}

unint64_t _CTServerConnectionUnregisterForNotification(uint64_t a1, CFStringRef theString2)
{
  int v3;

  if (!a1)
    return 0x1600000001;
  v3 = sCTEventForNotificationString(theString2);
  if (v3)
    return _CTServerConnectionUnregisterForEvent(a1, v3);
  else
    return 0;
}

unint64_t _CTServerConnectionUnregisterForEvent(uint64_t a1, int a2)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  NSObject *v15;
  uint64_t v16;
  _QWORD v17[5];
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  if (!a1 || !*(_QWORD *)(a1 + 16))
  {
    v6 = 0x1600000000;
LABEL_18:
    LODWORD(v13) = 1;
    return v13 | (unint64_t)v6;
  }
  CCMonitor::instance(&v19);
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 136) == 0;
  else
    v5 = 1;
  v7 = v20;
  if (!v20)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v5)
    {
LABEL_12:
      CCMonitor::instance(&v19);
      v10 = v20;
      if (v20)
      {
        v11 = (unint64_t *)&v20->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v6 = 0x100000000;
      goto LABEL_18;
    }
  }
  else
  {
LABEL_11:
    if (v5)
      goto LABEL_12;
  }
  if (HIDWORD(v13))
  {
    v6 = v13 & 0x1F00000000;
  }
  else
  {
    v15 = *(NSObject **)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 24);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 0x40000000;
    v17[2] = ___CTServerConnectionUnregisterForEvent_block_invoke;
    v17[3] = &__block_descriptor_tmp_29_0;
    v17[4] = v16;
    v18 = a2;
    dispatch_async(v15, v17);
    v6 = 0;
  }
  return v13 | (unint64_t)v6;
}

uint64_t _CTServerConnectionUnregisterForAllNotifications(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int *v13;
  int *v14;
  int v15;
  _QWORD v17[2];
  int *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t block;
  uint64_t v23;
  void (*v24)(uint64_t);
  void *v25;
  _QWORD *v26;

  v21 = a1;
  if (!a1)
  {
    v4 = 0x1600000000;
LABEL_17:
    v11 = 1;
    return v4 | v11;
  }
  CCMonitor::instance(&block);
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 136) == 0;
  else
    v3 = 1;
  v5 = (std::__shared_weak_count *)v23;
  if (!v23)
    goto LABEL_10;
  v6 = (unint64_t *)(v23 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v3)
    {
LABEL_11:
      CCMonitor::instance(&block);
      v8 = (std::__shared_weak_count *)v23;
      if (v23)
      {
        v9 = (unint64_t *)(v23 + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v4 = 0x100000000;
      goto LABEL_17;
    }
  }
  else
  {
LABEL_10:
    if (v3)
      goto LABEL_11;
  }
  v19 = 0;
  v20 = 0;
  v12 = *(NSObject **)(v21 + 16);
  v17[0] = &v21;
  v17[1] = &v18;
  v18 = 0;
  block = MEMORY[0x1E0C809B0];
  v23 = 0x40000000;
  v24 = ___ZN8dispatch9sync_implIZ48_CTServerConnectionUnregisterForAllNotificationsE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
  v25 = &__block_descriptor_tmp_101;
  v26 = v17;
  dispatch_sync(v12, &block);
  v13 = v18;
  v14 = v19;
  if (v18 != v19)
  {
    do
    {
      v15 = *v13++;
    }
    while (v13 != v14);
    v13 = v18;
  }
  if (v13)
  {
    v19 = v13;
    operator delete(v13);
  }
  v11 = 0;
  v4 = 0;
  return v4 | v11;
}

uint64_t `anonymous namespace'::UnregisterClientForEvent(uint64_t a1, int a2)
{
  uint64_t v2;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v12;
  xpc_object_t v14;

  v2 = 0x1600000001;
  if (!a1 || !*(_QWORD *)(a1 + 16))
    return v2;
  if (a2 < -1)
    return 0;
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5)
  {
    v6 = v5;
    v14 = v5;
  }
  else
  {
    v6 = xpc_null_create();
    v14 = v6;
    if (!v6)
      goto LABEL_9;
  }
  if (MEMORY[0x186DBAE5C](v6) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v6);
    v7 = v6;
    goto LABEL_11;
  }
LABEL_9:
  v7 = xpc_null_create();
  v14 = v7;
LABEL_11:
  xpc_release(v6);
  v8 = xpc_string_create("kUnregisterNotification");
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v7, "kRequest", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = xpc_int64_create(a2);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v7, "kEvent", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v2 = SendXpcMessageIf(1, a1, &v14, v12, 0);
  xpc_release(v7);
  return v2;
}

uint64_t _CTServerConnectionGetCommCenterInitializationState(uint64_t a1, BOOL *a2)
{
  uint64_t v2;
  uint64_t v5;
  _BOOL4 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t object;
  xpc_object_t v21;
  std::__shared_weak_count *v22;

  v2 = 0x1600000001;
  if (!a1 || !a2)
    return v2;
  CCMonitor::instance(&v21);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    v6 = *(unsigned __int8 *)(v5 + 136) == 0;
  else
    v6 = 1;
  v7 = v22;
  if (!v22)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v6)
    {
LABEL_11:
      CCMonitor::instance(&v21);
      v10 = v22;
      if (v22)
      {
        v11 = (unint64_t *)&v22->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      *a2 = 0;
      return 0x100000001;
    }
  }
  else
  {
LABEL_10:
    if (v6)
      goto LABEL_11;
  }
  v13 = xpc_dictionary_create(0, 0, 0);
  v14 = MEMORY[0x1E0C812F8];
  if (v13)
  {
    v15 = v13;
    v21 = v13;
  }
  else
  {
    v15 = xpc_null_create();
    v21 = v15;
    if (!v15)
      goto LABEL_22;
  }
  if (MEMORY[0x186DBAE5C](v15) == v14)
  {
    xpc_retain(v15);
    v16 = v15;
    goto LABEL_24;
  }
LABEL_22:
  v16 = xpc_null_create();
  v21 = v16;
LABEL_24:
  xpc_release(v15);
  v17 = xpc_string_create("kPing");
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v16, "kRequest", v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  object = xpc_null_create();
  v2 = SendXpcMessageIf((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 136) != 0) & (sInternalDeadFlag ^ 1u), a1, &v21, &object);
  *a2 = MEMORY[0x186DBAE5C](object) == v14;
  xpc_release(object);
  xpc_release(v16);
  return v2;
}

uint64_t _CTServerConnectionGetXpcConnection(uint64_t result)
{
  if (result)
  {
    if (*(_QWORD *)(result + 16))
      return *(_QWORD *)(result + 40);
    else
      return 0;
  }
  return result;
}

uint64_t _CTServerConnectionIsDefaultConnection(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 32);
  return result;
}

uint64_t SendXpcMessageAsync(uint64_t a1, xpc_object_t *a2, NSObject *a3, void *a4)
{
  uint64_t v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 24) + 136))
    return 0;
  CCMonitor::instance(&v16);
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    v9 = *(_BYTE *)(v8 + 136) == 0;
  else
    v9 = 1;
  v10 = v17;
  if (!v17)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v9)
      return 0;
  }
  else
  {
LABEL_9:
    if (v9)
      return 0;
  }
  v14 = *a2;
  if (v14)
    xpc_retain(v14);
  else
    v14 = xpc_null_create();
  v13 = 1;
  _HandlePrepWorkBeforeSend(a1, 1);
  xpc_connection_send_message_with_reply(*(xpc_connection_t *)(a1 + 40), v14, a3, a4);
  xpc_release(v14);
  return v13;
}

void **xpc::dict::dict(void **a1, void **a2)
{
  void *v3;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
    xpc_retain(v3);
  else
    *a1 = xpc_null_create();
  return a1;
}

void loadBundle(const __CFString *key, os_log_t *a2)
{
  const __CFDictionary *Mutable;
  const void *Value;
  const void *v6;
  CFTypeID TypeID;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex Length;
  char *v17;
  const __CFAllocator *v18;
  void **v19;
  const __CFURL *v20;
  const __CFURL *v21;
  CFBundleRef v22;
  NSObject *v23;
  void **v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p[2];
  uint64_t v35;
  uint8_t buf[4];
  void **v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  Mutable = (const __CFDictionary *)sloadedBundles;
  if (!sloadedBundles)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    sloadedBundles = (uint64_t)Mutable;
  }
  Value = CFDictionaryGetValue(Mutable, key);
  if (Value)
  {
    v6 = Value;
    TypeID = CFBundleGetTypeID();
    if (TypeID == CFGetTypeID(v6))
      return;
    v8 = *a2;
    if (os_log_type_enabled(*a2, OS_LOG_TYPE_ERROR))
      loadBundle(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  Length = CFStringGetLength(key);
  __p[0] = 0;
  __p[1] = 0;
  v35 = 0;
  std::string::basic_string[abi:nn180100](__p, Length + 1, 0);
  if (v35 >= 0)
    v17 = (char *)__p;
  else
    v17 = (char *)__p[0];
  if (CFStringGetCString(key, v17, Length + 1, 0x8000100u))
  {
    v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (v35 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    v20 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v19, Length, 1u);
    if (v20 && (v21 = v20, v22 = CFBundleCreate(v18, v20), CFRelease(v21), v22))
    {
      v23 = *a2;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v24 = __p;
        if (v35 < 0)
          v24 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v37 = v24;
        _os_log_impl(&dword_18425C000, v23, OS_LOG_TYPE_DEFAULT, "#I Successfully loaded bundle %{public}s", buf, 0xCu);
      }
      CFDictionarySetValue((CFMutableDictionaryRef)sloadedBundles, key, v22);
      CFRelease(v22);
    }
    else
    {
      v25 = *a2;
      if (os_log_type_enabled(*a2, OS_LOG_TYPE_ERROR))
        loadBundle((char *)&v35 + 7, __p, v25);
    }
  }
  else
  {
    v26 = *a2;
    if (os_log_type_enabled(*a2, OS_LOG_TYPE_ERROR))
      loadBundle(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);
}

void appendCallNotificationDictionary(const void *a1, int a2, xpc_object_t *a3, CFMutableDictionaryRef *a4)
{
  uint64_t UuidBytes;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  const char *v16;
  const char *p_object;
  char *cStr;
  int v19;
  const void *v20;
  char v21;
  char v22;
  char v23;
  const __CFAllocator *v24;
  CFNumberRef v25;
  int v26;
  const void **v27;
  const char *v28;
  const __CFAllocator *v29;
  const char *v30;
  CFStringRef v31;
  uint64_t v32;
  uint64_t v33;
  xpc_object_t v35[2];
  xpc_object_t v36;
  xpc_object_t __p;
  const char *v38;
  uint64_t v39;
  xpc_object_t object;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  xpc_object_t v46[2];
  uint64_t v47;
  xpc_object_t *valuePtr;
  const char *v49;
  uint64_t v50;

  valuePtr = a3;
  v49 = "kUuid";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, v46);
  UuidBytes = createUuidBytes(v46);
  v32 = v8;
  v33 = UuidBytes;
  xpc_release(v46[0]);
  v46[0] = 0;
  v46[1] = 0;
  v47 = 0;
  v43 = a3;
  v44 = "kPhoneNumber";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v43, &object);
  valuePtr = 0;
  v49 = 0;
  v50 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v50) < 0)
    operator delete(valuePtr);
  xpc_release(object);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  object = a3;
  v41 = "kCallName";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &__p);
  valuePtr = 0;
  v49 = 0;
  v50 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v50) < 0)
    operator delete(valuePtr);
  xpc_release(__p);
  object = 0;
  v41 = 0;
  v42 = 0;
  __p = a3;
  v38 = "kSource";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&__p, v35);
  valuePtr = 0;
  v49 = 0;
  v50 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v50) < 0)
    operator delete(valuePtr);
  xpc_release(v35[0]);
  valuePtr = a3;
  v49 = "kCallStartTime";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, &__p);
  v9 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
  xpc_release(__p);
  valuePtr = a3;
  v49 = "kCallDuration";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, &__p);
  v10 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
  xpc_release(__p);
  valuePtr = a3;
  v49 = "kCallFlags";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, &__p);
  v11 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
  xpc_release(__p);
  valuePtr = a3;
  v49 = "kCallSessionStart";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, &__p);
  v12 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
  xpc_release(__p);
  valuePtr = a3;
  v49 = "kMobileCountryCode";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, &__p);
  v13 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
  xpc_release(__p);
  __p = 0;
  v38 = 0;
  v39 = 0;
  v35[0] = a3;
  v35[1] = "kISOCountryCode";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v35, &v36);
  valuePtr = 0;
  v49 = 0;
  v50 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v50) < 0)
    operator delete(valuePtr);
  xpc_release(v36);
  v14 = a2 - 1;
  if (v47 >= 0)
    v15 = (const char *)v46;
  else
    v15 = (const char *)v46[0];
  if (v45 >= 0)
    v16 = (const char *)&v43;
  else
    v16 = (const char *)v43;
  if (v42 >= 0)
    p_object = (const char *)&object;
  else
    p_object = (const char *)object;
  if (v39 >= 0)
    cStr = (char *)&__p;
  else
    cStr = (char *)__p;
  if (v14 >= 2)
    v19 = 0;
  else
    v19 = v12;
  v20 = (const void *)_CTCallCreateFromCallInfo(a1, v33, v32, v15, v16, p_object, v9, v10, v11, v19, v13, cStr, 1u);
  if (xpc_dictionary_get_value(*a3, "kAudioToneRelayFlag"))
  {
    valuePtr = a3;
    v49 = "kAudioToneRelayFlag";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, v35);
    v21 = xpc::dyn_cast_or_default((xpc *)v35, 0);
    xpc_release(v35[0]);
    CTCallSetAudioToneRelayFlag((uint64_t)v20, v21);
  }
  if (xpc_dictionary_get_value(*a3, "kMobileOriginatedCallEndFlag"))
  {
    valuePtr = a3;
    v49 = "kMobileOriginatedCallEndFlag";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, v35);
    v22 = xpc::dyn_cast_or_default((xpc *)v35, 0);
    xpc_release(v35[0]);
    CTCallSetDeviceOriginatedEndFlag((uint64_t)v20, v22);
  }
  if (xpc_dictionary_get_value(*a3, "kClientNeedsToSetupAudioInterruptions"))
  {
    valuePtr = a3;
    v49 = "kClientNeedsToSetupAudioInterruptions";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, v35);
    v23 = xpc::dyn_cast_or_default((xpc *)v35, 0);
    xpc_release(v35[0]);
    CTCallSetSetupAudioInterruptionFlag((uint64_t)v20, v23);
  }
  if (CFDictionaryContainsValue(*a4, CFSTR("kCTCall")))
    CFDictionaryRemoveValue(*a4, CFSTR("kCTCall"));
  CFDictionarySetValue(*a4, CFSTR("kCTCall"), v20);
  CFRelease(v20);
  v24 = CFGetAllocator(a1);
  LODWORD(valuePtr) = _CTCallGetCallStatusFromFlags(v11, 0);
  v25 = CFNumberCreate(v24, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(*a4, CFSTR("kCTCallStatus"), v25);
  CFRelease(v25);
  if (xpc_dictionary_get_value(*a3, "kIsTheOnlyCall"))
  {
    valuePtr = a3;
    v49 = "kIsTheOnlyCall";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&valuePtr, v35);
    v26 = xpc::dyn_cast_or_default((xpc *)v35, 0);
    xpc_release(v35[0]);
    v27 = (const void **)MEMORY[0x1E0C9AE40];
    if (v26)
      v27 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(*a4, CFSTR("kCTCallIsTheOnlyCall"), *v27);
  }
  v28 = (const char *)HIBYTE(v42);
  if (v42 < 0)
    v28 = v41;
  if (v28 && (v14 < 2 || a2 == 106 || a2 == 104))
  {
    v29 = CFGetAllocator(a1);
    v30 = v42 >= 0 ? (const char *)&object : (const char *)object;
    v31 = CFStringCreateWithCString(v29, v30, 0x8000100u);
    CFDictionarySetValue(*a4, CFSTR("kCTCallSource"), v31);
    if (v31)
      CFRelease(v31);
  }
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  if (SHIBYTE(v42) < 0)
    operator delete(object);
  if (SHIBYTE(v45) < 0)
    operator delete(v43);
  if (SHIBYTE(v47) < 0)
    operator delete(v46[0]);
}

CFStringRef _CTServerConnectionCopyDescription(CFStringRef result)
{
  CFStringRef v1;
  const __CFAllocator *v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetAllocator(result);
    return CFStringCreateWithFormat(v2, 0, CFSTR("<CTServerConnection %p [%p]>"), v1, v2);
  }
  return result;
}

void ___ZL26_CTServerConnectionDestroyPKv_block_invoke_3(uint64_t a1)
{
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
}

xpc_object_t __copy_helper_block_8_32c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_8_32c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

void ___ZL12_XpcCallbackPvP13CTServerState_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 40);
  if (v3 == v2[3])
  {
    if (*(_DWORD *)(v3 + 140) != 2)
      *(_DWORD *)(v3 + 140) = 2;
    _CTServerConnectionReEstablish(v2);
    v4 = **(NSObject ***)(*(_QWORD *)(a1 + 32) + 80);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_18425C000, v4, OS_LOG_TYPE_DEFAULT, "#I Successfully reestablished connection", v5, 2u);
    }
    CFRelease(*(CFTypeRef *)(a1 + 40));
  }
}

void _CTServerConnectionReEstablish(_QWORD *a1)
{
  NSObject *v2;
  _QWORD block[5];

  _CTServerConnectionCleanup((uint64_t)a1);
  CFRetain(a1);
  v2 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL30_CTServerConnectionReEstablishP20__CTServerConnection_block_invoke;
  block[3] = &__block_descriptor_tmp_85;
  block[4] = a1;
  dispatch_async(v2, block);
}

void ___ZL19sHandleNotificationP13CTServerStateN3xpc4dictE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *bytes_ptr;
  int v7;
  __CFString *v8;
  const __CFString *v9;
  uint64_t v10;
  __CFDictionary *MutableCopy;
  const __CFDictionary *v12;
  uint64_t v13;
  const object *v14;
  void **v15;
  void **v16;
  const void *v17;
  const void *v18;
  int64_t v19;
  int64_t v20;
  const char *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  const void *v49;
  xpc_object_t v50;
  uint64_t v51;
  uint64_t v52;
  xpc_object_t reply;
  xpc_object_t v54;
  uint64_t (*v55)(uint64_t);
  const __CFAllocator *v56;
  uint64_t v57;
  void *v58;
  const __CFString *v59;
  size_t count;
  char *v61;
  char *i;
  const __CFString *v63;
  const void *v64;
  int v65;
  const __CFString *SymbolMapping;
  xpc_object_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  xpc_object_t *v70;
  void **v71;
  uint64_t v72;
  const char *v73;
  xpc_object_t v74;
  xpc_object_t v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  _QWORD block[5];
  xpc_object_t v79;
  uint64_t v80;
  CFMutableDictionaryRef v81;
  std::string v82;
  xpc_object_t xdata;
  xpc_object_t p_object;
  const char *v85;
  xpc_object_t object;
  _BYTE __p[1024];
  xpc_object_t v88[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  xpc_object_t v104[2];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _OWORD v120[8];
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24))
  {
    v2 = (_QWORD *)(a1 + 48);
    if (!xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), "kNotificationFlag"))
    {
      if (xpc_dictionary_get_value((xpc_object_t)*v2, "kEvent"))
      {
        *(_QWORD *)__p = v2;
        *(_QWORD *)&__p[8] = "kNotificationEvent";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)__p, v104);
        v7 = xpc::dyn_cast_or_default((xpc *)v104, 0);
        xpc_release(v104[0]);
        v8 = sNotificationStringForCTEvent(v7);
        if (v8)
        {
          v9 = v8;
          p_object = 0;
          *(_QWORD *)__p = v2;
          *(_QWORD *)&__p[8] = "kNotificationDict";
          xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, &p_object);
          v10 = MEMORY[0x186DBAE5C](p_object);
          MutableCopy = 0;
          v12 = 0;
          v13 = MEMORY[0x1E0C812F8];
          if (v10 == MEMORY[0x1E0C812F8])
          {
            v88[0] = p_object;
            if (p_object)
              xpc_retain(p_object);
            else
              v88[0] = xpc_null_create();
            xpc::bridge((xpc *)v88, v14);
            ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(__p, (CFTypeRef *)v104);
            v12 = *(const __CFDictionary **)__p;
            *(_QWORD *)__p = 0;
            if (v104[0])
              CFRelease(v104[0]);
            xpc_release(v88[0]);
            v55 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            if (!v12)
              v55 = 0;
            if (v55)
            {
              v56 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
              MutableCopy = CFDictionaryCreateMutableCopy(v56, 0, v12);
            }
            else
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                ___ZL19sHandleNotificationP13CTServerStateN3xpc4dictE_block_invoke_cold_1((xpc::object *)&p_object);
              MutableCopy = 0;
            }
          }
          object = 0;
          *(_QWORD *)__p = v2;
          *(_QWORD *)&__p[8] = "kNotificationAdditional";
          xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, &object);
          if (MEMORY[0x186DBAE5C](object) == v13)
          {
            xdata = 0;
            *(_QWORD *)__p = &object;
            *(_QWORD *)&__p[8] = "kLoadBundle";
            xpc::dict::object_proxy::operator xpc::array((uint64_t)__p, &xdata);
            if (MEMORY[0x186DBAE5C](xdata) == MEMORY[0x1E0C812C8])
            {
              count = xpc_array_get_count(xdata);
              if (count)
              {
                v61 = (char *)count;
                for (i = 0; i != v61; ++i)
                {
                  v88[1] = 0;
                  v88[0] = 0;
                  *(_QWORD *)&v89 = 0;
                  v104[0] = &xdata;
                  v104[1] = i;
                  xpc::array::object_proxy::operator xpc::object((uint64_t)v104, v120);
                  memset(__p, 0, 24);
                  xpc::dyn_cast_or_default();
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                  xpc_release(*(xpc_object_t *)&v120[0]);
                  if (SBYTE7(v89) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)v88[0], (std::string::size_type)v88[1]);
                  }
                  else
                  {
                    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = *(_OWORD *)v88;
                    v82.__r_.__value_.__r.__words[2] = v89;
                  }
                  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v104, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *(_OWORD *)v104 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
                    *(_QWORD *)&v105 = *((_QWORD *)&v82.__r_.__value_.__l + 2);
                  }
                  if (SBYTE7(v105) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v104[0], (std::string::size_type)v104[1]);
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)v104;
                    *(_QWORD *)&__p[16] = v105;
                  }
                  *(_QWORD *)&v120[0] = 0;
                  if (ctu::cf::convert_copy())
                    v63 = *(const __CFString **)&v120[0];
                  else
                    v63 = 0;
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                  if (SBYTE7(v105) < 0)
                    operator delete(v104[0]);
                  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v82.__r_.__value_.__l.__data_);
                  loadBundle(v63, *(os_log_t **)(*(_QWORD *)(a1 + 32) + 80));
                  if (v63)
                    CFRelease(v63);
                  if (SBYTE7(v89) < 0)
                    operator delete(v88[0]);
                }
              }
            }
            *(_QWORD *)__p = &object;
            *(_QWORD *)&__p[8] = "kCTCallProcessing";
            if (xpc_dictionary_get_value(object, "kCTCallProcessing"))
            {
              v64 = *(const void **)(a1 + 40);
              xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, v104);
              v81 = MutableCopy;
              if (MutableCopy)
              {
                CFRetain(MutableCopy);
                appendCallNotificationDictionary(v64, v7, v104, &v81);
                CFRelease(MutableCopy);
              }
              else
              {
                appendCallNotificationDictionary(v64, v7, v104, &v81);
              }
              xpc_release(v104[0]);
            }
            v104[0] = &object;
            v104[1] = "kCTCallInvalidateCache";
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v104, v88);
            v65 = xpc::dyn_cast_or_default((xpc *)v88, 0);
            xpc_release(v88[0]);
            if (v65)
              _CTCallInvalidateCallCache();
            xpc_release(xdata);
          }
          SymbolMapping = SymbolMapping::getSymbolMapping(v9, v59);
          *(_QWORD *)__p = 0;
          SymbolMapping::mapAllSymbols(MutableCopy, __p);
          CTServerState::sendNotification_sync(*(_QWORD **)(*(_QWORD *)(a1 + 40) + 24), v7, SymbolMapping, *(const void **)__p);
          if (*(_QWORD *)__p)
            CFRelease(*(CFTypeRef *)__p);
          xpc_release(object);
          xpc_release(p_object);
          if (MutableCopy)
            CFRelease(MutableCopy);
          if (v12)
            CFRelease(v12);
        }
      }
      else if (xpc_dictionary_get_value((xpc_object_t)*v2, "kRequest"))
      {
        v104[1] = 0;
        v104[0] = 0;
        *(_QWORD *)&v105 = 0;
        v88[0] = v2;
        v88[1] = "kRequest";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v88, v120);
        memset(__p, 0, 24);
        xpc::dyn_cast_or_default();
        xpc_release(*(xpc_object_t *)&v120[0]);
        v15 = std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer} {__strong})(CTStewieMessageAck *,NSDictionary *)>>>>::find<std::string>(*(_QWORD *)(a1 + 32) + 56, v104);
        if ((void **)(*(_QWORD *)(a1 + 32) + 64) != v15)
        {
          v16 = v15;
          v17 = v15[7];
          v18 = v17 ? _Block_copy(v17) : 0;
          CFRetain(*(CFTypeRef *)(a1 + 40));
          v57 = *(_QWORD *)(a1 + 32);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 1174405120;
          block[2] = ___ZL19sHandleNotificationP13CTServerStateN3xpc4dictE_block_invoke_75;
          block[3] = &__block_descriptor_tmp_76;
          v58 = *(void **)(a1 + 48);
          block[4] = v16;
          v79 = v58;
          if (v58)
            xpc_retain(v58);
          else
            v79 = xpc_null_create();
          v80 = *(_QWORD *)(a1 + 40);
          CTServerState::dispatchToClient_sync(v57, block);
          xpc_release(v79);
          v79 = 0;
          if (v18)
            _Block_release(v18);
        }
        if (SBYTE7(v105) < 0)
          operator delete(v104[0]);
      }
      else if (xpc_dictionary_get_value((xpc_object_t)*v2, "kClientWatchdogPing"))
      {
        v50 = xpc_null_create();
        v104[0] = v50;
        v51 = MEMORY[0x186DBAE5C](*v2);
        v52 = MEMORY[0x1E0C812F8];
        if (v51 == MEMORY[0x1E0C812F8])
        {
          reply = xpc_dictionary_create_reply((xpc_object_t)*v2);
          if ((reply || (reply = xpc_null_create()) != 0) && MEMORY[0x186DBAE5C](reply) == v52)
          {
            xpc_retain(reply);
            v54 = reply;
          }
          else
          {
            v54 = xpc_null_create();
          }
          v67 = xpc_null_create();
          v104[0] = v54;
          xpc_release(v50);
          xpc_release(v67);
          xpc_release(reply);
          v50 = v54;
        }
        *(_QWORD *)__p = 0;
        *(_QWORD *)&__p[8] = 0;
        v68 = MEMORY[0x186DBAE5C](v50);
        v69 = 0;
        v70 = 0;
        if (v68 == v52)
        {
          v71 = (void **)operator new();
          xpc::dict::dict(v71, v104);
          std::shared_ptr<xpc::dict>::reset[abi:nn180100]<xpc::dict,void (*)(xpc::dict*),void>(__p, (uint64_t)v71, MEMORY[0x1E0DE3A70]);
          v70 = *(xpc_object_t **)__p;
          v69 = *(std::__shared_weak_count **)&__p[8];
        }
        xpc_release(v104[0]);
        if (v70 && MEMORY[0x186DBAE5C](*v70) == v52)
        {
          v72 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24);
          if (*(_QWORD *)(v72 + 8))
          {
            v73 = "queue";
          }
          else if (*(_BYTE *)(v72 + 138))
          {
            v73 = "implicit-runloop";
          }
          else if (*(_QWORD *)(v72 + 16))
          {
            v73 = "runloop";
          }
          else
          {
            v73 = "none";
          }
          v74 = xpc_string_create(v73);
          if (!v74)
            v74 = xpc_null_create();
          xpc_dictionary_set_value(*v70, "context", v74);
          v75 = xpc_null_create();
          xpc_release(v74);
          xpc_release(v75);
        }
        if (v69)
        {
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v77 = __ldaxr(p_shared_owners);
          while (__stlxr(v77 - 1, p_shared_owners));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
      }
      goto LABEL_38;
    }
    memset(v120, 0, sizeof(v120));
    v119 = 0u;
    v118 = 0u;
    v117 = 0u;
    v116 = 0u;
    v115 = 0u;
    v114 = 0u;
    v113 = 0u;
    v112 = 0u;
    v111 = 0u;
    v110 = 0u;
    v109 = 0u;
    v108 = 0u;
    v107 = 0u;
    v106 = 0u;
    v105 = 0u;
    *(_OWORD *)v104 = 0u;
    v103 = 0u;
    v102 = 0u;
    v101 = 0u;
    v100 = 0u;
    v99 = 0u;
    v98 = 0u;
    v97 = 0u;
    v96 = 0u;
    v95 = 0u;
    v94 = 0u;
    v93 = 0u;
    v92 = 0u;
    v91 = 0u;
    v90 = 0u;
    v89 = 0u;
    *(_OWORD *)v88 = 0u;
    bzero(__p, 0x400uLL);
    p_object = v2;
    v85 = "kEvent";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &object);
    v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (xpc_dictionary_get_value((xpc_object_t)*v2, "kUuid"))
    {
      v85 = "kUuid";
      object = 0;
      p_object = v2;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &object);
      v4 = 0;
      v5 = 0;
      if (MEMORY[0x186DBAE5C](object) == MEMORY[0x1E0C812E8])
      {
        if (xpc_data_get_length(object) == 16)
        {
          bytes_ptr = (uint64_t *)xpc_data_get_bytes_ptr(object);
          v5 = *bytes_ptr;
          v4 = bytes_ptr[1];
        }
        else
        {
          v4 = 0;
          v5 = 0;
        }
      }
      xpc_release(object);
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    p_object = v2;
    v85 = "kArgs";
    object = 0;
    xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_object, &object);
    v19 = 0;
    if (MEMORY[0x186DBAE5C](object) == MEMORY[0x1E0C812C8])
    {
      v20 = xpc_array_get_count(object);
      v19 = v20 >= 16 ? 16 : v20;
      if (v20 >= 1)
      {
        v21 = 0;
        if (v19 <= 1)
          v22 = 1;
        else
          v22 = v19;
        do
        {
          p_object = &object;
          v85 = v21;
          xpc::array::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
          *((_QWORD *)v120 + (_QWORD)v21) = xpc::dyn_cast_or_default((xpc *)&xdata, 0);
          xpc_release(xdata);
          ++v21;
        }
        while ((const char *)v22 != v21);
      }
    }
    if (xpc_dictionary_get_value((xpc_object_t)*v2, "kStr1"))
    {
      p_object = v2;
      v85 = "kStr1";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
      sAssignString((char *)v104, 0x100uLL, (const object *)&xdata);
    }
    else
    {
      if (!xpc_dictionary_get_value((xpc_object_t)*v2, "kStr1Data"))
      {
LABEL_31:
        if (xpc_dictionary_get_value((xpc_object_t)*v2, "kStr2"))
        {
          p_object = v2;
          v85 = "kStr2";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
          sAssignString((char *)v88, 0x100uLL, (const object *)&xdata);
        }
        else
        {
          if (!xpc_dictionary_get_value((xpc_object_t)*v2, "kStr2Data"))
          {
LABEL_34:
            if (xpc_dictionary_get_value((xpc_object_t)*v2, "kLStr"))
            {
              p_object = v2;
              v85 = "kLStr";
              xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
              sAssignString(__p, 0x400uLL, (const object *)&xdata);
            }
            else
            {
              if (!xpc_dictionary_get_value((xpc_object_t)*v2, "kLStrData"))
                goto LABEL_37;
              xdata = 0;
              p_object = v2;
              v85 = "kLStrData";
              xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
              if (MEMORY[0x186DBAE5C](xdata) == MEMORY[0x1E0C812E8] && xpc_data_get_length(xdata) == 1024)
              {
                v49 = xpc_data_get_bytes_ptr(xdata);
                memcpy(__p, v49, sizeof(__p));
              }
            }
            xpc_release(xdata);
LABEL_37:
            _CTHandleNotification(*(_QWORD ***)(a1 + 40), v3, (uint64_t)v120, v19, v5, v4, (const char *)v104, (const char *)v88, __p);
            xpc_release(object);
LABEL_38:
            CFRelease(*(CFTypeRef *)(a1 + 40));
            return;
          }
          xdata = 0;
          p_object = v2;
          v85 = "kStr2Data";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
          if (MEMORY[0x186DBAE5C](xdata) == MEMORY[0x1E0C812E8] && xpc_data_get_length(xdata) == 256)
          {
            v36 = (__int128 *)xpc_data_get_bytes_ptr(xdata);
            v37 = v36[2];
            v39 = *v36;
            v38 = v36[1];
            v91 = v36[3];
            v90 = v37;
            *(_OWORD *)v88 = v39;
            v89 = v38;
            v40 = v36[6];
            v42 = v36[4];
            v41 = v36[5];
            v95 = v36[7];
            v94 = v40;
            v92 = v42;
            v93 = v41;
            v43 = v36[10];
            v45 = v36[8];
            v44 = v36[9];
            v99 = v36[11];
            v98 = v43;
            v96 = v45;
            v97 = v44;
            v46 = v36[14];
            v48 = v36[12];
            v47 = v36[13];
            v103 = v36[15];
            v102 = v46;
            v100 = v48;
            v101 = v47;
          }
        }
        xpc_release(xdata);
        goto LABEL_34;
      }
      xdata = 0;
      p_object = v2;
      v85 = "kStr1Data";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_object, &xdata);
      if (MEMORY[0x186DBAE5C](xdata) == MEMORY[0x1E0C812E8] && xpc_data_get_length(xdata) == 256)
      {
        v23 = (__int128 *)xpc_data_get_bytes_ptr(xdata);
        v24 = v23[2];
        v26 = *v23;
        v25 = v23[1];
        v107 = v23[3];
        v106 = v24;
        *(_OWORD *)v104 = v26;
        v105 = v25;
        v27 = v23[6];
        v29 = v23[4];
        v28 = v23[5];
        v111 = v23[7];
        v110 = v27;
        v108 = v29;
        v109 = v28;
        v30 = v23[10];
        v32 = v23[8];
        v31 = v23[9];
        v115 = v23[11];
        v114 = v30;
        v112 = v32;
        v113 = v31;
        v33 = v23[14];
        v35 = v23[12];
        v34 = v23[13];
        v119 = v23[15];
        v118 = v33;
        v116 = v35;
        v117 = v34;
      }
    }
    xpc_release(xdata);
    goto LABEL_31;
  }
}

size_t sAssignString(char *a1, size_t a2, const object *a3)
{
  const char *string_ptr;

  if (MEMORY[0x186DBAE5C](a3->fObj) != MEMORY[0x1E0C81350] && MEMORY[0x186DBAE5C](a3->fObj) == MEMORY[0x1E0C81390])
    string_ptr = xpc_string_get_string_ptr(a3->fObj);
  else
    string_ptr = "";
  return strlcpy(a1, string_ptr, a2);
}

void ___ZL19sHandleNotificationP13CTServerStateN3xpc4dictE_block_invoke_75(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t object;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(v3 + 56);
  object = v2;
  if (v2)
    xpc_retain(v2);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(v4 + 16))(v4, &object);
  xpc_release(object);
  object = 0;
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

xpc_object_t __copy_helper_block_8_40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_8_40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void std::shared_ptr<xpc::dict>::reset[abi:nn180100]<xpc::dict,void (*)(xpc::dict*),void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E152D170;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = a3;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void std::__shared_ptr_pointer<xpc::dict *,void (*)(xpc::dict *),std::allocator<xpc::dict>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DBA454);
}

uint64_t std::__shared_ptr_pointer<xpc::dict *,void (*)(xpc::dict *),std::allocator<xpc::dict>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<xpc::dict *,void (*)(xpc::dict *),std::allocator<xpc::dict>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else
    return 0;
}

BOOL std::type_info::operator==[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void ___ZL30_CTServerConnectionReEstablishP20__CTServerConnection_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  void *__p;
  std::__shared_weak_count *v16;
  char v17;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      *(_BYTE *)(v3 + 137) = 0;
      if (*(_DWORD *)(v3 + 140) != 1)
        *(_DWORD *)(v3 + 140) = 1;
      _CTServerConnectionCheckIn(v2);
      {
        CCMonitor::instance(&__p);
        v4 = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
      }
    }
  }
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(v7 + 24) + 56;
  std::string::basic_string[abi:nn180100]<0>(&__p, "kIncomingCallCheckMessageRequest");
  v9 = std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::__count_unique<std::string>(v8, &__p);
  if (v17 < 0)
    operator delete(__p);
  if (v9)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&__p);
    xpc::dict_creator::operator()<char const*>("kCallEnableSilentHours", &__p, "kRequest", &v14);
    xpc_release(__p);
    v10 = v14;
    __p = v14;
    v14 = xpc_null_create();
    xpc_release(v14);
    v11 = xpc_BOOL_create(1);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v10, "kEnabled", v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    SendXpcMessageIf(*(unsigned __int8 *)(*(_QWORD *)(v7 + 24) + 136), v7, &__p, v13, 1);
    xpc_release(v10);
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict)>>>>::__count_unique<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  uint64_t v4;

  v2 = *(void ***)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v2 + 4) & 0x80) == 0)
      {
        if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v2 + 4, a2) & 0x80) == 0)
          return v4;
        ++v2;
      }
      v2 = (void **)*v2;
    }
    while (v2);
  }
  return 0;
}

void ___ZL19DispatchReEstablishP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  _QWORD block[7];

  if (MEMORY[0x186DBAE5C](**(_QWORD **)(a1 + 32)) == MEMORY[0x1E0C812E0])
  {
    v2 = 0;
  }
  else
  {
    _CTServerConnectXpc_sync(*(xpc_connection_t **)(a1 + 32), *(NSObject **)(a1 + 40), 0);
    v2 = **(void ***)(a1 + 32);
    xpc_retain(v2);
  }
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(uint64_t **)(v3 + 40);
  if (!v4)
    goto LABEL_12;
  while (1)
  {
    v5 = *((_DWORD *)v4 + 8);
    if (v5 <= -3)
      break;
LABEL_8:
    v4 = (uint64_t *)*v4;
    if (!v4)
      goto LABEL_12;
  }
  if (v5 != -3)
  {
    ++v4;
    goto LABEL_8;
  }
  if (*(_BYTE *)(v3 + 136))
  {
    CTServerState::sendNotification_sync((_QWORD *)v3, -3, CFSTR("kCTDaemonReadyNotification"), 0);
    v3 = *(_QWORD *)(a1 + 32);
  }
LABEL_12:
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL19DispatchReEstablishP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke_2;
  block[3] = &__block_descriptor_tmp_93;
  v6 = *(_QWORD *)(a1 + 48);
  block[4] = v2;
  block[5] = v6;
  block[6] = v3;
  CTServerState::dispatchToClient_sync(v3, block);
}

void ___ZL19DispatchReEstablishP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    if (v4)
      xpc_release(v4);
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_6;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 137))
  {
LABEL_6:
    _CTServerConnectionReEstablish(*(_QWORD **)(a1 + 40));
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + 137) = 0;
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void std::__shared_ptr_pointer<CCMonitor *,std::shared_ptr<CCMonitor>::__shared_ptr_default_delete<CCMonitor,CCMonitor>,std::allocator<CCMonitor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DBA454);
}

dispatch_object_t *std::__shared_ptr_pointer<CCMonitor *,std::shared_ptr<CCMonitor>::__shared_ptr_default_delete<CCMonitor,CCMonitor>,std::allocator<CCMonitor>>::__on_zero_shared(uint64_t a1)
{
  dispatch_object_t *result;

  result = *(dispatch_object_t **)(a1 + 24);
  if (result)
  {
    CCMonitor::~CCMonitor(result);
    JUMPOUT(0x186DBA454);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CCMonitor *,std::shared_ptr<CCMonitor>::__shared_ptr_default_delete<CCMonitor,CCMonitor>,std::allocator<CCMonitor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void dispatch::async<CCMonitor::initialize(void)::$_0>(dispatch_queue_s *,std::unique_ptr<CCMonitor::initialize(void)::$_0,std::default_delete<CCMonitor::initialize(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  CCMonitor::instance(&v5);
  v2 = v6;
  if (!v6)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (a1)
LABEL_9:
      JUMPOUT(0x186DBA454);
  }
  else
  {
LABEL_5:
    if (a1)
      goto LABEL_9;
  }
}

uint64_t std::unique_ptr<ctu::OsLogLogger>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x186DBA1B4]();
    JUMPOUT(0x186DBA454);
  }
  return result;
}

void ___ZN8dispatch9sync_implIZ48_CTServerConnectionUnregisterForAllNotificationsE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)*v1 + 24);
  v3 = *(_QWORD **)(v2 + 32);
  if (v3 != (_QWORD *)(v2 + 40))
  {
    do
    {
      v4 = v1[1];
      v5 = *(_DWORD **)(v4 + 8);
      v6 = *(_QWORD *)(v4 + 16);
      if ((unint64_t)v5 >= v6)
      {
        v8 = *(_DWORD **)v4;
        v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          abort();
        v11 = v6 - (_QWORD)v8;
        if (v11 >> 1 > v10)
          v10 = v11 >> 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v4 + 16, v12);
          v8 = *(_DWORD **)v4;
          v5 = *(_DWORD **)(v4 + 8);
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[4 * v9];
        *(_DWORD *)v14 = *((_DWORD *)v3 + 8);
        v7 = v14 + 4;
        while (v5 != v8)
        {
          v15 = *--v5;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }
        *(_QWORD *)v4 = v14;
        *(_QWORD *)(v4 + 8) = v7;
        *(_QWORD *)(v4 + 16) = &v13[4 * v12];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v5 = *((_DWORD *)v3 + 8);
        v7 = v5 + 1;
      }
      *(_QWORD *)(v4 + 8) = v7;
      v16 = (_QWORD *)v3[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v3[2];
          v18 = *v17 == (_QWORD)v3;
          v3 = v17;
        }
        while (!v18);
      }
      v3 = v17;
    }
    while (v17 != (_QWORD *)(v2 + 40));
    v2 = *(_QWORD *)(*(_QWORD *)*v1 + 24);
  }
  v20 = *(_QWORD **)(v2 + 40);
  v19 = (_QWORD *)(v2 + 40);
  std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::destroy((uint64_t)(v19 - 1), v20);
  *(v19 - 1) = v19;
  *v19 = 0;
  v19[1] = 0;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a2);
}

uint64_t std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::__erase_unique<int>(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::erase((uint64_t **)a1, (uint64_t *)v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::__map_value_compare<int,std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>,std::less<int>,true>,std::allocator<std::__value_type<int,dispatch::block<void({block_pointer})(__CFDictionary const*)>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  const void *v4;

  v3 = std::__tree<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::__map_value_compare<__CTAssertionType *,std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>,std::less<__CTAssertionType *>,true>,std::allocator<std::__value_type<__CTAssertionType *,std::pair<dispatch::queue,void({block_pointer} {__strong})(NSError *)>>>>::__remove_node_pointer(a1, a2);
  v4 = (const void *)a2[5];
  if (v4)
    _Block_release(v4);
  operator delete(a2);
  return v3;
}

void OUTLINED_FUNCTION_1_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, 0, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t _CTServerConnectionCopyCellBroadcastAlertTypes(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t xdict;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSmsCopyCellBroadcastAlertTypes", &object, "kRequest", &xdict);
    xpc_release(object);
    object = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kSmsCellBroadcastAlertTypes"))
    {
      v7 = 0;
      xpc_dictionary_get_value(xdict, "kSmsCellBroadcastAlertTypes");
      v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v7, (CFTypeRef *)&v6);
      *a2 = v7;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyCellBroadcastAlertTypesForAllSIMSlots(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t xdict;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSmsCopyCellBroadcastAlertTypesForAllSIMSlots", &object, "kRequest", &xdict);
    xpc_release(object);
    object = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      if (xpc_dictionary_get_value(xdict, "kSmsCellBroadcastAlertTypesForAllSIMSlots"))
      {
        v7 = 0;
        xpc_dictionary_get_value(xdict, "kSmsCellBroadcastAlertTypesForAllSIMSlots");
        v6 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(&v7, (CFTypeRef *)&v6);
        *a2 = v7;
      }
      else if (!xpc_dictionary_get_value(xdict, "kDidSucceed"))
      {
        v2 = 0x1300000001;
      }
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionGetCellBroadcastSettingForAlertType(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v4;
  xpc_object_t v8;
  void *v9;
  xpc_object_t v10;
  xpc_object_t object;
  const char *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;

  v4 = 0x1600000001;
  if (a1 && a2 && a3 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSmsGetCellBroadcastSettingForAlertType", &object, "kRequest", &v15);
    xpc_release(object);
    v8 = v15;
    v16 = v15;
    v15 = xpc_null_create();
    xpc_release(v15);
    v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kSmsCellBroadcastAlertTypes", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v15 = xpc_null_create();
    v4 = SendXpcMessage(a1, &v16, &v15);
    *a3 = 0;
    *a4 = 0;
    if (MEMORY[0x186DBAE5C](v15) == MEMORY[0x1E0C812F8])
    {
      object = &v15;
      v13 = "kSmsCellBroadcastEnabled";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v14);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v14, 0);
      xpc_release(v14);
      object = &v15;
      v13 = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v14);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v14, 0);
      xpc_release(v14);
    }
    xpc_release(v15);
    xpc_release(v16);
  }
  return v4;
}

uint64_t _CTServerConnectionGetAutoReadOutSetting(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3;
  xpc_object_t object;
  const char *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kGetAutoReadOutSetting", &object, "kRequest", &v11);
    xpc_release(object);
    v12 = v11;
    v11 = xpc_null_create();
    xpc_release(v11);
    v11 = xpc_null_create();
    v3 = SendXpcMessage(a1, &v12, &v11);
    *a2 = 0;
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](v11) == MEMORY[0x1E0C812F8])
    {
      object = &v11;
      v9 = "kAutoReadOutEnabled";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
      object = &v11;
      v9 = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v10, 0);
      xpc_release(v10);
    }
    xpc_release(v11);
    xpc_release(v12);
  }
  return v3;
}

uint64_t _CTServerConnectionSetCellBroadcastSettingForAlertType(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t v4;
  xpc_object_t v8;
  void *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t object[2];
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;

  v4 = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsSetCellBroadcastSettingForAlertType", object, "kRequest", &v16);
    xpc_release(object[0]);
    v8 = v16;
    v17 = v16;
    v16 = xpc_null_create();
    xpc_release(v16);
    v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kSmsCellBroadcastAlertTypes", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v11 = xpc_BOOL_create(a3 == 1);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kSmsCellBroadcastEnabled", v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    v16 = xpc_null_create();
    v4 = SendXpcMessage(a1, &v17, &v16);
    *a4 = 0;
    if (MEMORY[0x186DBAE5C](v16) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v16;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v15);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v15, 0);
      xpc_release(v15);
    }
    xpc_release(v16);
    xpc_release(v17);
  }
  return v4;
}

uint64_t _CTServerConnectionSetAutoReadOutSetting(uint64_t a1, int a2, _BYTE *a3)
{
  uint64_t v3;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t object[2];
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;

  v3 = 0x1600000001;
  if (a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSetAutoReadOutSetting", object, "kRequest", &v13);
    xpc_release(object[0]);
    v7 = v13;
    v14 = v13;
    v13 = xpc_null_create();
    xpc_release(v13);
    v8 = xpc_BOOL_create(a2 == 1);
    if (!v8)
      v8 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kAutoReadOutEnabled", v8);
    v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    v13 = xpc_null_create();
    v3 = SendXpcMessage(a1, &v14, &v13);
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](v13) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v13;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v12, 0);
      xpc_release(v12);
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  return v3;
}

uint64_t _CTServerConnectionSendAppleSafetyAlert(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  xpc_object_t object[2];
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSendAppleSafetyAlert", object, "kRequest", &v12);
    xpc_release(object[0]);
    v6 = v12;
    v13 = v12;
    v12 = xpc_null_create();
    xpc_release(v12);
    v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v6, "kAppleSafetyAlertContent", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v12 = xpc_null_create();
    v3 = SendXpcMessage(a1, &v13, &v12);
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](v12) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v12;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
    }
    xpc_release(v12);
    xpc_release(v13);
  }
  return v3;
}

uint64_t _CTServerConnectionGetCellBroadcastConfig(uint64_t a1, xpc_object_t *a2, _BYTE *a3)
{
  uint64_t v3;
  xpc_object_t object[2];
  xpc_object_t v9;
  xpc_object_t xdict;
  xpc_object_t v11;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsGetCellBroadcastConfig", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v11 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v11, &xdict);
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      object[0] = &xdict;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
      xpc_release(v9);
    }
    object[0] = 0;
    xpc_dictionary_get_value(xdict, "kSmsCellBroadcastConfigContent");
    v9 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
    ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v9);
    *a2 = object[0];
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v3;
}

uint64_t _CTServerConnectionSetCellBroadcastCustomPrefForAlertType(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  xpc_object_t object[2];
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsSetCellBroadcastCustomSettingsForAlertType", object, "kRequest", &v12);
    xpc_release(object[0]);
    v6 = v12;
    v13 = v12;
    v12 = xpc_null_create();
    xpc_release(v12);
    v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v6, "kSmsSetCellBroadcastCustomSettings", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v12 = xpc_null_create();
    v3 = SendXpcMessage(a1, &v13, &v12);
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](v12) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v12;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
    }
    xpc_release(v12);
    xpc_release(v13);
  }
  return v3;
}

uint64_t _CTServerConnectionGetCellBroadcastCustomPrefForAlertType(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t v4;
  xpc_object_t v8;
  void *v9;
  xpc_object_t v10;
  xpc_object_t object[2];
  xpc_object_t v13;
  xpc_object_t xdict;
  xpc_object_t v15;

  v4 = 0x1600000001;
  if (a3 && a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsGetCellBroadcastCustomSettingsForAlertType", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v8 = xdict;
    v15 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kSmsGetCellBroadcastCustomSettings", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xdict = xpc_null_create();
    v4 = SendXpcMessage(a1, &v15, &xdict);
    *a4 = 0;
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kSmsCellBroadcastCustomSettingsResponse"))
    {
      object[0] = &xdict;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v13);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v13, 0);
      xpc_release(v13);
      object[0] = 0;
      xpc_dictionary_get_value(xdict, "kSmsCellBroadcastCustomSettingsResponse");
      v13 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v13);
      *a3 = object[0];
    }
    xpc_release(xdict);
    xpc_release(v15);
  }
  return v4;
}

uint64_t _CTServerConnectionSendSafetyAlertCustomCommand(uint64_t a1, uint64_t a2, xpc_object_t *a3, _BYTE *a4)
{
  uint64_t v4;
  xpc_object_t v8;
  void *v9;
  xpc_object_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  xpc_object_t object[2];
  xpc_object_t v21;
  xpc_object_t xdict;
  xpc_object_t v23;

  v4 = 0x1600000001;
  if (a3 && a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsEarlyGeofenceCommandRequest", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v8 = xdict;
    v23 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kSmsEarlyGeofenceCommandRequest", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xdict = xpc_null_create();
    v4 = SendXpcMessage(a1, &v23, &xdict);
    *a4 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kSmsEarlyGeofenceCommandResponse"))
    {
      object[0] = &xdict;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v21);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v21, 0);
      xpc_release(v21);
      object[0] = 0;
      xpc_dictionary_get_value(xdict, "kSmsEarlyGeofenceCommandResponse");
      v21 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v21);
      *a3 = object[0];
    }
    else
    {
      v11 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v11)
        _CTServerConnectionSendSafetyAlertCustomCommand_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    xpc_release(xdict);
    xpc_release(v23);
  }
  return v4;
}

uint64_t _CTServerConnectionGetCellBroadcastOverrideAccessibilityVibrationSetting(uint64_t a1, Boolean *a2, _BYTE *a3)
{
  uint64_t v3;
  xpc_object_t v7;
  uint64_t (*v8)(uint64_t);
  xpc_object_t object[2];
  xpc_object_t v11;
  xpc_object_t xdict;
  xpc_object_t v13;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsGetCellBroadcastOverrideAccessibilityVibrationSettingRequest", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v13 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v13, &xdict);
    *a3 = 0;
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kSmsGetCellBroadcastOverrideAccessibilityVibrationSettingResponse"))
    {
      object[0] = &xdict;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
      object[0] = 0;
      xpc_dictionary_get_value(xdict, "kSmsGetCellBroadcastOverrideAccessibilityVibrationSettingResponse");
      v11 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFBoolean const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v11);
      v7 = object[0];
      v8 = ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::get;
      if (!object[0])
        v8 = 0;
      if (v8)
      {
        *a2 = CFBooleanGetValue((CFBooleanRef)object[0]);
        v7 = object[0];
      }
      if (v7)
        CFRelease(v7);
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v3;
}

uint64_t ctu::SharedRef<__CFBoolean const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFBoolean const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t _CTServerConnectionSelfTestCommand(uint64_t a1, uint64_t a2, xpc_object_t *a3, _BYTE *a4)
{
  uint64_t v4;
  xpc_object_t v8;
  void *v9;
  xpc_object_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  xpc_object_t object[2];
  xpc_object_t v21;
  xpc_object_t xdict;
  xpc_object_t v23;

  v4 = 0x1600000001;
  if (a3 && a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsCellBroadcastSelfTestRequest", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v8 = xdict;
    v23 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kSmsCellBroadcastSelfTestRequest", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    xdict = xpc_null_create();
    v4 = SendXpcMessage(a1, &v23, &xdict);
    *a4 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kSmsCellBroadcastSelfTestResponse"))
    {
      object[0] = &xdict;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v21);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v21, 0);
      xpc_release(v21);
      object[0] = 0;
      xpc_dictionary_get_value(xdict, "kSmsCellBroadcastSelfTestResponse");
      v21 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v21);
      *a3 = object[0];
    }
    else
    {
      v11 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v11)
        _CTServerConnectionSelfTestCommand_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    xpc_release(xdict);
    xpc_release(v23);
  }
  return v4;
}

uint64_t _CTServerConnectionGetTestModeFunction()
{
  return 0x2D00000001;
}

uint64_t _CTServerConnectionSetTestModeFunction()
{
  return 0x2D00000001;
}

uint64_t _CTServerConnectionInjectCellBroadcastMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  xpc_object_t v8;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kInjectCellBroadcastMessage", &object, "kRequest", &v8);
    xpc_release(object);
    v4 = v8;
    object = v8;
    v8 = xpc_null_create();
    xpc_release(v8);
    v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kInjectCellBroadcastMessage", v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    v8 = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &v8);
    xpc_release(v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionInjectCellBroadcastMessageWithWac(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kInjectCellBroadcastMessage", &object, "kRequest", &v10);
    xpc_release(object);
    v4 = v10;
    object = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kInjectCellBroadcastMessage", v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kInjectWacString", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &v10);
    xpc_release(v10);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionInjectOOSGeofence(uint64_t a1, uint64_t a2)
{
  xpc_object_t v3;
  void *v4;
  xpc_object_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t v16;
  xpc_object_t object;

  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kInjectOOSGeofence", &object, "kRequest", &v16);
    xpc_release(object);
    v3 = v16;
    object = v16;
    v16 = xpc_null_create();
    xpc_release(v16);
    v4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v4)
      v4 = xpc_null_create();
    xpc_dictionary_set_value(v3, "kInjectOOSGeofence", v4);
    v5 = xpc_null_create();
    xpc_release(v4);
    xpc_release(v5);
    v16 = xpc_null_create();
    v6 = SendXpcMessage(a1, &object, &v16);
    xpc_release(v16);
    xpc_release(object);
  }
  else
  {
    v6 = 0x1600000001;
    v7 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v7)
      _CTServerConnectionInjectOOSGeofence_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  return v6;
}

uint64_t _CTServerConnectionIsPhoneNumberRegistrationSupported(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v7;
  xpc_object_t xdict;
  xpc_object_t v9;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSmsIsPhoneNumberRegistrationSupported", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v9 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v9, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kSmsPhoneNumberRegistrationIsSupported"))
    {
      object[0] = &xdict;
      object[1] = "kSmsPhoneNumberRegistrationIsSupported";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    xpc_release(xdict);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionGetVoiceMailAvailable(const void *a1, _BYTE *a2, _BYTE *a3, _DWORD *a4, CFURLRef *a5)
{
  uint64_t v5;
  CFIndex v11;
  char v12;
  const __CFAllocator *v13;
  const UInt8 *p_p;
  CFIndex v15;
  _QWORD v17[2];
  xpc_object_t v18;
  xpc_object_t __p;
  CFIndex v20;
  uint64_t v21;
  xpc_object_t xdict;
  xpc_object_t v23;
  xpc_object_t object;
  const char *v25;
  uint64_t v26;

  v5 = 0x1600000001;
  if (a1 && a2 && a3 && a4 && a5)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kGetVoicemailCount", &object, "kRequest", &__p);
    xpc_release(object);
    v23 = __p;
    __p = xpc_null_create();
    xpc_release(__p);
    xdict = xpc_null_create();
    v5 = SendXpcMessage((uint64_t)a1, &v23, &xdict);
    *a2 = 1;
    *a3 = 0;
    *a4 = 0;
    *a5 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      object = &xdict;
      v25 = "kVoicemailAvailable";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &__p);
      *a2 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
      xpc_release(__p);
      if (xpc_dictionary_get_value(xdict, "kVoicemailCount"))
      {
        *a3 = 1;
        object = &xdict;
        v25 = "kVoicemailCount";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &__p);
        *a4 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
        xpc_release(__p);
      }
      __p = 0;
      v20 = 0;
      v21 = 0;
      v17[0] = &xdict;
      v17[1] = "kVoicemailUrl";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v17, &v18);
      object = 0;
      v25 = 0;
      v26 = 0;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v26) < 0)
        operator delete(object);
      xpc_release(v18);
      v11 = HIBYTE(v21);
      v12 = HIBYTE(v21);
      if (v21 < 0)
        v11 = v20;
      if (v11)
      {
        v13 = CFGetAllocator(a1);
        if (v21 >= 0)
          p_p = (const UInt8 *)&__p;
        else
          p_p = (const UInt8 *)__p;
        if (v21 >= 0)
          v15 = HIBYTE(v21);
        else
          v15 = v20;
        *a5 = CFURLCreateWithBytes(v13, p_p, v15, 0x8000100u, 0);
        v12 = HIBYTE(v21);
      }
      if (v12 < 0)
        operator delete(__p);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      _CTServerConnectionGetVoiceMailAvailable_cold_1(SHIDWORD(v5), v5);
    }
    xpc_release(xdict);
    xpc_release(v23);
  }
  return v5;
}

const char *CTQoSDirectionAsString(unint64_t a1)
{
  if (a1 > 2)
    return "???";
  else
    return off_1E1532DD0[a1];
}

const char *CTSimHardwareTypeAsString(uint64_t a1)
{
  const char *v1;

  v1 = "CTSimHardwareTypeUnknown";
  if (a1 == 1)
    v1 = "CTSimHardwareTypePhysical";
  if (a1 == 2)
    return "CTSimHardwareTypeDigital";
  else
    return v1;
}

const char *CTSimLocationAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return "CTSimLocationUnknown";
  else
    return off_1E1532DE8[a1 - 1];
}

uint64_t _CTServerConnectionGetPacketContextCount(uint64_t a1, int *a2)
{
  uint64_t v2;
  NSObject *v5;
  int v6;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t object;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v13 = "kPacketContextCount";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &v10);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object = &v10;
      v13 = "kPacketContextCount";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      xpc_release(v8);
    }
    v5 = CTLogPacket();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a2;
      LODWORD(object) = 67109120;
      HIDWORD(object) = v6;
      _os_log_impl(&dword_18425C000, v5, OS_LOG_TYPE_DEFAULT, "Called _CTServerConnectionGetPacketContextCount(): count = %d", (uint8_t *)&object, 8u);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetEMBMSStatus(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kGetEMBMSStatus", object, "kRequest", &v10);
  xpc_release(object[0]);
  v11 = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v10 = xpc_null_create();
  v4 = SendXpcMessage(a1, &v11, &v10);
  if (a2)
    *a2 = 0;
  v5 = MEMORY[0x186DBAE5C](v10);
  if (a2 && v5 == MEMORY[0x1E0C812F8])
  {
    object[0] = &v10;
    object[1] = "kEMBMSStatus";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
    *a2 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
    xpc_release(v9);
  }
  v6 = CTLogPacket();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v7 = *a2;
    else
      v7 = -1;
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v7;
    _os_log_impl(&dword_18425C000, v6, OS_LOG_TYPE_DEFAULT, "Called _CTServerConnectionGetEMBMSStatus(): status = %d", (uint8_t *)object, 8u);
  }
  xpc_release(v10);
  xpc_release(v11);
  return v4;
}

uint64_t _CTServerConnectionGetEMBMSSigInfo(uint64_t a1, NSObject *a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t result;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  NSObject *v16;
  int v17;
  _QWORD v18[5];
  uint8_t buf[8];
  xpc_object_t object;

  result = 0x1600000001;
  if (a1 && a2 && a5)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kGetEMBMSSigInfo", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    v11 = *(xpc_object_t *)buf;
    object = *(xpc_object_t *)buf;
    *(_QWORD *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    v12 = xpc_int64_create(a3);
    if (!v12)
      v12 = xpc_null_create();
    xpc_dictionary_set_value(v11, "kEMBMSServiceType", v12);
    v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    v14 = xpc_int64_create(a4);
    if (!v14)
      v14 = xpc_null_create();
    xpc_dictionary_set_value(v11, "kEMBMSEarfcn", v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    v16 = CTLogPacket();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18425C000, v16, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetEMBMSSigInfo()", buf, 2u);
    }
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = ___CTServerConnectionGetEMBMSSigInfo_block_invoke;
    v18[3] = &unk_1E152D398;
    v18[4] = a5;
    v17 = SendXpcMessageAsync(a1, &object, a2, v18);
    xpc_release(object);
    if (v17)
      return 0;
    else
      return 0x500000002;
  }
  return result;
}

uint64_t _CTServerConnectionGetEMBMSSAIListInfo(uint64_t a1, NSObject *a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  NSObject *v12;
  int v13;
  _QWORD v14[5];
  uint8_t buf[8];
  xpc_object_t object;

  result = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kGetEMBMSSAIListInfo", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    v9 = *(xpc_object_t *)buf;
    object = *(xpc_object_t *)buf;
    *(_QWORD *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    v10 = xpc_int64_create(a3);
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kEMBMSSAIType", v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    v12 = CTLogPacket();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18425C000, v12, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetEMBMSSAIListInfo()", buf, 2u);
    }
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 0x40000000;
    v14[2] = ___CTServerConnectionGetEMBMSSAIListInfo_block_invoke;
    v14[3] = &unk_1E1532E18;
    v14[4] = a4;
    v13 = SendXpcMessageAsync(a1, &object, a2, v14);
    xpc_release(object);
    if (v13)
      return 0;
    else
      return 0x500000002;
  }
  return result;
}

uint64_t _CTServerConnectionSetEMBMSSAIInterestedInfo(uint64_t a1, NSObject *a2, ctu *a3, uint64_t a4)
{
  uint64_t result;
  xpc_object_t v9;
  const void *v10;
  xpc_object_t v11;
  NSObject *v12;
  int v13;
  _QWORD v14[5];
  xpc_object_t value;
  uint8_t buf[8];
  xpc_object_t object;

  result = 0x1600000001;
  if (a1 && a2 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSetEMBMSSAIInterestedInfo", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    v9 = *(xpc_object_t *)buf;
    object = *(xpc_object_t *)buf;
    *(_QWORD *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    ctu::cf_to_xpc(a3, v10);
    xpc_dictionary_set_value(v9, "kEMBMSSAIInterestedInfo", value);
    v11 = value;
    value = xpc_null_create();
    xpc_release(v11);
    xpc_release(value);
    value = 0;
    v12 = CTLogPacket();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18425C000, v12, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetEMBMSSAIInterestedInfo()", buf, 2u);
    }
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 0x40000000;
    v14[2] = ___CTServerConnectionSetEMBMSSAIInterestedInfo_block_invoke;
    v14[3] = &unk_1E1532E40;
    v14[4] = a4;
    v13 = SendXpcMessageAsync(a1, &object, a2, v14);
    xpc_release(object);
    if (v13)
      return 0;
    else
      return 0x500000002;
  }
  return result;
}

uint64_t _CTServerConnectionSetEMBMSActive(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t object;
  uint8_t buf[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSetEMBMSActive", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  v4 = *(xpc_object_t *)buf;
  object = *(xpc_object_t *)buf;
  *(_QWORD *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kEMBMSStatus", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_18425C000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetEMBMSActive() active = %d", buf, 8u);
  }
  v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerConnectionCopyPacketContextInterfaceName(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  xpc_object_t *v11;
  xpc_object_t __p[2];
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t xdict;
  xpc_object_t v17;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v3 = 0x1600000001;
  if (a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketContextName", object, "kRequest", __p);
    xpc_release(object[0]);
    v7 = __p[0];
    v17 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    v8 = xpc_int64_create(a2);
    if (!v8)
      v8 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kPacketContextIdentifer", v8);
    v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v17, &xdict);
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kPacketContextName"))
    {
      __p[0] = 0;
      object[0] = &xdict;
      object[1] = "kPacketContextName";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      object[0] = 0;
      v15 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(object, (CFTypeRef *)&v15);
      *a3 = object[0];
      xpc_release(__p[0]);
    }
    v10 = CTLogPacket();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (*a3)
      {
        memset(object, 0, 24);
        ctu::cf::assign();
        *(_OWORD *)__p = *(_OWORD *)object;
        v14 = object[2];
        v11 = __p;
        if (SHIBYTE(object[2]) < 0)
          v11 = (xpc_object_t *)object[0];
        LODWORD(object[0]) = 67109378;
        HIDWORD(object[0]) = a2;
        LOWORD(object[1]) = 2080;
        *(xpc_object_t *)((char *)&object[1] + 2) = v11;
        _os_log_impl(&dword_18425C000, v10, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCopyPacketContextInterfaceName() for %d: name = %s", (uint8_t *)object, 0x12u);
        if (SHIBYTE(v14) < 0)
          operator delete(__p[0]);
      }
      else
      {
        LODWORD(object[0]) = 67109378;
        HIDWORD(object[0]) = a2;
        LOWORD(object[1]) = 2080;
        *(xpc_object_t *)((char *)&object[1] + 2) = "";
        _os_log_impl(&dword_18425C000, v10, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCopyPacketContextInterfaceName() for %d: name = %s", (uint8_t *)object, 0x12u);
      }
    }
    xpc_release(xdict);
    xpc_release(v17);
  }
  return v3;
}

uint64_t _CTServerConnectionCopyPacketContextInterfaceNameByServiceType(uint64_t a1, __CFString *a2, _QWORD *a3)
{
  unint64_t ConnectionMaskType;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  NSObject *v12;
  xpc_object_t *v13;
  void **v14;
  void *__p[2];
  xpc_object_t v17;
  xpc_object_t v18[2];
  xpc_object_t v19;
  xpc_object_t xdict;
  xpc_object_t v21;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  ConnectionMaskType = getConnectionMaskType(a2);
  v7 = 0x1600000001;
  if (a3)
  {
    if (a1)
    {
      v8 = ConnectionMaskType;
      if (ConnectionMaskType)
      {
        xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
        xpc::dict_creator::operator()<char const*>("kPacketContextName", object, "kRequest", v18);
        xpc_release(object[0]);
        v9 = v18[0];
        v21 = v18[0];
        v18[0] = xpc_null_create();
        xpc_release(v18[0]);
        v10 = xpc_uint64_create(v8);
        if (!v10)
          v10 = xpc_null_create();
        xpc_dictionary_set_value(v9, "kPacketServiceType", v10);
        v11 = xpc_null_create();
        xpc_release(v10);
        xpc_release(v11);
        xdict = xpc_null_create();
        v7 = SendXpcMessage(a1, &v21, &xdict);
        *a3 = 0;
        if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kPacketContextName"))
        {
          v18[0] = 0;
          object[0] = &xdict;
          object[1] = "kPacketContextName";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v18);
          object[0] = 0;
          __p[0] = (void *)_CFXPCCreateCFObjectFromXPCObject();
          ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(object, (CFTypeRef *)__p);
          *a3 = object[0];
          xpc_release(v18[0]);
        }
        v12 = CTLogPacket();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          if (a2)
          {
            memset(object, 0, 24);
            ctu::cf::assign();
            *(_OWORD *)v18 = *(_OWORD *)object;
            v19 = object[2];
            if (SHIBYTE(object[2]) >= 0)
              v13 = v18;
            else
              v13 = (xpc_object_t *)object[0];
          }
          else
          {
            v13 = (xpc_object_t *)"";
          }
          if (*a3)
          {
            memset(object, 0, 24);
            ctu::cf::assign();
            *(_OWORD *)__p = *(_OWORD *)object;
            v17 = object[2];
            v14 = __p;
            if (SHIBYTE(object[2]) < 0)
              v14 = (void **)object[0];
            LODWORD(object[0]) = 136315394;
            *(xpc_object_t *)((char *)object + 4) = v13;
            WORD2(object[1]) = 2080;
            *(xpc_object_t *)((char *)&object[1] + 6) = v14;
            _os_log_impl(&dword_18425C000, v12, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCopyPacketContextInterfaceNameByServiceType() for %s: name = %s", (uint8_t *)object, 0x16u);
            if (SHIBYTE(v17) < 0)
              operator delete(__p[0]);
          }
          else
          {
            LODWORD(object[0]) = 136315394;
            *(xpc_object_t *)((char *)object + 4) = v13;
            WORD2(object[1]) = 2080;
            *(xpc_object_t *)((char *)&object[1] + 6) = "";
            _os_log_impl(&dword_18425C000, v12, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCopyPacketContextInterfaceNameByServiceType() for %s: name = %s", (uint8_t *)object, 0x16u);
          }
          if (a2 && SHIBYTE(v19) < 0)
            operator delete(v18[0]);
        }
        xpc_release(xdict);
        xpc_release(v21);
      }
    }
  }
  return v7;
}

unint64_t getConnectionMaskType(const __CFString *a1)
{
  uint64_t v2;

  if (!a1)
    return 0;
  v2 = 1;
  if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeInternet"), 1uLL))
  {
    if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeVVM"), 1uLL))
    {
      if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeMMS"), 1uLL))
      {
        if (CFStringCompare(a1, CFSTR("kCTDataConntectionPushEmail"), 1uLL))
        {
          if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeWirelessModemTraffic"), 1uLL))
          {
            if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeWirelessModemAuthentication"), 1uLL))
            {
              if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeCellularDataPlanProvisioning"), 1uLL))
              {
                if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeCellularDataPlanProvisioning2"), 1uLL))
                {
                  if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeAppleWirelessDiagnostics"), 1uLL))
                  {
                    if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeDataTest"), 1uLL))
                    {
                      if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeOTAActivation"), 1uLL))
                      {
                        if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceType3GFaceTimeTraffic"), 1uLL))
                        {
                          if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceType3GFaceTimeAuthentication"), 1uLL))
                          {
                            if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeZeroRated"), 1uLL))
                            {
                              if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeEntitlementTraffic"), 1uLL))
                              {
                                if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeInternalDataProbe"), 1uLL))
                                {
                                  if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeIMS"), 1uLL))
                                  {
                                    if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeEm"), 1uLL))
                                    {
                                      if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeEmergencyLocation"), 1uLL))
                                      {
                                        if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeBootstrapProvisioning"), 1uLL))
                                        {
                                          if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeUT"), 1uLL))
                                          {
                                            if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeBootstrapRoamingInternetBypass"), 1uLL))
                                            {
                                              if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeInternetProbe"), 1uLL))
                                              {
                                                if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeThumperIMS"), 1uLL))
                                                {
                                                  if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeLLWirelessModemTraffic"), 1uLL))
                                                  {
                                                    if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeInternetSlice1"), 1uLL))
                                                    {
                                                      if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeInternetSlice2"), 1uLL))
                                                      {
                                                        if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeInternetSlice3"), 1uLL))
                                                        {
                                                          if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeInternetSlice4"), 1uLL))
                                                          {
                                                            if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeInternetSlice5"), 1uLL))
                                                            {
                                                              if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeInternetSlice6"), 1uLL))
                                                              {
                                                                if (CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeInternetSlice7"), 1uLL))
                                                                {
                                                                  return (unint64_t)(CFStringCompare(a1, CFSTR("kCTDataConnectionServiceTypeInternetSlice8"), 1uLL) == kCFCompareEqualTo) << 35;
                                                                }
                                                                else
                                                                {
                                                                  return 0x400000000;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                return 0x200000000;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              return 0x100000000;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            return 0x80000000;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          return 0x40000000;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        return 0x20000000;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      return 0x10000000;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    return 0x8000000;
                                                  }
                                                }
                                                else
                                                {
                                                  return 0x4000000;
                                                }
                                              }
                                              else
                                              {
                                                return 0x2000000;
                                              }
                                            }
                                            else
                                            {
                                              return 0x200000;
                                            }
                                          }
                                          else
                                          {
                                            return 0x100000;
                                          }
                                        }
                                        else
                                        {
                                          return 0x80000;
                                        }
                                      }
                                      else
                                      {
                                        return 0x400000;
                                      }
                                    }
                                    else
                                    {
                                      return 0x40000;
                                    }
                                  }
                                  else
                                  {
                                    return 0x20000;
                                  }
                                }
                                else
                                {
                                  return 0x10000;
                                }
                              }
                              else
                              {
                                return 0x8000;
                              }
                            }
                            else
                            {
                              return 0x4000;
                            }
                          }
                          else
                          {
                            return 2048;
                          }
                        }
                        else
                        {
                          return 1024;
                        }
                      }
                      else
                      {
                        return 512;
                      }
                    }
                    else
                    {
                      return 256;
                    }
                  }
                  else
                  {
                    return 128;
                  }
                }
                else
                {
                  return 0x800000;
                }
              }
              else
              {
                return 64;
              }
            }
            else
            {
              return 32;
            }
          }
          else
          {
            return 16;
          }
        }
        else
        {
          return 8;
        }
      }
      else
      {
        return 4;
      }
    }
    else
    {
      return 2;
    }
  }
  return v2;
}

uint64_t _CTServerConnectionSetPacketContextActive(uint64_t a1, int a2, unsigned int a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t object;
  __int16 v21;
  unsigned int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketSetActiveById", &object, "kRequest", &v18);
  xpc_release(object);
  v6 = v18;
  v19 = v18;
  v18 = xpc_null_create();
  xpc_release(v18);
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kPacketContextIdentifer", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create(a3);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kPacketStatus", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = getprogname();
  v12 = xpc_string_create(v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kProgName", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = CTLogPacket();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(object) = 67109376;
    HIDWORD(object) = a2;
    v21 = 1024;
    v22 = a3;
    _os_log_impl(&dword_18425C000, v14, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetPacketContextActive() for identifier = %d active = %d", (uint8_t *)&object, 0xEu);
  }
  v16 = SendXpcMessage(a1, &v19, 0, v15);
  xpc_release(v19);
  return v16;
}

uint64_t _CTServerConnectionGetPacketContextActive(uint64_t a1, int a2, _BYTE *a3)
{
  uint64_t v3;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  int v11;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t object;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = 0x1600000001;
  if (a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetActiveById", &object, "kRequest", &v14);
    xpc_release(object);
    v7 = v14;
    v15 = v14;
    v14 = xpc_null_create();
    xpc_release(v14);
    v8 = xpc_int64_create(a2);
    if (!v8)
      v8 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kPacketContextIdentifer", v8);
    v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    v14 = xpc_null_create();
    v3 = SendXpcMessage(a1, &v15, &v14);
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](v14) == MEMORY[0x1E0C812F8])
    {
      object = &v14;
      v17 = "kPacketStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v13);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v13, 0);
      xpc_release(v13);
    }
    v10 = CTLogPacket();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *a3;
      LODWORD(object) = 67109376;
      HIDWORD(object) = a2;
      LOWORD(v17) = 1024;
      *(_DWORD *)((char *)&v17 + 2) = v11;
      _os_log_impl(&dword_18425C000, v10, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketContextActive() for identifier = %d active = %d", (uint8_t *)&object, 0xEu);
    }
    xpc_release(v14);
    xpc_release(v15);
  }
  return v3;
}

uint64_t _CTServerConnectionSetPacketContextActiveByServiceType(uint64_t a1, __CFString *a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t ConnectionMaskType;
  uint64_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  const char *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  NSObject *v16;
  uint64_t v17;
  void **v18;
  void *__p[2];
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v3 = 0x1600000001;
  if (a2)
  {
    ConnectionMaskType = getConnectionMaskType(a2);
    if (a1)
    {
      v7 = ConnectionMaskType;
      if (ConnectionMaskType)
      {
        xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
        xpc::dict_creator::operator()<char const*>("kPacketSetActiveByService", object, "kRequest", __p);
        xpc_release(object[0]);
        v8 = __p[0];
        v22 = __p[0];
        __p[0] = xpc_null_create();
        xpc_release(__p[0]);
        v9 = xpc_uint64_create(v7);
        if (!v9)
          v9 = xpc_null_create();
        xpc_dictionary_set_value(v8, "kPacketServiceType", v9);
        v10 = xpc_null_create();
        xpc_release(v9);
        xpc_release(v10);
        v11 = xpc_int64_create(a3);
        if (!v11)
          v11 = xpc_null_create();
        xpc_dictionary_set_value(v8, "kPacketStatus", v11);
        v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        v13 = getprogname();
        v14 = xpc_string_create(v13);
        if (!v14)
          v14 = xpc_null_create();
        xpc_dictionary_set_value(v8, "kProgName", v14);
        v15 = xpc_null_create();
        xpc_release(v14);
        xpc_release(v15);
        v16 = CTLogPacket();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          memset(object, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)__p = *(_OWORD *)object;
          v21 = object[2];
          v18 = __p;
          if (SHIBYTE(object[2]) < 0)
            v18 = (void **)object[0];
          LODWORD(object[0]) = 136315394;
          *(xpc_object_t *)((char *)object + 4) = v18;
          WORD2(object[1]) = 1024;
          *(_DWORD *)((char *)&object[1] + 6) = a3;
          _os_log_impl(&dword_18425C000, v16, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetPacketContextActiveByServiceType() for %s active = %d", (uint8_t *)object, 0x12u);
          if (SHIBYTE(v21) < 0)
            operator delete(__p[0]);
        }
        v3 = SendXpcMessage(a1, &v22, 0, v17);
        xpc_release(v22);
      }
    }
  }
  return v3;
}

uint64_t _CTServerConnectionGetPacketContextActiveByServiceType(uint64_t a1, __CFString *a2, _BYTE *a3, int *a4)
{
  uint64_t ConnectionMaskType;
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  NSObject *v13;
  int v14;
  int v15;
  xpc_object_t *v16;
  int v17;
  int v18;
  xpc_object_t __p[2];
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  if (a2)
    ConnectionMaskType = getConnectionMaskType(a2);
  else
    ConnectionMaskType = 0;
  v9 = 0x1600000001;
  if (a4 && a3 && a1 && ConnectionMaskType)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketGetActiveByService", object, "kRequest", __p);
    xpc_release(object[0]);
    v10 = __p[0];
    v23 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    v11 = xpc_uint64_create(ConnectionMaskType);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v10, "kPacketServiceType", v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    v22 = xpc_null_create();
    v9 = SendXpcMessage(a1, &v23, &v22);
    *a3 = 0;
    *a4 = -1;
    if (MEMORY[0x186DBAE5C](v22) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v22;
      object[1] = "kPacketStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      *a3 = xpc::dyn_cast_or_default((xpc *)__p, 0);
      xpc_release(__p[0]);
      object[0] = &v22;
      object[1] = "kPacketContextIdentifer";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      *a4 = xpc::dyn_cast_or_default((xpc *)__p, (const object *)0xFFFFFFFFLL);
      xpc_release(__p[0]);
    }
    v13 = CTLogPacket();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
      {
        memset(object, 0, 24);
        ctu::cf::assign();
        *(_OWORD *)__p = *(_OWORD *)object;
        v21 = object[2];
        v14 = *a4;
        v15 = *a3;
        v16 = __p;
        if (SHIBYTE(object[2]) < 0)
          v16 = (xpc_object_t *)object[0];
        LODWORD(object[0]) = 136315650;
        *(xpc_object_t *)((char *)object + 4) = v16;
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v15;
        WORD1(object[2]) = 1024;
        HIDWORD(object[2]) = v14;
        _os_log_impl(&dword_18425C000, v13, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketContextActiveByServiceType() for %s active = %d context = %d", (uint8_t *)object, 0x18u);
        if (SHIBYTE(v21) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v17 = *a3;
        v18 = *a4;
        LODWORD(object[0]) = 136315650;
        *(xpc_object_t *)((char *)object + 4) = "";
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v17;
        WORD1(object[2]) = 1024;
        HIDWORD(object[2]) = v18;
        _os_log_impl(&dword_18425C000, v13, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketContextActiveByServiceType() for %s active = %d context = %d", (uint8_t *)object, 0x18u);
      }
    }
    xpc_release(v22);
    xpc_release(v23);
  }
  return v9;
}

uint64_t _CTServerConnectionGetPacketDataLoadInfo(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kPacketGetDataLoadInfo", object, "kRequest", &v10);
  xpc_release(object[0]);
  v11 = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v10 = xpc_null_create();
  v4 = SendXpcMessage(a1, &v11, &v10);
  if (a2)
    *a2 = -1;
  v5 = MEMORY[0x186DBAE5C](v10);
  if (a2 && v5 == MEMORY[0x1E0C812F8])
  {
    object[0] = &v10;
    object[1] = "kPacketActivateQueueSize";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
    *a2 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
    xpc_release(v9);
  }
  v6 = CTLogPacket();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v7 = *a2;
    else
      v7 = -1;
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v7;
    _os_log_impl(&dword_18425C000, v6, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketDataLoadInfo() activateQueueSize = %d", (uint8_t *)object, 8u);
  }
  xpc_release(v10);
  xpc_release(v11);
  return v4;
}

uint64_t _CTServerConnectionGetPacketContextActiveByServiceTypeExtended(uint64_t a1, __CFString *a2, _BYTE *a3, int *a4, int *a5)
{
  uint64_t ConnectionMaskType;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  xpc_object_t *v19;
  int v20;
  int v21;
  int v22;
  xpc_object_t __p[2];
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t object[3];
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a2)
    ConnectionMaskType = getConnectionMaskType(a2);
  else
    ConnectionMaskType = 0;
  v11 = 0x1600000001;
  if (a5 && a4 && a3 && a1 && ConnectionMaskType)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketGetActiveByService", object, "kRequest", __p);
    xpc_release(object[0]);
    v12 = __p[0];
    v27 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    v13 = xpc_uint64_create(ConnectionMaskType);
    if (!v13)
      v13 = xpc_null_create();
    xpc_dictionary_set_value(v12, "kPacketServiceType", v13);
    v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
    v26 = xpc_null_create();
    v11 = SendXpcMessage(a1, &v27, &v26);
    *a3 = 0;
    *a4 = -1;
    *a5 = -1;
    if (MEMORY[0x186DBAE5C](v26) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v26;
      object[1] = "kPacketStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      *a3 = xpc::dyn_cast_or_default((xpc *)__p, 0);
      xpc_release(__p[0]);
      object[0] = &v26;
      object[1] = "kPacketContextIdentifer";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      *a4 = xpc::dyn_cast_or_default((xpc *)__p, (const object *)0xFFFFFFFFLL);
      xpc_release(__p[0]);
      object[0] = &v26;
      object[1] = "kPacketContextType";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      *a5 = xpc::dyn_cast_or_default((xpc *)__p, (const object *)0xFFFFFFFFLL);
      xpc_release(__p[0]);
    }
    v15 = CTLogPacket();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
      {
        memset(object, 0, sizeof(object));
        ctu::cf::assign();
        *(_OWORD *)__p = *(_OWORD *)object;
        v25 = object[2];
        v16 = *a5;
        v17 = *a4;
        v18 = *a3;
        v19 = __p;
        if (SHIBYTE(object[2]) < 0)
          v19 = (xpc_object_t *)object[0];
        LODWORD(object[0]) = 136315906;
        *(xpc_object_t *)((char *)object + 4) = v19;
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v18;
        WORD1(object[2]) = 1024;
        HIDWORD(object[2]) = v17;
        v29 = 1024;
        v30 = v16;
        _os_log_impl(&dword_18425C000, v15, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketContextActiveByServiceTypeExtended() for %s active = %d context = %d context_type = %d", (uint8_t *)object, 0x1Eu);
        if (SHIBYTE(v25) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v20 = *a3;
        v21 = *a4;
        v22 = *a5;
        LODWORD(object[0]) = 136315906;
        *(xpc_object_t *)((char *)object + 4) = "";
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v20;
        WORD1(object[2]) = 1024;
        HIDWORD(object[2]) = v21;
        v29 = 1024;
        v30 = v22;
        _os_log_impl(&dword_18425C000, v15, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketContextActiveByServiceTypeExtended() for %s active = %d context = %d context_type = %d", (uint8_t *)object, 0x1Eu);
      }
    }
    xpc_release(v26);
    xpc_release(v27);
  }
  return v11;
}

uint64_t _CTServerConnectionSetPacketProtocolActiveByInterface(uint64_t a1, CFStringRef theString, unsigned int a3, unsigned int a4)
{
  unsigned int InterfaceNumber;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  NSObject *v18;
  uint64_t v19;
  void **v20;
  void *__p[2];
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  InterfaceNumber = getInterfaceNumber(theString);
  v9 = 0x1600000001;
  if (a1)
  {
    v10 = InterfaceNumber;
    if ((InterfaceNumber & 0x80000000) == 0)
    {
      xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
      xpc::dict_creator::operator()<char const*>("kPacketSetProtocolActiveByInterface", object, "kRequest", __p);
      xpc_release(object[0]);
      v11 = __p[0];
      v24 = __p[0];
      __p[0] = xpc_null_create();
      xpc_release(__p[0]);
      v12 = xpc_int64_create(v10);
      if (!v12)
        v12 = xpc_null_create();
      xpc_dictionary_set_value(v11, "kPacketContextIdentifer", v12);
      v13 = xpc_null_create();
      xpc_release(v12);
      xpc_release(v13);
      v14 = xpc_int64_create(a3);
      if (!v14)
        v14 = xpc_null_create();
      xpc_dictionary_set_value(v11, "kPacketDataFamily", v14);
      v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
      v16 = xpc_int64_create(a4);
      if (!v16)
        v16 = xpc_null_create();
      xpc_dictionary_set_value(v11, "kPacketStatus", v16);
      v17 = xpc_null_create();
      xpc_release(v16);
      xpc_release(v17);
      v18 = CTLogPacket();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        if (theString)
        {
          memset(object, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)__p = *(_OWORD *)object;
          v23 = object[2];
          v20 = __p;
          if (SHIBYTE(object[2]) < 0)
            v20 = (void **)object[0];
          LODWORD(object[0]) = 136315650;
          *(xpc_object_t *)((char *)object + 4) = v20;
          WORD2(object[1]) = 1024;
          *(_DWORD *)((char *)&object[1] + 6) = a3;
          WORD1(object[2]) = 1024;
          HIDWORD(object[2]) = a4;
          _os_log_impl(&dword_18425C000, v18, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetPacketProtocolActiveByInterface() for %s protocols = %d active = %d", (uint8_t *)object, 0x18u);
          if (SHIBYTE(v23) < 0)
            operator delete(__p[0]);
        }
        else
        {
          LODWORD(object[0]) = 136315650;
          *(xpc_object_t *)((char *)object + 4) = "";
          WORD2(object[1]) = 1024;
          *(_DWORD *)((char *)&object[1] + 6) = a3;
          WORD1(object[2]) = 1024;
          HIDWORD(object[2]) = a4;
          _os_log_impl(&dword_18425C000, v18, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetPacketProtocolActiveByInterface() for %s protocols = %d active = %d", (uint8_t *)object, 0x18u);
        }
      }
      v9 = SendXpcMessage(a1, &v24, 0, v19);
      xpc_release(v24);
    }
  }
  return v9;
}

uint64_t getInterfaceNumber(CFStringRef theString)
{
  uint64_t result;
  BOOL v3;
  unsigned int v4;
  char buffer[16];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = 0xFFFFFFFFLL;
  v4 = -1;
  if (theString)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    *(_OWORD *)buffer = 0u;
    v6 = 0u;
    if (CFStringGetCString(theString, buffer, 128, 0x8000100u)
      && (*(_DWORD *)buffer == 1601201264 ? (v3 = *(unsigned __int16 *)&buffer[4] == 28777) : (v3 = 0), v3))
    {
      sscanf(&buffer[6], "%d", &v4);
      return v4;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t _CTServerConnectionSetPacketProtocolActiveByServiceType(uint64_t a1, __CFString *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t ConnectionMaskType;
  uint64_t v9;
  void *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  NSObject *v17;
  uint64_t v18;
  void **v19;
  void *__p[2];
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v4 = 0x1600000001;
  if (a2)
  {
    ConnectionMaskType = getConnectionMaskType(a2);
    if (a1)
    {
      v9 = ConnectionMaskType;
      if (ConnectionMaskType)
      {
        xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
        xpc::dict_creator::operator()<char const*>("kPacketSetProtocolActiveByService", object, "kRequest", __p);
        xpc_release(object[0]);
        v10 = __p[0];
        v23 = __p[0];
        __p[0] = xpc_null_create();
        xpc_release(__p[0]);
        v11 = xpc_uint64_create(v9);
        if (!v11)
          v11 = xpc_null_create();
        xpc_dictionary_set_value(v10, "kPacketServiceType", v11);
        v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        v13 = xpc_int64_create(a3);
        if (!v13)
          v13 = xpc_null_create();
        xpc_dictionary_set_value(v10, "kPacketDataFamily", v13);
        v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        v15 = xpc_int64_create(a4);
        if (!v15)
          v15 = xpc_null_create();
        xpc_dictionary_set_value(v10, "kPacketStatus", v15);
        v16 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v16);
        v17 = CTLogPacket();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          memset(object, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)__p = *(_OWORD *)object;
          v22 = object[2];
          v19 = __p;
          if (SHIBYTE(object[2]) < 0)
            v19 = (void **)object[0];
          LODWORD(object[0]) = 136315650;
          *(xpc_object_t *)((char *)object + 4) = v19;
          WORD2(object[1]) = 1024;
          *(_DWORD *)((char *)&object[1] + 6) = a3;
          WORD1(object[2]) = 1024;
          HIDWORD(object[2]) = a4;
          _os_log_impl(&dword_18425C000, v17, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetPacketProtocolActiveByServiceType() for %s protocols = %d active = %d", (uint8_t *)object, 0x18u);
          if (SHIBYTE(v22) < 0)
            operator delete(__p[0]);
        }
        v4 = SendXpcMessage(a1, &v23, 0, v18);
        xpc_release(v23);
      }
    }
  }
  return v4;
}

uint64_t _CTServerConnectionGetDataServiceAvailability(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v5;
  uint64_t v6;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  __int128 object;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kGetDataServiceAvailability", (xpc_object_t *)&object, "kRequest", &v10);
    xpc_release((xpc_object_t)object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &v10);
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      *a2 = 0;
      v9 = 0;
      *(_QWORD *)&object = &v10;
      *((_QWORD *)&object + 1) = "kDataServiceAvailability";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v9);
      if (MEMORY[0x186DBAE5C](v9) != MEMORY[0x1E0C81350])
      {
        *(_QWORD *)&object = 0;
        v8 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v8);
        *a2 = object;
      }
      xpc_release(v9);
    }
    v5 = CTLogPacket();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a2;
      LODWORD(object) = 138412290;
      *(_QWORD *)((char *)&object + 4) = v6;
      _os_log_impl(&dword_18425C000, v5, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetDataServiceAvailability(): serviceAvailability = %@", (uint8_t *)&object, 0xCu);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionIsServiceOverPublicInternet(uint64_t a1, __CFString *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t ConnectionMaskType;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  NSObject *v11;
  int v12;
  xpc_object_t *v13;
  int v14;
  xpc_object_t __p[2];
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v3 = 0x1600000001;
  if (a1 && a3)
  {
    if (a2)
      ConnectionMaskType = getConnectionMaskType(a2);
    else
      ConnectionMaskType = 0;
    *a3 = 1;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kDataServiceOverPublicInternet", object, "kRequest", __p);
    xpc_release(object[0]);
    v8 = __p[0];
    v19 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    v9 = xpc_uint64_create(ConnectionMaskType);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kPacketServiceType", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v18 = xpc_null_create();
    v3 = SendXpcMessage(a1, &v19, &v18);
    if (MEMORY[0x186DBAE5C](v18) == MEMORY[0x1E0C812F8])
    {
      __p[0] = 0;
      object[0] = &v18;
      object[1] = "kDataServiceOverPublicInternet";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
      if (MEMORY[0x186DBAE5C](__p[0]) != MEMORY[0x1E0C81350])
        *a3 = xpc::dyn_cast_or_default((xpc *)__p, 0);
      xpc_release(__p[0]);
    }
    v11 = CTLogPacket();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
      {
        memset(object, 0, 24);
        ctu::cf::assign();
        *(_OWORD *)__p = *(_OWORD *)object;
        v17 = object[2];
        v12 = *a3;
        v13 = __p;
        if (SHIBYTE(object[2]) < 0)
          v13 = (xpc_object_t *)object[0];
        LODWORD(object[0]) = 136315394;
        *(xpc_object_t *)((char *)object + 4) = v13;
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v12;
        _os_log_impl(&dword_18425C000, v11, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionIsServiceOverPublicInternet() for %s isOver = %d", (uint8_t *)object, 0x12u);
        if (SHIBYTE(v17) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v14 = *a3;
        LODWORD(object[0]) = 136315394;
        *(xpc_object_t *)((char *)object + 4) = "";
        WORD2(object[1]) = 1024;
        *(_DWORD *)((char *)&object[1] + 6) = v14;
        _os_log_impl(&dword_18425C000, v11, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionIsServiceOverPublicInternet() for %s isOver = %d", (uint8_t *)object, 0x12u);
      }
    }
    xpc_release(v18);
    xpc_release(v19);
  }
  return v3;
}

uint64_t _CTServerConnectionGetNATTKeepAliveOverCell(uint64_t a1, int *a2)
{
  uint64_t v2;
  NSObject *v5;
  int v6;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t object;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kNATTKeepAliveOverCell", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v13 = "kNATTKeepAliveOverCell";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &v10);
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      v8 = 0;
      object = &v10;
      v13 = "kNATTKeepAliveOverCell";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      if (MEMORY[0x186DBAE5C](v8) != MEMORY[0x1E0C81350])
        *a2 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      xpc_release(v8);
    }
    v5 = CTLogPacket();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a2;
      LODWORD(object) = 67109120;
      HIDWORD(object) = v6;
      _os_log_impl(&dword_18425C000, v5, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetNATTKeepAliveOverCell(): timeout = %d", (uint8_t *)&object, 8u);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetInterfaceFamilies(uint64_t a1, CFStringRef theString, int *a3, int *a4)
{
  unsigned int InterfaceNumber;
  uint64_t v9;
  unsigned int v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  NSObject *v14;
  int v15;
  int v16;
  xpc_object_t *v17;
  int v18;
  int v19;
  xpc_object_t __p[2];
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  InterfaceNumber = getInterfaceNumber(theString);
  v9 = 0x1600000001;
  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        v10 = InterfaceNumber;
        if ((InterfaceNumber & 0x80000000) == 0)
        {
          xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
          xpc::dict_creator::operator()<char const*>("kPacketGetInterfaceFamilyStatus", object, "kRequest", __p);
          xpc_release(object[0]);
          v11 = __p[0];
          v24 = __p[0];
          __p[0] = xpc_null_create();
          xpc_release(__p[0]);
          v12 = xpc_int64_create(v10);
          if (!v12)
            v12 = xpc_null_create();
          xpc_dictionary_set_value(v11, "kPacketContextIdentifer", v12);
          v13 = xpc_null_create();
          xpc_release(v12);
          xpc_release(v13);
          v23 = xpc_null_create();
          v9 = SendXpcMessage(a1, &v24, &v23);
          *a4 = 0;
          *a3 = 0;
          if (MEMORY[0x186DBAE5C](v23) == MEMORY[0x1E0C812F8])
          {
            object[0] = &v23;
            object[1] = "kPacketDataFamilyActive";
            xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
            *a3 = xpc::dyn_cast_or_default((xpc *)__p, 0);
            xpc_release(__p[0]);
            object[0] = &v23;
            object[1] = "kPacketDataFamilyAvailable";
            xpc::dict::object_proxy::operator xpc::object((uint64_t)object, __p);
            *a4 = xpc::dyn_cast_or_default((xpc *)__p, 0);
            xpc_release(__p[0]);
          }
          v14 = CTLogPacket();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            if (theString)
            {
              memset(object, 0, 24);
              ctu::cf::assign();
              *(_OWORD *)__p = *(_OWORD *)object;
              v22 = object[2];
              v15 = *a4;
              v16 = *a3;
              v17 = __p;
              if (SHIBYTE(object[2]) < 0)
                v17 = (xpc_object_t *)object[0];
              LODWORD(object[0]) = 136315650;
              *(xpc_object_t *)((char *)object + 4) = v17;
              WORD2(object[1]) = 1024;
              *(_DWORD *)((char *)&object[1] + 6) = v16;
              WORD1(object[2]) = 1024;
              HIDWORD(object[2]) = v15;
              _os_log_impl(&dword_18425C000, v14, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetInterfaceFamilies() for %s active = %d available = %d", (uint8_t *)object, 0x18u);
              if (SHIBYTE(v22) < 0)
                operator delete(__p[0]);
            }
            else
            {
              v18 = *a3;
              v19 = *a4;
              LODWORD(object[0]) = 136315650;
              *(xpc_object_t *)((char *)object + 4) = "";
              WORD2(object[1]) = 1024;
              *(_DWORD *)((char *)&object[1] + 6) = v18;
              WORD1(object[2]) = 1024;
              HIDWORD(object[2]) = v19;
              _os_log_impl(&dword_18425C000, v14, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetInterfaceFamilies() for %s active = %d available = %d", (uint8_t *)object, 0x18u);
            }
          }
          xpc_release(v23);
          xpc_release(v24);
        }
      }
    }
  }
  return v9;
}

uint64_t _CTServerConnectionGetPacketContextStatistics(uint64_t a1, int a2, int *a3, int *a4, int *a5, int *a6)
{
  uint64_t v6;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t object;
  const char *v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = 0x1600000001;
  if (a6 && a4 && a1 && a3 && a5)
  {
    *a6 = 0;
    *a4 = 0;
    *a5 = 0;
    *a3 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketStatisticsByID", &object, "kRequest", &v23);
    xpc_release(object);
    v13 = v23;
    v24 = v23;
    v23 = xpc_null_create();
    xpc_release(v23);
    v14 = xpc_int64_create(a2);
    if (!v14)
      v14 = xpc_null_create();
    xpc_dictionary_set_value(v13, "kPacketContextIdentifer", v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    v23 = xpc_null_create();
    v6 = SendXpcMessage(a1, &v24, &v23);
    if (MEMORY[0x186DBAE5C](v23) == MEMORY[0x1E0C812F8])
    {
      object = &v23;
      v26 = "kPacketDataUplinkPackets";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v22);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v22, 0);
      xpc_release(v22);
      object = &v23;
      v26 = "kPacketDataUplinkBytes";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v22);
      *a5 = xpc::dyn_cast_or_default((xpc *)&v22, 0);
      xpc_release(v22);
      object = &v23;
      v26 = "kPacketDataDownlinkPackets";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v22);
      *a4 = xpc::dyn_cast_or_default((xpc *)&v22, 0);
      xpc_release(v22);
      object = &v23;
      v26 = "kPacketDataDownlinkBytes";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v22);
      *a6 = xpc::dyn_cast_or_default((xpc *)&v22, 0);
      xpc_release(v22);
    }
    v16 = CTLogPacket();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *a3;
      v18 = *a4;
      v19 = *a5;
      v20 = *a6;
      LODWORD(object) = 67110144;
      HIDWORD(object) = a2;
      LOWORD(v26) = 1024;
      *(_DWORD *)((char *)&v26 + 2) = v17;
      HIWORD(v26) = 1024;
      v27 = v18;
      v28 = 1024;
      v29 = v19;
      v30 = 1024;
      v31 = v20;
      _os_log_impl(&dword_18425C000, v16, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetPacketContextStatistics() for %d: %d:%d:%d:%d", (uint8_t *)&object, 0x20u);
    }
    xpc_release(v23);
    xpc_release(v24);
  }
  return v6;
}

uint64_t _CTServerConnectionResetPacketContextStatistics(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t object;
  uint8_t buf[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketResetStatisticsByID", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  v4 = *(xpc_object_t *)buf;
  object = *(xpc_object_t *)buf;
  *(_QWORD *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kPacketContextIdentifer", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_18425C000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionResetPacketContextStatistics() for %d", buf, 8u);
  }
  v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerConnectionResetPacketContextSettings(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t object;
  uint8_t buf[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketResetSettingsByID", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  v4 = *(xpc_object_t *)buf;
  object = *(xpc_object_t *)buf;
  *(_QWORD *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kPacketContextIdentifer", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_18425C000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionResetPacketContextSettings() for %d", buf, 8u);
  }
  v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerConnectionSuspendPacketContextSettings(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t object;
  uint8_t buf[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketSuspendSettingsByID", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  v4 = *(xpc_object_t *)buf;
  object = *(xpc_object_t *)buf;
  *(_QWORD *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kPacketContextIdentifer", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_18425C000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSuspendPacketContextSettings() for %d", buf, 8u);
  }
  v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerConnectionResumePacketContextSettings(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t object;
  uint8_t buf[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketResumeSettingsByID", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  v4 = *(xpc_object_t *)buf;
  object = *(xpc_object_t *)buf;
  *(_QWORD *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kPacketContextIdentifer", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_18425C000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionResumePacketContextSettings() for %d", buf, 8u);
  }
  v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerForceFastDormancy(uint64_t a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v9;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketSetProperty", &object, "kRequest", &v9);
  xpc_release(object);
  v2 = v9;
  object = v9;
  v9 = xpc_null_create();
  xpc_release(v9);
  v3 = xpc_BOOL_create(1);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(v2, "kPacketForceDormancy", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
  v5 = CTLogPacket();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_18425C000, v5, OS_LOG_TYPE_DEFAULT, "Calling _CTServerForceFastDormancy()", (uint8_t *)&v9, 2u);
  }
  v7 = SendXpcMessage(a1, &object, 0, v6);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerEnableFastDormancy(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t object;
  uint8_t buf[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketSetProperty", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  v4 = *(xpc_object_t *)buf;
  object = *(xpc_object_t *)buf;
  *(_QWORD *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kPacketDormancy", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_18425C000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerEnableFastDormancy(): enable = %d", buf, 8u);
  }
  v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerIsFastDormancyEnabled(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  NSObject *v8;
  int v9;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", object, "kRequest", &v12);
    xpc_release(object[0]);
    v5 = v12;
    v13 = v12;
    v12 = xpc_null_create();
    xpc_release(v12);
    v6 = xpc_BOOL_create(0);
    if (!v6)
      v6 = xpc_null_create();
    xpc_dictionary_set_value(v5, "kPacketDormancy", v6);
    v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    v12 = xpc_null_create();
    *a2 = 0;
    v2 = SendXpcMessage(a1, &v13, &v12);
    if (MEMORY[0x186DBAE5C](v12) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v12;
      object[1] = "kPacketDormancy";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
    }
    v8 = CTLogPacket();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *a2;
      LODWORD(object[0]) = 67109120;
      HIDWORD(object[0]) = v9;
      _os_log_impl(&dword_18425C000, v8, OS_LOG_TYPE_DEFAULT, "Calling _CTServerIsFastDormancyEnabled(): enabled = %d", (uint8_t *)object, 8u);
    }
    xpc_release(v12);
    xpc_release(v13);
  }
  return v2;
}

uint64_t _CTServerConnectionHideDataIndicator(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  NSObject *v5;
  int v6;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t object;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v13 = "kCellularDataHideIndicator";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    *a2 = 0;
    v2 = SendXpcMessage(a1, &v11, &v10);
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object = &v10;
      v13 = "kCellularDataHideIndicator";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v8, (const object *)1);
      xpc_release(v8);
    }
    v5 = CTLogPacket();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a2;
      LODWORD(object) = 67109120;
      HIDWORD(object) = v6;
      _os_log_impl(&dword_18425C000, v5, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionHideDataIndicator(): shouldHide = %d", (uint8_t *)&object, 8u);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionHideRatIndicator(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  NSObject *v5;
  int v6;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t object;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", &object, "kRequest", &v10);
    xpc_release(object);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object = &v11;
    v13 = "kCellularDataHideRatIndicator";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    v10 = xpc_null_create();
    *a2 = 0;
    v2 = SendXpcMessage(a1, &v11, &v10);
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object = &v10;
      v13 = "kCellularDataHideRatIndicator";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v8, (const object *)1);
      xpc_release(v8);
    }
    v5 = CTLogPacket();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a2;
      LODWORD(object) = 67109120;
      HIDWORD(object) = v6;
      _os_log_impl(&dword_18425C000, v5, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionHideRatIndicator(): shouldHide = %d", (uint8_t *)&object, 8u);
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionSetCellularDataIsEnabled(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  xpc_object_t v13;
  xpc_object_t object;
  os_activity_scope_state_s state;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  v4 = _os_activity_create(&dword_18425C000, "Cellular data switch changed", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v4, &state);
  os_activity_scope_leave(&state);
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&state);
  xpc::dict_creator::operator()<char const*>("kPacketSetPropertyWithReply", (xpc_object_t *)&state, "kRequest", &v13);
  xpc_release((xpc_object_t)state.opaque[0]);
  v5 = v13;
  object = v13;
  v13 = xpc_null_create();
  xpc_release(v13);
  v6 = xpc_int64_create(a2);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, "kEnableCellularData", v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  {
  }
  {
  }
  {
    v9 = "Enabling";
    if (!a2)
      v9 = "Disabling";
    LODWORD(state.opaque[0]) = 136315138;
    *(uint64_t *)((char *)state.opaque + 4) = (uint64_t)v9;
    _os_log_impl(&dword_18425C000, v8, OS_LOG_TYPE_DEFAULT, "%s cellular data", (uint8_t *)&state, 0xCu);
  }
  v10 = CTLogPacket();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(state.opaque[0]) = 67109120;
    HIDWORD(state.opaque[0]) = a2;
    _os_log_impl(&dword_18425C000, v10, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetCellularDataIsEnabled(): isEnabled = %d", (uint8_t *)&state, 8u);
  }
  state.opaque[0] = (uint64_t)xpc_null_create();
  v11 = SendXpcMessage(a1, &object, (xpc_object_t *)&state);
  xpc_release((xpc_object_t)state.opaque[0]);
  xpc_release(object);
  if (v4)
    os_release(v4);
  return v11;
}

uint64_t _CTServerConnectionGetCellularDataSettings(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t object;
  const char *v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", &object, "kRequest", &v22);
    xpc_release(object);
    v8 = v22;
    v23 = v22;
    v22 = xpc_null_create();
    xpc_release(v22);
    v9 = xpc_BOOL_create(0);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kCellularDataCapable", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v11 = xpc_BOOL_create(0);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kCellularDataEnabled", v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    v13 = xpc_BOOL_create(0);
    if (!v13)
      v13 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kAirplaneMode", v13);
    v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
    v22 = xpc_null_create();
    if (a2)
      *a2 = 0;
    if (a3)
      *a3 = 0;
    if (a4)
      *a4 = 0;
    v15 = SendXpcMessage(a1, &v23, &v22);
    if (MEMORY[0x186DBAE5C](v22) == MEMORY[0x1E0C812F8])
    {
      if (a2)
      {
        object = &v22;
        v25 = "kCellularDataCapable";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v21);
        *a2 = xpc::dyn_cast_or_default((xpc *)&v21, 0);
        xpc_release(v21);
      }
      if (a3)
      {
        object = &v22;
        v25 = "kCellularDataEnabled";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v21);
        *a3 = xpc::dyn_cast_or_default((xpc *)&v21, 0);
        xpc_release(v21);
      }
      if (a4)
      {
        object = &v22;
        v25 = "kAirplaneMode";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v21);
        *a4 = xpc::dyn_cast_or_default((xpc *)&v21, 0);
        xpc_release(v21);
      }
    }
    v16 = CTLogPacket();
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_31;
    if (a2)
    {
      v17 = *a2;
      if (a3)
        goto LABEL_24;
    }
    else
    {
      v17 = -1;
      if (a3)
      {
LABEL_24:
        v18 = *a3;
        if (a4)
        {
LABEL_25:
          v19 = *a4;
LABEL_30:
          LODWORD(object) = 67109632;
          HIDWORD(object) = v17;
          LOWORD(v25) = 1024;
          *(_DWORD *)((char *)&v25 + 2) = v18;
          HIWORD(v25) = 1024;
          v26 = v19;
          _os_log_impl(&dword_18425C000, v16, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetCellularDataSettings(): isCapable = %d isEnabled = %d isAirplaneMode = %d", (uint8_t *)&object, 0x14u);
LABEL_31:
          xpc_release(v22);
          xpc_release(v23);
          return v15;
        }
LABEL_29:
        v19 = -1;
        goto LABEL_30;
      }
    }
    v18 = -1;
    if (a4)
      goto LABEL_25;
    goto LABEL_29;
  }
  return 0x1600000001;
}

uint64_t _CTServerConnectionGetCellularDataIsEnabledEx(uint64_t a1, ctu *a2, NSObject *a3, uint64_t a4)
{
  uint64_t result;
  xpc_object_t v9;
  const void *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  int v14;
  _QWORD v15[5];
  xpc_object_t value;
  xpc_object_t v17;
  xpc_object_t object;

  result = 0x1600000001;
  if (a2 && a1 && a3 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", &object, "kRequest", &v17);
    xpc_release(object);
    v9 = v17;
    object = v17;
    v17 = xpc_null_create();
    xpc_release(v17);
    ctu::cf_to_xpc(a2, v10);
    xpc_dictionary_set_value(v9, "kWhois", value);
    v11 = value;
    value = xpc_null_create();
    xpc_release(v11);
    xpc_release(value);
    value = 0;
    v12 = xpc_BOOL_create(0);
    if (!v12)
      v12 = xpc_null_create();
    xpc_dictionary_set_value(v9, "kEnableCellularDataEx", v12);
    v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 0x40000000;
    v15[2] = ___CTServerConnectionGetCellularDataIsEnabledEx_block_invoke;
    v15[3] = &unk_1E1532E68;
    v15[4] = a4;
    v14 = SendXpcMessageAsync(a1, &object, a3, v15);
    xpc_release(object);
    if (v14)
      return 0;
    else
      return 0x500000002;
  }
  return result;
}

uint64_t _CTServerConnectionSetCellularDataIsEnabledEx(uint64_t a1, ctu *a2, _BOOL4 a3, NSObject *a4, uint64_t a5)
{
  uint64_t result;
  xpc_object_t v11;
  const void *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  NSObject *v16;
  int v17;
  _QWORD v18[5];
  xpc_object_t value;
  xpc_object_t object;
  uint8_t buf[8];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  result = 0x1600000001;
  if (a2 && a1 && a4 && a5)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketSetPropertyWithReply", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    v11 = *(xpc_object_t *)buf;
    object = *(xpc_object_t *)buf;
    *(_QWORD *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    ctu::cf_to_xpc(a2, v12);
    xpc_dictionary_set_value(v11, "kWhois", value);
    v13 = value;
    value = xpc_null_create();
    xpc_release(v13);
    xpc_release(value);
    value = 0;
    v14 = xpc_BOOL_create(a3);
    if (!v14)
      v14 = xpc_null_create();
    xpc_dictionary_set_value(v11, "kEnableCellularDataEx", v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    v16 = CTLogPacket();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_18425C000, v16, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetCellularDataIsEnabledEx(): isEnabled = %d", buf, 8u);
    }
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = ___CTServerConnectionSetCellularDataIsEnabledEx_block_invoke;
    v18[3] = &unk_1E1532E90;
    v18[4] = a5;
    v17 = SendXpcMessageAsync(a1, &object, a4, v18);
    xpc_release(object);
    if (v17)
      return 0;
    else
      return 0x500000002;
  }
  return result;
}

uint64_t _CTServerConnectionGetCellularDataIsDisallowed(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  NSObject *v8;
  int v9;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", object, "kRequest", &v12);
    xpc_release(object[0]);
    v5 = v12;
    v13 = v12;
    v12 = xpc_null_create();
    xpc_release(v12);
    v6 = xpc_BOOL_create(0);
    if (!v6)
      v6 = xpc_null_create();
    xpc_dictionary_set_value(v5, "kCellularDataDisallow", v6);
    v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    v12 = xpc_null_create();
    *a2 = 0;
    v2 = SendXpcMessage(a1, &v13, &v12);
    if (MEMORY[0x186DBAE5C](v12) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v12;
      object[1] = "kCellularDataDisallow";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
    }
    v8 = CTLogPacket();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *a2;
      LODWORD(object[0]) = 67109120;
      HIDWORD(object[0]) = v9;
      _os_log_impl(&dword_18425C000, v8, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetCellularDataIsDisallowed(): isDisallowed = %d", (uint8_t *)object, 8u);
    }
    xpc_release(v12);
    xpc_release(v13);
  }
  return v2;
}

uint64_t _CTServerConnectionSetCellularDataIsDisallowed(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t object;
  uint8_t buf[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kPacketSetProperty", &object, "kRequest", (xpc_object_t *)buf);
  xpc_release(object);
  v4 = *(xpc_object_t *)buf;
  object = *(xpc_object_t *)buf;
  *(_QWORD *)buf = xpc_null_create();
  xpc_release(*(xpc_object_t *)buf);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kCellularDataDisallow", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_18425C000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetCellularDataIsDisallowed(): isDisallowed = %d", buf, 8u);
  }
  v9 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  return v9;
}

uint64_t _CTServerConnectionGetResetCellularAccountSettingsIsAllowed(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  NSObject *v8;
  int v9;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", object, "kRequest", &v12);
    xpc_release(object[0]);
    v5 = v12;
    v13 = v12;
    v12 = xpc_null_create();
    xpc_release(v12);
    v6 = xpc_int64_create(*a2);
    if (!v6)
      v6 = xpc_null_create();
    xpc_dictionary_set_value(v5, "kCellularAccountReset", v6);
    v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    v12 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v13, &v12);
    if (MEMORY[0x186DBAE5C](v12) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v12;
      object[1] = "kCellularAccountReset";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
    }
    v8 = CTLogPacket();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *a2;
      LODWORD(object[0]) = 67109120;
      HIDWORD(object[0]) = v9;
      _os_log_impl(&dword_18425C000, v8, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionGetResetCellularAccountSettingsIsAllowed(): isAllowed = %d", (uint8_t *)object, 8u);
    }
    xpc_release(v12);
    xpc_release(v13);
  }
  return v2;
}

uint64_t _CTServerConnectionRequestQOS(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  NSObject *v9;
  int v10;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    *a3 = -1;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kQOSRequest", object, "kRequest", &v13);
    xpc_release(object[0]);
    v6 = v13;
    v14 = v13;
    v13 = xpc_null_create();
    xpc_release(v13);
    v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v6, "kQOSInfo", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v13 = xpc_null_create();
    v3 = SendXpcMessage(a1, &v14, &v13);
    if (MEMORY[0x186DBAE5C](v13) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v13;
      object[1] = "kQOSRequest";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v12, (const object *)*a3);
      xpc_release(v12);
    }
    v9 = CTLogPacket();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *a3;
      LODWORD(object[0]) = 67109120;
      HIDWORD(object[0]) = v10;
      _os_log_impl(&dword_18425C000, v9, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionRequestQOS(): identifier = %d", (uint8_t *)object, 8u);
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  return v3;
}

uint64_t _CTServerConnectionReleaseQOS(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  NSObject *v8;
  uint64_t v9;
  xpc_object_t object;
  uint8_t buf[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2 != -1)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kQOSRelease", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    v5 = *(xpc_object_t *)buf;
    object = *(xpc_object_t *)buf;
    *(_QWORD *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    v6 = xpc_int64_create(a2);
    if (!v6)
      v6 = xpc_null_create();
    xpc_dictionary_set_value(v5, "kQOSInfo", v6);
    v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    v8 = CTLogPacket();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl(&dword_18425C000, v8, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionReleaseQOS(): identifier = %d", buf, 8u);
    }
    v2 = SendXpcMessage(a1, &object, 0, v9);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionSetPacketNotificationFilter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  NSObject *v11;
  uint64_t v12;
  xpc_object_t object;
  uint8_t buf[8];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketFilter", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    v6 = *(xpc_object_t *)buf;
    object = *(xpc_object_t *)buf;
    *(_QWORD *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v6, "kQOSInfo", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v9 = xpc_int64_create(a3);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v6, "kPacketFilterStatus", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v11 = CTLogPacket();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_18425C000, v11, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSetPacketNotificationFilter(): enable = %d", buf, 8u);
    }
    v3 = SendXpcMessage(a1, &object, 0, v12);
    xpc_release(object);
  }
  return v3;
}

uint64_t _CTServerConnectionDropIPPackets(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  NSObject *v8;
  uint64_t v9;
  xpc_object_t v11;
  xpc_object_t v12;
  _BYTE object[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kDropIPPackets", (xpc_object_t *)object, "kRequest", &v11);
    xpc_release(*(xpc_object_t *)object);
    v5 = v11;
    v12 = v11;
    v11 = xpc_null_create();
    xpc_release(v11);
    v6 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v6)
      v6 = xpc_null_create();
    xpc_dictionary_set_value(v5, "kQOSInfo", v6);
    v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    v8 = CTLogPacket();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)object = 138412290;
      *(_QWORD *)&object[4] = a2;
      _os_log_impl(&dword_18425C000, v8, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionDropIPPackets(): payloadArray = %@", object, 0xCu);
    }
    v2 = SendXpcMessage(a1, &v12, 0, v9);
    xpc_release(v12);
  }
  return v2;
}

__CFString *_CTServerConnectionQosFlowStatusToQosFlowStatusString(int a1)
{
  __CFString **v1;

  if ((a1 - 1) > 2)
    v1 = kCTQualityOfServiceFlowStatusUnknown;
  else
    v1 = off_1E1532F30[(char)(a1 - 1)];
  return *v1;
}

uint64_t _CTServerConnectionUpdateQualityOfService(uint64_t a1, unsigned int a2)
{
  return _CTServerConnectionUpdateProtocolQualityOfService(a1, a2, 1u);
}

uint64_t _CTServerConnectionUpdateProtocolQualityOfService(uint64_t a1, unsigned int a2, unsigned int a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t object;
  __int16 v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kUpdateQualityOfService", &object, "kRequest", &v15);
  xpc_release(object);
  v6 = v15;
  v16 = v15;
  v15 = xpc_null_create();
  xpc_release(v15);
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kQosIndicator", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create(a3);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kPacketDataFamily", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = CTLogPacket();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(object) = 67109376;
    HIDWORD(object) = a2;
    v18 = 1024;
    v19 = a3;
    _os_log_impl(&dword_18425C000, v11, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionUpdateProtocolQualityOfService(): isQualityGood = %d protocols = %d", (uint8_t *)&object, 0xEu);
  }
  v13 = SendXpcMessage(a1, &v16, 0, v12);
  xpc_release(v16);
  return v13;
}

unint64_t _CTServerConnectionTetheringAssertionCreate(const void *a1, __CFString *a2, int a3, uint64_t a4, uint64_t *a5)
{
  unint64_t ConnectionMaskType;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  CFAllocatorRef v13;
  _QWORD *v14;
  const void *v15;
  void *v16;
  void *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  uint64_t v23;
  NSObject *v24;
  void **v25;
  void **v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  void *__p[2];
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  xpc_object_t xdict;
  xpc_object_t v36;
  _BYTE object[28];
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v10 = 0x1600000000;
    goto LABEL_17;
  }
  ConnectionMaskType = getConnectionMaskType(a2);
  v10 = 0x1600000000;
  v11 = 1;
  if (!a5)
    return v11 | v10;
  if (!a1)
    return v11 | v10;
  v12 = ConnectionMaskType;
  if (!ConnectionMaskType)
    return v11 | v10;
  *a5 = 0;
  v13 = CFGetAllocator(a1);
  if (!v14)
  {
LABEL_17:
    v11 = 1;
    return v11 | v10;
  }
  v15 = v14;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kPacketCreateTetheringAssertion", (xpc_object_t *)object, "kRequest", v33);
  xpc_release(*(xpc_object_t *)object);
  v16 = v33[0];
  v36 = v33[0];
  v33[0] = xpc_null_create();
  xpc_release(v33[0]);
  if (a4)
  {
    v17 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v17)
      v17 = xpc_null_create();
    xpc_dictionary_set_value(v16, "kAssertionName", v17);
    v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  v19 = xpc_int64_create(a3);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(v16, "kPacketContextIdentifer", v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = xpc_uint64_create(v12);
  if (!v21)
    v21 = xpc_null_create();
  xpc_dictionary_set_value(v16, "kPacketServiceType", v21);
  v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  xdict = xpc_null_create();
  v23 = SendXpcMessage((uint64_t)v15, &v36, &xdict);
  if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kDidSucceed"))
  {
    *a5 = (uint64_t)v15;
    v11 = v23;
  }
  else
  {
    CFRelease(v15);
    v11 = 2;
  }
  v10 = v23 & 0xFFFFFFFF00000000;
  v24 = CTLogPacket();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    memset(object, 0, 24);
    ctu::cf::assign();
    *(_OWORD *)v33 = *(_OWORD *)object;
    v34 = *(_QWORD *)&object[16];
    if (object[23] >= 0)
      v25 = v33;
    else
      v25 = *(void ***)object;
    if (a4)
    {
      memset(object, 0, 24);
      ctu::cf::assign();
      *(_OWORD *)__p = *(_OWORD *)object;
      v32 = *(_QWORD *)&object[16];
      v26 = __p;
      if (object[23] < 0)
        v26 = *(void ***)object;
      if (*a5)
        v27 = "true";
      else
        v27 = "false";
      *(_DWORD *)object = 136315906;
      *(_QWORD *)&object[4] = v25;
      *(_WORD *)&object[12] = 1024;
      *(_DWORD *)&object[14] = a3;
      *(_WORD *)&object[18] = 2080;
      *(_QWORD *)&object[20] = v26;
      v38 = 2080;
      v39 = v27;
      _os_log_impl(&dword_18425C000, v24, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionTetheringAssertionCreate() for %s identifier = %d name = %s assertion = %s", object, 0x26u);
      if (SHIBYTE(v32) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v28 = *a5;
      *(_DWORD *)object = 136315906;
      if (v28)
        v29 = "true";
      else
        v29 = "false";
      *(_QWORD *)&object[4] = v25;
      *(_WORD *)&object[12] = 1024;
      *(_DWORD *)&object[14] = a3;
      *(_WORD *)&object[18] = 2080;
      *(_QWORD *)&object[20] = "";
      v38 = 2080;
      v39 = v29;
      _os_log_impl(&dword_18425C000, v24, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionTetheringAssertionCreate() for %s identifier = %d name = %s assertion = %s", object, 0x26u);
    }
    if (SHIBYTE(v34) < 0)
      operator delete(v33[0]);
  }
  xpc_release(xdict);
  xpc_release(v36);
  return v11 | v10;
}

unint64_t _CTServerConnectionDormancySuspendAssertionCreate(const void *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  CFAllocatorRef v7;
  _QWORD *v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  xpc_object_t v13;
  unint64_t v14;
  NSObject *v15;
  void **v16;
  const char *v17;
  const char *v18;
  void *__p[2];
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v3 = 0x1600000000;
  v4 = 1;
  if (a1 && a3)
  {
    *a3 = 0;
    v7 = CFGetAllocator(a1);
    if (v8)
    {
      v9 = v8;
      xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
      xpc::dict_creator::operator()<char const*>("kPacketCreateDormancySuspendAssertion", object, "kRequest", __p);
      xpc_release(object[0]);
      v10 = __p[0];
      v22 = __p[0];
      __p[0] = xpc_null_create();
      xpc_release(__p[0]);
      if (a2)
      {
        v12 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        if (!v12)
          v12 = xpc_null_create();
        xpc_dictionary_set_value(v10, "kAssertionName", v12);
        v13 = xpc_null_create();
        xpc_release(v12);
        xpc_release(v13);
      }
      v14 = SendXpcMessage((uint64_t)v9, &v22, 0, v11);
      if (HIDWORD(v14))
        CFRelease(v9);
      else
        *a3 = v9;
      v3 = v14 & 0xFFFFFFFF00000000;
      v15 = CTLogPacket();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        if (a2)
        {
          memset(object, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)__p = *(_OWORD *)object;
          v21 = object[2];
          v16 = __p;
          if (SHIBYTE(object[2]) < 0)
            v16 = (void **)object[0];
          if (*a3)
            v17 = "true";
          else
            v17 = "false";
          LODWORD(object[0]) = 136315394;
          *(xpc_object_t *)((char *)object + 4) = v16;
          WORD2(object[1]) = 2080;
          *(xpc_object_t *)((char *)&object[1] + 6) = (xpc_object_t)v17;
          _os_log_impl(&dword_18425C000, v15, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionDormancySuspendAssertionCreate() for name = %s assertion = %s", (uint8_t *)object, 0x16u);
          if (SHIBYTE(v21) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v18 = "true";
          if (!*a3)
            v18 = "false";
          LODWORD(object[0]) = 136315394;
          *(xpc_object_t *)((char *)object + 4) = "";
          WORD2(object[1]) = 2080;
          *(xpc_object_t *)((char *)&object[1] + 6) = (xpc_object_t)v18;
          _os_log_impl(&dword_18425C000, v15, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionDormancySuspendAssertionCreate() for name = %s assertion = %s", (uint8_t *)object, 0x16u);
        }
      }
      xpc_release(v22);
      v4 = v14;
    }
    else
    {
      v4 = 1;
    }
  }
  return v4 | v3;
}

unint64_t _CTServerConnectionDormancySuspendAssertionCreateWithExpirationCB(const void *a1, uint64_t a2, uint64_t *a3, NSObject *a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v8 = _CTServerConnectionDormancySuspendAssertionCreate(a1, a2, a3);
  if (!HIDWORD(v8))
  {
    _CTServerConnectionSetTargetQueue((_QWORD *)*a3, a4);
    v9 = *a3;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___CTServerConnectionDormancySuspendAssertionCreateWithExpirationCB_block_invoke;
    v11[3] = &unk_1E1532EB8;
    v11[4] = a5;
    _CTServerConnectionRegisterBlockForNotification(v9, CFSTR("kCTConnectionInvalidatedNotification"), (uint64_t)v11);
  }
  return v8;
}

unint64_t _CTServerConnectionOTAActivationAssertionCreate(const void *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unsigned int v4;
  CFAllocatorRef v7;
  _QWORD *v8;
  const void *v9;
  void *v10;
  void *v11;
  xpc_object_t v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  const char *v16;
  const char *v17;
  void *__p[2];
  xpc_object_t v20;
  xpc_object_t xdict;
  xpc_object_t v22;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v3 = 0x1600000000;
  v4 = 1;
  if (a1 && a3)
  {
    *a3 = 0;
    v7 = CFGetAllocator(a1);
    if (v8)
    {
      v9 = v8;
      xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
      xpc::dict_creator::operator()<char const*>("kPacketCreateOTAActivationAssertion", object, "kRequest", __p);
      xpc_release(object[0]);
      v10 = __p[0];
      v22 = __p[0];
      __p[0] = xpc_null_create();
      xpc_release(__p[0]);
      if (a2)
      {
        v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        if (!v11)
          v11 = xpc_null_create();
        xpc_dictionary_set_value(v10, "kAssertionName", v11);
        v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
      }
      xdict = xpc_null_create();
      v13 = SendXpcMessage((uint64_t)v9, &v22, &xdict);
      if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kDidSucceed"))
      {
        *a3 = v9;
        v4 = v13;
      }
      else
      {
        CFRelease(v9);
        v4 = 2;
      }
      v3 = v13 & 0xFFFFFFFF00000000;
      v14 = CTLogPacket();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if (a2)
        {
          memset(object, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)__p = *(_OWORD *)object;
          v20 = object[2];
          v15 = __p;
          if (SHIBYTE(object[2]) < 0)
            v15 = (void **)object[0];
          if (*a3)
            v16 = "true";
          else
            v16 = "false";
          LODWORD(object[0]) = 136315394;
          *(xpc_object_t *)((char *)object + 4) = v15;
          WORD2(object[1]) = 2080;
          *(xpc_object_t *)((char *)&object[1] + 6) = (xpc_object_t)v16;
          _os_log_impl(&dword_18425C000, v14, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionOTAActivationAssertionCreate() for name = %s assertion = %s", (uint8_t *)object, 0x16u);
          if (SHIBYTE(v20) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v17 = "true";
          if (!*a3)
            v17 = "false";
          LODWORD(object[0]) = 136315394;
          *(xpc_object_t *)((char *)object + 4) = "";
          WORD2(object[1]) = 2080;
          *(xpc_object_t *)((char *)&object[1] + 6) = (xpc_object_t)v17;
          _os_log_impl(&dword_18425C000, v14, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionOTAActivationAssertionCreate() for name = %s assertion = %s", (uint8_t *)object, 0x16u);
        }
      }
      xpc_release(xdict);
      xpc_release(v22);
    }
    else
    {
      v4 = 1;
    }
  }
  return v4 | v3;
}

unint64_t _CTServerConnectionPacketContextAssertionCreate(const void *a1, int a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unsigned int v5;
  CFAllocatorRef v9;
  _QWORD *v10;
  const void *v11;
  void *v12;
  void *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  uint64_t v17;
  NSObject *v18;
  void **v19;
  const char *v20;
  const char *v21;
  void *__p[2];
  xpc_object_t v24;
  xpc_object_t xdict;
  xpc_object_t v26;
  xpc_object_t object[6];

  object[5] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v4 = 0x1600000000;
  v5 = 1;
  if (a1 && a4)
  {
    *a4 = 0;
    v9 = CFGetAllocator(a1);
    if (v10)
    {
      v11 = v10;
      xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
      xpc::dict_creator::operator()<char const*>("kPacketCreatePDPAssertion", object, "kRequest", __p);
      xpc_release(object[0]);
      v12 = __p[0];
      v26 = __p[0];
      __p[0] = xpc_null_create();
      xpc_release(__p[0]);
      if (a3)
      {
        v13 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        if (!v13)
          v13 = xpc_null_create();
        xpc_dictionary_set_value(v12, "kAssertionName", v13);
        v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
      }
      v15 = xpc_int64_create(a2);
      if (!v15)
        v15 = xpc_null_create();
      xpc_dictionary_set_value(v12, "kPacketContextIdentifer", v15);
      v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
      xdict = xpc_null_create();
      v17 = SendXpcMessage((uint64_t)v11, &v26, &xdict);
      if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kDidSucceed"))
      {
        *a4 = v11;
        v5 = v17;
      }
      else
      {
        CFRelease(v11);
        v5 = 2;
      }
      v4 = v17 & 0xFFFFFFFF00000000;
      v18 = CTLogPacket();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        if (a3)
        {
          memset(object, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)__p = *(_OWORD *)object;
          v24 = object[2];
          v19 = __p;
          if (SHIBYTE(object[2]) < 0)
            v19 = (void **)object[0];
          v20 = "true";
          if (!*a4)
            v20 = "false";
          LODWORD(object[0]) = 67109634;
          HIDWORD(object[0]) = a2;
          LOWORD(object[1]) = 2080;
          *(xpc_object_t *)((char *)&object[1] + 2) = v19;
          WORD1(object[2]) = 2080;
          *(xpc_object_t *)((char *)&object[2] + 4) = (xpc_object_t)v20;
          _os_log_impl(&dword_18425C000, v18, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionPacketContextAssertionCreate() for identifier = %d name = %s assertion = %s", (uint8_t *)object, 0x1Cu);
          if (SHIBYTE(v24) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v21 = "true";
          if (!*a4)
            v21 = "false";
          LODWORD(object[0]) = 67109634;
          HIDWORD(object[0]) = a2;
          LOWORD(object[1]) = 2080;
          *(xpc_object_t *)((char *)&object[1] + 2) = "";
          WORD1(object[2]) = 2080;
          *(xpc_object_t *)((char *)&object[2] + 4) = (xpc_object_t)v21;
          _os_log_impl(&dword_18425C000, v18, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionPacketContextAssertionCreate() for identifier = %d name = %s assertion = %s", (uint8_t *)object, 0x1Cu);
        }
      }
      xpc_release(xdict);
      xpc_release(v26);
    }
    else
    {
      v5 = 1;
    }
  }
  return v5 | v4;
}

unint64_t _CTServerConnectionDataActivationPopupAssertionCreate()
{
  uint64_t v0;
  const __CFString *v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  const __CFString *Identifier;
  const void *v9;
  __CFBundle *MainBundle;
  const char *v11;
  std::string::size_type size;
  std::string *v13;
  CFAllocatorRef v14;
  _QWORD *v15;
  const void *v16;
  uint64_t v17;
  std::string *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  void *v22;
  xpc_object_t v23;
  uint64_t v24;
  NSObject *v25;
  void **v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  void *__p[2];
  uint64_t v32;
  xpc_object_t object;
  xpc_object_t xdict;
  std::string v35;
  char buffer[24];
  const char *v37;
  uint64_t v38;

  v0 = MEMORY[0x1E0C80A78]();
  v38 = *MEMORY[0x1E0C80C00];
  v4 = 0x1600000000;
  v5 = 1;
  if (!v0)
    return v4 & 0xFFFFFFFF00000000 | v5;
  v6 = v3;
  if (!v3)
    return v4 & 0xFFFFFFFF00000000 | v5;
  v7 = v2;
  Identifier = v1;
  v9 = (const void *)v0;
  *v3 = 0;
  memset(&v35, 0, sizeof(v35));
  if (!v1)
    goto LABEL_9;
  bzero(buffer, 0x10000uLL);
  if (CFStringGetCString(Identifier, buffer, 0xFFFFLL, 0x8000100u) && *(unsigned __int16 *)buffer == 42)
  {
    Identifier = 0;
LABEL_9:
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle)
      Identifier = CFBundleGetIdentifier(MainBundle);
    if (!Identifier || CFStringGetLength(Identifier) <= 0)
    {
      v11 = getprogname();
      std::string::__assign_external(&v35, v11);
      size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v35.__r_.__value_.__l.__size_;
      if (!size)
      {
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        {
          v35.__r_.__value_.__l.__size_ = 11;
          v13 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&v35.__r_.__value_.__s + 23) = 11;
          v13 = &v35;
        }
        strcpy((char *)v13, "unknown-app");
      }
    }
    goto LABEL_20;
  }
  if (CFStringGetLength(Identifier) <= 0)
    goto LABEL_9;
LABEL_20:
  v14 = CFGetAllocator(v9);
  if (v15)
  {
    v16 = v15;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)buffer);
    xpc::dict_creator::operator()<char const*>("kPacketCreateDataActivationPopupAssertion", (xpc_object_t *)buffer, "kRequest", __p);
    xpc_release(*(xpc_object_t *)buffer);
    xdict = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    if (Identifier && CFStringGetLength(Identifier) >= 1)
    {
      v17 = _CFXPCCreateXPCObjectFromCFObject();
    }
    else
    {
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v35;
      else
        v18 = (std::string *)v35.__r_.__value_.__r.__words[0];
      v17 = (uint64_t)xpc_string_create((const char *)v18);
    }
    v19 = (xpc_object_t)v17;
    if (!v17)
      v19 = xpc_null_create();
    v20 = xdict;
    xpc_dictionary_set_value(xdict, "kAssertionName", v19);
    v21 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v21);
    v22 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v22)
      v22 = xpc_null_create();
    xpc_dictionary_set_value(v20, "kPacketCreateDataActivationPopupAssertionCategories", v22);
    v23 = xpc_null_create();
    xpc_release(v22);
    xpc_release(v23);
    object = xpc_null_create();
    v24 = SendXpcMessage((uint64_t)v16, &xdict, &object);
    if (MEMORY[0x186DBAE5C](object) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(object, "kDidSucceed"))
    {
      *v6 = (uint64_t)v16;
      v5 = v24;
    }
    else
    {
      CFRelease(v16);
      v5 = 2;
    }
    v4 = v24 & 0xFFFFFFFF00000000;
    v25 = CTLogPacket();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      if (Identifier)
      {
        memset(buffer, 0, sizeof(buffer));
        ctu::cf::assign();
        *(_OWORD *)__p = *(_OWORD *)buffer;
        v32 = *(_QWORD *)&buffer[16];
        v26 = __p;
        if (buffer[23] < 0)
          v26 = *(void ***)buffer;
        if (*v6)
          v27 = "true";
        else
          v27 = "false";
        *(_DWORD *)buffer = 136315650;
        *(_QWORD *)&buffer[4] = v26;
        *(_WORD *)&buffer[12] = 2112;
        *(_QWORD *)&buffer[14] = v7;
        *(_WORD *)&buffer[22] = 2080;
        v37 = v27;
        _os_log_impl(&dword_18425C000, v25, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionDataActivationPopupAssertionCreate() for name = %s categoriesArray = %@ assertion = %s", (uint8_t *)buffer, 0x20u);
        if (SHIBYTE(v32) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v28 = *v6;
        *(_QWORD *)&buffer[4] = "";
        *(_DWORD *)buffer = 136315650;
        if (v28)
          v29 = "true";
        else
          v29 = "false";
        *(_WORD *)&buffer[12] = 2112;
        *(_QWORD *)&buffer[14] = v7;
        *(_WORD *)&buffer[22] = 2080;
        v37 = v29;
        _os_log_impl(&dword_18425C000, v25, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionDataActivationPopupAssertionCreate() for name = %s categoriesArray = %@ assertion = %s", (uint8_t *)buffer, 0x20u);
      }
    }
    xpc_release(object);
    xpc_release(xdict);
  }
  else
  {
    v5 = 1;
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  return v4 & 0xFFFFFFFF00000000 | v5;
}

uint64_t _CTServerConnectionCopyDataActivityAssertionProcesses(uint64_t a1, int a2, xpc_object_t *a3)
{
  uint64_t v3;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t (*v10)(uint64_t);
  NSObject *v11;
  xpc_object_t v12;
  uint64_t v14;
  xpc_object_t v15;
  xpc_object_t xdict;
  xpc_object_t v17;
  xpc_object_t object;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v3 = 0x1600000001;
  if (a1 && a3)
  {
    *a3 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketCopyAssertion", &object, "kRequest", &xdict);
    xpc_release(object);
    v7 = xdict;
    v17 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v8 = xpc_int64_create(a2);
    if (!v8)
      v8 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kPacketContextIdentifer", v8);
    v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v17, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kPacketCopyAssertion"))
    {
      v15 = 0;
      object = &xdict;
      v19[0] = "kPacketCopyAssertion";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
      object = 0;
      v14 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v14);
      v10 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      if (!object)
        v10 = 0;
      if (v10)
      {
        *a3 = object;
      }
      else if (object)
      {
        CFRelease(object);
      }
      xpc_release(v15);
    }
    v11 = CTLogPacket();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a3;
      LODWORD(object) = 67109378;
      HIDWORD(object) = a2;
      LOWORD(v19[0]) = 2112;
      *(_QWORD *)((char *)v19 + 2) = v12;
      _os_log_impl(&dword_18425C000, v11, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCopyDataActivityAssertionProcesses() for identifier = %d dstarray = %@", (uint8_t *)&object, 0x12u);
    }
    xpc_release(xdict);
    xpc_release(v17);
  }
  return v3;
}

unint64_t _CTServerConnectionKeepAliveAssertionCreate(CFTypeRef cf, uint64_t a2, uint64_t *a3, NSObject *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  CFAllocatorRef v11;
  uint64_t v12;
  xpc_object_t v13;
  _QWORD *v14;
  xpc_object_t *v15;
  void *v16;
  void *v17;
  xpc_object_t v18;
  uint64_t v19;
  NSObject *v20;
  std::string *v21;
  const char *v22;
  _QWORD v24[6];
  xpc_object_t object;
  xpc_object_t v26;
  std::string v27;
  _OWORD v28[2];
  uint64_t v29;
  std::string v30;
  xpc_object_t v31;
  std::string v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = 0x1600000000;
  LODWORD(v6) = 1;
  if (!a2 || !cf || !a3)
    return v5 & 0xFFFFFFFF00000000 | v6;
  *a3 = 0;
  v29 = 0;
  memset(v28, 0, sizeof(v28));
  v11 = CFGetAllocator(cf);
  v12 = *((_QWORD *)cf + 3);
  if (*(char *)(v12 + 111) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v12 + 88), *(_QWORD *)(v12 + 96));
  else
    v27 = *(std::string *)(v12 + 88);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v30, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  else
    v30 = v27;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v32, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    v32 = v30;
  v31 = 0;
  if (ctu::cf::convert_copy())
    v13 = v31;
  else
    v13 = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v13)
    CFRelease(v13);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if (v14)
      goto LABEL_24;
LABEL_29:
    v5 = 0x500000000;
    LODWORD(v6) = 2;
    return v5 & 0xFFFFFFFF00000000 | v6;
  }
  if (!v14)
    goto LABEL_29;
LABEL_24:
  v15 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v32);
  xpc::dict_creator::operator()<char const*>("kPacketCreateKeepAliveAssertion", v15, "kRequest", (xpc_object_t *)&v30.__r_.__value_.__l.__data_);
  xpc_release(v32.__r_.__value_.__l.__data_);
  v16 = (void *)v30.__r_.__value_.__r.__words[0];
  v31 = (xpc_object_t)v30.__r_.__value_.__r.__words[0];
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc_release(v30.__r_.__value_.__l.__data_);
  v17 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v16, "kAssertionName", v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v26 = xpc_null_create();
  v6 = SendXpcMessage((uint64_t)v14, &v31, &v26);
  if ((_DWORD)v6)
  {
    CFRelease(v14);
  }
  else
  {
    *a3 = (uint64_t)v14;
    _CTServerConnectionSetTargetQueue(v14, a4);
    v19 = *a3;
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 1174405120;
    v24[2] = ___CTServerConnectionKeepAliveAssertionCreate_block_invoke;
    v24[3] = &unk_1E1532EE0;
    v24[5] = v14;
    object = v31;
    if (v31)
      xpc_retain(v31);
    else
      object = xpc_null_create();
    v24[4] = a5;
    _CTServerConnectionRegisterBlockForNotification(v19, CFSTR("kCTConnectionInvalidatedNotification"), (uint64_t)v24);
    xpc_release(object);
    object = 0;
  }
  v5 = v6 & 0xFFFFFFFF00000000;
  v20 = CTLogPacket();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    memset(&v32, 0, sizeof(v32));
    ctu::cf::assign();
    v30 = v32;
    v21 = &v30;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if (*a3)
      v22 = "true";
    else
      v22 = "false";
    LODWORD(v32.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
    WORD2(v32.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v32.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v22;
    _os_log_impl(&dword_18425C000, v20, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionKeepAliveAssertionCreate() for name = %s assertion = %s", (uint8_t *)&v32, 0x16u);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  xpc_release(v26);
  xpc_release(v31);
  return v5 & 0xFFFFFFFF00000000 | v6;
}

uint64_t _CTServerConnectionCopyCurrentMTU(uint64_t a1, int *a2)
{
  uint64_t v2;
  NSObject *v5;
  int v6;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t xdict;
  xpc_object_t v11;
  xpc_object_t object;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kPacketGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v11 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v11;
    v13 = "kMTU";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v9);
    xpc_release(v9);
    v9 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kMTU"))
    {
      object = &xdict;
      v13 = "kMTU";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v8);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v8, 0);
      xpc_release(v8);
    }
    v5 = CTLogPacket();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a2;
      LODWORD(object) = 67109120;
      HIDWORD(object) = v6;
      _os_log_impl(&dword_18425C000, v5, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCopyCurrentMTU() mtu = %d", (uint8_t *)&object, 8u);
    }
    xpc_release(xdict);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionICloudAccountReset(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t v6;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kICloudAccountReset", &object, "kRequest", &v6);
  xpc_release(object);
  object = v6;
  v6 = xpc_null_create();
  xpc_release(v6);
  v2 = CTLogPacket();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl(&dword_18425C000, v2, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionICloudAccountReset()", (uint8_t *)&v6, 2u);
  }
  v4 = SendXpcMessage(a1, &object, 0, v3);
  xpc_release(object);
  return v4;
}

uint64_t _CTServerConnectionExecuteCommand(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  xpc_object_t v8;
  void *v9;
  xpc_object_t v10;
  void *v11;
  xpc_object_t v12;
  NSObject *v13;
  uint64_t v15;
  uint64_t v16;
  uint8_t buf[8];
  xpc_object_t object;

  v4 = 0x1600000001;
  if (a1 && a2)
  {
    if (a4)
      *a4 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kExecuteCmd", &object, "kRequest", (xpc_object_t *)buf);
    xpc_release(object);
    v8 = *(xpc_object_t *)buf;
    object = *(xpc_object_t *)buf;
    *(_QWORD *)buf = xpc_null_create();
    xpc_release(*(xpc_object_t *)buf);
    v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kName", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    if (a3)
    {
      v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(v8, "kArgs", v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
    }
    v13 = CTLogPacket();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18425C000, v13, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionExecuteCommand()", buf, 2u);
    }
    *(_QWORD *)buf = xpc_null_create();
    v4 = SendXpcMessage(a1, &object, (xpc_object_t *)buf);
    if (a4
      && MEMORY[0x186DBAE5C](*(_QWORD *)buf) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(*(xpc_object_t *)buf, "kArgs"))
    {
      v16 = 0;
      xpc_dictionary_get_value(*(xpc_object_t *)buf, "kArgs");
      v15 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v16, (CFTypeRef *)&v15);
      *a4 = v16;
    }
    xpc_release(*(xpc_object_t *)buf);
    xpc_release(object);
  }
  return v4;
}

uint64_t _CTServerConnectionSimRefresh(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  NSObject *v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSimRefresh", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kSimSlotIdentifier", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_18425C000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSimRefresh()", (uint8_t *)&v10, 2u);
  }
  v10 = xpc_null_create();
  v8 = SendXpcMessage(a1, &object, &v10);
  xpc_release(v10);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionCsVoiceSupported(uint64_t a1, unsigned int a2, unsigned int a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  NSObject *v11;
  uint64_t v12;
  xpc_object_t v14;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCsVoiceStatus", &object, "kRequest", &v14);
  xpc_release(object);
  v6 = v14;
  object = v14;
  v14 = xpc_null_create();
  xpc_release(v14);
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kSimSlotIdentifier", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create(a3);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kCsVoiceSupported", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = CTLogPacket();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14) = 0;
    _os_log_impl(&dword_18425C000, v11, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionCsVoiceSupported()", (uint8_t *)&v14, 2u);
  }
  v14 = xpc_null_create();
  v12 = SendXpcMessage(a1, &object, &v14);
  xpc_release(v14);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionProvisionLazuli(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  NSObject *v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kProvisionLazuli", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kSimSlotIdentifier", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = CTLogPacket();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_18425C000, v7, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionProvisionLazuli()", (uint8_t *)&v10, 2u);
  }
  v10 = xpc_null_create();
  v8 = SendXpcMessage(a1, &object, &v10);
  xpc_release(v10);
  xpc_release(object);
  return v8;
}

os_log_t ___ZN12_GLOBAL__N_131sGetCellularDataSwitchLogHandleEv_block_invoke()
{
  os_log_t result;

  result = os_log_create(kCTLoggingSubsystem, "CellularDataSwitch");
  return result;
}

void MMSMimePart::MMSMimePart(MMSMimePart *this, char *a2, unint64_t a3, MMSContentType *a4)
{
  std::vector<char> *v8;

  MMSHeaderContainer::MMSHeaderContainer(this);
  v8->__begin_ = (std::vector<char>::pointer)&off_1E152C4C8;
  v8[3].__end_ = 0;
  v8[3].__end_cap_.__value_ = 0;
  v8[3].__begin_ = 0;
  MMSMimePart::setBody(v8, a2, a3);
  if (a4)
    MMSHeaderContainer::setContentType(this, a4);
}

void MMSMimePart::MMSMimePart(MMSMimePart *this)
{
  std::vector<char> *v1;

  MMSHeaderContainer::MMSHeaderContainer(this);
  v1->__begin_ = (std::vector<char>::pointer)&off_1E152C4C8;
  v1[3].__end_ = 0;
  v1[3].__end_cap_.__value_ = 0;
  v1[3].__begin_ = 0;
  MMSMimePart::setBody(v1, 0, 0);
}

void MMSMimePart::setBody(std::vector<char> *this, char *a2, unint64_t a3)
{
  std::vector<char> *v6;
  char *value;
  std::vector<char>::pointer end;
  uint64_t v9;
  std::vector<char>::pointer begin;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;

  this[4].__begin_ = (std::vector<char>::pointer)a3;
  v6 = this + 3;
  std::vector<unsigned char>::reserve(this + 3, a3 + 1);
  std::vector<char>::__assign_with_size[abi:nn180100]<char const*,char const*>(v6, a2, &a2[a3], a3);
  end = this[3].__end_;
  value = this[3].__end_cap_.__value_;
  if (end >= value)
  {
    begin = v6->__begin_;
    v11 = (_BYTE *)(end - v6->__begin_);
    v12 = (unint64_t)(v11 + 1);
    if ((uint64_t)(v11 + 1) < 0)
      abort();
    v13 = value - begin;
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)operator new(v14);
    else
      v15 = 0;
    v16 = &v15[v14];
    v11[(_QWORD)v15] = 0;
    v9 = (uint64_t)&v11[(_QWORD)v15 + 1];
    if (end == begin)
    {
      v15 = &v11[(_QWORD)v15];
    }
    else
    {
      v17 = &end[~(unint64_t)begin];
      do
      {
        v18 = *--end;
        (v17--)[(_QWORD)v15] = v18;
      }
      while (end != begin);
      end = v6->__begin_;
    }
    this[3].__begin_ = v15;
    this[3].__end_ = (std::vector<char>::pointer)v9;
    this[3].__end_cap_.__value_ = v16;
    if (end)
      operator delete(end);
  }
  else
  {
    *end = 0;
    v9 = (uint64_t)(end + 1);
  }
  this[3].__end_ = (std::vector<char>::pointer)v9;
}

void MMSMimePart::~MMSMimePart(MMSMimePart *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E152C4C8;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  MMSHeaderContainer::~MMSHeaderContainer(this);
}

{
  MMSMimePart::~MMSMimePart(this);
  JUMPOUT(0x186DBA454);
}

_QWORD *getMMSVersion(void)
{
  _QWORD *result;
  _QWORD *v1;

    return (_QWORD *)getMMSVersion(void)::mmsVersion;
  v1 = (_QWORD *)operator new();
  result = std::string::basic_string[abi:nn180100]<0>(v1, "MMS 1.2");
  getMMSVersion(void)::mmsVersion = (uint64_t)result;
  return result;
}

uint64_t initEncodingMap(void)
{
  const std::string *MMSVersion;
  _QWORD *v1;
  MMSHeaderEncodingMap *v2;
  MMSBinaryHeader *v3;
  MMSBinaryHeader *v4;
  MMSBinaryHeader *v5;
  MMSBinaryHeader *v6;
  MMSBinaryHeader *v7;
  MMSBinaryHeader *v8;
  MMSEnumerationHeader *Prototype;
  MMSEnumerationHeader *v10;
  double v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint8_t v16[16];
  void *__p[2];
  uint64_t v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25[2];
  __int128 v26;
  _OWORD v27[10];

  memset(v27, 0, sizeof(v27));
  *(_OWORD *)v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  MMSVersion = (const std::string *)getMMSVersion();
  std::istringstream::basic_istringstream[abi:nn180100](&v20, MMSVersion, 8);
  v18 = 0;
  v19 = 0.0;
  __p[0] = 0;
  __p[1] = 0;
  v1 = std::operator>>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v20, (uint64_t)__p);
  MEMORY[0x186DBA34C](v1, &v19);
  v2 = (MMSHeaderEncodingMap *)operator new();
  MMSHeaderEncodingMap::MMSHeaderEncodingMap(v2);
  v3 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v3, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v2, 1, "Accept-Charset", v3);
  v4 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v4, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v2, 14, "Content-Location", v4);
  v5 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v5, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v2, 18, "Date", v5);
  v6 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v6, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v2, 28, "Location", v6);
  v7 = (MMSBinaryHeader *)operator new();
  MMSEncodedStringHeader::MMSEncodedStringHeader(v7, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v2, 48, "X-Wap-Content-URI", v7);
  v8 = (MMSBinaryHeader *)operator new();
  MMSQuotedStringHeader::MMSQuotedStringHeader(v8, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v2, 64, "Content-ID", v8);
  Prototype = MMSContentDispositionHeader::createPrototype(0);
  MMSHeaderEncodingMap::addEncoding(v2, 46, "Content-Disposition", Prototype);
  v10 = MMSContentDispositionHeader::createPrototype((MMSContentDispositionHeader *)1);
  MMSHeaderEncodingMap::addEncoding(v2, 69, "Content-Disposition", v10);
  v11 = v19;
  v12 = sMmsPduLog();
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
  if (v11 >= 1.4)
  {
    if (v13)
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_18425C000, v12, OS_LOG_TYPE_INFO, "Using 0x45 for kMMSHeaderNameContentDisposition", v16, 2u);
    }
    v14 = 69;
  }
  else
  {
    if (v13)
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_18425C000, v12, OS_LOG_TYPE_INFO, "Using 0x2E for kMMSHeaderNameContentDisposition our version", v16, 2u);
    }
    v14 = 46;
  }
  MMSContentDispositionHeader::setContentDispositionEncodingByte(v14);
  _encodingMap = (uint64_t)v2;
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v20 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v20 + *(_QWORD *)(v20 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v21 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v26) < 0)
    operator delete(v25[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x186DBA418]((char *)v27 + 8);
}

uint64_t MMSMimePart::encodingMap(MMSMimePart *this)
{
  uint64_t result;

  result = _encodingMap;
  if (!_encodingMap)
  {
    initEncodingMap();
    return _encodingMap;
  }
  return result;
}

uint64_t MMSMimePart::prettyMMSMimePart@<X0>(std::string *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _OWORD v10[4];
  void *v11[2];
  __int128 v12;
  __int128 v13;
  _BYTE v14[144];
  uint64_t v15;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v12 = 0u;
  v13 = 0u;
  *(_OWORD *)v11 = 0u;
  memset(v10, 0, sizeof(v10));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v10);
  MMSHeaderContainer::prettyHeaders(this, a2, 0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v10 + 8, a3);
  *(_QWORD *)&v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(*(_QWORD *)&v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v10[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v12) < 0)
    operator delete(v11[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x186DBA418](v14);
}

_QWORD *MMSMimePart::prettyContentBody@<X0>(void **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  int v7;
  BOOL v8;
  char *v11;

  v4 = MMSHeaderContainer::contentTypeHeader((MMSHeaderContainer *)this);
  if (v4)
  {
    if (*((_DWORD *)this + 24) <= 0x9Fu)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 16))(*(_QWORD *)(v4 + 24));
        if (!strcmp(v6, "text"))
        {
          v7 = MMSParameterContainer::charset((MMSParameterContainer *)(v5 + 8));
          v8 = !v7 || v7 == 3;
          if (v8 || v7 == 106)
            return std::string::basic_string[abi:nn180100](a2, this[9], *((unsigned int *)this + 24));
        }
      }
    }
    v11 = "Body content invalid";
  }
  else
  {
    v11 = "\t** no Content-Type header\n";
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v11);
}

_QWORD *std::vector<char>::__assign_with_size[abi:nn180100]<char const*,char const*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      abort();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<char>::__vallocate[abi:nn180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<char>::__vallocate[abi:nn180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    abort();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *std::istringstream::basic_istringstream[abi:nn180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FD8];
  v7 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v8 = (uint64_t)(a1 + 2);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v9;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:nn180100](v8, a2, a3 | 8);
  return a1;
}

_QWORD *std::operator>>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  const std::ios_base *v5;
  uint64_t width;
  const std::locale::facet *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  std::locale v19;
  char v20;

  v20 = 0;
  MEMORY[0x186DBA334](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = a1 + 5;
  v5 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  width = v5->__width_;
  std::ios_base::getloc(v5);
  v7 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v19);
  v8 = 0;
  if (width <= 1)
    v9 = 1;
  else
    v9 = width;
  if (width >= 1)
    v10 = v9;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v4 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v4 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = (_QWORD *)(*a1 - 24);
      *(_QWORD *)((char *)a1 + *v17 + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = (_QWORD *)(*a1 - 24);
  *(_QWORD *)((char *)a1 + *v17 + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *v17), *(_DWORD *)((char *)a1 + *v17 + 32) | v16);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:nn180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_DWORD *)(a1 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:nn180100](a1);
  return a1;
}

void std::stringbuf::__init_buf_ptrs[abi:nn180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void sub_18435B800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v29 = v28;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18435B94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v19;

  _Unwind_Resume(a1);
}

void sub_18435BB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

void sub_18435BCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v18;

  _Unwind_Resume(a1);
}

void sub_18435BDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18435BEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  _Unwind_Resume(a1);
}

void sub_18435C054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_18435C1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_18435C368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionGetTemperature(uint64_t a1, unsigned int a2, _BYTE *a3, _DWORD *a4, _DWORD *a5)
{
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v12;
  xpc_object_t v14;
  xpc_object_t object;
  const char *v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kBatteryMeasurementModelGetProperty", &object, "kRequest", &v18);
  xpc_release(object);
  xdict = v18;
  v18 = xpc_null_create();
  xpc_release(v18);
  object = &xdict;
  v16 = "kBatteryMeasurementModelTemperature";
  xpc::dict::object_proxy::operator=((uint64_t)&object, &v17);
  xpc_release(v17);
  v17 = 0;
  v10 = xpc_int64_create(a2);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kBatteryMeasurementModelTemperatureSensor", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v18 = xpc_null_create();
  v12 = SendXpcMessage(a1, &xdict, &v18);
  *a3 = 0;
  if (MEMORY[0x186DBAE5C](v18) == MEMORY[0x1E0C812F8])
  {
    object = &v18;
    v16 = "kBatteryMeasurementModelValid";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v14);
    *a3 = xpc::dyn_cast_or_default((xpc *)&v14, 0);
    xpc_release(v14);
    object = &v18;
    v16 = "kBatteryMeasurementModelTemperatureFiltered";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v14);
    *a4 = xpc::dyn_cast_or_default((xpc *)&v14, 0);
    xpc_release(v14);
    object = &v18;
    v16 = "kBatteryMeasurementModelTemperatureRaw";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v14);
    *a5 = xpc::dyn_cast_or_default((xpc *)&v14, 0);
    xpc_release(v14);
  }
  xpc_release(v18);
  xpc_release(xdict);
  return v12;
}

uint64_t _CTServerConnectionSetMaxTemperature(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t object[2];
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kBatteryMeasurementModelSetProperty", object, "kRequest", &v11);
  xpc_release(object[0]);
  xdict = v11;
  v11 = xpc_null_create();
  xpc_release(v11);
  object[0] = &xdict;
  object[1] = "kBatteryMeasurementModelMaxTemperature";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v10);
  xpc_release(v10);
  v10 = 0;
  v4 = xpc_int64_create(a2);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kBatteryMeasurementModelTemperatureMax", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  v7 = SendXpcMessage(a1, &xdict, 0, v6);
  xpc_release(xdict);
  return v7;
}

uint64_t _CTServerConnectionSetPeriodicTemperatureUpdate(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t object[2];
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kBatteryMeasurementModelSetProperty", object, "kRequest", &v11);
  xpc_release(object[0]);
  xdict = v11;
  v11 = xpc_null_create();
  xpc_release(v11);
  object[0] = &xdict;
  object[1] = "kBatteryMeasurementModelTemperatureUpdate";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v10);
  xpc_release(v10);
  v10 = 0;
  v4 = xpc_int64_create(a2);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kBatteryMeasurementModelTemperatureUpdateSeconds", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  v7 = SendXpcMessage(a1, &xdict, 0, v6);
  xpc_release(xdict);
  return v7;
}

uint64_t MMSIntegerHeader::MMSIntegerHeader(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(_QWORD *)result = &off_1E152C960;
  *(_DWORD *)(result + 20) = a3;
  return result;
}

uint64_t MMSIntegerHeader::parseValue(MMSIntegerHeader *this, const char *__str)
{
  *((_DWORD *)this + 5) = strtoul(__str, 0, 0);
  return 1;
}

uint64_t MMSIntegerHeader::decodeValue(MMSIntegerHeader *this, MMSPduDecoder *a2)
{
  return MMSPduDecoder::decodeWspIntegerValue(a2, (unsigned int *)this + 5);
}

uint64_t MMSIntegerHeader::encodeValue(MMSIntegerHeader *this, MMSPduEncoder *a2)
{
  MMSPduEncoder::encodeWspIntegerValue(a2, *((_DWORD *)this + 5));
  return 1;
}

uint64_t MMSIntegerHeader::createInstance(MMSIntegerHeader *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = MMSBinaryHeader::MMSBinaryHeader(v2, *((_QWORD *)this + 1));
  *(_QWORD *)result = &off_1E152C960;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t MMSIntegerHeader::copy(MMSIntegerHeader *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *(_QWORD *)result = &off_1E152C960;
  *(_DWORD *)(result + 20) = *((_DWORD *)this + 5);
  return result;
}

const char *MMSIntegerHeader::headerTypeName(MMSIntegerHeader *this)
{
  return "integer";
}

uint64_t MMSIntegerHeader::valueAsString(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  _OWORD v6[4];
  void *__p[2];
  __int128 v8;
  __int128 v9;
  _BYTE v10[144];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v8 = 0u;
  v9 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v6, 0, sizeof(v6));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v6);
  std::ostream::operator<<();
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v6 + 8, &v4);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)&v6[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(*(_QWORD *)&v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v6[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v8) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186DBA418](v10);
  return 1;
}

uint64_t MMSVersionHeader::MMSVersionHeader(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(_DWORD *)(result + 20) = a3;
  *(_QWORD *)result = &off_1E152CAC8;
  return result;
}

uint64_t MMSVersionHeader::parseValue(MMSVersionHeader *this, const char *__s1)
{
  int v4;

  if (!strcmp(__s1, "MMS 1.0"))
  {
    v4 = 16;
  }
  else if (!strcmp(__s1, "MMS 1.1"))
  {
    v4 = 17;
  }
  else if (!strcmp(__s1, "MMS 1.2"))
  {
    v4 = 18;
  }
  else
  {
    v4 = 19;
  }
  *((_DWORD *)this + 5) = v4;
  return 1;
}

uint64_t MMSVersionHeader::valueAsString(uint64_t a1, std::string *this)
{
  char **v2;

  switch(*(_DWORD *)(a1 + 20))
  {
    case 0x10:
      v2 = kMMSMessageVersion1_0;
      goto LABEL_8;
    case 0x11:
      v2 = kMMSMessageVersion1_1;
      goto LABEL_8;
    case 0x12:
      v2 = kMMSMessageVersion1_2;
      goto LABEL_8;
    case 0x13:
      v2 = kMMSMessageVersion1_3;
LABEL_8:
      std::string::__assign_external(this, *v2);
      break;
    default:
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      {
        this->__r_.__value_.__l.__size_ = 7;
        this = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&this->__r_.__value_.__s + 23) = 7;
      }
      strcpy((char *)this, "Unknown");
      break;
  }
  return 1;
}

uint64_t MMSVersionHeader::createInstance(MMSVersionHeader *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = MMSBinaryHeader::MMSBinaryHeader(v2, *((_QWORD *)this + 1));
  *(_DWORD *)(result + 20) = 0;
  *(_QWORD *)result = &off_1E152CAC8;
  return result;
}

uint64_t MMSVersionHeader::copy(MMSVersionHeader *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *(_DWORD *)(result + 20) = *((_DWORD *)this + 5);
  *(_QWORD *)result = &off_1E152CAC8;
  return result;
}

uint64_t MMSDateHeader::MMSDateHeader(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *(_DWORD *)(result + 20) = a3;
  *(_QWORD *)result = &off_1E152C4F0;
  return result;
}

uint64_t MMSDateHeader::parseValue(MMSDateHeader *this, const char *a2)
{
  uint64_t result;
  time_t v4;
  tm v5;

  memset(&v5, 0, sizeof(v5));
  result = (uint64_t)strptime(a2, "%a %b %d %T %Y\n", &v5);
  if (result)
  {
    v4 = timegm(&v5);
    if (v4 == -1)
    {
      return 0;
    }
    else
    {
      *((_DWORD *)this + 5) = v4;
      return 1;
    }
  }
  return result;
}

BOOL MMSDateHeader::valueAsString(uint64_t a1, std::string *a2)
{
  int v3;
  tm v5;
  time_t v6;
  std::string::value_type __s[8];
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 20);
  *(_QWORD *)__s = 0;
  v8 = 0;
  v10 = 0;
  v9 = 0;
  memset(&v5, 0, sizeof(v5));
  gmtime_r(&v6, &v5);
  strftime(__s, 0x1AuLL, "%a %b %d %T %Y\n", &v5);
  v3 = __s[0];
  if (__s[0])
    std::string::__assign_external(a2, __s);
  return v3 != 0;
}

uint64_t MMSDateHeader::createInstance(MMSDateHeader *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = MMSBinaryHeader::MMSBinaryHeader(v2, *((_QWORD *)this + 1));
  *(_DWORD *)(result + 20) = 0;
  *(_QWORD *)result = &off_1E152C4F0;
  return result;
}

uint64_t MMSDateHeader::copy(MMSDateHeader *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *(_DWORD *)(result + 20) = *((_DWORD *)this + 5);
  *(_QWORD *)result = &off_1E152C4F0;
  return result;
}

const char *MMSDateHeader::headerTypeName(MMSDateHeader *this)
{
  return "date";
}

void MMSIntegerHeader::~MMSIntegerHeader(MMSIntegerHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);
  JUMPOUT(0x186DBA454);
}

void MMSVersionHeader::~MMSVersionHeader(MMSVersionHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);
  JUMPOUT(0x186DBA454);
}

void MMSDateHeader::~MMSDateHeader(MMSDateHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);
  JUMPOUT(0x186DBA454);
}

const char *CTSimDeactivationEventSourceTypeAsString(uint64_t a1)
{
  const char *v1;

  v1 = "CTSimDeactivationEventSourceTypeUnknown";
  if (a1 == 1)
    v1 = "CTSimDeactivationEventSourceTypeCellular";
  if (a1 == 2)
    return "CTSimDeactivationEventSourceTypeCarrierEntitlement";
  else
    return v1;
}

unint64_t _CTServerConnectionCopyPostponementStatus(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unsigned int v3;
  xpc_object_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  CFTypeRef v11;
  void **v12;
  const object *v13;
  uint64_t (*v14)(uint64_t);
  char *v15;
  NSObject *v16;
  xpc_object_t v18;
  CFTypeRef v19;
  xpc_object_t xdict;
  xpc_object_t v21;
  xpc_object_t v22;
  void *__p[2];
  uint64_t v24;
  xpc_object_t object;
  CFTypeRef cf;
  CFTypeRef v27;
  uint8_t buf[16];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000000;
  v3 = 1;
  if (a1 && a2)
  {
    *a2 = 0;
    v6 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)buf);
    xpc::dict_creator::operator()<char const*>("kPostponementGetStatus", v6, "kRequest", __p);
    xpc_release(*(xpc_object_t *)buf);
    v22 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    v21 = xpc_null_create();
    v7 = SendXpcMessage(a1, &v22, &v21);
    v3 = v7;
    if (HIDWORD(v7))
    {
      v2 = v7 & 0xFFFFFFFF00000000;
      goto LABEL_43;
    }
    v8 = MEMORY[0x186DBAE5C](v21);
    v9 = MEMORY[0x1E0C812F8];
    if (v8 != MEMORY[0x1E0C812F8])
    {
      v2 = 0x500000000;
      v3 = 1;
LABEL_43:
      xpc_release(v21);
      xpc_release(v22);
      return v3 | v2;
    }
    xdict = 0;
    *(_QWORD *)buf = &v21;
    *(_QWORD *)&buf[8] = "kPostponementInfoDictionary";
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)buf, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == v9)
    {
      if (xpc_dictionary_get_count(xdict))
      {
        v19 = 0;
        *(_QWORD *)buf = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v19, (CFTypeRef *)buf);
        v11 = v19;
        v10 = xdict;
        v18 = xdict;
        v19 = 0;
        *a2 = v11;
        if (v10)
          xpc_retain(v10);
        else
          v18 = xpc_null_create();
        v27 = 0;
        memset(buf, 0, sizeof(buf));
        v29 = 0;
        ctu::cf::assign();
        *(_OWORD *)__p = *(_OWORD *)buf;
        v24 = v29;
        v12 = __p;
        if (v29 < 0)
          v12 = (void **)__p[0];
        *(_QWORD *)buf = &v18;
        *(_QWORD *)&buf[8] = v12;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &object);
        xpc::bridge((xpc *)&object, v13);
        ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v27, &cf);
        if (cf)
          CFRelease(cf);
        xpc_release(object);
        object = 0;
        if (SHIBYTE(v24) < 0)
          operator delete(__p[0]);
        v14 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
        if (!v27)
          v14 = 0;
        if (v14)
        {
          if (CFEqual(v27, CFSTR("kCTPostponementStatusNotReady")))
          {
            v15 = "kCTPostponementStatusNotReady";
          }
          else if (CFEqual(v27, CFSTR("kCTPostponementStatusReady")))
          {
            v15 = "kCTPostponementStatusReady";
          }
          else if (CFEqual(v27, CFSTR("kCTPostponementStatusActivated")))
          {
            v15 = "kCTPostponementStatusActivated";
          }
          else if (CFEqual(v27, CFSTR("kCTPostponementStatusRejected")))
          {
            v15 = "kCTPostponementStatusRejected";
          }
          else
          {
            v15 = CFEqual(v27, CFSTR("kCTPostponementStatusError")) ? "kCTPostponementStatusError" : "unknown";
          }
          v16 = CTLogPostponement();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v15;
            _os_log_impl(&dword_18425C000, v16, OS_LOG_TYPE_DEFAULT, "Postponement status: %s", buf, 0xCu);
          }
        }
        if (v27)
          CFRelease(v27);
        xpc_release(v18);
        v18 = 0;
        if (v19)
          CFRelease(v19);
        v2 = 0;
        goto LABEL_42;
      }
      v2 = 0x2300000000;
    }
    else
    {
      v2 = 0x2D00000000;
    }
    v3 = 1;
LABEL_42:
    xpc_release(xdict);
    goto LABEL_43;
  }
  return v3 | v2;
}

unint64_t _CTServerConnectionSetPostponementTicket(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  unint64_t v8;
  int v9;
  xpc_object_t object[2];
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;

  v2 = 0x1600000000;
  v3 = 1;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPostponementSetTicket", object, "kRequest", &v13);
    xpc_release(object[0]);
    v5 = v13;
    v14 = v13;
    v13 = xpc_null_create();
    xpc_release(v13);
    v6 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v6)
      v6 = xpc_null_create();
    xpc_dictionary_set_value(v5, "kPostponementTicket", v6);
    v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    v13 = xpc_null_create();
    v8 = SendXpcMessage(a1, &v14, &v13);
    v3 = v8;
    if (HIDWORD(v8))
    {
      v2 = v8 & 0xFFFFFFFF00000000;
    }
    else if (MEMORY[0x186DBAE5C](v13) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v13;
      object[1] = "kPostponementTicketSet";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v12);
      v9 = xpc::dyn_cast_or_default((xpc *)&v12, 0);
      xpc_release(v12);
      if (v9)
        v2 = 0;
      else
        v2 = 0x2300000000;
      if (!v9)
        v3 = 1;
    }
    else
    {
      v2 = 0;
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  return v3 | v2;
}

unint64_t _CTServerConnectionLockPostponementTicket(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v4;
  int v5;
  BOOL v6;
  xpc_object_t object[2];
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  if (a1)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPostponementLockTicket", object, "kRequest", &v10);
    xpc_release(object[0]);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &v10);
    v3 = v2;
    if (HIDWORD(v2))
    {
      v4 = v2 & 0xFFFFFFFF00000000;
    }
    else if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v10;
      object[1] = "kPostponementTicketLocked";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      v5 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
      xpc_release(v9);
      v6 = v5 == 0;
      if (v5)
        v4 = 0;
      else
        v4 = 0x2300000000;
      if (v6)
        v3 = 1;
    }
    else
    {
      v4 = 0;
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  else
  {
    v4 = 0x1600000000;
    v3 = 1;
  }
  return v3 | v4;
}

unint64_t _CTServerConnectionUnlockPostponementTicket(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v4;
  int v5;
  BOOL v6;
  xpc_object_t object[2];
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  if (a1)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kPostponementUnlockTicket", object, "kRequest", &v10);
    xpc_release(object[0]);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &v10);
    v3 = v2;
    if (HIDWORD(v2))
    {
      v4 = v2 & 0xFFFFFFFF00000000;
    }
    else if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v10;
      object[1] = "kPostponementTicketLocked";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      v5 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
      xpc_release(v9);
      v6 = v5 == 0;
      if (v5)
        v4 = 0x2300000000;
      else
        v4 = 0;
      if (!v6)
        v3 = 1;
    }
    else
    {
      v4 = 0;
    }
    xpc_release(v10);
    xpc_release(v11);
  }
  else
  {
    v4 = 0x1600000000;
    v3 = 1;
  }
  return v3 | v4;
}

uint64_t _CTServerConnectionGetRemoteServerURL(uint64_t a1, ctu *a2, _QWORD *a3)
{
  xpc_object_t v6;
  const void *v7;
  xpc_object_t v8;
  uint64_t v9;
  const object *v10;
  xpc_object_t object[2];
  xpc_object_t v13;
  CFTypeRef cf;
  uint64_t v15;
  xpc_object_t value;
  xpc_object_t xdict;
  xpc_object_t v18;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleGetRemoteCardSettingsServerURL", object, "kRequest", &xdict);
  xpc_release(object[0]);
  v6 = xdict;
  v18 = xdict;
  xdict = xpc_null_create();
  xpc_release(xdict);
  ctu::cf_to_xpc(a2, v7);
  xpc_dictionary_set_value(v6, "kCarrierBundleWatchBundleMatchCriteria", value);
  v8 = value;
  value = xpc_null_create();
  xpc_release(v8);
  xpc_release(value);
  value = 0;
  xdict = xpc_null_create();
  v9 = SendXpcMessage(a1, &v18, &xdict);
  *a3 = 0;
  if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
    && xpc_dictionary_get_value(xdict, "kCarrierBundleRemoteCardSettingsServerURL"))
  {
    v15 = 0;
    object[0] = &xdict;
    object[1] = "kCarrierBundleRemoteCardSettingsServerURL";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v13);
    xpc::bridge((xpc *)&v13, v10);
    ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v15, &cf);
    if (cf)
      CFRelease(cf);
    xpc_release(v13);
    *a3 = v15;
  }
  xpc_release(xdict);
  xpc_release(v18);
  return v9;
}

uint64_t _CTServerConnectionResetCarrierBundle(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleTriggerResetCarrierBundle", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionGetUpdatedCarrierBundle(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v4;
  std::string *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v10;
  std::string v11;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  memset(&v11, 0, sizeof(v11));
  v2 = *(_QWORD *)(a1 + 24);
  if (*(char *)(v2 + 111) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(v2 + 88), *(_QWORD *)(v2 + 96));
  else
    v11 = *(std::string *)(v2 + 88);
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleTriggerGetUpdatedCarrierBundle", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v11;
  else
    v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
  v6 = xpc_string_create((const char *)v5);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kName", v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v3 = SendXpcMessage(a1, &object, 0, v8);
  xpc_release(object);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v3;
}

uint64_t _CTServerConnectionInstallCarrierBundle(uint64_t a1, ctu *a2)
{
  xpc_object_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v11;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleTriggerInstallCarrierBundle", &object, "kRequest", &v11);
  xpc_release(object);
  v4 = v11;
  object = v11;
  v11 = xpc_null_create();
  xpc_release(v11);
  ctu::cf_to_xpc(a2, v5);
  xpc_dictionary_set_value(v4, "kCarrierBundlePathForBundle", value);
  v6 = value;
  valuea = xpc_null_create();
  xpc_release(v6);
  xpc_release(valuea);
  v11 = xpc_null_create();
  v7 = SendXpcMessage(a1, &object, &v11);
  xpc_release(v11);
  xpc_release(object);
  return v7;
}

uint64_t _CTServerConnectionSetOTAServerOverride(uint64_t a1, ctu *a2)
{
  xpc_object_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v12;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleSetOTAServerOverrideUrl", &object, "kRequest", &v12);
  xpc_release(object);
  v4 = v12;
  object = v12;
  v12 = xpc_null_create();
  xpc_release(v12);
  ctu::cf_to_xpc(a2, v5);
  xpc_dictionary_set_value(v4, "kCarrierBundleOTAServerOverrideUrl", value);
  v6 = value;
  valuea = xpc_null_create();
  xpc_release(v6);
  xpc_release(valuea);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionGetOTAServerOverride(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  const object *v5;
  xpc_object_t object[2];
  xpc_object_t v8;
  CFTypeRef cf;
  uint64_t v10;
  xpc_object_t xdict;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierBundleGetOTAServerOverrideUrl", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v12 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v12, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kCarrierBundleOTAServerOverrideUrl"))
    {
      v10 = 0;
      object[0] = &xdict;
      object[1] = "kCarrierBundleOTAServerOverrideUrl";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      xpc::bridge((xpc *)&v8, v5);
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v10, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v8);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionModifyAttachAPNSettings(uint64_t a1, ctu *a2)
{
  xpc_object_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v12;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleModifyAttachAPNSettings", &object, "kRequest", &v12);
  xpc_release(object);
  v4 = v12;
  object = v12;
  v12 = xpc_null_create();
  xpc_release(v12);
  ctu::cf_to_xpc(a2, v5);
  xpc_dictionary_set_value(v4, "kCarrierBundleAttachAPNSettings", value);
  v6 = value;
  valuea = xpc_null_create();
  xpc_release(v6);
  xpc_release(valuea);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionGetAttachAPNSettings(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  const object *v5;
  xpc_object_t v7;
  CFTypeRef cf;
  uint64_t v9;
  xpc_object_t object;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t xdict;
  xpc_object_t v14;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCarrierBundleGetAttachAPNSettings", &object, "kRequest", &xdict);
    xpc_release(object);
    v14 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v14;
    v11 = "kCarrierBundleAttachAPNSettings";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v12);
    xpc_release(v12);
    v12 = 0;
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v14, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kCarrierBundleAttachAPNSettings"))
    {
      v9 = 0;
      object = &xdict;
      v11 = "kCarrierBundleAttachAPNSettings";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v7);
      xpc::bridge((xpc *)&v7, v5);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v9, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v7);
      *a2 = v9;
    }
    xpc_release(xdict);
    xpc_release(v14);
  }
  return v2;
}

uint64_t _CTServerConnectionGetRemoteBundleInfo(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  const object *v5;
  xpc_object_t object[2];
  xpc_object_t v8;
  CFTypeRef cf;
  uint64_t v10;
  xpc_object_t xdict;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierBundleGetRemoteBundleInfo", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v12 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v12, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kCarrierBundleRemoteBundleInfo"))
    {
      v10 = 0;
      object[0] = &xdict;
      object[1] = "kCarrierBundleRemoteBundleInfo";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      xpc::bridge((xpc *)&v8, v5);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v10, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v8);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionSendRemoteRestoreToDefault(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierBundleTriggerRemoteRestoreToDefault", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

void MMSContentTypeHeader::MMSContentTypeHeader(MMSContentTypeHeader *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader((uint64_t)this, 0);
  *v1 = &off_1E152CC58;
  v1[3] = 0;
}

_QWORD *MMSContentTypeHeader::MMSContentTypeHeader(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *result = &off_1E152CC58;
  v5 = *a3;
  *a3 = 0;
  result[3] = v5;
  return result;
}

void MMSContentTypeHeader::~MMSContentTypeHeader(MMSContentTypeHeader *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E152CC58;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MMSBinaryHeader::~MMSBinaryHeader(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E152CC58;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MMSBinaryHeader::~MMSBinaryHeader(this);
  JUMPOUT(0x186DBA454);
}

BOOL MMSContentTypeHeader::parseValue(MMSContentTypeHeader *this, MMSContentType *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  MMSContentType::contentTypeForName(a2, &v7);
  v3 = v7;
  v7 = 0;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v7;
    v7 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return *((_QWORD *)this + 3) != 0;
}

BOOL MMSContentTypeHeader::decodeValue(MMSContentTypeHeader *this, MMSPduDecoder *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = MMSPduDecoder::decodeContentType(a2);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v3 = *((_QWORD *)this + 3);
  }
  return v3 != 0;
}

uint64_t MMSContentTypeHeader::encodeValue(MMSContentTypeHeader *this, MMSPduEncoder *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t, MMSPduEncoder *))(*(_QWORD *)result + 40))(result, a2);
  return result;
}

_QWORD *MMSContentTypeHeader::createInstance(MMSContentTypeHeader *this)
{
  uint64_t v2;
  _QWORD *result;

  v2 = operator new();
  result = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(v2, *((_QWORD *)this + 1));
  *result = &off_1E152CC58;
  result[3] = 0;
  return result;
}

uint64_t MMSContentTypeHeader::copy(MMSContentTypeHeader *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this) = &off_1E152CC58;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  *(_QWORD *)(v2 + 24) = v3;
  return v2;
}

uint64_t MMSContentTypeHeader::valueAsString(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    return MMSContentType::toString(v2, a2);
  if (*(char *)(a2 + 23) < 0)
  {
    *(_QWORD *)(a2 + 8) = 3;
    a2 = *(_QWORD *)a2;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 3;
  }
  *(_DWORD *)a2 = 2764586;
  return 1;
}

const char *MMSContentTypeHeader::headerTypeName(MMSContentTypeHeader *this)
{
  return "content-type";
}

void sub_184360798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843608CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184360A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184360B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184360CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_184360E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184360F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184361074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1843611A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843612D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184361408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184361534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184361668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184361794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1843618D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184361A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184361B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184361CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184361E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_184361F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_18436206C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1843621AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843622E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184362450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1843625A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1843627C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

double getEstimatedSendTimeOverStewieInSeconds(unint64_t a1)
{
  double v1;
  unint64_t v2;

  v1 = 0.0;
  if (a1)
  {
    if (a1 < 0xD)
    {
      v2 = 1;
LABEL_6:
      v1 = (double)(2 * vcvtpd_u64_f64(fmax(((double)v2 + -1.0) / 0.7 + 2.04081633 - (double)v2, 0.0)));
      return ceil((v1 + (double)v2 * 2.0) * 2.56) + 2.56;
    }
    v2 = (unint64_t)(ceil((double)(a1 - 11) / 17.0) + 1.0);
    if (v2)
      goto LABEL_6;
  }
  else
  {
    v2 = 0;
  }
  return ceil((v1 + (double)v2 * 2.0) * 2.56) + 2.56;
}

const char *EmCallTypeAsString(unsigned int a1)
{
  if (a1 > 5)
    return "Unknown";
  else
    return off_1E1532FE8[a1];
}

const char *callSourceModeAsString(unsigned int a1)
{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E1533018[a1];
}

const char *TTYTypeAsString(unsigned int a1)
{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E1533030[a1];
}

uint64_t _CTServerConnectionGetSIMStatus(uint64_t a1, __CFString **a2)
{
  uint64_t v2;
  __CFString *v5;
  unsigned int v6;
  xpc_object_t object[2];
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSubscriberGetSimState", object, "kRequest", &v10);
    xpc_release(object[0]);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &v10);
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v10;
      object[1] = "kSubscriberSimState";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      v6 = xpc::dyn_cast_or_default((xpc *)&v9, (const object *)8);
      xpc_release(v9);
      v5 = _CTServerConnectionSIMStatusToSIMStatusString(v6);
    }
    else
    {
      v5 = CFSTR("kCTSIMSupportSIMStatusReady");
    }
    *a2 = v5;
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

uint64_t _CTServerConnectionGetSIMTrayStatus(uint64_t a1, __CFString **a2)
{
  uint64_t v2;
  __CFString *v5;
  unsigned int v6;
  xpc_object_t object[2];
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSubscriberGetSimTrayStatus", object, "kRequest", &v10);
    xpc_release(object[0]);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v11, &v10);
    if (MEMORY[0x186DBAE5C](v10) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v10;
      object[1] = "kSubscriberSimTrayStatus";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      v6 = xpc::dyn_cast_or_default((xpc *)&v9, 0);
      xpc_release(v9);
      v5 = _CTServerConnectionSIMTrayStatusToSIMTrayStatusString(v6);
    }
    else
    {
      v5 = CFSTR("kCTSIMSupportSIMTrayStatusUnknown");
    }
    *a2 = v5;
    xpc_release(v10);
    xpc_release(v11);
  }
  return v2;
}

unint64_t _CTServerConnectionCopyMobileEquipmentInfo(uint64_t a1, xpc_object_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef cf;
  uint64_t v10;
  xpc_object_t object;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t xdict;
  xpc_object_t v15;

  if ((hasBaseband() & 1) != 0)
  {
    LODWORD(v4) = 22;
    LODWORD(v5) = 1;
    if (a1 && a2)
    {
      xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
      xpc::dict_creator::operator()<char const*>("kSubscriberGetMobileEquipmentInfo", &object, "kRequest", &xdict);
      xpc_release(object);
      v15 = xdict;
      xdict = xpc_null_create();
      xpc_release(xdict);
      xdict = xpc_null_create();
      v5 = SendXpcMessage(a1, &v15, &xdict);
      v6 = MEMORY[0x186DBAE5C](xdict);
      v7 = MEMORY[0x1E0C812F8];
      if (v6 != MEMORY[0x1E0C812F8])
      {
        *a2 = 0;
        LODWORD(v4) = 5;
        LODWORD(v5) = 1;
LABEL_19:
        xpc_release(xdict);
        xpc_release(v15);
        return v5 | ((unint64_t)v4 << 32);
      }
      if (xpc_dictionary_get_value(xdict, "kError"))
      {
        object = &xdict;
        v12 = "kError";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v13);
        LODWORD(v4) = xpc::dyn_cast_or_default((xpc *)&v13, 0);
      }
      else
      {
        v13 = 0;
        object = &xdict;
        v12 = "kSubscriberInfoDictionary";
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)&object, &v13);
        if (MEMORY[0x186DBAE5C](v13) == v7)
        {
          if (xpc_dictionary_get_count(v13))
          {
            object = 0;
            v10 = _CFXPCCreateCFObjectFromXPCObject();
            ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v10);
            cf = object;
            if (object)
              CFRetain(object);
            v4 = HIDWORD(v5);
            if (cf)
              CFRelease(cf);
            *a2 = object;
            goto LABEL_18;
          }
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(object) = 0;
            _os_log_impl(&dword_18425C000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Empty subscriber info dictionary count, assuming system is not ready", (uint8_t *)&object, 2u);
          }
          *a2 = 0;
          LODWORD(v4) = 35;
        }
        else
        {
          LODWORD(v4) = 45;
        }
        LODWORD(v5) = 1;
      }
LABEL_18:
      xpc_release(v13);
      goto LABEL_19;
    }
  }
  else
  {
    handleUnsupportedRequestForCurrentBundle("CopyMobileEquipmentInfo");
    LODWORD(v4) = 19;
    LODWORD(v5) = 1;
  }
  return v5 | ((unint64_t)v4 << 32);
}

void `anonymous namespace'::sMaybeLogMobileEquipmentDictionary(CFDictionaryRef *a1)
{
  CFDictionaryRef *v1;

  v1 = a1;
}

uint64_t _CTServerConnectionPINUnlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  void *v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (!a1 || !a2)
    return v2;
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    object = v4;
  }
  else
  {
    v5 = xpc_null_create();
    object = v5;
    if (!v5)
      goto LABEL_7;
  }
  if (MEMORY[0x186DBAE5C](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    v6 = v5;
    goto LABEL_9;
  }
LABEL_7:
  v6 = xpc_null_create();
  object = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_string_create("kSubscriberPinUnlock");
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kRequest", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kSubscriberPin", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v2 = SendXpcMessage(a1, &object, 0, v11);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionPUKUnlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  void *v10;
  xpc_object_t v11;
  void *v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t object;

  v3 = 0x1600000001;
  if (!a2 || !a1 || !a3)
    return v3;
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5)
  {
    v6 = v5;
    object = v5;
  }
  else
  {
    v6 = xpc_null_create();
    object = v6;
    if (!v6)
      goto LABEL_8;
  }
  if (MEMORY[0x186DBAE5C](v6) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v6);
    v7 = v6;
    goto LABEL_10;
  }
LABEL_8:
  v7 = xpc_null_create();
  object = v7;
LABEL_10:
  xpc_release(v6);
  v8 = xpc_string_create("kSubscriberPukUnlock");
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v7, "kRequest", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v7, "kSubscriberPin", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v7, "kSubscriberPuk", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v3 = SendXpcMessage(a1, &object, 0, v14);
  xpc_release(object);
  return v3;
}

unint64_t _CTServerConnectionCopyMobileSubscriberIdentity(uint64_t a1, _QWORD *a2)
{
  unint64_t SubscriberProperty;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;

  SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    v9 = xpc_null_create();
    *a2 = 0;
    v5 = v9;
    if (MEMORY[0x186DBAE5C](v9) != MEMORY[0x1E0C81350])
    {
      v8 = 0;
      v7 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v8, (CFTypeRef *)&v7);
      *a2 = v8;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionCreateEncryptedIdentity(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t SubscriberProperty;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;

  SubscriberProperty = 0x1600000001;
  if (a1 && a2 && a3)
  {
    v10 = xpc_null_create();
    *a3 = 0;
    v6 = v10;
    if (MEMORY[0x186DBAE5C](v10) != MEMORY[0x1E0C81350])
    {
      v9 = 0;
      v8 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v9, (CFTypeRef *)&v8);
      *a3 = v9;
    }
    xpc_release(v6);
  }
  return SubscriberProperty;
}

uint64_t _CTServerConnectionEvaluateMobileSubscriberIdentity(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  void *v11;
  xpc_object_t v12;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    object = v4;
  }
  else
  {
    v5 = xpc_null_create();
    object = v5;
    if (!v5)
      goto LABEL_7;
  }
  if (MEMORY[0x186DBAE5C](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    v7 = v5;
    goto LABEL_9;
  }
LABEL_7:
  v7 = xpc_null_create();
  object = v7;
LABEL_9:
  xpc_release(v5);
  v8 = xpc_string_create("kSubscriberEvaluateEncryptedIdentity");
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v7, "kRequest", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (a2)
  {
    v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kSubscriberEncryptedIdentity", v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
  }
  v6 = SendXpcMessage(a1, &object, 0, v10);
  xpc_release(object);
  return v6;
}

unint64_t _CTServerConnectionCopySIMIdentity(uint64_t a1, _QWORD *a2)
{
  unint64_t SubscriberProperty;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;

  SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    v9 = xpc_null_create();
    *a2 = 0;
    v5 = v9;
    if (MEMORY[0x186DBAE5C](v9) != MEMORY[0x1E0C81350])
    {
      v8 = 0;
      v7 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v8, (CFTypeRef *)&v7);
      *a2 = v8;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionGetRemainingPINAttemptCount(uint64_t a1, _DWORD *a2)
{
  unint64_t SubscriberProperty;
  void *v5;
  xpc_object_t v7;

  SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    v7 = xpc_null_create();
    *a2 = 99;
    v5 = v7;
    if (MEMORY[0x186DBAE5C](v7) != MEMORY[0x1E0C81350])
    {
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      v5 = v7;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionGetRemainingPUKAttemptCount(uint64_t a1, _DWORD *a2)
{
  unint64_t SubscriberProperty;
  void *v5;
  xpc_object_t v7;

  SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    v7 = xpc_null_create();
    *a2 = 0;
    v5 = v7;
    if (MEMORY[0x186DBAE5C](v7) != MEMORY[0x1E0C81350])
    {
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      v5 = v7;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionCopyMobileSubscriberCountryCode(uint64_t a1, _QWORD *a2)
{
  unint64_t SubscriberProperty;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;

  SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    v9 = xpc_null_create();
    *a2 = 0;
    v5 = v9;
    if (MEMORY[0x186DBAE5C](v9) != MEMORY[0x1E0C81350])
    {
      v8 = 0;
      v7 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v8, (CFTypeRef *)&v7);
      *a2 = v8;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

uint64_t _CTServerConnectionCopyMobileSubscriberHomeCountryList(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  unsigned int v9;
  xpc_object_t v10;
  const object *v11;
  uint64_t (*v12)(uint64_t);
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t object;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t xdict;
  xpc_object_t v20;

  v3 = 22;
  v4 = 1;
  if (a1 && a2 && a3)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSubscriberHomeCountryList", &object, "kRequest", &xdict);
    xpc_release(object);
    v20 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v8 = SendXpcMessage(a1, &v20, &xdict);
    v9 = v8;
    v3 = HIDWORD(v8);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      if (xpc_dictionary_get_value(xdict, "kError"))
      {
        object = &xdict;
        v17 = "kError";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v18);
        v3 = xpc::dyn_cast_or_default((xpc *)&v18, 0);
      }
      else
      {
        object = &xdict;
        v17 = "kSubscriberCountries";
        v18 = 0;
        xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &v18);
        v10 = 0;
        if (MEMORY[0x186DBAE5C](v18) == MEMORY[0x1E0C812C8])
        {
          v14 = v18;
          if (v18)
            xpc_retain(v18);
          else
            v14 = xpc_null_create();
          xpc::bridge((xpc *)&v14, v11);
          ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v15);
          v10 = object;
          object = 0;
          if (v15)
            CFRelease(v15);
          xpc_release(v14);
        }
        object = &xdict;
        v17 = "kSubscriberIsEsim";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v15);
        *a3 = xpc::dyn_cast_or_default((xpc *)&v15, 0);
        xpc_release(v15);
        v12 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
        if (!v10)
          v12 = 0;
        if (v12)
        {
          *a2 = v10;
        }
        else if (v10)
        {
          CFRelease(v10);
        }
      }
      xpc_release(v18);
    }
    xpc_release(xdict);
    xpc_release(v20);
    v4 = v9;
  }
  return v4 | (v3 << 32);
}

unint64_t _CTServerConnectionCopyLastKnownMobileSubscriberCountryCode(uint64_t a1, _QWORD *a2)
{
  unint64_t SubscriberProperty;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;

  SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    v9 = xpc_null_create();
    *a2 = 0;
    v5 = v9;
    if (MEMORY[0x186DBAE5C](v9) != MEMORY[0x1E0C81350])
    {
      v8 = 0;
      v7 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v8, (CFTypeRef *)&v7);
      *a2 = v8;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionCopyMobileSubscriberNetworkCode(uint64_t a1, _QWORD *a2)
{
  unint64_t SubscriberProperty;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;

  SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    v9 = xpc_null_create();
    *a2 = 0;
    v5 = v9;
    if (MEMORY[0x186DBAE5C](v9) != MEMORY[0x1E0C81350])
    {
      v8 = 0;
      v7 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v8, (CFTypeRef *)&v7);
      *a2 = v8;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionNetworkSelectionMenuAvailable(uint64_t a1, _BYTE *a2)
{
  unint64_t SubscriberProperty;
  void *v5;
  xpc_object_t v7;

  SubscriberProperty = 0x1600000001;
  if (a1 && a2)
  {
    v7 = xpc_null_create();
    *a2 = 0;
    v5 = v7;
    if (MEMORY[0x186DBAE5C](v7) != MEMORY[0x1E0C81350])
    {
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      v5 = v7;
    }
    xpc_release(v5);
  }
  return SubscriberProperty;
}

unint64_t _CTServerConnectionCopyFirmwareUpdateInfo(uint64_t a1, xpc_object_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  xpc_object_t object;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t xdict;
  xpc_object_t v14;

  LODWORD(v2) = 22;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSubscriberGetFirmwareUpdateData", &object, "kRequest", &xdict);
    xpc_release(object);
    v14 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v14, &xdict);
    v6 = MEMORY[0x186DBAE5C](xdict);
    v7 = MEMORY[0x1E0C812F8];
    if (v6 != MEMORY[0x1E0C812F8])
    {
      *a2 = 0;
      LODWORD(v2) = 5;
      LODWORD(v3) = 1;
LABEL_13:
      xpc_release(xdict);
      xpc_release(v14);
      return v3 | ((unint64_t)v2 << 32);
    }
    if (xpc_dictionary_get_value(xdict, "kError"))
    {
      object = &xdict;
      v11 = "kError";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v12);
      LODWORD(v2) = xpc::dyn_cast_or_default((xpc *)&v12, 0);
    }
    else
    {
      object = &xdict;
      v11 = "kSubscriberFirmwareUpdateInfoDictionary";
      v12 = 0;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)&object, &v12);
      if (MEMORY[0x186DBAE5C](v12) == v7)
      {
        if (xpc_dictionary_get_count(v12))
        {
          v2 = HIDWORD(v3);
          object = 0;
          v9 = _CFXPCCreateCFObjectFromXPCObject();
          ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v9);
          *a2 = object;
          goto LABEL_12;
        }
        *a2 = 0;
        LODWORD(v2) = 35;
      }
      else
      {
        LODWORD(v2) = 45;
      }
      LODWORD(v3) = 1;
    }
LABEL_12:
    xpc_release(v12);
    goto LABEL_13;
  }
  return v3 | ((unint64_t)v2 << 32);
}

void `anonymous namespace'::sMaybeLogMobileEquipmentDictionary(ctu::cf::CFSharedRef<__CFDictionary const>)::$_0::operator()(CFDictionaryRef **a1, uint64_t a2, void *key)
{
  const void *Value;
  NSObject *v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  Value = CFDictionaryGetValue(**a1, key);
  v5 = CTLogSubscriber();
  v6 = v5;
  if (Value)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315138;
    v8 = a2;
    _os_log_impl(&dword_18425C000, v6, OS_LOG_TYPE_DEFAULT, "Missing %s", (uint8_t *)&v7, 0xCu);
  }
}

unint64_t `anonymous namespace'::GetSubscriberProperty(uint64_t a1, const char *a2, const char *a3, void **a4)
{
  xpc_object_t v8;
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  void *v14;
  xpc_object_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  void *v19;
  void *v21;
  xpc_object_t *p_xdict;
  const char *v23;
  xpc_object_t object;
  xpc_object_t xdict;
  xpc_object_t v26;

  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = MEMORY[0x1E0C812F8];
  if (v8)
  {
    v10 = v8;
    v26 = v8;
  }
  else
  {
    v10 = xpc_null_create();
    v26 = v10;
    if (!v10)
    {
LABEL_5:
      v11 = xpc_null_create();
      v26 = v11;
      goto LABEL_7;
    }
  }
  if (MEMORY[0x186DBAE5C](v10) != v9)
    goto LABEL_5;
  xpc_retain(v10);
  v11 = v10;
LABEL_7:
  xpc_release(v10);
  v12 = xpc_string_create(a2);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v11, "kRequest", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v11, a3, v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xdict = xpc_null_create();
  v16 = SendXpcMessage(a1, &v26, &xdict);
  v17 = v16;
  v18 = HIDWORD(v16);
  if (MEMORY[0x186DBAE5C](xdict) == v9)
  {
    if (xpc_dictionary_get_value(xdict, "kError"))
    {
      p_xdict = &xdict;
      v23 = "kError";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_xdict, &object);
      LODWORD(v18) = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
    }
    else
    {
      p_xdict = &xdict;
      v23 = a3;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_xdict, &v21);
      v19 = *a4;
      *a4 = v21;
      v21 = v19;
      xpc_release(v19);
      v21 = 0;
    }
  }
  xpc_release(xdict);
  xpc_release(v26);
  return v17 | ((unint64_t)v18 << 32);
}

const char *CTSweetgumDeviceTypeAsString(unint64_t a1)
{
  if (a1 > 4)
    return "???";
  else
    return off_1E1533050[a1];
}

const char *CTSweetgumPlanCategoryAsString(unint64_t a1)
{
  if (a1 > 3)
    return "???";
  else
    return off_1E1533078[a1];
}

const char *CTSweetgumDataUnitsAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return "???";
  else
    return off_1E1533098[a1 - 1];
}

double CTSweetgumConvertDataUnits(uint64_t a1, uint64_t a2, double result)
{
  int v3;
  int v4;

  if (result != 0.0)
  {
    if (a1 >= a2)
    {
      if (a1 > a2)
      {
        v4 = a1 - a2;
        if ((_BYTE)a1 != (_BYTE)a2)
        {
          do
          {
            --v4;
            result = result * 1024.0;
          }
          while ((_BYTE)v4);
        }
      }
    }
    else
    {
      v3 = a2 - a1;
      if ((_BYTE)a2 != (_BYTE)a1)
      {
        do
        {
          --v3;
          result = result * 0.0009765625;
        }
        while ((_BYTE)v3);
      }
    }
  }
  return result;
}

const char *CTSweetgumPlanPurchaseStatusAsString(unint64_t a1)
{
  if (a1 > 4)
    return "???";
  else
    return off_1E15330C0[a1];
}

const char *CTSweetgumPlanStatusAsString(unint64_t a1)
{
  if (a1 > 3)
    return "???";
  else
    return off_1E15330E8[a1];
}

const char *CTSweetgumRegistrationStatusAsString(unint64_t a1)
{
  if (a1 > 2)
    return "???";
  else
    return off_1E1533108[a1];
}

uint64_t MMSHeader::encode(MMSHeader *this, MMSPduEncoder *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(MMSHeader *))(*(_QWORD *)this + 32))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(MMSHeader *, MMSPduEncoder *))(*(_QWORD *)this + 40))(this, a2);
  return result;
}

uint64_t MMSHeader::prettyHeader@<X0>(MMSHeader *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const char *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  const char *v12;
  _QWORD *v13;
  void *p_p;
  uint64_t v15;
  void *__p;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[4];
  void *v21[2];
  __int128 v22;
  __int128 v23;
  _BYTE v24[144];
  uint64_t v25;

  v25 = 0;
  memset(v24, 0, sizeof(v24));
  v22 = 0u;
  v23 = 0u;
  *(_OWORD *)v21 = 0u;
  memset(v20, 0, sizeof(v20));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v20);
  __p = 0;
  v18 = 0;
  v19 = 0;
  (*(void (**)(MMSHeader *, void **))(*(_QWORD *)this + 72))(this, &__p);
  v6 = (const char *)(*(uint64_t (**)(MMSHeader *))(*(_QWORD *)this + 64))(this);
  v7 = strlen(v6);
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)v6, v7);
  if (a2)
  {
    v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)": [", 3);
    v10 = (const char *)(*(uint64_t (**)(MMSHeader *))(*(_QWORD *)this + 88))(this);
    v11 = strlen(v10);
    v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    v12 = "] ";
  }
  else
  {
    v12 = ": ";
  }
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)v12, 2);
  if (v19 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v19 >= 0)
    v15 = HIBYTE(v19);
  else
    v15 = v18;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v15);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v20 + 8, a3);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  *(_QWORD *)&v20[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(*(_QWORD *)&v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v20[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v22) < 0)
    operator delete(v21[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x186DBA418](v24);
}

uint64_t MMSHeader::isSensitive(MMSHeader *this)
{
  return 0;
}

void sub_18436552C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1843656F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184365890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184365A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184365BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v7 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_184365D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184365F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18436609C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v8 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18436623C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1843663E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18436655C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1843666EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18436685C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184366A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionEraseCommCentersPreferences(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v4;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelEraseCommCentersPreferences", &object, "kRequest", &v4);
  xpc_release(object);
  object = v4;
  v4 = xpc_null_create();
  xpc_release(v4);
  v4 = xpc_null_create();
  v2 = SendXpcMessage(a1, &object, &v4);
  xpc_release(v4);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionEraseBasebandSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v4;
  xpc_object_t *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t object[2];
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelEraseBasebandSettings", object, "kRequest", &v11);
    xpc_release(object[0]);
    v4 = v11;
    v12 = v11;
    v11 = xpc_null_create();
    xpc_release(v11);
    object[0] = 0;
    object[1] = 0;
    v10 = 0;
    std::string::basic_string[abi:nn180100]<0>(object, "");
    ctu::cf::assign();
    if (v10 >= 0)
      v5 = object;
    else
      v5 = (xpc_object_t *)object[0];
    v6 = xpc_string_create((const char *)v5);
    if (!v6)
      v6 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kSettingsModelEraseWhat", v6);
    v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    v11 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v12, &v11);
    xpc_release(v11);
    if (SHIBYTE(v10) < 0)
      operator delete(object[0]);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionEraseNetworkSettings(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v4;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelEraseNetworkSettings", &object, "kRequest", &v4);
  xpc_release(object);
  object = v4;
  v4 = xpc_null_create();
  xpc_release(v4);
  v4 = xpc_null_create();
  v2 = SendXpcMessage(a1, &object, &v4);
  xpc_release(v4);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionEraseAllUserProfiles(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v4;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelEraseAllUserProfiles", &object, "kRequest", &v4);
  xpc_release(object);
  object = v4;
  v4 = xpc_null_create();
  xpc_release(v4);
  v4 = xpc_null_create();
  v2 = SendXpcMessage(a1, &object, &v4);
  xpc_release(v4);
  xpc_release(object);
  return v2;
}

unint64_t _CTServerConnectionCopySystemCapabilities(uint64_t a1, xpc_object_t *a2, _BYTE *a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t xdict;
  xpc_object_t v15;

  LODWORD(v3) = 22;
  v4 = 1;
  if (a1 && a2 && a3)
  {
    *a2 = 0;
    *a3 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v15 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v15;
    v12 = "kSettingsModelCopySystemCapabilities";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v13);
    xpc_release(v13);
    v13 = 0;
    xdict = xpc_null_create();
    v8 = SendXpcMessage(a1, &v15, &xdict);
    v4 = v8;
    v3 = HIDWORD(v8);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      if (xpc_dictionary_get_value(xdict, "kSettingsModelError") || (_DWORD)v3)
      {
        if (xpc_dictionary_get_value(xdict, "kSettingsModelError"))
        {
          object = &xdict;
          v12 = "kSettingsModelError";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v10);
          LODWORD(v3) = xpc::dyn_cast_or_default((xpc *)&v10, 0);
          xpc_release(v10);
        }
        v4 = 2;
        syslog(3, "Error copying CT System Capabilities:%d/%d", 2, v3);
      }
      else if (xpc_dictionary_get_value(xdict, "kSettingsModelSystemCapabilitiesDict"))
      {
        object = 0;
        xpc_dictionary_get_value(xdict, "kSettingsModelSystemCapabilitiesDict");
        v10 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v10);
        LODWORD(v3) = 0;
        *a2 = object;
        *a3 = 1;
      }
      else
      {
        LODWORD(v3) = 0;
      }
    }
    xpc_release(xdict);
    xpc_release(v15);
  }
  return v4 | ((unint64_t)v3 << 32);
}

unint64_t _CTServerConnectionCopyBasebandSettings(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  xpc_object_t object[2];
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;

  v3 = 0x1600000000;
  v4 = 1;
  if (a1 && a2 && a3)
  {
    *a2 = 0;
    *a3 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelGetProperty", object, "kRequest", &v14);
    xpc_release(object[0]);
    v15 = v14;
    v14 = xpc_null_create();
    xpc_release(v14);
    object[0] = &v15;
    object[1] = "kSettingsModelCopyBasebandSettings";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v13);
    xpc_release(v13);
    v13 = 0;
    object[0] = xpc_null_create();
    v8 = SendXpcMessage(a1, &v15, object);
    v9 = v8;
    if (HIDWORD(v8))
    {
      v4 = 2;
      syslog(3, "Error copying CT Baseband Settings:%d/%d", 2, HIDWORD(v8));
    }
    else
    {
      if (MEMORY[0x186DBAE5C](object[0]) == MEMORY[0x1E0C812F8]
        && xpc_dictionary_get_value(object[0], "kSettingsModelBasebandSettingsDict"))
      {
        v14 = 0;
        xpc_dictionary_get_value(object[0], "kSettingsModelBasebandSettingsDict");
        v11 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v14, (CFTypeRef *)&v11);
        *a2 = v14;
        *a3 = 1;
      }
      v4 = v9;
    }
    xpc_release(object[0]);
    xpc_release(v15);
    v3 = v9 & 0xFFFFFFFF00000000;
  }
  return v4 | v3;
}

uint64_t _CTServerConnectionSetBasebandSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t object[2];
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t xdict;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v10);
    xpc_release(object[0]);
    xdict = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    object[0] = &xdict;
    object[1] = "kSettingsModelSetBasebandSettings";
    xpc::dict::object_proxy::operator=((uint64_t)object, &v9);
    xpc_release(v9);
    v9 = 0;
    v4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v4)
      v4 = xpc_null_create();
    xpc_dictionary_set_value(xdict, "kSettingsModelBasebandSettingsDict", v4);
    v5 = xpc_null_create();
    xpc_release(v4);
    xpc_release(v5);
    v2 = SendXpcMessage(a1, &xdict, 0, v6);
    xpc_release(xdict);
  }
  return v2;
}

unint64_t _CTServerConnectionFetchCallForwardingValue(uint64_t a1, const __CFString *this, const __CFString *a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v7;
  const __CFString *v8;
  unsigned int v9;
  unsigned int v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  uint64_t v16;
  unint64_t v17;
  xpc_object_t v19;
  xpc_object_t object;

  v3 = 0x1600000000;
  v4 = 1;
  if (a1 && a3)
  {
    if (v9 == 255)
    {
      v4 = 1;
    }
    else
    {
      v10 = v9;
      xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
      xpc::dict_creator::operator()<char const*>("kSettingsModelFetchCallForwardingValue", &object, "kRequest", &v19);
      xpc_release(object);
      v11 = v19;
      object = v19;
      v19 = xpc_null_create();
      xpc_release(v19);
      v12 = xpc_int64_create(v7);
      if (!v12)
        v12 = xpc_null_create();
      xpc_dictionary_set_value(v11, "kSettingsModelReason", v12);
      v13 = xpc_null_create();
      xpc_release(v12);
      xpc_release(v13);
      v14 = xpc_int64_create(v10);
      if (!v14)
        v14 = xpc_null_create();
      xpc_dictionary_set_value(v11, "kSettingsModelClss", v14);
      v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
      v17 = SendXpcMessage(a1, &object, 0, v16);
      v3 = v17 & 0xFFFFFFFF00000000;
      xpc_release(object);
      v4 = 2;
      if (!HIDWORD(v17))
        v4 = v17;
    }
  }
  return v3 | v4;
}

CFComparisonResult `anonymous namespace'::CTServerConnectionCallForwardingReasonStringToCallForwardingReasonEnum(const __CFString *this, const __CFString *a2)
{
  CFComparisonResult result;

  result = CFStringCompare(this, CFSTR("kCTSettingCallForwardingReasonUnconditional"), 0);
  if (result)
  {
    if (CFStringCompare(this, CFSTR("kCTSettingCallForwardingReasonMobileBusy"), 0))
    {
      if (CFStringCompare(this, CFSTR("kCTSettingCallForwardingReasonNoReply"), 0))
      {
        if (CFStringCompare(this, CFSTR("kCTSettingCallForwardingReasonNotReachable"), 0))
        {
          if (CFStringCompare(this, CFSTR("kCTSettingCallForwardingReasonAllConditional"), 0))
            return 4;
          else
            return 5;
        }
        else
        {
          return 3;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::CTServerConnectionCallClassStringToCallClassMask(const __CFString *this, const __CFString *a2)
{
  if (CFStringCompare(this, CFSTR("kCTSettingCallClassVoice"), 0) == kCFCompareEqualTo)
    return 1;
  if (CFStringCompare(this, CFSTR("kCTSettingCallClassData"), 0) == kCFCompareEqualTo)
    return 2;
  if (CFStringCompare(this, CFSTR("kCTSettingCallClassFax"), 0) == kCFCompareEqualTo)
    return 4;
  if (CFStringCompare(this, CFSTR("kCTSettingCallClassShortMessageSerice"), 0) == kCFCompareEqualTo)
    return 8;
  if (CFStringCompare(this, CFSTR("kCTSettingCallClassDataCircuitSync"), 0) == kCFCompareEqualTo)
    return 16;
  if (CFStringCompare(this, CFSTR("kCTSettingCallClassDataCircuitAsync"), 0) == kCFCompareEqualTo)
    return 32;
  if (CFStringCompare(this, CFSTR("kCTSettingCallClassPacketAccess"), 0) == kCFCompareEqualTo)
    return 64;
  if (CFStringCompare(this, CFSTR("kCTSettingCallClassPADAccess"), 0))
    return 255;
  return 128;
}

uint64_t _CTServerConnectionSaveCallForwardingValue(uint64_t a1, const __CFString *a2, const __CFString *a3, int a4, uint64_t a5, int *a6)
{
  const __CFString *v12;
  const __CFString *v13;
  unsigned int v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  int64_t v28;
  uint64_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  uint64_t v32;
  xpc_object_t v34[2];
  xpc_object_t v35;
  xpc_object_t object[2];
  uint64_t v37;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", v34);
  xpc_release(object[0]);
  xdict = v34[0];
  v34[0] = xpc_null_create();
  xpc_release(v34[0]);
  object[0] = 0;
  object[1] = 0;
  v37 = 0;
  std::string::basic_string[abi:nn180100]<0>(object, "");
  ctu::cf::assign();
  v34[0] = &xdict;
  v34[1] = "kSettingsModelSaveCallForwardingValue";
  xpc::dict::object_proxy::operator=((uint64_t)v34, &v35);
  xpc_release(v35);
  v35 = 0;
  v15 = xpc_int64_create(a2);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelReason", v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = xpc_int64_create(v14);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelClss", v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = xpc_BOOL_create(a4 != 0);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelEnabled", v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = xpc_BOOL_create(a5 != 0);
  if (!v21)
    v21 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelSaveNumber", v21);
  v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  if (v37 >= 0)
    v23 = object;
  else
    v23 = (xpc_object_t *)object[0];
  v24 = xpc_string_create((const char *)v23);
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelNumber", v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = xpc_BOOL_create(a6 != 0);
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelCallFwdSaveTime", v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  if (a6)
    v28 = *a6;
  else
    v28 = 0;
  v30 = xpc_int64_create(v28);
  if (!v30)
    v30 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelTime", v30);
  v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  v29 = SendXpcMessage(a1, &xdict, 0, v32);
  if (SHIBYTE(v37) < 0)
    operator delete(object[0]);
  xpc_release(xdict);
  return v29;
}

uint64_t _CTServerConnectionFetchCallBarringValue(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  const __CFString *v6;
  unsigned int v7;
  const __CFString *v8;
  unsigned int v9;
  xpc_object_t v10;
  void **v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint64_t v18;
  uint64_t v19;
  xpc_object_t v21;
  void *__p[2];
  uint64_t v23;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  ctu::cf::assign();
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchCallBarringValue", &object, "kRequest", &v21);
  xpc_release(object);
  v10 = v21;
  object = v21;
  v21 = xpc_null_create();
  xpc_release(v21);
  if (v23 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  v12 = xpc_string_create((const char *)v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v10, "kSettingsModelPin2", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_int64_create(v7);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v10, "kSettingsModelClss", v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(v9);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v10, "kSettingsModelFacility", v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v19 = SendXpcMessage(a1, &object, 0, v18);
  xpc_release(object);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  return v19;
}

CFComparisonResult `anonymous namespace'::CTServerConnectionCallBarringFaciltiyStringToCallBarringFacilityEnum(const __CFString *this, const __CFString *a2)
{
  CFComparisonResult result;

  result = CFStringCompare(this, CFSTR("kCTSettingCallBarringFacilityAllOutgoing"), 0);
  if (result)
  {
    if (CFStringCompare(this, CFSTR("kCTSettingCallBarringFacilityAllIncoming"), 0))
    {
      if (CFStringCompare(this, CFSTR("kCTSettingCallBarringFacilityOutgoingInternational"), 0))
      {
        if (CFStringCompare(this, CFSTR("kCTSettingCallBarringFacilityOutgoingInternationalExceptHomeCountry"), 0))
        {
          if (CFStringCompare(this, CFSTR("kCTSettingCallBarringFacilityIncomingWhileRoamingOutsideHomeCountry"), 0))
          {
            if (CFStringCompare(this, CFSTR("kCTSettingCallBarringFacilityIncomingNotOnSim"), 0))
              return 0;
            else
              return 5;
          }
          else
          {
            return 4;
          }
        }
        else
        {
          return 2;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 3;
    }
  }
  return result;
}

uint64_t _CTServerConnectionSaveCallBarringValue(uint64_t a1, const __CFString *a2, const __CFString *a3, int a4)
{
  const __CFString *v8;
  unsigned int v9;
  const __CFString *v10;
  unsigned int v11;
  void **v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  uint64_t v21;
  uint64_t v22;
  xpc_object_t object[2];
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t xdict;
  void *__p[2];
  uint64_t v29;

  if (!a1)
    return 0x1600000001;
  __p[0] = 0;
  __p[1] = 0;
  v29 = 0;
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  ctu::cf::assign();
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v26);
  xpc_release(object[0]);
  xdict = v26;
  v26 = xpc_null_create();
  xpc_release(v26);
  object[0] = &xdict;
  object[1] = "kSettingsModelSaveCallBarringValue";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v25);
  xpc_release(v25);
  v25 = 0;
  if (v29 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v13 = xpc_string_create((const char *)v12);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelPin2", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_int64_create(v9);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelClss", v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = xpc_int64_create(v11);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelFacility", v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = xpc_BOOL_create(a4 != 0);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelEnabled", v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v22 = SendXpcMessage(a1, &xdict, 0, v21);
  xpc_release(xdict);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  return v22;
}

uint64_t _CTServerConnectionSaveCallWaitingValue(uint64_t a1, const __CFString *this, int a3)
{
  unsigned int v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t object[2];
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v15);
  xpc_release(object[0]);
  xdict = v15;
  v15 = xpc_null_create();
  xpc_release(v15);
  object[0] = &xdict;
  object[1] = "kSettingsModelSaveCallWaitingValue";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v14);
  xpc_release(v14);
  v14 = 0;
  v6 = xpc_int64_create(v5);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelClss", v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_BOOL_create(a3 != 0);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelEnabled", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v11 = SendXpcMessage(a1, &xdict, 0, v10);
  xpc_release(xdict);
  return v11;
}

uint64_t _CTServerConnectionChangePinPassword(uint64_t a1)
{
  void *v2;
  xpc_object_t v3;
  void *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t object[2];
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v11);
  xpc_release(object[0]);
  xdict = v11;
  v11 = xpc_null_create();
  xpc_release(v11);
  object[0] = &xdict;
  object[1] = "kSettingsModelChangePinPassword";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v10);
  xpc_release(v10);
  v10 = 0;
  v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v2)
    v2 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelOldPassword", v2);
  v3 = xpc_null_create();
  xpc_release(v2);
  xpc_release(v3);
  v4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelNewPassword", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  v7 = SendXpcMessage(a1, &xdict, 0, v6);
  xpc_release(xdict);
  return v7;
}

uint64_t _CTServerConnectionChangePin2Password(uint64_t a1)
{
  void *v2;
  xpc_object_t v3;
  void *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t object[2];
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v11);
  xpc_release(object[0]);
  xdict = v11;
  v11 = xpc_null_create();
  xpc_release(v11);
  object[0] = &xdict;
  object[1] = "kSettingsModelChangePin2Password";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v10);
  xpc_release(v10);
  v10 = 0;
  v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v2)
    v2 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelOldPassword", v2);
  v3 = xpc_null_create();
  xpc_release(v2);
  xpc_release(v3);
  v4 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelNewPassword", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  v7 = SendXpcMessage(a1, &xdict, 0, v6);
  xpc_release(xdict);
  return v7;
}

uint64_t _CTServerConnectionSaveSimLockValue(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t object[2];
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v13);
  xpc_release(object[0]);
  xdict = v13;
  v13 = xpc_null_create();
  xpc_release(v13);
  object[0] = &xdict;
  object[1] = "kSettingsModelSaveSimLockValue";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v12);
  xpc_release(v12);
  v12 = 0;
  v4 = xpc_BOOL_create(a2 != 0);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelEnabled", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  v6 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelPin", v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v9 = SendXpcMessage(a1, &xdict, 0, v8);
  xpc_release(xdict);
  return v9;
}

uint64_t _CTServerConnectionSaveCallingLineIdRestrictionValue(uint64_t a1, CFStringRef theString1)
{
  int64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t object[2];
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  if (CFStringCompare(theString1, CFSTR("kCTSettingCallingLineIdRestrictionNetworkControlled"), 0))
  {
    if (CFStringCompare(theString1, CFSTR("kCTSettingCallingLineIdRestrictionEnabled"), 0))
    {
      if (CFStringCompare(theString1, CFSTR("kCTSettingCallingLineIdRestrictionUnknown"), 0))
        v4 = 0;
      else
        v4 = 3;
    }
    else
    {
      v4 = 1;
    }
  }
  else
  {
    v4 = 2;
  }
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v12);
  xpc_release(object[0]);
  xdict = v12;
  v12 = xpc_null_create();
  xpc_release(v12);
  object[0] = &xdict;
  object[1] = "kSettingsModelSaveCallingLineIdRestrictionValue";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v11);
  xpc_release(v11);
  v11 = 0;
  v6 = xpc_int64_create(v4);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelValue", v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v5 = SendXpcMessage(a1, &xdict, 0, v8);
  xpc_release(xdict);
  return v5;
}

uint64_t _CTServerConnectionSaveServiceCenterAddressValue(uint64_t a1)
{
  void *v2;
  xpc_object_t v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t object[2];
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t xdict;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelSetProperty", object, "kRequest", &v9);
  xpc_release(object[0]);
  xdict = v9;
  v9 = xpc_null_create();
  xpc_release(v9);
  object[0] = &xdict;
  object[1] = "kSettingsModelSaveServiceCenterAddressValue";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v8);
  xpc_release(v8);
  v8 = 0;
  v2 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v2)
    v2 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kSettingsModelNumber", v2);
  v3 = xpc_null_create();
  xpc_release(v2);
  xpc_release(v3);
  v5 = SendXpcMessage(a1, &xdict, 0, v4);
  xpc_release(xdict);
  return v5;
}

uint64_t _CTServerConnectionPreferencesSetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelPreferencesSetValue", &object, "kRequest", &v10);
    xpc_release(object);
    v4 = v10;
    object = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kSettingsModelKey", v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kSettingsModelValue", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &v10);
    xpc_release(v10);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionPreferencesCopyValue(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  xpc_object_t xdict;
  xpc_object_t object;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelPreferencesCopyValue", &object, "kRequest", &xdict);
    xpc_release(object);
    v6 = xdict;
    object = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v6, "kSettingsModelKey", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &object, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kSettingsModelValue"))
    {
      xpc_dictionary_get_value(xdict, "kSettingsModelValue");
      *a3 = _CFXPCCreateCFObjectFromXPCObject();
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v3;
}

uint64_t _CTServerConnectionPreferencesSetNoBackupValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelPreferencesSetNoBackupValue", &object, "kRequest", &v10);
    xpc_release(object);
    v4 = v10;
    object = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kSettingsModelNoBackupKey", v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kSettingsModelNoBackupValue", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    v10 = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &v10);
    xpc_release(v10);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionPreferencesCopyNoBackupValue(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  xpc_object_t xdict;
  xpc_object_t object;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelPreferencesCopyNoBackupValue", &object, "kRequest", &xdict);
    xpc_release(object);
    v6 = xdict;
    object = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v6, "kSettingsModelNoBackupKey", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &object, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kSettingsModelNoBackupValue"))
    {
      xpc_dictionary_get_value(xdict, "kSettingsModelNoBackupValue");
      *a3 = _CFXPCCreateCFObjectFromXPCObject();
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v3;
}

uint64_t _CTServerConnectionFetchCallWaitingValue(uint64_t a1, const __CFString *this)
{
  unsigned int v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchCallWaitingValue", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(v3);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kSettingsModelClss", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionFetchSimLockValue(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchSimLockValue", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionFetchConnectedLinePresentationValue(uint64_t a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  xpc_object_t v8;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchLinePresentationValue", &object, "kRequest", &v8);
  xpc_release(object);
  v2 = v8;
  object = v8;
  v8 = xpc_null_create();
  xpc_release(v8);
  v3 = xpc_int64_create(0);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(v2, "kSettingsModelLinePresentation", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
  v6 = SendXpcMessage(a1, &object, 0, v5);
  xpc_release(object);
  return v6;
}

uint64_t _CTServerConnectionFetchCallingLinePresentationValue(uint64_t a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  xpc_object_t v8;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchLinePresentationValue", &object, "kRequest", &v8);
  xpc_release(object);
  v2 = v8;
  object = v8;
  v8 = xpc_null_create();
  xpc_release(v8);
  v3 = xpc_int64_create(1);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(v2, "kSettingsModelLinePresentation", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
  v6 = SendXpcMessage(a1, &object, 0, v5);
  xpc_release(object);
  return v6;
}

uint64_t _CTServerConnectionFetchConnectedLineIdRestrictionValue(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchConnectedLineIdRestrictionValue", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionFetchCallingLineIdRestrictionValue(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchCallingLineIdRestrictionValue", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionFetchServiceCenterAddressValue(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelFetchServiceCenterAddressValue", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

unint64_t _CTServerConnectionCopyPhoneNumber(const void *a1, int a2, CFStringRef *a3, CFStringRef *a4, _QWORD *a5, _QWORD *a6)
{
  unint64_t v6;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  int v16;
  int v17;
  int v18;
  const __CFAllocator *v19;
  xpc_object_t *v20;
  const __CFAllocator *v21;
  const char *p_p;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  xpc_object_t v28[2];
  xpc_object_t v29;
  void *__p;
  const char *v31;
  uint64_t v32;
  xpc_object_t v33[2];
  uint64_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t object;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = 0x1600000001;
  if (a1 && a3 && a4)
  {
    *a4 = 0;
    *a3 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelGetPhoneNumber", &object, "kRequest", v33);
    xpc_release(object);
    v13 = v33[0];
    v36 = v33[0];
    v33[0] = xpc_null_create();
    xpc_release(v33[0]);
    v14 = xpc_int64_create(a2);
    if (!v14)
      v14 = xpc_null_create();
    xpc_dictionary_set_value(v13, "kSettingsModelIndex", v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    v35 = xpc_null_create();
    v6 = SendXpcMessage((uint64_t)a1, &v36, &v35);
    v16 = 0;
    v17 = 0;
    if (!HIDWORD(v6))
    {
      if (MEMORY[0x186DBAE5C](v35) == MEMORY[0x1E0C812F8])
      {
        object = &v35;
        *(_QWORD *)&v38 = "kSettingsModelValid";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, v33);
        v18 = xpc::dyn_cast_or_default((xpc *)v33, 0);
        xpc_release(v33[0]);
        object = &v35;
        *(_QWORD *)&v38 = "kSettingsModelFound";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, v33);
        v16 = xpc::dyn_cast_or_default((xpc *)v33, 0);
        xpc_release(v33[0]);
        object = &v35;
        *(_QWORD *)&v38 = "kSettingsModelEdit";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, v33);
        v17 = xpc::dyn_cast_or_default((xpc *)v33, 0);
        xpc_release(v33[0]);
        if (v18)
        {
          v33[0] = 0;
          v33[1] = 0;
          v34 = 0;
          __p = &v35;
          v31 = "kSettingsModelLabel";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&__p, v28);
          object = 0;
          v38 = 0uLL;
          xpc::dyn_cast_or_default();
          if (SHIBYTE(v38) < 0)
            operator delete(object);
          xpc_release(v28[0]);
          __p = 0;
          v31 = 0;
          v32 = 0;
          v28[0] = &v35;
          v28[1] = "kSettingsModelNumber";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)v28, &v29);
          object = 0;
          v38 = 0uLL;
          xpc::dyn_cast_or_default();
          if (SHIBYTE(v38) < 0)
            operator delete(object);
          xpc_release(v29);
          v19 = CFGetAllocator(a1);
          if (v34 >= 0)
            v20 = v33;
          else
            v20 = (xpc_object_t *)v33[0];
          *a3 = CFStringCreateWithCString(v19, (const char *)v20, 0x8000100u);
          v21 = CFGetAllocator(a1);
          if (v32 >= 0)
            p_p = (const char *)&__p;
          else
            p_p = (const char *)__p;
          *a4 = CFStringCreateWithCString(v21, p_p, 0x8000100u);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            v23 = &__p;
            if (v32 < 0)
              v23 = __p;
            LODWORD(object) = 67109378;
            HIDWORD(object) = a2;
            LOWORD(v38) = 2080;
            *(_QWORD *)((char *)&v38 + 2) = v23;
            _os_log_impl(&dword_18425C000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Phone number index %d: %s", (uint8_t *)&object, 0x12u);
          }
          if (SHIBYTE(v32) < 0)
            operator delete(__p);
          if (SHIBYTE(v34) < 0)
            operator delete(v33[0]);
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
        {
          _CTServerConnectionCopyPhoneNumber_cold_1(a2);
        }
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    v24 = (_QWORD *)MEMORY[0x1E0C9AE50];
    v25 = (_QWORD *)MEMORY[0x1E0C9AE40];
    if (a5)
    {
      if (v16)
        v26 = (_QWORD *)MEMORY[0x1E0C9AE50];
      else
        v26 = (_QWORD *)MEMORY[0x1E0C9AE40];
      *a5 = *v26;
    }
    if (a6)
    {
      if (!v17)
        v24 = v25;
      *a6 = *v24;
    }
    xpc_release(v35);
    xpc_release(v36);
  }
  return v6;
}

unint64_t _CTServerConnectionCopyCompanionPhoneNumber(const void *a1, CFStringRef *a2)
{
  unint64_t v2;
  const __CFAllocator *v5;
  void **v6;
  void **v7;
  _QWORD v9[2];
  xpc_object_t v10;
  void *__p[2];
  uint64_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  __int128 object;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSettingsModelGetCompanionPhoneNumber", (xpc_object_t *)&object, "kRequest", __p);
    xpc_release((xpc_object_t)object);
    v14 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    v13 = xpc_null_create();
    v2 = SendXpcMessage((uint64_t)a1, &v14, &v13);
    if (!HIDWORD(v2) && MEMORY[0x186DBAE5C](v13) == MEMORY[0x1E0C812F8])
    {
      __p[0] = 0;
      __p[1] = 0;
      v12 = 0;
      v9[0] = &v13;
      v9[1] = "kSettingsModelNumber";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v9, &v10);
      object = 0uLL;
      v16 = 0;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v16) < 0)
        operator delete((void *)object);
      xpc_release(v10);
      v5 = CFGetAllocator(a1);
      if (v12 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *a2 = CFStringCreateWithCString(v5, (const char *)v6, 0x8000100u);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v7 = __p;
        if (v12 < 0)
          v7 = (void **)__p[0];
        LODWORD(object) = 136380675;
        *(_QWORD *)((char *)&object + 4) = v7;
        _os_log_impl(&dword_18425C000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Companion phone number %{private}s", (uint8_t *)&object, 0xCu);
      }
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
    }
    xpc_release(v13);
    xpc_release(v14);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyEffectiveSimInfo(const void *a1, CFDictionaryRef *a2)
{
  unint64_t v4;
  void *v5;
  CFIndex v6;
  const __CFAllocator *v7;
  _QWORD v9[2];
  xpc_object_t v10;
  std::string __p;
  xpc_object_t xdict;
  xpc_object_t v13;
  xpc_object_t v14;
  std::string v15;
  std::string object;
  void *v17;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSettingsModelGetProperty", (xpc_object_t *)&object.__r_.__value_.__l.__data_, "kRequest", (xpc_object_t *)&v15.__r_.__value_.__l.__data_);
  xpc_release(object.__r_.__value_.__l.__data_);
  v14 = (xpc_object_t)v15.__r_.__value_.__r.__words[0];
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc_release(v15.__r_.__value_.__l.__data_);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  object.__r_.__value_.__l.__size_ = (std::string::size_type)"kSettingsModelGetEffectiveSimInfo";
  xpc::dict::object_proxy::operator=((uint64_t)&object, &v13);
  xpc_release(v13);
  v13 = 0;
  xdict = xpc_null_create();
  v4 = SendXpcMessage((uint64_t)a1, &v14, &xdict);
  if (!HIDWORD(v4) && MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
  {
    values = 0;
    keys[0] = CFSTR("kCTSettingMyEffectivePhoneNumber");
    if (xpc_dictionary_get_value(xdict, "kSettingsEffectivePhoneNumber"))
    {
      v9[0] = &xdict;
      v9[1] = "kSettingsEffectivePhoneNumber";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v9, &v10);
      memset(&object, 0, sizeof(object));
      xpc::dyn_cast_or_default();
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        operator delete(object.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v15 = __p;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&object, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      else
        object = v15;
      v17 = 0;
      if (ctu::cf::convert_copy())
        v5 = v17;
      else
        v5 = 0;
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        operator delete(object.__r_.__value_.__l.__data_);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      xpc_release(v10);
      values = v5;
      v6 = 1;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v7 = CFGetAllocator(a1);
    *a2 = CFDictionaryCreate(v7, (const void **)keys, (const void **)&values, v6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v5)
      CFRelease(v5);
  }
  xpc_release(xdict);
  xpc_release(v14);
  return v4;
}

uint64_t MMSHeaderEncoding::MMSHeaderEncoding(uint64_t a1, uint64_t *a2, char a3, char *a4)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;

  *(_BYTE *)a1 = a3;
  v6 = (_QWORD *)(a1 + 8);
  if (a4)
    v7 = a4;
  else
    v7 = "";
  std::string::basic_string[abi:nn180100]<0>(v6, v7);
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(v8 + 8) = a1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 1;
  return a1;
}

uint64_t _CTServerConnectionUpdateCarrierPushToken(uint64_t a1)
{
  void *v2;
  void **v3;
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t object[2];
  uint64_t v13;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsUpdatePushToken", object, "kRequest", __p);
  xpc_release(object[0]);
  v2 = __p[0];
  v11 = __p[0];
  __p[0] = xpc_null_create();
  xpc_release(__p[0]);
  object[0] = 0;
  object[1] = 0;
  v13 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)object;
  v10 = v13;
  if (v13 >= 0)
    v3 = __p;
  else
    v3 = (void **)object[0];
  v4 = xpc_string_create((const char *)v3);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(v2, "kCarrierEntitlementsPushToken", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v7 = SendXpcMessage(a1, &v11, 0, v6);
  xpc_release(v11);
  return v7;
}

uint64_t _CTServerConnectionEntitlementsGetSIMStatus(uint64_t a1)
{
  void *v2;
  void **v3;
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t object[2];
  uint64_t v13;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetSIMStatus", object, "kRequest", __p);
  xpc_release(object[0]);
  v2 = __p[0];
  v11 = __p[0];
  __p[0] = xpc_null_create();
  xpc_release(__p[0]);
  object[0] = 0;
  object[1] = 0;
  v13 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)object;
  v10 = v13;
  if (v13 >= 0)
    v3 = __p;
  else
    v3 = (void **)object[0];
  v4 = xpc_string_create((const char *)v3);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(v2, "kCarrierEntitlementsPrimaryIccid", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v7 = SendXpcMessage(a1, &v11, 0, v6);
  xpc_release(v11);
  return v7;
}

uint64_t _CTServerConnectionEntitlementsSignUpSIMService(uint64_t a1)
{
  void *v2;
  void **v3;
  xpc_object_t v4;
  xpc_object_t v5;
  void **v6;
  xpc_object_t v7;
  xpc_object_t v8;
  void **v9;
  xpc_object_t v10;
  xpc_object_t v11;
  void **v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v19;
  xpc_object_t v20;
  xpc_object_t object[2];
  uint64_t v22;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsSignUpSIMService", object, "kRequest", __p);
  xpc_release(object[0]);
  v2 = __p[0];
  v20 = __p[0];
  __p[0] = xpc_null_create();
  xpc_release(__p[0]);
  object[0] = 0;
  object[1] = 0;
  v22 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)object;
  v19 = v22;
  if (v22 >= 0)
    v3 = __p;
  else
    v3 = (void **)object[0];
  v4 = xpc_string_create((const char *)v3);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(v2, "kCarrierEntitlementsPrimaryIccid", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  object[0] = 0;
  object[1] = 0;
  v22 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)object;
  v19 = v22;
  if (v22 >= 0)
    v6 = __p;
  else
    v6 = (void **)object[0];
  v7 = xpc_string_create((const char *)v6);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v2, "kCarrierEntitlementsSecondaryCsn", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  object[0] = 0;
  object[1] = 0;
  v22 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)object;
  v19 = v22;
  if (v22 >= 0)
    v9 = __p;
  else
    v9 = (void **)object[0];
  v10 = xpc_string_create((const char *)v9);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v2, "kCarrierEntitlementsSecondaryImei", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  object[0] = 0;
  object[1] = 0;
  v22 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)object;
  v19 = v22;
  if (v22 >= 0)
    v12 = __p;
  else
    v12 = (void **)object[0];
  v13 = xpc_string_create((const char *)v12);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v2, "kCarrierEntitlementsSecondaryMeid", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  v16 = SendXpcMessage(a1, &v20, 0, v15);
  xpc_release(v20);
  return v16;
}

uint64_t _CTServerConnectionEntitlementsSetSecondaryIccids(uint64_t a1, ctu *a2)
{
  xpc_object_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v12;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsSetSecondaryIccids", &object, "kRequest", &v12);
  xpc_release(object);
  v4 = v12;
  object = v12;
  v12 = xpc_null_create();
  xpc_release(v12);
  ctu::cf_to_xpc(a2, v5);
  xpc_dictionary_set_value(v4, "kCarrierEntitlementsSecondaryIccids", value);
  v6 = value;
  valuea = xpc_null_create();
  xpc_release(v6);
  xpc_release(valuea);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionEntitlementsClearSecondaryIccids(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsClearSecondaryIccids", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

unint64_t _CTServerConnectionCopyPhoneNumberSignature(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  const object *v6;
  xpc_object_t object[2];
  xpc_object_t v9;
  CFTypeRef cf;
  uint64_t v11;
  xpc_object_t xdict;
  xpc_object_t v13;

  v2 = 0x1600000000;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetPhoneNumberSignature", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v13 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v13, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kCarrierPhoneNumberSignatureInfo"))
    {
      v2 = v3 & 0xFFFFFFFF00000000;
      v11 = 0;
      object[0] = &xdict;
      object[1] = "kCarrierPhoneNumberSignatureInfo";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      xpc::bridge((xpc *)&v9, v6);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v11, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v9);
      *a2 = v11;
    }
    else
    {
      v2 = 0x2300000000;
      LODWORD(v3) = 1;
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

uint64_t _CTServerConnectionEntitlementsSetPreferredRoamingNetworks(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsSetPreferredRoamingNetworks", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionEntitlementsGetPreferredRoamingNetworks(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetPreferredRoamingNetworks", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

unint64_t _CTServerConnectionGetPLMNPriorityInfo(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  const object *v6;
  xpc_object_t object[2];
  xpc_object_t v9;
  CFTypeRef cf;
  uint64_t v11;
  xpc_object_t xdict;
  xpc_object_t v13;

  v2 = 0x1600000000;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetPLMNPriorityInfo", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v13 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v13, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kCarrierPLMNPriorityInfoData"))
    {
      v2 = v3 & 0xFFFFFFFF00000000;
      v11 = 0;
      object[0] = &xdict;
      object[1] = "kCarrierPLMNPriorityInfoData";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      xpc::bridge((xpc *)&v9, v6);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v11, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v9);
      *a2 = v11;
    }
    else
    {
      v2 = 0x2300000000;
      LODWORD(v3) = 1;
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

unint64_t _CTServerConnectionCopyPhoneServiceDeviceList(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  const object *v6;
  xpc_object_t object[2];
  xpc_object_t v9;
  CFTypeRef cf;
  uint64_t v11;
  xpc_object_t xdict;
  xpc_object_t v13;

  v2 = 0x1600000000;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetPhoneServiceDeviceList", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v13 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &v13, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kCarrierEntitlementsGetPSDeviceListDeviceList"))
    {
      v2 = v3 & 0xFFFFFFFF00000000;
      v11 = 0;
      object[0] = &xdict;
      object[1] = "kCarrierEntitlementsGetPSDeviceListDeviceList";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
      xpc::bridge((xpc *)&v9, v6);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v11, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v9);
      *a2 = v11;
    }
    else
    {
      v2 = 0x2300000000;
      LODWORD(v3) = 1;
    }
    xpc_release(xdict);
    xpc_release(v13);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

unint64_t _CTServerConnectionGetCarrierSpaceUpdates(uint64_t a1, ctu *a2)
{
  unint64_t v2;
  uint64_t v3;
  xpc_object_t v6;
  const void *v7;
  void *v8;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t xdict;
  xpc_object_t object;

  v2 = 0x1600000000;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsGetCarrierSpaceUpdates", &object, "kRequest", &xdict);
    xpc_release(object);
    v6 = xdict;
    object = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    ctu::cf_to_xpc(a2, v7);
    xpc_dictionary_set_value(v6, "kCarrierEntitlementsGetCarrierSpaceUpdatesBody", value);
    v8 = value;
    valuea = xpc_null_create();
    xpc_release(v8);
    xpc_release(valuea);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &object, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kCarrierEntitlementsGetCarrierSpaceUpdatesBody"))
    {
      v2 = v3 & 0xFFFFFFFF00000000;
    }
    else
    {
      v2 = 0x2300000000;
      LODWORD(v3) = 1;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

unint64_t _CTServerConnectionUpdateAccountWithFeatureOrService(uint64_t a1, ctu *a2)
{
  unint64_t v2;
  uint64_t v3;
  xpc_object_t v6;
  const void *v7;
  void *v8;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t xdict;
  xpc_object_t object;

  v2 = 0x1600000000;
  LODWORD(v3) = 1;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCarrierEntitlementsUpdateAccountWithFeatureOrService", &object, "kRequest", &xdict);
    xpc_release(object);
    v6 = xdict;
    object = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    ctu::cf_to_xpc(a2, v7);
    xpc_dictionary_set_value(v6, "kCarrierEntitlementsUpdateAccountWithFeatureOrServiceBody", value);
    v8 = value;
    valuea = xpc_null_create();
    xpc_release(v8);
    xpc_release(valuea);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &object, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kCarrierEntitlementsUpdateAccountWithFeatureOrServiceBody"))
    {
      v2 = v3 & 0xFFFFFFFF00000000;
    }
    else
    {
      v2 = 0x2300000000;
      LODWORD(v3) = 1;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2 & 0xFFFFFFFF00000000 | v3;
}

const __CFString *GetCarrierEntitlementResultString(int a1)
{
  if ((a1 - 1) > 5)
    return CFSTR("kCTCarrierEntitlementResultUnknown");
  else
    return (const __CFString *)*((_QWORD *)&off_1E1533CA8 + a1 - 1);
}

uint64_t ConvertAccountQueryTypesToMask(const __CFArray *a1)
{
  CFIndex Count;
  uint64_t v3;
  CFIndex v4;
  const void *ValueAtIndex;

  if (!a1 || !CFArrayGetCount(a1))
    return 255;
  Count = CFArrayGetCount(a1);
  v3 = 0;
  if (Count)
  {
    v4 = Count - 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
      LODWORD(v3) = v3 | (CFEqual(ValueAtIndex, CFSTR("kCTCarrierAccountInfoQueryTypeSubscriptionStatus")) != 0);
      if (CFEqual(ValueAtIndex, CFSTR("kCTCarrierAccountInfoQueryTypeUsageStatus")))
        v3 = v3 | 2;
      else
        v3 = v3;
      --v4;
    }
    while (v4 != -1);
  }
  return v3;
}

void sub_18436B9A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436BA30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18436BACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436BB14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436BC18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18436BD00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436BE78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436C060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_18436C17C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436C1F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436C294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18436C3FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436C534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436C854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18436CBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, int a12, char a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  void *v23;

  if ((a13 & 1) != 0)
  {

  }
  if (!a15)

  if ((v21 & 1) != 0)
  {

  }
  if (!v20)

  _Unwind_Resume(a1);
}

void sub_18436CD74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436CE40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436CF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18436D184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436D328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436D4E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436D570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18436D60C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436D654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436D718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436D7B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436D888(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436D8E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436D964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436D9AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436DA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18436DADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18436DB6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436DC94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436DE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if ((a13 & 1) != 0)
  {

  }
  if (!v14)

  _Unwind_Resume(a1);
}

void sub_18436DFBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436E028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436E0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18436E1C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436E2B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436E3DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436E464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18436E500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436E548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436E64C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18436E728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436E804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436E88C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18436E928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436E970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436EA34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436EAD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436EB68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436EC34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436ECBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18436ED58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436EDA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436EEA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18436EF80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436F084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436F158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18436F208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436F25C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436F2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18436F3A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436F46C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436F56C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436F5F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18436F690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436F6D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436F7DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18436F8B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436F9E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436FBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if ((a13 & 1) != 0)
  {

  }
  if (!v16)

  _Unwind_Resume(a1);
}

void sub_18436FCE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436FD44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18436FDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18436FEDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18436FFEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184370150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184370248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1843702F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184370358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843703D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1843704CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437058C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843706C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843707A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_184370858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843708AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184370910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1843709F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184370AA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184370C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184370E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, int a11, char a12, void *a13, int a14, char a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  if ((a12 & 1) != 0)
  {

  }
  if (!v24)

  if ((a15 & 1) != 0)
  {

  }
  if (!v21)

  _Unwind_Resume(a1);
}

void sub_18437101C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184371088(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184371114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18437126C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843713B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437156C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843716DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1843717BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184371828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843718B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184371A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184371B74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184371D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_184371EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437216C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1843722B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184372344(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184372428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184372630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184372828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184372A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184372BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if ((a13 & 1) != 0)
  {

  }
  if (!v14)

  _Unwind_Resume(a1);
}

void sub_184372C9C()
{
  JUMPOUT(0x184372C90);
}

void sub_184372D14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184372D74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184372DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184372F0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184373010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184373180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437335C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, char a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if ((a13 & 1) != 0)
  {

  }
  if (!v16)

  _Unwind_Resume(a1);
}

void sub_18437347C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843734DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184373554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184373674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184373778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184373998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184373DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, char a14, void *a15, void *a16, void *a17, void *a18, int a19, char a20,void *a21,void *a22,void *a23,int a24,char a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  char v32;
  uint64_t v33;

  if ((a14 & 1) != 0)
  {

  }
  if (!a21)

  if ((a20 & 1) != 0)
  {

  }
  if (!a26)

  if ((a25 & 1) != 0)
  {

  }
  if (!v31)

  if ((v32 & 1) != 0)
  {

  }
  if (!v27)

  _Unwind_Resume(a1);
}

void sub_184373FD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184374070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437414C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184374320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184374548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184374760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437480C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437488C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843748EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843749BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184374AFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184374BB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184374DE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843753DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, int a13, char a14, void *a15, void *a16, void *a17, int a18, char a19, void *a20,void *a21,void *a22,void *a23,int a24,char a25,void *a26,void *a27,void *a28,int a29,char a30,void *a31,void *a32,void *a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;

  if ((a14 & 1) != 0)
  {

  }
  if (!a20)

  if ((a19 & 1) != 0)
  {

  }
  if (!a26)

  if ((a25 & 1) != 0)
  {

  }
  if (!a31)

  if ((a30 & 1) != 0)
  {

  }
  if (!*(_QWORD *)(v42 - 152))

  if ((*(_DWORD *)(v42 - 156) & 1) != 0)
  {

  }
  if (!v41)

  if ((*(_DWORD *)(v42 - 116) & 1) != 0)
  {

  }
  if (!v38)

  if ((*(_DWORD *)(v42 - 92) & 1) != 0)
  {

  }
  if (!v35)

  _Unwind_Resume(a1);
}

void sub_184375698()
{
  JUMPOUT(0x184375678);
}

void sub_1843756A0()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x184375688);
  JUMPOUT(0x184375680);
}

void sub_1843756AC()
{
  JUMPOUT(0x18437568CLL);
}

void sub_184375724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843757D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843758DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184375B30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184375E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184376084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843761AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437626C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843762CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184376344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184376424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843764D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184376608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843767B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;

  if ((v12 & 1) != 0)
  {

  }
  if (!v11)

  _Unwind_Resume(a1);
}

void sub_1843768C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184376920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184376998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184376A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184376B74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184376CB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184376D38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184376DB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184376E0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184376E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184376F68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184377000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843770F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843771C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_184377274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843772C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184377450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184377564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184377698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843776F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184377774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843777BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437782C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1843778EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18437797C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184377A40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184377A9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184377B1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184377B64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184377BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184377C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184377D24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184377F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184378588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, int a15, char a16, void *a17, void *a18, int a19, char a20,void *a21,void *a22,void *a23,void *a24,int a25,char a26,void *a27,void *a28,void *a29,void *a30,int a31,char a32,void *a33,void *a34,void *a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  if ((a16 & 1) != 0)
  {

  }
  if (!a21)

  if ((a20 & 1) != 0)
  {

  }
  if (!a27)

  if ((a26 & 1) != 0)
  {

  }
  if (!a33)

  if ((a32 & 1) != 0)
  {

  }
  if (!*(_QWORD *)(v43 - 152))

  if ((*(_DWORD *)(v43 - 156) & 1) != 0)
  {

  }
  if (!v42)

  if ((*(_DWORD *)(v43 - 116) & 1) != 0)
  {

  }
  if (!v39)

  if ((*(_DWORD *)(v43 - 92) & 1) != 0)
  {

  }
  if (!v36)

  _Unwind_Resume(a1);
}

void sub_184378860()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x184378850);
  JUMPOUT(0x184378848);
}

void sub_18437886C()
{
  JUMPOUT(0x184378854);
}

void sub_1843788E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843789A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184378ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184378D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184378F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843791BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437926C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184379304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184379358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843793DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1843794D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18437958C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843796E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184379874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_184379958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843799C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184379A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184379BD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184379D08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184379E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184379F08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184379FBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437A004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437A0C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437A16C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437A2A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437A500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, int a11, char a12, void *a13, void *a14, int a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if ((a12 & 1) != 0)
  {

  }
  if (!v20)

  if ((a16 & 1) != 0)
  {

  }
  if (!v17)

  _Unwind_Resume(a1);
}

void sub_18437A65C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437A6C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437A754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18437A888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437A9BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437AB68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437AE48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18437AF44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437AFB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437B05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18437B2B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18437B864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *v63;

  Lazuli::GroupChatInformation::~GroupChatInformation(&a9);

  _Unwind_Resume(a1);
}

void Lazuli::MessageText::~MessageText(Lazuli::MessageText *this)
{
  void **v2;

  if (*((_BYTE *)this + 80))
  {
    v2 = (void **)((char *)this + 56);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((_BYTE *)this + 48))
  {
    v2 = (void **)((char *)this + 24);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void Lazuli::MessageGroupText::~MessageGroupText(Lazuli::MessageGroupText *this)
{
  void **v2;

  if (*((_BYTE *)this + 368))
  {
    v2 = (void **)((char *)this + 344);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((char *)this + 343) < 0)
    operator delete(*((void **)this + 40));
  Lazuli::GroupChatInformation::~GroupChatInformation((void **)this);
}

void Lazuli::MessageGeoLocationPush::~MessageGeoLocationPush(Lazuli::MessageGeoLocationPush *this)
{
  void **v2;

  if (*((_BYTE *)this + 104))
  {
    v2 = (void **)((char *)this + 80);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((_BYTE *)this + 72))
  {
    v2 = (void **)((char *)this + 48);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((_BYTE *)this + 40))
  {
    if (*((char *)this + 39) < 0)
      operator delete(*((void **)this + 2));
  }
}

void Lazuli::MessageGroupGeoLocationPush::~MessageGroupGeoLocationPush(Lazuli::MessageGroupGeoLocationPush *this)
{
  void **v2;

  if (*((_BYTE *)this + 360))
  {
    v2 = (void **)((char *)this + 336);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  Lazuli::GroupChatInformation::~GroupChatInformation((void **)this);
}

Lazuli::MessageFileTransferPush *Lazuli::MessageFileTransferPush::MessageFileTransferPush(Lazuli::MessageFileTransferPush *this, const Lazuli::MessageFileTransferPush *a2)
{
  std::string *v4;

  v4 = Lazuli::FileTransferDescriptor::FileTransferDescriptor((std::string *)this, (uint64_t)a2);
  std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false>::__optional_copy_base[abi:nn180100]((uint64_t)&v4[10].__r_.__value_.__l.__size_, (uint64_t)a2 + 248);
  std::__optional_copy_base<Lazuli::CustomMetaData,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 280), (uint64_t)a2 + 280);
  return this;
}

void sub_18437BB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 272))
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&a10);
  if (*(_BYTE *)(v10 + 240))
  {
    a10 = (void **)(v10 + 216);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&a10);
  }
  if (*(char *)(v10 + 191) < 0)
    operator delete(*(void **)(v10 + 168));
  if (*(char *)(v10 + 167) < 0)
    operator delete(*(void **)(v10 + 144));
  if (*(char *)(v10 + 143) < 0)
    operator delete(*(void **)(v10 + 120));
  if (*(char *)(v10 + 119) < 0)
    operator delete(*(void **)(v10 + 96));
  std::__optional_destruct_base<Lazuli::FileThumbnailInformation,false>::~__optional_destruct_base[abi:nn180100](v10);
  _Unwind_Resume(a1);
}

Lazuli::MessageGroupFileTransferPush *Lazuli::MessageGroupFileTransferPush::MessageGroupFileTransferPush(Lazuli::MessageGroupFileTransferPush *this, const Lazuli::MessageGroupFileTransferPush *a2)
{
  Lazuli::GroupChatInformation *v4;

  v4 = Lazuli::GroupChatInformation::GroupChatInformation(this, a2);
  Lazuli::FileTransferDescriptor::FileTransferDescriptor((std::string *)((char *)v4 + 320), (uint64_t)a2 + 320);
  std::__optional_copy_base<Lazuli::CustomMetaData,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 568), (uint64_t)a2 + 568);
  return this;
}

void sub_18437BC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(v10 + 560))
  {
    a10 = (void **)(v10 + 536);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&a10);
  }
  Lazuli::MessageGroupFileTransferPush::MessageGroupFileTransferPush(v10, v11);
  Lazuli::GroupChatInformation::~GroupChatInformation((void **)v10);
  _Unwind_Resume(a1);
}

Lazuli::MessageChatBotCard *Lazuli::MessageChatBotCard::MessageChatBotCard(Lazuli::MessageChatBotCard *this, const Lazuli::MessageChatBotCard *a2)
{
  uint64_t v4;

  v4 = Lazuli::ChatBotCard::ChatBotCard((uint64_t)this, a2);
  std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false>::__optional_copy_base[abi:nn180100](v4 + 328, (uint64_t)a2 + 328);
  return this;
}

void sub_18437BCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 320))
  {
    a10 = (void **)(v10 + 296);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&a10);
  }
  Lazuli::MessageChatBotCard::MessageChatBotCard(v10, v10 + 48);
  _Unwind_Resume(a1);
}

Lazuli::MessageChatBotCardCarousel *Lazuli::MessageChatBotCardCarousel::MessageChatBotCardCarousel(Lazuli::MessageChatBotCardCarousel *this, const Lazuli::MessageChatBotCardCarousel *a2)
{
  __int128 v4;

  v4 = *(_OWORD *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *(_OWORD *)this = v4;
  std::__optional_copy_base<Lazuli::MessageChatBotCardStyle,false>::__optional_copy_base[abi:nn180100]((std::string *)this + 1, (__int128 *)((char *)a2 + 24));
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<Lazuli::ChatBotCardContent>::__init_with_size[abi:nn180100]<Lazuli::ChatBotCardContent*,Lazuli::ChatBotCardContent*>((std::string *)((char *)this + 56), *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 8), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false>::__optional_copy_base[abi:nn180100]((uint64_t)this + 80, (uint64_t)a2 + 80);
  return this;
}

void sub_18437BDA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  std::vector<Lazuli::ChatBotCardContent>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  if (*(_BYTE *)(v2 + 48))
  {
    if (*(char *)(v2 + 47) < 0)
      operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void Lazuli::MessageChatBotCardCarousel::~MessageChatBotCardCarousel(Lazuli::MessageChatBotCardCarousel *this)
{
  void **v2;

  if (*((_BYTE *)this + 104))
  {
    v2 = (void **)((char *)this + 80);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  v2 = (void **)((char *)this + 56);
  std::vector<Lazuli::ChatBotCardContent>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((_BYTE *)this + 48))
  {
    if (*((char *)this + 47) < 0)
      operator delete(*((void **)this + 3));
  }
}

void sub_18437BF74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437BFD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437C050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437C098(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437C108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18437C1C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18437C258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437C350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437C3DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437C45C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437C4B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437C554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18437C658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18437C6FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437C7EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437C8C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18437C970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437C9C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437CA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18437CB10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437CBCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437CD00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437CDB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437CE48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437CE9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437CF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18437D014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18437D0CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false>::__optional_copy_base[abi:nn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<Lazuli::ChatBotSuggestedChipList,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_18437D148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<Lazuli::ChatBotSuggestedChipList,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<Lazuli::ChatBotSuggestedChip>::__init_with_size[abi:nn180100]<Lazuli::ChatBotSuggestedChip*,Lazuli::ChatBotSuggestedChip*>(result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

_QWORD *std::vector<Lazuli::ChatBotSuggestedChip>::__init_with_size[abi:nn180100]<Lazuli::ChatBotSuggestedChip*,Lazuli::ChatBotSuggestedChip*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    std::vector<Lazuli::ChatBotMenuL2Content>::__vallocate[abi:nn180100](result, a4);
    return (_QWORD *)std::vector<Lazuli::ChatBotSuggestedChip>::__construct_at_end<Lazuli::ChatBotSuggestedChip*,Lazuli::ChatBotSuggestedChip*>(v6, a2, a3);
  }
  return result;
}

uint64_t std::vector<Lazuli::ChatBotSuggestedChip>::__construct_at_end<Lazuli::ChatBotSuggestedChip*,Lazuli::ChatBotSuggestedChip*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(v4 + v7) = *(_DWORD *)(a2 + v7);
      result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<Lazuli::ChatBotSuggestedAction,Lazuli::ChatBotSuggestedReply>,(std::__variant_detail::_Trait)1>::__copy_constructor(v4 + v7 + 8, a2 + v7 + 8);
      v7 += 232;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(v3 + 8) = v4;
  return result;
}

void sub_18437D284(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Lazuli::ChatBotSuggestedChip>::__clear[abi:nn180100](v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<Lazuli::ChatBotSuggestedChip>::__clear[abi:nn180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = result;
  v2 = *result;
  v3 = result[1];
  if (v3 != *result)
  {
    do
    {
      v4 = *(unsigned int *)(v3 - 8);
      if ((_DWORD)v4 != -1)
        result = (_QWORD *)((uint64_t (*)(char *, uint64_t))off_1E1533CD8[v4])(&v5, v3 - 224);
      *(_DWORD *)(v3 - 8) = -1;
      v3 -= 232;
    }
    while (v3 != v2);
  }
  v1[1] = v2;
  return result;
}

std::string *std::__optional_copy_base<Lazuli::CustomMetaData,false>::__optional_copy_base[abi:nn180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<Lazuli::CustomMetaData,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<Lazuli::CustomMetaData,false> const&>(a1, a2);
  return a1;
}

void sub_18437D380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_storage_base<Lazuli::CustomMetaData,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<Lazuli::CustomMetaData,false> const&>(std::string *result, uint64_t a2)
{
  std::string *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    result->__r_.__value_.__r.__words[0] = 0;
    result->__r_.__value_.__l.__size_ = 0;
    result->__r_.__value_.__r.__words[2] = 0;
    result = std::vector<Lazuli::CustomMetaDataWrapper>::__init_with_size[abi:nn180100]<Lazuli::CustomMetaDataWrapper*,Lazuli::CustomMetaDataWrapper*>(result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    v2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *std::vector<Lazuli::CustomMetaDataWrapper>::__init_with_size[abi:nn180100]<Lazuli::CustomMetaDataWrapper*,Lazuli::CustomMetaDataWrapper*>(std::string *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Lazuli::CustomMetaDataWrapper>::__vallocate[abi:nn180100](result, a4);
    return std::vector<Lazuli::CustomMetaDataWrapper>::__construct_at_end<Lazuli::CustomMetaDataWrapper*,Lazuli::CustomMetaDataWrapper*>(v6, a2, a3);
  }
  return result;
}

char *std::vector<Lazuli::CustomMetaDataWrapper>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::CustomMetaDataWrapper>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

std::string *std::vector<Lazuli::CustomMetaDataWrapper>::__construct_at_end<Lazuli::CustomMetaDataWrapper*,Lazuli::CustomMetaDataWrapper*>(std::string *result, uint64_t a2, uint64_t a3)
{
  std::string *v3;
  std::string::size_type size;
  uint64_t v7;

  v3 = result;
  size = result->__r_.__value_.__l.__size_;
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = std::construct_at[abi:nn180100]<Lazuli::CustomMetaDataWrapper,Lazuli::CustomMetaDataWrapper&,Lazuli::CustomMetaDataWrapper*>((std::string *)(size + v7), (__int128 *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    size += v7;
  }
  v3->__r_.__value_.__l.__size_ = size;
  return result;
}

void sub_18437D4F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::CustomMetaDataWrapper>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(48 * a2);
}

std::string *std::construct_at[abi:nn180100]<Lazuli::CustomMetaDataWrapper,Lazuli::CustomMetaDataWrapper&,Lazuli::CustomMetaDataWrapper*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_18437D5BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:nn180100]<Lazuli::CustomMetaDataWrapper,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:nn180100]<Lazuli::CustomMetaDataWrapper,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

Lazuli::GroupChatInformation *Lazuli::GroupChatInformation::GroupChatInformation(Lazuli::GroupChatInformation *this, const Lazuli::GroupChatInformation *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>((std::string *)this, *(__int128 **)a2, *((__int128 **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<Lazuli::GroupChatParticipant>::__init_with_size[abi:nn180100]<Lazuli::GroupChatParticipant*,Lazuli::GroupChatParticipant*>((_QWORD *)this + 3, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 5);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v4 = *((_OWORD *)a2 + 3);
    *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)this + 3) = v4;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)((char *)this + 72) = v5;
  }
  std::__optional_copy_base<Lazuli::GroupChatUri,false>::__optional_copy_base[abi:nn180100]((std::string *)this + 4, (uint64_t)a2 + 96);
  std::__optional_copy_base<Lazuli::GroupChatSubject,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 176), (__int128 *)a2 + 11);
  std::__optional_copy_base<Lazuli::GroupChatIcon,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 208), (uint64_t)a2 + 208);
  v6 = (std::string *)((char *)this + 288);
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 36), *((_QWORD *)a2 + 37));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 18);
    *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *((_DWORD *)this + 78) = *((_DWORD *)a2 + 78);
  return this;
}

void sub_18437D7D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;

  std::__optional_destruct_base<Lazuli::GroupChatIcon,false>::~__optional_destruct_base[abi:nn180100](v6);
  if (*(_BYTE *)(v1 + 200) && *(char *)(v1 + 199) < 0)
    operator delete(*v5);
  std::__optional_destruct_base<Lazuli::GroupChatUri,false>::~__optional_destruct_base[abi:nn180100](v4);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  Lazuli::GroupChatParticipantList::~GroupChatParticipantList((void **)v1);
  _Unwind_Resume(a1);
}

void sub_18437D85C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  JUMPOUT(0x18437D854);
}

void Lazuli::GroupChatParticipantList::~GroupChatParticipantList(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<Lazuli::GroupChatParticipant>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
}

std::string *std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:nn180100](result, a4);
    result = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((int)v6 + 16, a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_18437D908(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(24 * a2);
}

std::string *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(int a1, __int128 *a2, __int128 *a3, std::string *this)
{
  __int128 *v6;
  __int128 v7;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        this->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      ++this;
    }
    while (v6 != a3);
  }
  return this;
}

_QWORD *std::vector<Lazuli::GroupChatParticipant>::__init_with_size[abi:nn180100]<Lazuli::GroupChatParticipant*,Lazuli::GroupChatParticipant*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Lazuli::GroupChatParticipant>::__vallocate[abi:nn180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<Lazuli::GroupChatParticipant>,Lazuli::GroupChatParticipant*,Lazuli::GroupChatParticipant*,Lazuli::GroupChatParticipant*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_18437DA64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<Lazuli::GroupChatParticipant>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSEnumerationValue>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<Lazuli::GroupChatParticipant>,Lazuli::GroupChatParticipant*,Lazuli::GroupChatParticipant*,Lazuli::GroupChatParticipant*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 *v8;
  std::string *v9;
  __int128 v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = (__int128 *)(a2 + v7);
      v9 = (std::string *)(a4 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v10 = *v8;
        v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
      *(_DWORD *)(a4 + v7 + 24) = *(_DWORD *)(a2 + v7 + 24);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

std::string *std::__optional_copy_base<Lazuli::GroupChatUri,false>::__optional_copy_base[abi:nn180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[3].__r_.__value_.__s.__data_[0] = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    std::construct_at[abi:nn180100]<Lazuli::GroupChatUri,Lazuli::GroupChatUri const&,Lazuli::GroupChatUri*>(this, (__int128 *)a2);
    this[3].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_18437DC00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<Lazuli::GroupChatUri,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:nn180100]<Lazuli::GroupChatUri,Lazuli::GroupChatUri const&,Lazuli::GroupChatUri*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_18437DCC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<Lazuli::GroupChatUri,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::__optional_copy_base<Lazuli::GroupChatSubject,false>::__optional_copy_base[abi:nn180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_18437DD7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<Lazuli::GroupChatIcon,false>::__optional_copy_base[abi:nn180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[3].__r_.__value_.__s.__data_[0] = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    std::construct_at[abi:nn180100]<Lazuli::GroupChatIcon,Lazuli::GroupChatIcon const&,Lazuli::GroupChatIcon*>(this, (__int128 *)a2);
    this[3].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_18437DDD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<Lazuli::GroupChatIcon,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:nn180100]<Lazuli::GroupChatIcon,Lazuli::GroupChatIcon const&,Lazuli::GroupChatIcon*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  void *size;
  std::string *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 3);
  v5 = (_BYTE *)*((_QWORD *)a2 + 4);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    std::vector<char>::__vallocate[abi:nn180100](this[1].__r_.__value_.__r.__words, v5 - v6);
    size = (void *)this[1].__r_.__value_.__l.__size_;
    memmove(size, v6, v7);
    this[1].__r_.__value_.__l.__size_ = (std::string::size_type)size + v7;
  }
  v9 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v10 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_18437DEB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<Lazuli::GroupChatIcon,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<Lazuli::GroupChatParticipant>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Lazuli::GroupChatParticipant>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<Lazuli::GroupChatParticipant>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void Lazuli::GroupChatInformation::~GroupChatInformation(void **this)
{
  void **v2;

  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  std::__optional_destruct_base<Lazuli::GroupChatIcon,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(this + 26));
  if (*((_BYTE *)this + 200) && *((char *)this + 199) < 0)
    operator delete(this[22]);
  std::__optional_destruct_base<Lazuli::GroupChatUri,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = this + 3;
  std::vector<Lazuli::GroupChatParticipant>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
}

std::string *Lazuli::FileTransferDescriptor::FileTransferDescriptor(std::string *a1, uint64_t a2)
{
  _BYTE *v4;

  v4 = std::__optional_copy_base<Lazuli::FileThumbnailInformation,false>::__optional_copy_base[abi:nn180100](a1, a2);
  Lazuli::FileDispositionInformation::FileDispositionInformation((uint64_t)(v4 + 88), a2 + 88);
  std::__optional_copy_base<Lazuli::CustomMetaData,false>::__optional_copy_base[abi:nn180100](a1 + 9, a2 + 216);
  return a1;
}

void sub_18437E0B8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _Unwind_Exception *a9)
{
  uint64_t v9;
  _Unwind_Exception *v12;

  if (*(char *)(v9 + 191) < 0)
    operator delete(*(void **)(v9 + 168));
  Lazuli::FileTransferDescriptor::FileTransferDescriptor(v9, a1, a2, (uint64_t)&a9);
  v12 = a9;
  std::__optional_destruct_base<Lazuli::FileThumbnailInformation,false>::~__optional_destruct_base[abi:nn180100](v9);
  _Unwind_Resume(v12);
}

_BYTE *std::__optional_copy_base<Lazuli::FileThumbnailInformation,false>::__optional_copy_base[abi:nn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[80] = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    std::construct_at[abi:nn180100]<Lazuli::FileThumbnailInformation,Lazuli::FileThumbnailInformation const&,Lazuli::FileThumbnailInformation*>((uint64_t)a1, a2);
    a1[80] = 1;
  }
  return a1;
}

void sub_18437E140(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<Lazuli::FileThumbnailInformation,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:nn180100]<Lazuli::FileThumbnailInformation,Lazuli::FileThumbnailInformation const&,Lazuli::FileThumbnailInformation*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  v6 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_18437E214(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<Lazuli::FileThumbnailInformation,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80))
  {
    if (*(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t Lazuli::FileDispositionInformation::FileDispositionInformation(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  v7 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  return a1;
}

void sub_18437E3A8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[79] < 0)
    operator delete(*v4);
  if (v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void Lazuli::MessageFileTransferPush::~MessageFileTransferPush(Lazuli::MessageFileTransferPush *this)
{
  void **v2;

  if (*((_BYTE *)this + 304))
  {
    v2 = (void **)((char *)this + 280);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((_BYTE *)this + 272))
  {
    v2 = (void **)((char *)this + 248);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((_BYTE *)this + 240))
  {
    v2 = (void **)((char *)this + 216);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  std::__optional_destruct_base<Lazuli::FileThumbnailInformation,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)this);
}

void Lazuli::MessageGroupFileTransferPush::~MessageGroupFileTransferPush(Lazuli::MessageGroupFileTransferPush *this)
{
  void **v2;

  if (*((_BYTE *)this + 592))
  {
    v2 = (void **)((char *)this + 568);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((_BYTE *)this + 560))
  {
    v2 = (void **)((char *)this + 536);
    std::vector<Lazuli::CustomMetaDataWrapper>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((char *)this + 511) < 0)
    operator delete(*((void **)this + 61));
  if (*((char *)this + 487) < 0)
    operator delete(*((void **)this + 58));
  if (*((char *)this + 463) < 0)
    operator delete(*((void **)this + 55));
  if (*((char *)this + 439) < 0)
    operator delete(*((void **)this + 52));
  std::__optional_destruct_base<Lazuli::FileThumbnailInformation,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)this + 320);
  Lazuli::GroupChatInformation::~GroupChatInformation((void **)this);
}

uint64_t Lazuli::ChatBotCard::ChatBotCard(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  std::__optional_copy_base<Lazuli::MessageChatBotCardStyle,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 16), a2 + 1);
  std::__optional_copy_base<Lazuli::ChatBotCardMedia,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 48), (uint64_t)(a2 + 3));
  std::__optional_copy_base<Lazuli::ChatBotCardTitle,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 232), (_OWORD *)((char *)a2 + 232));
  std::__optional_copy_base<Lazuli::ChatBotCardDescription,false>::__optional_copy_base[abi:nn180100]((std::string *)(a1 + 264), (_OWORD *)((char *)a2 + 264));
  std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false>::__optional_copy_base[abi:nn180100](a1 + 296, (uint64_t)a2 + 296);
  return a1;
}

void sub_18437E5D0(_Unwind_Exception *a1)
{
  void **v1;
  char *v2;
  uint64_t v3;
  void **v4;
  void **v5;

  if (v2[288] && v2[287] < 0)
    operator delete(*v5);
  if (v2[256] && v2[255] < 0)
    operator delete(*v4);
  std::__optional_destruct_base<Lazuli::ChatBotCardMedia,false>::~__optional_destruct_base[abi:nn180100](v3);
  if (v2[40])
  {
    if (v2[39] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<Lazuli::MessageChatBotCardStyle,false>::__optional_copy_base[abi:nn180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_18437E670(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<Lazuli::ChatBotCardMedia,false>::__optional_copy_base[abi:nn180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[7].__r_.__value_.__s.__data_[8] = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    Lazuli::ChatBotCardMedia::ChatBotCardMedia(this, (__int128 *)a2);
    this[7].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_18437E6CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<Lazuli::ChatBotCardMedia,false>::~__optional_destruct_base[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

std::string *Lazuli::ChatBotCardMedia::ChatBotCardMedia(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 56), (__int128 *)((char *)a2 + 56));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)this + 88), (__int128 *)((char *)a2 + 88));
  v6 = *(__int128 *)((char *)a2 + 120);
  LODWORD(this[5].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 34);
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v6;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100](this + 6, a2 + 9);
  return this;
}

void sub_18437E7B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<Lazuli::ChatBotCardMedia,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 176))
  {
    if (*(_BYTE *)(a1 + 168) && *(char *)(a1 + 167) < 0)
      operator delete(*(void **)(a1 + 144));
    if (*(_BYTE *)(a1 + 112) && *(char *)(a1 + 111) < 0)
      operator delete(*(void **)(a1 + 88));
    if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::__optional_copy_base<Lazuli::ChatBotCardTitle,false>::__optional_copy_base[abi:nn180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_18437E8E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<Lazuli::ChatBotCardDescription,false>::__optional_copy_base[abi:nn180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_18437E928(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:nn180100]((void **)v1);
  _Unwind_Resume(exception_object);
}

void Lazuli::MessageChatBotCard::~MessageChatBotCard(Lazuli::MessageChatBotCard *this)
{
  void **v2;

  if (*((_BYTE *)this + 352))
  {
    v2 = (void **)((char *)this + 328);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((_BYTE *)this + 320))
  {
    v2 = (void **)((char *)this + 296);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  if (*((_BYTE *)this + 288) && *((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  if (*((_BYTE *)this + 256) && *((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  std::__optional_destruct_base<Lazuli::ChatBotCardMedia,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)this + 48);
  if (*((_BYTE *)this + 40))
  {
    if (*((char *)this + 39) < 0)
      operator delete(*((void **)this + 2));
  }
}

std::string *std::vector<Lazuli::ChatBotCardContent>::__init_with_size[abi:nn180100]<Lazuli::ChatBotCardContent*,Lazuli::ChatBotCardContent*>(std::string *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Lazuli::ChatBotCardContent>::__vallocate[abi:nn180100](result, a4);
    return std::vector<Lazuli::ChatBotCardContent>::__construct_at_end<Lazuli::ChatBotCardContent*,Lazuli::ChatBotCardContent*>(v6, a2, a3);
  }
  return result;
}

char *std::vector<Lazuli::ChatBotCardContent>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::ChatBotCardContent>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

std::string *std::vector<Lazuli::ChatBotCardContent>::__construct_at_end<Lazuli::ChatBotCardContent*,Lazuli::ChatBotCardContent*>(std::string *result, uint64_t a2, uint64_t a3)
{
  std::string *v3;
  std::string::size_type size;
  uint64_t v7;

  v3 = result;
  size = result->__r_.__value_.__l.__size_;
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = std::construct_at[abi:nn180100]<Lazuli::ChatBotCardContent,Lazuli::ChatBotCardContent&,Lazuli::ChatBotCardContent*>((std::string *)(size + v7), a2 + v7);
      v7 += 280;
    }
    while (a2 + v7 != a3);
    size += v7;
  }
  v3->__r_.__value_.__l.__size_ = size;
  return result;
}

void sub_18437EAF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Lazuli::ChatBotCardContent>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(280 * a2);
}

std::string *std::construct_at[abi:nn180100]<Lazuli::ChatBotCardContent,Lazuli::ChatBotCardContent&,Lazuli::ChatBotCardContent*>(std::string *a1, uint64_t a2)
{
  std::string *v4;

  v4 = std::__optional_copy_base<Lazuli::ChatBotCardMedia,false>::__optional_copy_base[abi:nn180100](a1, a2);
  std::__optional_copy_base<Lazuli::ChatBotCardTitle,false>::__optional_copy_base[abi:nn180100]((std::string *)((char *)v4 + 184), (__int128 *)(a2 + 184));
  std::__optional_copy_base<Lazuli::ChatBotCardDescription,false>::__optional_copy_base[abi:nn180100](a1 + 9, (__int128 *)(a2 + 216));
  std::__optional_copy_base<Lazuli::ChatBotSuggestedChipList,false>::__optional_copy_base[abi:nn180100]((uint64_t)&a1[10].__r_.__value_.__l.__size_, a2 + 248);
  return a1;
}

void sub_18437EBA4(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[240] && v1[239] < 0)
    operator delete(*v3);
  if (v1[208])
  {
    if (v1[207] < 0)
      operator delete(*v2);
  }
  std::__optional_destruct_base<Lazuli::ChatBotCardMedia,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v1);
  _Unwind_Resume(a1);
}

void std::vector<Lazuli::ChatBotCardContent>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 280;
        std::__destroy_at[abi:nn180100]<Lazuli::ChatBotCardContent,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__destroy_at[abi:nn180100]<Lazuli::ChatBotCardContent,0>(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 272))
  {
    v3 = (void **)(a1 + 248);
    std::vector<Lazuli::ChatBotSuggestedChip>::__destroy_vector::operator()[abi:nn180100](&v3);
  }
  if (*(_BYTE *)(a1 + 240) && *(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  if (*(_BYTE *)(a1 + 208) && *(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  return std::__optional_destruct_base<Lazuli::ChatBotCardMedia,false>::~__optional_destruct_base[abi:nn180100](a1);
}

void sub_18437ED94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437EE5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18437EF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18437F010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437F13C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437F204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18437F2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18437F3B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437F4BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437F548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18437F5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18437F688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437F754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437F7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18437F864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18437F920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437FA64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18437FB94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18437FCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18437FE1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *CTCATargetVisibilityLevelAsString(unint64_t a1)
{
  if (a1 > 3)
    return "???";
  else
    return off_1E1533CE8[a1];
}

void sub_18437FF90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18437FFEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184380048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1843800D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *CTCATransmissionPayloadTypeAsString(unint64_t a1)
{
  if (a1 > 7)
    return "???";
  else
    return off_1E1533D08[a1];
}

void sub_18438026C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843803B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1843804E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184380668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *CTCAConnectionStatusAsString(unint64_t a1)
{
  if (a1 > 3)
    return "???";
  else
    return off_1E1533D48[a1];
}

const char *CTCAConnectionSyncStatusAsString(unint64_t a1)
{
  if (a1 > 2)
    return "???";
  else
    return off_1E1533D68[a1];
}

const char *CTCAConnectionRegistrationStatusAsString(unint64_t a1)
{
  if (a1 > 2)
    return "???";
  else
    return off_1E1533D80[a1];
}

const char *CTCAConnectionCongestionStatusAsString(unint64_t a1)
{
  if (a1 > 4)
    return "???";
  else
    return off_1E1533D98[a1];
}

void sub_184380964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184380A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184380BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184380D04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184380ECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184380FDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1843810E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18438126C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1843813D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843814A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184381560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184381654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *CTCAStewieEmergencyRequestReasonAsString(unint64_t a1)
{
  if (a1 > 5)
    return "???";
  else
    return off_1E1533DC0[a1];
}

void sub_184381808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843818D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1843819A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184381AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184381C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184381D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184381DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184381F20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *CTCAStewieExitReasonAsString(unint64_t a1)
{
  if (a1 > 0xD)
    return "???";
  else
    return off_1E1533DF0[a1];
}

void sub_1843820A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184382158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184382230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184382344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184382448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843824A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184382500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184382590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *CTCAInternetInterfaceAsString(unint64_t a1)
{
  if (a1 > 2)
    return "???";
  else
    return off_1E1533E60[a1];
}

void sub_1843828DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184382C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184382F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184383390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

const char *CTCALocationAcquisitionStatusAsString(uint64_t a1)
{
  const char *v1;

  v1 = "???";
  if (a1 == 1)
    v1 = "CTCALocationAcquisitionStatusInProgress";
  if (a1)
    return v1;
  else
    return "CTCALocationAcquisitionStatusUnknown";
}

void sub_184383684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843836E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438373C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1843837CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843838D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843839D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184383AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184383BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184383D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184383E04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184383EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184383FFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184384160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438425C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18438434C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1843844BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18438462C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_184384744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_184384828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_184384910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184384AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_184384C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_184384DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);

  _Block_object_dispose((const void *)(v10 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184384F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_184384FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ctConvertGsmBandToInteger(int a1)
{
  int v1;
  uint64_t result;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;

  if (a1 > 31)
  {
    if (a1 == 256)
      v3 = 9;
    else
      v3 = 0;
    if (a1 == 128)
      v4 = 8;
    else
      v4 = v3;
    if (a1 == 64)
      v5 = 7;
    else
      v5 = 0;
    if (a1 == 32)
      v6 = 6;
    else
      v6 = v5;
    if (a1 <= 127)
      return v6;
    else
      return v4;
  }
  else
  {
    v1 = a1 - 1;
    result = 0;
    switch(v1)
    {
      case 0:
        result = 1;
        break;
      case 1:
        result = 2;
        break;
      case 2:
      case 4:
      case 5:
      case 6:
        return result;
      case 3:
        result = 3;
        break;
      case 7:
        result = 4;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t ctConvertUmtsBandToInteger(int a1)
{
  int v1;
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;

  if (a1 > 63)
  {
    if (a1 == 1024)
      v3 = 11;
    else
      v3 = 0;
    if (a1 == 512)
      v4 = 10;
    else
      v4 = v3;
    if (a1 == 256)
      v5 = 9;
    else
      v5 = v4;
    if (a1 == 128)
      v6 = 8;
    else
      v6 = 0;
    if (a1 == 64)
      v7 = 7;
    else
      v7 = v6;
    if (a1 <= 255)
      return v7;
    else
      return v5;
  }
  else
  {
    v1 = a1 - 1;
    result = 0;
    switch(v1)
    {
      case 0:
        result = 1;
        break;
      case 1:
        result = 2;
        break;
      case 2:
      case 4:
      case 5:
      case 6:
        return result;
      case 3:
        result = 3;
        break;
      case 7:
        result = 4;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t ctConvertTdsBandToInteger(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 0;
  switch(v1)
  {
    case 0:
      result = 1;
      break;
    case 1:
      result = 2;
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      return result;
    case 3:
      result = 3;
      break;
    case 7:
      result = 4;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ctConvertCdmaBandToInteger(int a1)
{
  int v1;
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  if (a1 > 1023)
  {
    if (a1 == 0x80000)
      v3 = 20;
    else
      v3 = 0;
    if (a1 == 0x40000)
      v4 = 19;
    else
      v4 = v3;
    if (a1 == 0x20000)
      v5 = 18;
    else
      v5 = v4;
    if (a1 == 0x10000)
      v6 = 17;
    else
      v6 = 0;
    if (a1 == 0x8000)
      v7 = 16;
    else
      v7 = v6;
    if (a1 < 0x20000)
      v5 = v7;
    if (a1 == 0x4000)
      v8 = 15;
    else
      v8 = 0;
    if (a1 == 0x2000)
      v9 = 14;
    else
      v9 = v8;
    if (a1 == 4096)
      v10 = 13;
    else
      v10 = v9;
    if (a1 == 2048)
      v11 = 12;
    else
      v11 = 0;
    if (a1 == 1024)
      v12 = 11;
    else
      v12 = v11;
    if (a1 <= 4095)
      v10 = v12;
    if (a1 < 0x8000)
      return v10;
    else
      return v5;
  }
  else if (a1 > 31)
  {
    if (a1 == 512)
      v13 = 10;
    else
      v13 = 0;
    if (a1 == 256)
      v14 = 9;
    else
      v14 = v13;
    if (a1 == 128)
      v15 = 8;
    else
      v15 = v14;
    if (a1 == 64)
      v16 = 7;
    else
      v16 = 0;
    if (a1 == 32)
      v17 = 6;
    else
      v17 = v16;
    if (a1 <= 127)
      return v17;
    else
      return v15;
  }
  else
  {
    v1 = a1 - 1;
    result = 0;
    switch(v1)
    {
      case 0:
        result = 1;
        break;
      case 1:
        result = 2;
        break;
      case 2:
      case 4:
      case 5:
      case 6:
        return result;
      case 3:
        result = 3;
        break;
      case 7:
        result = 4;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t ctConvertLteBandToInteger(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  unsigned int v39;

  if (a1 >= 0x200000)
  {
    if (a1 > 0x7FFFFFFF)
    {
      if (a1 > 0xFFFFFFFFFLL)
      {
        v1 = 0x7FFFFFFFFFLL;
        if (a1 == 0x20000000000)
          v2 = 71;
        else
          v2 = 0;
        if (a1 == 0x10000000000)
          v3 = 66;
        else
          v3 = v2;
        if (a1 == 0x8000000000)
          v4 = 48;
        else
          v4 = v3;
        v5 = 0x1000000000;
        v6 = 42;
        if (a1 == 0x4000000000)
          v7 = 46;
        else
          v7 = 0;
        if (a1 == 0x2000000000)
          v8 = 43;
        else
          v8 = v7;
LABEL_134:
        if (a1 == v5)
          v39 = v6;
        else
          v39 = v8;
        if (a1 <= v1)
          return v39;
        else
          return v4;
      }
      v1 = 0x1FFFFFFFFLL;
      if (a1 == 0x800000000)
        v34 = 41;
      else
        v34 = 0;
      if (a1 == 0x400000000)
        v35 = 40;
      else
        v35 = v34;
      if (a1 == 0x200000000)
        v4 = 39;
      else
        v4 = v35;
      v5 = 0x80000000;
      v6 = 37;
      v36 = a1 == 0x100000000;
      v8 = 38;
LABEL_132:
      if (!v36)
        v8 = 0;
      goto LABEL_134;
    }
    if (a1 > 0x3FFFFFF)
    {
      v1 = 0xFFFFFFFLL;
      if (a1 == 0x40000000)
        v37 = 36;
      else
        v37 = 0;
      if (a1 == 0x20000000)
        v38 = 35;
      else
        v38 = v37;
      if (a1 == 0x10000000)
        v4 = 34;
      else
        v4 = v38;
      v5 = 0x4000000;
      v6 = 30;
      v36 = a1 == 0x8000000;
      v8 = 33;
      goto LABEL_132;
    }
    if (a1 == 0x2000000)
      v20 = 29;
    else
      v20 = 0;
    if (a1 == 0x1000000)
      v21 = 28;
    else
      v21 = v20;
    if (a1 == 0x800000)
      v22 = 27;
    else
      v22 = v21;
    if (a1 == 0x400000)
      v23 = 26;
    else
      v23 = 0;
    if (a1 == 0x200000)
      v24 = 25;
    else
      v24 = v23;
    v25 = a1 < 0x800000;
LABEL_109:
    if (v25)
      return v24;
    else
      return v22;
  }
  if (a1 > 2047)
  {
    if (a1 == 0x100000)
      v26 = 24;
    else
      v26 = 0;
    if (a1 == 0x80000)
      v27 = 21;
    else
      v27 = v26;
    if (a1 == 0x40000)
      v22 = 20;
    else
      v22 = v27;
    if (a1 == 0x20000)
      v28 = 19;
    else
      v28 = 0;
    if (a1 == 0x10000)
      v29 = 18;
    else
      v29 = v28;
    if (a1 < 0x40000)
      v22 = v29;
    if (a1 == 0x8000)
      v30 = 17;
    else
      v30 = 0;
    if (a1 == 0x4000)
      v31 = 14;
    else
      v31 = v30;
    if (a1 == 0x2000)
      v24 = 13;
    else
      v24 = v31;
    if (a1 == 4096)
      v32 = 12;
    else
      v32 = 0;
    if (a1 == 2048)
      v33 = 11;
    else
      v33 = v32;
    if (a1 < 0x2000)
      v24 = v33;
    v25 = a1 < 0x10000;
    goto LABEL_109;
  }
  if (a1 == 1024)
    v9 = 10;
  else
    v9 = 0;
  if (a1 == 512)
    v10 = 9;
  else
    v10 = v9;
  if (a1 == 256)
    v11 = 8;
  else
    v11 = v10;
  if (a1 == 128)
    v12 = 7;
  else
    v12 = 0;
  if (a1 == 64)
    v13 = 6;
  else
    v13 = v12;
  if (a1 <= 255)
    v11 = v13;
  if (a1 == 32)
    v14 = 5;
  else
    v14 = 0;
  if (a1 == 16)
    v15 = 4;
  else
    v15 = v14;
  if (a1 == 8)
    v16 = 3;
  else
    v16 = v15;
  if (a1 == 4)
    v17 = 2;
  else
    v17 = 0;
  if (a1 == 2)
    v18 = 1;
  else
    v18 = v17;
  if (a1 <= 7)
    v16 = v18;
  if (a1 <= 63)
    return v16;
  else
    return v11;
}

uint64_t ctConvertNR5GBandToInteger(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;

  if (a1 >= 0x800000)
  {
    if (a1 <= 0x3FFFFFFFFLL)
    {
      if (a1 <= 0xFFFFFFF)
      {
        v3 = 0x1FFFFFFLL;
        if (a1 == 0x8000000)
          v36 = 71;
        else
          v36 = 0;
        if (a1 == 0x4000000)
          v37 = 70;
        else
          v37 = v36;
        if (a1 == 0x2000000)
          v6 = 66;
        else
          v6 = v37;
        if (a1 == 0x1000000)
          v38 = 65;
        else
          v38 = 0;
        if (a1 == 0x800000)
          v35 = 53;
        else
          v35 = v38;
LABEL_123:
        if (a1 <= v3)
          return v35;
        else
          return v6;
      }
      v3 = 0x7FFFFFFFLL;
      if (a1 == 0x200000000)
        v24 = 79;
      else
        v24 = 0;
      if (a1 == 0x100000000)
        v25 = 78;
      else
        v25 = v24;
      if (a1 == 0x80000000)
        v6 = 77;
      else
        v6 = v25;
      v7 = 0x10000000;
      v8 = 74;
      v9 = 0x20000000;
      v10 = 75;
      v11 = a1 == 0x40000000;
      v12 = 76;
    }
    else if (a1 > 0xFFFFFFFFFFLL)
    {
      v3 = 0x7FFFFFFFFFFLL;
      if (a1 == 0x200000000000)
        v32 = 261;
      else
        v32 = 0;
      if (a1 == 0x100000000000)
        v33 = 260;
      else
        v33 = v32;
      if (a1 == 0x80000000000)
        v6 = 259;
      else
        v6 = v33;
      v7 = 0x10000000000;
      v8 = 86;
      v9 = 0x20000000000;
      v10 = 257;
      v11 = a1 == 0x40000000000;
      v12 = 258;
    }
    else
    {
      v3 = 0x1FFFFFFFFFLL;
      if (a1 == 0x8000000000)
        v4 = 85;
      else
        v4 = 0;
      if (a1 == 0x4000000000)
        v5 = 84;
      else
        v5 = v4;
      if (a1 == 0x2000000000)
        v6 = 83;
      else
        v6 = v5;
      v7 = 0x400000000;
      v8 = 80;
      v9 = 0x800000000;
      v10 = 81;
      v11 = a1 == 0x1000000000;
      v12 = 82;
    }
    if (!v11)
      v12 = 0;
    if (a1 == v9)
      v34 = v10;
    else
      v34 = v12;
    if (a1 == v7)
      v35 = v8;
    else
      v35 = v34;
    goto LABEL_123;
  }
  if (a1 > 4095)
  {
    if (a1 == 0x400000)
      v13 = 51;
    else
      v13 = 0;
    if (a1 == 0x200000)
      v14 = 50;
    else
      v14 = v13;
    if (a1 == 0x100000)
      v15 = 48;
    else
      v15 = v14;
    if (a1 == 0x80000)
      v16 = 41;
    else
      v16 = 0;
    if (a1 == 0x40000)
      v17 = 40;
    else
      v17 = v16;
    if (a1 == 0x20000)
      v18 = 39;
    else
      v18 = v17;
    if (a1 < 0x100000)
      v15 = v18;
    if (a1 == 0x10000)
      v19 = 38;
    else
      v19 = 0;
    if (a1 == 0x8000)
      v20 = 34;
    else
      v20 = v19;
    if (a1 == 0x4000)
      v21 = 30;
    else
      v21 = v20;
    if (a1 == 0x2000)
      v22 = 28;
    else
      v22 = 0;
    if (a1 == 4096)
      v23 = 26;
    else
      v23 = v22;
    if (a1 < 0x4000)
      v21 = v23;
    if (a1 < 0x20000)
      return v21;
    else
      return v15;
  }
  else if (a1 > 63)
  {
    if (a1 == 2048)
      v26 = 25;
    else
      v26 = 0;
    if (a1 == 1024)
      v27 = 20;
    else
      v27 = v26;
    if (a1 == 512)
      v28 = 18;
    else
      v28 = v27;
    if (a1 == 256)
      v29 = 14;
    else
      v29 = 0;
    if (a1 == 128)
      v30 = 13;
    else
      v30 = v29;
    if (a1 == 64)
      v31 = 12;
    else
      v31 = v30;
    if (a1 <= 511)
      return v31;
    else
      return v28;
  }
  else
  {
    v1 = a1 - 1;
    result = 0;
    switch(v1)
    {
      case 0:
        result = 1;
        break;
      case 1:
        result = 2;
        break;
      case 2:
      case 4:
      case 5:
      case 6:
        return result;
      case 3:
        result = 3;
        break;
      case 7:
        result = 5;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t ctConvertGsmBandToMask(int a1)
{
  if ((a1 - 1) > 8)
    return 0;
  else
    return qword_1843CE320[(__int16)(a1 - 1)];
}

uint64_t ctConvertUmtsBandToMask(int a1)
{
  if ((a1 - 1) > 0xA)
    return 0;
  else
    return qword_1843CE368[(__int16)(a1 - 1)];
}

uint64_t ctConvertTdsBandToMask(int a1)
{
  if ((a1 - 1) > 5)
    return 0;
  else
    return qword_1843CE3C0[(__int16)(a1 - 1)];
}

uint64_t ctConvertCdmaBandToMask(int a1)
{
  if ((a1 - 1) > 0x13)
    return 0;
  else
    return qword_1843CE3F0[(__int16)(a1 - 1)];
}

uint64_t ctConvertLteBandToMask(int a1)
{
  if ((a1 - 1) > 0x46)
    return 0;
  else
    return qword_1843CE490[(__int16)(a1 - 1)];
}

uint64_t ctConvertNrBandToMask(uint64_t result)
{
  result = result;
  switch((int)result)
  {
    case 1:
      return result;
    case 2:
      result = 2;
      break;
    case 3:
      result = 4;
      break;
    case 4:
    case 6:
    case 9:
    case 10:
    case 11:
    case 15:
    case 16:
    case 17:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 27:
    case 29:
    case 31:
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 49:
    case 52:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 67:
    case 68:
    case 69:
    case 72:
    case 73:
LABEL_5:
      result = 0;
      break;
    case 5:
      result = 8;
      break;
    case 7:
      result = 16;
      break;
    case 8:
      result = 32;
      break;
    case 12:
      result = 64;
      break;
    case 13:
      result = 128;
      break;
    case 14:
      result = 256;
      break;
    case 18:
      result = 512;
      break;
    case 20:
      result = 1024;
      break;
    case 25:
      result = 2048;
      break;
    case 26:
      result = 4096;
      break;
    case 28:
      result = 0x2000;
      break;
    case 30:
      result = 0x4000;
      break;
    case 34:
      result = 0x8000;
      break;
    case 38:
      result = 0x10000;
      break;
    case 39:
      result = 0x20000;
      break;
    case 40:
      result = 0x40000;
      break;
    case 41:
      result = 0x80000;
      break;
    case 48:
      result = 0x100000;
      break;
    case 50:
      result = 0x200000;
      break;
    case 51:
      result = 0x400000;
      break;
    case 53:
      result = 0x800000;
      break;
    case 65:
      result = 0x1000000;
      break;
    case 66:
      result = 0x2000000;
      break;
    case 70:
      result = 0x4000000;
      break;
    case 71:
      result = 0x8000000;
      break;
    case 74:
      result = 0x10000000;
      break;
    case 75:
      result = 0x20000000;
      break;
    case 76:
      result = 0x40000000;
      break;
    case 77:
      result = 0x80000000;
      break;
    case 78:
      result = 0x100000000;
      break;
    case 79:
      result = 0x200000000;
      break;
    case 80:
      result = 0x400000000;
      break;
    case 81:
      result = 0x800000000;
      break;
    case 82:
      result = 0x1000000000;
      break;
    case 83:
      result = 0x2000000000;
      break;
    case 84:
      result = 0x4000000000;
      break;
    case 85:
      result = 0x8000000000;
      break;
    case 86:
      result = 0x10000000000;
      break;
    default:
      switch((int)result)
      {
        case 257:
          result = 0x20000000000;
          break;
        case 258:
          result = 0x40000000000;
          break;
        case 259:
          result = 0x80000000000;
          break;
        case 260:
          result = 0x100000000000;
          break;
        case 261:
          result = 0x200000000000;
          break;
        default:
          goto LABEL_5;
      }
      break;
  }
  return result;
}

uint64_t MMSMessage::prepareForEncoding(MMSMessage *this)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  MMSHeaderContainer *v6;
  MMSContentType *v7;
  uint64_t v8;
  MMSHeaderContainer *v9;
  uint64_t v10;
  uint64_t v11;
  MMSContentType *v12;
  uint64_t v13;
  const char *p_p;
  MMSHeaderContainer *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;

  if (((*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) & 0x7FFFFFFF8) == 0)
    return 1;
  v2 = MMSHeaderContainer::contentTypeHeader(this);
  if (v2)
    return 1;
  __p = 0;
  v20 = 0;
  v21 = 0;
  v4 = *((_QWORD *)this + 9);
  if (((*((_QWORD *)this + 10) - v4) & 0x7FFFFFFF8) == 0)
  {
LABEL_10:
    v8 = MMSContentType::multipartMixedContentType((MMSContentType *)v2);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    v9 = (MMSHeaderContainer *)operator new();
    v10 = MMSHeaderContainer::contentTypeEncoding(v9);
    MMSContentTypeHeader::MMSContentTypeHeader((uint64_t)v9, v10, &v18);
    MMSHeaderContainer::addHeader(this, v9, 0);
    v11 = v18;
    v18 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return 1;
  }
  v5 = 0;
  while (1)
  {
    v6 = *(MMSHeaderContainer **)(v4 + 8 * v5);
    v2 = MMSHeaderContainer::contentTypeHeader(v6);
    if (v2)
    {
      v7 = *(MMSContentType **)(v2 + 24);
      if (MMSContentType::compare(v7, "application", "smil"))
        break;
      v2 = MMSContentType::compare(v7, "application", "smil+xml");
      if ((_DWORD)v2)
        break;
    }
    ++v5;
    v4 = *((_QWORD *)this + 9);
    if (v5 >= ((unint64_t)(*((_QWORD *)this + 10) - v4) >> 3))
      goto LABEL_10;
  }
  v12 = (MMSContentType *)MMSHeaderContainer::headerValueAsString(v6, "Content-ID", (uint64_t)&__p);
  v13 = MMSContentType::multipartRelatedContentType(v12);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  MMSHeaderContainer::addHeader((MMSHeaderContainer *)(v18 + 8), "type", "application/smil", 0);
  if (SHIBYTE(v21) < 0)
  {
    if (v20)
    {
      p_p = (const char *)__p;
      goto LABEL_17;
    }
  }
  else if (HIBYTE(v21))
  {
    p_p = (const char *)&__p;
LABEL_17:
    MMSHeaderContainer::addHeader((MMSHeaderContainer *)(v18 + 8), "start", p_p, 0);
  }
  v15 = (MMSHeaderContainer *)operator new();
  v16 = MMSHeaderContainer::contentTypeEncoding(v15);
  MMSContentTypeHeader::MMSContentTypeHeader((uint64_t)v15, v16, &v18);
  MMSHeaderContainer::addHeader(this, v15, 0);
  v17 = v18;
  v18 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  return 1;
}

uint64_t MMSMessage::partCount(MMSMessage *this)
{
  return (*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 3;
}

uint64_t MMSMessage::part(MMSMessage *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 9);
  if (((unint64_t)(*((_QWORD *)this + 10) - v2) >> 3) <= a2)
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * a2);
}

MMSBinaryHeader *MMSMessage::initEncodingMap(MMSMessage *this)
{
  MMSHeaderEncodingMap *v1;
  MMSBinaryHeader *v2;
  MMSBinaryHeader *v3;
  MMSBinaryHeader *v4;
  MMSHeaderContainer *v5;
  unsigned __int8 *v6;
  MMSBinaryHeader *v7;
  MMSBinaryHeader *v8;
  MMSEnumerationHeader *Prototype;
  MMSBinaryHeader *v10;
  MMSBinaryHeader *v11;
  MMSBinaryHeader *v12;
  MMSMessageClassHeader *v13;
  MMSEnumerationHeader *v14;
  MMSBinaryHeader *v15;
  MMSEnumerationHeader *v16;
  MMSEnumerationHeader *v17;
  MMSBinaryHeader *v18;
  MMSBinaryHeader *v19;
  MMSEnumerationHeader *v20;
  MMSEnumerationHeader *v21;
  MMSBinaryHeader *v22;
  MMSEnumerationHeader *v23;
  MMSBinaryHeader *v24;
  MMSEnumerationHeader *v25;
  MMSEnumerationHeader *v26;
  MMSEnumerationHeader *v27;
  MMSBinaryHeader *v28;
  MMSEnumerationHeader *v29;
  MMSEnumerationHeader *v30;
  MMSEnumerationHeader *v31;
  MMSEnumerationHeader *v32;
  MMSBinaryHeader *v33;
  MMSBinaryHeader *v34;
  MMSBinaryHeader *v35;
  MMSEnumerationHeader *v36;
  MMSEnumerationHeader *v37;
  MMSBinaryHeader *v38;
  MMSBinaryHeader *v39;
  MMSBinaryHeader *v40;
  MMSBinaryHeader *v41;
  MMSBinaryHeader *v42;
  MMSBinaryHeader *v43;
  MMSBinaryHeader *v44;
  MMSBinaryHeader *v45;
  MMSBinaryHeader *v46;
  MMSBinaryHeader *v47;
  MMSBinaryHeader *v48;
  MMSBinaryHeader *v49;
  MMSBinaryHeader *v50;
  MMSBinaryHeader *v51;
  MMSBinaryHeader *v52;
  MMSBinaryHeader *v53;
  MMSBinaryHeader *v54;
  MMSBinaryHeader *v55;
  MMSBinaryHeader *v56;
  MMSEnumerationHeader *v57;
  MMSBinaryHeader *v58;
  MMSBinaryHeader *v59;
  MMSEnumerationHeader *v60;
  MMSBinaryHeader *v61;
  MMSBinaryHeader *v62;
  MMSBinaryHeader *v63;
  MMSBinaryHeader *v64;
  MMSBinaryHeader *v65;
  MMSBinaryHeader *v66;
  MMSBinaryHeader *v67;
  MMSEnumerationHeader *v68;
  MMSBinaryHeader *v69;
  MMSEnumerationHeader *v70;
  MMSBinaryHeader *v71;
  MMSBinaryHeader *v72;
  MMSBinaryHeader *v73;
  MMSBinaryHeader *result;

  v1 = (MMSHeaderEncodingMap *)operator new();
  MMSHeaderEncodingMap::MMSHeaderEncodingMap(v1);
  v2 = (MMSBinaryHeader *)operator new();
  MMSEncodedStringHeader::MMSEncodedStringHeader(v2, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 1, "Bcc", v2);
  v3 = (MMSBinaryHeader *)operator new();
  MMSEncodedStringHeader::MMSEncodedStringHeader(v3, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 2, "Cc", v3);
  v4 = (MMSBinaryHeader *)operator new();
  MMSEncodedStringHeader::MMSEncodedStringHeader(v4, 0, 0);
  v5 = MMSHeaderEncodingMap::addEncoding(v1, 3, "X-Mms-Content-Location", v4);
  v6 = (unsigned __int8 *)MMSHeaderContainer::contentTypeEncoding(v5);
  MMSHeaderEncodingMap::addEncoding((uint64_t)v1, v6);
  v7 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v7, 0, 0);
  v8 = MMSHeaderEncodingMap::addEncoding(v1, 5, "Date", v7);
  Prototype = MMSYesNoHeader::createPrototype(v8);
  MMSHeaderEncodingMap::addEncoding(v1, 6, "X-Mms-Delivery-Report", Prototype);
  v10 = (MMSBinaryHeader *)operator new();
  MMSExpiryHeader::MMSExpiryHeader((uint64_t)v10, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 7, "X-Mms-Delivery-Time", v10);
  v11 = (MMSBinaryHeader *)operator new();
  MMSExpiryHeader::MMSExpiryHeader((uint64_t)v11, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 8, "X-Mms-Expiry", v11);
  v12 = (MMSBinaryHeader *)operator new();
  MMSFromHeader::MMSFromHeader(v12, 0);
  v13 = MMSHeaderEncodingMap::addEncoding(v1, 9, "From", v12);
  v14 = MMSMessageClassHeader::createPrototype(v13);
  MMSHeaderEncodingMap::addEncoding(v1, 10, "X-Mms-Message-Class", v14);
  v15 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v15, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 11, "Message-ID", v15);
  v16 = (MMSEnumerationHeader *)operator new();
  v17 = (MMSEnumerationHeader *)MMSEnumerationHeader::MMSEnumerationHeader(v16, 0, 0);
  MMSEnumerationHeader::addNameForValue(v17, "M-send-req", 128);
  MMSEnumerationHeader::addNameForValue(v16, "M-send-conf", 129);
  MMSEnumerationHeader::addNameForValue(v16, "M-notification-ind", 130);
  MMSEnumerationHeader::addNameForValue(v16, "M-notifyresp-ind", 131);
  MMSEnumerationHeader::addNameForValue(v16, "M-retrieve-conf", 132);
  MMSEnumerationHeader::addNameForValue(v16, "M-acknowledge-ind", 133);
  MMSEnumerationHeader::addNameForValue(v16, "M-delivery-ind", 134);
  MMSHeaderEncodingMap::addEncoding(v1, 12, "X-Mms-Message-Type", v16);
  v18 = (MMSBinaryHeader *)operator new();
  MMSVersionHeader::MMSVersionHeader((uint64_t)v18, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 13, "X-Mms-MMS-Version", v18);
  v19 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v19, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 14, "X-Mms-Message-Size", v19);
  v20 = (MMSEnumerationHeader *)operator new();
  v21 = (MMSEnumerationHeader *)MMSEnumerationHeader::MMSEnumerationHeader(v20, 0, 0);
  MMSEnumerationHeader::addNameForValue(v21, "Low", 128);
  MMSEnumerationHeader::addNameForValue(v20, "Medium", 129);
  MMSEnumerationHeader::addNameForValue(v20, "High", 130);
  v22 = MMSHeaderEncodingMap::addEncoding(v1, 15, "X-Mms-Priority", v20);
  v23 = MMSYesNoHeader::createPrototype(v22);
  v24 = MMSHeaderEncodingMap::addEncoding(v1, 16, "X-Mms-Read-Report", v23);
  v25 = MMSYesNoHeader::createPrototype(v24);
  MMSHeaderEncodingMap::addEncoding(v1, 17, "X-Mms-Report-Allowed", v25);
  v26 = (MMSEnumerationHeader *)operator new();
  v27 = (MMSEnumerationHeader *)MMSEnumerationHeader::MMSEnumerationHeader(v26, 0, 0);
  MMSEnumerationHeader::addNameForValue(v27, "Ok", 128);
  MMSEnumerationHeader::addNameForValue(v26, "Error-message-format-corrupt", 131);
  MMSEnumerationHeader::addNameForValue(v26, "Error-transient-failure", 192);
  MMSEnumerationHeader::addNameForValue(v26, "Error-transient-sending-address-unresolved", 193);
  MMSEnumerationHeader::addNameForValue(v26, "Error-transient-message-not-found", 194);
  MMSEnumerationHeader::addNameForValue(v26, "Error-transient-network-problem", 195);
  MMSEnumerationHeader::addNameForValue(v26, "Error-transient-partial-success", 196);
  MMSEnumerationHeader::addNameForValue(v26, "Error-permanent-failure", 224);
  MMSEnumerationHeader::addNameForValue(v26, "Error-permanent-service-denied", 225);
  MMSEnumerationHeader::addNameForValue(v26, "Error-permanent-message-format-corrupt", 226);
  MMSHeaderEncodingMap::addEncoding(v1, 18, "X-Mms-Response-Status", v26);
  v28 = (MMSBinaryHeader *)operator new();
  MMSEncodedStringHeader::MMSEncodedStringHeader(v28, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 19, "X-Mms-Response-Text", v28);
  v29 = (MMSEnumerationHeader *)operator new();
  v30 = (MMSEnumerationHeader *)MMSEnumerationHeader::MMSEnumerationHeader(v29, 0, 0);
  MMSEnumerationHeader::addNameForValue(v30, "Hide", 128);
  MMSEnumerationHeader::addNameForValue(v29, "Show", 129);
  MMSHeaderEncodingMap::addEncoding(v1, 20, "X-Mms-Sender-Visibility", v29);
  v31 = (MMSEnumerationHeader *)operator new();
  v32 = (MMSEnumerationHeader *)MMSEnumerationHeader::MMSEnumerationHeader(v31, 0, 0);
  MMSEnumerationHeader::addNameForValue(v32, "Expired", 128);
  MMSEnumerationHeader::addNameForValue(v31, "Retrieved", 129);
  MMSEnumerationHeader::addNameForValue(v31, "Rejected", 130);
  MMSEnumerationHeader::addNameForValue(v31, "Deferred", 131);
  MMSEnumerationHeader::addNameForValue(v31, "Unrecognized", 132);
  MMSEnumerationHeader::addNameForValue(v31, "Indeterminate", 133);
  MMSEnumerationHeader::addNameForValue(v31, "Forwarded", 134);
  MMSHeaderEncodingMap::addEncoding(v1, 21, "X-Mms-Status", v31);
  v33 = (MMSBinaryHeader *)operator new();
  MMSSubjectHeader::MMSSubjectHeader((uint64_t)v33, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 22, "Subject", v33);
  v34 = (MMSBinaryHeader *)operator new();
  MMSSensitiveEncodedStringHeader::MMSSensitiveEncodedStringHeader((uint64_t)v34, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 23, "To", v34);
  v35 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v35, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 24, "X-Mms-Transaction-ID", v35);
  v36 = (MMSEnumerationHeader *)operator new();
  v37 = (MMSEnumerationHeader *)MMSEnumerationHeader::MMSEnumerationHeader(v36, 0, 0);
  MMSEnumerationHeader::addNameForValue(v37, "Ok", 128);
  MMSEnumerationHeader::addNameForValue(v36, "Error-transient-failure", 192);
  MMSEnumerationHeader::addNameForValue(v36, "Error-transient-message-not-found", 193);
  MMSEnumerationHeader::addNameForValue(v36, "Error-transient-network-problem", 194);
  MMSEnumerationHeader::addNameForValue(v36, "Error-permanent-failure", 224);
  MMSEnumerationHeader::addNameForValue(v36, "Error-permanent-service-denied", 225);
  MMSEnumerationHeader::addNameForValue(v36, "Error-permanent-message-not-found", 226);
  MMSEnumerationHeader::addNameForValue(v36, "Error-permanent-content-unsupported", 227);
  MMSHeaderEncodingMap::addEncoding(v1, 25, "X-Mms-Retrieve-Status", v36);
  v38 = (MMSBinaryHeader *)operator new();
  MMSEncodedStringHeader::MMSEncodedStringHeader(v38, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 26, "X-Mms-Retrieve-Text", v38);
  v39 = (MMSBinaryHeader *)operator new();
  MMSEnumerationHeader::MMSEnumerationHeader(v39, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 27, "X-Mms-Read-Status", v39);
  v40 = (MMSBinaryHeader *)operator new();
  MMSEnumerationHeader::MMSEnumerationHeader(v40, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 28, "X-Mms-Reply-Charging", v40);
  v41 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v41, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 30, "X-Mms-Reply-Charging-ID", v41);
  v42 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v42, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 31, "X-Mms-Reply-Charging-Size", v42);
  v43 = (MMSBinaryHeader *)operator new();
  MMSIndexedEncodedStringHeader::MMSIndexedEncodedStringHeader((uint64_t)v43, 0, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 32, "X-Mms-Previously-Sent-By", v43);
  v44 = (MMSBinaryHeader *)operator new();
  MMSIndexedDateHeader::MMSIndexedDateHeader((uint64_t)v44, 0, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 33, "X-Mms-Previously-Sent-Date", v44);
  v45 = (MMSBinaryHeader *)operator new();
  MMSEnumerationHeader::MMSEnumerationHeader(v45, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 34, "X-Mms-Store", v45);
  v46 = (MMSBinaryHeader *)operator new();
  MMSEnumerationHeader::MMSEnumerationHeader(v46, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 35, "X-Mms-MM-State", v46);
  v47 = (MMSBinaryHeader *)operator new();
  MMSMMFlagsHeader::MMSMMFlagsHeader((uint64_t)v47, 0, 128, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 36, "X-Mms-MM-Flags", v47);
  v48 = (MMSBinaryHeader *)operator new();
  MMSEnumerationHeader::MMSEnumerationHeader(v48, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 37, "X-Mms-Store-Status", v48);
  v49 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v49, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 38, "X-Mms-Store-Status-Text", v49);
  v50 = (MMSBinaryHeader *)operator new();
  MMSEnumerationHeader::MMSEnumerationHeader(v50, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 39, "X-Mms-Stored", v50);
  v51 = (MMSBinaryHeader *)operator new();
  MMSEnumerationHeader::MMSEnumerationHeader(v51, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 40, "X-Mms-Attributes", v51);
  v52 = (MMSBinaryHeader *)operator new();
  MMSEnumerationHeader::MMSEnumerationHeader(v52, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 41, "X-Mms-Totals", v52);
  v53 = (MMSBinaryHeader *)operator new();
  MMSEnumerationHeader::MMSEnumerationHeader(v53, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 43, "X-Mms-Quotas", v53);
  v54 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v54, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 45, "X-Mms-Message-Count", v54);
  v55 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v55, 0, 0);
  v56 = MMSHeaderEncodingMap::addEncoding(v1, 47, "X-Mms-Start", v55);
  v57 = MMSYesNoHeader::createPrototype(v56);
  MMSHeaderEncodingMap::addEncoding(v1, 49, "X-Mms-Distribution-Indicator", v57);
  v58 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v58, 0, 0);
  v59 = MMSHeaderEncodingMap::addEncoding(v1, 51, "X-Mms-Limit", v58);
  v60 = MMSYesNoHeader::createPrototype(v59);
  MMSHeaderEncodingMap::addEncoding(v1, 52, "X-Mms-Recommended-Retrieval-Mode", v60);
  v61 = (MMSBinaryHeader *)operator new();
  MMSEncodedStringHeader::MMSEncodedStringHeader(v61, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 53, "X-Mms-Recommended-Retrieval-Mode-Text", v61);
  v62 = (MMSBinaryHeader *)operator new();
  MMSEncodedStringHeader::MMSEncodedStringHeader(v62, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 54, "X-Mms-Status-Text", v62);
  v63 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v63, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 55, "X-Mms-Applic-ID", v63);
  v64 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v64, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 56, "X-Mms-Reply-Applic-ID", v64);
  v65 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v65, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 57, "X-Mms-Aux-Applic-Info", v65);
  v66 = (MMSBinaryHeader *)operator new();
  MMSEnumerationHeader::MMSEnumerationHeader(v66, 0, 0);
  v67 = MMSHeaderEncodingMap::addEncoding(v1, 58, "X-Mms-Content-Class", v66);
  v68 = MMSYesNoHeader::createPrototype(v67);
  v69 = MMSHeaderEncodingMap::addEncoding(v1, 59, "X-Mms-DRM-Content", v68);
  v70 = MMSYesNoHeader::createPrototype(v69);
  MMSHeaderEncodingMap::addEncoding(v1, 60, "X-Mms-Adaptation-Allowed", v70);
  v71 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v71, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 61, "X-Mms-Replace-ID", v71);
  v72 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v72, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v1, 62, "X-Mms-Cancel-ID", v72);
  v73 = (MMSBinaryHeader *)operator new();
  MMSEnumerationHeader::MMSEnumerationHeader(v73, 0, 0);
  result = MMSHeaderEncodingMap::addEncoding(v1, 63, "X-Mms-Cancel-Status", v73);
  MMSMessage::_encodingMap = (uint64_t)v1;
  return result;
}

void MMSMessage::MMSMessage(MMSMessage *this)
{
  _QWORD *v1;

  MMSHeaderContainer::MMSHeaderContainer(this);
  *v1 = &off_1E152C4A0;
  v1[10] = 0;
  v1[11] = 0;
  v1[9] = 0;
}

BOOL MMSMessage::addPart(_QWORD *a1, MMSHeaderContainer *this)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = MMSHeaderContainer::contentTypeHeader(this);
  if (v4)
  {
    v5 = a1[11];
    v6 = (_QWORD *)a1[10];
    if ((unint64_t)v6 >= v5)
    {
      v8 = a1[9];
      v9 = ((uint64_t)v6 - v8) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v10 = v5 - v8;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MMSHeaderEncoding const*>>((uint64_t)(a1 + 11), v12);
      else
        v13 = 0;
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = this;
      v7 = v14 + 8;
      v17 = (char *)a1[9];
      v16 = (char *)a1[10];
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        v16 = (char *)a1[9];
      }
      a1[9] = v14;
      a1[10] = v7;
      a1[11] = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v6 = this;
      v7 = v6 + 1;
    }
    a1[10] = v7;
  }
  return v4 != 0;
}

void MMSMessage::~MMSMessage(MMSMessage *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E152C4A0;
  v4 = (char *)this + 72;
  v2 = (_QWORD *)*((_QWORD *)this + 9);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      goto LABEL_8;
    goto LABEL_7;
  }
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = v2[v5];
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v2 = (_QWORD *)*((_QWORD *)this + 9);
      v3 = (_QWORD *)*((_QWORD *)this + 10);
    }
    v5 = v6++;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
LABEL_8:
  MMSHeaderContainer::~MMSHeaderContainer(this);
}

{
  MMSMessage::~MMSMessage(this);
  JUMPOUT(0x186DBA454);
}

uint64_t MMSMessage::encodingMap(MMSMessage *this)
{
  uint64_t result;

  result = MMSMessage::_encodingMap;
  if (!MMSMessage::_encodingMap)
  {
    MMSMessage::initEncodingMap(0);
    return MMSMessage::_encodingMap;
  }
  return result;
}

uint64_t MMSMessage::setTo(MMSMessage *this, const char *a2, char a3)
{
  MMSHeaderContainer::addHeader(this, "To", a2, a3);
  return 1;
}

uint64_t MMSMessage::setFrom(MMSMessage *this, const char *a2)
{
  MMSHeaderContainer::addHeader(this, "From", a2, 0);
  return 1;
}

uint64_t MMSMessage::setSubject(MMSMessage *this, const char *a2)
{
  MMSHeaderContainer::addHeader(this, "Subject", a2, 0);
  return 1;
}

uint64_t MMSMessage::prettyMessage@<X0>(std::string *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string::pointer data;
  unint64_t v11;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string __p;
  _OWORD v19[4];
  void *v20[2];
  __int128 v21;
  __int128 v22;
  _BYTE v23[144];
  uint64_t v24;

  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)v20 = 0u;
  memset(v19, 0, sizeof(v19));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"-----------------------------\n", 30);
  MMSHeaderContainer::prettyHeaders(this, a2, a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((a2 & 1) != 0)
      goto LABEL_22;
  }
  else if ((a2 & 1) != 0)
  {
    goto LABEL_22;
  }
  data = this[3].__r_.__value_.__l.__data_;
  if (((this[3].__r_.__value_.__l.__size_ - (_QWORD)data) & 0x7FFFFFFF8) != 0)
  {
    v11 = 0;
    do
    {
      v12 = *(std::string **)&data[8 * v11];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"Part ", 5);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)" (", 2);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" bytes):\n", 9);
      MMSMimePart::prettyMMSMimePart(v12, a3, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &__p;
      else
        v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v16 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)v15, v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v11;
      data = this[3].__r_.__value_.__l.__data_;
    }
    while (v11 < ((this[3].__r_.__value_.__l.__size_ - (unint64_t)data) >> 3));
  }
LABEL_22:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"-----------------------------", 29);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v19 + 8, a4);
  *(_QWORD *)&v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(*(_QWORD *)&v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v19[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v21) < 0)
    operator delete(v20[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x186DBA418](v23);
}

uint64_t MMSMessage::prettyContentBody@<X0>(MMSMessage *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v10;
  _OWORD v11[4];
  void *v12[2];
  __int128 v13;
  __int128 v14;
  _BYTE v15[144];
  uint64_t v16;

  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v13 = 0u;
  v14 = 0u;
  *(_OWORD *)v12 = 0u;
  memset(v11, 0, sizeof(v11));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v11);
  v4 = *((_QWORD *)this + 9);
  if (((*((_QWORD *)this + 10) - v4) & 0x7FFFFFFF8) != 0)
  {
    v5 = 0;
    do
    {
      MMSMimePart::prettyContentBody(*(void ***)(v4 + 8 * v5), __p);
      if ((v10 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v7 = v10;
      else
        v7 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v7);
      if ((char)v10 < 0)
        operator delete(__p[0]);
      ++v5;
      v4 = *((_QWORD *)this + 9);
    }
    while (v5 < ((unint64_t)(*((_QWORD *)this + 10) - v4) >> 3));
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v11 + 8, a2);
  *(_QWORD *)&v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(*(_QWORD *)&v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v11[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v13) < 0)
    operator delete(v12[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x186DBA418](v15);
}

BOOL MMSMessage::isEmpty(MMSMessage *this)
{
  MMSContentType *v2;

  if (((*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) & 0x7FFFFFFF8) == 0)
    return 1;
  v2 = (MMSContentType *)MMSHeaderContainer::contentType(this);
  return (!v2 || !MMSContentType::isMultipart(v2)) && *(_DWORD *)(**((_QWORD **)this + 9) + 96) == 0;
}

uint64_t MMSMessage::requiresContentType(MMSMessage *this)
{
  uint64_t result;

  result = MMSHeaderContainer::headerWithName(this, "X-Mms-Message-Type");
  if (result)
    return *(unsigned __int8 *)(result + 17) == 128;
  return result;
}

uint64_t _CTServerConnectionSetAudioPath(uint64_t a1, unsigned int a2, unsigned int a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t v14;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetAudioPath", &object, "kRequest", &v14);
  xpc_release(object);
  v6 = v14;
  object = v14;
  v14 = xpc_null_create();
  xpc_release(v14);
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kAudioDownPath", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create(a3);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kAudioUpPath", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v12 = SendXpcMessage(a1, &object, 0, v11);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionSetSourceGain(uint64_t a1, int a2, unsigned int a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t v14;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetSourceGain", &object, "kRequest", &v14);
  xpc_release(object);
  v6 = v14;
  object = v14;
  v14 = xpc_null_create();
  xpc_release(v14);
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kAudioVolume", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create(a3);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kAudioSource", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v12 = SendXpcMessage(a1, &object, 0, v11);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionSetChannelMute(uint64_t a1, unsigned int a2, unsigned int a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t v14;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetChannelMute", &object, "kRequest", &v14);
  xpc_release(object);
  v6 = v14;
  object = v14;
  v14 = xpc_null_create();
  xpc_release(v14);
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kAudioMuteChannel", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create(a3);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kAudioMuteState", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v12 = SendXpcMessage(a1, &object, 0, v11);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionSetI2SFormat(uint64_t a1, unsigned int a2, unsigned int a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t v14;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetI2SFormat", &object, "kRequest", &v14);
  xpc_release(object);
  v6 = v14;
  object = v14;
  v14 = xpc_null_create();
  xpc_release(v14);
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kAudioI2SInterface", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create(a3);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kAudioChannelFormat", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v12 = SendXpcMessage(a1, &object, 0, v11);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionEnablePCMChannel(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioEnablePCMChannel", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kAudioPcmDirection", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionDisablePCMChannel(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioDisablePCMChannel", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionSetMixState(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetMixState", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kAudioPcmMixState", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionEnableMediaToDownlink(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioEnableMediaToDownlink", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kAudioBoolean", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionEchoCancelationAndNoiseReduction(uint64_t a1, unsigned int a2, unsigned int a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t v14;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioEnableEchoCancelationNoiseReduction", &object, "kRequest", &v14);
  xpc_release(object);
  v6 = v14;
  object = v14;
  v14 = xpc_null_create();
  xpc_release(v14);
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kAudioEnableEchoCancelation", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create(a3);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kAudioEnableNoiseReduction", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v12 = SendXpcMessage(a1, &object, 0, v11);
  xpc_release(object);
  return v12;
}

uint64_t _CTServerConnectionSetTTYMode(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetTTYMode", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kAudioBoolean", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionGetTTYMode(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kAudioGetTTYMode", object, "kRequest", &v8);
    xpc_release(object[0]);
    v9 = v8;
    v8 = xpc_null_create();
    xpc_release(v8);
    v8 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v9, &v8);
    if (MEMORY[0x186DBAE5C](v8) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v8;
      object[1] = "kAudioBoolean";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    else
    {
      *a2 = 0;
    }
    xpc_release(v8);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyAudioVocoderInfo(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t xdict;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kAudioQueryAudioVocoderInfo", &object, "kRequest", &xdict);
    xpc_release(object);
    object = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      v7 = 0;
      xpc_dictionary_get_value(xdict, "kAudioVocoderInfo");
      v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v7, (CFTypeRef *)&v6);
      *a2 = v7;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionAudioSampleRateSwitchDidComplete(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v9;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kAudioSampleRateSwitchDidComplete", &object, "kRequest", &v9);
    xpc_release(object);
    v4 = v9;
    object = v9;
    v9 = xpc_null_create();
    xpc_release(v9);
    v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kAudioVocoderInfo", v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    v2 = SendXpcMessage(a1, &object, 0, v7);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionSetVoiceMute(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetVoiceMute", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kAudioMuteState", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionGetVoiceMute(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kAudioGetVoiceMute", object, "kRequest", &v8);
    xpc_release(object[0]);
    v9 = v8;
    v8 = xpc_null_create();
    xpc_release(v8);
    v8 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v9, &v8);
    if (MEMORY[0x186DBAE5C](v8) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v8;
      object[1] = "kAudioMuteState";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    else
    {
      *a2 = 0;
    }
    xpc_release(v8);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionSetMasterMute(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetMasterMute", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kAudioMuteState", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionStartAudioTone(uint64_t a1, unsigned int a2, int a3, int a4)
{
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  uint64_t v16;
  xpc_object_t v18;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioStartAudioTone", &object, "kRequest", &v18);
  xpc_release(object);
  v8 = v18;
  object = v18;
  v18 = xpc_null_create();
  xpc_release(v18);
  v9 = xpc_int64_create(a2);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kAudioTone", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(a3);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kAudioToneCount", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(a4);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kAudioToneMix", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v16 = SendXpcMessage(a1, &object, 0, v15);
  xpc_release(object);
  return v16;
}

uint64_t _CTServerConnectionStopAudioTone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioStopAudioTone", &object, "kRequest", &v5);
  xpc_release(object);
  object = v5;
  v5 = xpc_null_create();
  xpc_release(v5);
  v3 = SendXpcMessage(a1, &object, 0, v2);
  xpc_release(object);
  return v3;
}

uint64_t _CTServerConnectionSetVibratorState(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  uint64_t v19;
  uint64_t v20;
  xpc_object_t v22;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kAudioSetVibratorState", &object, "kRequest", &v22);
  xpc_release(object);
  v10 = v22;
  object = v22;
  v22 = xpc_null_create();
  xpc_release(v22);
  v11 = xpc_int64_create(a2);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v10, "kAudioAction", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(a3);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v10, "kAudioIntensity", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_int64_create(a4);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v10, "kAudioTotalTime", v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = xpc_int64_create(a5);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v10, "kAudioOnTime", v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v20 = SendXpcMessage(a1, &object, 0, v19);
  xpc_release(object);
  return v20;
}

uint64_t _CTServerConnectionSetAudioLoggingEnabled(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kSetAudioLoggingEnabled", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kAudioLoggingEnabled", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t _CTServerConnectionGetAudioLoggingEnabled(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetAudioLoggingEnabled", object, "kRequest", &v8);
    xpc_release(object[0]);
    v9 = v8;
    v8 = xpc_null_create();
    xpc_release(v8);
    v8 = xpc_null_create();
    v2 = SendXpcMessage(a1, &v9, &v8);
    if (MEMORY[0x186DBAE5C](v8) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v8;
      object[1] = "kAudioLoggingEnabled";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    else
    {
      *a2 = 0;
    }
    xpc_release(v8);
    xpc_release(v9);
  }
  return v2;
}

uint64_t encode_CTLazuliGroupChatParticipantRoleType(_DWORD *a1)
{
  uint64_t v1;

  if (*a1)
    v1 = -1;
  else
    v1 = 0;
  if (*a1 == 1)
    return 1;
  else
    return v1;
}

const char *print_CTLazuliGroupChatParticipantRoleType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E1533F28[v1];
}

uint64_t encode_CTLazuliMessageType(unsigned int *a1)
{
  if (*a1 >= 9)
    return -1;
  else
    return *a1;
}

const char *print_CTLazuliMessageType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 9)
    return "???";
  else
    return off_1E1533F40[v1];
}

uint64_t encode_CTLazuliErrorType(unsigned int *a1)
{
  if (*a1 >= 0xA)
    return -1;
  else
    return *a1;
}

const char *print_CTLazuliErrorType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 0xA)
    return "???";
  else
    return off_1E1533F90[v1];
}

uint64_t encode_CTLazuliMessageDispositionNotificationType(unsigned int *a1)
{
  if (*a1 >= 5)
    return -1;
  else
    return *a1;
}

const char *print_CTLazuliMessageDispositionNotificationType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 5)
    return "???";
  else
    return off_1E1533FE8[v1];
}

uint64_t encode_CTLazuliChatBotCardMediaHeightType(unsigned int *a1)
{
  if (*a1 >= 3)
    return -1;
  else
    return *a1;
}

const char *print_CTLazuliChatBotCardMediaHeightType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 3)
    return "???";
  else
    return off_1E1534018[v1];
}

const char *print_CTLazuliChatBotCardContentOrientationType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E1534038[v1];
}

const char *print_CTLazuliChatBotCardContentImageAlignmentType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E1534050[v1];
}

const char *print_CTLazuliChatBotCardCarouselWidthType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E1534068[v1];
}

const char *print_CTLazuliChatBotAddressUriType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E1534080[v1];
}

const char *print_CTLazuliChatBotAddressLabelType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E1534098[v1];
}

uint64_t encode_CTLazuliChatBotMediaLabelType(_DWORD *a1)
{
  if (*a1)
    return -1;
  else
    return 0;
}

const char *print_CTLazuliChatBotMediaLabelType(_QWORD *a1)
{
  const char *v1;

  v1 = "???";
  if (!*a1)
    v1 = "Icon";
  if (*a1 == -1)
    return "Invalid";
  else
    return v1;
}

const char *print_CTLazuliChatBotMediaContentType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E15340B0[v1];
}

const char *print_CTLazuliChatBotOrgNameType(_QWORD *a1)
{
  const char *v1;

  v1 = "???";
  if (!*a1)
    v1 = "OfficialName";
  if (*a1 == -1)
    return "Invalid";
  else
    return v1;
}

uint64_t encode_CTLazuliChatBotSpamReportType(unsigned int *a1)
{
  if (*a1 >= 4)
    return -1;
  else
    return *a1;
}

const char *print_CTLazuliChatBotSpamReportType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 4)
    return "???";
  else
    return off_1E15340C8[v1];
}

const char *print_CTLazuliDeviceActionType(_QWORD *a1)
{
  const char *v1;

  v1 = "???";
  if (!*a1)
    v1 = "SendDeviceSpecifics";
  if (*a1 == -1)
    return "Invalid";
  else
    return v1;
}

const char *print_CTLazuliSettingsActionType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E15340F0[v1];
}

const char *print_CTLazuliSuggestedChipType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E1534108[v1];
}

const char *print_CTLazuliViewModeType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 3)
    return "???";
  else
    return off_1E1534120[v1];
}

uint64_t encode_CTLazuliSuggestedActionType(unsigned int *a1)
{
  if (*a1 >= 0xD)
    return -1;
  else
    return *a1;
}

const char *print_CTLazuliSuggestedActionType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 0xD)
    return "???";
  else
    return off_1E1534140[v1];
}

const char *print_CTLazuliToggleStateType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 3)
    return "???";
  else
    return off_1E15341B0[v1];
}

const char *print_CTLazuliRegistrationStateType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 3)
    return "???";
  else
    return off_1E15341D0[v1];
}

const char *print_CTLazuliToggleSwitchPreferenceType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E15341F0[v1];
}

const char *print_CTLazuliDisplayNotificationType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E1534208[v1];
}

const char *print_CTLazuliChatBotRenderInformationCacheType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 3)
    return "???";
  else
    return off_1E1534220[v1];
}

const char *print_CTLazuliMenuL1ContentType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E1534240[v1];
}

const char *print_CTLazuliMenuL0ContentType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E1534258[v1];
}

const char *print_CTLazuliFileDispositionType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E1534270[v1];
}

const char *print_CTLazuliDiscoveryCapabilitiesType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 3)
    return "???";
  else
    return off_1E1534288[v1];
}

const char *print_CTLazuliCurrentSimCellularDataRequirementType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E15342A8[v1];
}

const char *print_CTLazuliMessageRevokationStatusType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 2)
    return "???";
  else
    return off_1E15342C0[v1];
}

const char *print_CTLazuliCapabilitiesDiscoveryOptionsType(_QWORD *a1)
{
  unint64_t v1;

  v1 = *a1 + 1;
  if (v1 > 3)
    return "???";
  else
    return off_1E15342D8[v1];
}

uint64_t _CTServerConnectionSetMaxTransmitPower(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v12;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    object = v4;
  }
  else
  {
    v5 = xpc_null_create();
    object = v5;
    if (!v5)
      goto LABEL_7;
  }
  if (MEMORY[0x186DBAE5C](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    v7 = v5;
    goto LABEL_9;
  }
LABEL_7:
  v7 = xpc_null_create();
  object = v7;
LABEL_9:
  xpc_release(v5);
  v8 = xpc_string_create("kRadioModuleMaxTransmitPower");
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v7, "kRequest", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = xpc_int64_create(a2);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v7, "kRadioModuleMaxTransmitPower", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v6 = SendXpcMessage(a1, &object, 0, v12);
  xpc_release(object);
  return v6;
}

unint64_t _CTServerConnectionGetResetState(uint64_t a1, _BYTE *a2)
{
  if ((hasBaseband() & 1) != 0)
  handleUnsupportedRequestForCurrentBundle("GetResetState");
  return 0x1300000001;
}

unint64_t _CTServerConnectionCopyFirmwareVersion(const void *a1, CFStringRef *a2)
{
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  const __CFAllocator *v12;
  const char *p_object;
  xpc_object_t v15[2];
  xpc_object_t v16;
  xpc_object_t object;
  const char *v18;
  uint64_t v19;
  xpc_object_t v20;
  xpc_object_t v21;

  if ((hasBaseband() & 1) != 0)
  {
    v4 = 0x1600000001;
    if (a1 && a2)
    {
      xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
      xpc::dict_creator::operator()<char const*>("kRadioModuleGetProperty", &object, "kRequest", v15);
      xpc_release(object);
      v5 = v15[0];
      v21 = v15[0];
      v15[0] = xpc_null_create();
      xpc_release(v15[0]);
      v6 = xpc_string_create("");
      if (!v6)
        v6 = xpc_null_create();
      xpc_dictionary_set_value(v5, "kRadioModuleFirmwareVersion", v6);
      v7 = xpc_null_create();
      xpc_release(v6);
      xpc_release(v7);
      v20 = xpc_null_create();
      v8 = SendXpcMessage((uint64_t)a1, &v21, &v20);
      v9 = v8;
      v10 = HIDWORD(v8);
      *a2 = 0;
      if (MEMORY[0x186DBAE5C](v20) == MEMORY[0x1E0C812F8])
      {
        object = &v20;
        v18 = "kRadioModuleValid";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, v15);
        v11 = xpc::dyn_cast_or_default((xpc *)v15, 0);
        xpc_release(v15[0]);
        if (v11)
        {
          object = 0;
          v18 = 0;
          v19 = 0;
          v15[0] = &v20;
          v15[1] = "kRadioModuleFirmwareVersion";
          xpc::dict::object_proxy::operator xpc::object((uint64_t)v15, &v16);
          xpc::dyn_cast_or_default();
          xpc_release(v16);
          v12 = CFGetAllocator(a1);
          if (v19 >= 0)
            p_object = (const char *)&object;
          else
            p_object = (const char *)object;
          *a2 = CFStringCreateWithCString(v12, p_object, 0x8000100u);
          if (SHIBYTE(v19) < 0)
            operator delete(object);
        }
        else
        {
          v9 = 1;
          LODWORD(v10) = 45;
        }
      }
      xpc_release(v20);
      xpc_release(v21);
      return v9 | ((unint64_t)v10 << 32);
    }
  }
  else
  {
    handleUnsupportedRequestForCurrentBundle("CopyFirmwareVersion");
    return 0x1300000001;
  }
  return v4;
}

uint64_t _CTServerConnectionCopyFirmwareNonce(const void *a1, CFDataRef *a2)
{
  unsigned int v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  unint64_t v9;
  int v10;
  const UInt8 *data;
  const __CFAllocator *v12;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t object[2];
  xpc_object_t v17;
  xpc_object_t xdict;
  xpc_object_t v19;

  if ((hasBaseband() & 1) == 0)
  {
    handleUnsupportedRequestForCurrentBundle("CopyFirmwareNonce");
    v13 = 0x1300000000;
LABEL_10:
    v14 = 1;
    return v14 | v13;
  }
  v4 = 1;
  v5 = 22;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioModuleGetProperty", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v6 = xdict;
    v19 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v7 = xpc_data_create(0, 0);
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v6, "kRadioModuleFirmwareNonce", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xdict = xpc_null_create();
    v9 = SendXpcMessage((uint64_t)a1, &v19, &xdict);
    v4 = v9;
    v5 = HIDWORD(v9);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      object[0] = &xdict;
      object[1] = "kRadioModuleValid";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v17);
      v10 = xpc::dyn_cast_or_default((xpc *)&v17, 0);
      xpc_release(v17);
      if (v10)
      {
        object[0] = 0;
        data = (const UInt8 *)xpc_dictionary_get_data(xdict, "kRadioModuleFirmwareNonce", (size_t *)object);
        v12 = CFGetAllocator(a1);
        *a2 = CFDataCreate(v12, data, (CFIndex)object[0]);
      }
      else
      {
        v4 = 1;
        v5 = 45;
      }
    }
    xpc_release(xdict);
    xpc_release(v19);
  }
  v13 = 0xC00000000;
  if ((_DWORD)v5)
    v13 = v5 << 32;
  v14 = 1;
  if ((_DWORD)v5)
    v14 = 2;
  if (a2 && !(((v5 << 32) | (unint64_t)v4) >> 32))
  {
    if (*a2)
    {
      if (CFDataGetLength(*a2))
      {
        v13 = 0;
        v14 = (v5 << 32) | v4;
        return v14 | v13;
      }
      CFRelease(*a2);
      *a2 = 0;
      v13 = 0x2300000000;
    }
    else
    {
      v13 = 0xC00000000;
    }
    goto LABEL_10;
  }
  return v14 | v13;
}

unint64_t _CTServerConnectionCopyFirmwareSecurityInfo(uint64_t a1, xpc_object_t *a2)
{
  unint64_t RadioModuleProperty;
  uint64_t v5;
  unint64_t v6;

  if ((hasBaseband() & 1) == 0)
  {
    handleUnsupportedRequestForCurrentBundle("CopyFirmwareSecurityInfo");
    v6 = 0x1300000000;
LABEL_11:
    v5 = 1;
    return v5 | v6;
  }
  v5 = RadioModuleProperty;
  if (HIDWORD(RadioModuleProperty))
  {
    v6 = RadioModuleProperty & 0xFFFFFFFF00000000;
    v5 = 2;
    return v5 | v6;
  }
  if (!a2 || !*a2)
  {
    v6 = 0xC00000000;
    goto LABEL_11;
  }
  if (!CFDictionaryGetCount((CFDictionaryRef)*a2))
  {
    CFRelease(*a2);
    *a2 = 0;
    v6 = 0x2300000000;
    goto LABEL_11;
  }
  v6 = 0;
  return v5 | v6;
}

unint64_t `anonymous namespace'::GetRadioModuleProperty(uint64_t a1, const char *a2, xpc_object_t *a3)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v8;
  int v9;
  xpc_object_t v10;
  xpc_object_t v12;
  xpc_object_t object;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t xdict;
  xpc_object_t v17;

  v3 = 1;
  LODWORD(v4) = 22;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioModuleGetProperty", &object, "kRequest", &xdict);
    xpc_release(object);
    v17 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    object = &v17;
    v14 = a2;
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v15);
    xpc_release(v15);
    v15 = 0;
    xdict = xpc_null_create();
    v8 = SendXpcMessage(a1, &v17, &xdict);
    v3 = v8;
    v4 = HIDWORD(v8);
    *a3 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8])
    {
      object = &xdict;
      v14 = "kRadioModuleValid";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v12);
      v9 = xpc::dyn_cast_or_default((xpc *)&v12, 0);
      xpc_release(v12);
      if (v9)
      {
        object = 0;
        xpc_dictionary_get_value(xdict, a2);
        v12 = (xpc_object_t)_CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&object, (CFTypeRef *)&v12);
        v10 = object;
        *a3 = object;
        if (!v10)
        {
          LODWORD(v4) = 96;
          v3 = 1;
        }
      }
      else
      {
        v3 = 1;
        LODWORD(v4) = 45;
      }
    }
    xpc_release(xdict);
    xpc_release(v17);
  }
  return v3 | ((unint64_t)v4 << 32);
}

unint64_t _CTServerConnectionCopyFirmwarePreflightInfo(uint64_t a1, xpc_object_t *a2)
{
  unint64_t RadioModuleProperty;
  unint64_t v5;
  unsigned int v6;
  CFIndex Count;
  xpc_object_t v8;
  NSObject *v9;
  const __CFDictionary *v10;
  _QWORD v12[5];
  _QWORD *context;

  if ((hasBaseband() & 1) == 0)
  {
    handleUnsupportedRequestForCurrentBundle("CopyFirmwarePreflightInfo");
    v6 = 1;
    LODWORD(v5) = 19;
    return v6 | ((unint64_t)v5 << 32);
  }
  v5 = HIDWORD(RadioModuleProperty);
  if (HIDWORD(RadioModuleProperty))
  {
    if (!a2)
    {
      v6 = 2;
      return v6 | ((unint64_t)v5 << 32);
    }
    if (*a2)
      CFRelease(*a2);
    v6 = 2;
LABEL_20:
    *a2 = 0;
    return v6 | ((unint64_t)v5 << 32);
  }
  if (!a2)
  {
    v6 = 1;
    LODWORD(v5) = 12;
    return v6 | ((unint64_t)v5 << 32);
  }
  v6 = RadioModuleProperty;
  if (!*a2)
  {
    v6 = 1;
    LODWORD(v5) = 12;
    goto LABEL_20;
  }
  Count = CFDictionaryGetCount((CFDictionaryRef)*a2);
  v8 = *a2;
  if (!Count)
  {
    CFRelease(v8);
    v6 = 1;
    LODWORD(v5) = 35;
    goto LABEL_20;
  }
  if (v8)
  {
    v9 = CTLogRadioModule();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12[0]) = 0;
      _os_log_impl(&dword_18425C000, v9, OS_LOG_TYPE_DEFAULT, "Preflight info", (uint8_t *)v12, 2u);
    }
    v10 = (const __CFDictionary *)*a2;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = ___ZN3ctu2cf8for_eachINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKvEEvPK14__CFDictionaryU13block_pointerFvRKT_RKT0_E_block_invoke;
    v12[3] = &unk_1E15343A0;
    v12[4] = &__block_literal_global_13;
    context = v12;
    CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)ctu::cf::DictApplyFunction, &context);
  }
  LODWORD(v5) = 0;
  return v6 | ((unint64_t)v5 << 32);
}

unint64_t _CTServerConnectionCopyFirmwareManifestStatus(uint64_t a1, xpc_object_t *a2)
{
  unint64_t RadioModuleProperty;
  uint64_t v5;
  unint64_t v6;

  if ((hasBaseband() & 1) == 0)
  {
    handleUnsupportedRequestForCurrentBundle("CopyFirmwareManifestStatus");
    v6 = 0x1300000000;
LABEL_11:
    v5 = 1;
    return v5 | v6;
  }
  v5 = RadioModuleProperty;
  if (HIDWORD(RadioModuleProperty))
  {
    v6 = RadioModuleProperty & 0xFFFFFFFF00000000;
    v5 = 2;
    return v5 | v6;
  }
  if (!a2 || !*a2)
  {
    v6 = 0xC00000000;
    goto LABEL_11;
  }
  if (!CFDictionaryGetCount((CFDictionaryRef)*a2))
  {
    CFRelease(*a2);
    *a2 = 0;
    v6 = 0x2300000000;
    goto LABEL_11;
  }
  v6 = 0;
  return v5 | v6;
}

unint64_t _CTServerConnectionCopyFirmwareManifestData(uint64_t a1, xpc_object_t *a2)
{
  unint64_t RadioModuleProperty;
  uint64_t v5;
  unint64_t v6;

  if ((hasBaseband() & 1) == 0)
  {
    handleUnsupportedRequestForCurrentBundle("CopyFirmwareManifestData");
    v6 = 0x1300000000;
LABEL_11:
    v5 = 1;
    return v5 | v6;
  }
  v5 = RadioModuleProperty;
  if (HIDWORD(RadioModuleProperty))
  {
    v6 = RadioModuleProperty & 0xFFFFFFFF00000000;
    v5 = 2;
    return v5 | v6;
  }
  if (!a2 || !*a2)
  {
    v6 = 0xC00000000;
    goto LABEL_11;
  }
  if (!CFDictionaryGetCount((CFDictionaryRef)*a2))
  {
    CFRelease(*a2);
    *a2 = 0;
    v6 = 0x2300000000;
    goto LABEL_11;
  }
  v6 = 0;
  return v5 | v6;
}

uint64_t _CTServerConnectionDumpBasebandState(uint64_t a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v13;
  xpc_object_t object;
  __int128 v15;
  uint64_t v16;

  if (!a1)
    return 0x1600000001;
  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    v3 = v2;
    object = v2;
  }
  else
  {
    v3 = xpc_null_create();
    object = v3;
    if (!v3)
      goto LABEL_7;
  }
  if (MEMORY[0x186DBAE5C](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    v5 = v3;
    goto LABEL_9;
  }
LABEL_7:
  v5 = xpc_null_create();
  object = v5;
LABEL_9:
  xpc_release(v3);
  v6 = xpc_string_create("kRadioModuleDumpBasebandState");
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, "kRequest", v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v15 = 0uLL;
  v16 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = 0uLL;
  v13 = 0;
  v8 = xpc_string_create((const char *)__p);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v5, "kRadioModuleReason", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  v4 = SendXpcMessage(a1, &object, 0, v10);
  xpc_release(object);
  return v4;
}

uint64_t _CTServerConnectionDumpMemory(uint64_t a1, uint64_t a2, unsigned int a3)
{
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v18;
  xpc_object_t xdict;
  __int128 v20;
  uint64_t v21;

  if (!a1)
    return 0x1600000001;
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5)
  {
    v6 = v5;
    xdict = v5;
  }
  else
  {
    v6 = xpc_null_create();
    xdict = v6;
    if (!v6)
      goto LABEL_7;
  }
  if (MEMORY[0x186DBAE5C](v6) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v6);
    v8 = v6;
    goto LABEL_9;
  }
LABEL_7:
  v8 = xpc_null_create();
  xdict = v8;
LABEL_9:
  xpc_release(v6);
  v9 = xpc_string_create("kRadioModuleDumpMemory");
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kRequest", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v20 = 0uLL;
  v21 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = 0uLL;
  v18 = 0;
  v11 = xpc_string_create((const char *)__p);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kRadioModuleReason", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  v13 = xpc_int64_create(a3);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "kRadioModuleMemoryDumpThreshold", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v7 = SendXpcMessage(a1, &xdict, 0, v15);
  xpc_release(xdict);
  return v7;
}

uint64_t _CTServerConnectionCopyTraceProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, BOOL *a5)
{
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  xpc_object_t v13;
  void *v14;
  xpc_object_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  xpc_object_t xdict;
  xpc_object_t object;

  if ((hasBaseband() & 1) != 0)
  {
    v10 = 0x1600000001;
    if (a1 && a2 && a3 && a4 && a5)
    {
      xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
      xpc::dict_creator::operator()<char const*>("kRadioCopyTraceProperty", &object, "kRequest", &xdict);
      xpc_release(object);
      v11 = xdict;
      object = xdict;
      xdict = xpc_null_create();
      xpc_release(xdict);
      v12 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v12)
        v12 = xpc_null_create();
      xpc_dictionary_set_value(v11, "kRadioTraceProperty", v12);
      v13 = xpc_null_create();
      xpc_release(v12);
      xpc_release(v13);
      v14 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v14)
        v14 = xpc_null_create();
      xpc_dictionary_set_value(v11, "kRadioTraceName", v14);
      v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
      xdict = xpc_null_create();
      v10 = SendXpcMessage(a1, &object, &xdict);
      *a4 = 0;
      *a5 = 0;
      if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
        && xpc_dictionary_get_value(xdict, "kRadioTracePropertyValue"))
      {
        v19 = 0;
        xpc_dictionary_get_value(xdict, "kRadioTracePropertyValue");
        v18 = _CFXPCCreateCFObjectFromXPCObject();
        ctu::cf::CFSharedRef<__CFString const>::CFSharedRef<void const,void>(&v19, (CFTypeRef *)&v18);
        v16 = v19;
        *a4 = v19;
        *a5 = v16 != 0;
      }
      xpc_release(xdict);
      xpc_release(object);
    }
  }
  else
  {
    handleUnsupportedRequestForCurrentBundle("CopyTraceProperty");
    return 0x1300000001;
  }
  return v10;
}

unint64_t _CTServerConnectionSetTraceProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unsigned int v5;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  void *v10;
  xpc_object_t v11;
  void *v12;
  xpc_object_t v13;
  uint64_t v14;
  int v15;
  xpc_object_t object[2];
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;

  v4 = 0x1600000000;
  v5 = 1;
  if (a1 && a2 && a3 && a4)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioSetTraceProperty", object, "kRequest", &v19);
    xpc_release(object[0]);
    v7 = v19;
    v20 = v19;
    v19 = xpc_null_create();
    xpc_release(v19);
    v8 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v8)
      v8 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kRadioTraceName", v8);
    v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    v10 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kRadioTraceProperty", v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    v12 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v12)
      v12 = xpc_null_create();
    xpc_dictionary_set_value(v7, "kRadioTracePropertyValue", v12);
    v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    v19 = xpc_null_create();
    v14 = SendXpcMessage(a1, &v20, &v19);
    v4 = 0x400000000;
    if (MEMORY[0x186DBAE5C](v19) == MEMORY[0x1E0C812F8])
    {
      object[0] = &v19;
      object[1] = "kDidSucceed";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v18);
      v15 = xpc::dyn_cast_or_default((xpc *)&v18, 0);
      xpc_release(v18);
      if (v15)
      {
        v4 = v14 & 0xFFFFFFFF00000000;
        v5 = v14;
      }
      else
      {
        v5 = 2;
      }
    }
    else
    {
      v5 = 2;
    }
    xpc_release(v19);
    xpc_release(v20);
  }
  return v4 & 0xFFFFFFFF00000000 | v5;
}

uint64_t _CTServerConnectionCopyBasebandThumbprint(uint64_t a1, _QWORD *a2)
{
  *a2 = &stru_1E1536FB8;
  return 0x1300000001;
}

uint64_t _CTServerConnectionResetModem(uint64_t a1, const __CFString *a2)
{
  return _CTServerConnectionResetModemWithCrashLogs(a1, a2, 0);
}

uint64_t _CTServerConnectionResetModemWithCrashLogs(uint64_t a1, const __CFString *a2, BOOL a3)
{
  uint64_t v3;
  __CFString *MutableCopy;
  xpc_object_t v8;
  void *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v15;
  xpc_object_t object;

  v3 = 0x1600000001;
  if (a1 && a2)
  {
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("AP-triggered: "));
    CFStringAppend(MutableCopy, a2);
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioModuleResetModem", &object, "kRequest", &v15);
    xpc_release(object);
    v8 = v15;
    object = v15;
    v15 = xpc_null_create();
    xpc_release(v15);
    v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kRadioModuleModemResetReason", v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    v11 = xpc_BOOL_create(a3);
    if (!v11)
      v11 = xpc_null_create();
    xpc_dictionary_set_value(v8, "kRadioModuleGetLogs", v11);
    v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    v3 = SendXpcMessage(a1, &object, 0, v13);
    xpc_release(object);
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  return v3;
}

uint64_t _CTServerConnectionDumpState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t object[2];
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kRadioModuleSetProperty", object, "kRequest", &v7);
  xpc_release(object[0]);
  v8 = v7;
  v7 = xpc_null_create();
  xpc_release(v7);
  object[0] = &v8;
  object[1] = "kRadioModuleDumpState";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v6);
  xpc_release(v6);
  v6 = 0;
  v3 = SendXpcMessage(a1, &v8, 0, v2);
  xpc_release(v8);
  return v3;
}

uint64_t _CTServerConnectionEnableRemoteDiagnostics(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 0x1600000001;
}

uint64_t _CTServerConnectionConfigMaxRadioPower(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v9;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioConfigRadioMaxPower", &object, "kRequest", &v9);
    xpc_release(object);
    v4 = v9;
    object = v9;
    v9 = xpc_null_create();
    xpc_release(v9);
    v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kRadioPowerConfig", v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    v2 = SendXpcMessage(a1, &object, 0, v7);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionEnableHAC()
{
  return 0x1300000001;
}

uint64_t _CTServerConnectionGetHACState()
{
  return 0x1300000001;
}

uint64_t _CTServerConnectionSetCampOnlyMode(uint64_t a1)
{
  if (a1)
    return 0x2E00000002;
  else
    return 0x1600000001;
}

uint64_t _CTServerConnectionSendAwdQueriableMetric(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  uint64_t v16;
  xpc_object_t v18;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kRadioModuleAwdSendTrigger", &object, "kRequest", &v18);
  xpc_release(object);
  v8 = v18;
  object = v18;
  v18 = xpc_null_create();
  xpc_release(v18);
  v9 = xpc_int64_create(a2);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kAwdComponentId", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(a3);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kAwdSubmissionId", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(a4);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kAwdTriggerId", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v16 = SendXpcMessage(a1, &object, 0, v15);
  xpc_release(object);
  return v16;
}

uint64_t _CTServerConnectionConfigAndCopyTxController(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t xdict;
  xpc_object_t object;

  v3 = 0x1600000001;
  if (a1 && a2 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioTxPowerControlCommand", &object, "kRequest", &xdict);
    xpc_release(object);
    v6 = xdict;
    object = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v7)
      v7 = xpc_null_create();
    xpc_dictionary_set_value(v6, "kRadioTxPowerControlData", v7);
    v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xdict = xpc_null_create();
    v3 = SendXpcMessage(a1, &object, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kRadioTxPowerControlData"))
    {
      v11 = 0;
      xpc_dictionary_get_value(xdict, "kRadioTxPowerControlData");
      v10 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v11, (CFTypeRef *)&v10);
      *a3 = v11;
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v3;
}

uint64_t _CTServerConnectionGetVoiceLinkQualityMetric(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t result;
  xpc_object_t *v7;
  int v8;
  _QWORD v9[5];
  xpc_object_t v10;
  xpc_object_t v11;

  result = 0x1600000001;
  if (a1 && a2 && a3)
  {
    v7 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v11);
    xpc::dict_creator::operator()<char const*>("kRadioGetVoiceLQM", v7, "kRequest", &v10);
    xpc_release(v11);
    v11 = v10;
    v10 = xpc_null_create();
    xpc_release(v10);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = ___CTServerConnectionGetVoiceLinkQualityMetric_block_invoke;
    v9[3] = &unk_1E1534300;
    v9[4] = a3;
    v8 = SendXpcMessageAsync(a1, &v11, a2, v9);
    xpc_release(v11);
    if (v8)
      return 0;
    else
      return 0x500000002;
  }
  return result;
}

uint64_t _CTServerConnectionGetEnhancedVoiceLinkQualityMetric(const void *a1, CFDataRef *a2)
{
  uint64_t v2;
  const UInt8 *data;
  const __CFAllocator *v6;
  size_t length;
  xpc_object_t xdict;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioGetEnhancedVoiceLQM", &object, "kRequest", &xdict);
    xpc_release(object);
    object = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage((uint64_t)a1, &object, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kRadioEnhancedVoiceLQM"))
    {
      length = 0;
      data = (const UInt8 *)xpc_dictionary_get_data(xdict, "kRadioEnhancedVoiceLQM", &length);
      v6 = CFGetAllocator(a1);
      *a2 = CFDataCreate(v6, data, length);
    }
    xpc_release(xdict);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionCopyCellularTransmitState(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kCTCopyCellularTransmitState", &object, "kRequest", &v8);
    xpc_release(object);
    object = v8;
    v8 = xpc_null_create();
    xpc_release(v8);
    v8 = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &v8);
    if (MEMORY[0x186DBAE5C](v8) == MEMORY[0x1E0C812F8])
    {
      v7 = 0;
      v6 = _CFXPCCreateCFObjectFromXPCObject();
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v7, (CFTypeRef *)&v6);
      *a2 = v7;
    }
    xpc_release(v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionCleanBasebandLogs(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t object[2];
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<char const*>("kRadioModuleSetProperty", object, "kRequest", &v7);
  xpc_release(object[0]);
  v8 = v7;
  v7 = xpc_null_create();
  xpc_release(v7);
  object[0] = &v8;
  object[1] = "kRadioModuleCleanBasebandLogs";
  xpc::dict::object_proxy::operator=((uint64_t)object, &v6);
  xpc_release(v6);
  v6 = 0;
  v3 = SendXpcMessage(a1, &v8, 0, v2);
  xpc_release(v8);
  return v3;
}

uint64_t _CTServerConnectionGetRadioState(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  xpc_object_t object[2];
  xpc_object_t v7;
  xpc_object_t xdict;
  xpc_object_t v9;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kRadioModuleGetRadioState", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v9 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v9, &xdict);
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kRadioState"))
    {
      object[0] = &xdict;
      object[1] = "kRadioState";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v7);
      *a2 = xpc::dyn_cast_or_default((xpc *)&v7, 0);
      xpc_release(v7);
    }
    xpc_release(xdict);
    xpc_release(v9);
  }
  return v2;
}

uint64_t _CTServerConnectionSilenceAssertionCreate(_QWORD *a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  xpc_object_t v11;
  CFAllocatorRef v12;
  uint64_t v13;
  xpc_object_t v14;
  _QWORD *v15;
  xpc_object_t *v16;
  void *v17;
  void *v18;
  xpc_object_t v19;
  NSObject *v20;
  std::string *v21;
  _QWORD v23[8];
  std::string v24;
  std::string v25;
  _OWORD v26[2];
  uint64_t v27;
  std::string v28;
  xpc_object_t v29;
  std::string v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = 0x1600000000;
  v5 = 1;
  if (!a1 || !a2 || !a3 || !a4)
    return v4 & 0x1F00000000 | v5;
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  v10 = a1[3];
  if (*(char *)(v10 + 111) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v10 + 88), *(_QWORD *)(v10 + 96));
  else
    v25 = *(std::string *)(v10 + 88);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v28, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    v28 = v25;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v30, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v30 = v28;
  v29 = 0;
  if (ctu::cf::convert_copy())
    v11 = v29;
  else
    v11 = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  _CTServerConnectionAddIdentifierException(v11);
  if (v11)
    CFRelease(v11);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v12 = CFGetAllocator(a1);
  v13 = a1[3];
  if (*(char *)(v13 + 111) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v13 + 88), *(_QWORD *)(v13 + 96));
  else
    v24 = *(std::string *)(v13 + 88);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v28, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    v28 = v24;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v30, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v30 = v28;
  v29 = 0;
  if (ctu::cf::convert_copy())
    v14 = v29;
  else
    v14 = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v14)
    CFRelease(v14);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if (v15)
      goto LABEL_45;
LABEL_55:
    v4 = 0x500000000;
    v5 = 2;
    return v4 & 0x1F00000000 | v5;
  }
  if (!v15)
    goto LABEL_55;
LABEL_45:
  v16 = (xpc_object_t *)xpc::dict_creator::dict_creator((xpc::dict_creator *)&v30);
  xpc::dict_creator::operator()<char const*>("kRadioCreateSilenceAssertion", v16, "kRequest", (xpc_object_t *)&v28.__r_.__value_.__l.__data_);
  xpc_release(v30.__r_.__value_.__l.__data_);
  v17 = (void *)v28.__r_.__value_.__r.__words[0];
  v29 = (xpc_object_t)v28.__r_.__value_.__r.__words[0];
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc_release(v28.__r_.__value_.__l.__data_);
  v18 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v17, "kAssertionName", v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 0x40000000;
  v23[2] = ___CTServerConnectionSilenceAssertionCreate_block_invoke;
  v23[3] = &unk_1E152D518;
  v23[4] = a4;
  v23[5] = v15;
  v23[6] = a3;
  v23[7] = a2;
  if ((SendXpcMessageAsync((uint64_t)v15, &v29, a3, v23) & 1) != 0)
  {
    v20 = CTLogRadioModule();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      memset(&v30, 0, sizeof(v30));
      ctu::cf::assign();
      v28 = v30;
      v21 = &v28;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
      LODWORD(v30.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      _os_log_impl(&dword_18425C000, v20, OS_LOG_TYPE_DEFAULT, "Calling _CTServerConnectionSilenceAssertionCreate() for name = %s", (uint8_t *)&v30, 0xCu);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }
    v4 = 0;
    v5 = 0;
  }
  else
  {
    CFRelease(v15);
    v4 = 0x500000000;
    v5 = 2;
  }
  xpc_release(v29);
  return v4 & 0x1F00000000 | v5;
}

unint64_t _CTServerConnectionIsSilenceAssertionBarred(uint64_t a1, _BYTE *a2, uint64_t *a3)
{
  NSObject *v3;
  unsigned int v4;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  const object *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  xpc_object_t v16;
  xpc_object_t xdict;
  xpc_object_t v18;
  __int128 object;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  LODWORD(v3) = 22;
  v4 = 1;
  if (a2 && a1 && a3)
  {
    *a2 = 0;
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kRadioIsSilenceAssertionBarred", (xpc_object_t *)&object, "kRequest", &xdict);
    xpc_release((xpc_object_t)object);
    v18 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v8 = SendXpcMessage(a1, &v18, &xdict);
    v4 = v8;
    v3 = HIDWORD(v8);
    if (!(_DWORD)v8)
    {
      if (xpc_dictionary_get_value(xdict, "error"))
      {
        v9 = CTLogRadioModule();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(object) = 0;
          _os_log_impl(&dword_18425C000, v9, OS_LOG_TYPE_DEFAULT, "error key set in reply", (uint8_t *)&object, 2u);
        }
        v4 = 1;
        LODWORD(v3) = 1;
        goto LABEL_14;
      }
      if (xpc_dictionary_get_value(xdict, "kPosixError"))
      {
        v10 = CTLogRadioModule();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(object) = 0;
          _os_log_impl(&dword_18425C000, v10, OS_LOG_TYPE_DEFAULT, "_CTServerConnectionIsSilenceAssertionBarred - Silence assertion query encountered failure", (uint8_t *)&object, 2u);
        }
        *(_QWORD *)&object = &xdict;
        *((_QWORD *)&object + 1) = "kPosixError";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v16);
        LODWORD(v3) = xpc::dyn_cast_or_default((xpc *)&v16, 0);
        xpc_release(v16);
      }
      else
      {
        if (!xpc_dictionary_get_value(xdict, "kRadioIsSilenceAssertionBarred"))
        {
          v15 = CTLogRadioModule();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(object) = 0;
            _os_log_impl(&dword_18425C000, v15, OS_LOG_TYPE_DEFAULT, "_CTServerConnectionIsSilenceAssertionBarred - Silence assertion is allowed", (uint8_t *)&object, 2u);
          }
          v4 = 0;
          goto LABEL_14;
        }
        v4 = 1;
        *a2 = 1;
        *(_QWORD *)&object = &xdict;
        *((_QWORD *)&object + 1) = "kBarringEndTime";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v16);
        xpc::dyn_cast_or_default((xpc *)&v16, v12, 0.0);
        *a3 = v13;
        xpc_release(v16);
        v3 = CTLogRadioModule();
        if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v3) = 0;
          goto LABEL_14;
        }
        v14 = *a3;
        LODWORD(object) = 134217984;
        *(_QWORD *)((char *)&object + 4) = v14;
        _os_log_impl(&dword_18425C000, v3, OS_LOG_TYPE_DEFAULT, "_CTServerConnectionIsSilenceAssertionBarred() - Silence assertion barred until:  %f", (uint8_t *)&object, 0xCu);
        LODWORD(v3) = 0;
      }
      v4 = 1;
    }
LABEL_14:
    xpc_release(xdict);
    xpc_release(v18);
  }
  return v4 | ((unint64_t)v3 << 32);
}

uint64_t _CTServerConnectionConfigureLogging(uint64_t a1, ctu *a2)
{
  uint64_t v2;
  xpc_object_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  xpc_object_t value;
  xpc_object_t valuea;
  xpc_object_t v12;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kConfigureLogging", &object, "kRequest", &v12);
    xpc_release(object);
    v5 = v12;
    object = v12;
    v12 = xpc_null_create();
    xpc_release(v12);
    ctu::cf_to_xpc(a2, v6);
    xpc_dictionary_set_value(v5, "kLoggingConfig", value);
    v7 = value;
    valuea = xpc_null_create();
    xpc_release(v7);
    xpc_release(valuea);
    v2 = SendXpcMessage(a1, &object, 0, v8);
    xpc_release(object);
  }
  return v2;
}

void ___ZN3ctu2cf8for_eachINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKvEEvPK14__CFDictionaryU13block_pointerFvRKT_RKT0_E_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void **, __int128 *);
  void *__p[2];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 32);
  v8 = 0uLL;
  v9 = 0;
  ctu::cf::assign();
  v7 = 0;
  *(_OWORD *)__p = 0uLL;
  v5 = *(void (**)(uint64_t, void **, __int128 *))(v4 + 16);
  *(_QWORD *)&v8 = a3;
  v5(v4, __p, &v8);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

uint64_t ctu::cf::DictApplyFunction(ctu::cf *this, const void *a2, const void *a3, void *a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
}

uint64_t _CTServerConnectionDeviceManagementUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  xpc_object_t v8;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kDeviceManagementUpdate", &object, "kRequest", &v8);
    xpc_release(object);
    v4 = v8;
    object = v8;
    v8 = xpc_null_create();
    xpc_release(v8);
    v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kDeviceManagementStatus", v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    v8 = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &v8);
    xpc_release(v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionLoadManagedCellularProfile(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  xpc_object_t v8;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kLoadManagedCellularProfile", &object, "kRequest", &v8);
    xpc_release(object);
    v4 = v8;
    object = v8;
    v8 = xpc_null_create();
    xpc_release(v8);
    v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kManagedCellularProfileDict", v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    v8 = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &v8);
    xpc_release(v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionUnloadManagedCellularProfile(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v4;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kUnloadManagedCellularProfile", &object, "kRequest", &v4);
  xpc_release(object);
  object = v4;
  v4 = xpc_null_create();
  xpc_release(v4);
  v4 = xpc_null_create();
  v2 = SendXpcMessage(a1, &object, &v4);
  xpc_release(v4);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionGetManagedCellularProfile(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  const object *v5;
  xpc_object_t object[2];
  xpc_object_t v8;
  CFTypeRef cf;
  uint64_t v10;
  xpc_object_t xdict;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetManagedCellularProfile", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v12 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v12, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8]
      && xpc_dictionary_get_value(xdict, "kManagedCellularProfileDict"))
    {
      v10 = 0;
      object[0] = &xdict;
      object[1] = "kManagedCellularProfileDict";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      xpc::bridge((xpc *)&v8, v5);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v10, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v8);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionSetUIConfiguredApns(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  xpc_object_t v8;
  xpc_object_t object;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
    xpc::dict_creator::operator()<char const*>("kSetUIConfiguredApns", &object, "kRequest", &v8);
    xpc_release(object);
    v4 = v8;
    object = v8;
    v8 = xpc_null_create();
    xpc_release(v8);
    v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v5)
      v5 = xpc_null_create();
    xpc_dictionary_set_value(v4, "kUIApnsDict", v5);
    v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
    v8 = xpc_null_create();
    v2 = SendXpcMessage(a1, &object, &v8);
    xpc_release(v8);
    xpc_release(object);
  }
  return v2;
}

uint64_t _CTServerConnectionGetUIConfiguredApns(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  const object *v5;
  xpc_object_t object[2];
  xpc_object_t v8;
  CFTypeRef cf;
  uint64_t v10;
  xpc_object_t xdict;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetUIConfiguredApns", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v12 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v12, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kUIApnsDict"))
    {
      v10 = 0;
      object[0] = &xdict;
      object[1] = "kUIApnsDict";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      xpc::bridge((xpc *)&v8, v5);
      ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&v10, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v8);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionResetUIConfiguredApns(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v4;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kResetUIConfiguredApns", &object, "kRequest", &v4);
  xpc_release(object);
  object = v4;
  v4 = xpc_null_create();
  xpc_release(v4);
  v4 = xpc_null_create();
  v2 = SendXpcMessage(a1, &object, &v4);
  xpc_release(v4);
  xpc_release(object);
  return v2;
}

uint64_t _CTServerConnectionGetAPNConfiguration(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  const object *v5;
  xpc_object_t object[2];
  xpc_object_t v8;
  CFTypeRef cf;
  uint64_t v10;
  xpc_object_t xdict;
  xpc_object_t v12;

  v2 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetConfiguredApns", object, "kRequest", &xdict);
    xpc_release(object[0]);
    v12 = xdict;
    xdict = xpc_null_create();
    xpc_release(xdict);
    xdict = xpc_null_create();
    v2 = SendXpcMessage(a1, &v12, &xdict);
    *a2 = 0;
    if (MEMORY[0x186DBAE5C](xdict) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(xdict, "kApns"))
    {
      v10 = 0;
      object[0] = &xdict;
      object[1] = "kApns";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v8);
      xpc::bridge((xpc *)&v8, v5);
      ctu::cf::CFSharedRef<__CFArray const>::CFSharedRef<void const,void>(&v10, &cf);
      if (cf)
        CFRelease(cf);
      xpc_release(v8);
      *a2 = v10;
    }
    xpc_release(xdict);
    xpc_release(v12);
  }
  return v2;
}

uint64_t _CTServerConnectionSetDisallowTelephonyFeature(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  void *v6;
  void **v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v15;
  xpc_object_t v16;
  xpc_object_t object[2];
  uint64_t v18;

  v3 = 0x1600000001;
  if (a1 && a2)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kSetDisallowTelephonyFeature", object, "kRequest", __p);
    xpc_release(object[0]);
    v6 = __p[0];
    v16 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    object[0] = 0;
    object[1] = 0;
    v18 = 0;
    ctu::cf::assign();
    *(_OWORD *)__p = *(_OWORD *)object;
    v15 = v18;
    if (v18 >= 0)
      v7 = __p;
    else
      v7 = (void **)object[0];
    v8 = xpc_string_create((const char *)v7);
    if (!v8)
      v8 = xpc_null_create();
    xpc_dictionary_set_value(v6, "kTelephonyFeature", v8);
    v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    v10 = xpc_int64_create(a3);
    if (!v10)
      v10 = xpc_null_create();
    xpc_dictionary_set_value(v6, "kDisallow", v10);
    v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    v3 = SendXpcMessage(a1, &v16, 0, v12);
    xpc_release(v16);
  }
  return v3;
}

uint64_t _CTServerConnectionGetDisallowTelephonyFeature(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  void *v6;
  void **v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v11;
  void *__p[2];
  uint64_t v13;
  xpc_object_t v14;
  xpc_object_t object[2];
  uint64_t v16;

  v3 = 0x1600000001;
  if (a2 && a1 && a3)
  {
    xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
    xpc::dict_creator::operator()<char const*>("kGetDisallowTelephonyFeature", object, "kRequest", __p);
    xpc_release(object[0]);
    v6 = __p[0];
    v14 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(__p[0]);
    object[0] = 0;
    object[1] = 0;
    v16 = 0;
    ctu::cf::assign();
    *(_OWORD *)__p = *(_OWORD *)object;
    v13 = v16;
    if (v16 >= 0)
      v7 = __p;
    else
      v7 = (void **)object[0];
    v8 = xpc_string_create((const char *)v7);
    if (!v8)
      v8 = xpc_null_create();
    xpc_dictionary_set_value(v6, "kTelephonyFeature", v8);
    v9 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v9);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    __p[0] = xpc_null_create();
    v3 = SendXpcMessage(a1, &v14, __p);
    if (MEMORY[0x186DBAE5C](__p[0]) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(__p[0], "kDisallow"))
    {
      object[0] = __p;
      object[1] = "kDisallow";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
      *a3 = xpc::dyn_cast_or_default((xpc *)&v11, 0);
      xpc_release(v11);
    }
    xpc_release(__p[0]);
    xpc_release(v14);
  }
  return v3;
}

uint64_t _CTServerConnectionSetDataPlanWebsheetVisibility(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v10;
  xpc_object_t object;

  if (!a1)
    return 0x1600000001;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&object);
  xpc::dict_creator::operator()<char const*>("kCDPSetWebsheetVisibility", &object, "kRequest", &v10);
  xpc_release(object);
  v4 = v10;
  object = v10;
  v10 = xpc_null_create();
  xpc_release(v10);
  v5 = xpc_int64_create(a2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(v4, "kCDPSetWebsheetVisibility", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = SendXpcMessage(a1, &object, 0, v7);
  xpc_release(object);
  return v8;
}

uint64_t MMSBinaryHeader::MMSBinaryHeader(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_1E152C710;
  *(_QWORD *)(result + 8) = a2;
  *(_BYTE *)(result + 16) = 0;
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E152C710;
  *(_QWORD *)(result + 8) = v2;
  *(_BYTE *)(result + 16) = 0;
  return result;
}

const char *MMSBinaryHeader::name(MMSBinaryHeader *this)
{
  uint64_t v1;
  const char *result;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return "<unknown>";
  result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0)
    return *(const char **)result;
  return result;
}

BOOL MMSBinaryHeader::encodeName(MMSBinaryHeader *this, MMSPduEncoder *a2)
{
  _BYTE *v2;

  v2 = (_BYTE *)*((_QWORD *)this + 1);
  if (v2)
    MMSPduEncoder::encodeByte(a2, *v2 | 0x80);
  return v2 != 0;
}

void sub_18438CC4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438CD14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438CE18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18438CEF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18438CFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18438D0A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438D2C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18438D37C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

MMSHeaderEncodingMap *MMSParameterContainer::encodingMap(MMSParameterContainer *this)
{
  MMSHeaderEncodingMap *result;

    return (MMSHeaderEncodingMap *)MMSParameterContainer::encodingMap(void)const::encodingMap;
  result = initEncodingMap();
  MMSParameterContainer::encodingMap(void)const::encodingMap = (uint64_t)result;
  return result;
}

MMSHeaderEncodingMap *initEncodingMap(void)
{
  MMSHeaderEncodingMap *v0;
  MMSBinaryHeader *v1;
  MMSBinaryHeader *v2;
  MMSBinaryHeader *v3;
  MMSBinaryHeader *v4;
  MMSBinaryHeader *v5;
  MMSBinaryHeader *v6;
  MMSBinaryHeader *v7;
  MMSBinaryHeader *v8;
  MMSBinaryHeader *v9;
  MMSBinaryHeader *v10;
  MMSBinaryHeader *v11;
  MMSBinaryHeader *v12;
  MMSBinaryHeader *v13;
  MMSBinaryHeader *v14;
  MMSBinaryHeader *v15;
  MMSBinaryHeader *v16;
  MMSBinaryHeader *v17;
  MMSBinaryHeader *v18;
  MMSBinaryHeader *v19;
  MMSBinaryHeader *v20;
  MMSBinaryHeader *v21;
  MMSBinaryHeader *v22;
  MMSBinaryHeader *v23;
  MMSBinaryHeader *v24;
  MMSBinaryHeader *v25;
  MMSBinaryHeader *v26;

  v0 = (MMSHeaderEncodingMap *)operator new();
  MMSHeaderEncodingMap::MMSHeaderEncodingMap(v0);
  v1 = (MMSBinaryHeader *)operator new();
  MMSCharsetHeader::MMSCharsetHeader((uint64_t)v1, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 1, "charset", v1);
  v2 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v2, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 3, "type", v2);
  v3 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v3, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 5, "name", v3);
  v4 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v4, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 6, "filename", v4);
  v5 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v5, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 8, "padding", v5);
  v6 = (MMSBinaryHeader *)operator new();
  MMSConstrainedHeader::MMSConstrainedHeader((uint64_t)v6, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 9, "type", v6);
  v7 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v7, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 10, "start", v7);
  v8 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v8, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 11, "start-info", v8);
  v9 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v9, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 12, "comment", v9);
  v10 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v10, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 13, "domain", v10);
  v11 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v11, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 14, "max-age", v11);
  v12 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v12, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 15, "path", v12);
  v13 = (MMSBinaryHeader *)operator new();
  MMSEmptyHeader::MMSEmptyHeader((uint64_t)v13, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 16, "secure", v13);
  v14 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v14, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 17, "SEC", v14);
  v15 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v15, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 18, "MAC", v15);
  v16 = (MMSBinaryHeader *)operator new();
  MMSDateHeader::MMSDateHeader((uint64_t)v16, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 19, "Creation-date", v16);
  v17 = (MMSBinaryHeader *)operator new();
  MMSDateHeader::MMSDateHeader((uint64_t)v17, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 20, "Modification-date", v17);
  v18 = (MMSBinaryHeader *)operator new();
  MMSDateHeader::MMSDateHeader((uint64_t)v18, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 21, "Read-date", v18);
  v19 = (MMSBinaryHeader *)operator new();
  MMSIntegerHeader::MMSIntegerHeader((uint64_t)v19, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 22, "Size", v19);
  v20 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v20, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 23, "Name", v20);
  v21 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v21, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 24, "Filename", v21);
  v22 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v22, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 25, "Start", v22);
  v23 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v23, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 26, "Start-info", v23);
  v24 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v24, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 27, "Comment", v24);
  v25 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v25, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 28, "Domain", v25);
  v26 = (MMSBinaryHeader *)operator new();
  MMSTextStringHeader::MMSTextStringHeader(v26, 0, 0);
  MMSHeaderEncodingMap::addEncoding(v0, 29, "Path", v26);
  return v0;
}

void MMSParameterContainer::MMSParameterContainer(MMSParameterContainer *this)
{
  _QWORD *v1;

  MMSHeaderContainer::MMSHeaderContainer(this);
  *v1 = &off_1E152CEB8;
}

void MMSParameterContainer::MMSParameterContainer(MMSParameterContainer *this, const MMSParameterContainer *a2)
{
  _QWORD *v2;

  MMSHeaderContainer::MMSHeaderContainer(this, a2);
  *v2 = &off_1E152CEB8;
}

void MMSParameterContainer::~MMSParameterContainer(MMSParameterContainer *this)
{
  MMSHeaderContainer::~MMSHeaderContainer(this);
  JUMPOUT(0x186DBA454);
}

uint64_t MMSParameterContainer::toString(MMSHeaderContainer *a1, std::string *a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  void *p_p;
  uint64_t v11;
  const std::string::value_type *v13;
  std::string::size_type v14;
  void *__p;
  std::string::size_type v16;
  uint64_t v17;
  _OWORD v18[4];
  void *v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[144];
  uint64_t v23;

  result = MMSHeaderContainer::headerCount(a1);
  if (result)
  {
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)v19 = 0u;
    memset(v18, 0, sizeof(v18));
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v18);
    if (MMSHeaderContainer::headerCount(a1))
    {
      v5 = 1;
      do
      {
        LOBYTE(__p) = 59;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)&__p, 1);
        v6 = MMSHeaderEncodingMap::encodingForNumber(a1, v5 - 1);
        v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
        v8 = strlen(v7);
        v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)v7, v8);
        LOBYTE(__p) = 61;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
        __p = 0;
        v16 = 0;
        v17 = 0;
        if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v6 + 72))(v6, &__p))
        {
          if (v17 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          if (v17 >= 0)
            v11 = HIBYTE(v17);
          else
            v11 = v16;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, v11);
        }
        if (SHIBYTE(v17) < 0)
          operator delete(__p);
      }
      while (MMSHeaderContainer::headerCount(a1) > (unint64_t)v5++);
    }
    std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v18 + 8, &__p);
    if (v17 >= 0)
      v13 = (const std::string::value_type *)&__p;
    else
      v13 = (const std::string::value_type *)__p;
    if (v17 >= 0)
      v14 = HIBYTE(v17);
    else
      v14 = v16;
    std::string::append(a2, v13, v14);
    if (SHIBYTE(v17) < 0)
      operator delete(__p);
    *(_QWORD *)&v18[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v18 + *(_QWORD *)(*(_QWORD *)&v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *((_QWORD *)&v18[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v20) < 0)
      operator delete(v19[1]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x186DBA418](v22);
  }
  return result;
}

uint64_t MMSParameterContainer::parseParameters(MMSParameterContainer *this, const char *__s1)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  MMSHeader *v8;
  MMSHeader *v9;
  MMSHeader *v10;
  char *__lasts;

  if (__s1 && *__s1)
  {
    v3 = strdup(__s1);
    __lasts = 0;
    v4 = strtok_r(v3, ";", &__lasts);
    if (v4)
    {
      v5 = v4;
      do
      {
        v6 = strchr(v5, 61);
        if (v6)
        {
          v7 = v6;
          *v6 = 0;
          MMSHeaderContainer::createHeader(this, v5);
          if (v8)
          {
            v9 = v8;
            (*(void (**)(MMSHeader *, char *))(*(_QWORD *)v8 + 16))(v8, v7 + 1);
LABEL_9:
            MMSHeaderContainer::addHeader(this, v9, 0);
          }
        }
        else
        {
          MMSHeaderContainer::createHeader(this, v5);
          v9 = v10;
          if (v10)
            goto LABEL_9;
        }
        v5 = strtok_r(0, ";", &__lasts);
      }
      while (v5);
    }
    free(v3);
  }
  return 1;
}

uint64_t MMSParameterContainer::charset(MMSParameterContainer *this)
{
  uint64_t v1;
  int *v2;

  v1 = MMSHeaderContainer::headerWithName(this, "charset");
  v2 = (int *)(v1 + 20);
  if (!v1)
    v2 = &kMIBEnumUnknown;
  return *v2;
}

void MMSParameterContainer::setCharset(MMSParameterContainer *this, int a2)
{
  uint64_t v4;
  MMSHeader *v5;

  v4 = MMSHeaderContainer::headerWithName(this, "charset");
  if (!v4)
  {
    MMSHeaderContainer::createHeader(this, "charset");
    v4 = (uint64_t)v5;
    MMSHeaderContainer::addHeader(this, v5, 0);
  }
  *(_DWORD *)(v4 + 20) = a2;
}

BOOL MMSParameterContainer::encode(MMSParameterContainer *this, MMSPduEncoder *a2)
{
  return MMSPduEncoder::encodeHeaders(a2, this);
}

uint64_t MMSParameterContainer::decode(MMSParameterContainer *this, MMSPduDecoder *a2)
{
  return MMSPduDecoder::decodeHeaders(a2, this);
}

const char *CTStewieRequestReasonAsString(unint64_t a1)
{
  if (a1 > 0xA)
    return "???";
  else
    return off_1E15346D8[a1];
}

void sub_18438DFAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438E098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18438E144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438E1D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_18438E278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18438E3D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

const char *CTStewieExitReasonAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return "CTStewieExitReasonUnknown";
  else
    return off_1E1534730[a1 - 1];
}

void sub_18438E554(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438E5DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438E638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438E694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18438E724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438E854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438E970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438EA34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438EAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18438EC00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438ED2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438EE3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18438EEFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18438EF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18438F03C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438F188(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438F2F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18438F3E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18438F4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18438F58C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *CTStewieConnectionAssistantEventTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return "CTStewieConnectionAssistantEventTypeUnknown";
  else
    return off_1E1534750[a1 - 1];
}

void sub_18438F6B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438F738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438F794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438F7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18438F880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438F94C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438F9D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438FA4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438FABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438FB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18438FBDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18438FC74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438FCD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18438FEC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184390160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (v18 != v19)
  {

  }
  if (v15 != v16)
  {

  }
  _Unwind_Resume(a1);
}

void sub_1843902A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843903D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184390538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184390704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184390878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184390900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184390998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184390A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_184390A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184390BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184390C78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184390CD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184390D4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184390DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184390E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184390E94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184390F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184391004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184391080(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843910F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184391168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184391210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184391310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843913FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1843914A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439153C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1843915DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1843916B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184391744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CTCellularData;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

_QWORD *MMSEmptyHeader::MMSEmptyHeader(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(a1, a2);
  *result = &off_1E152C620;
  return result;
}

uint64_t MMSEmptyHeader::parseValue(MMSEmptyHeader *this, const char *a2)
{
  return 1;
}

uint64_t MMSEmptyHeader::valueAsString(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    a2[1] = 0;
    a2 = (uint64_t *)*a2;
  }
  else
  {
    *((_BYTE *)a2 + 23) = 0;
  }
  *(_BYTE *)a2 = 0;
  return 1;
}

uint64_t MMSEmptyHeader::decodeValue(MMSEmptyHeader *this, MMSPduDecoder *a2)
{
  return 1;
}

uint64_t MMSEmptyHeader::encodeValue(MMSEmptyHeader *this, MMSPduEncoder *a2)
{
  return 1;
}

_QWORD *MMSEmptyHeader::createInstance(MMSEmptyHeader *this)
{
  uint64_t v2;
  _QWORD *result;

  v2 = operator new();
  result = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(v2, *((_QWORD *)this + 1));
  *result = &off_1E152C620;
  return result;
}

_QWORD *MMSEmptyHeader::copy(MMSEmptyHeader *this)
{
  uint64_t v2;
  _QWORD *result;

  v2 = operator new();
  result = (_QWORD *)MMSBinaryHeader::MMSBinaryHeader(v2, (uint64_t)this);
  *result = &off_1E152C620;
  return result;
}

const char *MMSEmptyHeader::headerTypeName(MMSEmptyHeader *this)
{
  return "empty";
}

void MMSEmptyHeader::~MMSEmptyHeader(MMSEmptyHeader *this)
{
  MMSBinaryHeader::~MMSBinaryHeader(this);
  JUMPOUT(0x186DBA454);
}

void sub_1843919D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_184391B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184391B9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184391C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184391CA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184391D48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184391E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_184391EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843920C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_184392330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184392414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184392848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1843929E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_184392AC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184392B90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184392E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_184393014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1843931FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_184393CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_184393DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184393F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_184394058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439420C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18439432C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843944B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1843945C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184394814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_184394974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184394AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a7);
  v12 = v11;

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_184394BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184394CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_184394DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184395040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  v28 = v27;

  _Unwind_Resume(a1);
}

void sub_184395210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_184395470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1843955BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1843956CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1843957EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1843958F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1843959B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184395B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_184395C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184395DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184395F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184396010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1843961C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1843963F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1843965E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1843967F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1843969E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_184396BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184396D74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184396F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1843970C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_184397274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184397398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184397520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_184397628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184397784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184397888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1843979E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184397AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_184397BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_184397D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_184397E94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18439805C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1843981B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1843982BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1843983DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1843984E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_184398670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1843987D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1843988E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_184398A74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184398BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_184398CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_184398D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_184398F1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_184399140(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_184399270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_184399410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  uint64_t v26;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v26 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_184399514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184399628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_184399770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_18439991C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_184399A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_184399B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_184399D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  uint64_t v26;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v26 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_184399E34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_184399FFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439A104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  NSObject *v14;
  void *v15;

  if (v14)
    dispatch_release(v14);
  _Unwind_Resume(a1);
}

void sub_18439A39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_18439A504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439A71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  uint64_t v27;

  _Block_object_dispose(&a21, 8);

  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18439A884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_18439AB00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439AC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439AEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_18439AFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439B178(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18439B290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439B3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_18439B4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439B6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_18439B7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439B8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_18439B9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void MMSSimpleHeader::MMSSimpleHeader(MMSSimpleHeader *this, char *a2, char *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;

  *(_QWORD *)this = off_1E152C800;
  v4 = (_QWORD *)((char *)this + 32);
  v5 = (_QWORD *)((char *)this + 8);
  if (!a2)
    a2 = "";
  std::string::basic_string[abi:nn180100]<0>(v5, a2);
  if (a3)
    v6 = a3;
  else
    v6 = "";
  std::string::basic_string[abi:nn180100]<0>(v4, v6);
}

uint64_t MMSSimpleHeader::decodeName(MMSSimpleHeader *this, MMSPduDecoder *a2)
{
  uint64_t result;
  uint64_t v4;

  result = MMSPduDecoder::decodeHttpToken((uint64_t)a2, (std::string *)((char *)this + 8));
  if ((_DWORD)result)
  {
    if (*((char *)this + 31) < 0)
      v4 = *((_QWORD *)this + 2);
    else
      v4 = *((unsigned __int8 *)this + 31);
    return v4 != 0;
  }
  return result;
}

uint64_t MMSSimpleHeader::parseValue(MMSSimpleHeader *this, const char *a2)
{
  std::string::__assign_external((std::string *)((char *)this + 32), a2);
  return 1;
}

uint64_t MMSSimpleHeader::decodeValue(MMSSimpleHeader *this, MMSPduDecoder *a2)
{
  return MMSPduDecoder::decodeWspTextString((uint64_t)a2, (std::string *)((char *)this + 32));
}

uint64_t MMSSimpleHeader::encodeName(MMSSimpleHeader *this, MMSPduEncoder *a2)
{
  const char *v2;

  v2 = (char *)this + 8;
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 31))
      return 0;
LABEL_6:
    MMSPduEncoder::encodeHttpToken(a2, v2);
    return 1;
  }
  if (*((_QWORD *)this + 2))
  {
    v2 = *(const char **)v2;
    goto LABEL_6;
  }
  return 0;
}

uint64_t MMSSimpleHeader::encodeValue(MMSSimpleHeader *this, MMSPduEncoder *a2)
{
  const char *v3;

  v3 = (char *)this + 32;
  if (*((char *)this + 55) < 0)
    v3 = *(const char **)v3;
  MMSPduEncoder::encodeWspTextString(a2, v3);
  return 1;
}

uint64_t MMSSimpleHeader::name(MMSSimpleHeader *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t MMSSimpleHeader::valueAsString(uint64_t a1, std::string *this)
{
  std::string::operator=(this, (const std::string *)(a1 + 32));
  return 1;
}

_QWORD *MMSSimpleHeader::copy(MMSSimpleHeader *this)
{
  _QWORD *v2;
  std::string *v3;
  std::string *v4;

  v2 = (_QWORD *)operator new();
  *v2 = off_1E152C800;
  v3 = (std::string *)(v2 + 1);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    v2[3] = *((_QWORD *)this + 3);
  }
  v4 = (std::string *)(v2 + 4);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    v2[6] = *((_QWORD *)this + 6);
  }
  return v2;
}

uint64_t MMSSimpleHeader::value(MMSSimpleHeader *this)
{
  uint64_t result;

  result = (uint64_t)this + 32;
  if (*((char *)this + 55) < 0)
    return *(_QWORD *)result;
  return result;
}

const char *MMSSimpleHeader::headerTypeName(MMSSimpleHeader *this)
{
  return "simple";
}

void MMSSimpleHeader::~MMSSimpleHeader(void **this)
{
  *this = off_1E152C800;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  MMSHeader::~MMSHeader((MMSHeader *)this);
}

{
  *this = off_1E152C800;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  MMSHeader::~MMSHeader((MMSHeader *)this);
  JUMPOUT(0x186DBA454);
}

void sub_18439C0C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18439C144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439C21C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18439C298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439C320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439C3B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439C4A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18439C538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439C634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439C6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439C788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18439C830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18439C8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18439C984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439CA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439CB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439CBEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18439CC90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439CD1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439CDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18439CE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_18439CEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18439CF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439D020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18439D0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18439D1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439D260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439D330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439D3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439D4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439D570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439D640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439D6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439D7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439D880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439D950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439DA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439DAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439DB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439DC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439DD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439DDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18439DE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439DF3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18439DFB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTMobileEquipmentInfoList>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_18439E090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439E128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18439E258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439E2FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439E438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18439E4C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439E5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439E66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439E74C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18439E7C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSimDeactivationInfo>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_18439E8A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439E938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439E9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439EAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439EB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439EC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439ED60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18439EE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_18439EF2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439EFB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439F040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18439F120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18439F214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_18439F2B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439F3CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18439F4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v18;

  _Unwind_Resume(a1);
}

uint64_t __70__CTXPCUnblockPUKRequest_performRequestWithHandler_completionHandler___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_18439F58C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439F600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439F718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18439F828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v18;

  _Unwind_Resume(a1);
}

void sub_18439F8D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439F94C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18439FA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439FAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439FBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439FC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18439FD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439FDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18439FE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18439FF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A002C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843A00A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSimLabel>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1843A0180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A0218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843A02F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843A03EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1843A0494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A055C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1843A0614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A06E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1843A079C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A0838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1843A08E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A09C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843A0A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTXPCServiceSubscriptionContext>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1843A0B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A0BAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843A0C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1843A0D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1843A0E74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843A0F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1843A102C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A10A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A1114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A11F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843A12C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1843A137C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A13F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A14D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843A15A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1843A1658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A16CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A17C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843A18BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1843A1980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A19F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A1A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843A1B6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843A1C14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843A1D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1843A1DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A1E54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843A1F20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843A1F9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<CTSubscriberAuthDataHolder>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1843A2074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A210C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843A21C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1843A2280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A2360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843A23DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CTThrowingCastIfClass<NSData>(void *a1)
{
  id v1;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = (objc_class *)objc_opt_class();
    NSStringFromClass(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("Type mismatch when casting object, expected %@"), v5);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v6, 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v7);
  }
  return v1;
}

void sub_1843A24B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A254C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843A2608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1843A26D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843A27B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1843A2874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1843A29A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1843A2A38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843A2B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1843A2BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A2CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843A2DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1843A2E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1843A2F1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A3010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843A3104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1843A31C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A323C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A331C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1843A3398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A3488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A357C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843A3670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1843A3734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1843A37A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A389C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843A3990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1843A3A30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1843A3AC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843A3BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1843A3C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1843A3D34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _CTServerConnectionUIMAuthenticate(uint64_t a1, ctu *a2)
{
  uint64_t v2;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  const void *v10;
  xpc_object_t v11;
  xpc_object_t object;
  xpc_object_t value;
  xpc_object_t v15;

  v2 = 0x1600000001;
  if (!a1 || !a2)
    return v2;
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5)
  {
    v6 = v5;
    v15 = v5;
  }
  else
  {
    v6 = xpc_null_create();
    v15 = v6;
    if (!v6)
      goto LABEL_7;
  }
  if (MEMORY[0x186DBAE5C](v6) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v6);
    v7 = v6;
    goto LABEL_9;
  }
LABEL_7:
  v7 = xpc_null_create();
  v15 = v7;
LABEL_9:
  xpc_release(v6);
  v8 = xpc_string_create("kUICCAuthenticationInfo");
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v7, "kRequest", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  ctu::cf_to_xpc(a2, v10);
  xpc_dictionary_set_value(v7, "kUICCAuthenticationInfo", value);
  v11 = value;
  value = xpc_null_create();
  xpc_release(v11);
  xpc_release(value);
  value = 0;
  object = xpc_null_create();
  v2 = SendXpcMessage(a1, &v15, &object);
  xpc_release(object);
  xpc_release(v15);
  return v2;
}

_QWORD *operator<<(_QWORD *a1, __int16 *a2)
{
  _QWORD *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  _QWORD *v8;
  std::string *v9;
  std::string::size_type v10;
  _QWORD *v11;
  std::string __p;
  std::string v14;
  __int16 v15;
  std::string v16;
  std::string v17;

  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  v15 = *a2;
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    v16 = *(std::string *)(a2 + 4);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    v17 = v16;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v17;
  else
    v5 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  else
    size = v17.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, size);
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)"]-[", 3);
  if (*((char *)a2 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  else
    __p = *(std::string *)(a2 + 20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v14 = __p;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v14;
  else
    v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    v10 = v14.__r_.__value_.__l.__size_;
  v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"]", 1);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return a1;
}

void MCCAndMNC::getMcc(MCCAndMNC *this@<X0>, _WORD *a2@<X8>)
{
  std::string *v2;

  *a2 = *(_WORD *)this;
  v2 = (std::string *)(a2 + 4);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    v2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

void MCCAndMNC::getMnc(MCCAndMNC *this@<X0>, _WORD *a2@<X8>)
{
  std::string *v2;

  *a2 = *((_WORD *)this + 16);
  v2 = (std::string *)(a2 + 4);
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    v2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
  }
}

uint64_t _is3DigitMNCWithMCC(int a1, int a2)
{
  BOOL v2;
  uint64_t result;
  BOOL v5;

  if (a1 > 501)
  {
    if (a1 <= 713)
    {
      switch(a1)
      {
        case 502:
          v2 = (a2 & 0xFFFFFFFE) == 152;
          break;
        case 544:
          v2 = a2 == 110;
          break;
        case 708:
          return a2 == 1;
        default:
          return _is3DigitMNC(a1);
      }
      return v2;
    }
    if (a1 == 714)
      return a2 == 16;
    if (a1 != 722)
    {
      if (a1 != 738)
        return _is3DigitMNC(a1);
      return a2 == 2;
    }
    v5 = a2 == 7;
    return !v5;
  }
  if (a1 <= 333)
  {
    if (a1 != 262)
    {
      if (a1 == 330)
        return a2 == 110 || a2 == 120;
      return _is3DigitMNC(a1);
    }
    return a2 == 820;
  }
  if (a1 == 334)
  {
    result = 1;
    if (a2 > 89)
    {
      if (a2 == 90 || a2 == 140)
        return result;
    }
    else if (a2 == 20 || a2 == 50)
    {
      return result;
    }
    return 0;
  }
  if (a1 == 344)
  {
    v5 = a2 == 30;
    return !v5;
  }
  if (a1 != 405)
    return _is3DigitMNC(a1);
  return a2 > 24 && (a2 - 71) < 0xFFFFFFE9;
}

_QWORD *createPLMN@<X0>(int a1@<W0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char __str[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)__str = 0;
  v6 = 0;
  if (_is3DigitMNCWithMCC(a1, a2))
    snprintf(__str, 0x10uLL, "%03d%03d");
  else
    snprintf(__str, 0x10uLL, "%03d%02d");
  return std::string::basic_string[abi:nn180100]<0>(a3, __str);
}

_QWORD *createPLMN@<X0>(int a1@<W2>, _QWORD *a2@<X8>)
{
  char __str[8];
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)__str = 0;
  v5 = 0;
  if (a1)
    snprintf(__str, 0x10uLL, "%03d%03d");
  else
    snprintf(__str, 0x10uLL, "%03d%02d");
  return std::string::basic_string[abi:nn180100]<0>(a2, __str);
}

_QWORD *createPLMN@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v5;
  uint64_t v7;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v7 = 0;
  sscanf(a1, "%d", (char *)&v7 + 4);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (const char *)a2;
  else
    v5 = *(const char **)a2;
  sscanf(v5, "%d", &v7);
  return createPLMN(SHIDWORD(v7), v7, a3);
}

void createCFPLMN(const MCC *a1@<X0>, const MNC *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v5;
  std::string __p;
  std::string v7;
  std::string v8;
  uint64_t v9;

  formPLMN(a1, a2, &__p);
  v4 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v7 = __p;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v8, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  else
    v8 = v7;
  v9 = 0;
  if (ctu::cf::convert_copy())
    v5 = v9;
  else
    v5 = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  *a3 = v5;
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v4 & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v7.__r_.__value_.__l.__data_);
  if (v4 < 0)
    goto LABEL_16;
}

_WORD *MCC::MCC(_WORD *a1, __int16 a2, __int128 *a3)
{
  std::string *v4;
  __int128 v5;

  *a1 = a2;
  v4 = (std::string *)(a1 + 4);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

{
  std::string *v4;
  __int128 v5;

  *a1 = a2;
  v4 = (std::string *)(a1 + 4);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void MCC::MCC(MCC *this, unsigned __int16 a2)
{
  basic_string<char, std::char_traits<char>, std::allocator<char>> *p_var1;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  _OWORD v7[4];
  void *__p[2];
  __int128 v9;
  __int128 v10;
  _BYTE v11[144];
  uint64_t v12;

  this->var0 = a2;
  this->var1.var0.var0.var0.var1.var0 = 0;
  p_var1 = &this->var1;
  *(_OWORD *)&this->var1.var0.var0.var0.var1.var1 = 0uLL;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v7, 0, sizeof(v7));
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v7);
  LOBYTE(v5) = 48;
  v4 = std::operator<<[abi:nn180100]<std::char_traits<char>>(v7, (char *)&v5);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 3;
  std::ostream::operator<<();
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v7 + 8, &v5);
  if (*((char *)&this->var1.var0.var0.var0.var1 + 23) < 0)
    operator delete(p_var1->var0.var0.var0.var1.var0);
  *(_OWORD *)p_var1->var0.var0.var0.var0.var0 = v5;
  *((_QWORD *)&p_var1->var0.var0.var0.var1 + 2) = v6;
  *(_QWORD *)&v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(*(_QWORD *)&v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v7[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186DBA418](v11);
}

_QWORD *std::operator<<[abi:nn180100]<std::char_traits<char>>(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  std::locale v7;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v7, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v7);
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

BOOL MCC::operator>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 > *a2;
}

BOOL MCC::operator<(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 < *a2;
}

MCC *MCC::clear(MCC *this)
{
  this->var0 = -1;
  if (*((char *)&this->var1.var0.var0.var0.var1 + 23) < 0)
  {
    *this->var1.var0.var0.var0.var1.var0 = 0;
    this->var1.var0.var0.var0.var1.var1 = 0;
  }
  else
  {
    this->var1.var0.var0.var0.var0.var0[0] = 0;
    *((_BYTE *)&this->var1.var0.var0.var0.var1 + 23) = 0;
  }
  return this;
}

_WORD *MNC::MNC(_WORD *a1, __int16 a2, __int128 *a3)
{
  std::string *v4;
  __int128 v5;

  *a1 = a2;
  v4 = (std::string *)(a1 + 4);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

{
  std::string *v4;
  __int128 v5;

  *a1 = a2;
  v4 = (std::string *)(a1 + 4);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void MNC::MNC(MNC *this, int a2, const MCC *a3)
{
  std::string::size_type size;
  char v7;
  void **v8;
  std::string v9;
  std::string __str;
  char v11;

  MCC::MCC((MCC *)this, a2);
  memset(&__str, 0, sizeof(__str));
  createPLMN(a3->var0, a2, &__str);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::basic_string(&v9, &__str, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v11);
    v8 = (void **)((char *)this + 8);
    if (*((char *)this + 31) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&v9.__r_.__value_.__l + 2);
    v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v7 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void MCCAndMNC::MCCAndMNC(MCCAndMNC *this, unsigned __int16 a2, int a3)
{
  std::string *v5;
  std::string *v6;
  MCC v7;

  *(_WORD *)this = -1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  v5 = (std::string *)((char *)this + 8);
  *((_WORD *)this + 16) = -1;
  *((_QWORD *)this + 5) = 0;
  v6 = (std::string *)((char *)this + 40);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  MCC::MCC(&v7, a2);
  *(_WORD *)this = v7.var0;
  std::string::operator=(v5, (const std::string *)&v7.var1);
  if (*((char *)&v7.var1.var0.var0.var0.var1 + 23) < 0)
    operator delete(v7.var1.var0.var0.var0.var1.var0);
  MNC::MNC((MNC *)&v7, a3, (const MCC *)this);
  *((_WORD *)this + 16) = v7.var0;
  std::string::operator=(v6, (const std::string *)&v7.var1);
  if (*((char *)&v7.var1.var0.var0.var0.var1 + 23) < 0)
    operator delete(v7.var1.var0.var0.var0.var1.var0);
}

uint64_t MCCAndMNC::operator!=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (MCC::operator==(a1, a2))
    return MCC::operator==(a1 + 16, a2 + 16) ^ 1;
  else
    return 1;
}

void MCCAndMNC::getStringValue(MCCAndMNC *this@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v6;
  std::string __p;
  std::string v8;

  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v8 = *(std::string *)((char *)this + 8);
  if (*((char *)this + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  else
    __p = *(std::string *)((char *)this + 40);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v8, (const std::string::value_type *)p_p, size);
  *a2 = *v6;
  v6->__r_.__value_.__r.__words[0] = 0;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void _CopyMobileUserInformation(void)
{
  const __CFURL *v0;
  const __CFAllocator **v1;
  const __CFURL *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFAllocator *v5;
  const char *v6;
  char *v7;
  passwd *v8;
  int pw_gid;
  CFIndex v10;
  char buffer[16];
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  _MobileUserString = (uint64_t)CFSTR("mobile");
  v10 = 32;
  CFRetain(CFSTR("mobile"));
  v0 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  v1 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (v0)
  {
    v2 = v0;
    v3 = CFURLCopyFileSystemPath(v0, kCFURLPOSIXPathStyle);
    if (v3)
    {
      v4 = v3;
      _MobileUserDirectory = (uint64_t)_CFStringGetOrCreateCString(*v1, v3, 0, 0, 0x8000100u);
      CFRelease(v4);
    }
    CFRelease(v2);
  }
  *(_OWORD *)buffer = 0u;
  v12 = 0u;
  v5 = *v1;
  v6 = _CFStringGetOrCreateCString(*v1, CFSTR("mobile"), buffer, &v10, 0x8000100u);
  if (v6)
  {
    v7 = (char *)v6;
    v8 = getpwnam(v6);
    if (v8)
    {
      pw_gid = v8->pw_gid;
      _MobileUserUID = v8->pw_uid;
      _MobileUserGID = pw_gid;
    }
    if (v7 != buffer)
      CFAllocatorDeallocate(v5, v7);
  }
}

const char *_CFStringGetOrCreateCString(const __CFAllocator *a1, CFStringRef theString, char *buffer, CFIndex *a4, CFStringEncoding encoding)
{
  const char *v7;
  size_t v10;
  CFIndex Length;
  UInt8 *v12;
  const char *v13;
  CFIndex maxBufLen;
  CFRange v16;
  CFRange v17;

  v7 = buffer;
  maxBufLen = 0;
  if (buffer && a4 && *a4 && CFStringGetCString(theString, buffer, *a4, encoding))
  {
    v10 = strlen(v7);
LABEL_12:
    *a4 = v10;
    return v7;
  }
  Length = CFStringGetLength(theString);
  v16.location = 0;
  v16.length = Length;
  CFStringGetBytes(theString, v16, encoding, 0, 0, 0, 0, &maxBufLen);
  v12 = (UInt8 *)CFAllocatorAllocate(a1, maxBufLen + 1, 0);
  if (v12)
  {
    v13 = (const char *)v12;
    v17.location = 0;
    v17.length = Length;
    CFStringGetBytes(theString, v17, encoding, 0, 0, v12, maxBufLen, &maxBufLen);
    v7 = &v13[maxBufLen];
  }
  else
  {
    maxBufLen = 0;
    v13 = v7;
    if (!v7)
      goto LABEL_10;
  }
  *v7 = 0;
  v7 = v13;
LABEL_10:
  if (a4)
  {
    v10 = maxBufLen;
    goto LABEL_12;
  }
  return v7;
}

uint64_t _CFStringGetMobileUser()
{
  pthread_once(&_MobileUserDirectoryOnce, _CopyMobileUserInformation);
  return _MobileUserString;
}

void _CopyWirelessUserInformation(void)
{
  const __CFURL *v0;
  const __CFAllocator **v1;
  const __CFURL *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFAllocator *v5;
  const char *v6;
  char *v7;
  passwd *v8;
  int pw_gid;
  CFIndex v10;
  char buffer[16];
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  _WirelessUserString = (uint64_t)CFSTR("_wireless");
  v10 = 32;
  CFRetain(CFSTR("_wireless"));
  v0 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  v1 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (v0)
  {
    v2 = v0;
    v3 = CFURLCopyFileSystemPath(v0, kCFURLPOSIXPathStyle);
    if (v3)
    {
      v4 = v3;
      _WirelessUserDirectory = (uint64_t)_CFStringGetOrCreateCString(*v1, v3, 0, 0, 0x8000100u);
      CFRelease(v4);
    }
    CFRelease(v2);
  }
  *(_OWORD *)buffer = 0u;
  v12 = 0u;
  v5 = *v1;
  v6 = _CFStringGetOrCreateCString(*v1, CFSTR("_wireless"), buffer, &v10, 0x8000100u);
  if (v6)
  {
    v7 = (char *)v6;
    v8 = getpwnam(v6);
    if (v8)
    {
      pw_gid = v8->pw_gid;
      _WirelessUserUID = v8->pw_uid;
      _WirelessUserGID = pw_gid;
    }
    if (v7 != buffer)
      CFAllocatorDeallocate(v5, v7);
  }
}

uint64_t _GetWirelessUserDirectory()
{
  pthread_once(&_WirelessUserDirectoryOnce, _CopyWirelessUserInformation);
  return _WirelessUserDirectory;
}

uint64_t _CFStringCopyMCCMNCFromIMSI(const __CFString *a1, const __CFString **a2, CFStringRef *a3)
{
  uint64_t v3;
  CFIndex Length;
  unint64_t v8;
  std::string *v9;
  std::string::size_type size;
  const __CFAllocator *v11;
  const __CFString *v12;
  SInt32 IntValue;
  std::string *v14;
  CFRange v15;
  std::string v17;
  CFRange v18;

  v3 = 0;
  if (!a1 || !a2 || !a3)
    return v3;
  Length = CFStringGetLength(a1);
  if (Length < 3)
    return 0;
  v8 = Length;
  memset(&v17, 0, sizeof(v17));
  std::string::resize(&v17, Length + 1, 0);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v17;
  else
    v9 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  else
    size = v17.__r_.__value_.__l.__size_;
  if (!CFStringGetCString(a1, (char *)v9, size, 0x8000100u))
    goto LABEL_22;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v18.location = 0;
  v18.length = 3;
  v12 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, v18);
  IntValue = CFStringGetIntValue(v12);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v17;
  else
    v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if (_is3DigitMNCWithIMSI(IntValue, v14))
    v15.length = 3;
  else
    v15.length = 2;
  if (v8 < v15.length + 3)
  {
    if (v12)
      CFRelease(v12);
LABEL_22:
    v3 = 0;
    goto LABEL_24;
  }
  v15.location = 3;
  *a3 = CFStringCreateWithSubstring(v11, a1, v15);
  *a2 = v12;
  v3 = 1;
LABEL_24:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v3;
}

uint64_t isEmergencyNumber(const void **a1)
{
  uint64_t v1;
  char v2;
  size_t v3;
  const void *v4;

  v1 = 0;
  v2 = *((_BYTE *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = (size_t)a1[1];
  if (v2 >= 0)
    v4 = a1;
  else
    v4 = *a1;
  while (v3 != strlen(_ZGRZ17isEmergencyNumberRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE10numberList_[v1])
       || memcmp(v4, _ZGRZ17isEmergencyNumberRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE10numberList_[v1], v3))
  {
    if (++v1 == 10)
      return 0;
  }
  return 1;
}

uint64_t _CTCallCreateFromXpcDictionary(const void *a1, xpc_object_t object, int a3)
{
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t UuidBytes;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  xpc_object_t *v18;
  const char *v19;
  const char *v20;
  char *cStr;
  char v22;
  char v23;
  char v24;
  xpc_object_t v26[2];
  xpc_object_t v27;
  xpc_object_t __p;
  const char *v29;
  uint64_t v30;
  xpc_object_t v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  xpc_object_t objecta[2];
  uint64_t v38;
  xpc_object_t v39;
  xpc_object_t *v40;
  const char *v41;
  uint64_t v42;

  v5 = MEMORY[0x1E0C812F8];
  if (object)
  {
    v6 = object;
    xpc_retain(object);
    v39 = v6;
  }
  else
  {
    v6 = xpc_null_create();
    v39 = v6;
    if (!v6)
      goto LABEL_5;
  }
  if (MEMORY[0x186DBAE5C](v6) == v5)
  {
    xpc_retain(v6);
    v7 = v6;
    goto LABEL_7;
  }
LABEL_5:
  v7 = xpc_null_create();
  v39 = v7;
LABEL_7:
  xpc_release(v6);
  v8 = MEMORY[0x186DBAE5C](v7);
  v9 = 0;
  if (a1 && v8 == v5)
  {
    v40 = &v39;
    v41 = "kUuid";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, objecta);
    UuidBytes = createUuidBytes(objecta);
    v12 = v11;
    xpc_release(objecta[0]);
    objecta[0] = 0;
    objecta[1] = 0;
    v38 = 0;
    v34 = &v39;
    v35 = "kPhoneNumber";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v34, &v31);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    xpc::dyn_cast_or_default();
    if (SHIBYTE(v42) < 0)
      operator delete(v40);
    xpc_release(v31);
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v31 = &v39;
    v32 = "kCallName";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v31, &__p);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    xpc::dyn_cast_or_default();
    if (SHIBYTE(v42) < 0)
      operator delete(v40);
    xpc_release(__p);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    __p = &v39;
    v29 = "kSource";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&__p, v26);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    xpc::dyn_cast_or_default();
    if (SHIBYTE(v42) < 0)
      operator delete(v40);
    xpc_release(v26[0]);
    v40 = &v39;
    v41 = "kCallStartTime";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, &__p);
    v13 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
    xpc_release(__p);
    v40 = &v39;
    v41 = "kCallDuration";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, &__p);
    v14 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
    xpc_release(__p);
    v40 = &v39;
    v41 = "kCallFlags";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, &__p);
    v15 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
    xpc_release(__p);
    v40 = &v39;
    v41 = "kCallSessionStart";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, &__p);
    v16 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
    xpc_release(__p);
    v40 = &v39;
    v41 = "kMobileCountryCode";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, &__p);
    v17 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
    xpc_release(__p);
    __p = 0;
    v29 = 0;
    v30 = 0;
    v26[0] = &v39;
    v26[1] = "kISOCountryCode";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v26, &v27);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    xpc::dyn_cast_or_default();
    if (SHIBYTE(v42) < 0)
      operator delete(v40);
    xpc_release(v27);
    if (v38 >= 0)
      v18 = objecta;
    else
      v18 = (xpc_object_t *)objecta[0];
    if (v36 >= 0)
      v19 = (const char *)&v34;
    else
      v19 = (const char *)v34;
    if (v33 >= 0)
      v20 = (const char *)&v31;
    else
      v20 = (const char *)v31;
    if (v30 >= 0)
      cStr = (char *)&__p;
    else
      cStr = (char *)__p;
    v9 = _CTCallCreateFromCallInfo(a1, UuidBytes, v12, (const char *)v18, v19, v20, v13, v14, v15, v16, v17, cStr, a3 != 0);
    if (xpc_dictionary_get_value(v39, "kAudioToneRelayFlag"))
    {
      v40 = &v39;
      v41 = "kAudioToneRelayFlag";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, v26);
      v22 = xpc::dyn_cast_or_default((xpc *)v26, 0);
      xpc_release(v26[0]);
      CTCallSetAudioToneRelayFlag(v9, v22);
    }
    if (xpc_dictionary_get_value(v39, "kMobileOriginatedCallEndFlag"))
    {
      v40 = &v39;
      v41 = "kMobileOriginatedCallEndFlag";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, v26);
      v23 = xpc::dyn_cast_or_default((xpc *)v26, 0);
      xpc_release(v26[0]);
      CTCallSetDeviceOriginatedEndFlag(v9, v23);
    }
    if (xpc_dictionary_get_value(v39, "kClientNeedsToSetupAudioInterruptions"))
    {
      v40 = &v39;
      v41 = "kClientNeedsToSetupAudioInterruptions";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v40, v26);
      v24 = xpc::dyn_cast_or_default((xpc *)v26, 0);
      xpc_release(v26[0]);
      CTCallSetSetupAudioInterruptionFlag(v9, v24);
    }
    if (SHIBYTE(v30) < 0)
      operator delete(__p);
    if (SHIBYTE(v33) < 0)
      operator delete(v31);
    if (SHIBYTE(v36) < 0)
      operator delete(v34);
    if (SHIBYTE(v38) < 0)
      operator delete(objecta[0]);
    v7 = v39;
  }
  xpc_release(v7);
  return v9;
}

uint64_t _CTCallCreateFromSerializedData(const void *a1, const __CFData *a2)
{
  uint64_t v2;
  const __CFAllocator *v5;
  const void *v6;
  CFTypeRef v7;
  uint64_t (*v8)(uint64_t);
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t object;
  CFTypeRef cf;

  v2 = 0;
  if (a1 && a2)
  {
    cf = 0;
    v5 = CFGetAllocator(a1);
    object = (xpc_object_t)CFPropertyListCreateWithData(v5, a2, 0, 0, 0);
    ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<void const,void>(&cf, (CFTypeRef *)&object);
    v7 = cf;
    v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!cf)
      v8 = 0;
    if (!v8)
    {
      v2 = 0;
      if (!cf)
        return v2;
      goto LABEL_16;
    }
    ctu::cf_to_xpc((ctu *)cf, v6);
    v9 = object;
    v10 = MEMORY[0x1E0C812F8];
    if (object && MEMORY[0x186DBAE5C](object) == v10)
      xpc_retain(v9);
    else
      v9 = xpc_null_create();
    xpc_release(object);
    if (MEMORY[0x186DBAE5C](v9) == v10)
      v2 = _CTCallCreateFromXpcDictionary(a1, v9, 0);
    else
      v2 = 0;
    xpc_release(v9);
    v7 = cf;
    if (cf)
LABEL_16:
      CFRelease(v7);
  }
  return v2;
}

uint64_t _CTCallPhoneNumberIsMmiOrUssd()
{
  BOOL IsMMI;
  uint64_t *v1;
  uint64_t v2;
  void *v4[2];
  __int128 v5;
  void *v6[2];
  __int128 v7;
  void *v8[2];
  void *__p[2];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  ctu::cf::assign();
  v13 = 0u;
  v14 = 0;
  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v6 = 0u;
  v7 = 0u;
  *(_OWORD *)v4 = 0u;
  v5 = 0u;
  CSIPhoneNumber::CSIPhoneNumber(v4, &v13);
  IsMMI = CSIPhoneNumber::getIsMMI((CSIPhoneNumber *)v4);
  v1 = (uint64_t *)MEMORY[0x1E0C9AE50];
  if (!IsMMI && !CSIPhoneNumber::getIsUSSD((CSIPhoneNumber *)v4))
    v1 = (uint64_t *)MEMORY[0x1E0C9AE40];
  v2 = *v1;
  if (SHIBYTE(v10) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v8[0]);
  if (SBYTE7(v7) < 0)
    operator delete(v6[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[1]);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)v13);
  return v2;
}

void sub_1843A9794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1843A9814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t IsEqualString(void *a1, void *a2)
{
  if (a1 == a2)
    return 1;
  else
    return objc_msgSend(a1, "isEqualToString:", a2);
}

uint64_t isBandMapValid(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        objc_msgSend(v1, "objectForKey:", v6, (_QWORD)v10);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v6) = sAreBandsValid(v6, v7);

        if (!(_DWORD)v6)
        {
          v8 = 0;
          goto LABEL_11;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v3)
        continue;
      break;
    }
  }
  v8 = 1;
LABEL_11:

  return v8;
}

BOOL sIsValidBand(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  _BOOL8 v6;
  int v8;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyCDMA1x")) & 1) != 0
    || (objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyCDMAEVDO")) & 1) != 0
    || (objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyCDMAHybrid")) & 1) != 0
    || objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyeHRPD")))
  {
    if (v4)
    {
      v5 = ctConvertCdmaBandToMask(objc_msgSend(v4, "unsignedShortValue"));
LABEL_7:
      v6 = v5 != 0;
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyGSM")) & 1) != 0
    || objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyGSMCompact")))
  {
    if (v4)
    {
      v5 = ctConvertGsmBandToMask(objc_msgSend(v4, "unsignedShortValue"));
      goto LABEL_7;
    }
LABEL_21:
    v6 = 0;
    goto LABEL_22;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyLTE")))
  {
    if (v4)
    {
      v5 = ctConvertLteBandToMask(objc_msgSend(v4, "unsignedShortValue"));
      goto LABEL_7;
    }
    goto LABEL_21;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyNR")))
  {
    if (v4)
    {
      v5 = ctConvertNrBandToMask(objc_msgSend(v4, "unsignedShortValue"));
      goto LABEL_7;
    }
    goto LABEL_21;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyUTRAN")))
  {
    if (v4)
    {
      v5 = ctConvertUmtsBandToMask(objc_msgSend(v4, "unsignedShortValue"));
      goto LABEL_7;
    }
    goto LABEL_21;
  }
  v8 = objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyTDSCDMA"));
  v6 = 0;
  if (v4 && v8)
  {
    v5 = ctConvertTdsBandToMask(objc_msgSend(v4, "unsignedShortValue"));
    goto LABEL_7;
  }
LABEL_22:

  return v6;
}

uint64_t sAreBandsValid(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyCDMA1x")) & 1) != 0
    || (objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyCDMAEVDO")) & 1) != 0
    || (objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyCDMAHybrid")) & 1) != 0
    || objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyeHRPD")))
  {
    v5 = v4;
    v6 = v5;
    if (v5)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v7 = v5;
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v23;
LABEL_8:
        v11 = 0;
        while (1)
        {
          if (*(_QWORD *)v23 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v11);
          if (!v12 || !ctConvertCdmaBandToMask(objc_msgSend(v12, "unsignedShortValue", (_QWORD)v22)))
            break;
          if (v9 == ++v11)
          {
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
            v13 = 1;
            if (v9)
              goto LABEL_8;
            goto LABEL_32;
          }
        }
LABEL_29:
        v13 = 0;
LABEL_32:

        goto LABEL_33;
      }
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyGSM")) & 1) != 0
    || objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyGSMCompact")))
  {
    v14 = v4;
    v6 = v14;
    if (v14)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v7 = v14;
      v15 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v23;
LABEL_21:
        v18 = 0;
        while (1)
        {
          if (*(_QWORD *)v23 != v17)
            objc_enumerationMutation(v7);
          v19 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v18);
          if (!v19 || !ctConvertGsmBandToMask(objc_msgSend(v19, "unsignedShortValue", (_QWORD)v22)))
            goto LABEL_29;
          if (v16 == ++v18)
          {
            v16 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
            v13 = 1;
            if (v16)
              goto LABEL_21;
            goto LABEL_32;
          }
        }
      }
LABEL_31:
      v13 = 1;
      goto LABEL_32;
    }
LABEL_30:
    v13 = 0;
LABEL_33:

    goto LABEL_34;
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyLTE")))
  {
    v21 = sAreLteBandsValid(v4);
  }
  else if (objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyNR")))
  {
    v21 = sAreNrBandsValid(v4);
  }
  else if (objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyUTRAN")))
  {
    v21 = sAreUmtsBandsValid(v4);
  }
  else
  {
    if (!objc_msgSend(v3, "isEqualToString:", CFSTR("kCTRegistrationRadioAccessTechnologyTDSCDMA")))
    {
      v13 = 0;
      goto LABEL_34;
    }
    v21 = sAreTdsBandsValid(v4);
  }
  v13 = v21;
LABEL_34:

  return v13;
}

uint64_t sAreLteBandsValid(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          if (!v8 || !ctConvertLteBandToMask(objc_msgSend(v8, "unsignedShortValue", (_QWORD)v11)))
          {
            v9 = 0;
            goto LABEL_15;
          }
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        v9 = 1;
        if (v5)
          continue;
        break;
      }
    }
    else
    {
      v9 = 1;
    }
LABEL_15:

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

