Swift::Void __swiftcall FullscreenCoveragePointsRenderer.draw(in:)(MTKView in)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePointCloud;
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v6, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  v7 = type metadata accessor for CoveragePointCloud();
  LODWORD(v6) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7);
  outlined destroy of URL?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  if ((_DWORD)v6 == 1)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_2355E9000, v9, v10, "draw() has nil coveragePointCloud!  Not drawing...", v11, 2u);
      MEMORY[0x23B7D3428](v11, -1, -1);
    }

  }
  else if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_renderStyle) & 1) != 0)
  {
    FullscreenCoveragePointsRenderer.drawCubes(in:)(in.super.super.super.isa);
  }
  else
  {
    FullscreenCoveragePointsRenderer.drawPointPrimitives(in:)(in.super.super.super.isa);
  }
}

void FullscreenCoveragePointsRenderer.drawPointPrimitives(in:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  double *v39;
  double v40;
  double v41;
  Swift::Int v42;
  Swift::Int v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  void (*v57)(void);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char *v70;
  os_unfair_lock_s *v71;
  _QWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  id v84;
  uint64_t aBlock;
  uint64_t v86;
  __int128 v87;
  __int128 v88;

  v2 = v1;
  v84 = a1;
  v81 = type metadata accessor for ColorScheme();
  v83 = *(_QWORD *)(v81 - 8);
  v3 = MEMORY[0x24BDAC7A8](v81);
  v80 = (char *)v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v82 = (char *)v72 - v5;
  v6 = (int *)type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (_QWORD *)((char *)v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_inFlightLock;
  v10 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_inFlightLock];
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_release();
  FullscreenCoveragePointsRenderer.updateInternal()();
  v11 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePoints];
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v18, (uint64_t)v17, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11) == 1)
  {
    outlined destroy of URL?((uint64_t)v17, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    if (one-time initialization token for logger != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)logger);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_2355E9000, v20, v21, "No coverage points -- can't render preview!", v22, 2u);
      MEMORY[0x23B7D3428](v22, -1, -1);
    }

    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, v11);
  v23 = ObjectCaptureSession.Frame.PointCloud.points.getter();
  v24 = FullscreenCoveragePointsRenderer.createUniformsForPointPrimitiveRenderPass(pointCloud:)();
  v25 = (char *)v8 + v6[5];
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v25, v14, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v25, 0, 1, v11);
  swift_unknownObjectRetain();
  v26 = dispatch thunk of OCDataBuffer.asMTLBuffer(from:)();
  *v8 = v24;
  v27 = v6[6];
  v77 = v26;
  *(uint64_t *)((char *)v8 + v27) = v26;
  *(uint64_t *)((char *)v8 + v6[7]) = 0;
  v28 = specialized InFlightQueue.retain(_:)((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FullscreenCoveragePointsRenderer.ResourceEntry>.Entry, type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  v29 = *(void **)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_commandQueue];
  if (!v29)
    goto LABEL_45;
  v30 = objc_msgSend(v29, sel_commandBuffer);
  if (!v30)
  {
LABEL_36:
    swift_unknownObjectRelease();
    goto LABEL_37;
  }
  v31 = v30;
  v32 = objc_msgSend(v84, sel_currentRenderPassDescriptor);
  if (!v32)
  {
    swift_unknownObjectRelease();
    goto LABEL_36;
  }
  v73 = v28;
  v78 = v31;
  v76 = v24;
  v74 = v9;
  v33 = v32;
  v34 = objc_msgSend(v32, sel_colorAttachments);
  v35 = objc_msgSend(v34, sel_objectAtIndexedSubscript_, 0);

  if (!v35)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  objc_msgSend(v35, sel_setLoadAction_, 2);

  v79 = v33;
  v36 = objc_msgSend(v33, sel_colorAttachments);
  v37 = objc_msgSend(v36, sel_objectAtIndexedSubscript_, 0);

  if (!v37)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  objc_msgSend(v37, sel_setClearColor_, *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor + 8], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor + 16], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor + 24]);

  v38 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_baseRenderer;
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_baseRenderer])
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v39 = (double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize];
  v40 = *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize];
  if ((~*(_QWORD *)&v40 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v40 <= -9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v40 >= 9.22337204e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v41 = v39[1];
  if ((~*(_QWORD *)&v41 & 0x7FF0000000000000) == 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v41 <= -9.22337204e18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v75 = v23;
  if (v41 >= 9.22337204e18)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v42 = (uint64_t)v40;
  v43 = (uint64_t)v41;
  swift_retain();
  BaseRenderer.updateDepthAttachmentTexture(width:height:)(v42, v43);
  swift_release();
  v44 = objc_msgSend(v79, sel_depthAttachment);
  if (!v44)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v45 = *(_QWORD *)&v2[v38];
  v46 = v76;
  if (!v45)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (!*(_QWORD *)(v45 + 32))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v47 = v44;
  objc_msgSend(v44, sel_setTexture_);

  v48 = objc_msgSend(v78, sel_renderCommandEncoderWithDescriptor_, v79);
  if (!v48)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v49 = v48;
  aBlock = 0;
  v86 = 0;
  v87 = *(_OWORD *)v39;
  v88 = xmmword_2356BCBA0;
  objc_msgSend(v48, sel_setViewport_, &aBlock);
  objc_msgSend(v49, sel_setDepthStencilState_, *(_QWORD *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_depthStencilState]);
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_renderPrimitivePointsPipeline])
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  objc_msgSend(v49, sel_setRenderPipelineState_);
  objc_msgSend(v49, sel_setVertexBuffer_offset_atIndex_, v46, 0, 0);
  objc_msgSend(v49, sel_setVertexBuffer_offset_atIndex_, v77, 0, 1);
  objc_msgSend(v49, sel_drawPrimitives_vertexStart_vertexCount_, 0, 0, dispatch thunk of OCDataBuffer.count.getter());
  objc_msgSend(v49, sel_endEncoding);
  v50 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraFrustumRenderer;
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraFrustumRenderer])
  {
    swift_retain();
    CameraFrustumRenderer.render(into:desc:)(v78, v79);
    swift_release();
  }
  v51 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraPathRenderer;
  v52 = *(_QWORD *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_cameraPathRenderer];
  if (v52)
  {
    v53 = *(_QWORD *)&v2[v50];
    if (v53)
      LOBYTE(v53) = *(_BYTE *)(v53 + 24);
    v54 = *(_BYTE *)(v52 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_enabled);
    *(_BYTE *)(v52 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_enabled) = v53;
    swift_retain();
    CameraPathRenderer.enabled.didset(v54);
    swift_release();
    v55 = *(_QWORD *)&v2[v51];
    if (v55)
    {
      v56 = &v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_colorScheme];
      swift_beginAccess();
      v57 = *(void (**)(void))(v83 + 16);
      v77 = v51;
      v58 = v81;
      ((void (*)(char *, char *, uint64_t))v57)(v82, v56, v81);
      v59 = v55 + OBJC_IVAR____TtC19_RealityKit_SwiftUI18CameraPathRenderer_colorScheme;
      swift_beginAccess();
      v72[1] = v49;
      v60 = v80;
      v57();
      swift_beginAccess();
      v61 = v83;
      v72[0] = *(_QWORD *)(v83 + 24);
      swift_retain();
      v62 = v59;
      v63 = v82;
      ((void (*)(uint64_t, char *, uint64_t))v72[0])(v62, v82, v58);
      swift_endAccess();
      CameraPathRenderer.colorScheme.didset();
      v64 = *(void (**)(char *, uint64_t))(v61 + 8);
      v64(v63, v58);
      v64(v60, v58);
      swift_release();
      if (*(_QWORD *)&v2[v77])
      {
        swift_retain();
        specialized CameraPathRenderer.render(into:viewport:renderPassDescriptor:)(v78, v79);
        swift_release();
      }
    }
  }
  v65 = objc_msgSend(v84, sel_currentDrawable);
  if (v65)
  {
    v66 = v78;
    objc_msgSend(v78, sel_presentDrawable_, v65);
    swift_unknownObjectRelease();
    v67 = swift_allocObject();
    v68 = v73;
    *(_QWORD *)(v67 + 16) = v2;
    *(_QWORD *)(v67 + 24) = v68;
    *(_QWORD *)&v88 = partial apply for closure #1 in FullscreenCoveragePointsRenderer.drawCubes(in:);
    *((_QWORD *)&v88 + 1) = v67;
    aBlock = MEMORY[0x24BDAC760];
    v86 = 1107296256;
    *(_QWORD *)&v87 = thunk for @escaping @callee_guaranteed (@guaranteed MTLCommandBuffer) -> ();
    *((_QWORD *)&v87 + 1) = &block_descriptor_7_0;
    v69 = _Block_copy(&aBlock);
    v70 = v2;
    swift_release();
    objc_msgSend(v66, sel_addCompletedHandler_, v69);
    _Block_release(v69);
    objc_msgSend(v66, sel_commit);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    v9 = v74;
LABEL_37:
    swift_release();
    outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v8, type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
LABEL_38:
    v71 = *(os_unfair_lock_s **)&v2[v9];
    swift_retain();
    os_unfair_lock_unlock(v71 + 4);
    swift_release();
    return;
  }
LABEL_54:
  __break(1u);
}

void FullscreenCoveragePointsRenderer.drawCubes(in:)(void *a1)
{
  char *v1;
  char *v2;
  int *v3;
  uint64_t v4;
  uint64_t *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void (**v28)(_QWORD, _QWORD);
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  double *v35;
  double v36;
  double v37;
  Swift::Int v38;
  Swift::Int v39;
  id v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  char *v54;
  uint8_t *v55;
  void *v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char *v63;
  os_unfair_lock_s *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  char *v72;
  void (**v73)(_QWORD, _QWORD);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t aBlock;
  uint64_t v80;
  __int128 v81;
  __int128 v82;

  v2 = v1;
  v77 = a1;
  v3 = (int *)type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v78 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_inFlightLock;
  v6 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_inFlightLock];
  swift_retain();
  os_unfair_lock_lock(v6 + 4);
  swift_release();
  FullscreenCoveragePointsRenderer.updateInternal()();
  v7 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  MEMORY[0x24BDAC7A8](v11);
  v75 = v12;
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePoints];
  swift_beginAccess();
  v76 = v14;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v14, (uint64_t)v13, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v15(v13, 1, v7) == 1)
  {
    outlined destroy of URL?((uint64_t)v13, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    if (one-time initialization token for logger != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)logger);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_2355E9000, v17, v18, "No coverage points -- can't render preview!", v19, 2u);
      MEMORY[0x23B7D3428](v19, -1, -1);
    }

    goto LABEL_36;
  }
  v70 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v71 = v9;
  v70((char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v7);
  v20 = FullscreenCoveragePointsRenderer.createUniformsForPointPrimitiveRenderPass(pointCloud:)();
  v21 = (char *)v5 + v3[5];
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v21, v10, v7);
  v73 = (void (**)(_QWORD, _QWORD))v8;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  swift_unknownObjectRetain();
  v72 = v10;
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  v22 = dispatch thunk of OCDataBuffer.asMTLBuffer(from:)();
  swift_release();
  v74 = v20;
  *v5 = v20;
  *(uint64_t *)((char *)v5 + v3[6]) = v22;
  *(uint64_t *)((char *)v5 + v3[7]) = 0;
  v23 = specialized InFlightQueue.retain(_:)((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FullscreenCoveragePointsRenderer.ResourceEntry>.Entry, type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  v24 = *(void **)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_commandQueue];
  if (!v24)
  {
    __break(1u);
    goto LABEL_45;
  }
  v25 = (uint64_t)v5;
  v26 = v7;
  v27 = objc_msgSend(v24, sel_commandBuffer);
  if (!v27)
  {
LABEL_30:
    swift_unknownObjectRelease();
    v54 = v72;
    v28 = v73;
LABEL_35:
    outlined destroy of ObjectCaptureSession.Configuration(v25, type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry);
    ((void (**)(char *, uint64_t))v28)[1](v54, v26);
LABEL_36:
    v64 = *(os_unfair_lock_s **)&v2[v78];
    swift_retain();
    os_unfair_lock_unlock(v64 + 4);
    swift_release();
    return;
  }
  v28 = (void (**)(_QWORD, _QWORD))v27;
  v29 = objc_msgSend(v77, sel_currentRenderPassDescriptor);
  if (!v29)
  {
    swift_unknownObjectRelease();
    goto LABEL_30;
  }
  v30 = v29;
  v67 = v23;
  v31 = objc_msgSend(v29, sel_colorAttachments);
  v32 = objc_msgSend(v31, sel_objectAtIndexedSubscript_, 0);

  if (!v32)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v68 = v7;
  objc_msgSend(v32, sel_setLoadAction_, 2);

  v33 = objc_msgSend(v30, sel_colorAttachments);
  v34 = objc_msgSend(v33, sel_objectAtIndexedSubscript_, 0);

  if (!v34)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  objc_msgSend(v34, sel_setClearColor_, *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor + 8], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor + 16], *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_backgroundColor + 24]);

  v26 = OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_baseRenderer;
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_baseRenderer])
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v35 = (double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize];
  v36 = *(double *)&v2[OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize];
  if ((~*(_QWORD *)&v36 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v36 <= -9.22337204e18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v36 >= 9.22337204e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v37 = v35[1];
  if ((~*(_QWORD *)&v37 & 0x7FF0000000000000) == 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v37 <= -9.22337204e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v37 >= 9.22337204e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v38 = (uint64_t)v36;
  v39 = (uint64_t)v37;
  swift_retain();
  BaseRenderer.updateDepthAttachmentTexture(width:height:)(v38, v39);
  swift_release();
  v40 = objc_msgSend(v30, sel_depthAttachment);
  if (!v40)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v41 = *(_QWORD *)&v2[v26];
  if (!v41)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v69 = v30;
  v26 = v68;
  if (!*(_QWORD *)(v41 + 32))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v42 = v40;
  v66 = v25;
  objc_msgSend(v40, sel_setTexture_);

  v43 = objc_msgSend(v28, sel_renderCommandEncoderWithDescriptor_, v69);
  if (!v43)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v65 = v28;
  aBlock = 0;
  v80 = 0;
  v81 = *(_OWORD *)v35;
  v82 = xmmword_2356BCBA0;
  v30 = v43;
  v44 = objc_msgSend(v43, sel_setViewport_, &aBlock);
  v45 = MEMORY[0x24BDAC7A8](v44);
  v47 = (char *)&v65 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45);
  v49 = (char *)&v65 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v76, (uint64_t)v49, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
  if (v15(v49, 1, v26) == 1)
  {
    outlined destroy of URL?((uint64_t)v49, &demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    v28 = v73;
    v35 = (double *)v77;
    if (one-time initialization token for logger == -1)
    {
LABEL_25:
      v50 = type metadata accessor for Logger();
      __swift_project_value_buffer(v50, (uint64_t)logger);
      v51 = Logger.logObject.getter();
      v52 = static os_log_type_t.error.getter();
      v53 = os_log_type_enabled(v51, v52);
      v54 = v72;
      v25 = v66;
      if (v53)
      {
        v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v55 = 0;
        _os_log_impl(&dword_2355E9000, v51, v52, "coveragePoints is nil!  Not able to render voxels.", v55, 2u);
        MEMORY[0x23B7D3428](v55, -1, -1);
      }

      v56 = v30;
LABEL_33:
      objc_msgSend(v56, sel_endEncoding);
      v58 = objc_msgSend(v35, sel_currentDrawable);
      if (v58)
      {
        v59 = v65;
        objc_msgSend(v65, sel_presentDrawable_, v58);
        swift_unknownObjectRelease();
        v60 = swift_allocObject();
        v61 = v67;
        *(_QWORD *)(v60 + 16) = v2;
        *(_QWORD *)(v60 + 24) = v61;
        *(_QWORD *)&v82 = partial apply for closure #1 in FullscreenCoveragePointsRenderer.drawCubes(in:);
        *((_QWORD *)&v82 + 1) = v60;
        aBlock = MEMORY[0x24BDAC760];
        v80 = 1107296256;
        *(_QWORD *)&v81 = thunk for @escaping @callee_guaranteed (@guaranteed MTLCommandBuffer) -> ();
        *((_QWORD *)&v81 + 1) = &block_descriptor_7;
        v62 = _Block_copy(&aBlock);
        v63 = v2;
        swift_release();
        objc_msgSend(v59, sel_addCompletedHandler_, v62);
        _Block_release(v62);
        objc_msgSend(v59, sel_commit);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        goto LABEL_35;
      }
      goto LABEL_52;
    }
LABEL_43:
    swift_once();
    goto LABEL_25;
  }
  v70(v47, v49, v26);
  v57 = FullscreenCoveragePointsRenderer.voxelRenderer.getter();
  v28 = v73;
  v35 = (double *)v77;
  if (v57)
  {
    VoxelRenderer.render(encoder:uniforms:pointCloud:)(v30, v74);
    swift_release();
    ((void (**)(char *, uint64_t))v28)[1](v47, v26);
    v56 = v30;
    v54 = v72;
    v25 = v66;
    goto LABEL_33;
  }
LABEL_53:
  __break(1u);
}

void FullscreenCoveragePointsRenderer.initPointPrimitiveRenderPipeline()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18[2];

  v18[1] = *(id *)MEMORY[0x24BDAC8D0];
  if (one-time initialization token for mtlLibrary != -1)
    swift_once();
  v1 = (void *)static FullscreenCoveragePointsRenderer.mtlLibrary;
  if (!static FullscreenCoveragePointsRenderer.mtlLibrary)
  {
    lazy protocol witness table accessor for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  swift_unknownObjectRetain();
  v2 = (void *)MEMORY[0x23B7D2498](0xD00000000000002BLL, 0x80000002356C5E00);
  v3 = objc_msgSend(v1, sel_newFunctionWithName_, v2);

  v4 = (void *)MEMORY[0x23B7D2498](0xD00000000000002ELL, 0x80000002356C47C0);
  v5 = objc_msgSend(v1, sel_newFunctionWithName_, v4);

  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD6B8]), sel_init);
  objc_msgSend(v6, sel_setVertexFunction_, v3);
  objc_msgSend(v6, sel_setFragmentFunction_, v5);
  v7 = objc_msgSend(v6, sel_colorAttachments);
  v8 = objc_msgSend(v7, sel_objectAtIndexedSubscript_, 0);

  if (!v8)
  {
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v8, sel_setPixelFormat_, objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_view), sel_colorPixelFormat));

  v9 = objc_msgSend(v6, sel_colorAttachments);
  v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 0);

  if (!v10)
  {
LABEL_14:
    __break(1u);
    return;
  }
  objc_msgSend(v10, sel_setBlendingEnabled_, 0);

  objc_msgSend(v6, sel_setAlphaToCoverageEnabled_, 1);
  objc_msgSend(v6, sel_setDepthAttachmentPixelFormat_, 252);
  v11 = *(void **)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_device);
  v18[0] = 0;
  v12 = objc_msgSend(v11, sel_newRenderPipelineStateWithDescriptor_error_, v6, v18);
  v13 = v18[0];
  if (v12)
  {
    *(_QWORD *)(v0
              + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_renderPrimitivePointsPipeline) = v12;
    v14 = v13;
    swift_unknownObjectRelease();
    v15 = objc_msgSend(v11, sel_newCommandQueue);
    if (v15)
    {
      *(_QWORD *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_commandQueue) = v15;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      return;
    }
    lazy protocol witness table accessor for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    v16 = v18[0];
    v17 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error();
    swift_allocError();
    swift_willThrow();

  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

}

uint64_t FullscreenCoveragePointsRenderer.createUniformsForPointPrimitiveRenderPass(pointCloud:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  char *v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  float v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  simd_float4x4 *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __n128 v41;
  unsigned __int32 v42;
  int v43;
  int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t result;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  id v67;
  __int128 v68;
  _OWORD v69[6];
  _OWORD v70[4];
  BOOL v71;
  _OWORD v72[4];
  BOOL v73;
  simd_float4x4 v74;
  simd_float4x4 v75;

  v1 = v0;
  *(_QWORD *)&v68 = type metadata accessor for CoveragePointCloud();
  v2 = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8](v68);
  v66 = (uint64_t)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v62 - v8;
  v10 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_device), sel_newBufferWithLength_options_, 784, 0);
  if (!v10)
    goto LABEL_23;
  v11 = v10;
  v12 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v13 = v11;
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  v14 = dispatch thunk of OCDataBuffer.count.getter();
  swift_release();
  if ((v14 & 0x8000000000000000) != 0 || HIDWORD(v14))
    goto LABEL_24;
  *((_DWORD *)v12 + 135) = v14;
  v15 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize;
  v16 = *(double *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewportSize);
  v17 = v16;
  *((float *)v12 + 137) = v17 * 0.006;
  v12[552] = 0;
  if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v16 <= -1.0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v16 >= 4294967300.0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *((_DWORD *)v12 + 132) = v16;
  v18 = *(double *)(v15 + 8);
  if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v18 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v18 >= 4294967300.0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v67 = v13;
  *((_DWORD *)v12 + 133) = v18;
  ObjectCaptureSession.Frame.PointCloud.transform.getter();
  *(_OWORD *)v12 = v19;
  *((_OWORD *)v12 + 1) = v20;
  *((_OWORD *)v12 + 2) = v21;
  *((_OWORD *)v12 + 3) = v22;
  v23 = *(_OWORD *)(v1
                  + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorldUnscaled
                  + 16);
  v24 = *(_OWORD *)(v1
                  + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorldUnscaled
                  + 32);
  v25 = *(_OWORD *)(v1
                  + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorldUnscaled
                  + 48);
  *((_OWORD *)v12 + 8) = *(_OWORD *)(v1
                                   + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_objectToWorldUnscaled);
  *((_OWORD *)v12 + 9) = v23;
  *((_OWORD *)v12 + 10) = v24;
  *((_OWORD *)v12 + 11) = v25;
  v26 = (simd_float4x4 *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewToWorld);
  *((simd_float4x4 *)v12 + 3) = __invert_f4(*(simd_float4x4 *)(v1
                                                             + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_viewToWorld));
  v74 = __invert_f4(*v26);
  *((simd_float4x4 *)v12 + 4) = __invert_f4(v74);
  v75 = *(simd_float4x4 *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_projection);
  *((simd_float4x4 *)v12 + 5) = v75;
  *(simd_float4x4 *)(v12 + 464) = __invert_f4(v75);
  v27 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI32FullscreenCoveragePointsRenderer_coveragePointCloud;
  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v27, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48);
  v29 = v68;
  v30 = v28(v9, 1, v68);
  if (v30)
  {
    outlined destroy of URL?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    v31 = 0uLL;
    v32 = 0uLL;
    v33 = 0uLL;
    v34 = 0uLL;
  }
  else
  {
    v35 = v66;
    outlined init with copy of ObjectCaptureSession.Error((uint64_t)v9, v66, (uint64_t (*)(_QWORD))type metadata accessor for CoveragePointCloud);
    outlined destroy of URL?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    *(double *)&v36 = CoveragePointCloud.bboxWorld.getter();
    v64 = v37;
    v65 = v36;
    v62 = v39;
    v63 = v38;
    v40 = v35;
    v29 = v68;
    outlined destroy of ObjectCaptureSession.Configuration(v40, (uint64_t (*)(_QWORD))type metadata accessor for CoveragePointCloud);
    v34 = v62;
    v33 = v63;
    v32 = v64;
    v31 = v65;
  }
  v72[0] = v31;
  v72[1] = v32;
  v72[2] = v33;
  v72[3] = v34;
  v73 = v30 != 0;
  v41 = specialized static BoundingBoxHelpers.getBoundingSphere(boxWorld:)((uint64_t)v72);
  v41.n128_u32[2] = v42;
  *((__n128 *)v12 + 35) = v41;
  *((_DWORD *)v12 + 144) = v43;
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v27, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  v44 = v28(v7, 1, v29);
  if (v44)
  {
    outlined destroy of URL?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    v45 = 0uLL;
    v46 = 0uLL;
    v47 = 0uLL;
    v48 = 0uLL;
  }
  else
  {
    v49 = v66;
    outlined init with copy of ObjectCaptureSession.Error((uint64_t)v7, v66, (uint64_t (*)(_QWORD))type metadata accessor for CoveragePointCloud);
    outlined destroy of URL?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
    *(double *)&v50 = CoveragePointCloud.bboxWorld.getter();
    v68 = v50;
    v64 = v52;
    v65 = v51;
    v63 = v53;
    outlined destroy of ObjectCaptureSession.Configuration(v49, (uint64_t (*)(_QWORD))type metadata accessor for CoveragePointCloud);
    v48 = v63;
    v47 = v64;
    v46 = v65;
    v45 = v68;
  }
  v70[0] = v45;
  v70[1] = v46;
  v70[2] = v47;
  v70[3] = v48;
  v71 = v44 != 0;
  specialized static BoundingBoxHelpers.getFadingClipEllipsoid(boxWorld:startFadeRadius:endFadeRadius:shouldClipBottom:)((uint64_t)v70, 1, (uint64_t)v69, 1.5, 2.0);
  v54 = v69[3];
  *((_OWORD *)v12 + 39) = v69[2];
  *((_OWORD *)v12 + 40) = v54;
  v55 = v69[5];
  *((_OWORD *)v12 + 41) = v69[4];
  *((_OWORD *)v12 + 42) = v55;
  v56 = v69[1];
  *((_OWORD *)v12 + 37) = v69[0];
  *((_OWORD *)v12 + 38) = v56;
  v12[688] = 0;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of FullscreenCoveragePointsRenderer.createUniformsForPointPrimitiveRenderPass(pointCloud:));
  *((_QWORD *)v12 + 56) = v57;
  v58 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v59 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v60 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  *((_OWORD *)v12 + 24) = *MEMORY[0x24BDAEE00];
  *((_OWORD *)v12 + 25) = v58;
  *((_OWORD *)v12 + 26) = v59;
  *((_OWORD *)v12 + 27) = v60;
  *((_DWORD *)v12 + 114) = 1065353216;
  v12[689] = 0;
  return (uint64_t)v67;
}

void type metadata completion function for FullscreenCoveragePointsRenderer()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for ObjectCaptureSession.Frame.PointCloud?(319, (unint64_t *)&lazy cache variable for type metadata for CoveragePointCloud?, (void (*)(uint64_t))type metadata accessor for CoveragePointCloud);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObjectCaptureSession.Frame.PointCloud?(319, &lazy cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?, (void (*)(uint64_t))MEMORY[0x24BE1E850]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ColorScheme();
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for FullscreenCoveragePointsRenderer.ResourceEntry(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_unknownObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = a3[7];
    *(uint64_t *)((char *)v7 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v7 + v15) = *(uint64_t *)((char *)a2 + v15);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
  }
  return v7;
}

uint64_t destroy for FullscreenCoveragePointsRenderer.ResourceEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_unknownObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

_QWORD *initializeWithCopy for FullscreenCoveragePointsRenderer.ResourceEntry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FullscreenCoveragePointsRenderer.ResourceEntry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for FullscreenCoveragePointsRenderer.ResourceEntry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  return a1;
}

_QWORD *assignWithTake for FullscreenCoveragePointsRenderer.ResourceEntry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  swift_unknownObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ObjectCaptureSession.Frame.PointCloud();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_unknownObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FullscreenCoveragePointsRenderer.ResourceEntry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23567E870(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for FullscreenCoveragePointsRenderer.ResourceEntry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23567E908(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FullscreenCoveragePointsRenderer.ResourceEntry(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for FullscreenCoveragePointsRenderer.ResourceEntry);
}

void type metadata completion function for FullscreenCoveragePointsRenderer.ResourceEntry()
{
  unint64_t v0;

  type metadata accessor for ObjectCaptureSession.Frame.PointCloud?(319, &lazy cache variable for type metadata for ObjectCaptureSession.Frame.PointCloud?, (void (*)(uint64_t))MEMORY[0x24BE1E850]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t specialized InFlightQueue.retain(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  os_unfair_lock_s *v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v9 = (os_unfair_lock_s *)(v3[2] + 16);
  os_unfair_lock_lock(v9);
  v10 = v3[3];
  if (__OFADD__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    v3[3] = v10 + 1;
    v4 = v3 + 4;
    swift_beginAccess();
    v5 = (_QWORD *)v3[4];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v3[4] = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_3;
  }
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  *v4 = v5;
LABEL_3:
  v13 = v5[2];
  v12 = v5[3];
  if (v13 >= v12 >> 1)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v5);
    *v4 = v5;
  }
  v5[2] = v13 + 1;
  v14 = &v5[4 * v13];
  v14[4] = v10;
  v14[5] = a1;
  v14[6] = a2;
  v14[7] = a3;
  swift_endAccess();
  os_unfair_lock_unlock(v9);
  return v10;
}

uint64_t specialized InFlightQueue.retain(_:)(uint64_t a1)
{
  return specialized InFlightQueue.retain(_:)(a1, &demangling cache variable for type metadata for InFlightQueue<CoveragePointRenderer.ResourceEntry>.Entry, type metadata accessor for CoveragePointRenderer.ResourceEntry, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized InFlightQueue.retain(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(BOOL, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (os_unfair_lock_s *)(v4[2] + 16);
  os_unfair_lock_lock(v13);
  v14 = v4[3];
  if (__OFADD__(v14, 1))
  {
    __break(1u);
  }
  else
  {
    v4[3] = v14 + 1;
    outlined init with copy of ObjectCaptureSession.Error(a1, (uint64_t)v12 + *(int *)(v9 + 28), a3);
    *v12 = v14;
    a3 = (uint64_t (*)(_QWORD))(v4 + 4);
    swift_beginAccess();
    a1 = v4[4];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v4[4] = a1;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_3;
  }
  a1 = a4(0, *(_QWORD *)(a1 + 16) + 1, 1, a1);
  *(_QWORD *)a3 = a1;
LABEL_3:
  v17 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  if (v17 >= v16 >> 1)
  {
    a1 = a4(v16 > 1, v17 + 1, 1, a1);
    *(_QWORD *)a3 = a1;
  }
  *(_QWORD *)(a1 + 16) = v17 + 1;
  outlined init with take of Animation?((uint64_t)v12, a1+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v17, a2);
  swift_endAccess();
  os_unfair_lock_unlock(v13);
  return v14;
}

void specialized InFlightQueue.release(id:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  v4 = *(_QWORD **)(v1 + 32);
  v5 = v4[2];
  if (!v5)
    goto LABEL_8;
  if (v4[4] == a1)
  {
    v6 = 0;
  }
  else
  {
    if (v5 == 1)
    {
      v6 = 1;
      goto LABEL_30;
    }
    v21 = v4 + 8;
    v6 = 1;
    while (1)
    {
      v22 = *v21;
      v21 += 4;
      if (v22 == a1)
        break;
      v23 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_34;
      ++v6;
      if (v23 == v5)
      {
        v6 = v4[2];
        goto LABEL_30;
      }
    }
  }
  v7 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    v24 = v3;
    if (v7 == v5)
    {
LABEL_6:
      v3 = v24;
      if ((uint64_t)v5 >= v6)
      {
LABEL_30:
        specialized Array.replaceSubrange<A>(_:with:)(v6, v5);
        swift_endAccess();
        os_unfair_lock_unlock(v3);
        return;
      }
      __break(1u);
LABEL_8:
      v6 = 0;
      goto LABEL_30;
    }
    v8 = 32 * v6 + 88;
    v9 = v6 + 1;
    v25 = v6 + 1;
    v26 = a1;
    v27 = v1 + 32;
    while ((v7 & 0x8000000000000000) == 0)
    {
      if (v9 >= v5)
        goto LABEL_32;
      v12 = *(_QWORD *)((char *)v4 + v8 - 24);
      if (v12 != a1)
      {
        if (v9 != v6)
        {
          if (v6 >= v5)
            goto LABEL_35;
          v13 = &v4[4 * v6 + 4];
          v28 = *v13;
          v15 = v13[2];
          v14 = v13[3];
          v16 = *(_QWORD *)((char *)v4 + v8 - 16);
          v17 = *(_QWORD *)((char *)v4 + v8 - 8);
          v18 = *(_QWORD *)((char *)v4 + v8);
          v29 = v13[1];
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v27 = v4;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
            *(_QWORD *)v27 = v4;
          }
          v20 = &v4[4 * v6];
          v20[4] = v12;
          v20[5] = v16;
          v20[6] = v17;
          v20[7] = v18;
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if (v9 >= *(_QWORD *)(*(_QWORD *)v27 + 16))
            goto LABEL_36;
          v10 = (_QWORD *)(*(_QWORD *)v27 + v8);
          *(v10 - 3) = v28;
          *(v10 - 2) = v29;
          *(v10 - 1) = v15;
          *v10 = v14;
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v4 = *(_QWORD **)v27;
          v7 = v25;
          a1 = v26;
        }
        if (__OFADD__(v6++, 1))
          goto LABEL_33;
        v5 = v4[2];
      }
      ++v9;
      v8 += 32;
      if (v9 == v5)
        goto LABEL_6;
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
}

{
  specialized InFlightQueue.release(id:)(a1, &demangling cache variable for type metadata for InFlightQueue<CoveragePointRenderer.ResourceEntry>.Entry, (void (*)(_QWORD, _QWORD))specialized Array.replaceSubrange<A>(_:with:), (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

void specialized InFlightQueue.release(id:)(uint64_t a1, uint64_t *a2, void (*a3)(_QWORD, _QWORD), uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  os_unfair_lock_s *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t (*v35)(uint64_t);
  os_unfair_lock_s *v36;
  void (*v37)(_QWORD, _QWORD);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v35 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v40 = (uint64_t)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v41 = (uint64_t)&v35 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v35 - v14);
  v16 = (os_unfair_lock_s *)(*(_QWORD *)(v4 + 16) + 16);
  os_unfair_lock_lock(v16);
  v17 = (uint64_t *)(v4 + 32);
  swift_beginAccess();
  v18 = *(_QWORD *)(v4 + 32);
  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    v36 = v16;
    v37 = a3;
    v20 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v21 = *(_QWORD *)(v9 + 72);
    swift_bridgeObjectRetain();
    v22 = 0;
    v39 = v20;
    v23 = v20;
    while (1)
    {
      outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v18 + v23, (uint64_t)v15, a2);
      v24 = *v15;
      outlined destroy of URL?((uint64_t)v15, a2);
      if (v24 == a1)
        break;
      ++v22;
      v23 += v21;
      if (v19 == v22)
      {
        swift_bridgeObjectRelease();
        v25 = *(_QWORD *)(*v17 + 16);
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    v25 = v22 + 1;
    if (__OFADD__(v22, 1))
      goto LABEL_37;
    v26 = *v17;
    v27 = *(_QWORD *)(*v17 + 16);
    if (v25 != v27)
    {
      v28 = v21 + v23;
      v29 = v22 + 1;
      v38 = a1;
      while (v29 < v27)
      {
        outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v26 + v28, (uint64_t)v15, a2);
        v30 = *v15;
        outlined destroy of URL?((uint64_t)v15, a2);
        if (v30 != a1)
        {
          if (v29 != v22)
          {
            if ((v22 & 0x8000000000000000) != 0)
              goto LABEL_31;
            v31 = *v17;
            v32 = *(_QWORD *)(*v17 + 16);
            if (v22 >= v32)
              goto LABEL_32;
            outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v31 + v39 + v22 * v21, v41, a2);
            if (v29 >= v32)
              goto LABEL_33;
            outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v31 + v28, v40, a2);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *v17 = v31;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v31 = v35(v31);
              *v17 = v31;
            }
            if (v22 >= *(_QWORD *)(v31 + 16))
              goto LABEL_34;
            outlined assign with take of Cancellable?(v40, v31 + v39 + v22 * v21, a2);
            if (v29 >= *(_QWORD *)(*v17 + 16))
              goto LABEL_35;
            outlined assign with take of Cancellable?(v41, *v17 + v28, a2);
            a1 = v38;
          }
          if (__OFADD__(v22++, 1))
            goto LABEL_30;
        }
        v25 = v29 + 1;
        if (__OFADD__(v29, 1))
          goto LABEL_29;
        v26 = *v17;
        v27 = *(_QWORD *)(*v17 + 16);
        ++v29;
        v28 += v21;
        if (v25 == v27)
          goto LABEL_9;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
LABEL_9:
    v19 = v22;
LABEL_10:
    v16 = v36;
    a3 = v37;
    if (v25 >= v19)
      goto LABEL_11;
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  else
  {
    v25 = 0;
LABEL_11:
    a3(v19, v25);
    swift_endAccess();
    os_unfair_lock_unlock(v16);
  }
}

id specialized DragGestureRecognizer.init(draggable:)(uint64_t a1, char *a2)
{
  char *v3;
  id v4;
  id v5;
  objc_super v7;

  v3 = &a2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21DragGestureRecognizer_startPoint];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 1;
  *(_QWORD *)&a2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21DragGestureRecognizer_draggable + 8] = 0;
  *(_QWORD *)(swift_unknownObjectWeakInit() + 8) = &protocol witness table for TurnTableCameraControl;
  swift_unknownObjectWeakAssign();
  v7.receiver = a2;
  v7.super_class = (Class)type metadata accessor for DragGestureRecognizer();
  v4 = objc_msgSendSuper2(&v7, sel_initWithTarget_action_, 0, 0);
  objc_msgSend(v4, sel_addTarget_action_, v4, sel_onPanInternal_);
  objc_msgSend(v4, sel_setMaximumNumberOfTouches_, 1);
  v5 = v4;
  objc_msgSend(v5, sel_setDelegate_, v5);

  swift_release();
  return v5;
}

id specialized DragGestureRecognizer.init(draggable:)(void *a1, char *a2)
{
  char *v4;
  id v5;
  id v6;
  objc_super v8;

  v4 = &a2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21DragGestureRecognizer_startPoint];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  *(_QWORD *)&a2[OBJC_IVAR____TtC19_RealityKit_SwiftUI21DragGestureRecognizer_draggable + 8] = 0;
  *(_QWORD *)(swift_unknownObjectWeakInit() + 8) = &protocol witness table for InteractiveCameraTransformManager;
  swift_unknownObjectWeakAssign();
  v8.receiver = a2;
  v8.super_class = (Class)type metadata accessor for DragGestureRecognizer();
  v5 = objc_msgSendSuper2(&v8, sel_initWithTarget_action_, 0, 0);
  objc_msgSend(v5, sel_addTarget_action_, v5, sel_onPanInternal_);
  objc_msgSend(v5, sel_setMaximumNumberOfTouches_, 1);
  v6 = v5;
  objc_msgSend(v6, sel_setDelegate_, v6);

  return v6;
}

unint64_t lazy protocol witness table accessor for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error;
  if (!lazy protocol witness table cache variable for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for FullscreenCoveragePointsRenderer.Error, &type metadata for FullscreenCoveragePointsRenderer.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error;
  if (!lazy protocol witness table cache variable for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for FullscreenCoveragePointsRenderer.Error, &type metadata for FullscreenCoveragePointsRenderer.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FullscreenCoveragePointsRenderer.Error and conformance FullscreenCoveragePointsRenderer.Error);
  }
  return result;
}

uint64_t sub_23567F500()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

void partial apply for closure #1 in FullscreenCoveragePointsRenderer.drawCubes(in:)()
{
  uint64_t v0;

  specialized InFlightQueue.release(id:)(*(_QWORD *)(v0 + 24), (uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FullscreenCoveragePointsRenderer.ResourceEntry>.Entry, (void (*)(_QWORD, _QWORD))specialized Array.replaceSubrange<A>(_:with:), (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t outlined assign with copy of CoveragePointCloud?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CoveragePointCloud?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for FullscreenCoveragePointsRenderer.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23567F648 + 4 * byte_2356C0820[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23567F668 + 4 * byte_2356C0825[v4]))();
}

_BYTE *sub_23567F648(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23567F668(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23567F670(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23567F678(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23567F680(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23567F688(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FullscreenCoveragePointsRenderer.Error()
{
  return &type metadata for FullscreenCoveragePointsRenderer.Error;
}

uint64_t type metadata completion function for InFlightQueue()
{
  return swift_initClassMetadata2();
}

uint64_t InFlightQueue.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InFlightQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InFlightQueue);
}

uint64_t type metadata completion function for InFlightQueue.Entry()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InFlightQueue.Entry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 8) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t destroy for InFlightQueue.Entry(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for InFlightQueue.Entry(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithCopy for InFlightQueue.Entry(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithTake for InFlightQueue.Entry(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for InFlightQueue.Entry(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 8) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 8) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23567FA80 + 4 * byte_2356C09F0[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for InFlightQueue.Entry(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for InFlightQueue.Entry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InFlightQueue.Entry);
}

uint64_t type metadata completion function for KeyframeAnimation()
{
  return swift_initClassMetadata2();
}

uint64_t KeyframeAnimation.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeyframeAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeAnimation);
}

uint64_t type metadata completion function for KeyframeAnimation.Keyframe()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *assignWithCopy for KeyframeAnimation.Keyframe(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithTake for KeyframeAnimation.Keyframe(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeAnimation.Keyframe(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 8) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 8) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23567FF94 + 4 * byte_2356C0A80[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for KeyframeAnimation.Keyframe(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for KeyframeAnimation.Keyframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeAnimation.Keyframe);
}

uint64_t storeEnumTagSinglePayload for KeyframeAnimation.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_235680218 + 4 * byte_2356C0A93[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23568024C + 4 * byte_2356C0A8E[v4]))();
}

uint64_t sub_23568024C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235680254(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23568025CLL);
  return result;
}

uint64_t sub_235680268(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235680270);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_235680274(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23568027C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for KeyframeAnimation.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeAnimation.Error);
}

void base witness table accessor for Equatable in KeyframeAnimation<A>.Error()
{
  JUMPOUT(0x23B7D3350);
}

uint64_t type metadata accessor for ManualTimer()
{
  return objc_opt_self();
}

uint64_t *initializeBufferWithCopyOfBuffer for FreeformFullView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for FreeformFullView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v5 = type metadata accessor for ColorScheme();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for FreeformFullView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (_QWORD *)((char *)a2 + v5);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = type metadata accessor for ColorScheme();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for FreeformFullView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    outlined destroy of Environment<ColorScheme>.Content((uint64_t)a1 + v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of Environment<ColorScheme>.Content(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for FreeformFullView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithTake for FreeformFullView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of Environment<ColorScheme>.Content((uint64_t)a1 + v7);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FreeformFullView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235680750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FreeformFullView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2356807DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FreeformFullView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for FreeformFullView;
  if (!type metadata singleton initialization cache for FreeformFullView)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for FreeformFullView()
{
  unint64_t v0;

  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in FreeformFullView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t FreeformFullView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[12];
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v3 = type metadata accessor for FreeformFullView();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  result = swift_release();
  v8 = v19;
  if (v19)
  {
    static Color.clear.getter();
    v17 = Color.opacity(_:)();
    swift_release();
    v16 = static Edge.Set.all.getter();
    v9 = static SafeAreaRegions.all.getter();
    v10 = static Edge.Set.all.getter();
    outlined init with copy of FreeformFullView(v1, (uint64_t)&v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v11 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v12 = swift_allocObject();
    outlined init with take of FreeformFullView((uint64_t)v6, v12 + v11);
    outlined init with copy of FreeformFullView(v1, (uint64_t)v6);
    v13 = swift_allocObject();
    result = outlined init with take of FreeformFullView((uint64_t)v6, v13 + v11);
    v18 = 0;
    v14 = v17;
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v14;
    *(_BYTE *)(a1 + 16) = v16;
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = 0;
    *(_WORD *)(a1 + 48) = 257;
    *(_QWORD *)(a1 + 56) = 0x3FF0000000000000;
    *(_BYTE *)(a1 + 64) = 0;
    *(_WORD *)(a1 + 65) = 1;
    *(_BYTE *)(a1 + 67) = 0;
    *(_QWORD *)(a1 + 72) = partial apply for closure #1 in FreeformFullView.body.getter;
    *(_QWORD *)(a1 + 80) = v12;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_QWORD *)(a1 + 120) = partial apply for closure #2 in FreeformFullView.body.getter;
    *(_QWORD *)(a1 + 128) = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in FreeformFullView.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v0 = type metadata accessor for ColorScheme();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  v4 = v8;
  if (v8)
  {
    v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_isFullViewEnabled] = 1;

  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  v5 = v8;
  if (v8)
  {
    type metadata accessor for FreeformFullView();
    specialized Environment.wrappedValue.getter((uint64_t)v3);
    v6 = &v5[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_colorScheme];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v1 + 24))(v6, v3, v0);
    swift_endAccess();
    FreeformCloudRenderer.colorScheme.didset();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);

  }
}

void closure #2 in FreeformFullView.body.getter()
{
  _BYTE *v0;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v0)
  {
    v0[OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_isFullViewEnabled] = 0;

  }
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance FreeformFullViewWrapper()
{
  _QWORD *v0;
  id result;

  result = *(id *)(*v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI21FreeformCloudRenderer_view);
  if (result)
    return result;
  __break(1u);
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FreeformFullViewWrapper()
{
  lazy protocol witness table accessor for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper();
  return static UIViewRepresentable._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FreeformFullViewWrapper()
{
  lazy protocol witness table accessor for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper();
  return static UIViewRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance FreeformFullViewWrapper()
{
  lazy protocol witness table accessor for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper();
  UIViewRepresentable.body.getter();
  __break(1u);
}

uint64_t key path getter for DataModel.freeformCloudRenderer : DataModel@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for DataModel.freeformCloudRenderer : DataModel(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  v2 = v1;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t outlined init with copy of FreeformFullView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FreeformFullView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of FreeformFullView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FreeformFullView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in FreeformFullView.body.getter()
{
  return partial apply for closure #1 in FreeformFullView.body.getter((uint64_t (*)(uint64_t))closure #1 in FreeformFullView.body.getter);
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for FreeformFullView();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  v3 = v0 + ((v2 + 16) & ~v2) + *(int *)(v1 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in FreeformFullView.body.getter()
{
  return partial apply for closure #1 in FreeformFullView.body.getter((uint64_t (*)(uint64_t))closure #2 in FreeformFullView.body.getter);
}

uint64_t partial apply for closure #1 in FreeformFullView.body.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FreeformFullView() - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

void *type metadata accessor for FreeformFullViewWrapper()
{
  return &unk_2506BCDA8;
}

uint64_t sub_2356810C0()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier>, _AppearanceActionModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, MEMORY[0x24BDF0910]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>, _AppearanceActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>, MEMORY[0x24BDF0910]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x24BDEEC40]);
    v2[1] = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>, &demangling cache variable for type metadata for _ClipEffect<Rectangle>, MEMORY[0x24BDEB950]);
    result = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, _AspectRatioLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, _AspectRatioLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x24BDEEC40]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ArrowView, _RotationEffect>, _ScaleEffect>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>, MEMORY[0x24BDF1050]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>>);
    v2[0] = lazy protocol witness table accessor for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper();
    v2[1] = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &demangling cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x24BDF06D0]);
    result = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<FreeformFullViewWrapper, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper;
  if (!lazy protocol witness table cache variable for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for FreeformFullViewWrapper, &unk_2506BCDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper;
  if (!lazy protocol witness table cache variable for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for FreeformFullViewWrapper, &unk_2506BCDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FreeformFullViewWrapper and conformance FreeformFullViewWrapper);
  }
  return result;
}

uint64_t specialized static MathHelpers.computeSampleMeanAndCovarianceMatrix(data:)@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  float v6;
  float *v7;
  uint64_t v8;
  float32x2_t v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float *v18;
  __int32 v19;
  __int32 v20;
  float v21;
  float32x2_t v22;
  int32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  __int32 v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float32x2_t v30;
  __int128 v31;

  v2 = *(_QWORD *)(result + 16);
  if ((unint64_t)v2 < 2)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static MathHelpers.computeSampleMeanAndCovarianceMatrix(data:));
    v6 = 1.0 / (float)v2;
    v7 = (float *)(v3 + 40);
    v8 = v2;
    do
    {
      v9 = vadd_f32(*(float32x2_t *)&v5, vmul_n_f32(*(float32x2_t *)(v7 - 2), v6));
      v10 = *((float *)&v5 + 2) + (float)(v6 * *v7);
      *(float32x2_t *)&v5 = v9;
      *((float *)&v5 + 2) = v10;
      HIDWORD(v5) = 0;
      v7 += 4;
      --v8;
    }
    while (v8);
    v31 = v5;
    v29 = v10;
    v30 = v9;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static MathHelpers.computeSampleMeanAndCovarianceMatrix(data:));
    v28 = v11;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of static MathHelpers.computeSampleMeanAndCovarianceMatrix(data:));
    v27 = v12;
    result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #3 of static MathHelpers.computeSampleMeanAndCovarianceMatrix(data:));
    v16 = v27;
    v15 = v28;
    v17 = 1.0 / (float)(v2 - 1);
    v18 = (float *)(v3 + 40);
    do
    {
      v19 = v15.i32[3];
      v20 = v16.i32[3];
      v21 = *v18 - v29;
      v22 = vsub_f32(*(float32x2_t *)(v18 - 2), v30);
      v23 = (int32x2_t)vmul_f32(v22, v22);
      *(float32x2_t *)v14.f32 = vmul_n_f32(v22, v21);
      *(float32x2_t *)v24.f32 = vmul_lane_f32(v22, v22, 1);
      *(int32x2_t *)v25.f32 = vzip1_s32(v23, *(int32x2_t *)v24.f32);
      v25.i64[1] = v14.i64[0];
      v26 = v13.i32[3];
      *(int32x2_t *)&v24.u32[2] = vdup_lane_s32(*(int32x2_t *)v14.f32, 1);
      v14.f32[2] = v21 * v21;
      v15 = vaddq_f32(v15, vmulq_n_f32(v25, v17));
      v16 = vaddq_f32(v16, vmulq_n_f32(v24, v17));
      v13 = vaddq_f32(v13, vmulq_n_f32(v14, v17));
      v15.i32[3] = v19;
      v16.i32[3] = v20;
      v18 += 4;
      v13.i32[3] = v26;
      --v2;
    }
    while (v2);
    *a2 = v31;
    a2[1] = v15;
    a2[2] = v16;
    a2[3] = v13;
  }
  return result;
}

void specialized static MathHelpers.computeEigenvectorsOfSymmetric2x2Matrix(_:)(double a1, double a2)
{
  float v2;
  float v3;
  float v4;
  uint64_t inited;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;

  if (vabds_f32(*((float *)&a1 + 1), *(float *)&a2) >= 0.001)
  {
    __break(1u);
  }
  else
  {
    *(float *)&a2 = sqrtf((float)((float)(*(float *)&a1 + *((float *)&a2 + 1)) * (float)(*(float *)&a1 + *((float *)&a2 + 1)))+ (float)((float)(vmuls_lane_f32(*(float *)&a1, *(float32x2_t *)&a2, 1)- (float)(*((float *)&a1 + 1) * *(float *)&a2))* -4.0));
    v2 = (float)((float)(*(float *)&a1 + *((float *)&a2 + 1)) + *(float *)&a2) * 0.5;
    v3 = (float)((float)(*(float *)&a1 + *((float *)&a2 + 1)) - *(float *)&a2) * 0.5;
    v4 = (float)(v2 - *(float *)&a1) / *((float *)&a1 + 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2356BC690;
    *(_DWORD *)(inited + 32) = 1065353216;
    *(float *)(inited + 36) = v4;
    specialized SIMD.init<A>(_:)(inited);
    v7 = v6;
    swift_setDeallocating();
    v8 = vmul_f32(v7, v7);
    v8.i32[0] = vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)).u32[0];
    v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
    v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
    v13 = vmul_n_f32(v7, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]);
    v11 = swift_initStackObject();
    *(_OWORD *)(v11 + 16) = xmmword_2356BC690;
    *(_DWORD *)(v11 + 32) = v13.i32[1];
    *(float *)(v11 + 36) = -v13.f32[0];
    specialized SIMD.init<A>(_:)(v11);
    swift_setDeallocating();
    v12 = swift_initStackObject();
    *(_OWORD *)(v12 + 16) = xmmword_2356BC690;
    *(float *)(v12 + 32) = v2;
    *(float *)(v12 + 36) = v3;
    specialized SIMD.init<A>(_:)(v12);
    swift_setDeallocating();
  }
}

float32x4_t specialized static MathHelpers.minAndMaxOver(points:)(float32x4_t *a1)
{
  uint64_t inited;
  float32x4_t v3;
  uint64_t v4;
  float32x4_t v5;
  unsigned __int32 v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t result;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2356BAC90;
  *(_QWORD *)(inited + 32) = 0x7F0000007FLL;
  *(_DWORD *)(inited + 40) = -8388608;
  specialized SIMD.init<A>(_:)(inited);
  v14 = v3;
  swift_setDeallocating();
  v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_2356BAC90;
  *(int32x2_t *)(v4 + 32) = vdup_n_s32(0x7F800000u);
  *(_DWORD *)(v4 + 40) = 2139095040;
  specialized SIMD.init<A>(_:)(v4);
  v13 = v5;
  swift_setDeallocating();
  v7 = a1[1].i64[0];
  if (v7)
  {
    v8 = a1 + 2;
    result = v13;
    v10 = v14;
    do
    {
      v11 = *v8++;
      v12 = v11;
      v12.i32[3] = 0;
      v10.i32[3] = 0;
      v10 = vmaxnmq_f32(v12, v10);
      result.i32[3] = 0;
      result = vminnmq_f32(v12, result);
      result.i32[3] = v6;
      --v7;
    }
    while (v7);
  }
  else
  {
    return v13;
  }
  return result;
}

float specialized static MathHelpers.computeCameraDistanceToContainSphere(boxWorld:cameraFovRadians:nearPlaneDistance:boxPadding:)(float32x4_t a1, double a2, float a3, float a4)
{
  float32x4_t v5;
  float v6;
  float v7;

  v5 = vmulq_f32(a1, a1);
  v6 = sqrtf(v5.f32[2] + vaddv_f32(*(float32x2_t *)v5.f32));
  v7 = *((float *)&a2 + 1);
  if (*((float *)&a2 + 1) >= *(float *)&a2)
    v7 = *(float *)&a2;
  return (float)((float)((float)(v6 * 0.5) * a4) / tanf(v7 * 0.5)) + a3;
}

float specialized static MathHelpers.computePerspectiveMatrix(fovRadians:aspectRatio:nearZ:farZ:)(float a1, float a2)
{
  return (float)(1.0 / tanf(a1 * 0.5)) / a2;
}

void specialized static MathHelpers.angleBetween(_:_:)(float32x4_t a1, float32x4_t a2)
{
  int32x4_t v2;
  int32x4_t v3;
  float v4;
  _QWORD *v6;
  unsigned __int32 v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x4_t v10;
  unsigned __int32 v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float v15;

  v2 = (int32x4_t)vmulq_f32(a1, a1);
  v3 = (int32x4_t)vmulq_f32(a2, a2);
  v4 = sqrtf(*(float *)&v3.i32[2] + vaddv_f32(*(float32x2_t *)v3.i8));
  if (sqrtf(*(float *)&v2.i32[2] + vaddv_f32(*(float32x2_t *)v2.i8)) <= 0.0001 || v4 <= 0.0001)
  {
    lazy protocol witness table accessor for type MathHelpers.Error and conformance MathHelpers.Error();
    swift_allocError();
    *v6 = 0;
    v6[1] = 0;
    swift_willThrow();
  }
  else
  {
    v7 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
    v8 = vrsqrte_f32((float32x2_t)v7);
    v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7, vmul_f32(v8, v8)));
    v10 = vmulq_n_f32(a1, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7, vmul_f32(v9, v9))).f32[0]);
    v11 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
    v12 = vrsqrte_f32((float32x2_t)v11);
    v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11, vmul_f32(v12, v12)));
    v14 = vmulq_f32(v10, vmulq_n_f32(a2, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11, vmul_f32(v13, v13))).f32[0]));
    v15 = v14.f32[2] + vaddv_f32(*(float32x2_t *)v14.f32);
    if (v15 <= -1.0)
      v15 = -1.0;
    if (v15 > 1.0)
      v15 = 1.0;
    acosf(v15);
  }
}

void specialized static MathHelpers.computeCameraDistanceToContainProjectedBox(boxWorld:boxToCameraDirWorld:cameraUpWorld:cameraFovRadians:nearPlaneDistance:boxPadding:)(float32x4_t a1, float32x4_t a2, double a3, float32x2_t a4, double a5, double a6)
{
  float32x4_t v6;
  float32x4_t v7;
  simd_float4x4 v13;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static MathHelpers.computeCameraDistanceToContainProjectedBox(boxWorld:boxToCameraDirWorld:cameraUpWorld:cameraFovRadians:nearPlaneDistance:boxPadding:));
  Transform.init(matrix:)();
  v6 = vabsq_f32(a1);
  *(double *)v13.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&a3, vmul_n_f32(a4, fmaxf(fmaxf(v6.f32[0], v6.f32[2]), v6.f32[1]) * 5.0))), v7);
  __invert_f4(v13);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static MathHelpers.computeCameraDistanceToContainProjectedBox(boxWorld:boxToCameraDirWorld:cameraUpWorld:cameraFovRadians:nearPlaneDistance:boxPadding:));
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of static MathHelpers.computeCameraDistanceToContainProjectedBox(boxWorld:boxToCameraDirWorld:cameraUpWorld:cameraFovRadians:nearPlaneDistance:boxPadding:));
  BoundingBox.init(min:max:)();
  specialized simd_float4x4.init(translation:rotation:scale:)(a3, a2);
  BoundingBox.transformed(by:)();
  BoundingBox.extents.getter();
  BoundingBox.extents.getter();
  BoundingBox.extents.getter();
  tanf(0.5 * *(float *)&a6);
  tanf(vmuls_lane_f32(0.5, *(float32x2_t *)&a6, 1));
}

void specialized static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:)(char a1, float32x4_t a2, float32x4_t a3, double a4, float a5, __n128 a6, float32x4_t a7, float a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x4_t a17, float32x4_t a18)
{
  float32x4_t v20;
  uint64_t inited;
  float v22;
  float v23;
  double v24;
  float v25;
  float32x4_t v26;
  float v27;
  float v28;
  float v29;
  double v30;
  float v31;
  float32x4_t v32;
  uint64_t v33;
  double v34;
  float v37;
  double v39;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  double v46;

  v37 = *((float *)&a9 + 1);
  Transform.init()();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:));
  v42 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2356BC690;
  v22 = atanf(1.0 / a8);
  *(float *)(inited + 32) = v22 + v22;
  v23 = atanf(1.0 / v37);
  *(float *)(inited + 36) = v23 + v23;
  specialized SIMD.init<A>(_:)(inited);
  v39 = v24;
  swift_setDeallocating();
  LODWORD(v25) = vdivq_f32(a18, a17).i32[2];
  if ((a1 & 1) != 0)
  {
    v26 = vmulq_f32(a2, a2);
    v27 = sqrtf(v26.f32[2] + vaddv_f32(*(float32x2_t *)v26.f32));
    v28 = *((float *)&v39 + 1);
    if (*((float *)&v39 + 1) >= *(float *)&v39)
      v28 = *(float *)&v39;
    v41 = v25 + (float)((float)((float)(v27 * 0.5) * a5) / tanf(v28 * 0.5));
    v29 = a7.f32[2];
  }
  else
  {
    v29 = a7.f32[2];
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:));
    specialized static MathHelpers.computeCameraDistanceToContainProjectedBox(boxWorld:boxToCameraDirWorld:cameraUpWorld:cameraFovRadians:nearPlaneDistance:boxPadding:)(a2, a3, a4, vsub_f32(0, *(float32x2_t *)a7.f32), v30, v39);
    v41 = v31;
  }
  *(double *)v32.i64 = simd_quaternion(v42, a7);
  v43 = v32;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:));
  v33 = swift_initStackObject();
  *(_OWORD *)(v33 + 16) = xmmword_2356BAC90;
  *(float32x2_t *)(v33 + 32) = vsub_f32((float32x2_t)a6.n128_u64[0], vmul_n_f32(*(float32x2_t *)a7.f32, v41));
  *(float *)(v33 + 40) = a6.n128_f32[2] - (float)(v29 * v41);
  specialized SIMD.init<A>(_:)(v33);
  v46 = v34;
  swift_setDeallocating();
  specialized simd_float4x4.init(translation:rotation:scale:)(v46, v43);
}

double specialized static MathHelpers.computeCameraLookAtRotation(pos:lookAt:up:)(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v4;
  int32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  simd_float4x4 v18;

  v4 = vsubq_f32(a2, a1);
  v5 = (int32x4_t)vmulq_f32(v4, v4);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  v8 = vmulq_n_f32(v4, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).f32[0]);
  v18.columns[2].i64[0] = vnegq_f32(v8).u64[0];
  v18.columns[2].f32[2] = -v8.f32[2];
  v18.columns[2].i32[3] = 0;
  v9 = (int32x4_t)vmulq_f32(a3, a3);
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  *(float32x2_t *)v5.i8 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  *(float32x2_t *)v5.i8 = vmul_f32(*(float32x2_t *)v5.i8, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8)));
  v10 = vmulq_n_f32(a3, vmul_f32(*(float32x2_t *)v5.i8, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8))).f32[0]);
  v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18.columns[2], (int32x4_t)v18.columns[2]), (int8x16_t)v18.columns[2], 0xCuLL);
  v12 = vmlaq_f32(vmulq_f32(v11, vnegq_f32(v10)), (float32x4_t)v18.columns[2], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL));
  v13 = (int32x4_t)vmulq_f32(v12, v12);
  v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
  *(float32x2_t *)v5.i8 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  *(float32x2_t *)v5.i8 = vmul_f32(*(float32x2_t *)v5.i8, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8)));
  v18.columns[0] = (simd_float4)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vmul_f32(*(float32x2_t *)v5.i8, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8))).f32[0]);
  v14 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18.columns[0], (int32x4_t)v18.columns[0]), (int8x16_t)v18.columns[0], 0xCuLL), vnegq_f32((float32x4_t)v18.columns[2])), (float32x4_t)v18.columns[0], v11);
  v18.columns[3] = (simd_float4)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14);
  v15 = (int32x4_t)vmulq_f32(v14, v14);
  v15.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), *(float32x2_t *)v15.i8)).u32[0];
  v16 = (float32x4_t)vextq_s8((int8x16_t)v18.columns[3], (int8x16_t)v14, 0xCuLL);
  *(float32x2_t *)v18.columns[3].f32 = vrsqrte_f32((float32x2_t)v15.u32[0]);
  *(float32x2_t *)v18.columns[3].f32 = vmul_f32(*(float32x2_t *)v18.columns[3].f32, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(*(float32x2_t *)v18.columns[3].f32, *(float32x2_t *)v18.columns[3].f32)));
  *(float32x2_t *)v18.columns[3].f32 = vmul_f32(*(float32x2_t *)v18.columns[3].f32, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(*(float32x2_t *)v18.columns[3].f32, *(float32x2_t *)v18.columns[3].f32)));
  v18.columns[1] = (simd_float4)vmulq_n_f32(v16, v18.columns[3].f32[0]);
  return simd_quaternion(v18);
}

unint64_t lazy protocol witness table accessor for type MathHelpers.Error and conformance MathHelpers.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MathHelpers.Error and conformance MathHelpers.Error;
  if (!lazy protocol witness table cache variable for type MathHelpers.Error and conformance MathHelpers.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for MathHelpers.Error, &type metadata for MathHelpers.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathHelpers.Error and conformance MathHelpers.Error);
  }
  return result;
}

void specialized static MathHelpers.angleBetween(_:_:)(float32x2_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  unsigned __int32 v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  unsigned __int32 v9;
  float32x2_t v10;
  float32x2_t v11;
  float v12;
  _QWORD *v13;

  v2 = vmul_f32(a1, a1);
  v3 = vmul_f32(a2, a2);
  v4 = vcgt_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32((int32x2_t)v3, (int32x2_t)v2), (float32x2_t)vzip2_s32((int32x2_t)v3, (int32x2_t)v2))), (float32x2_t)vdup_n_s32(0x38D1B717u));
  if ((v4.i32[1] & v4.i32[0] & 1) != 0)
  {
    v5 = vadd_f32(v2, (float32x2_t)vdup_lane_s32((int32x2_t)v2, 1)).u32[0];
    v6 = vrsqrte_f32((float32x2_t)v5);
    v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5, vmul_f32(v6, v6)));
    v8 = vmul_n_f32(a1, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5, vmul_f32(v7, v7))).f32[0]);
    v9 = vadd_f32(v3, (float32x2_t)vdup_lane_s32((int32x2_t)v3, 1)).u32[0];
    v10 = vrsqrte_f32((float32x2_t)v9);
    v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9, vmul_f32(v10, v10)));
    v12 = vaddv_f32(vmul_f32(v8, vmul_n_f32(a2, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9, vmul_f32(v11, v11))).f32[0])));
    if (v12 <= -1.0)
      v12 = -1.0;
    if (v12 > 1.0)
      v12 = 1.0;
    acosf(v12);
  }
  else
  {
    lazy protocol witness table accessor for type MathHelpers.Error and conformance MathHelpers.Error();
    swift_allocError();
    *v13 = 0;
    v13[1] = 0;
    swift_willThrow();
  }
}

float specialized static MathHelpers.computeClippingPlanes(boxWorld:worldToCamera:flipZ:)(char a1)
{
  void *v2;
  float v3;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static MathHelpers.computeClippingPlanes(boxWorld:worldToCamera:flipZ:));
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static MathHelpers.computeClippingPlanes(boxWorld:worldToCamera:flipZ:));
  BoundingBox.init(min:max:)();
  if ((a1 & 1) != 0)
    v2 = &outlined read-only object #2 of static MathHelpers.computeClippingPlanes(boxWorld:worldToCamera:flipZ:);
  else
    v2 = &outlined read-only object #3 of static MathHelpers.computeClippingPlanes(boxWorld:worldToCamera:flipZ:);
  specialized SIMD.init<A>(_:)((uint64_t)v2);
  BoundingBox.transformed(by:)();
  return v3;
}

unint64_t destroy for MathHelpers.Error(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MathHelpers.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for MathHelpers.Error(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MathHelpers.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MathHelpers.Error(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MathHelpers.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for MathHelpers.Error(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for MathHelpers.Error(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MathHelpers.Error()
{
  return &type metadata for MathHelpers.Error;
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t type metadata accessor for ResourceUsageHelper()
{
  return objc_opt_self();
}

Swift::Void __swiftcall ResourceTimedLogger.unrequestLogging()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_7;
  }
  v0 = v1;
  *(_QWORD *)(v1 + 32) = v4;
  if ((v4 & 0x8000000000000000) == 0)
  {
    if (v4)
      return;
    v5 = *(void **)(v1 + 24);
    if (!v5)
      return;
LABEL_10:
    if (objc_msgSend(v5, sel_isValid))
      ResourceTimedLogger.stopRunningTimer()();
    return;
  }
  if (one-time initialization token for logger != -1)
    goto LABEL_14;
LABEL_7:
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_2355E9000, v7, v8, "unrequestLogging() underflow!", v9, 2u);
    MEMORY[0x23B7D3428](v9, -1, -1);
  }

  *(_QWORD *)(v0 + 32) = 0;
  v5 = *(void **)(v0 + 24);
  if (v5)
    goto LABEL_10;
}

void ResourceTimedLogger.stopRunningTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  void *v7;

  v1 = v0;
  if (one-time initialization token for logger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  swift_retain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_2355E9000, v3, v4, "Use count=%ld went to 0... stopping the running resource logger.", v5, 0xCu);
    MEMORY[0x23B7D3428](v5, -1, -1);

  }
  else
  {

    swift_release();
  }
  v6 = *(void **)(v1 + 24);
  if (v6)
  {
    if (objc_msgSend(v6, sel_isValid))
    {
      objc_msgSend(*(id *)(v1 + 24), sel_invalidate);
      v7 = *(void **)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;

      return;
    }
    __break(1u);
  }
  __break(1u);
}

void ResourceTimedLogger.startNewTimer()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  _QWORD v11[6];

  v1 = v0;
  v2 = *(void **)(v0 + 24);
  if (v2 && (objc_msgSend(v2, sel_isValid) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)logger);
    swift_retain();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v6 = 134217984;
      v11[0] = *(_QWORD *)(v1 + 32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_2355E9000, v4, v5, "Use count=%ld moved above 0... starting the running resource logger.", v6, 0xCu);
      MEMORY[0x23B7D3428](v6, -1, -1);

    }
    else
    {

      swift_release();
    }
    v7 = (void *)objc_opt_self();
    v11[4] = closure #1 in ResourceTimedLogger.startNewTimer();
    v11[5] = 0;
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 1107296256;
    v11[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    v11[3] = &block_descriptor_8;
    v8 = _Block_copy(v11);
    v9 = objc_msgSend(v7, sel_scheduledTimerWithTimeInterval_repeats_block_, 1, v8, 5.0);
    _Block_release(v8);
    v10 = *(void **)(v1 + 24);
    *(_QWORD *)(v1 + 24) = v9;

  }
}

void closure #1 in ResourceTimedLogger.startNewTimer()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  kern_return_t v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  thread_act_t *v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  mach_msg_type_number_t act_listCnt[2];
  thread_act_array_t act_list[2];

  act_list[1] = *(thread_act_array_t *)MEMORY[0x24BDAC8D0];
  if (one-time initialization token for logger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v3 = 134349056;
    act_list[0] = (thread_act_array_t)specialized static ResourceUsageHelper.memoryUsage(in:)(2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2355E9000, v1, v2, "Memory usage: %{public}llu MB", v3, 0xCu);
    MEMORY[0x23B7D3428](v3, -1, -1);
  }

  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v6 = 134349056;
    act_list[0] = 0;
    act_listCnt[0] = 0;
    v7 = task_threads(*MEMORY[0x24BDAEC58], act_list, act_listCnt);
    if (act_list[0])
      v8 = v7 == 0;
    else
      v8 = 0;
    v9 = act_listCnt[0];
    if (!v8)
      v9 = -1;
    act_list[0] = (thread_act_array_t)v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2355E9000, v4, v5, "Thread count: %{public}ld", v6, 0xCu);
    MEMORY[0x23B7D3428](v6, -1, -1);
  }

  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = (thread_act_t *)swift_slowAlloc();
    act_list[0] = v13;
    *(_DWORD *)v12 = 136446210;
    v14 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    v15 = objc_msgSend(v14, sel_thermalState);

    *(_QWORD *)act_listCnt = v15;
    type metadata accessor for NSProcessInfoThermalState(0);
    v16 = String.init<A>(describing:)();
    *(_QWORD *)act_listCnt = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)act_list);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2355E9000, v10, v11, "Thermal state: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7D3428](v13, -1, -1);
    MEMORY[0x23B7D3428](v12, -1, -1);
  }

}

uint64_t ResourceTimedLogger.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceTimedLogger()
{
  return objc_opt_self();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

char *specialized static ResourceUsageHelper.memoryUsage(in:)(char a1)
{
  uint64_t v2;
  mach_error_t v3;
  char *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  mach_msg_type_number_t v14;
  integer_t v15[36];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31[2];

  v31[1] = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v2);
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  memset(v15, 0, sizeof(v15));
  v14 = 93;
  v3 = task_info(*MEMORY[0x24BDAEC58], 0x16u, v15, &v14);
  if (!v3)
    return (char *)((unint64_t)v16 / qword_2356C0E88[a1]);
  result = mach_error_string(v3);
  if (result)
  {
    static String.Encoding.ascii.getter();
    v5 = String.init(cString:encoding:)();
    if (v6)
      v7 = v5;
    else
      v7 = 0x206E776F6E6B6E55;
    if (v6)
      v8 = v6;
    else
      v8 = 0xED0000726F727245;
    if (one-time initialization token for logger != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    swift_bridgeObjectRetain();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v31[0] = v13;
      *(_DWORD *)v12 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2355E9000, v10, v11, "Error with task_info(): %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7D3428](v13, -1, -1);
      MEMORY[0x23B7D3428](v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MeshToTextureRenderer.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t MeshToTextureRenderer.__deallocating_deinit()
{
  MeshToTextureRenderer.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MeshToTextureRenderer()
{
  return objc_opt_self();
}

uint64_t descriptionString(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v2 = type metadata accessor for ObjectCaptureSession.State();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (MEMORY[0x24BE1E900] && v6 == *MEMORY[0x24BE1E900])
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    v7 = type metadata accessor for ObjectCaptureSession.Error();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(_QWORD *)(v8 + 64);
    MEMORY[0x24BDAC7A8](v7);
    v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))((char *)v17 - v10, v5, v7);
    v17[0] = 0x28726F727245;
    v17[1] = 0xE600000000000000;
    MEMORY[0x24BDAC7A8](v11);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v17 - v10, (char *)v17 - v10, v7);
    v12._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 41;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14 = v17[0];
    (*(void (**)(char *, uint64_t))(v8 + 8))((char *)v17 - v10, v7);
    return v14;
  }
  if (MEMORY[0x24BE1E8E8] && v6 == *MEMORY[0x24BE1E8E8])
    return 0x696C616974696E49;
  if (MEMORY[0x24BE1E910] && v6 == *MEMORY[0x24BE1E910])
    return 0x676E696E6E7552;
  if (MEMORY[0x24BE1E8F8] && v6 == *MEMORY[0x24BE1E8F8])
    return 0x7964616552;
  if (MEMORY[0x24BE1E908] && v6 == *MEMORY[0x24BE1E908])
    return 0x646573756150;
  if (MEMORY[0x24BE1E928] && v6 == *MEMORY[0x24BE1E928])
  {
    v15 = 0x746365746544;
    return v15 & 0xFFFFFFFFFFFFLL | 0x6E69000000000000;
  }
  if (MEMORY[0x24BE1E918] && v6 == *MEMORY[0x24BE1E918])
    return 0x676E696E6E616353;
  if (MEMORY[0x24BE1E930] && v6 == *MEMORY[0x24BE1E930])
  {
    v15 = 0x6873696E6946;
    return v15 & 0xFFFFFFFFFFFFLL | 0x6E69000000000000;
  }
  if (MEMORY[0x24BE1E920] && v6 == *MEMORY[0x24BE1E920])
    return 0x6574656C706D6F43;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0xD000000000000023;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D116OIegnrzr_TR93_s19_RealityKit_SwiftUI0A17ViewCameraContentV18updateDebugOptions0aB06ARViewC0iJ0VyFSSSshcfu_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v16;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      swift_bridgeObjectRetain();
      v9 = MEMORY[0x23B7D251C](v5, v6, v7, v8);
      v11 = v10;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v16 + 16);
      v12 = *(_QWORD *)(v16 + 24);
      if (v13 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      *(_QWORD *)(v16 + 16) = v13 + 1;
      v14 = v16 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v11;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t RealityView.init<A>(make:update:placeholder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X7>, char *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  uint64_t v23;

  v14 = *(_QWORD *)(a5 - 8);
  v15 = MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18(v15);
  *(_QWORD *)a7 = a1;
  *((_QWORD *)a7 + 1) = a2;
  *((_QWORD *)a7 + 2) = a3;
  *((_QWORD *)a7 + 3) = a4;
  v20 = type metadata accessor for RealityViewCameraContent.Body(0, a5, a6, v19);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(&a7[*(int *)(v20 + 40)], v17, a5);
  v22 = &a7[*(int *)(v20 + 44)];
  *(_QWORD *)v22 = implicit closure #2 in implicit closure #1 in variable initialization expression of RealityViewCameraContent.Body._strongModel;
  *((_QWORD *)v22 + 1) = 0;
  v22[16] = 0;
  return result;
}

uint64_t RealityView.init<>(make:update:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_QWORD *)(a5 + 32) = implicit closure #2 in implicit closure #1 in variable initialization expression of RealityViewCameraContent.Body._strongModel;
  *(_QWORD *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 48) = 0;
  return result;
}

uint64_t RealityViewCameraContent.Body.strongModel.getter()
{
  type metadata accessor for _RealityViewCameraModel(0);
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type _RealityViewCameraModel and conformance _RealityViewCameraModel, type metadata accessor for _RealityViewCameraModel, (uint64_t)&protocol conformance descriptor for _RealityViewCameraModel);
  return StateObject.wrappedValue.getter();
}

uint64_t implicit closure #2 in implicit closure #1 in variable initialization expression of RealityViewCameraContent.Body._strongModel()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  void *v3;

  type metadata accessor for _RealityViewCameraModel(0);
  v0 = swift_allocObject();
  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content);
  v2 = objc_allocWithZone((Class)type metadata accessor for ARView());
  v3 = (void *)ARView.init(frame:forRealityView:)();
  RealityViewCameraContent.init(view:)(v3, v1);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_makeTaskBegun) = 0;
  Published.init(initialValue:)();
  return v0;
}

uint64_t RealityViewCameraContent.Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = swift_allocObject();
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v7 + 16) = v8;
  *(_QWORD *)(v7 + 24) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v7 + v6, (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v11 = type metadata accessor for _RealityViewImpl(0, v8, v9, v10);
  MEMORY[0x23B7D3350](&protocol conformance descriptor for _RealityViewImpl<A>, v11);
  v16 = GeometryReader.init(content:)();
  v17 = v12;
  v13 = type metadata accessor for GeometryReader();
  v14 = MEMORY[0x23B7D3350](MEMORY[0x24BDEC6F8], v13);
  static ViewBuilder.buildExpression<A>(_:)(&v16, v13, v14);
  swift_release();
  v16 = v18;
  v17 = v19;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v16, v13, a2);
  return swift_release();
}

uint64_t closure #1 in RealityViewCameraContent.Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t KeyPath;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v48 = a1;
  v53 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Image.DynamicRange?>);
  MEMORY[0x24BDAC7A8](v8);
  v51 = (uint64_t *)((char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<CameraControls>);
  MEMORY[0x24BDAC7A8](v10);
  v50 = (uint64_t *)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = type metadata accessor for GeometryProxy();
  v42 = *(_QWORD *)(v44 - 8);
  v12 = MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v54 = (uint64_t)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a3;
  v52 = a4;
  v17 = type metadata accessor for _RealityViewImpl(0, a3, a4, v16);
  v49 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v45 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v47 = (char *)&v41 - v20;
  v21 = a2[1];
  v43 = *a2;
  v23 = a2[2];
  v22 = a2[3];
  if (v23)
  {
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v23;
    *(_QWORD *)(v24 + 24) = v22;
    v25 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v24 = 0;
    v25 = (uint64_t (*)())closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
  }
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v25;
  *(_QWORD *)(v26 + 24) = v24;
  v27 = v15;
  v28 = v52;
  v30 = type metadata accessor for RealityViewCameraContent.Body(0, v15, v52, v29);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v54, (char *)a2 + *(int *)(v30 + 40), v15);
  v31 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v46, v48, v44);
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v23);
  RealityViewCameraContent.Body.strongModel.getter();
  v32 = v50;
  default argument 5 of _RealityViewImpl.init(make:update:placeholder:proxy:model:cameraControls:dynamicRange:backgroundStyle:)(&demangling cache variable for type metadata for Environment<CameraControls>.Content, v50);
  v33 = v51;
  default argument 5 of _RealityViewImpl.init(make:update:placeholder:proxy:model:cameraControls:dynamicRange:backgroundStyle:)(&demangling cache variable for type metadata for Environment<Image.DynamicRange?>.Content, v51);
  KeyPath = swift_getKeyPath();
  v40 = (uint64_t)v33;
  v35 = v45;
  _RealityViewImpl.init(make:update:placeholder:proxy:model:cameraControls:dynamicRange:backgroundStyle:)(v43, v21, (uint64_t)partial apply for thunk for @callee_guaranteed () -> (), v26, v54, v31, (uint64_t)v32, v45, v40, KeyPath, 0, v27, v28);
  v36 = MEMORY[0x23B7D3350](&protocol conformance descriptor for _RealityViewImpl<A>, v17);
  v37 = (uint64_t)v47;
  static ViewBuilder.buildExpression<A>(_:)(v35, v17, v36);
  v38 = *(void (**)(char *, uint64_t))(v49 + 8);
  v38(v35, v17);
  static ViewBuilder.buildBlock<A>(_:)(v37, v17, v53);
  return ((uint64_t (*)(uint64_t, uint64_t))v38)(v37, v17);
}

uint64_t sub_235683CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for RealityViewCameraContent.Body(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  swift_release();
  if (*(_QWORD *)(v8 + 16))
    swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 40), v5);
  outlined consume of StateObject<_RealityViewCameraModel>.Storage();
  return swift_deallocObject();
}

uint64_t type metadata accessor for RealityViewCameraContent.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RealityViewCameraContent.Body);
}

uint64_t outlined consume of StateObject<_RealityViewCameraModel>.Storage()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in RealityViewCameraContent.Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RealityViewCameraContent.Body(0, v6, v7, a2) - 8)
                          + 80);
  return closure #1 in RealityViewCameraContent.Body.body.getter(a1, (uint64_t *)(v3 + ((v8 + 32) & ~v8)), v6, v7, a3);
}

uint64_t type metadata accessor for _RealityViewImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _RealityViewImpl);
}

uint64_t default argument 5 of _RealityViewImpl.init(make:update:placeholder:proxy:model:cameraControls:dynamicRange:backgroundStyle:)@<X0>(uint64_t *a1@<X3>, uint64_t *a2@<X8>)
{
  *a2 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(a1);
  return swift_storeEnumTagMultiPayload();
}

uint64_t _RealityViewImpl.init(make:update:placeholder:proxy:model:cameraControls:dynamicRange:backgroundStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, char *a8@<X8>, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  char *v21;

  *(_QWORD *)a8 = a1;
  *((_QWORD *)a8 + 1) = a2;
  *((_QWORD *)a8 + 2) = a3;
  *((_QWORD *)a8 + 3) = a4;
  v17 = (int *)type metadata accessor for _RealityViewImpl(0, a12, a13, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a12 - 8) + 32))(&a8[v17[10]], a5, a12);
  v18 = &a8[v17[11]];
  v19 = type metadata accessor for GeometryProxy();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a6, v19);
  swift_weakInit();
  swift_release();
  outlined init with take of Animation?(a7, (uint64_t)&a8[v17[13]], &demangling cache variable for type metadata for Environment<CameraControls>);
  result = outlined init with take of Animation?(a9, (uint64_t)&a8[v17[14]], &demangling cache variable for type metadata for Environment<Image.DynamicRange?>);
  v21 = &a8[v17[15]];
  *(_QWORD *)v21 = a10;
  v21[8] = a11 & 1;
  return result;
}

void RealityViewCameraContent.init(view:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void (*v27)(_QWORD *, _QWORD);
  void (*v28)(char *, uint64_t);
  void *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];

  v4 = type metadata accessor for ARView.RenderOptions();
  v36 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v37[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v37[-1] - v8;
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  a2[1] = Entity.init()();
  v10 = (int *)type metadata accessor for RealityViewCameraContent(0);
  v11 = (char *)a2 + v10[6];
  v12 = type metadata accessor for GeometryProxy();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = v10[7];
  type metadata accessor for RealityViewCameraContent.ContentStorage(0);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v14 + 24) = 0;
  v15 = v14 + OBJC_IVAR____TtCV19_RealityKit_SwiftUI24RealityViewCameraContent14ContentStorage_unavailableCapabilities;
  v16 = type metadata accessor for SpatialTrackingSession.UnavailableCapabilities();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_QWORD *)((char *)a2 + v13) = v14;
  v17 = (_QWORD *)((char *)a2 + v10[8]);
  *v17 = 0;
  v18 = type metadata accessor for RealityViewCamera(0);
  static CameraControls.none.getter();
  *((_BYTE *)v17 + *(int *)(v18 + 24)) = 0;
  *(_QWORD *)((char *)a2 + v10[9]) = 0;
  *(_QWORD *)((char *)a2 + v10[10]) = 0;
  v19 = (_QWORD *)((char *)a2 + v10[11]);
  v20 = type metadata accessor for RealityViewRenderingEffects(0);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = 0;
  v21 = (char *)v19 + *(int *)(v20 + 28);
  v22 = *MEMORY[0x24BDE7828];
  v23 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v21, v22, v23);
  *(_QWORD *)((char *)v19 + *(int *)(v20 + 32)) = 0;
  v24 = v10[12];
  type metadata accessor for _proto_RealityViewCameraController_v1();
  swift_allocObject();
  _proto_RealityViewCameraController_v1.init()();
  *(_QWORD *)((char *)a2 + v24) = v25;
  *((_BYTE *)a2 + v10[13]) = 0;
  *a2 = a1;
  v26 = a1;
  static ARView.RenderOptions.disableFaceOcclusions.getter();
  v27 = (void (*)(_QWORD *, _QWORD))ARView.renderOptions.modify();
  specialized OptionSet<>.insert(_:)(v9, (uint64_t)v7);
  v28 = *(void (**)(char *, uint64_t))(v36 + 8);
  v28(v7, v4);
  v28(v9, v4);
  v27(v37, 0);
  if (!dispatch thunk of ARView.realityFusionSession.getter())
  {
    __break(1u);
    goto LABEL_7;
  }
  v29 = (void *)dispatch thunk of RealityFusionSession.serviceManager.getter();
  swift_release();
  if (!v29)
  {
LABEL_7:
    __break(1u);
    return;
  }
  type metadata accessor for SpatialTrackingManager();
  v30 = type metadata accessor for ARSessionManager();
  v31 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE7DE8];
  swift_allocObject();
  v32 = v26;
  v33 = v29;
  v34 = ARSessionManager.init(arView:)();
  v37[3] = v30;
  v37[4] = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARSessionManager and conformance ARSessionManager, v31, MEMORY[0x24BDE7DD8]);
  v37[0] = v34;
  swift_allocObject();
  SpatialTrackingManager.init(serviceManager:arkitRunnable:)();
  static SpatialTrackingManager.shared.setter();
  swift_retain();
  Entity.coreEntity.getter();
  swift_release();
  REHideEntity();
  dispatch thunk of ARView.scene.getter();
  swift_retain();
  dispatch thunk of Scene.addAnchor(_:)();
  swift_release();
  swift_release();
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  v35 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (MEMORY[0x23B7D2E34](v35))
    REPhysicsSimulationServiceSetAnchorShouldHaveSharedSimulationByDefault();
  $defer #1 () in RealityViewCameraContent.init(view:)((uint64_t)a2);

}

uint64_t _RealityViewCameraModel.makeTaskComplete.getter()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t _RealityViewCameraModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined destroy of ObjectCaptureSession.Configuration(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content, type metadata accessor for RealityViewCameraContent);
  v1 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel__makeTaskComplete;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance _RealityViewCameraModel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for _RealityViewCameraModel(0);
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t _RealityViewImpl.backgroundStyle.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 60));
  v3 = *v2;
  v4 = *((unsigned __int8 *)v2 + 8);
  outlined copy of Environment<AnyShapeStyle?>.Content(*v2, v4);
  v5 = specialized Environment.wrappedValue.getter(v3, v4);
  protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(v3, v4);
  return v5;
}

uint64_t _RealityViewImpl.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Strong;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v94[2];
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  uint64_t v117;
  _QWORD v118[2];
  uint64_t v119;
  _QWORD v120[2];
  uint64_t v121;
  _QWORD v122[2];
  _QWORD v123[2];
  uint64_t v124;
  _QWORD v125[2];
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;

  v3 = v2;
  v110 = a2;
  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v103 = v10;
  v104 = (char *)v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
  v111 = *(_QWORD *)(a1 + 16);
  v114 = type metadata accessor for _ConditionalContent();
  v11 = type metadata accessor for Group();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v106 = (char *)v94 - v13;
  type metadata accessor for _TaskModifier();
  v115 = v11;
  v14 = type metadata accessor for ModifiedContent();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v94 - v19;
  v113 = v21;
  v109 = type metadata accessor for Optional();
  v107 = *(_QWORD *)(v109 - 8);
  v22 = MEMORY[0x24BDAC7A8](v109);
  v24 = (char *)v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v108 = (char *)v94 - v25;
  v112 = a1;
  v26 = v3;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v28 = Strong;
    v94[1] = v94;
    v29 = MEMORY[0x24BDAC7A8](Strong);
    v94[0] = &v94[-6];
    v99 = v6;
    v30 = *(_QWORD *)(v112 + 24);
    v94[-4] = v111;
    v94[-3] = v30;
    v94[-2] = v29;
    v94[-1] = v26;
    v31 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
    v98 = v12;
    v32 = v31;
    v33 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
    v96 = v18;
    v34 = v33;
    v35 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
    v101 = v15;
    v36 = v35;
    v100 = v20;
    v37 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
    v102 = v24;
    v38 = v37;
    v39 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
    v95 = v9;
    v40 = v39;
    v97 = v5;
    v41 = MEMORY[0x24BDEC410];
    v42 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>, MEMORY[0x24BDEC410]);
    v126 = v36;
    v127 = v38;
    v128 = v40;
    v129 = v42;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v44 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>, v41);
    v126 = v32;
    v127 = v34;
    v128 = OpaqueTypeConformance2;
    v129 = v44;
    v118[0] = swift_getOpaqueTypeConformance2();
    v118[1] = v30;
    v45 = MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v114, v118);
    v46 = v106;
    Group<A>.init(content:)();
    v47 = v105;
    v48 = v104;
    v49 = v26;
    v50 = v112;
    (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v104, v49, v112);
    v51 = (*(unsigned __int8 *)(v47 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
    v52 = (char *)swift_allocObject();
    *((_QWORD *)v52 + 2) = v111;
    *((_QWORD *)v52 + 3) = v30;
    v111 = v30;
    *((_QWORD *)v52 + 4) = v28;
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&v52[v51], v48, v50);
    v117 = v45;
    swift_retain();
    v53 = v115;
    v54 = MEMORY[0x23B7D3350](MEMORY[0x24BDF3F50], v115, &v117);
    v55 = v95;
    static TaskPriority.userInitiated.getter();
    v56 = v96;
    View.task(priority:_:)();
    swift_release();
    v57 = (uint64_t)v102;
    swift_release();
    (*(void (**)(char *, uint64_t))(v99 + 8))(v55, v97);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v46, v53);
    v58 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type _TaskModifier and conformance _TaskModifier, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC4E0], MEMORY[0x24BDEC4C8]);
    v116[0] = v54;
    v116[1] = v58;
    v59 = v113;
    v60 = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v113, v116);
    v61 = (uint64_t)v100;
    static ViewBuilder.buildExpression<A>(_:)(v56, v59, v60);
    v62 = v101;
    v63 = *(void (**)(char *, uint64_t))(v101 + 8);
    v63(v56, v59);
    static ViewBuilder.buildBlock<A>(_:)(v61, v59, v57);
    v63((char *)v61, v59);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v57, 0, 1, v59);
  }
  else
  {
    v64 = v113;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v24, 1, 1, v113);
    v65 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
    v66 = v24;
    v67 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
    v68 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
    v69 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
    v70 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
    v71 = MEMORY[0x24BDEC410];
    v72 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>, MEMORY[0x24BDEC410]);
    v126 = v68;
    v127 = v69;
    v128 = v70;
    v129 = v72;
    v73 = swift_getOpaqueTypeConformance2();
    v74 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>, v71);
    v126 = v65;
    v127 = v67;
    v57 = (uint64_t)v66;
    v128 = v73;
    v129 = v74;
    v75 = swift_getOpaqueTypeConformance2();
    v76 = *(_QWORD *)(v112 + 24);
    v125[0] = v75;
    v125[1] = v76;
    v111 = v76;
    v124 = MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v114, v125);
    v77 = MEMORY[0x23B7D3350](MEMORY[0x24BDF3F50], v115, &v124);
    v78 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type _TaskModifier and conformance _TaskModifier, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC4E0], MEMORY[0x24BDEC4C8]);
    v123[0] = v77;
    v123[1] = v78;
    MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v64, v123);
  }
  v79 = v107;
  v80 = (uint64_t)v108;
  v81 = v109;
  (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v108, v57, v109);
  v112 = *(_QWORD *)(v79 + 8);
  ((void (*)(uint64_t, uint64_t))v112)(v57, v81);
  v82 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
  v83 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
  v84 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
  v85 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
  v86 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
  v87 = MEMORY[0x24BDEC410];
  v88 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>, MEMORY[0x24BDEC410]);
  v126 = v84;
  v127 = v85;
  v128 = v86;
  v129 = v88;
  v89 = swift_getOpaqueTypeConformance2();
  v90 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>, v87);
  v126 = v82;
  v127 = v83;
  v128 = v89;
  v129 = v90;
  v122[0] = swift_getOpaqueTypeConformance2();
  v122[1] = v111;
  v121 = MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v114, v122);
  v91 = MEMORY[0x23B7D3350](MEMORY[0x24BDF3F50], v115, &v121);
  v92 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type _TaskModifier and conformance _TaskModifier, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC4E0], MEMORY[0x24BDEC4C8]);
  v120[0] = v91;
  v120[1] = v92;
  v119 = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v113, v120);
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5578], v81, &v119);
  static ViewBuilder.buildBlock<A>(_:)(v80, v81, v110);
  return ((uint64_t (*)(uint64_t, uint64_t))v112)(v80, v81);
}

uint64_t closure #1 in _RealityViewImpl.body.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  void (*v66)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  void *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t OpaqueTypeConformance2;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v128;
  void (*v129)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t (*v162)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t (*v178)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v179;
  __int16 v180;
  uint64_t v181;
  _QWORD v182[2];

  v162 = a2;
  v167 = a5;
  v161 = *(_QWORD **)(a3 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v142 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v141 = (char *)&v128 - v10;
  v151 = type metadata accessor for MagnifyGesture();
  v150 = *(_QWORD *)(v151 - 8);
  MEMORY[0x24BDAC7A8](v151);
  v149 = (char *)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ChangedGesture<MagnifyGesture>);
  v153 = *(_QWORD *)(v154 - 8);
  MEMORY[0x24BDAC7A8](v154);
  v152 = (char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
  v155 = *(_QWORD *)(v171 - 8);
  MEMORY[0x24BDAC7A8](v171);
  v166 = (char *)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for RealityViewCameraContent(0);
  v157 = *(_QWORD *)(v140 - 8);
  v14 = MEMORY[0x24BDAC7A8](v140);
  v159 = (char *)&v128 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = v15;
  MEMORY[0x24BDAC7A8](v14);
  v137 = (char *)&v128 - v16;
  v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
  v156 = *(_QWORD *)(v175 - 8);
  MEMORY[0x24BDAC7A8](v175);
  v146 = (uint64_t)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for LocalCoordinateSpace();
  v143 = *(_QWORD *)(v135 - 8);
  MEMORY[0x24BDAC7A8](v135);
  v134 = (char *)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0);
  v144 = *(_QWORD *)(v145 - 8);
  MEMORY[0x24BDAC7A8](v145);
  v136 = (char *)&v128 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
  MEMORY[0x24BDAC7A8](v174);
  v163 = (char *)&v128 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
  v160 = *(_QWORD *)(v170 - 8);
  MEMORY[0x24BDAC7A8](v170);
  v164 = (char *)&v128 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
  v148 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v168 = (char *)&v128 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v147 = (char *)&v128 - v25;
  v131 = type metadata accessor for CameraControls();
  v130 = *(_QWORD *)(v131 - 8);
  MEMORY[0x24BDAC7A8](v131);
  v27 = (char *)&v128 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = a4;
  v29 = type metadata accessor for _RealityViewImpl(0, a3, a4, v28);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_QWORD *)(v30 + 64);
  v32 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v128 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v139 = (char *)&v128 - v34;
  v165 = v22;
  v35 = a3;
  v169 = type metadata accessor for _ConditionalContent();
  v172 = *(_QWORD *)(v169 - 8);
  MEMORY[0x24BDAC7A8](v169);
  v37 = (char *)&v128 - v36;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v176 == 1)
  {
    v142 = v27;
    v132 = v31;
    v138 = a3;
    v141 = v37;
    v133 = a1;
    v38 = (_QWORD *)(a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content);
    swift_beginAccess();
    v39 = v140;
    v40 = *(int *)(v140 + 32);
    v161 = v38;
    LOBYTE(v38) = *((_BYTE *)v38 + v40 + *(int *)(type metadata accessor for RealityViewCamera(0) + 24));
    v41 = v139;
    v42 = v162;
    v129 = *(void (**)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(v30 + 16);
    v129(v139, v162, v29);
    v43 = v30;
    if ((v38 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v41, v29);
      LODWORD(v142) = 0;
      v44 = v138;
    }
    else
    {
      v63 = (uint64_t)v142;
      specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<CameraControls>.Content, (uint64_t (*)(_QWORD))MEMORY[0x24BDE74B0], 0x6F436172656D6143, 0xEE00736C6F72746ELL, (uint64_t)v142);
      v64 = CameraControls.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v63, v131);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v29);
      v44 = v138;
      if (v64)
        v65 = 1;
      else
        v65 = *((unsigned __int8 *)v161 + *(int *)(v39 + 52));
      LODWORD(v142) = v65;
    }
    v66 = v129;
    v129(v33, v42, v29);
    v67 = *(unsigned __int8 *)(v43 + 80);
    v140 = v67 | 7;
    v68 = (char *)swift_allocObject();
    v69 = v42;
    v70 = v173;
    *((_QWORD *)v68 + 2) = v44;
    *((_QWORD *)v68 + 3) = v70;
    *((_QWORD *)v68 + 4) = v133;
    v71 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v71(&v68[(v67 + 40) & ~v67], v33, v29);
    v66(v33, v69, v29);
    v72 = (v67 + 32) & ~v67;
    v73 = (v132 + v72 + 7) & 0xFFFFFFFFFFFFFFF8;
    v74 = swift_allocObject();
    *(_QWORD *)(v74 + 16) = v44;
    *(_QWORD *)(v74 + 24) = v70;
    v71((char *)(v74 + v72), v33, v29);
    *(_QWORD *)(v74 + v73) = v133;
    swift_retain_n();
    v140 = v29;
    v75 = _RealityViewImpl.backgroundStyle.getter(v29);
    v76 = v69;
    if (!v75)
    {
      v176 = static Color.clear.getter();
      v75 = AnyShapeStyle.init<A>(_:)();
    }
    v77 = v174;
    v78 = (uint64_t)v137;
    v79 = v136;
    v80 = v135;
    v81 = v134;
    v176 = (uint64_t)partial apply for closure #1 in closure #1 in _RealityViewImpl.body.getter;
    v177 = v68;
    v178 = partial apply for closure #2 in closure #1 in _RealityViewImpl.body.getter;
    v179 = (char *)v74;
    v180 = 256;
    v181 = v75;
    swift_retain();
    static CoordinateSpaceProtocol<>.local.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>();
    View.onContinuousHover<A>(coordinateSpace:perform:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v143 + 8))(v81, v80);
    swift_release();
    swift_release();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RealityViewCameraConvertible>);
    v82 = type metadata accessor for RealityViewCameraConvertible(0);
    v83 = *(unsigned __int8 *)(*(_QWORD *)(v82 - 8) + 80);
    v84 = (v83 + 32) & ~v83;
    v85 = swift_allocObject();
    *(_OWORD *)(v85 + 16) = xmmword_2356BACB0;
    v86 = (_QWORD *)(v85 + v84);
    v87 = v79;
    v88 = v161;
    v89 = (void *)*v161;
    v90 = (uint64_t)v76 + *(int *)(v140 + 44);
    v91 = (char *)v86 + *(int *)(v82 + 20);
    v92 = type metadata accessor for GeometryProxy();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v91, v90, v92);
    *v86 = v89;
    v93 = v144;
    v94 = v163;
    v95 = v145;
    (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v163, v87, v145);
    *(_QWORD *)&v94[*(int *)(v77 + 36)] = v85;
    v96 = *(void (**)(char *, uint64_t))(v93 + 8);
    v97 = v89;
    v96(v87, v95);
    outlined init with copy of ObjectCaptureSession.Error((uint64_t)v88, v78, type metadata accessor for RealityViewCameraContent);
    v98 = v146;
    RealityViewCameraContent.cameraControlDragGesture()(v146);
    outlined destroy of ObjectCaptureSession.Configuration(v78, type metadata accessor for RealityViewCameraContent);
    if ((_DWORD)v142)
      static GestureMask.all.getter();
    else
      static GestureMask.subviews.getter();
    v99 = (uint64_t)v159;
    v100 = v157;
    v101 = v156;
    v102 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
    v103 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>, MEMORY[0x24BDEC410]);
    v104 = v175;
    v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v102;
    v159 = (char *)v103;
    v105 = (uint64_t)v163;
    View.gesture<A>(_:including:)();
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v98, v104);
    outlined destroy of URL?(v105, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
    outlined init with copy of ObjectCaptureSession.Error((uint64_t)v161, v78, type metadata accessor for RealityViewCameraContent);
    v106 = v149;
    MagnifyGesture.init(minimumScaleDelta:)();
    outlined init with copy of ObjectCaptureSession.Error(v78, v99, type metadata accessor for RealityViewCameraContent);
    v107 = (*(unsigned __int8 *)(v100 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    v108 = swift_allocObject();
    outlined init with take of RealityViewCameraContent(v99, v108 + v107);
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type MagnifyGesture and conformance MagnifyGesture, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC840], MEMORY[0x24BDEC838]);
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type MagnifyGesture.Value and conformance MagnifyGesture.Value, MEMORY[0x24BDEC828], MEMORY[0x24BDEC830]);
    v109 = v152;
    v110 = v78;
    v111 = v151;
    Gesture<>.onChanged(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v150 + 8))(v106, v111);
    outlined init with copy of ObjectCaptureSession.Error(v110, v99, type metadata accessor for RealityViewCameraContent);
    v112 = swift_allocObject();
    outlined init with take of RealityViewCameraContent(v99, v112 + v107);
    lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _ChangedGesture<MagnifyGesture> and conformance _ChangedGesture<A>, &demangling cache variable for type metadata for _ChangedGesture<MagnifyGesture>, MEMORY[0x24BDED570]);
    v113 = v154;
    Gesture.onEnded(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v153 + 8))(v109, v113);
    outlined destroy of ObjectCaptureSession.Configuration(v110, type metadata accessor for RealityViewCameraContent);
    if ((_DWORD)v142)
      static GestureMask.all.getter();
    else
      static GestureMask.subviews.getter();
    v60 = v170;
    v61 = v171;
    v62 = v169;
    v114 = v160;
    v59 = v174;
    v176 = v174;
    v177 = (_QWORD *)v175;
    v178 = v162;
    v179 = v159;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v116 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>, MEMORY[0x24BDEC410]);
    v117 = v166;
    v118 = v164;
    View.gesture<A>(_:including:)();
    (*(void (**)(char *, uint64_t))(v155 + 8))(v117, v61);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v60);
    v119 = v148;
    v120 = (uint64_t)v147;
    v121 = v165;
    (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v147, v168, v165);
    v176 = v60;
    v177 = (_QWORD *)v61;
    v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OpaqueTypeConformance2;
    v179 = (char *)v116;
    v58 = v175;
    swift_getOpaqueTypeConformance2();
    v37 = v141;
    v47 = v173;
    static ViewBuilder.buildEither<A, B>(first:)(v120, v121);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v120, v121);
    v57 = v167;
  }
  else
  {
    v45 = (char *)v162 + *(int *)(v29 + 40);
    v46 = (uint64_t)v141;
    v47 = v173;
    static ViewBuilder.buildExpression<A>(_:)(v45, a3, v173);
    v48 = (uint64_t)v142;
    static ViewBuilder.buildBlock<A>(_:)(v46, a3, (uint64_t)v142);
    v49 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
    v50 = MEMORY[0x24BDEC410];
    v51 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>, MEMORY[0x24BDEC410]);
    v176 = v174;
    v177 = (_QWORD *)v175;
    v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49;
    v179 = (char *)v51;
    v52 = swift_getOpaqueTypeConformance2();
    v53 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>, v50);
    v55 = v170;
    v54 = v171;
    v176 = v170;
    v177 = (_QWORD *)v171;
    v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v52;
    v179 = (char *)v53;
    swift_getOpaqueTypeConformance2();
    static ViewBuilder.buildEither<A, B>(second:)(v48, v165, v35);
    v56 = (void (*)(uint64_t, uint64_t))v161[1];
    v56(v48, v35);
    v56(v46, v35);
    v57 = v167;
    v59 = v174;
    v58 = v175;
    v60 = v55;
    v61 = v54;
    v62 = v169;
  }
  v122 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
  v123 = MEMORY[0x24BDEC410];
  v124 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>, MEMORY[0x24BDEC410]);
  v176 = v59;
  v177 = (_QWORD *)v58;
  v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v122;
  v179 = (char *)v124;
  v125 = swift_getOpaqueTypeConformance2();
  v126 = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>, v123);
  v176 = v60;
  v177 = (_QWORD *)v61;
  v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v125;
  v179 = (char *)v126;
  v182[0] = swift_getOpaqueTypeConformance2();
  v182[1] = v47;
  MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v62, v182);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v37, v62, v57);
  return (*(uint64_t (**)(char *, uint64_t))(v172 + 8))(v37, v62);
}

Swift::Void __swiftcall RealityViewCameraContent.makeSettings()()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  Class isa;
  uint64_t v13;

  v1 = type metadata accessor for RealityViewCameraComponent(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Entity.ComponentSet();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Entity.components.getter();
  v8 = type metadata accessor for RealityViewCameraContent(0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v0 + *(int *)(v8 + 24), (uint64_t)v3, &demangling cache variable for type metadata for GeometryProxy?);
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type RealityViewCameraComponent and conformance RealityViewCameraComponent, type metadata accessor for RealityViewCameraComponent, (uint64_t)&protocol conformance descriptor for RealityViewCameraComponent);
  Entity.ComponentSet.set<A>(_:)();
  outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v3, type metadata accessor for RealityViewCameraComponent);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v9 = *v0;
  v10 = objc_msgSend(*v0, sel_gestureRecognizers);
  if (v10)
  {
    v11 = v10;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setGestureRecognizers_, isa);

  }
  else
  {
    objc_msgSend(v9, sel_setGestureRecognizers_, 0);
  }
}

uint64_t closure #2 in closure #1 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void *v29;
  id v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  char v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = type metadata accessor for RealityViewCameraContent(0);
  MEMORY[0x24BDAC7A8](v52);
  v48 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CameraControls();
  v50 = *(_QWORD *)(v10 - 8);
  v51 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v49 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for ARView.EDRHeadroomPolicy();
  v45 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v46 = (_DWORD *)((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image.DynamicRange?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Image.DynamicRange();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v43 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v43 - v24;
  v27 = type metadata accessor for _RealityViewImpl(0, a4, a5, v26);
  specialized Environment.wrappedValue.getter((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
  {
    v43 = v27;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v25, v15, v16);
    v44 = a3;
    v28 = (void **)(a3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content);
    swift_beginAccess();
    v29 = *v28;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v23, v25, v16);
    v30 = v29;
    static Image.DynamicRange.high.getter();
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type Image.DynamicRange and conformance Image.DynamicRange, (uint64_t (*)(uint64_t))MEMORY[0x24BDF3FB0], MEMORY[0x24BDF3FC0]);
    LOBYTE(v29) = dispatch thunk of static Equatable.== infix(_:_:)();
    v31 = *(void (**)(char *, uint64_t))(v17 + 8);
    v31(v20, v16);
    if ((v29 & 1) != 0)
    {
      v31(v23, v16);
      dispatch thunk of ARView.extendedDynamicRangeOutput.setter();
      v32 = *MEMORY[0x24BDE8050];
      v33 = v45;
      v34 = v46;
    }
    else
    {
      static Image.DynamicRange.constrainedHigh.getter();
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v31(v20, v16);
      v31(v23, v16);
      if ((v35 & 1) == 0)
      {
        dispatch thunk of ARView.extendedDynamicRangeOutput.setter();
        goto LABEL_9;
      }
      dispatch thunk of ARView.extendedDynamicRangeOutput.setter();
      v34 = v46;
      *v46 = 0x40000000;
      v32 = *MEMORY[0x24BDE8048];
      v33 = v45;
    }
    (*(void (**)(_DWORD *, uint64_t, uint64_t))(v33 + 104))(v34, v32, v47);
    dispatch thunk of ARView.edrHeadroomPolicy.setter();
LABEL_9:

    v31(v25, v16);
    a3 = v44;
    goto LABEL_10;
  }
  outlined destroy of URL?((uint64_t)v15, &demangling cache variable for type metadata for Image.DynamicRange?);
LABEL_10:
  v36 = *(void (**)(uint64_t))(a2 + 16);
  v37 = a3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content;
  swift_beginAccess();
  v36(v37);
  swift_endAccess();
  v38 = v49;
  specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<CameraControls>.Content, (uint64_t (*)(_QWORD))MEMORY[0x24BDE74B0], 0x6F436172656D6143, 0xEE00736C6F72746ELL, v49);
  swift_beginAccess();
  v39 = *(int *)(v52 + 32);
  v40 = type metadata accessor for RealityViewCamera(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 40))(v37 + v39 + *(int *)(v40 + 20), v38, v51);
  RealityViewCameraContent.camera.didset();
  swift_endAccess();
  v41 = v48;
  outlined init with copy of ObjectCaptureSession.Error(v37, v48, type metadata accessor for RealityViewCameraContent);
  RealityViewCameraContent.updateSettings()();
  return outlined destroy of ObjectCaptureSession.Configuration(v41, type metadata accessor for RealityViewCameraContent);
}

uint64_t (*RealityViewCameraContent.camera.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  type metadata accessor for RealityViewCameraContent(0);
  return RealityViewCameraContent.camera.modify;
}

uint64_t RealityViewCameraContent.camera.modify(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return RealityViewCameraContent.camera.didset();
  return result;
}

uint64_t type metadata accessor for RealityViewCameraContent(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for RealityViewCameraContent);
}

Swift::Void __swiftcall RealityViewCameraContent.updateSettings()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t active;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for RealityViewCameraComponent(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Entity.ComponentSet();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ARView.DebugOptions();
  MEMORY[0x24BDAC7A8](v9);
  RealityViewCameraContent.updateDebugOptions()((uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  dispatch thunk of ARView.debugOptions.setter();
  dispatch thunk of Entity.components.getter();
  v11 = (int *)type metadata accessor for RealityViewCameraContent(0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v0 + v11[6], (uint64_t)v4, &demangling cache variable for type metadata for GeometryProxy?);
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type RealityViewCameraComponent and conformance RealityViewCameraComponent, type metadata accessor for RealityViewCameraComponent, (uint64_t)&protocol conformance descriptor for RealityViewCameraComponent);
  Entity.ComponentSet.set<A>(_:)();
  outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v4, type metadata accessor for RealityViewCameraComponent);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = (_QWORD *)(v0 + v11[8]);
  if ((*((_BYTE *)v12 + *(int *)(type metadata accessor for RealityViewCamera(0) + 24)) & 1) == 0)
  {
    if (CameraControls.rawValue.getter() && *v12)
    {
      v13 = *(_QWORD *)(v0 + v11[12]);
      swift_retain();
      v14 = v13;
LABEL_8:
      Entity.update(from:overrideDistance:)(v14, 0);
      swift_release();
      return;
    }
    if (*(_BYTE *)(v0 + v11[13]) == 1)
    {
      dispatch thunk of ARView.scene.getter();
      active = dispatch thunk of Scene.internalActiveCamera.getter();
      swift_release();
      if (active)
      {
        v14 = *(_QWORD *)(v1 + v11[12]);
        goto LABEL_8;
      }
    }
  }
}

uint64_t closure #3 in closure #1 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v7 = a3 & 1;
  v8 = type metadata accessor for RealityViewCameraContent(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content;
  swift_beginAccess();
  outlined init with copy of ObjectCaptureSession.Error(v11, (uint64_t)v10, type metadata accessor for RealityViewCameraContent);
  RealityViewCameraContent.hoverEffect(_:)(a1, a2, v7);
  return outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v10, type metadata accessor for RealityViewCameraContent);
}

uint64_t RealityViewCameraContent.hoverEffect(_:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Type;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v24[2] = a2;
  v24[1] = a1;
  v32 = *MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CollisionCastHit();
  v25 = *(_QWORD *)(v7 - 8);
  v26 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v24[0] = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CollisionGroup();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Type = type metadata accessor for CollisionCastQueryType();
  v14 = *(_QWORD *)(Type - 8);
  MEMORY[0x24BDAC7A8](Type);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  v17 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  MEMORY[0x23B7D2E40](v17);
  result = MEMORY[0x23B7D2E1C]();
  if ((a3 & 1) == 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x24BDE66D8], Type);
    static CollisionGroup.all.getter();
    v19 = 1;
    v20 = ARView.hitTest(_:requireInputTarget:query:mask:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, Type);
    v22 = v25;
    v21 = v26;
    if (*(_QWORD *)(v20 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v6, v20 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)), v26);
      v19 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v6, v19, 1, v21);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v6, 1, v21) == 1)
    {
      return outlined destroy of URL?((uint64_t)v6, &demangling cache variable for type metadata for CollisionCastHit?);
    }
    else
    {
      v23 = v24[0];
      (*(void (**)(_QWORD, char *, uint64_t))(v22 + 32))(v24[0], v6, v21);
      RERemoteEffectsServiceHoverEffectSettingsCreate();
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      RERemoteEffectsServiceHitTestDataSetSource();
      CollisionCastHit.position.getter();
      RERemoteEffectsServiceHitTestDataSetLocation();
      CollisionCastHit.entity.getter();
      Entity.coreEntity.getter();
      swift_release();
      RERemoteEffectsServiceHitTestDataSetTargetEntity();
      RERemoteEffectsServiceAddHitTestData();
      RERelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v23, v21);
    }
  }
  return result;
}

uint64_t RealityViewCameraContent.cameraControlDragGesture()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v21 = a1;
  v3 = type metadata accessor for RealityViewCameraContent(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalCoordinateSpace();
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for DragGesture();
  v19 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ChangedGesture<DragGesture>);
  v20 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.local.getter();
  DragGesture.init<A>(minimumDistance:coordinateSpace:)();
  outlined init with copy of ObjectCaptureSession.Error(v2, (uint64_t)v6, type metadata accessor for RealityViewCameraContent);
  v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v15 = swift_allocObject();
  outlined init with take of RealityViewCameraContent((uint64_t)v6, v15 + v14);
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type DragGesture and conformance DragGesture, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB540], MEMORY[0x24BDEB530]);
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type DragGesture.Value and conformance DragGesture.Value, MEMORY[0x24BDEB500], MEMORY[0x24BDEB520]);
  Gesture<>.onChanged(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v8);
  outlined init with copy of ObjectCaptureSession.Error(v18, (uint64_t)v6, type metadata accessor for RealityViewCameraContent);
  v16 = swift_allocObject();
  outlined init with take of RealityViewCameraContent((uint64_t)v6, v16 + v14);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _ChangedGesture<DragGesture> and conformance _ChangedGesture<A>, &demangling cache variable for type metadata for _ChangedGesture<DragGesture>, MEMORY[0x24BDED570]);
  Gesture.onEnded(_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v13, v11);
}

uint64_t closure #2 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[8] = a1;
  v2[9] = a2;
  type metadata accessor for RealityViewCameraContent(0);
  v2[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[11] = static MainActor.shared.getter();
  v2[12] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[13] = v3;
  return swift_task_switch();
}

uint64_t closure #2 in _RealityViewImpl.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD);

  v1 = *(_QWORD *)(v0 + 64);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_makeTaskBegun) == 1)
  {
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(_QWORD **)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 80);
    *(_BYTE *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_makeTaskBegun) = 1;
    v5 = OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content;
    *(_QWORD *)(v0 + 112) = OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content;
    v6 = v1 + v5;
    swift_beginAccess();
    outlined init with copy of ObjectCaptureSession.Error(v6, v3, type metadata accessor for RealityViewCameraContent);
    v8 = (uint64_t (*)(_QWORD))(*(int *)*v4 + *v4);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v7;
    *v7 = v0;
    v7[1] = closure #2 in _RealityViewImpl.body.getter;
    return v8(*(_QWORD *)(v0 + 80));
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release();
  swift_beginAccess();
  outlined assign with copy of CoveragePointCloud(v2, v3 + v1, type metadata accessor for RealityViewCameraContent);
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  *(_BYTE *)(v0 + 128) = 1;
  swift_retain();
  static Published.subscript.setter();
  outlined destroy of ObjectCaptureSession.Configuration(v2, type metadata accessor for RealityViewCameraContent);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RealityViewCameraContent.ContentStorage.deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[5] = a4;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  v4[7] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v5;
  return swift_task_switch();
}

uint64_t closure #1 in RealityViewCameraContent.ContentStorage.deinit()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 72) = Strong;
  if (Strong)
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v2;
    *v2 = v0;
    v2[1] = closure #1 in RealityViewCameraContent.ContentStorage.deinit;
    return SpatialTrackingSession.stop()();
  }
  else
  {
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RealityViewCameraContent.ContentStorage.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for MainActor();
  swift_retain();
  v7 = static MainActor.shared.getter();
  v8 = (_QWORD *)swift_allocObject();
  v9 = MEMORY[0x24BEE6930];
  v8[2] = v7;
  v8[3] = v9;
  v8[4] = v6;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in RealityViewCameraContent.ContentStorage.deinit, (uint64_t)v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of URL?(v1 + OBJC_IVAR____TtCV19_RealityKit_SwiftUI24RealityViewCameraContent14ContentStorage_unavailableCapabilities, &demangling cache variable for type metadata for SpatialTrackingSession.UnavailableCapabilities?);
  return swift_deallocClassInstance();
}

uint64_t RealityViewCameraContent.entities.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  return swift_retain();
}

uint64_t key path setter for RealityViewCameraContent.entities : RealityViewCameraContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t result;
  uint64_t v8;

  v3 = type metadata accessor for RealityViewCameraContent(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ObjectCaptureSession.Error(a2, (uint64_t)v5, v6);
  type metadata accessor for Entity();
  swift_retain();
  LOBYTE(a2) = static Entity.== infix(_:_:)();
  result = swift_release();
  if ((a2 & 1) != 0)
    return outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v5, type metadata accessor for RealityViewCameraContent);
  __break(1u);
  return result;
}

uint64_t RealityViewCameraContent.entities.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  char v5;
  uint64_t result;
  uint64_t v7;

  v1 = type metadata accessor for RealityViewCameraContent(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ObjectCaptureSession.Error(v0, (uint64_t)v3, v4);
  type metadata accessor for Entity();
  v5 = static Entity.== infix(_:_:)();
  result = swift_release();
  if ((v5 & 1) != 0)
    return outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v3, type metadata accessor for RealityViewCameraContent);
  __break(1u);
  return result;
}

void (*RealityViewCameraContent.entities.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  v3 = type metadata accessor for RealityViewCameraContent(0);
  a1[2] = malloc(*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  *a1 = *(_QWORD *)(v1 + 8);
  swift_retain();
  return RealityViewCameraContent.entities.modify;
}

void RealityViewCameraContent.entities.modify(uint64_t a1, char a2)
{
  char v4;
  void *v5;
  char v6;

  outlined init with copy of ObjectCaptureSession.Error(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), type metadata accessor for RealityViewCameraContent);
  type metadata accessor for Entity();
  if ((a2 & 1) != 0)
  {
    swift_retain();
    v4 = static Entity.== infix(_:_:)();
    swift_release();
    if ((v4 & 1) != 0)
    {
      v5 = *(void **)(a1 + 16);
      outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v5, type metadata accessor for RealityViewCameraContent);
      swift_release();
LABEL_6:
      free(v5);
      return;
    }
    __break(1u);
  }
  else
  {
    v6 = static Entity.== infix(_:_:)();
    swift_release();
    if ((v6 & 1) != 0)
    {
      v5 = *(void **)(a1 + 16);
      outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v5, type metadata accessor for RealityViewCameraContent);
      goto LABEL_6;
    }
  }
  __break(1u);
}

uint64_t static RealityViewCamera.virtual.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  *a1 = 0;
  v2 = type metadata accessor for RealityViewCamera(0);
  result = static CameraControls.none.getter();
  *((_BYTE *)a1 + *(int *)(v2 + 24)) = 0;
  return result;
}

uint64_t RealityViewCameraContent.camera.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for RealityViewCameraContent(0);
  return outlined init with copy of ObjectCaptureSession.Error(v1 + *(int *)(v3 + 32), a1, type metadata accessor for RealityViewCamera);
}

uint64_t key path setter for RealityViewCameraContent.camera : RealityViewCameraContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for RealityViewCamera(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ObjectCaptureSession.Error(a1, (uint64_t)v6, type metadata accessor for RealityViewCamera);
  v7 = type metadata accessor for RealityViewCameraContent(0);
  outlined assign with copy of CoveragePointCloud((uint64_t)v6, a2 + *(int *)(v7 + 32), type metadata accessor for RealityViewCamera);
  RealityViewCameraContent.camera.didset();
  return outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v6, type metadata accessor for RealityViewCamera);
}

uint64_t RealityViewCameraContent.camera.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for RealityViewCameraContent(0);
  outlined assign with copy of CoveragePointCloud(a1, v1 + *(int *)(v3 + 32), type metadata accessor for RealityViewCamera);
  RealityViewCameraContent.camera.didset();
  return outlined destroy of ObjectCaptureSession.Configuration(a1, type metadata accessor for RealityViewCamera);
}

uint64_t RealityViewCameraContent.camera.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t active;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, _QWORD, uint64_t);
  void (*v17)(_BYTE *, _QWORD);
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  void (*v26)(_BYTE *, _QWORD);
  void (*v27)(_BYTE *, _QWORD);
  void (*v28)(_BYTE *, _QWORD);
  id v29;
  void (*v30)(_BYTE *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _BYTE v36[32];
  _BYTE v37[32];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v2);
  v35 = v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v4 = type metadata accessor for ARView.Environment.Background();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for ARView.CameraMode();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  dispatch thunk of ARView.scene.getter();
  active = dispatch thunk of Scene.internalActiveCamera.getter();
  swift_release();
  v10 = (int *)type metadata accessor for RealityViewCameraContent(0);
  v11 = (uint64_t *)(v0 + v10[8]);
  swift_release();
  *v11 = active;
  v12 = type metadata accessor for RealityViewCamera(0);
  switch(CameraControls.rawValue.getter())
  {
    case 1:
      v13 = *(_QWORD *)(v0 + v10[12]);
      swift_beginAccess();
      *(_BYTE *)(v13 + 16) = 0;
      break;
    case 2:
      v14 = *(_QWORD *)(v0 + v10[12]);
      swift_beginAccess();
      v15 = 5;
      goto LABEL_6;
    case 3:
      v14 = *(_QWORD *)(v0 + v10[12]);
      swift_beginAccess();
      v15 = 2;
      goto LABEL_6;
    case 4:
      v14 = *(_QWORD *)(v0 + v10[12]);
      swift_beginAccess();
      v15 = 6;
LABEL_6:
      *(_BYTE *)(v14 + 16) = v15;
      break;
    default:
      break;
  }
  v16 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
  if (*((_BYTE *)v11 + *(int *)(v12 + 24)) == 1)
  {
    v16(v8, *MEMORY[0x24BDE7E18], v5);
    ARView.cameraMode.setter();
    static ARView.Environment.Background.cameraFeed(exposureCompensation:)();
    v17 = (void (*)(_BYTE *, _QWORD))dispatch thunk of ARView.environment.modify();
    ARView.Environment.background.setter();
    v17(v37, 0);
    type metadata accessor for SpatialTrackingManager();
    result = static SpatialTrackingManager.shared.getter();
    if (!result)
      return result;
    v19 = type metadata accessor for TaskPriority();
    v20 = (uint64_t)v35;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v35, 1, 1, v19);
    v21 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for MainActor();
    swift_retain();
    v22 = static MainActor.shared.getter();
    v23 = (_QWORD *)swift_allocObject();
    v24 = MEMORY[0x24BEE6930];
    v23[2] = v22;
    v23[3] = v24;
    v23[4] = v21;
    swift_release();
    v25 = &async function pointer to partial apply for closure #1 in RealityViewCameraContent.camera.didset;
    goto LABEL_15;
  }
  v16(v8, *MEMORY[0x24BDE7E20], v5);
  ARView.cameraMode.setter();
  if (*(_QWORD *)(v1 + v10[10]))
  {
    swift_retain();
    static ARView.Environment.Background.skybox(_:)();
    v26 = (void (*)(_BYTE *, _QWORD))dispatch thunk of ARView.environment.modify();
    ARView.Environment.background.setter();
    v26(v37, 0);
    swift_retain();
    v27 = (void (*)(_BYTE *, _QWORD))dispatch thunk of ARView.environment.modify();
    v28 = (void (*)(_BYTE *, _QWORD))ARView.Environment.lighting.modify();
    ARView.Environment.ImageBasedLight.resource.setter();
    v28(v36, 0);
    v27(v37, 0);
    swift_release();
  }
  else
  {
    v29 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    static ARView.Environment.Background.color(_:)();

    v30 = (void (*)(_BYTE *, _QWORD))dispatch thunk of ARView.environment.modify();
    ARView.Environment.background.setter();
    v30(v37, 0);
  }
  type metadata accessor for SpatialTrackingManager();
  result = static SpatialTrackingManager.shared.getter();
  if (result)
  {
    v31 = type metadata accessor for TaskPriority();
    v20 = (uint64_t)v35;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v35, 1, 1, v31);
    v32 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for MainActor();
    swift_retain();
    v33 = static MainActor.shared.getter();
    v23 = (_QWORD *)swift_allocObject();
    v34 = MEMORY[0x24BEE6930];
    v23[2] = v33;
    v23[3] = v34;
    v23[4] = v32;
    swift_release();
    v25 = &async function pointer to partial apply for closure #2 in RealityViewCameraContent.camera.didset;
LABEL_15:
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v20, (uint64_t)v25, (uint64_t)v23);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for RealityViewCamera(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for RealityViewCamera);
}

uint64_t closure #1 in RealityViewCameraContent.camera.didset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[8] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.UnavailableCapabilities?);
  v4[9] = swift_task_alloc();
  v5 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v4[10] = v5;
  v4[11] = *(_QWORD *)(v5 - 8);
  v4[12] = swift_task_alloc();
  v6 = type metadata accessor for SpatialTrackingSession.Configuration();
  v4[13] = v6;
  v4[14] = *(_QWORD *)(v6 - 8);
  v4[15] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[16] = static MainActor.shared.getter();
  v4[17] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[18] = v7;
  return swift_task_switch();
}

uint64_t closure #1 in RealityViewCameraContent.camera.didset()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 152) = Strong;
  if (Strong)
  {
    v2 = Strong;
    v4 = *(_QWORD *)(v0 + 88);
    v3 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 80);
    type metadata accessor for SpatialTrackingSession();
    swift_allocObject();
    *(_QWORD *)(v2 + 24) = SpatialTrackingSession.init()();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_2356BBF50;
    static SpatialTrackingSession.Configuration.AnchorCapability.camera.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
    specialized Set.init(_nonEmptyArrayLiteral:)(v5);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_2356BACA0;
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    specialized Set.init(_nonEmptyArrayLiteral:)(v6);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, *MEMORY[0x24BDE7B60], v14);
    SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
    v7 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v0 + 160) = v7;
    if (v7)
    {
      swift_retain();
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 168) = v8;
      *v8 = v0;
      v8[1] = closure #1 in RealityViewCameraContent.camera.didset;
      return SpatialTrackingSession.autoRun(_:)();
    }
    v10 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_release();
    v11 = type metadata accessor for SpatialTrackingSession.UnavailableCapabilities();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 152)
        + OBJC_IVAR____TtCV19_RealityKit_SwiftUI24RealityViewCameraContent14ContentStorage_unavailableCapabilities;
    swift_beginAccess();
    outlined assign with take of Cancellable?(v12, v13, &demangling cache variable for type metadata for SpatialTrackingSession.UnavailableCapabilities?);
    swift_endAccess();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 152)
     + OBJC_IVAR____TtCV19_RealityKit_SwiftUI24RealityViewCameraContent14ContentStorage_unavailableCapabilities;
  swift_beginAccess();
  outlined assign with take of Cancellable?(v4, v5, &demangling cache variable for type metadata for SpatialTrackingSession.UnavailableCapabilities?);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in RealityViewCameraContent.camera.didset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[5] = a4;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  v4[7] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v5;
  return swift_task_switch();
}

uint64_t closure #2 in RealityViewCameraContent.camera.didset()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  _QWORD *v3;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 72) = Strong;
  if (Strong)
  {
    v2 = *(_QWORD *)(Strong + 24);
    *(_QWORD *)(v0 + 80) = v2;
    if (v2)
    {
      swift_retain();
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 88) = v3;
      *v3 = v0;
      v3[1] = closure #2 in RealityViewCameraContent.camera.didset;
      return SpatialTrackingSession.autoStop()();
    }
    swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t RealityViewCameraContent.cameraTarget.getter()
{
  type metadata accessor for RealityViewCameraContent(0);
  return swift_retain();
}

uint64_t key path setter for RealityViewCameraContent.cameraTarget : RealityViewCameraContent(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for RealityViewCameraContent(0) + 36);
  swift_retain_n();
  swift_release();
  *(_QWORD *)(a2 + v4) = v3;
  RealityViewCameraContent.cameraTarget.didset();
  return swift_release();
}

uint64_t RealityViewCameraContent.cameraTarget.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for RealityViewCameraContent(0) + 36);
  swift_retain();
  swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  RealityViewCameraContent.cameraTarget.didset();
  return swift_release();
}

uint64_t RealityViewCameraContent.cameraTarget.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __n128 v5;
  __n128 v6;
  uint64_t v7;
  __int128 v8;
  __n128 v9;
  __n128 v10;

  v1 = type metadata accessor for RealityViewCameraContent(0);
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 48));
  v3 = *(_QWORD *)(v0 + *(int *)(v1 + 36));
  *(_QWORD *)(v2 + 416) = v3;
  swift_retain_n();
  result = swift_release();
  if (v3)
  {
    type metadata accessor for Entity();
    swift_retain();
    HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)();
    v9 = v6;
    v10 = v5;
    v7 = BoundingBox.center.getter();
    *(_OWORD *)(v2 + 96) = v8;
    *(float *)(v2 + 404) = MEMORY[0x23B7D06C8](v7, v10, v9);
    *(_OWORD *)(v2 + 112) = xmmword_2356BBF70;
    if (*(_QWORD *)(v2 + 424))
    {
      swift_retain();
      Entity.update(from:overrideDistance:)(v2, 1);
      swift_release();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t (*RealityViewCameraContent.cameraTarget.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  type metadata accessor for RealityViewCameraContent(0);
  return RealityViewCameraContent.cameraTarget.modify;
}

uint64_t RealityViewCameraContent.cameraTarget.modify(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return RealityViewCameraContent.cameraTarget.didset();
  return result;
}

void static RealityViewEnvironment.default.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t RealityViewCameraContent.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 40));
  return swift_retain();
}

uint64_t key path setter for RealityViewCameraContent.environment : RealityViewCameraContent(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for RealityViewCameraContent(0) + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a2 + v4) = v3;
  return RealityViewCameraContent.environment.didset();
}

uint64_t RealityViewCameraContent.environment.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(int *)(type metadata accessor for RealityViewCameraContent(0) + 40);
  swift_release();
  *(_QWORD *)(v1 + v3) = v2;
  return RealityViewCameraContent.environment.didset();
}

uint64_t RealityViewCameraContent.environment.didset()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_BYTE *, _QWORD);
  void (*v3)(_BYTE *, _QWORD);
  void (*v4)(_BYTE *, _QWORD);
  id v6;
  uint64_t (*v7)(_BYTE *, _QWORD);
  _BYTE v8[32];
  _BYTE v9[32];

  v1 = type metadata accessor for ARView.Environment.Background();
  MEMORY[0x24BDAC7A8](v1);
  if (*(_QWORD *)(v0 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 40)))
  {
    swift_retain();
    static ARView.Environment.Background.skybox(_:)();
    v2 = (void (*)(_BYTE *, _QWORD))dispatch thunk of ARView.environment.modify();
    ARView.Environment.background.setter();
    v2(v9, 0);
    swift_retain();
    v3 = (void (*)(_BYTE *, _QWORD))dispatch thunk of ARView.environment.modify();
    v4 = (void (*)(_BYTE *, _QWORD))ARView.Environment.lighting.modify();
    ARView.Environment.ImageBasedLight.resource.setter();
    v4(v8, 0);
    v3(v9, 0);
    return swift_release();
  }
  else
  {
    v6 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    static ARView.Environment.Background.color(_:)();

    v7 = (uint64_t (*)(_BYTE *, _QWORD))dispatch thunk of ARView.environment.modify();
    ARView.Environment.background.setter();
    return v7(v9, 0);
  }
}

uint64_t (*RealityViewCameraContent.environment.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  type metadata accessor for RealityViewCameraContent(0);
  return RealityViewCameraContent.environment.modify;
}

uint64_t RealityViewCameraContent.environment.modify(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return RealityViewCameraContent.environment.didset();
  return result;
}

uint64_t RealityViewCameraContent.audioListener.getter()
{
  return dispatch thunk of ARView.audioListener.getter();
}

uint64_t RealityViewCameraContent.audioListener.setter()
{
  return dispatch thunk of ARView.audioListener.setter();
}

uint64_t (*RealityViewCameraContent.audioListener.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = dispatch thunk of ARView.audioListener.getter();
  return RealityViewCameraContent.audioListener.modify;
}

uint64_t RealityViewCameraContent.audioListener.modify(uint64_t *a1, char a2)
{
  return RealityViewCameraContent.audioListener.modify(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FC8]);
}

uint64_t RealityViewCameraContent.renderingEffects.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for RealityViewCameraContent(0);
  return outlined init with copy of ObjectCaptureSession.Error(v1 + *(int *)(v3 + 44), a1, type metadata accessor for RealityViewRenderingEffects);
}

uint64_t type metadata accessor for RealityViewRenderingEffects(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for RealityViewRenderingEffects);
}

uint64_t key path setter for RealityViewCameraContent.renderingEffects : RealityViewCameraContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for RealityViewRenderingEffects(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ObjectCaptureSession.Error(a1, (uint64_t)v6, type metadata accessor for RealityViewRenderingEffects);
  v7 = type metadata accessor for RealityViewCameraContent(0);
  outlined assign with copy of CoveragePointCloud((uint64_t)v6, a2 + *(int *)(v7 + 44), type metadata accessor for RealityViewRenderingEffects);
  RealityViewCameraContent.renderingEffects.didset();
  return outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v6, type metadata accessor for RealityViewRenderingEffects);
}

uint64_t RealityViewCameraContent.renderingEffects.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for RealityViewCameraContent(0);
  outlined assign with copy of CoveragePointCloud(a1, v1 + *(int *)(v3 + 44), type metadata accessor for RealityViewRenderingEffects);
  RealityViewCameraContent.renderingEffects.didset();
  return outlined destroy of ObjectCaptureSession.Configuration(a1, type metadata accessor for RealityViewRenderingEffects);
}

uint64_t RealityViewCameraContent.renderingEffects.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_BYTE *, _QWORD);
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(_BYTE *, _QWORD);
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(_BYTE *, _QWORD);
  void (*v90)(uint64_t, char *, uint64_t);
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(_BYTE *, _QWORD);
  void (*v96)(char *, uint64_t);
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, char *, uint64_t);
  uint64_t *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t, uint64_t);
  void (*v110)(_BYTE *, _QWORD);
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  _QWORD *v136;
  _BYTE v137[40];
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v133 = type metadata accessor for AntialiasingMode();
  v131 = *(_QWORD *)(v133 - 8);
  v1 = MEMORY[0x24BDAC7A8](v133);
  v132 = (char *)&v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v130 = (char *)&v110 - v3;
  v4 = type metadata accessor for ARView.RenderOptions();
  v135 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v123 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v125 = (char *)&v110 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v122 = (char *)&v110 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v124 = (char *)&v110 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v121 = (char *)&v110 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v129 = (char *)&v110 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v119 = (char *)&v110 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v128 = (char *)&v110 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v118 = (char *)&v110 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v127 = (char *)&v110 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v117 = (char *)&v110 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v126 = (char *)&v110 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v110 - v30;
  v32 = MEMORY[0x24BDAC7A8](v29);
  v34 = (char *)&v110 - v33;
  v35 = MEMORY[0x24BDAC7A8](v32);
  v134 = (char *)&v110 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v110 - v38;
  v40 = MEMORY[0x24BDAC7A8](v37);
  v42 = (char *)&v110 - v41;
  MEMORY[0x24BDAC7A8](v40);
  v44 = (char *)&v110 - v43;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARView.RenderOptions?);
  v46 = MEMORY[0x24BDAC7A8](v45);
  v116 = (char *)&v110 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = MEMORY[0x24BDAC7A8](v46);
  v115 = (char *)&v110 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  v114 = (char *)&v110 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v113 = (char *)&v110 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v112 = (char *)&v110 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v111 = (char *)&v110 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v60 = (char *)&v110 - v59;
  MEMORY[0x24BDAC7A8](v58);
  v62 = (char *)&v110 - v61;
  v136 = (_QWORD *)(v0 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 44));
  if (*v136 == 2)
  {
    v65 = v0;
    v66 = (uint64_t)v134;
    static ARView.RenderOptions.disableMotionBlur.getter();
    v67 = (void (*)(_BYTE *, _QWORD))ARView.renderOptions.modify();
    specialized OptionSet<>.insert(_:)(v39, v66);
    v63 = v135;
    v68 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
    v68(v66, v4);
    v68((uint64_t)v39, v4);
    v67(v137, 0);
  }
  else
  {
    if (*v136 == 1)
    {
      static ARView.RenderOptions.disableMotionBlur.getter();
      v110 = (void (*)(_BYTE *, _QWORD))ARView.renderOptions.modify();
      v63 = v135;
      (*(void (**)(char *))(v135 + 16))(v39);
      lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FA0], MEMORY[0x24BDE7FB8]);
      dispatch thunk of SetAlgebra.intersection(_:)();
      if ((dispatch thunk of SetAlgebra.isEmpty.getter() & 1) != 0)
      {
        v64 = *(void (**)(char *, uint64_t))(v63 + 8);
        v64(v42, v4);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56))(v62, 1, 1, v4);
      }
      else
      {
        dispatch thunk of SetAlgebra.subtract(_:)();
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v62, v42, v4);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v62, 0, 1, v4);
        v64 = *(void (**)(char *, uint64_t))(v63 + 8);
      }
      v70 = v136;
      v64(v44, v4);
      outlined destroy of URL?((uint64_t)v62, &demangling cache variable for type metadata for ARView.RenderOptions?);
      v110(v137, 0);
      v65 = v0;
      v68 = (void (*)(uint64_t, uint64_t))v64;
      goto LABEL_13;
    }
    static ARView.RenderOptions.disableMotionBlur.getter();
    v110 = (void (*)(_BYTE *, _QWORD))ARView.renderOptions.modify();
    v69 = v135;
    (*(void (**)(char *))(v135 + 16))(v39);
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FA0], MEMORY[0x24BDE7FB8]);
    dispatch thunk of SetAlgebra.intersection(_:)();
    if ((dispatch thunk of SetAlgebra.isEmpty.getter() & 1) != 0)
    {
      v68 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
      v68((uint64_t)v31, v4);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56))(v60, 1, 1, v4);
    }
    else
    {
      dispatch thunk of SetAlgebra.subtract(_:)();
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v60, v31, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v60, 0, 1, v4);
      v68 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    }
    v68((uint64_t)v34, v4);
    outlined destroy of URL?((uint64_t)v60, &demangling cache variable for type metadata for ARView.RenderOptions?);
    v110(v137, 0);
    v65 = v0;
    v63 = v135;
  }
  v70 = v136;
LABEL_13:
  v71 = v70[1];
  v72 = v127;
  if (v71 == 2)
  {
    v77 = (uint64_t)v134;
    static ARView.RenderOptions.disableDepthOfField.getter();
    v78 = (void (*)(_BYTE *, _QWORD))ARView.renderOptions.modify();
    specialized OptionSet<>.insert(_:)(v39, v77);
    v68(v77, v4);
    v68((uint64_t)v39, v4);
    v78(v137, 0);
  }
  else if (v71 == 1)
  {
    v135 = (uint64_t)v68;
    v73 = v126;
    static ARView.RenderOptions.disableDepthOfField.getter();
    v127 = (char *)ARView.renderOptions.modify();
    (*(void (**)(char *))(v63 + 16))(v39);
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FA0], MEMORY[0x24BDE7FB8]);
    v74 = v117;
    dispatch thunk of SetAlgebra.intersection(_:)();
    if ((dispatch thunk of SetAlgebra.isEmpty.getter() & 1) != 0)
    {
      v68 = (void (*)(uint64_t, uint64_t))v135;
      ((void (*)(char *, uint64_t))v135)(v74, v4);
      v75 = 1;
      v76 = (uint64_t)v111;
    }
    else
    {
      dispatch thunk of SetAlgebra.subtract(_:)();
      v76 = (uint64_t)v111;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v111, v74, v4);
      v75 = 0;
      v68 = (void (*)(uint64_t, uint64_t))v135;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v76, v75, 1, v4);
    v68((uint64_t)v73, v4);
    outlined destroy of URL?(v76, &demangling cache variable for type metadata for ARView.RenderOptions?);
    ((void (*)(_BYTE *, _QWORD))v127)(v137, 0);
  }
  else
  {
    static ARView.RenderOptions.disableDepthOfField.getter();
    v135 = ARView.renderOptions.modify();
    (*(void (**)(char *))(v63 + 16))(v39);
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FA0], MEMORY[0x24BDE7FB8]);
    v79 = v63;
    v80 = v118;
    dispatch thunk of SetAlgebra.intersection(_:)();
    if ((dispatch thunk of SetAlgebra.isEmpty.getter() & 1) != 0)
    {
      v68((uint64_t)v80, v4);
      v81 = 1;
      v82 = (uint64_t)v112;
    }
    else
    {
      dispatch thunk of SetAlgebra.subtract(_:)();
      v82 = (uint64_t)v112;
      (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v112, v80, v4);
      v81 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56))(v82, v81, 1, v4);
    v68((uint64_t)v72, v4);
    outlined destroy of URL?(v82, &demangling cache variable for type metadata for ARView.RenderOptions?);
    ((void (*)(_BYTE *, _QWORD))v135)(v137, 0);
    v63 = v79;
    v70 = v136;
  }
  v83 = v70[2];
  v84 = v129;
  if (v83 == 2)
  {
    v88 = (uint64_t)v134;
    static ARView.RenderOptions.disableCameraGrain.getter();
    v89 = (void (*)(_BYTE *, _QWORD))ARView.renderOptions.modify();
    specialized OptionSet<>.insert(_:)(v39, v88);
    v68(v88, v4);
    v68((uint64_t)v39, v4);
    v89(v137, 0);
    goto LABEL_35;
  }
  v120 = v65;
  if (v83 != 1)
  {
    static ARView.RenderOptions.disableCameraGrain.getter();
    v135 = ARView.renderOptions.modify();
    (*(void (**)(char *))(v63 + 16))(v39);
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FA0], MEMORY[0x24BDE7FB8]);
    v85 = v121;
    dispatch thunk of SetAlgebra.intersection(_:)();
    if ((dispatch thunk of SetAlgebra.isEmpty.getter() & 1) != 0)
    {
      v68((uint64_t)v85, v4);
      v86 = 1;
      v87 = (uint64_t)v114;
      goto LABEL_34;
    }
    dispatch thunk of SetAlgebra.subtract(_:)();
    v90 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 32);
    v91 = &v139;
LABEL_33:
    v87 = *(v91 - 32);
    v90(v87, v85, v4);
    v86 = 0;
    goto LABEL_34;
  }
  v84 = v128;
  static ARView.RenderOptions.disableCameraGrain.getter();
  v135 = ARView.renderOptions.modify();
  (*(void (**)(char *))(v63 + 16))(v39);
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FA0], MEMORY[0x24BDE7FB8]);
  v85 = v119;
  dispatch thunk of SetAlgebra.intersection(_:)();
  if ((dispatch thunk of SetAlgebra.isEmpty.getter() & 1) == 0)
  {
    dispatch thunk of SetAlgebra.subtract(_:)();
    v90 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 32);
    v91 = &v138;
    goto LABEL_33;
  }
  v68((uint64_t)v85, v4);
  v86 = 1;
  v87 = (uint64_t)v113;
LABEL_34:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v87, v86, 1, v4);
  v68((uint64_t)v84, v4);
  outlined destroy of URL?(v87, &demangling cache variable for type metadata for ARView.RenderOptions?);
  ((void (*)(_BYTE *, _QWORD))v135)(v137, 0);
LABEL_35:
  v92 = type metadata accessor for RealityViewRenderingEffects(0);
  v93 = *(_QWORD *)((char *)v70 + *(int *)(v92 + 32));
  if (v93 != 2)
  {
    if (v93 == 1)
    {
      v94 = (uint64_t)v134;
      static ARView.RenderOptions.disableHDR.getter();
      v95 = (void (*)(_BYTE *, _QWORD))ARView.renderOptions.modify();
      specialized OptionSet<>.insert(_:)(v39, v94);
      v68(v94, v4);
      v68((uint64_t)v39, v4);
      v95(v137, 0);
      goto LABEL_46;
    }
    v96 = (void (*)(char *, uint64_t))v68;
    v97 = v125;
    static ARView.RenderOptions.disableHDR.getter();
    v135 = ARView.renderOptions.modify();
    (*(void (**)(char *))(v63 + 16))(v39);
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FA0], MEMORY[0x24BDE7FB8]);
    v98 = v123;
    dispatch thunk of SetAlgebra.intersection(_:)();
    if ((dispatch thunk of SetAlgebra.isEmpty.getter() & 1) != 0)
    {
      v68((uint64_t)v98, v4);
      v99 = 1;
      v100 = (uint64_t)v116;
      goto LABEL_45;
    }
    dispatch thunk of SetAlgebra.subtract(_:)();
    v101 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 32);
    v102 = &v141;
LABEL_44:
    v100 = *(v102 - 32);
    v101(v100, v98, v4);
    v99 = 0;
    goto LABEL_45;
  }
  v96 = (void (*)(char *, uint64_t))v68;
  v97 = v124;
  static ARView.RenderOptions.disableHDR.getter();
  v135 = ARView.renderOptions.modify();
  (*(void (**)(char *))(v63 + 16))(v39);
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FA0], MEMORY[0x24BDE7FB8]);
  v98 = v122;
  dispatch thunk of SetAlgebra.intersection(_:)();
  if ((dispatch thunk of SetAlgebra.isEmpty.getter() & 1) == 0)
  {
    dispatch thunk of SetAlgebra.subtract(_:)();
    v101 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 32);
    v102 = &v140;
    goto LABEL_44;
  }
  v68((uint64_t)v98, v4);
  v99 = 1;
  v100 = (uint64_t)v115;
LABEL_45:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v100, v99, 1, v4);
  v96(v97, v4);
  outlined destroy of URL?(v100, &demangling cache variable for type metadata for ARView.RenderOptions?);
  ((void (*)(_BYTE *, _QWORD))v135)(v137, 0);
  v70 = v136;
LABEL_46:
  v103 = (char *)v70 + *(int *)(v92 + 28);
  v105 = v130;
  v104 = v131;
  v106 = v133;
  (*(void (**)(char *, char *, uint64_t))(v131 + 16))(v130, v103, v133);
  v107 = (*(uint64_t (**)(char *, uint64_t))(v104 + 88))(v105, v106);
  if ((_DWORD)v107 == *MEMORY[0x24BDE7830])
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v104 + 104))(v132, v107, v106);
    return dispatch thunk of ARView.antialiasingMode.setter();
  }
  v108 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 104);
  if ((_DWORD)v107 == *MEMORY[0x24BDE7828])
  {
    v108(v132, v107, v106);
    return dispatch thunk of ARView.antialiasingMode.setter();
  }
  ((void (*)(char *))v108)(v132);
  dispatch thunk of ARView.antialiasingMode.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v104 + 8))(v105, v106);
}

void static RealityViewDynamicRange.standard.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static RealityViewDynamicRange.highFixedTonemappingCurve.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t (*RealityViewCameraContent.renderingEffects.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  type metadata accessor for RealityViewCameraContent(0);
  return RealityViewCameraContent.renderingEffects.modify;
}

uint64_t RealityViewCameraContent.renderingEffects.modify(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return RealityViewCameraContent.renderingEffects.didset();
  return result;
}

uint64_t $defer #1 () in RealityViewCameraContent.init(view:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t (*v15)(_BYTE *, _QWORD);
  _BYTE v17[32];

  v2 = type metadata accessor for ARView.Environment.Background();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for RealityViewRenderingEffects(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for RealityViewCamera(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *v8 = 0;
  static CameraControls.none.getter();
  *((_BYTE *)v8 + *(int *)(v6 + 24)) = 0;
  v9 = (int *)type metadata accessor for RealityViewCameraContent(0);
  outlined assign with copy of CoveragePointCloud((uint64_t)v8, a1 + v9[8], type metadata accessor for RealityViewCamera);
  RealityViewCameraContent.camera.didset();
  outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v8, type metadata accessor for RealityViewCamera);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  v10 = (char *)v5 + *(int *)(v3 + 28);
  v11 = *MEMORY[0x24BDE7828];
  v12 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v10, v11, v12);
  *(_QWORD *)((char *)v5 + *(int *)(v3 + 32)) = 0;
  outlined assign with copy of CoveragePointCloud((uint64_t)v5, a1 + v9[11], type metadata accessor for RealityViewRenderingEffects);
  RealityViewCameraContent.renderingEffects.didset();
  outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v5, type metadata accessor for RealityViewRenderingEffects);
  v13 = v9[10];
  swift_release();
  *(_QWORD *)(a1 + v13) = 0;
  v14 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
  static ARView.Environment.Background.color(_:)();

  v15 = (uint64_t (*)(_BYTE *, _QWORD))dispatch thunk of ARView.environment.modify();
  ARView.Environment.background.setter();
  return v15(v17, 0);
}

uint64_t RealityViewCameraContent.subscribe<A>(to:on:componentType:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[3];
  _BYTE v19[40];

  v18[1] = a3;
  v18[0] = a2;
  v6 = type metadata accessor for EventSubscription();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _StoredEventSubscription();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for EventSource?);
  swift_retain();
  v10 = v18[2];
  _StoredEventSubscription.__allocating_init(to:on:componentType:_:)();
  swift_retain();
  EventSubscription.init(_:)();
  v11 = *(_QWORD *)(v10 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 28));
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a4, v6);
  v12 = (unint64_t *)(v11 + 16);
  swift_beginAccess();
  v13 = *(_QWORD *)(v11 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v11 + 16) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1, v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<EventSubscription>, (uint64_t (*)(_QWORD))MEMORY[0x24BDE78A0]);
    *v12 = v13;
  }
  v16 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1, v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<EventSubscription>, (uint64_t (*)(_QWORD))MEMORY[0x24BDE78A0]);
    *v12 = v13;
  }
  *(_QWORD *)(v13 + 16) = v16 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v13+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v16, v9, v6);
  swift_endAccess();
  dispatch thunk of ARView.scene.getter();
  EventSubscription.subscribe(to:)();
  swift_release();
  return swift_release();
}

uint64_t RealityViewCameraContent.updateDebugOptions()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  char v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  void (*v61)(BOOL *, char *, uint64_t);
  uint64_t *v62;
  uint64_t v63;
  BOOL *v64;
  BOOL *v65;
  void (*v66)(BOOL *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  uint64_t (*v78)(uint64_t);
  char v79;
  BOOL *v80;
  BOOL v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char v85;
  void (*v86)(char *, char *, uint64_t);
  char *v87;
  uint64_t (*v88)(uint64_t);
  char v89;
  BOOL *v90;
  BOOL v91;
  void (*v92)(BOOL *, char *, uint64_t);
  uint64_t v93;
  BOOL *v94;
  BOOL *v95;
  void (*v96)(BOOL *, uint64_t);
  char *v97;
  char v98;
  char *v99;
  void (*v100)(char *, char *, uint64_t);
  char *v101;
  uint64_t (*v102)(uint64_t);
  char v103;
  BOOL *v104;
  BOOL v105;
  void (*v106)(BOOL *, char *, uint64_t);
  char v107;
  uint64_t (*v108)(uint64_t);
  char v109;
  char v110;
  uint64_t v111;
  char *v112;
  char v113;
  uint64_t (*v114)(uint64_t);
  char v115;
  uint64_t (*v116)(uint64_t);
  BOOL *v117;
  uint64_t v118;
  BOOL *v119;
  BOOL *v120;
  void (*v121)(BOOL *, uint64_t);
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v128[2];
  __int128 v129;
  unint64_t v130;
  const char *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  BOOL *v145;
  char *v146;
  char *v147;
  BOOL *v148;
  char *v149;
  char *v150;
  char *v151;
  BOOL *v152;
  char *v153;
  BOOL *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162[2];
  char v163;
  char v164;
  char v165;

  v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (inserted: Bool, memberAfterInsert: ARView.DebugOptions));
  v2 = MEMORY[0x24BDAC7A8](v161);
  v4 = (char *)v128 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)v128 - v6;
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v128 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v145 = (BOOL *)v128 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v148 = (BOOL *)v128 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v154 = (BOOL *)v128 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v152 = (BOOL *)v128 - v17;
  v18 = type metadata accessor for CharacterSet();
  v156 = *(_QWORD *)(v18 - 8);
  v157 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v155 = (char *)v128 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ARView.DebugOptions();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v139 = (char *)v128 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v138 = (char *)v128 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v141 = (char *)v128 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v140 = (char *)v128 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v143 = (char *)v128 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v142 = (char *)v128 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v146 = (char *)v128 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v144 = (char *)v128 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v150 = (char *)v128 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v149 = (char *)v128 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v153 = (char *)v128 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v46 = (char *)v128 - v45;
  v47 = MEMORY[0x24BDAC7A8](v44);
  v151 = (char *)v128 - v48;
  MEMORY[0x24BDAC7A8](v47);
  v159 = (char *)v128 - v49;
  static ARView.DebugOptions.none.getter();
  v50 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v51 = objc_msgSend(v50, sel_environment);

  v52 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(_QWORD *)(v52 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x80000002356C80D0), (v53 & 1) != 0))
  {
    v134 = v10;
    v133 = v7;
    v132 = v4;
    v136 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v54 = String.lowercased()();
    swift_bridgeObjectRelease();
    v55 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, v54._countAndFlagsBits, (unint64_t)v54._object);
    v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D116OIegnrzr_TR93_s19_RealityKit_SwiftUI0A17ViewCameraContentV18updateDebugOptions0aB06ARViewC0iJ0VyFSSSshcfu_Tf3nnnpf_nTf1cn_n(v55);
    swift_bridgeObjectRelease();
    v137 = v56;
    v58 = *(_QWORD *)(v56 + 16);
    v59 = v151;
    if (v58)
    {
      v60 = (uint64_t *)(v137 + 40);
      v131 = "REALITYKIT_VISUALIZE_OPTIONS";
      v130 = 0x80000002356C80F0;
      *(_QWORD *)&v57 = 136315138;
      v129 = v57;
      v128[1] = MEMORY[0x24BEE4AD8] + 8;
      v147 = v46;
      while (1)
      {
        v160 = v60;
        v67 = *(v60 - 1);
        v68 = *v60;
        v162[0] = v67;
        v162[1] = v68;
        swift_bridgeObjectRetain();
        v69 = v155;
        static CharacterSet.whitespaces.getter();
        lazy protocol witness table accessor for type String and conformance String();
        v70 = StringProtocol.trimmingCharacters(in:)();
        v72 = v71;
        (*(void (**)(char *, uint64_t))(v156 + 8))(v69, v157);
        swift_bridgeObjectRelease();
        if (v70 == 0x73636973796870 && v72 == 0xE700000000000000)
        {
          v158 = v58;
          swift_bridgeObjectRelease();
          v75 = v159;
          goto LABEL_15;
        }
        v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v75 = v159;
        if ((v74 & 1) != 0)
        {
          v158 = v58;
          swift_bridgeObjectRelease();
LABEL_15:
          static ARView.DebugOptions.showPhysics.getter();
          v76 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
          v77 = v153;
          v76(v153, v75, v20);
          v78 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE7F20];
          lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7F20], MEMORY[0x24BDE7F38]);
          dispatch thunk of SetAlgebra.intersection(_:)();
          lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, v78, MEMORY[0x24BDE7F30]);
          v79 = dispatch thunk of static Equatable.== infix(_:_:)();
          v80 = &v152[*(int *)(v161 + 48)];
          v81 = (v79 & 1) == 0;
          *v152 = v81;
          if ((v79 & 1) != 0)
          {
            v61 = *(void (**)(BOOL *, char *, uint64_t))(v21 + 32);
            v61(v80, v46, v20);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v21 + 8))(v46, v20);
            v76((char *)v80, v59, v20);
            v76(v77, v59, v20);
            dispatch thunk of SetAlgebra.formUnion(_:)();
            v61 = *(void (**)(BOOL *, char *, uint64_t))(v21 + 32);
          }
          v58 = v158;
          v62 = v160;
          v63 = *(int *)(v161 + 48);
          v64 = v154;
          v65 = &v154[v63];
          *v154 = v81;
          v61(&v64[v63], (char *)v80, v20);
          v66 = *(void (**)(BOOL *, uint64_t))(v21 + 8);
          v66(v65, v20);
          v66((BOOL *)v59, v20);
          goto LABEL_7;
        }
        v82 = v149;
        v83 = v21;
        if (v70 == 0x69726F646C726F77 && v72 == 0xEB000000006E6967)
        {
          swift_bridgeObjectRelease();
          v84 = v150;
LABEL_22:
          static ARView.DebugOptions.showWorldOrigin.getter();
          v86 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
          v87 = v153;
          v86(v153, v75, v20);
          v88 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE7F20];
          v158 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7F20], MEMORY[0x24BDE7F38]);
          dispatch thunk of SetAlgebra.intersection(_:)();
          lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, v88, MEMORY[0x24BDE7F30]);
          v89 = dispatch thunk of static Equatable.== infix(_:_:)();
          v90 = &v148[*(int *)(v161 + 48)];
          v91 = (v89 & 1) == 0;
          *v148 = v91;
          if ((v89 & 1) != 0)
          {
            v92 = *(void (**)(BOOL *, char *, uint64_t))(v83 + 32);
            v92(v90, v84, v20);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v20);
            v86((char *)v90, v82, v20);
            v86(v87, v82, v20);
            dispatch thunk of SetAlgebra.formUnion(_:)();
            v92 = *(void (**)(BOOL *, char *, uint64_t))(v83 + 32);
          }
          v21 = v83;
          v62 = v160;
          v93 = *(int *)(v161 + 48);
          v94 = v154;
          v95 = &v154[v93];
          *v154 = v91;
          v92(&v94[v93], (char *)v90, v20);
          v96 = *(void (**)(BOOL *, uint64_t))(v83 + 8);
          v96(v95, v20);
          v96((BOOL *)v82, v20);
          v46 = v147;
          v59 = v151;
          goto LABEL_7;
        }
        v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v84 = v150;
        if ((v85 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_22;
        }
        if (v70 == 0x726F726F68636E61 && v72 == 0xED0000736E696769)
        {
          swift_bridgeObjectRelease();
          v97 = v146;
          v21 = v83;
          goto LABEL_31;
        }
        v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v97 = v146;
        v21 = v83;
        if ((v98 & 1) != 0)
        {
          swift_bridgeObjectRelease();
LABEL_31:
          v99 = v144;
          static ARView.DebugOptions.showAnchorOrigins.getter();
          v100 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
          v101 = v153;
          v100(v153, v75, v20);
          v102 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE7F20];
          v135 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7F20], MEMORY[0x24BDE7F38]);
          dispatch thunk of SetAlgebra.intersection(_:)();
          lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, v102, MEMORY[0x24BDE7F30]);
          v103 = dispatch thunk of static Equatable.== infix(_:_:)();
          v104 = &v145[*(int *)(v161 + 48)];
          v105 = (v103 & 1) == 0;
          *v145 = v105;
          v59 = v151;
          v158 = (uint64_t)v104;
          if ((v103 & 1) == 0)
            goto LABEL_52;
          goto LABEL_32;
        }
        v46 = v147;
        if (v70 == 0x6567726F68636E61 && v72 == 0xEE00797274656D6FLL)
        {
          swift_bridgeObjectRelease();
          v97 = v143;
          v101 = v153;
          v59 = v151;
LABEL_38:
          v99 = v142;
          static ARView.DebugOptions.showAnchorGeometry.getter();
          v100 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
          v100(v101, v75, v20);
          v108 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE7F20];
          v135 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7F20], MEMORY[0x24BDE7F38]);
          dispatch thunk of SetAlgebra.intersection(_:)();
          lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, v108, MEMORY[0x24BDE7F30]);
          v109 = dispatch thunk of static Equatable.== infix(_:_:)();
          v110 = ~v109;
          v111 = *(int *)(v161 + 48);
          v112 = &v165;
          goto LABEL_51;
        }
        v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v97 = v143;
        v59 = v151;
        if ((v107 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v101 = v153;
          goto LABEL_38;
        }
        if (v70 == 0x7065727574616566 && v72 == 0xED000073746E696FLL)
          break;
        v113 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v97 = v141;
        if ((v113 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
        if (v70 == 0xD000000000000012 && v72 == v130)
        {
          swift_bridgeObjectRelease();
          v97 = v139;
        }
        else
        {
          v115 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v97 = v139;
          if ((v115 & 1) == 0)
          {
            if (one-time initialization token for logger != -1)
              swift_once();
            v122 = type metadata accessor for Logger();
            __swift_project_value_buffer(v122, (uint64_t)logger);
            swift_bridgeObjectRetain();
            v123 = Logger.logObject.getter();
            v124 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v123, v124))
            {
              v125 = swift_slowAlloc();
              v158 = swift_slowAlloc();
              v162[0] = v158;
              *(_DWORD *)v125 = v129;
              swift_bridgeObjectRetain();
              *(_QWORD *)(v125 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, v162);
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_2355E9000, v123, v124, "Unknown Visualization Option: %s", (uint8_t *)v125, 0xCu);
              v126 = v158;
              swift_arrayDestroy();
              MEMORY[0x23B7D3428](v126, -1, -1);
              MEMORY[0x23B7D3428](v125, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            v62 = v160;
            goto LABEL_7;
          }
          swift_bridgeObjectRelease();
        }
        v99 = v138;
        static ARView.DebugOptions.showSceneUnderstanding.getter();
        v100 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
        v101 = v153;
        v100(v153, v75, v20);
        v116 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE7F20];
        v135 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7F20], MEMORY[0x24BDE7F38]);
        dispatch thunk of SetAlgebra.intersection(_:)();
        lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, v116, MEMORY[0x24BDE7F30]);
        v109 = dispatch thunk of static Equatable.== infix(_:_:)();
        v110 = ~v109;
        v111 = *(int *)(v161 + 48);
        v112 = &v163;
LABEL_51:
        v117 = (BOOL *)*((_QWORD *)v112 - 32);
        v104 = &v117[v111];
        v105 = (v109 & 1) == 0;
        *v117 = v105;
        v158 = (uint64_t)&v117[v111];
        if ((v110 & 1) != 0)
        {
LABEL_52:
          (*(void (**)(char *, uint64_t))(v21 + 8))(v97, v20);
          v100((char *)v104, v99, v20);
          v100(v101, v99, v20);
          dispatch thunk of SetAlgebra.formUnion(_:)();
          v106 = *(void (**)(BOOL *, char *, uint64_t))(v21 + 32);
          goto LABEL_53;
        }
LABEL_32:
        v106 = *(void (**)(BOOL *, char *, uint64_t))(v21 + 32);
        v106(v104, v97, v20);
LABEL_53:
        v46 = v147;
        v118 = *(int *)(v161 + 48);
        v119 = v154;
        v120 = &v154[v118];
        *v154 = v105;
        v106(&v119[v118], (char *)v158, v20);
        v121 = *(void (**)(BOOL *, uint64_t))(v21 + 8);
        v121(v120, v20);
        v121((BOOL *)v99, v20);
        v62 = v160;
LABEL_7:
        v60 = v62 + 2;
        if (!--v58)
          goto LABEL_61;
      }
      swift_bridgeObjectRelease();
      v97 = v141;
LABEL_44:
      v99 = v140;
      static ARView.DebugOptions.showFeaturePoints.getter();
      v100 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      v101 = v153;
      v100(v153, v75, v20);
      v114 = (uint64_t (*)(uint64_t))MEMORY[0x24BDE7F20];
      v135 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7F20], MEMORY[0x24BDE7F38]);
      dispatch thunk of SetAlgebra.intersection(_:)();
      lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions, v114, MEMORY[0x24BDE7F30]);
      v109 = dispatch thunk of static Equatable.== infix(_:_:)();
      v110 = ~v109;
      v111 = *(int *)(v161 + 48);
      v112 = &v164;
      goto LABEL_51;
    }
LABEL_61:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v136, v159, v20);
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(a1, v159, v20);
  }
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  unint64_t v41;

  if (a1 < 0)
    goto LABEL_41;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = MEMORY[0x24BEE4AF8];
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 15;
  v9 = HIBYTE(a4) & 0xF;
  if (!a1 || ((a4 & 0x2000000000000000) != 0 ? (v10 = HIBYTE(a4) & 0xF) : (v10 = a3 & 0xFFFFFFFFFFFFLL), !v10))
  {
    if ((a4 & 0x2000000000000000) == 0)
      v9 = a3 & 0xFFFFFFFFFFFFLL;
    v26 = 7;
    if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
      v26 = 11;
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v26 | (v9 << 16), v8, a2 & 1, v7);
    swift_bridgeObjectRelease();
    v11 = *(_QWORD **)(v7 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return (uint64_t)v11;
  }
  v38 = a1;
  v41 = 4 * v10;
  v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v12 = 15;
  v13 = 15;
  v39 = v7;
  do
  {
    if (String.subscript.getter() == 44 && v14 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        v12 = String.index(after:)();
        continue;
      }
    }
    if (v13 >> 14 == v12 >> 14 && (a2 & 1) != 0)
    {
      v12 = String.index(after:)();
      *(_QWORD *)(v8 + 16) = v12;
      v13 = v12;
      continue;
    }
    if (v12 >> 14 < v13 >> 14)
      goto LABEL_40;
    v16 = String.subscript.getter();
    v18 = v17;
    v20 = v19;
    v22 = v21;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v24 = v11[2];
    v23 = v11[3];
    if (v24 >= v23 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v11);
    v11[2] = v24 + 1;
    v25 = &v11[4 * v24];
    v25[4] = v16;
    v25[5] = v18;
    v25[6] = v20;
    v25[7] = v22;
    *(_QWORD *)(v39 + 16) = v11;
    v13 = String.index(after:)();
    *(_QWORD *)(v8 + 16) = v13;
    v12 = v13;
    if (v11[2] == v38)
      break;
  }
  while (v41 != v12 >> 14);
  if (v41 == v13 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return (uint64_t)v11;
  }
  if (v41 >= v13 >> 14)
  {
    v27 = String.subscript.getter();
    v29 = v28;
    v31 = v30;
    v33 = v32;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v35 = v11[2];
    v34 = v11[3];
    if (v35 >= v34 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v11);
    v11[2] = v35 + 1;
    v36 = &v11[4 * v35];
    v36[4] = v27;
    v36[5] = v29;
    v36[6] = v31;
    v36[7] = v33;
    *(_QWORD *)(v39 + 16) = v11;
    goto LABEL_38;
  }
LABEL_40:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_41:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void closure #1 in RealityViewCameraContent.cameraControlDragGesture()(uint64_t a1, id *a2)
{
  float64_t v3;
  float64x2_t v4;
  float64_t v5;

  type metadata accessor for RealityViewCameraContent(0);
  objc_msgSend(*a2, sel_frame);
  v4.f64[0] = v3;
  _proto_RealityViewCameraController_v1.onDragGestureChanged(_:viewport:)(v4, v5);
}

float32x2_t closure #2 in RealityViewCameraContent.cameraControlDragGesture()(uint64_t a1, id *a2)
{
  float32x2_t *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float v11;
  double v12;
  double v13;
  float32x2_t v14;
  float v15;
  float32x2_t result;
  float v17;
  int32x2_t v18;

  v3 = *(float32x2_t **)((char *)a2 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 48));
  objc_msgSend(*a2, sel_frame);
  v3[50].i8[2] = 0;
  if (v4 > v5)
    v6 = v4;
  else
    v6 = v5;
  *(float *)&v6 = v6;
  v18 = *(int32x2_t *)&v6;
  DragGesture.Value.predictedEndLocation.getter();
  v8 = v7;
  DragGesture.Value.location.getter();
  v10 = (v8 - v9) * 4.0;
  DragGesture.Value.location.getter();
  v11 = v10;
  v17 = v11;
  DragGesture.Value.predictedEndLocation.getter();
  v13 = v12;
  DragGesture.Value.location.getter();
  DragGesture.Value.location.getter();
  v15 = (v13 - *(double *)&v14) * 4.0;
  v14.f32[0] = v17;
  v14.f32[1] = -v15;
  result = vdiv_f32(v14, (float32x2_t)vdup_lane_s32(v18, 0));
  v3[44] = result;
  return result;
}

uint64_t RealityViewCameraContent.snapshot(saveToHDR:completion:)()
{
  return dispatch thunk of ARView.snapshot(saveToHDR:completion:)();
}

uint64_t RealityViewCameraContent._proto_findEntity(named:)()
{
  uint64_t v0;

  dispatch thunk of ARView.scene.getter();
  v0 = dispatch thunk of Scene.findEntity(named:)();
  swift_release();
  return v0;
}

uint64_t RealityViewCameraContent._proto_findEntity(id:)()
{
  uint64_t v0;

  dispatch thunk of ARView.scene.getter();
  v0 = dispatch thunk of Scene.findEntity(id:)();
  swift_release();
  return v0;
}

uint64_t RealityViewCameraContent._proto_performQuery(_:)()
{
  dispatch thunk of ARView.scene.getter();
  Scene.performQuery(_:)();
  return swift_release();
}

uint64_t RealityViewCameraContent._proto_cameraController_v1.getter()
{
  type metadata accessor for RealityViewCameraContent(0);
  return swift_retain();
}

uint64_t RealityViewCameraContent._proto_cameraController_v1.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for RealityViewCameraContent(0) + 48);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*RealityViewCameraContent._proto_cameraController_v1.modify())(_QWORD)
{
  type metadata accessor for RealityViewCameraContent(0);
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

uint64_t RealityViewCameraContent._proto_allowCameraControls_v1.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 52));
}

uint64_t RealityViewCameraContent._proto_allowCameraControls_v1.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for RealityViewCameraContent(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*RealityViewCameraContent._proto_allowCameraControls_v1.modify())(_QWORD)
{
  type metadata accessor for RealityViewCameraContent(0);
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

uint64_t RealityViewCameraContent._proto_debugOptions_v1.getter()
{
  return dispatch thunk of ARView.debugOptions.getter();
}

uint64_t RealityViewCameraContent._proto_debugOptions_v1.setter(uint64_t a1)
{
  return RealityViewCameraContent._proto_debugOptions_v1.setter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDE7F20], (void (*)(char *))MEMORY[0x24BDE7F50]);
}

void (*RealityViewCameraContent._proto_debugOptions_v1.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for ARView.DebugOptions();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  dispatch thunk of ARView.debugOptions.getter();
  return RealityViewCameraContent._proto_debugOptions_v1.modify;
}

void RealityViewCameraContent._proto_debugOptions_v1.modify(uint64_t a1, char a2)
{
  RealityViewCameraContent._proto_debugOptions_v1.modify(a1, a2, (void (*)(void *))MEMORY[0x24BDE7F50]);
}

uint64_t RealityViewCameraContent._proto_environment_v1.getter()
{
  return dispatch thunk of ARView.environment.getter();
}

uint64_t RealityViewCameraContent._proto_environment_v1.setter(uint64_t a1)
{
  return RealityViewCameraContent._proto_debugOptions_v1.setter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDE7EC0], MEMORY[0x24BDE7ED8]);
}

void (*RealityViewCameraContent._proto_environment_v1.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for ARView.Environment();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  dispatch thunk of ARView.environment.getter();
  return RealityViewCameraContent._proto_environment_v1.modify;
}

void RealityViewCameraContent._proto_environment_v1.modify(uint64_t a1, char a2)
{
  RealityViewCameraContent._proto_debugOptions_v1.modify(a1, a2, MEMORY[0x24BDE7ED8]);
}

uint64_t RealityViewCameraContent.__proto_antialiasingMode_v1.getter()
{
  return dispatch thunk of ARView.__proto_antialiasingMode_v1.getter();
}

uint64_t RealityViewCameraContent.__proto_antialiasingMode_v1.setter(uint64_t a1)
{
  return RealityViewCameraContent._proto_debugOptions_v1.setter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDE7CF8], MEMORY[0x24BDE8108]);
}

void (*RealityViewCameraContent.__proto_antialiasingMode_v1.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for _Proto_AntialiasingMode_v1();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  dispatch thunk of ARView.__proto_antialiasingMode_v1.getter();
  return RealityViewCameraContent.__proto_antialiasingMode_v1.modify;
}

void RealityViewCameraContent.__proto_antialiasingMode_v1.modify(uint64_t a1, char a2)
{
  RealityViewCameraContent._proto_debugOptions_v1.modify(a1, a2, MEMORY[0x24BDE8108]);
}

uint64_t RealityViewCameraContent._proto_physicsOrigin_v1.getter()
{
  return ARView.physicsOrigin.getter();
}

uint64_t RealityViewCameraContent._proto_physicsOrigin_v1.setter()
{
  return ARView.physicsOrigin.setter();
}

uint64_t (*RealityViewCameraContent._proto_physicsOrigin_v1.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = ARView.physicsOrigin.getter();
  return RealityViewCameraContent._proto_physicsOrigin_v1.modify;
}

uint64_t RealityViewCameraContent._proto_physicsOrigin_v1.modify(uint64_t *a1, char a2)
{
  return RealityViewCameraContent.audioListener.modify(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FD8]);
}

uint64_t (*RealityViewCameraContent._proto_audioListener_v1.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = dispatch thunk of ARView.audioListener.getter();
  return RealityViewCameraContent.audioListener.modify;
}

uint64_t RealityViewCameraContent.audioListener.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  if ((a2 & 1) == 0)
    return a3(*a1);
  v4 = swift_retain();
  a3(v4);
  return swift_release();
}

uint64_t RealityViewCameraContent._proto_cameraMode_v1.getter()
{
  return ARView.cameraMode.getter();
}

uint64_t RealityViewCameraContent._proto_cameraMode_v1.setter(uint64_t a1)
{
  return RealityViewCameraContent._proto_debugOptions_v1.setter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDE7E28], (void (*)(char *))MEMORY[0x24BDE7E40]);
}

void (*RealityViewCameraContent._proto_cameraMode_v1.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for ARView.CameraMode();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  ARView.cameraMode.getter();
  return RealityViewCameraContent._proto_cameraMode_v1.modify;
}

void RealityViewCameraContent._proto_cameraMode_v1.modify(uint64_t a1, char a2)
{
  RealityViewCameraContent._proto_debugOptions_v1.modify(a1, a2, (void (*)(void *))MEMORY[0x24BDE7E40]);
}

uint64_t RealityViewCameraContent._proto_renderOptions_v1.getter()
{
  return ARView.renderOptions.getter();
}

uint64_t key path setter for RealityViewCameraContent._proto_debugOptions_v1 : RealityViewCameraContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v17;

  v8 = a5(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v17 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15((char *)&v17 - v13, a1, v8);
  v15(v12, (uint64_t)v14, v8);
  a6(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
}

uint64_t RealityViewCameraContent._proto_renderOptions_v1.setter(uint64_t a1)
{
  return RealityViewCameraContent._proto_debugOptions_v1.setter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDE7FA0], MEMORY[0x24BDE7FF0]);
}

uint64_t RealityViewCameraContent._proto_debugOptions_v1.setter(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(char *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = a2(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v10 - v7, a1, v5);
  a3(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

void (*RealityViewCameraContent._proto_renderOptions_v1.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for ARView.RenderOptions();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  ARView.renderOptions.getter();
  return RealityViewCameraContent._proto_renderOptions_v1.modify;
}

void RealityViewCameraContent._proto_renderOptions_v1.modify(uint64_t a1, char a2)
{
  RealityViewCameraContent._proto_debugOptions_v1.modify(a1, a2, MEMORY[0x24BDE7FF0]);
}

void RealityViewCameraContent._proto_debugOptions_v1.modify(uint64_t a1, char a2, void (*a3)(void *))
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, void *, uint64_t);
  void (*v11)(void *, uint64_t);

  v4 = *(void **)a1;
  v5 = *(void **)(*(_QWORD *)a1 + 32);
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(void **)(*(_QWORD *)a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((a2 & 1) != 0)
  {
    v10 = *(void (**)(void *, void *, uint64_t))(v8 + 16);
    v10(*(void **)(*(_QWORD *)a1 + 32), v6, v9);
    v10(v7, v5, v9);
    a3(v7);
    v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v5, v9);
  }
  else
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v8 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32), v6, v9);
    a3(v5);
    v11 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v11(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v4);
}

uint64_t protocol witness for RealityViewContentProtocol.entities.getter in conformance RealityViewCameraContent@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  return swift_retain();
}

uint64_t protocol witness for RealityViewContentProtocol.entities.setter in conformance RealityViewCameraContent(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t result;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ObjectCaptureSession.Error(v1, (uint64_t)v3, type metadata accessor for RealityViewCameraContent);
  type metadata accessor for Entity();
  v4 = static Entity.== infix(_:_:)();
  result = swift_release();
  if ((v4 & 1) != 0)
    return outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v3, type metadata accessor for RealityViewCameraContent);
  __break(1u);
  return result;
}

void (*protocol witness for RealityViewContentProtocol.entities.modify in conformance RealityViewCameraContent(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = RealityViewCameraContent.entities.modify(v2);
  return protocol witness for RealityViewContentProtocol.entities.modify in conformance RealityViewCameraContent;
}

void protocol witness for RealityViewContentProtocol.entities.modify in conformance RealityViewCameraContent(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

Swift::UInt32 __swiftcall RealityViewCameraContent.getLayerHandle()()
{
  return ARView.getLayerHandle()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RealityViewCameraConvertible()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & 1;
}

void one-time initialization function for defaultValue()
{
  static RealityViewCameraConvertibleKey.defaultValue = MEMORY[0x24BEE4AF8];
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance RealityViewCameraConvertibleKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static RealityViewCameraConvertibleKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance RealityViewCameraConvertibleKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t View.realityViewCameraControls(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.realityViewCameraControls.getter()
{
  lazy protocol witness table accessor for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey();
  return EnvironmentValues.subscript.getter();
}

uint64_t key path getter for EnvironmentValues.realityViewCameraControls : EnvironmentValues()
{
  lazy protocol witness table accessor for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey();
  return EnvironmentValues.subscript.getter();
}

uint64_t key path setter for EnvironmentValues.realityViewCameraControls : EnvironmentValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v2 = type metadata accessor for CameraControls();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v11 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  lazy protocol witness table accessor for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey();
  EnvironmentValues.subscript.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t EnvironmentValues.realityViewCameraControls.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = type metadata accessor for CameraControls();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  lazy protocol witness table accessor for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey();
  EnvironmentValues.subscript.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*EnvironmentValues.realityViewCameraControls.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for CameraControls();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  v3[6] = lazy protocol witness table accessor for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey();
  EnvironmentValues.subscript.getter();
  return EnvironmentValues.realityViewCameraControls.modify;
}

void EnvironmentValues.realityViewCameraControls.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 32), v3[5], v3[1]);
  v5 = (void *)v3[5];
  v6 = (void *)v3[3];
  v7 = (void *)v3[4];
  v8 = v3[1];
  v9 = v3[2];
  if ((a2 & 1) != 0)
  {
    v4(v3[3], v3[4], v3[1]);
    EnvironmentValues.subscript.setter();
    v10 = *(void (**)(void *, uint64_t))(v9 + 8);
    v10(v7, v8);
  }
  else
  {
    EnvironmentValues.subscript.setter();
    v10 = *(void (**)(void *, uint64_t))(v9 + 8);
  }
  v10(v5, v8);
  free(v5);
  free(v7);
  free(v6);
  free(v3);
}

uint64_t one-time initialization function for defaultValue()
{
  uint64_t v0;

  v0 = type metadata accessor for CameraControls();
  __swift_allocate_value_buffer(v0, static EnvironmentValues.CameraControlsKey.defaultValue);
  __swift_project_value_buffer(v0, (uint64_t)static EnvironmentValues.CameraControlsKey.defaultValue);
  return static CameraControls.none.getter();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.CameraControlsKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = type metadata accessor for CameraControls();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static EnvironmentValues.CameraControlsKey.defaultValue);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.CameraControlsKey()
{
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type CameraControls and conformance CameraControls, (uint64_t (*)(uint64_t))MEMORY[0x24BDE74B0], MEMORY[0x24BDE74C0]);
  return static EnvironmentKey<>._valuesEqual(_:_:)();
}

uint64_t static RealityViewCamera.spatialTracking.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for RealityViewCamera(0);
  result = static CameraControls.none.getter();
  *a1 = 0;
  *((_BYTE *)a1 + *(int *)(v2 + 24)) = 1;
  return result;
}

uint64_t static RealityViewEnvironment.skybox(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

void RealityViewRenderingEffects.motionBlur.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *RealityViewRenderingEffects.motionBlur.setter(_QWORD *result)
{
  _QWORD *v1;

  *v1 = *result;
  return result;
}

uint64_t (*RealityViewRenderingEffects.motionBlur.modify())()
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

void RealityViewRenderingEffects.depthOfField.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

_QWORD *RealityViewRenderingEffects.depthOfField.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*RealityViewRenderingEffects.depthOfField.modify())()
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

void RealityViewRenderingEffects.cameraGrain.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

_QWORD *RealityViewRenderingEffects.cameraGrain.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *result;
  return result;
}

uint64_t (*RealityViewRenderingEffects.cameraGrain.modify())()
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

uint64_t RealityViewRenderingEffects.antialiasing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RealityViewRenderingEffects(0) + 28);
  v4 = type metadata accessor for AntialiasingMode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RealityViewRenderingEffects.antialiasing.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RealityViewRenderingEffects(0) + 28);
  v4 = type metadata accessor for AntialiasingMode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*RealityViewRenderingEffects.antialiasing.modify())(_QWORD)
{
  type metadata accessor for RealityViewRenderingEffects(0);
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

void static RealityViewDynamicRange.default.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t RealityViewRenderingEffects.dynamicRange.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for RealityViewRenderingEffects(0);
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t RealityViewRenderingEffects.dynamicRange.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for RealityViewRenderingEffects(0);
  *(_QWORD *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*RealityViewRenderingEffects.dynamicRange.modify())(_QWORD)
{
  type metadata accessor for RealityViewRenderingEffects(0);
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

void static RealityViewDynamicRange._hdrRendering.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void RealityViewDynamicRange.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static RealityViewDynamicRange.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int RealityViewRenderingEffectMode.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance RealityViewDynamicRange()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RealityViewRenderingEffectMode()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  return specialized Environment.wrappedValue.getter(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, (uint64_t (*)(_QWORD))MEMORY[0x24BDEB418], 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Image.DynamicRange?>.Content);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v2, (uint64_t)v10, &demangling cache variable for type metadata for Environment<Image.DynamicRange?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
    return outlined init with take of Animation?((uint64_t)v10, a1, &demangling cache variable for type metadata for Image.DynamicRange?);
  v12 = static os_log_type_t.fault.getter();
  v13 = static Log.runtimeIssuesLog.getter();
  v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v18[1] = a1;
    v17 = v16;
    v19 = v16;
    *(_DWORD *)v15 = 136315138;
    v18[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x80000002356C8170, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2355E9000, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7D3428](v17, -1, -1);
    MEMORY[0x23B7D3428](v15, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  os_log_type_t v20;
  NSObject *v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = static os_log_type_t.fault.getter();
    v21 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v21, v20))
    {
      v26 = a4;
      v22 = swift_slowAlloc();
      v27 = a5;
      v23 = (uint8_t *)v22;
      v24 = swift_slowAlloc();
      v30 = v24;
      *(_DWORD *)v23 = 136315138;
      v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v26, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2355E9000, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7D3428](v24, -1, -1);
      MEMORY[0x23B7D3428](v23, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for EnvironmentValues();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  if ((a2 & 1) == 0)
  {
    v8 = static os_log_type_t.fault.getter();
    v9 = static Log.runtimeIssuesLog.getter();
    v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v15 = v12;
      *(_DWORD *)v11 = 136315138;
      v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000002356C80B0, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2355E9000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7D3428](v12, -1, -1);
      MEMORY[0x23B7D3428](v11, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v15;
  }
  return a1;
}

uint64_t key path getter for _RealityViewCameraModel.makeTaskComplete : _RealityViewCameraModel@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for _RealityViewCameraModel.makeTaskComplete : _RealityViewCameraModel()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t key path setter for EnvironmentValues.allowedDynamicRange : EnvironmentValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image.DynamicRange?);
  MEMORY[0x24BDAC7A8](v2);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for Image.DynamicRange?);
  return EnvironmentValues.allowedDynamicRange.setter();
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = String.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<KeyframeAnimation<PlatterAnimVar>.Keyframe>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CameraPathManager.PoseSample>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DynamicScanVolumeEstimator.SphereSample>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FreeformCloudRenderer.AnchorMetalResource>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 95;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 7);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<geom_interpolating_key_3f>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TubeGenerator<CameraPathVertex>.CurvePoint>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InFlightQueue<FreeformCloudRenderer.ResourceEntry>.Entry>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContinuousShotCircle.ShotData>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectCaptureCubeVertex>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CoveragePointCloud>, (uint64_t (*)(_QWORD))type metadata accessor for CoveragePointCloud);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<InFlightQueue<CoveragePointRenderer.ResourceEntry>.Entry>, &demangling cache variable for type metadata for InFlightQueue<CoveragePointRenderer.ResourceEntry>.Entry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<InFlightQueue<FullscreenCoveragePointsRenderer.ResourceEntry>.Entry>, (uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FullscreenCoveragePointsRenderer.ResourceEntry>.Entry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RealityViewCameraConvertible>, type metadata accessor for RealityViewCameraConvertible);
}

uint64_t sub_23568D444()
{
  lazy protocol witness table accessor for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey();
  return EnvironmentValues.subscript.getter();
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for EnvironmentValues.CameraControlsKey, &unk_2506BD198);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.CameraControlsKey and conformance EnvironmentValues.CameraControlsKey);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in RealityViewCameraContent.Body<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type RealityViewRenderingEffectMode and conformance RealityViewRenderingEffectMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RealityViewRenderingEffectMode and conformance RealityViewRenderingEffectMode;
  if (!lazy protocol witness table cache variable for type RealityViewRenderingEffectMode and conformance RealityViewRenderingEffectMode)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for RealityViewRenderingEffectMode, &type metadata for RealityViewRenderingEffectMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityViewRenderingEffectMode and conformance RealityViewRenderingEffectMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RealityViewDynamicRange and conformance RealityViewDynamicRange()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RealityViewDynamicRange and conformance RealityViewDynamicRange;
  if (!lazy protocol witness table cache variable for type RealityViewDynamicRange and conformance RealityViewDynamicRange)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for RealityViewDynamicRange, &type metadata for RealityViewDynamicRange);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityViewDynamicRange and conformance RealityViewDynamicRange);
  }
  return result;
}

uint64_t sub_23568D5D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return swift_retain();
}

uint64_t sub_23568D5E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for RealityViewCameraContent(0);
  return outlined init with copy of ObjectCaptureSession.Error(a1 + *(int *)(v4 + 32), a2, type metadata accessor for RealityViewCamera);
}

uint64_t sub_23568D628@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 36));
  return swift_retain();
}

uint64_t sub_23568D660@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for RealityViewCameraContent(0) + 40));
  return swift_retain();
}

uint64_t sub_23568D698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FC8]);
}

uint64_t sub_23568D6A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for RealityViewCameraContent(0);
  return outlined init with copy of ObjectCaptureSession.Error(a1 + *(int *)(v4 + 44), a2, type metadata accessor for RealityViewRenderingEffects);
}

uint64_t sub_23568D6E8()
{
  return dispatch thunk of ARView.debugOptions.getter();
}

uint64_t sub_23568D708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RealityViewCameraContent._proto_debugOptions_v1 : RealityViewCameraContent(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDE7F20], (void (*)(char *))MEMORY[0x24BDE7F50]);
}

uint64_t sub_23568D72C()
{
  return dispatch thunk of ARView.environment.getter();
}

uint64_t sub_23568D74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RealityViewCameraContent._proto_debugOptions_v1 : RealityViewCameraContent(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDE7EC0], MEMORY[0x24BDE7ED8]);
}

uint64_t sub_23568D770()
{
  return dispatch thunk of ARView.__proto_antialiasingMode_v1.getter();
}

uint64_t sub_23568D790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RealityViewCameraContent._proto_debugOptions_v1 : RealityViewCameraContent(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDE7CF8], MEMORY[0x24BDE8108]);
}

uint64_t sub_23568D7B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ARView.physicsOrigin.getter();
  *a1 = result;
  return result;
}

uint64_t sub_23568D7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FD8]);
}

uint64_t sub_23568D7E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of ARView.audioListener.getter();
  *a1 = result;
  return result;
}

uint64_t sub_23568D810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7FC8]);
}

uint64_t keypath_set_10Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = swift_retain();
  return a5(v6);
}

uint64_t sub_23568D848()
{
  return ARView.cameraMode.getter();
}

uint64_t sub_23568D868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RealityViewCameraContent._proto_debugOptions_v1 : RealityViewCameraContent(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDE7E28], (void (*)(char *))MEMORY[0x24BDE7E40]);
}

uint64_t sub_23568D88C()
{
  return ARView.renderOptions.getter();
}

uint64_t sub_23568D8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for RealityViewCameraContent._proto_debugOptions_v1 : RealityViewCameraContent(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDE7FA0], MEMORY[0x24BDE7FF0]);
}

uint64_t type metadata completion function for RealityViewCameraContent.Body()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for RealityViewCameraContent.Body(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = *a2;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 32) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    *a1 = v8;
    a1 = (_QWORD *)(v8 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v11 = ~v6;
    v12 = a2[1];
    *a1 = v8;
    a1[1] = v12;
    v13 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    v14 = (unint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    v15 = *v14;
    swift_retain();
    if (v15 < 0xFFFFFFFF)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
    }
    else
    {
      v16 = v14[1];
      *(_QWORD *)v13 = v15;
      *(_QWORD *)(v13 + 8) = v16;
      swift_retain();
    }
    v17 = (char *)v14 + v6;
    v18 = (v13 + v6 + 16) & v11;
    v19 = (unint64_t)(v17 + 16) & v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v18, v19, v4);
    v20 = (v7 + v18) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v7 + v19) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    LOBYTE(v19) = *(_BYTE *)(v21 + 16);
    outlined copy of StateObject<_RealityViewCameraModel>.Storage();
    *(_QWORD *)v20 = v22;
    *(_QWORD *)(v20 + 8) = v23;
    *(_BYTE *)(v20 + 16) = v19;
  }
  return a1;
}

uint64_t outlined copy of StateObject<_RealityViewCameraModel>.Storage()
{
  return swift_retain();
}

uint64_t destroy for RealityViewCameraContent.Body(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  swift_release();
  v4 = (_QWORD *)((a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v4 >= 0xFFFFFFFFuLL)
    swift_release();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v4
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return outlined consume of StateObject<_RealityViewCameraModel>.Storage();
}

_QWORD *initializeWithCopy for RealityViewCameraContent.Body(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = (unint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v7;
  swift_retain();
  if (v8 < 0xFFFFFFFF)
  {
    *(_OWORD *)v6 = *(_OWORD *)v7;
  }
  else
  {
    v9 = v7[1];
    *(_QWORD *)v6 = v8;
    *(_QWORD *)(v6 + 8) = v9;
    swift_retain();
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v6 + v11 + 16) & ~v11;
  v13 = ((unint64_t)v7 + v11 + 16) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)v16;
  v18 = *(_QWORD *)(v16 + 8);
  v19 = *(_BYTE *)(v16 + 16);
  outlined copy of StateObject<_RealityViewCameraModel>.Storage();
  *(_QWORD *)v15 = v17;
  *(_QWORD *)(v15 + 8) = v18;
  *(_BYTE *)(v15 + 16) = v19;
  return a1;
}

_QWORD *assignWithCopy for RealityViewCameraContent.Body(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (unint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v11 = v8[1];
      *v7 = v9;
      v7[1] = v11;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v7 = *(_OWORD *)v8;
    goto LABEL_8;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v10 = v8[1];
  *v7 = v9;
  v7[1] = v10;
  swift_retain();
  swift_release();
LABEL_8:
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((unint64_t)v7 + v13 + 16) & ~v13;
  v15 = ((unint64_t)v8 + v13 + 16) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v20 = *(_QWORD *)(v18 + 8);
  v21 = *(_BYTE *)(v18 + 16);
  outlined copy of StateObject<_RealityViewCameraModel>.Storage();
  *(_QWORD *)v17 = v19;
  *(_QWORD *)(v17 + 8) = v20;
  *(_BYTE *)(v17 + 16) = v21;
  outlined consume of StateObject<_RealityViewCameraModel>.Storage();
  return a1;
}

_OWORD *initializeWithTake for RealityViewCameraContent.Body(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v5 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v4 = *(_OWORD *)v5;
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 8);
    *(_QWORD *)v4 = *(_QWORD *)v5;
    *(_QWORD *)(v4 + 8) = v6;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v8 + 16) & ~v8;
  v10 = (v5 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 7;
  v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = v14;
  return a1;
}

_OWORD *assignWithTake for RealityViewCameraContent.Body(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  v5 = (unint64_t)a2 + 23;
  *a1 = *a2;
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (unint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v8 = *v7;
  if (*v6 < 0xFFFFFFFFuLL)
  {
    if (v8 >= 0xFFFFFFFF)
    {
      v10 = v7[1];
      *v6 = v8;
      v6[1] = v10;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }
  if (v8 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v9 = v7[1];
  *v6 = v8;
  v6[1] = v9;
  swift_release();
LABEL_8:
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((unint64_t)v6 + v12 + 16) & ~v12;
  v14 = ((unint64_t)v7 + v12 + 16) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v13, v14);
  v15 = *(_QWORD *)(v11 + 64) + 7;
  v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 16);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = v18;
  outlined consume of StateObject<_RealityViewCameraModel>.Storage();
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewCameraContent.Body(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                    + v7
                                                                    + 16) & ~v7);
    }
    else
    {
      v14 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
  }
  else
  {
    v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 32) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23568DFCC + 4 * byte_2356C0F20[v12]))();
  }
}

void storeEnumTagSinglePayload for RealityViewCameraContent.Body(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 17;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_23568E194()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x23568E208);
}

void sub_23568E19C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23568E1A4);
  JUMPOUT(0x23568E208);
}

void sub_23568E1B4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x23568E208);
}

void sub_23568E1BC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x23568E208);
}

void sub_23568E1C4(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x23568E204);
      JUMPOUT(0x23568E1FCLL);
    }
    JUMPOUT(0x23568E1D0);
  }
  JUMPOUT(0x23568E208);
}

uint64_t ObjC metadata update function for _RealityViewCameraModel()
{
  return type metadata accessor for _RealityViewCameraModel(0);
}

uint64_t type metadata accessor for _RealityViewCameraModel(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for _RealityViewCameraModel);
}

void type metadata completion function for _RealityViewCameraModel()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for RealityViewCameraContent(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Bool>();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void type metadata accessor for Published<Bool>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<Bool>)
  {
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>);
  }
}

char *initializeBufferWithCopyOfBuffer for RealityViewCameraContent(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v7 = a1;
    *((_QWORD *)a1 + 1) = a2[1];
    v8 = a3[6];
    v9 = &a1[v8];
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for GeometryProxy();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    v14 = v4;
    swift_retain();
    if (v13(v10, 1, v11))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[8];
    *(_QWORD *)&v7[a3[7]] = *(char **)((char *)a2 + a3[7]);
    v17 = &v7[v16];
    v18 = (uint64_t)a2 + v16;
    *(_QWORD *)&v7[v16] = *(char **)((char *)a2 + v16);
    v19 = type metadata accessor for RealityViewCamera(0);
    v20 = *(int *)(v19 + 20);
    v33 = v18 + v20;
    v35 = &v17[v20];
    v21 = type metadata accessor for CameraControls();
    v22 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
    swift_retain();
    swift_retain();
    v22(v35, v33, v21);
    v17[*(int *)(v19 + 24)] = *(_BYTE *)(v18 + *(int *)(v19 + 24));
    v23 = a3[10];
    *(_QWORD *)&v7[a3[9]] = *(char **)((char *)a2 + a3[9]);
    *(_QWORD *)&v7[v23] = *(char **)((char *)a2 + v23);
    v24 = a3[11];
    v25 = &v7[v24];
    v26 = (uint64_t)a2 + v24;
    *(_OWORD *)v25 = *(_OWORD *)((char *)a2 + v24);
    *((_QWORD *)v25 + 2) = *(char **)((char *)a2 + v24 + 16);
    v27 = type metadata accessor for RealityViewRenderingEffects(0);
    v28 = *(int *)(v27 + 28);
    v34 = v26 + v28;
    v36 = &v25[v28];
    v29 = type metadata accessor for AntialiasingMode();
    v30 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
    swift_retain();
    swift_retain();
    v30(v36, v34, v29);
    *(_QWORD *)&v25[*(int *)(v27 + 32)] = *(_QWORD *)(v26 + *(int *)(v27 + 32));
    v31 = a3[13];
    *(_QWORD *)&v7[a3[12]] = *(char **)((char *)a2 + a3[12]);
    v7[v31] = *((_BYTE *)a2 + v31);
  }
  swift_retain();
  return v7;
}

uint64_t destroy for RealityViewCameraContent(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  swift_release();
  v4 = (char *)a1 + a2[6];
  v5 = type metadata accessor for GeometryProxy();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  swift_release();
  v7 = (char *)a1 + a2[8];
  swift_release();
  v8 = &v7[*(int *)(type metadata accessor for RealityViewCamera(0) + 20)];
  v9 = type metadata accessor for CameraControls();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release();
  swift_release();
  v10 = (char *)a1 + a2[11];
  v11 = &v10[*(int *)(type metadata accessor for RealityViewRenderingEffects(0) + 28)];
  v12 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  return swift_release();
}

_QWORD *initializeWithCopy for RealityViewCameraContent(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v7 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for GeometryProxy();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v7;
  swift_retain();
  if (v13(v10, 1, v11))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v16 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v17 = (char *)a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)(a2 + v16);
  v19 = type metadata accessor for RealityViewCamera(0);
  v20 = *(int *)(v19 + 20);
  v33 = v18 + v20;
  v35 = &v17[v20];
  v21 = type metadata accessor for CameraControls();
  v22 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  swift_retain();
  swift_retain();
  v22(v35, v33, v21);
  v17[*(int *)(v19 + 24)] = *(_BYTE *)(v18 + *(int *)(v19 + 24));
  v23 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)(a2 + v23);
  v24 = a3[11];
  v25 = (char *)a1 + v24;
  v26 = a2 + v24;
  *(_OWORD *)v25 = *(_OWORD *)(a2 + v24);
  *((_QWORD *)v25 + 2) = *(_QWORD *)(a2 + v24 + 16);
  v27 = type metadata accessor for RealityViewRenderingEffects(0);
  v28 = *(int *)(v27 + 28);
  v34 = v26 + v28;
  v36 = &v25[v28];
  v29 = type metadata accessor for AntialiasingMode();
  v30 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
  swift_retain();
  swift_retain();
  v30(v36, v34, v29);
  *(_QWORD *)&v25[*(int *)(v27 + 32)] = *(_QWORD *)(v26 + *(int *)(v27 + 32));
  v31 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *((_BYTE *)a1 + v31) = *(_BYTE *)(a2 + v31);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RealityViewCameraContent(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v9 = a3[6];
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for GeometryProxy();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  v18 = a3[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  swift_retain();
  swift_release();
  v21 = type metadata accessor for RealityViewCamera(0);
  v22 = *(int *)(v21 + 20);
  v23 = v19 + v22;
  v24 = v20 + v22;
  v25 = type metadata accessor for CameraControls();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  *(_BYTE *)(v19 + *(int *)(v21 + 24)) = *(_BYTE *)(v20 + *(int *)(v21 + 24));
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_retain();
  swift_release();
  v26 = a3[11];
  v27 = (_QWORD *)(a1 + v26);
  v28 = a2 + v26;
  *v27 = *(_QWORD *)(a2 + v26);
  v27[1] = *(_QWORD *)(a2 + v26 + 8);
  v27[2] = *(_QWORD *)(a2 + v26 + 16);
  v29 = type metadata accessor for RealityViewRenderingEffects(0);
  v30 = *(int *)(v29 + 28);
  v31 = (char *)v27 + v30;
  v32 = v28 + v30;
  v33 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  *(_QWORD *)((char *)v27 + *(int *)(v29 + 32)) = *(_QWORD *)(v28 + *(int *)(v29 + 32));
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

_OWORD *initializeWithTake for RealityViewCameraContent(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for GeometryProxy();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for RealityViewCamera(0);
  v16 = *(int *)(v15 + 20);
  v17 = &v13[v16];
  v18 = &v14[v16];
  v19 = type metadata accessor for CameraControls();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
  v20 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
  v21 = a3[11];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_OWORD *)v22 = *(_OWORD *)((char *)a2 + v21);
  *((_QWORD *)v22 + 2) = *(_QWORD *)((char *)a2 + v21 + 16);
  v24 = type metadata accessor for RealityViewRenderingEffects(0);
  v25 = *(int *)(v24 + 28);
  v26 = &v22[v25];
  v27 = &v23[v25];
  v28 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  *(_QWORD *)&v22[*(int *)(v24 + 32)] = *(_QWORD *)&v23[*(int *)(v24 + 32)];
  v29 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *((_BYTE *)a1 + v29) = *((_BYTE *)a2 + v29);
  return a1;
}

uint64_t assignWithTake for RealityViewCameraContent(uint64_t a1, _QWORD *a2, int *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  swift_release();
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for GeometryProxy();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_release();
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)(a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  swift_release();
  v19 = type metadata accessor for RealityViewCamera(0);
  v20 = *(int *)(v19 + 20);
  v21 = v17 + v20;
  v22 = &v18[v20];
  v23 = type metadata accessor for CameraControls();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  *(_BYTE *)(v17 + *(int *)(v19 + 24)) = v18[*(int *)(v19 + 24)];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_release();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_release();
  v24 = a3[11];
  v25 = a1 + v24;
  v26 = (char *)a2 + v24;
  *(_OWORD *)v25 = *(_OWORD *)((char *)a2 + v24);
  *(_QWORD *)(v25 + 16) = *(_QWORD *)((char *)a2 + v24 + 16);
  v27 = type metadata accessor for RealityViewRenderingEffects(0);
  v28 = *(int *)(v27 + 28);
  v29 = v25 + v28;
  v30 = &v26[v28];
  v31 = type metadata accessor for AntialiasingMode();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  *(_QWORD *)(v25 + *(int *)(v27 + 32)) = *(_QWORD *)&v26[*(int *)(v27 + 32)];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  swift_release();
  *(_BYTE *)(a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewCameraContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23568EEF4(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = type metadata accessor for RealityViewCamera(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[8];
      }
      else
      {
        v10 = type metadata accessor for RealityViewRenderingEffects(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[11];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for RealityViewCameraContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23568EFC8(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = type metadata accessor for RealityViewCamera(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        v10 = type metadata accessor for RealityViewRenderingEffects(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[11];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for RealityViewCameraContent()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Published<UIInterfaceOrientation>(319, &lazy cache variable for type metadata for GeometryProxy?, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC148], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for RealityViewCamera(319);
    if (v1 <= 0x3F)
    {
      type metadata accessor for RealityViewRenderingEffects(319);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t ObjC metadata update function for RealityViewCameraContent.ContentStorage()
{
  return type metadata accessor for RealityViewCameraContent.ContentStorage(0);
}

uint64_t type metadata accessor for RealityViewCameraContent.ContentStorage(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for RealityViewCameraContent.ContentStorage);
}

void type metadata completion function for RealityViewCameraContent.ContentStorage()
{
  unint64_t v0;

  type metadata accessor for Published<UIInterfaceOrientation>(319, &lazy cache variable for type metadata for SpatialTrackingSession.UnavailableCapabilities?, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7B80], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

_QWORD *initializeBufferWithCopyOfBuffer for RealityViewCamera(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for CameraControls();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    *((_BYTE *)v7 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return v7;
}

uint64_t destroy for RealityViewCamera(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for CameraControls();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for RealityViewCamera(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CameraControls();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithCopy for RealityViewCamera(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CameraControls();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *initializeWithTake for RealityViewCamera(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CameraControls();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for RealityViewCamera(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CameraControls();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewCamera()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23568F550(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for CameraControls();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for RealityViewCamera()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23568F5E4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = type metadata accessor for CameraControls();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for RealityViewCamera()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CameraControls();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for RealityViewEnvironment(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for RealityViewEnvironment()
{
  return swift_release();
}

_QWORD *assignWithCopy for RealityViewEnvironment(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for RealityViewEnvironment(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewEnvironment(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RealityViewEnvironment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RealityViewEnvironment()
{
  return &type metadata for RealityViewEnvironment;
}

uint64_t *initializeBufferWithCopyOfBuffer for RealityViewRenderingEffects(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for AntialiasingMode();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
  }
  return v4;
}

uint64_t destroy for RealityViewRenderingEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = type metadata accessor for AntialiasingMode();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for RealityViewRenderingEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for AntialiasingMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

_QWORD *assignWithCopy for RealityViewRenderingEffects(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t initializeWithTake for RealityViewRenderingEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for AntialiasingMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for RealityViewRenderingEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for AntialiasingMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewRenderingEffects()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23568FB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 28);
  v5 = type metadata accessor for AntialiasingMode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for RealityViewRenderingEffects()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23568FB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 28);
  v6 = type metadata accessor for AntialiasingMode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for RealityViewRenderingEffects()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AntialiasingMode();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RealityViewRenderingEffectMode()
{
  return &type metadata for RealityViewRenderingEffectMode;
}

ValueMetadata *type metadata accessor for RealityViewDynamicRange()
{
  return &type metadata for RealityViewDynamicRange;
}

void sub_23568FC50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for _RealityViewImpl(255, *a1, a1[1], a4);
  MEMORY[0x23B7D3350](&protocol conformance descriptor for _RealityViewImpl<A>, v4);
  type metadata accessor for GeometryReader();
  JUMPOUT(0x23B7D3350);
}

uint64_t sub_23568FCA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<CameraControls>);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CameraControls> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<CameraControls>, MEMORY[0x24BDF1028]);
  return MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v2, v4);
}

void *type metadata accessor for EnvironmentValues.CameraControlsKey()
{
  return &unk_2506BD198;
}

uint64_t type metadata instantiation function for _RealityViewImpl()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata completion function for _RealityViewImpl()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for GeometryProxy();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<UIInterfaceOrientation>(319, &lazy cache variable for type metadata for Environment<CameraControls>.Content, (uint64_t (*)(uint64_t))MEMORY[0x24BDE74B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDEB560]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Environment<Image.DynamicRange?>.Content();
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for _RealityViewImpl(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80);
  v6 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for GeometryProxy() - 8) + 80);
  v7 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for CameraControls() - 8) + 80);
  v8 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for Image.DynamicRange() - 8) + 80);
  v9 = *a2;
  *a1 = *a2;
  v10 = ((v6 | v7 | v8) | v5) & 0xF8 | 7u;
  v11 = v9 + ((v10 + 16) & ~v10);
  swift_retain();
  return v11;
}

uint64_t destroy for _RealityViewImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  swift_release();
  swift_release();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = type metadata accessor for GeometryProxy();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (v5 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v9, v7);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_weakDestroy();
  v11 = type metadata accessor for CameraControls();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  v14 = (v10 + v13 + 8) & ~v13;
  if (*(_QWORD *)(v12 + 64) <= 8uLL)
    v15 = 8;
  else
    v15 = *(_QWORD *)(v12 + 64);
  v16 = *(unsigned __int8 *)(v14 + v15);
  if (v16 >= 2)
  {
    if (v15 <= 3)
      v17 = v15;
    else
      v17 = 4;
    __asm { BR              X13 }
  }
  if (v16 == 1)
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v11);
  else
    swift_release();
  v18 = v15 + v14;
  v19 = type metadata accessor for Image.DynamicRange();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_DWORD *)(v20 + 80) & 0xF8 | 7;
  v22 = (v18 + v21 + 1) & ~v21;
  v23 = *(_QWORD *)(v20 + 64);
  if (!*(_DWORD *)(v20 + 84))
    ++v23;
  if (v23 <= 8)
    v24 = 8;
  else
    v24 = v23;
  v25 = *(unsigned __int8 *)(v22 + v24);
  if (v25 >= 2)
  {
    if (v24 <= 3)
      v26 = v24;
    else
      v26 = 4;
    __asm { BR              X12 }
  }
  if (v25 == 1)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v19))
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v19);
  }
  else
  {
    swift_release();
  }
  return protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(*(_QWORD *)((v24 + v22 + 8) & 0xFFFFFFFFFFFFFFF8), *(unsigned __int8 *)(((v24 + v22 + 8) & 0xFFFFFFFFFFFFFFF8) + 8));
}

_QWORD *initializeWithCopy for _RealityViewImpl(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = v6[1];
  *v5 = *v6;
  v5[1] = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v5 + v10 + 16) & ~v10;
  v12 = ((unint64_t)v6 + v10 + 16) & ~v10;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  swift_retain();
  swift_retain();
  v13(v11, v12, v8);
  v14 = *(_QWORD *)(v9 + 64);
  v15 = type metadata accessor for GeometryProxy();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v14 + v17;
  v19 = (v14 + v17 + v11) & ~v17;
  v20 = (v18 + v12) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v19, v20, v15);
  v21 = *(_QWORD *)(v16 + 64) + 7;
  v22 = (v21 + v19) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v21 + v20) & 0xFFFFFFFFFFFFFFF8;
  swift_weakCopyInit();
  v24 = type metadata accessor for CameraControls();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_DWORD *)(v25 + 80) & 0xF8;
  v27 = v26 + 15;
  v28 = v26 + 15 + v22;
  v29 = ~v26 & 0xFFFFFFFFFFFFFFF8;
  v30 = (_QWORD *)(v28 & v29);
  v31 = (_QWORD *)((v27 + v23) & v29);
  if (*(_QWORD *)(v25 + 64) <= 8uLL)
    v32 = 8;
  else
    v32 = *(_QWORD *)(v25 + 64);
  v33 = *((unsigned __int8 *)v31 + v32);
  if (v33 >= 2)
  {
    if (v32 <= 3)
      v34 = v32;
    else
      v34 = 4;
    __asm { BR              X13 }
  }
  if (v33 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v25 + 16))(v30, v31, v24);
    v35 = 1;
  }
  else
  {
    *v30 = *v31;
    swift_retain();
    v35 = 0;
  }
  *((_BYTE *)v30 + v32) = v35;
  v36 = v32 + 1;
  v37 = type metadata accessor for Image.DynamicRange();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(_DWORD *)(v38 + 80) & 0xF8 | 7;
  v40 = v36 + v39;
  v41 = ((unint64_t)v30 + v36 + v39) & ~v39;
  v42 = ((unint64_t)v31 + v40) & ~v39;
  if (*(_DWORD *)(v38 + 84))
    v43 = *(_QWORD *)(v38 + 64);
  else
    v43 = *(_QWORD *)(v38 + 64) + 1;
  if (v43 <= 8)
    v44 = 8;
  else
    v44 = v43;
  v45 = *(unsigned __int8 *)(v42 + v44);
  if (v45 >= 2)
  {
    if (v44 <= 3)
      v46 = v44;
    else
      v46 = 4;
    __asm { BR              X12 }
  }
  if (v45 == 1)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v38 + 48))(v42, 1, v37))
    {
      memcpy((void *)v41, (const void *)v42, v43);
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 16))(v41, v42, v37);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v41, 0, 1, v37);
    }
    *(_BYTE *)(v41 + v44) = 1;
  }
  else
  {
    *(_QWORD *)v41 = *(_QWORD *)v42;
    *(_BYTE *)(v41 + v44) = 0;
    swift_retain();
  }
  v47 = ((v41 | 7) + v44 + 1) & 0xFFFFFFFFFFFFFFF8;
  v48 = ((v42 | 7) + v44 + 1) & 0xFFFFFFFFFFFFFFF8;
  v49 = *(_QWORD *)v48;
  v50 = *(_BYTE *)(v48 + 8);
  outlined copy of Environment<AnyShapeStyle?>.Content(*(_QWORD *)v48, v50);
  *(_QWORD *)v47 = v49;
  *(_BYTE *)(v47 + 8) = v50;
  return a1;
}

_QWORD *assignWithCopy for _RealityViewImpl(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v7 + v11 + 16) & ~v11;
  v13 = ((unint64_t)v8 + v11 + 16) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = type metadata accessor for GeometryProxy();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v14 + v17 + v12) & ~v17;
  v19 = (v14 + v17 + v13) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24))(v18, v19, v15);
  v20 = *(_QWORD *)(v16 + 64) + 7;
  v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  swift_weakCopyAssign();
  v23 = type metadata accessor for CameraControls();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(_DWORD *)(v24 + 80) & 0xF8;
  v26 = v25 + 15;
  v27 = v25 + 15 + v21;
  v28 = ~v25 & 0xFFFFFFFFFFFFFFF8;
  v29 = (_QWORD *)(v27 & v28);
  v30 = (_QWORD *)((v26 + v22) & v28);
  if (*(_QWORD *)(v24 + 64) <= 8uLL)
    v31 = 8;
  else
    v31 = *(_QWORD *)(v24 + 64);
  if (v29 != v30)
  {
    v32 = v23;
    v33 = *((unsigned __int8 *)v29 + v31);
    if (v33 >= 2)
    {
      if (v31 <= 3)
        v34 = v31;
      else
        v34 = 4;
      __asm { BR              X12 }
    }
    if (v33 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v24 + 8))(v29, v23);
    else
      swift_release();
    v35 = *((unsigned __int8 *)v30 + v31);
    if (v35 >= 2)
    {
      if (v31 <= 3)
        v36 = v31;
      else
        v36 = 4;
      __asm { BR              X12 }
    }
    if (v35 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v24 + 16))(v29, v30, v32);
      *((_BYTE *)v29 + v31) = 1;
    }
    else
    {
      *v29 = *v30;
      *((_BYTE *)v29 + v31) = 0;
      swift_retain();
    }
  }
  v37 = type metadata accessor for Image.DynamicRange();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(_DWORD *)(v38 + 84);
  v40 = *(_DWORD *)(v38 + 80) & 0xF8 | 7;
  v41 = v31 + v40 + 1;
  v42 = ((unint64_t)v29 + v41) & ~v40;
  v43 = ((unint64_t)v30 + v41) & ~v40;
  v44 = *(_QWORD *)(v38 + 64);
  if (v42 != v43)
  {
    v45 = v37;
    if (v39)
      v46 = *(_QWORD *)(v38 + 64);
    else
      v46 = v44 + 1;
    if (v46 <= 8)
      v47 = 8;
    else
      v47 = v46;
    v48 = *(unsigned __int8 *)(v42 + v47);
    if (v48 >= 2)
    {
      if (v47 <= 3)
        v49 = v47;
      else
        v49 = 4;
      __asm { BR              X12 }
    }
    if (v48 == 1)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v38 + 48))(v42, 1, v37))
        (*(void (**)(unint64_t, uint64_t))(v38 + 8))(v42, v45);
    }
    else
    {
      swift_release();
    }
    v50 = *(unsigned __int8 *)(v43 + v47);
    if (v50 >= 2)
    {
      if (v47 <= 3)
        v51 = v47;
      else
        v51 = 4;
      __asm { BR              X12 }
    }
    if (v50 == 1)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v38 + 48))(v43, 1, v45))
      {
        memcpy((void *)v42, (const void *)v43, v46);
      }
      else
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 16))(v42, v43, v45);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v42, 0, 1, v45);
      }
      *(_BYTE *)(v42 + v47) = 1;
    }
    else
    {
      *(_QWORD *)v42 = *(_QWORD *)v43;
      *(_BYTE *)(v42 + v47) = 0;
      swift_retain();
    }
  }
  if (v39)
    v52 = v44;
  else
    v52 = v44 + 1;
  if (v52 <= 8)
    v52 = 8;
  v53 = v52 + 1;
  v54 = ((v42 | 7) + v53) & 0xFFFFFFFFFFFFFFF8;
  v55 = ((v43 | 7) + v53) & 0xFFFFFFFFFFFFFFF8;
  v56 = *(_QWORD *)v55;
  v57 = *(_BYTE *)(v55 + 8);
  outlined copy of Environment<AnyShapeStyle?>.Content(*(_QWORD *)v55, v57);
  v58 = *(_QWORD *)v54;
  v59 = *(unsigned __int8 *)(v54 + 8);
  *(_QWORD *)v54 = v56;
  *(_BYTE *)(v54 + 8) = v57;
  protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(v58, v59);
  return a1;
}

_OWORD *initializeWithTake for _RealityViewImpl(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 16) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = type metadata accessor for GeometryProxy();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v10 + v13 + v8) & ~v13;
  v15 = (v10 + v13 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v14, v15, v11);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  swift_weakTakeInit();
  v19 = type metadata accessor for CameraControls();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_DWORD *)(v20 + 80) & 0xF8;
  v22 = v21 + 15;
  v23 = v21 + 15 + v17;
  v24 = ~v21 & 0xFFFFFFFFFFFFFFF8;
  v25 = (_QWORD *)(v23 & v24);
  v26 = (_QWORD *)((v22 + v18) & v24);
  if (*(_QWORD *)(v20 + 64) <= 8uLL)
    v27 = 8;
  else
    v27 = *(_QWORD *)(v20 + 64);
  v28 = *((unsigned __int8 *)v26 + v27);
  if (v28 >= 2)
  {
    if (v27 <= 3)
      v29 = v27;
    else
      v29 = 4;
    __asm { BR              X13 }
  }
  if (v28 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 32))(v25, v26, v19);
    v30 = 1;
  }
  else
  {
    v30 = 0;
    *v25 = *v26;
  }
  *((_BYTE *)v25 + v27) = v30;
  v31 = v27 + 1;
  v32 = type metadata accessor for Image.DynamicRange();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_DWORD *)(v33 + 80) & 0xF8 | 7;
  v35 = v31 + v34;
  v36 = ((unint64_t)v25 + v31 + v34) & ~v34;
  v37 = ((unint64_t)v26 + v35) & ~v34;
  if (*(_DWORD *)(v33 + 84))
    v38 = *(_QWORD *)(v33 + 64);
  else
    v38 = *(_QWORD *)(v33 + 64) + 1;
  if (v38 <= 8)
    v39 = 8;
  else
    v39 = v38;
  v40 = *(unsigned __int8 *)(v37 + v39);
  if (v40 >= 2)
  {
    if (v39 <= 3)
      v41 = v39;
    else
      v41 = 4;
    __asm { BR              X12 }
  }
  if (v40 == 1)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v33 + 48))(v37, 1, v32))
    {
      memcpy((void *)v36, (const void *)v37, v38);
      v42 = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v33 + 32))(v36, v37, v32);
      v42 = 1;
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v36, 0, 1, v32);
    }
  }
  else
  {
    v42 = 0;
    *(_QWORD *)v36 = *(_QWORD *)v37;
  }
  *(_BYTE *)(v36 + v39) = v42;
  v43 = ((v37 | 7) + v39 + 1) & 0xFFFFFFFFFFFFFFF8;
  v44 = *(_QWORD *)v43;
  v45 = ((v36 | 7) + v39 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v43 + 8);
  *(_QWORD *)v45 = v44;
  return a1;
}

_OWORD *assignWithTake for _RealityViewImpl(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v5 = (unint64_t)a2 + 23;
  *a1 = *a2;
  swift_release();
  v6 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *v6 = *(_OWORD *)v5;
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v6 + v8 + 16) & ~v8;
  v10 = (v8 + 16 + v5) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = type metadata accessor for GeometryProxy();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v11 + v14 + v9) & ~v14;
  v16 = (v11 + v14 + v10) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 40))(v15, v16, v12);
  v17 = *(_QWORD *)(v13 + 64) + 7;
  v18 = (v17 + v15) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v17 + v16) & 0xFFFFFFFFFFFFFFF8;
  swift_weakTakeAssign();
  v20 = type metadata accessor for CameraControls();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_DWORD *)(v21 + 80) & 0xF8;
  v23 = v22 + 15;
  v24 = v22 + 15 + v18;
  v25 = ~v22 & 0xFFFFFFFFFFFFFFF8;
  v26 = (_QWORD *)(v24 & v25);
  v27 = (_QWORD *)((v23 + v19) & v25);
  if (*(_QWORD *)(v21 + 64) <= 8uLL)
    v28 = 8;
  else
    v28 = *(_QWORD *)(v21 + 64);
  if (v26 != v27)
  {
    v29 = v20;
    v30 = *((unsigned __int8 *)v26 + v28);
    if (v30 >= 2)
    {
      if (v28 <= 3)
        v31 = v28;
      else
        v31 = 4;
      __asm { BR              X12 }
    }
    if (v30 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v21 + 8))(v26, v20);
    else
      swift_release();
    v32 = *((unsigned __int8 *)v27 + v28);
    if (v32 >= 2)
    {
      if (v28 <= 3)
        v33 = v28;
      else
        v33 = 4;
      __asm { BR              X12 }
    }
    if (v32 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 + 32))(v26, v27, v29);
      v34 = 1;
    }
    else
    {
      v34 = 0;
      *v26 = *v27;
    }
    *((_BYTE *)v26 + v28) = v34;
  }
  v35 = type metadata accessor for Image.DynamicRange();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(_DWORD *)(v36 + 84);
  v38 = *(_DWORD *)(v36 + 80) & 0xF8 | 7;
  v39 = v28 + v38 + 1;
  v40 = ((unint64_t)v26 + v39) & ~v38;
  v41 = ((unint64_t)v27 + v39) & ~v38;
  v42 = *(_QWORD *)(v36 + 64);
  if (v40 != v41)
  {
    v43 = v35;
    if (v37)
      v44 = *(_QWORD *)(v36 + 64);
    else
      v44 = v42 + 1;
    if (v44 <= 8)
      v45 = 8;
    else
      v45 = v44;
    v46 = *(unsigned __int8 *)(v40 + v45);
    if (v46 >= 2)
    {
      if (v45 <= 3)
        v47 = v45;
      else
        v47 = 4;
      __asm { BR              X12 }
    }
    if (v46 == 1)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v36 + 48))(v40, 1, v35))
        (*(void (**)(unint64_t, uint64_t))(v36 + 8))(v40, v43);
    }
    else
    {
      swift_release();
    }
    v48 = *(unsigned __int8 *)(v41 + v45);
    if (v48 >= 2)
    {
      if (v45 <= 3)
        v49 = v45;
      else
        v49 = 4;
      __asm { BR              X12 }
    }
    if (v48 == 1)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v36 + 48))(v41, 1, v43))
      {
        memcpy((void *)v40, (const void *)v41, v44);
        v50 = 1;
      }
      else
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 32))(v40, v41, v43);
        v50 = 1;
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v40, 0, 1, v43);
      }
    }
    else
    {
      v50 = 0;
      *(_QWORD *)v40 = *(_QWORD *)v41;
    }
    *(_BYTE *)(v40 + v45) = v50;
  }
  if (v37)
    v51 = v42;
  else
    v51 = v42 + 1;
  if (v51 <= 8)
    v51 = 8;
  v52 = v51 + 1;
  v53 = ((v40 | 7) + v52) & 0xFFFFFFFFFFFFFFF8;
  v54 = ((v41 | 7) + v52) & 0xFFFFFFFFFFFFFFF8;
  v55 = *(_QWORD *)v54;
  LOBYTE(v54) = *(_BYTE *)(v54 + 8);
  v56 = *(_QWORD *)v53;
  v57 = *(unsigned __int8 *)(v53 + 8);
  *(_QWORD *)v53 = v55;
  *(_BYTE *)(v53 + 8) = v54;
  protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(v56, v57);
  return a1;
}

uint64_t getEnumTagSinglePayload for _RealityViewImpl(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v29 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v29 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v28 = type metadata accessor for GeometryProxy();
  v7 = *(_QWORD *)(v28 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  if (v6 <= v8)
    v9 = *(_DWORD *)(v7 + 84);
  else
    v9 = v6;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(type metadata accessor for CameraControls() - 8);
  v12 = *(_QWORD *)(v11 + 64);
  if (v12 <= 8)
    v12 = 8;
  v30 = v12;
  v13 = *(_QWORD *)(type metadata accessor for Image.DynamicRange() - 8);
  if (*(_DWORD *)(v13 + 84))
    v14 = *(_QWORD *)(v13 + 64);
  else
    v14 = *(_QWORD *)(v13 + 64) + 1;
  if (v14 <= 8)
    v15 = 8;
  else
    v15 = v14;
  if (!a2)
    return 0;
  v16 = *(unsigned __int8 *)(v5 + 80);
  v17 = *(_QWORD *)(v5 + 64);
  v18 = *(unsigned __int8 *)(v7 + 80);
  if (v10 < a2)
  {
    v19 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
    v20 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
    v21 = ((v15
          + ((v30
            + v20
            + ((v19
              + ((*(_QWORD *)(v7 + 64) + ((v17 + v18 + ((v16 + 32) & ~v16)) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8)
              + 8) & ~v19)
            + 1) & ~v20)
          + 8) & 0xFFFFFFFFFFFFFFF8)
        + 9;
    if (v21 < 4)
      v22 = ((a2 - v10 + 255) >> (8 * v21)) + 1;
    else
      v22 = 2;
    if (v22 >= 0x10000)
      v23 = 4;
    else
      v23 = 2;
    if (v22 < 0x100)
      v23 = 1;
    if (v22 >= 2)
      v24 = v23;
    else
      v24 = 0;
    __asm { BR              X15 }
  }
  if ((v9 & 0x80000000) != 0)
  {
    v27 = ((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v16 + 16) & ~v16;
    if ((_DWORD)v6 == v10)
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v27, v6, v29);
    else
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((v27 + v17 + v18) & ~v18, v8, v28);
  }
  else
  {
    v26 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v26) = -1;
    return (v26 + 1);
  }
}

void storeEnumTagSinglePayload for _RealityViewImpl(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(type metadata accessor for GeometryProxy() - 8);
  if (v7 <= *(_DWORD *)(v8 + 84))
    v9 = *(_DWORD *)(v8 + 84);
  else
    v9 = v7;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(type metadata accessor for CameraControls() - 8);
  if (*(_QWORD *)(v11 + 64) <= 8uLL)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_QWORD *)(type metadata accessor for Image.DynamicRange() - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  v16 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  v17 = (v12
       + v16
       + ((v15
         + ((*(_QWORD *)(v8 + 64)
           + ((*(_QWORD *)(v6 + 64)
             + *(unsigned __int8 *)(v8 + 80)
             + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 8) & ~v15)
       + 1) & ~v16;
  if (!*(_DWORD *)(v13 + 84))
    ++v14;
  if (v14 <= 8)
    v14 = 8;
  v18 = ((v14 + v17 + 8) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v10 >= a3)
  {
    v21 = 0;
  }
  else
  {
    if (v18 <= 3)
      v19 = ((a3 - v10 + 255) >> (8 * v18)) + 1;
    else
      v19 = 2;
    if (v19 >= 0x10000)
      v20 = 4;
    else
      v20 = 2;
    if (v19 < 0x100)
      v20 = 1;
    if (v19 >= 2)
      v21 = v20;
    else
      v21 = 0;
  }
  if (v10 < a2)
  {
    if (v18 >= 4)
      v22 = ~v10 + a2;
    else
      v22 = (~(_BYTE)v10 + a2);
    bzero(a1, v18);
    if ((_DWORD)v18 == 1)
      *a1 = v22;
    else
      *(_DWORD *)a1 = v22;
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

void sub_2356915D8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x235691650);
}

void sub_2356915E0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x2356915E8);
  JUMPOUT(0x235691650);
}

void sub_2356915F8()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x235691650);
}

void sub_235691600()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x235691650);
}

void sub_235691608()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;

  *(_WORD *)(v0 + v3) = 0;
  if (v1)
  {
    if ((v2 & 0x80000000) == 0)
    {
      if ((v1 & 0x80000000) == 0)
        JUMPOUT(0x23569164CLL);
      JUMPOUT(0x235691644);
    }
    JUMPOUT(0x235691614);
  }
  JUMPOUT(0x235691650);
}

void type metadata accessor for Environment<Image.DynamicRange?>.Content()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Environment<Image.DynamicRange?>.Content)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Image.DynamicRange?);
    v0 = type metadata accessor for Environment.Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<Image.DynamicRange?>.Content);
  }
}

uint64_t associated type witness table accessor for View.Body : View in _RealityViewImpl<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[6];

  result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>>);
    v2[3] = type metadata accessor for LocalCoordinateSpace();
    v2[4] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>();
    v2[5] = MEMORY[0x24BDEF530];
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _PreferenceWritingModifier<RealityViewCameraConvertibleKey> and conformance _PreferenceWritingModifier<A>, &demangling cache variable for type metadata for _PreferenceWritingModifier<RealityViewCameraConvertibleKey>, MEMORY[0x24BDF0B90]);
    result = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EnvironmentBackgroundStyleModifier<AnyShapeStyle> and conformance _EnvironmentBackgroundStyleModifier<A>, &demangling cache variable for type metadata for _EnvironmentBackgroundStyleModifier<AnyShapeStyle>, MEMORY[0x24BDF1378]);
    result = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>, _EnvironmentBackgroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>>);
    v2[0] = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type ViewAdaptor<ARView> and conformance ViewAdaptor<A>, &demangling cache variable for type metadata for ViewAdaptor<ARView>, (uint64_t)&protocol conformance descriptor for ViewAdaptor<A>);
    v2[1] = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle> and conformance _InsettableBackgroundShapeModifier<A, B>, &demangling cache variable for type metadata for _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>, MEMORY[0x24BDF1330]);
    result = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ViewAdaptor<ARView>, _InsettableBackgroundShapeModifier<BackgroundStyle, Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in _RealityViewImpl.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _RealityViewImpl.body.getter(*(_QWORD *)(v1 + 32), *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #2 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for _RealityViewImpl(0, v4[2], v4[3], a4) - 8) + 80);
  v7 = v4[4];
  v8 = (uint64_t)v4 + ((v6 + 40) & ~v6);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v9;
  *v9 = v5;
  v9[1] = partial apply for closure #1 in static ObjectCaptureSession.stopResourceLogging();
  return closure #2 in _RealityViewImpl.body.getter(v7, v8);
}

uint64_t objectdestroy_34Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for _RealityViewImpl(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80);
  swift_release();
  v8 = v4 + ((v7 + 40) & ~v7);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + v6[10], v5);
  v9 = v8 + v6[11];
  v10 = type metadata accessor for GeometryProxy();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_weakDestroy();
  v11 = v8 + v6[13];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<CameraControls>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = type metadata accessor for CameraControls();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  v13 = v8 + v6[14];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Image.DynamicRange?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = type metadata accessor for Image.DynamicRange();
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(*(_QWORD *)(v8 + v6[15]), *(unsigned __int8 *)(v8 + v6[15] + 8));
  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v4[2];
  v6 = v4[3];
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for _RealityViewImpl(0, v5, v6, a4) - 8) + 80);
  return (id)specialized closure #1 in closure #1 in _RealityViewImpl.body.getter(v4[4], (uint64_t)v4 + ((v7 + 40) & ~v7), v5, v6);
}

uint64_t sub_235691BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for _RealityViewImpl(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = v4
     + ((*(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v7 + v6[10], v5);
  v8 = v7 + v6[11];
  v9 = type metadata accessor for GeometryProxy();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_weakDestroy();
  v10 = v7 + v6[13];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<CameraControls>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = type metadata accessor for CameraControls();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  v12 = v7 + v6[14];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Image.DynamicRange?>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = type metadata accessor for Image.DynamicRange();
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  protocol witness for System.init(scene:) in conformance _RealityViewCameraControllerSystem(*(_QWORD *)(v7 + v6[15]), *(unsigned __int8 *)(v7 + v6[15] + 8));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(type metadata accessor for _RealityViewImpl(0, v6, v7, a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return closure #2 in closure #1 in _RealityViewImpl.body.getter(a1, v4 + v9, *(_QWORD *)(v4 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)), v6, v7);
}

uint64_t partial apply for closure #3 in closure #1 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return closure #3 in closure #1 in _RealityViewImpl.body.getter(a1, a2, a3 & 1, v3);
}

uint64_t type metadata accessor for RealityViewCameraConvertible(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for RealityViewCameraConvertible);
}

uint64_t outlined init with take of RealityViewCameraContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RealityViewCameraContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in RealityViewCameraContent.cameraControlMagnifyGesture()()
{
  type metadata accessor for RealityViewCameraContent(0);
  return _proto_RealityViewCameraController_v1.onMagnifyGestureChanged(_:)();
}

uint64_t objectdestroy_51Tm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  id *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for RealityViewCameraContent(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = (id *)(v0 + ((v2 + 16) & ~v2));

  swift_release();
  v4 = (char *)v3 + v1[6];
  v5 = type metadata accessor for GeometryProxy();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  swift_release();
  v7 = (char *)v3 + v1[8];
  swift_release();
  v8 = &v7[*(int *)(type metadata accessor for RealityViewCamera(0) + 20)];
  v9 = type metadata accessor for CameraControls();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release();
  swift_release();
  v10 = v1[11];
  v11 = (char *)v3 + v10 + *(int *)(type metadata accessor for RealityViewRenderingEffects(0) + 28);
  v12 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in RealityViewCameraContent.cameraControlMagnifyGesture()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for RealityViewCameraContent(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
  *(_QWORD *)(*(_QWORD *)(v0 + ((v2 + 16) & ~v2) + *(int *)(result + 48)) + 432) = 0xBFF0000000000000;
  return result;
}

uint64_t partial apply for closure #1 in RealityViewCameraContent.cameraControlDragGesture()(uint64_t a1)
{
  return partial apply for closure #1 in RealityViewCameraContent.cameraControlDragGesture()(a1, (uint64_t (*)(uint64_t, uint64_t))closure #1 in RealityViewCameraContent.cameraControlDragGesture());
}

uint64_t partial apply for closure #2 in RealityViewCameraContent.cameraControlDragGesture()(uint64_t a1)
{
  return partial apply for closure #1 in RealityViewCameraContent.cameraControlDragGesture()(a1, (uint64_t (*)(uint64_t, uint64_t))closure #2 in RealityViewCameraContent.cameraControlDragGesture());
}

uint64_t partial apply for closure #1 in RealityViewCameraContent.cameraControlDragGesture()(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RealityViewCameraContent(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t type metadata accessor for RealityViewCameraComponent(uint64_t a1)
{
  return type metadata accessor for ObjectCaptureSession.Error(a1, (uint64_t *)&type metadata singleton initialization cache for RealityViewCameraComponent);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DynamicScanVolumeEstimator.SphereSample>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    memcpy(v12, v13, 48 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DeviceMotionEstimator.SpeedSample>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DeviceMotionEstimator.DerivativeRecord>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = v8 << 6;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DeviceMotionEstimator.FrameRecord>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    memcpy(v12, v13, 48 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t sub_235693C90()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_235693CB4()
{
  return swift_deallocObject();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 48 * a1 + 32);
    v6 = 48 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + (a1 << 6) + 32);
    v6 = v4 << 6;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 96 * a1 + 32);
    v6 = 96 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 7) + 32;
    v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InFlightQueue<FreeformCloudRenderer.ResourceEntry>.Entry);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in closure #1 in _RealityViewImpl.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v8 = type metadata accessor for RealityViewCameraContent(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2 + *(int *)(type metadata accessor for _RealityViewImpl(0, a3, a4, v14) + 44);
  v16 = type metadata accessor for GeometryProxy();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  v18 = a1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI23_RealityViewCameraModel_content;
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)v13, v18 + *(int *)(v8 + 24), &demangling cache variable for type metadata for GeometryProxy?);
  swift_endAccess();
  outlined init with copy of ObjectCaptureSession.Error(v18, (uint64_t)v10, type metadata accessor for RealityViewCameraContent);
  RealityViewCameraContent.makeSettings()();
  outlined destroy of ObjectCaptureSession.Configuration((uint64_t)v10, type metadata accessor for RealityViewCameraContent);
  return *(_QWORD *)v18;
}

uint64_t sub_235694E88()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RealityViewCameraContent.ContentStorage.deinit(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in nonisolated_PrivateTearDown(of:);
  return closure #1 in RealityViewCameraContent.ContentStorage.deinit(a1, v4, v5, v6);
}

uint64_t partial apply for closure #2 in RealityViewCameraContent.camera.didset(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in nonisolated_PrivateTearDown(of:);
  return closure #2 in RealityViewCameraContent.camera.didset(a1, v4, v5, v6);
}

uint64_t objectdestroy_72Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RealityViewCameraContent.camera.didset(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in nonisolated_PrivateTearDown(of:);
  return closure #1 in RealityViewCameraContent.camera.didset(a1, v4, v5, v6);
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
    v10 = static _SetStorage.allocate(capacity:)();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7B00], MEMORY[0x24BDE7B10]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7B00], MEMORY[0x24BDE7B18]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    v10 = static _SetStorage.allocate(capacity:)();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7B40], MEMORY[0x24BDE7B50]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x24BDE7B40], MEMORY[0x24BDE7B58]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

uint64_t sub_2356954F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23569551C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.backgroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_235695544()
{
  swift_retain();
  return EnvironmentValues.backgroundStyle.setter();
}

uint64_t sub_23569556C()
{
  return EnvironmentValues.allowedDynamicRange.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for RealityViewCameraComponent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?)
                 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for GeometryProxy();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
  }
  return a1;
}

uint64_t destroy for RealityViewCameraComponent(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for GeometryProxy();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for RealityViewCameraComponent(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for GeometryProxy();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for RealityViewCameraComponent(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for GeometryProxy();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for RealityViewCameraComponent(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for GeometryProxy();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for RealityViewCameraComponent(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for GeometryProxy();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewCameraComponent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235695A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RealityViewCameraComponent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235695A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometryProxy?);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void type metadata completion function for RealityViewCameraComponent()
{
  unint64_t v0;

  type metadata accessor for Published<UIInterfaceOrientation>(319, &lazy cache variable for type metadata for GeometryProxy?, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC148], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void **initializeBufferWithCopyOfBuffer for RealityViewCameraConvertible(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  char *v11;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for GeometryProxy();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v11 = v4;
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for RealityViewCameraConvertible(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for GeometryProxy();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

void **initializeWithCopy for RealityViewCameraConvertible(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  id v10;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for GeometryProxy();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

void **assignWithCopy for RealityViewCameraConvertible(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for GeometryProxy();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

_QWORD *initializeWithTake for RealityViewCameraConvertible(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for GeometryProxy();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void **assignWithTake for RealityViewCameraConvertible(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for GeometryProxy();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityViewCameraConvertible()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235695D9C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for GeometryProxy();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RealityViewCameraConvertible()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_235695E24(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for GeometryProxy();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for RealityViewCameraConvertible()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GeometryProxy();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RealityViewCameraConvertibleKey()
{
  return &type metadata for RealityViewCameraConvertibleKey;
}

uint64_t sub_235695F20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[6];

  v8 = *(_QWORD *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
  v1 = type metadata accessor for _ConditionalContent();
  v2 = type metadata accessor for Group();
  type metadata accessor for _TaskModifier();
  v3 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for Optional();
  v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.gesture<A>(_:including:)>>.0);
  v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>>);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>);
  lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.onContinuousHover<A>(coordinateSpace:perform:)>>.0, _PreferenceWritingModifier<RealityViewCameraConvertibleKey>> and conformance <> ModifiedContent<A, B>();
  v6 = MEMORY[0x24BDEC410];
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<DragGesture>>, MEMORY[0x24BDEC410]);
  v13[2] = v4;
  v13[3] = v5;
  v13[4] = swift_getOpaqueTypeConformance2();
  v13[5] = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<MagnifyGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<_ChangedGesture<MagnifyGesture>>, v6);
  v13[0] = swift_getOpaqueTypeConformance2();
  v13[1] = v8;
  v12 = MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v1, v13);
  v11[0] = MEMORY[0x23B7D3350](MEMORY[0x24BDF3F50], v2, &v12);
  v11[1] = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type _TaskModifier and conformance _TaskModifier, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC4E0], MEMORY[0x24BDEC4C8]);
  v10 = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v3, v11);
  return MEMORY[0x23B7D3350](MEMORY[0x24BDF5578], v9, &v10);
}

uint64_t base witness table accessor for Component in RealityViewCameraComponent()
{
  return lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type RealityViewCameraComponent and conformance RealityViewCameraComponent, type metadata accessor for RealityViewCameraComponent, (uint64_t)&protocol conformance descriptor for RealityViewCameraComponent);
}

BOOL specialized static ObjectCaptureSharedSymbols.isNonExistentOrEmptyDirectory(_:)()
{
  id v0;
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if ((URL.isFileURL.getter() & 1) == 0)
    return 0;
  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  v15 = 0;
  v1 = URL.path.getter();
  v2 = (void *)MEMORY[0x23B7D2498](v1);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v0, sel_fileExistsAtPath_isDirectory_, v2, &v15);

  if ((v3 & 1) == 0)
  {

    return 1;
  }
  if ((v15 & 1) != 0)
  {
    v4 = URL.path.getter();
    v5 = (void *)MEMORY[0x23B7D2498](v4);
    swift_bridgeObjectRelease();
    v14 = 0;
    v6 = objc_msgSend(v0, sel_contentsOfDirectoryAtPath_error_, v5, &v14);

    v7 = v14;
    if (v6)
    {
      v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      v9 = v7;

      v10 = *(_QWORD *)(v8 + 16);
      swift_bridgeObjectRelease();
      return v10 == 0;
    }
    v12 = v14;
    v13 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    return 1;
  }

  return 0;
}

uint64_t destroy for ARFreeformCapturingView()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ARFreeformCapturingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ARFreeformCapturingView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ARFreeformCapturingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ARFreeformCapturingView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ARFreeformCapturingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ARFreeformCapturingView()
{
  return &type metadata for ARFreeformCapturingView;
}

uint64_t associated type witness table accessor for View.Body : View in ARFreeformCapturingView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in ARFreeformCapturingView.body.getter@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t (**v23)();
  _OWORD v25[2];
  __int128 v26;
  _OWORD v27[11];
  uint64_t v28;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static Alignment.center.getter();
  v12 = v11;
  closure #1 in closure #1 in ARFreeformCapturingView.body.getter(a1, (char *)a2, (uint64_t *)v27);
  v26 = *a2;
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  swift_endAccess();
  outlined release of ReticleCenterView((uint64_t)&v26);
  v25[0] = *(__int128 *)((char *)a2 + 24);
  v13 = swift_allocObject();
  v14 = a2[1];
  *(_OWORD *)(v13 + 16) = *a2;
  *(_OWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 48) = *((_QWORD *)a2 + 4);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriptionView<Published<Bool>.Publisher, ZStack<TupleView<(ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>>);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(a3 + *(int *)(v15 + 52), v9, v6);
  v16 = v27[9];
  v17 = v27[10];
  v18 = v27[7];
  *(_OWORD *)(a3 + 144) = v27[8];
  *(_OWORD *)(a3 + 160) = v16;
  *(_OWORD *)(a3 + 176) = v17;
  v19 = v27[5];
  v20 = v27[6];
  *(_OWORD *)(a3 + 80) = v27[4];
  *(_OWORD *)(a3 + 96) = v19;
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 192) = v28;
  *(_OWORD *)(a3 + 112) = v20;
  *(_OWORD *)(a3 + 128) = v18;
  v21 = v27[1];
  *(_OWORD *)(a3 + 16) = v27[0];
  *(_OWORD *)(a3 + 32) = v21;
  v22 = v27[3];
  *(_OWORD *)(a3 + 48) = v27[2];
  *(_OWORD *)(a3 + 64) = v22;
  v23 = (uint64_t (**)())(a3 + *(int *)(v15 + 56));
  *v23 = partial apply for closure #2 in closure #1 in ARFreeformCapturingView.body.getter;
  v23[1] = (uint64_t (*)())v13;
  outlined retain of ReticleCenterView((uint64_t)&v26);
  outlined retain of ReticleCenterView((uint64_t)v25);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t closure #1 in closure #1 in ARFreeformCapturingView.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t result;
  void *v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  char v68;
  void *v69[9];
  __int128 v70;
  uint64_t v71;
  unsigned __int8 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  v58 = a3;
  v59 = type metadata accessor for OpacityTransition();
  v5 = *(_QWORD *)(v59 - 8);
  v6 = MEMORY[0x24BDAC7A8](v59);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v57 = (char *)&v52 - v9;
  GeometryProxy.size.getter();
  v11 = v10;
  v52 = a1;
  GeometryProxy.size.getter();
  v13 = v12;
  v75 = *(_OWORD *)a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined release of ReticleCenterView((uint64_t)&v75);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v66 = 0;
  v65 = 0;
  v64 = 0;
  v63 = 0;
  v67 = 0;
  v62 = 0;
  v17 = 0;
  v18 = 0;
  v61 = 0;
  v19 = 0;
  v60 = 0;
  if (LOBYTE(v69[0]) == 1)
  {
    v20 = *((double *)a2 + 2);
    v56 = (uint64_t)a2;
    v74 = *(_OWORD *)(a2 + 24);
    swift_retain();
    outlined retain of ReticleCenterView((uint64_t)&v75);
    outlined retain of ReticleCenterView((uint64_t)&v74);
    type metadata accessor for DataModel(0);
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, type metadata accessor for DataModel, (uint64_t)&protocol conformance descriptor for DataModel);
    v14 = ObservedObject.init(wrappedValue:)();
    v15 = v21;
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain_n();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    result = outlined release of ReticleCenterView((uint64_t)&v75);
    v23 = v69[0];
    if (!v69[0])
    {
      __break(1u);
      return result;
    }
    if (v13 >= v11)
      v24 = v11;
    else
      v24 = v13;
    *(double *)&v25 = v24 * v20;
    specialized FreeformMiniView.init(model:renderer:)(v69[0], v69);
    v66 = v69[0];
    v65 = v69[1];
    v64 = v69[2];
    v63 = v69[3];
    v67 = v69[4];
    v17 = (char *)v69[6];
    v62 = v69[5];
    v18 = v69[7];
    v61 = v69[8];

    outlined release of ReticleCenterView((uint64_t)&v75);
    outlined release of ReticleCenterView((uint64_t)&v74);
    outlined release of ReticleCenterView((uint64_t)&v75);
    v26 = v57;
    OpacityTransition.init()();
    v27 = v59;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v26, v59);
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition, (uint64_t (*)(uint64_t))MEMORY[0x24BDEE630], MEMORY[0x24BDEE620]);
    v60 = AnyTransition.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v26, v27);
    v16 = v25;
    v19 = 0x4034000000000000;
    a2 = (char *)v56;
  }
  v55 = v19;
  v70 = *(_OWORD *)(a2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  v59 = v15;
  v57 = v17;
  v56 = (uint64_t)v18;
  if (v68 == 1)
  {
    type metadata accessor for DataModel(0);
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, type metadata accessor for DataModel, (uint64_t)&protocol conformance descriptor for DataModel);
    swift_retain();
    v28 = ObservedObject.init(wrappedValue:)();
    v30 = v29;
    v31 = static Edge.Set.all.getter();
    GeometryProxy.size.getter();
    GeometryProxy.size.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    v33 = v30;
    v32 = v28;
    v35 = v70;
    v36 = BYTE8(v70);
    v37 = v71;
    v38 = v72;
    v34 = v31;
    v15 = v59;
    v39 = v73;
  }
  else
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0uLL;
  }
  v40 = (uint64_t)v66;
  v41 = (uint64_t)v65;
  v42 = v58;
  *v58 = v14;
  v42[1] = v15;
  v53 = v14;
  v43 = v15;
  v42[2] = v16;
  v42[3] = v40;
  v44 = v16;
  v54 = v16;
  v45 = (uint64_t)v64;
  v42[4] = v41;
  v42[5] = v45;
  v46 = (uint64_t)v63;
  v47 = v67;
  v42[6] = (uint64_t)v63;
  v42[7] = (uint64_t)v47;
  v67 = v47;
  v48 = v62;
  v49 = v57;
  v42[8] = (uint64_t)v62;
  v42[9] = (uint64_t)v49;
  v50 = (uint64_t)v61;
  v42[10] = v56;
  v42[11] = v50;
  v51 = v60;
  v42[12] = v55;
  v42[13] = v51;
  v42[14] = v32;
  v42[15] = v33;
  v42[16] = v34;
  v42[17] = v35;
  v42[18] = v36;
  v42[19] = v37;
  v42[20] = v38;
  *(_OWORD *)(v42 + 21) = v39;
  outlined copy of ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?(v14, v43, v44, v40, v41, v45, v46, (uint64_t)v47, v48);
  return outlined consume of ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?(v53, v59, v54, v40, v41, v45, v46, (uint64_t)v67, v48);
}

uint64_t closure #2 in closure #1 in ARFreeformCapturingView.body.getter()
{
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t protocol witness for View.body.getter in conformance ARFreeformCapturingView@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  __int128 v4;
  _BYTE v6[24];
  __int128 v7;
  __int128 v8;

  *(_QWORD *)&v6[16] = *((_QWORD *)v1 + 4);
  *(_OWORD *)v6 = v1[1];
  v7 = *v1;
  v8 = *(_OWORD *)&v6[8];
  v3 = swift_allocObject();
  v4 = v1[1];
  *(_OWORD *)(v3 + 16) = *v1;
  *(_OWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 48) = *((_QWORD *)v1 + 4);
  *a1 = partial apply for closure #1 in ARFreeformCapturingView.body.getter;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v3;
  outlined retain of ReticleCenterView((uint64_t)&v7);
  return outlined retain of ReticleCenterView((uint64_t)&v8);
}

uint64_t partial apply for closure #1 in ARFreeformCapturingView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ARFreeformCapturingView.body.getter(a1, (__int128 *)(v2 + 16), a2);
}

uint64_t objectdestroyTm_4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ARFreeformCapturingView.body.getter()
{
  return closure #2 in closure #1 in ARFreeformCapturingView.body.getter();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in ARFreeformCapturingView.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  return State.wrappedValue.setter();
}

id outlined copy of ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  id result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    return a9;
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryReader<SubscriptionView<Published<Bool>.Publisher, ZStack<TupleView<(ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>>> and conformance GeometryReader<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GeometryReader<SubscriptionView<Published<Bool>.Publisher, ZStack<TupleView<(ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>>> and conformance GeometryReader<A>;
  if (!lazy protocol witness table cache variable for type GeometryReader<SubscriptionView<Published<Bool>.Publisher, ZStack<TupleView<(ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>>> and conformance GeometryReader<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for GeometryReader<SubscriptionView<Published<Bool>.Publisher, ZStack<TupleView<(ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>>>);
    result = MEMORY[0x23B7D3350](MEMORY[0x24BDEC6F8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryReader<SubscriptionView<Published<Bool>.Publisher, ZStack<TupleView<(ModifiedContent<StackableMiniView<FreeformMiniView>, _TraitWritingModifier<TransitionTraitKey>>?, ModifiedContent<ModifiedContent<ARKitCoachingView, _SafeAreaIgnoringLayout>, _FrameLayout>?)>>>> and conformance GeometryReader<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShakeModifier()
{
  return &type metadata for ShakeModifier;
}

ValueMetadata *type metadata accessor for ObjectSelectionView()
{
  return &type metadata for ObjectSelectionView;
}

double closure #1 in ObjectSelectionView.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  __int128 v14;

  v6 = static VerticalAlignment.center.getter();
  v7 = a3 * 0.9;
  v8 = *(_QWORD *)(a1 + 32);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 1;
  *(double *)(a2 + 56) = v7;
  *(double *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = v8;
  *(_QWORD *)(a2 + 80) = v10;
  *(_BYTE *)(a2 + 88) = v11;
  *(_QWORD *)(a2 + 96) = v12;
  *(_BYTE *)(a2 + 104) = v13;
  result = *(double *)&v14;
  *(_OWORD *)(a2 + 112) = v14;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 136) = 1;
  *(_QWORD *)(a2 + 144) = 0;
  *(_BYTE *)(a2 + 152) = 1;
  return result;
}

double protocol witness for View.body.getter in conformance ObjectSelectionView@<D0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  double v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double result;
  __int128 v11;
  _OWORD v12[8];
  _OWORD v13[2];
  _BYTE v14[160];
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v3 = *v1;
  v16 = v1[1];
  v15 = v3;
  v17 = *((_QWORD *)v1 + 4);
  if (*((double *)&v16 + 1) >= *(double *)&v16)
    v4 = *(double *)&v16;
  else
    v4 = *((double *)&v16 + 1);
  v5 = static HorizontalAlignment.center.getter();
  closure #1 in ObjectSelectionView.body.getter((uint64_t)&v15, (uint64_t)v12, v4);
  *(_OWORD *)&v14[119] = v12[7];
  *(_OWORD *)&v14[103] = v12[6];
  *(_OWORD *)&v14[55] = v12[3];
  *(_OWORD *)&v14[39] = v12[2];
  *(_OWORD *)&v14[135] = v13[0];
  *(_OWORD *)&v14[144] = *(_OWORD *)((char *)v13 + 9);
  *(_OWORD *)&v14[71] = v12[4];
  *(_OWORD *)&v14[87] = v12[5];
  *(_OWORD *)&v14[7] = v12[0];
  *(_OWORD *)&v14[23] = v12[1];
  v6 = *(_OWORD *)&v14[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v14[96];
  *(_OWORD *)(a1 + 129) = v6;
  v7 = *(_OWORD *)&v14[144];
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v14[128];
  *(_OWORD *)(a1 + 161) = v7;
  v8 = *(_OWORD *)&v14[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v14[32];
  *(_OWORD *)(a1 + 65) = v8;
  v9 = *(_OWORD *)&v14[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v14[64];
  *(_OWORD *)(a1 + 97) = v9;
  result = *(double *)v14;
  v11 = *(_OWORD *)&v14[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v14;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 33) = v11;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance ObjectSelectionView(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

uint64_t associated type witness table accessor for View.Body : View in ObjectSelectionView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ShakeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void ReticleView.Corner.segments.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_235697220(double a1)
{
  double v1;
  uint64_t result;

  v1 = a1 * 0.42 + 0.08;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Segment>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_2356BAC90;
  *(_QWORD *)(result + 32) = 0;
  *(double *)(result + 40) = v1;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(double *)(result + 64) = v1;
  *(_QWORD *)(result + 72) = 0;
  return result;
}

void closure #1 in ReticleView.Corner.path(in:)(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, char a7)
{
  uint64_t v12;
  double v13;
  CGFloat Width;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  double Height;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  ReticleView.Corner.segments.getter(a7);
  if (!*(_QWORD *)(v12 + 16))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = *(double *)(v12 + 32);
  swift_bridgeObjectRelease();
  v29.origin.x = a2;
  v29.origin.y = a3;
  v29.size.width = a4;
  v29.size.height = a5;
  Width = CGRectGetWidth(v29);
  ReticleView.Corner.segments.getter(a7);
  if (!*(_QWORD *)(v15 + 16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v16 = *(double *)(v15 + 40);
  swift_bridgeObjectRelease();
  v30.origin.x = a2;
  v30.origin.y = a3;
  v30.size.width = a4;
  v30.size.height = a5;
  Height = CGRectGetHeight(v30);
  ReticleView.Corner.segments.getter(a7);
  if (*(_QWORD *)(v17 + 16) < 2uLL)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  v31.origin.x = a2;
  v31.origin.y = a3;
  v31.size.width = a4;
  v31.size.height = a5;
  CGRectGetWidth(v31);
  ReticleView.Corner.segments.getter(a7);
  if (*(_QWORD *)(v18 + 16) < 2uLL)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  v32.origin.x = a2;
  v32.origin.y = a3;
  v32.size.width = a4;
  v32.size.height = a5;
  CGRectGetHeight(v32);
  ReticleView.Corner.segments.getter(a7);
  if (*(_QWORD *)(v19 + 16) < 3uLL)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v26 = Width;
  v27 = v13;
  v20 = *(double *)(v19 + 64);
  swift_bridgeObjectRelease();
  v33.origin.x = a2;
  v33.origin.y = a3;
  v33.size.width = a4;
  v33.size.height = a5;
  v21 = CGRectGetWidth(v33);
  ReticleView.Corner.segments.getter(a7);
  if (*(_QWORD *)(v22 + 16) >= 3uLL)
  {
    *(double *)&v25 = v20 * v21;
    v23 = *(double *)(v22 + 72);
    swift_bridgeObjectRelease();
    v34.origin.x = a2;
    v34.origin.y = a3;
    v34.size.width = a4;
    v34.size.height = a5;
    *(double *)&v24 = v23 * CGRectGetHeight(v34);
    Path.move(to:)((CGPoint)__PAIR128__(v16 * Height, v27 * v26));
    v35.origin.x = a2;
    v35.origin.y = a3;
    v35.size.width = a4;
    v35.size.height = a5;
    CGRectGetWidth(v35);
    Path.addArc(tangent1End:tangent2End:radius:transform:)();
    Path.addLine(to:)((CGPoint)__PAIR128__(v24, v25));
    return;
  }
LABEL_13:
  __break(1u);
}

double protocol witness for Shape.path(in:) in conformance ReticleView.Corner@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  char v5;

  Path.init(_:)();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance ReticleView.Corner()
{
  return Shape.sizeThatFits(_:)();
}

double protocol witness for Animatable.animatableData.getter in conformance ReticleView.Corner@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance ReticleView.Corner(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

double (*protocol witness for Animatable.animatableData.modify in conformance ReticleView.Corner(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return protocol witness for Animatable.animatableData.modify in conformance ReticleView.Corner;
}

double protocol witness for Animatable.animatableData.modify in conformance ReticleView.Corner(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)a1;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ReticleView.Corner()
{
  lazy protocol witness table accessor for type ReticleView.Corner and conformance ReticleView.Corner();
  return static Shape._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ReticleView.Corner()
{
  lazy protocol witness table accessor for type ReticleView.Corner and conformance ReticleView.Corner();
  return static Shape._makeViewList(view:inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ReticleView.Corner()
{
  lazy protocol witness table accessor for type ReticleView.Corner and conformance ReticleView.Corner();
  return Shape.body.getter();
}

uint64_t closure #1 in ReticleView.body.getter@<X0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = static Color.white.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  v5 = static Alignment.center.getter();
  v20 = v6;
  v21 = v5;
  v7 = static Color.white.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  v8 = static Alignment.center.getter();
  v17 = v9;
  v18 = v8;
  v19 = static Color.white.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  v10 = static Alignment.center.getter();
  v12 = v11;
  v13 = static Color.white.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  v14 = static Alignment.center.getter();
  *(_BYTE *)a1 = 0;
  *(double *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v23;
  *(_QWORD *)(a1 + 32) = v24;
  *(_QWORD *)(a1 + 40) = v25;
  *(_QWORD *)(a1 + 48) = v26;
  *(_QWORD *)(a1 + 56) = v4;
  *(_WORD *)(a1 + 64) = 256;
  *(_QWORD *)(a1 + 72) = v21;
  *(_QWORD *)(a1 + 80) = v20;
  *(_BYTE *)(a1 + 88) = 1;
  *(double *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 104) = v27;
  *(_QWORD *)(a1 + 112) = v28;
  *(_QWORD *)(a1 + 120) = v29;
  *(_QWORD *)(a1 + 128) = v30;
  *(_QWORD *)(a1 + 136) = v31;
  *(_QWORD *)(a1 + 144) = v7;
  *(_WORD *)(a1 + 152) = 256;
  *(_QWORD *)(a1 + 160) = v18;
  *(_QWORD *)(a1 + 168) = v17;
  *(_BYTE *)(a1 + 176) = 2;
  *(double *)(a1 + 184) = a2;
  *(_QWORD *)(a1 + 192) = v32;
  *(_QWORD *)(a1 + 200) = v33;
  *(_QWORD *)(a1 + 208) = v34;
  *(_QWORD *)(a1 + 216) = v35;
  *(_QWORD *)(a1 + 224) = v36;
  *(_QWORD *)(a1 + 232) = v19;
  *(_WORD *)(a1 + 240) = 256;
  *(_QWORD *)(a1 + 248) = v10;
  *(_QWORD *)(a1 + 256) = v12;
  *(_BYTE *)(a1 + 264) = 3;
  *(double *)(a1 + 272) = a2;
  *(_QWORD *)(a1 + 280) = v37;
  *(_QWORD *)(a1 + 288) = v38;
  *(_QWORD *)(a1 + 296) = v39;
  *(_QWORD *)(a1 + 304) = v40;
  *(_QWORD *)(a1 + 312) = v41;
  *(_QWORD *)(a1 + 320) = v13;
  *(_WORD *)(a1 + 328) = 256;
  *(_QWORD *)(a1 + 336) = v14;
  *(_QWORD *)(a1 + 344) = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ReticleView()
{
  lazy protocol witness table accessor for type ReticleView and conformance ReticleView();
  return static View<>._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ReticleView()
{
  lazy protocol witness table accessor for type ReticleView and conformance ReticleView();
  return static View<>._makeViewList(view:inputs:)();
}

double protocol witness for View.body.getter in conformance ReticleView@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  _BYTE __src[352];

  v3 = *(double *)(v1 + 16);
  v4 = static Alignment.center.getter();
  v6 = v5;
  closure #1 in ReticleView.body.getter((uint64_t)__src, v3);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  memcpy((void *)(a1 + 16), __src, 0x160uLL);
  *(_QWORD *)(a1 + 368) = v8;
  *(_BYTE *)(a1 + 376) = v9;
  *(_QWORD *)(a1 + 384) = v10;
  *(_BYTE *)(a1 + 392) = v11;
  result = *(double *)&v12;
  *(_OWORD *)(a1 + 400) = v12;
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance ReticleView@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 16);
  *a1 = result;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance ReticleView(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 16) = *a1;
  return result;
}

double (*protocol witness for Animatable.animatableData.modify in conformance ReticleView(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 16);
  return protocol witness for Animatable.animatableData.modify in conformance ReticleView;
}

double protocol witness for Animatable.animatableData.modify in conformance ReticleView(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) = *(_QWORD *)a1;
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance ShakeModifier@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance ShakeModifier(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

double (*protocol witness for Animatable.animatableData.modify in conformance ShakeModifier(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance ShakeModifier;
}

double protocol witness for Animatable.animatableData.modify in conformance ShakeModifier(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  **(_QWORD **)(a1 + 8) = *(_QWORD *)a1;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ShakeModifier()
{
  lazy protocol witness table accessor for type ShakeModifier and conformance ShakeModifier();
  return static AnimatableModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ShakeModifier()
{
  lazy protocol witness table accessor for type ShakeModifier and conformance ShakeModifier();
  return static AnimatableModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ShakeModifier()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ShakeModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double v5;
  long double v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v5 = v2[1];
  v6 = v5 * sin((*v2 * v2[2] + *v2 * v2[2]) * 3.14159265);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ViewModifier_Content<ShakeModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ShakeModifier>, _OffsetEffect>);
  v9 = a2 + *(int *)(result + 36);
  *(long double *)v9 = v6;
  *(_QWORD *)(v9 + 8) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x23B7D3350](MEMORY[0x24BDEADB0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShakeModifier and conformance ShakeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier;
  if (!lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for ShakeModifier, &type metadata for ShakeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier;
  if (!lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for ShakeModifier, &type metadata for ShakeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier;
  if (!lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for ShakeModifier, &type metadata for ShakeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeModifier and conformance ShakeModifier);
  }
  return result;
}

void *type metadata accessor for ReticleView()
{
  return &unk_2506BD8B0;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ShakeModifier>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ShakeModifier>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ShakeModifier>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ShakeModifier>, _OffsetEffect>);
    v2[0] = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ShakeModifier> and conformance _ViewModifier_Content<A>, &demangling cache variable for type metadata for _ViewModifier_Content<ShakeModifier>, MEMORY[0x24BDEFB78]);
    v2[1] = MEMORY[0x24BDEC438];
    result = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ShakeModifier>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_235697F7C()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(Spacer, HStack<TupleView<(Spacer, ModifiedContent<ReticleView, _FrameLayout>, Spacer)>>, Spacer)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(Spacer, HStack<TupleView<(Spacer, ModifiedContent<ReticleView, _FrameLayout>, Spacer)>>, Spacer)>>, MEMORY[0x24BDF4700]);
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ReticleView()
{
  return MEMORY[0x24BDF54F0];
}

uint64_t associated type witness table accessor for View.Body : View in ReticleView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ReticleView and conformance ReticleView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReticleView and conformance ReticleView;
  if (!lazy protocol witness table cache variable for type ReticleView and conformance ReticleView)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for ReticleView, &unk_2506BD8B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReticleView and conformance ReticleView);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReticleView.Corner(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && a1[16])
    return (*(_DWORD *)a1 + 253);
  v3 = *a1;
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ReticleView.Corner(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

void *type metadata accessor for ReticleView.Corner()
{
  return &unk_2506BD938;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>>, _FrameLayout>);
    v2[0] = lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>> and conformance ZStack<A>, &demangling cache variable for type metadata for ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>>, MEMORY[0x24BDF4750]);
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>, StrokeShapeView<ReticleView.Corner, Color, EmptyView>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ReticleView.Corner()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _ShapeView<ReticleView.Corner, ForegroundStyle> and conformance _ShapeView<A, B>, &demangling cache variable for type metadata for _ShapeView<ReticleView.Corner, ForegroundStyle>, MEMORY[0x24BDEB358]);
}

unint64_t lazy protocol witness table accessor for type ReticleView.Corner and conformance ReticleView.Corner()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner;
  if (!lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for ReticleView.Corner, &unk_2506BD938);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner;
  if (!lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for ReticleView.Corner, &unk_2506BD938);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner;
  if (!lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for ReticleView.Corner, &unk_2506BD938);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReticleView.Corner and conformance ReticleView.Corner);
  }
  return result;
}

void partial apply for closure #1 in ReticleView.Corner.path(in:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in ReticleView.Corner.path(in:)(*(double *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48), *(CGFloat *)(v1 + 56), a1, *(_BYTE *)(v1 + 16));
}

void *type metadata accessor for Segment()
{
  return &unk_2506BD9B8;
}

uint64_t storeEnumTagSinglePayload for ReticleView.Corner.Placement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_235698294 + 4 * byte_2356C1739[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2356982C8 + 4 * byte_2356C1734[v4]))();
}

uint64_t sub_2356982C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2356982D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2356982D8);
  return result;
}

uint64_t sub_2356982E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2356982ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2356982F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2356982F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ReticleView.Corner.Placement()
{
  return &unk_2506BDA50;
}

unint64_t lazy protocol witness table accessor for type ReticleView.Corner.Placement and conformance ReticleView.Corner.Placement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReticleView.Corner.Placement and conformance ReticleView.Corner.Placement;
  if (!lazy protocol witness table cache variable for type ReticleView.Corner.Placement and conformance ReticleView.Corner.Placement)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for ReticleView.Corner.Placement, &unk_2506BDA50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReticleView.Corner.Placement and conformance ReticleView.Corner.Placement);
  }
  return result;
}

id PostProcessRenderManager.mpsGaussianBlur.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  int v4;
  id v5;
  double v6;
  id v7;
  void *v8;
  id v9;

  v1 = *(void **)(v0 + 64);
  if (v1)
  {
    v2 = *(id *)(v0 + 64);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = *(_DWORD *)(v0 + 40);
    v5 = objc_allocWithZone(MEMORY[0x24BDDE3C8]);
    LODWORD(v6) = v4;
    v7 = objc_msgSend(v5, sel_initWithDevice_sigma_, v3, v6);
    v8 = *(void **)(v0 + 64);
    *(_QWORD *)(v0 + 64) = v7;
    v2 = v7;

    v1 = 0;
  }
  v9 = v1;
  return v2;
}

id PostProcessRenderManager.mpsAddImages.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 72);
  if (v1)
  {
    v2 = *(id *)(v0 + 72);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDE370]), sel_initWithDevice_, *(_QWORD *)(v0 + 16));
    v4 = *(void **)(v0 + 72);
    *(_QWORD *)(v0 + 72) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

id PostProcessRenderManager.mpsConverter.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 80);
  if (v1)
  {
    v2 = *(id *)(v0 + 80);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDE3A0]), sel_initWithDevice_, *(_QWORD *)(v0 + 16));
    v4 = *(void **)(v0 + 80);
    *(_QWORD *)(v0 + 80) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

id PostProcessRenderManager.frameUniformsBuffer.getter()
{
  uint64_t v0;
  id v1;
  id result;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = *(id *)(v0 + 88);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  result = objc_msgSend(*(id *)(v0 + 16), sel_newBufferWithLength_options_, 160, 0);
  if (result)
  {
    v1 = result;
    *(_QWORD *)(v0 + 88) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t PostProcessRenderManager.init(device:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id (**v13)(int, id, void *);
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _BYTE *v24;
  id v26[2];

  v3 = v2;
  v4 = v1;
  v26[1] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<UIInterfaceOrientation>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakInit();
  swift_unknownObjectWeakInit();
  *(float *)(v4 + 40) = specialized static ExperimentSettings.loadPostProcessBloomSigma(default:)(9.0);
  *(_BYTE *)(v4 + 44) = 1;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0x3F4CCCCD3E4CCCCDLL;
  *(float *)(v4 + 128) = specialized static ExperimentSettings.loadDepthHazeFloor(default:)(0.025);
  *(_BYTE *)(v4 + 132) = 2;
  *(_QWORD *)(v4 + 136) = 0xFFF0000000000000;
  *(_QWORD *)(v4 + 144) = 0;
  *(_QWORD *)(v4 + 152) = 0x3FE0000000000000;
  v10 = v4 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager__uiOrientation;
  v26[0] = (id)1;
  type metadata accessor for UIInterfaceOrientation(0);
  Atomic.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v10, v9, v6);
  v11 = OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_useDepthHaze;
  *(_BYTE *)(v4 + v11) = (specialized static ExperimentSettings.loadDepthHazeDisabled(default:)(0) & 1) == 0;
  v12 = OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_useOcclusionHaze;
  *(_BYTE *)(v4 + v12) = (specialized static ExperimentSettings.loadOcclusionHazeDisabled(default:)(1u) & 1) == 0;
  v13 = (id (**)(int, id, void *))(v4
                                            + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_mpsCopyAllocator);
  *v13 = closure #1 in variable initialization expression of PostProcessRenderManager.mpsCopyAllocator;
  v13[1] = 0;
  *(_QWORD *)(v4 + 16) = a1;
  v14 = one-time initialization token for bundle;
  swift_unknownObjectRetain();
  if (v14 != -1)
    swift_once();
  v26[0] = 0;
  v15 = objc_msgSend(a1, sel_newDefaultLibraryWithBundle_error_, static PostProcessRenderManager.bundle, v26);
  if (v15)
  {
    v16 = v15;
    v17 = v26[0];
    PostProcessRenderManager.makeCompositingPipeline(library:)(v16);
    if (v3)
    {
      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      PostProcessRenderManager.makeOcclusionHazePipeline(library:)(v16);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v18 = v26[0];
    swift_release();
    v19 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for logger != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)logger);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_2355E9000, v21, v22, "Can't get default Metal library for PostProcessRenderManager!", v23, 2u);
      MEMORY[0x23B7D3428](v23, -1, -1);
    }

    lazy protocol witness table accessor for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error();
    swift_allocError();
    *v24 = 2;
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  return v4;
}

uint64_t PostProcessRenderManager.attach(to:frameProcessor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t result;
  void (*v8)(_BYTE *, _QWORD);
  _BYTE v9[32];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)&v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for OS_dispatch_queue();
  *v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5610], v2);
  v6 = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    swift_unknownObjectWeakAssign();
    swift_weakAssign();
    *(_BYTE *)(v1 + 44) = dispatch thunk of ARView.__disableComposition.getter() & 1;
    dispatch thunk of ARView.__disableComposition.setter();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    v8 = (void (*)(_BYTE *, _QWORD))ARView.renderCallbacks.modify();
    ARView.RenderCallbacks.postProcess.setter();
    v8(v9, 0);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in PostProcessRenderManager.attach(to:frameProcessor:)(uint64_t a1)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    PostProcessRenderManager.render(context:)(a1);
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PostProcessRenderManager.detach()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  void *v8;
  void (*v9)(_BYTE *, _QWORD);
  uint64_t v10;
  void *v11;
  _BYTE v12[32];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)&v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for OS_dispatch_queue();
  *v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5610], v2);
  v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    v7 = MEMORY[0x23B7D34DC](v1 + 32);
    if (v7)
    {
      v8 = (void *)v7;
      v9 = (void (*)(_BYTE *, _QWORD))ARView.renderCallbacks.modify();
      ARView.RenderCallbacks.postProcess.setter();
      v9(v12, 0);

    }
    v10 = MEMORY[0x23B7D34DC](v1 + 32);
    if (v10)
    {
      v11 = (void *)v10;
      dispatch thunk of ARView.__disableComposition.setter();

    }
    swift_weakAssign();
    swift_unknownObjectWeakAssign();
  }
  else
  {
    __break(1u);
  }
}

id closure #1 in variable initialization expression of PostProcessRenderManager.mpsCopyAllocator(int a1, id a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id result;

  v4 = objc_msgSend(a2, sel_device);
  v5 = objc_msgSend(a3, sel_width);
  v6 = objc_msgSend(a3, sel_height);
  v7 = objc_msgSend(a3, sel_pixelFormat);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD740]), sel_init);
  objc_msgSend(v8, sel_setPixelFormat_, v7);
  objc_msgSend(v8, sel_setWidth_, v5);
  objc_msgSend(v8, sel_setHeight_, v6);
  objc_msgSend(v8, sel_setUsage_, 7);
  v9 = objc_msgSend(v4, sel_newTextureWithDescriptor_, v8);
  swift_unknownObjectRelease();

  if (v9)
    return v9;
  result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PostProcessRenderManager.makeCompositingPipeline(library:)(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _BYTE *v12;
  void *v14;
  id v15[2];

  v15[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x23B7D2498](0xD000000000000021, 0x80000002356C8530);
  v4 = objc_msgSend(a1, sel_newFunctionWithName_, v3);

  if (v4)
  {
    v5 = *(void **)(v1 + 16);
    v15[0] = 0;
    v6 = objc_msgSend(v5, sel_newComputePipelineStateWithFunction_error_, v4, v15);
    v7 = v15[0];
    if (v6)
    {
      swift_unknownObjectRelease();
      *(_QWORD *)(v1 + 48) = v6;
    }
    else
    {
      v14 = v7;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_2355E9000, v9, v10, "⚠️ Cannot create compositing pipeline ⚠️", v11, 2u);
      MEMORY[0x23B7D3428](v11, -1, -1);
    }

    lazy protocol witness table accessor for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error();
    swift_allocError();
    *v12 = 0;
    return swift_willThrow();
  }
}

uint64_t PostProcessRenderManager.makeOcclusionHazePipeline(library:)(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _BYTE *v12;
  void *v14;
  id v15[2];

  v15[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = (void *)MEMORY[0x23B7D2498](0xD000000000000023, 0x80000002356C8500);
  v4 = objc_msgSend(a1, sel_newFunctionWithName_, v3);

  if (v4)
  {
    v5 = *(void **)(v1 + 16);
    v15[0] = 0;
    v6 = objc_msgSend(v5, sel_newComputePipelineStateWithFunction_error_, v4, v15);
    v7 = v15[0];
    if (v6)
    {
      swift_unknownObjectRelease();
      *(_QWORD *)(v1 + 56) = v6;
    }
    else
    {
      v14 = v7;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_2355E9000, v9, v10, "⚠️ Cannot create occlusion haze pipeline ⚠️", v11, 2u);
      MEMORY[0x23B7D3428](v11, -1, -1);
    }

    lazy protocol witness table accessor for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error();
    swift_allocError();
    *v12 = 1;
    return swift_willThrow();
  }
}

void PostProcessRenderManager.render(context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  double v13;
  id v14;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint8_t *v33;
  uint64_t v34;
  uint8_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id *v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  _DWORD *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;

  v65 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<UIInterfaceOrientation>);
  v64 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ARView.PostProcessContext();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = 0;
  v71 = 0;
  v66 = v1;
  v69 = 0;
  if (!swift_weakLoadStrong())
    goto LABEL_8;
  v9 = swift_allocObject();
  v10 = swift_weakInit();
  MEMORY[0x24BDAC7A8](v10);
  *(&v61 - 4) = (_DWORD *)v9;
  *(&v61 - 3) = &v71;
  *(&v61 - 2) = &v69;
  *(&v61 - 1) = &v70;
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  swift_release();
  v11 = v71;
  if (!v71 || !v69)
  {
LABEL_8:
    if (one-time initialization token for logger != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)logger);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_2355E9000, v23, v24, "Can't pop the arFrame and camera frame!", v25, 2u);
      MEMORY[0x23B7D3428](v25, -1, -1);
    }

    goto LABEL_13;
  }
  v12 = v66;
  v13 = *(double *)(v66 + 136);
  v63 = v69;
  if (v13 > -INFINITY)
  {
    v14 = v71;
    swift_unknownObjectRetain();
    v15 = v65;
    v16 = *(unsigned __int8 *)(v12 + 132);
    if (*(_BYTE *)(v12 + 132))
      goto LABEL_6;
LABEL_26:
    v59 = objc_msgSend((id)ARView.PostProcessContext.commandBuffer.getter(), sel_blitCommandEncoder);
    swift_unknownObjectRelease();
    if (v59)
    {
      swift_unknownObjectRetain();
      v60 = ARView.PostProcessContext.sourceColorTexture.getter();
      objc_msgSend(v59, sel_copyFromTexture_toTexture_, v60, ARView.PostProcessContext.targetColorTexture.getter());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      objc_msgSend((id)swift_unknownObjectRetain(), sel_endEncoding);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();

LABEL_13:
      swift_unknownObjectRelease();
LABEL_14:
      swift_unknownObjectRelease();

      return;
    }
LABEL_28:
    swift_unknownObjectRelease();

    goto LABEL_13;
  }
  v26 = one-time initialization token for logger;
  v27 = v71;
  swift_unknownObjectRetain();
  v28 = v65;
  if (v26 != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v28, v5);
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    v62 = v11;
    v33 = v32;
    *(_DWORD *)v32 = 134349056;
    v61 = v32 + 4;
    ARView.PostProcessContext.time.getter();
    v68 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl(&dword_2355E9000, v30, v31, "Got first ARFrame in compositor at time = %{public}f", v33, 0xCu);
    v35 = v33;
    v11 = v62;
    v12 = v66;
    MEMORY[0x23B7D3428](v35, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  v15 = v65;
  ARView.PostProcessContext.time.getter();
  v57 = v56;
  *(double *)(v12 + 136) = v56;
  type metadata accessor for RampAnimation();
  v58 = swift_allocObject();
  *(_QWORD *)(v58 + 64) = 0xFFF0000000000000;
  *(_BYTE *)(v58 + 24) = 0;
  *(_QWORD *)(v58 + 16) = 0x3FE0000000000000;
  *(_DWORD *)(v58 + 72) = 0;
  *(_QWORD *)(v58 + 32) = 0;
  *(_QWORD *)(v58 + 40) = 0;
  *(double *)(v58 + 48) = v57;
  *(double *)(v58 + 56) = v57 + 0.5;
  *(_QWORD *)(v12 + 144) = v58;
  swift_release();
  v16 = *(unsigned __int8 *)(v12 + 132);
  if (!*(_BYTE *)(v12 + 132))
    goto LABEL_26;
LABEL_6:
  if (v16 == 1)
  {
    v17 = (void *)ARView.PostProcessContext.targetColorTexture.getter();
    ARView.PostProcessContext.projection.getter();
    v18 = v12 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager__uiOrientation;
    swift_beginAccess();
    v19 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v4, v18, v2);
    Atomic.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v2);
    specialized PostProcessRenderManager.updateUniforms(context:arFrame:arFrameTexture:viewportTexture:sceneProjection:viewOrientation:)(v15, v11, v17, v67);
    swift_unknownObjectRelease();
    v20 = ARView.PostProcessContext.sourceColorTexture.getter();
    v21 = ARView.PostProcessContext.targetColorTexture.getter();
    PostProcessRenderManager.executeCompositing(context:colorTexture:sourceTexture:destinationTexture:)(v15, v63, v20, v21);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_28;
  }
  v36 = (void *)ARView.PostProcessContext.targetColorTexture.getter();
  ARView.PostProcessContext.projection.getter();
  v37 = v12 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager__uiOrientation;
  swift_beginAccess();
  v38 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v4, v37, v2);
  Atomic.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v2);
  v62 = v11;
  specialized PostProcessRenderManager.updateUniforms(context:arFrame:arFrameTexture:viewportTexture:sceneProjection:viewOrientation:)(v15, v11, v36, v67);
  swift_unknownObjectRelease();
  v39 = (void *)ARView.PostProcessContext.targetColorTexture.getter();
  v40 = *(void **)(v12 + 16);
  v41 = objc_msgSend(v39, sel_width);
  v42 = objc_msgSend(v39, sel_height);
  v43 = objc_msgSend(v39, sel_pixelFormat);
  v44 = (id *)(v66 + 96);
  swift_beginAccess();
  specialized static ARFrameProcessor.updateTexture(_:metalDevice:width:height:usage:pixelFormat:)(v44, v40, v41, v42, (id)7, v43);
  swift_endAccess();
  v45 = v66;
  v46 = objc_msgSend(v39, sel_width);
  v47 = objc_msgSend(v39, sel_height);
  v48 = objc_msgSend(v39, sel_pixelFormat);
  swift_beginAccess();
  specialized static ARFrameProcessor.updateTexture(_:metalDevice:width:height:usage:pixelFormat:)((id *)(v45 + 104), v40, v46, v47, (id)7, v48);
  swift_endAccess();
  swift_unknownObjectRelease();
  v49 = v70;
  swift_unknownObjectRetain();
  v50 = ARView.PostProcessContext.sourceColorTexture.getter();
  swift_beginAccess();
  if (!*(_QWORD *)(v45 + 104))
  {
    __break(1u);
    goto LABEL_30;
  }
  PostProcessRenderManager.executeOcclusionHaze(context:arDepthTexture:sourceTexture:destinationTexture:)(v15, v49, v50, (_QWORD *)(v45 + 104));
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v51 = ARView.PostProcessContext.commandBuffer.getter();
  v52 = *(_QWORD *)(v45 + 104);
  if (!v52)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v53 = v51;
  swift_beginAccess();
  if (!*v44)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  swift_unknownObjectRetain();
  PostProcessRenderManager.executeBloom(commandBuffer:sourceTexture:destinationTexture:)(v53, v52, v44);
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v54 = *(_QWORD *)(v45 + 96);
  if (v54)
  {
    swift_unknownObjectRetain();
    v55 = ARView.PostProcessContext.targetColorTexture.getter();
    PostProcessRenderManager.executeCompositing(context:colorTexture:sourceTexture:destinationTexture:)(v15, v63, v54, v55);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_14;
  }
LABEL_32:
  __break(1u);
}

float PostProcessRenderManager.getCameraFeedGain(at:)(Swift::Double a1)
{
  uint64_t v1;
  float v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;

  v3 = 0.0;
  if (*(double *)(v1 + 136) > -INFINITY)
  {
    v4 = v1;
    v5 = *(_QWORD *)(v1 + 144);
    if (v5)
    {
      swift_retain();
      v3 = RampAnimation.update(time:)(a1);
      v7 = *(double *)(v5 + 56);
      v6 = *(double *)(v5 + 64);
      swift_release();
      if (v7 < v6)
      {
        *(_QWORD *)(v4 + 144) = 0;
        swift_release();
      }
    }
    else
    {
      return 1.0;
    }
  }
  return v3;
}

void PostProcessRenderManager.executeBloom(commandBuffer:sourceTexture:destinationTexture:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[6];

  v7 = PostProcessRenderManager.mpsGaussianBlur.getter();
  objc_msgSend(v7, sel_encodeToCommandBuffer_sourceTexture_destinationTexture_, a1, a2, *a3);

  v8 = PostProcessRenderManager.mpsAddImages.getter();
  v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_mpsCopyAllocator);
  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_mpsCopyAllocator + 8);
  v12[4] = v9;
  v12[5] = v10;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed MPSKernel, @guaranteed MTLCommandBuffer, @guaranteed MTLTexture) -> (@owned MTLTexture);
  v12[3] = &block_descriptor_9;
  v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_encodeToCommandBuffer_primaryTexture_inPlaceSecondaryTexture_fallbackCopyAllocator_, a1, a2, a3, v11);
  _Block_release(v11);

}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed MPSKernel, @guaranteed MTLCommandBuffer, @guaranteed MTLTexture) -> (@owned MTLTexture)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(id, uint64_t, uint64_t);
  id v8;
  uint64_t v9;

  v7 = *(uint64_t (**)(id, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v8 = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v9 = v7(v8, a3, a4);
  swift_release();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

uint64_t PostProcessRenderManager.executeCompositing(context:colorTexture:sourceTexture:destinationTexture:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v8;
  uint64_t result;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v8 = objc_msgSend((id)ARView.PostProcessContext.commandBuffer.getter(), sel_computeCommandEncoder);
  result = swift_unknownObjectRelease();
  if (v8)
  {
    v10 = *(void **)(v4 + 48);
    if (!v10)
      return swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    objc_msgSend(v8, sel_setComputePipelineState_, v10);
    objc_msgSend(v8, sel_setBuffer_offset_atIndex_, PostProcessRenderManager.frameUniformsBuffer.getter(), 0, 0);
    swift_unknownObjectRelease();
    objc_msgSend(v8, sel_setTexture_atIndex_, a3, 0);
    objc_msgSend(v8, sel_setTexture_atIndex_, a2, 1);
    objc_msgSend(v8, sel_setTexture_atIndex_, a4, 2);
    v11 = objc_msgSend((id)ARView.PostProcessContext.sourceColorTexture.getter(), sel_width);
    swift_unknownObjectRelease();
    v12 = objc_msgSend((id)ARView.PostProcessContext.sourceColorTexture.getter(), sel_height);
    swift_unknownObjectRelease();
    v13 = (uint64_t)objc_msgSend(v10, sel_threadExecutionWidth);
    result = (uint64_t)objc_msgSend(v10, sel_maxTotalThreadsPerThreadgroup);
    if (v13)
    {
      if (result != 0x8000000000000000 || v13 != -1)
      {
        MTLSizeMake(v13, result / v13, &v18);
        v14 = v19;
        v15 = v18;
        *(_QWORD *)&v18 = v11;
        *((_QWORD *)&v18 + 1) = v12;
        v19 = 1;
        v16 = v15;
        v17 = v14;
        objc_msgSend(v8, sel_dispatchThreads_threadsPerThreadgroup_, &v18, &v16);
        objc_msgSend(v8, sel_endEncoding);
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t PostProcessRenderManager.executeOcclusionHaze(context:arDepthTexture:sourceTexture:destinationTexture:)(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v9;
  id v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v5 = v4;
  if (a2)
  {
    v9 = *(void **)(v4 + 16);
    v10 = objc_msgSend((id)swift_unknownObjectRetain(), sel_width);
    v11 = objc_msgSend(a2, sel_height);
    swift_beginAccess();
    specialized static ARFrameProcessor.updateTexture(_:metalDevice:width:height:usage:pixelFormat:)((id *)(v5 + 112), v9, v10, v11, (id)3, (id)0x19);
    swift_endAccess();
    result = ARView.PostProcessContext.commandBuffer.getter();
    v13 = *(_QWORD *)(v5 + 112);
    if (!v13)
      goto LABEL_14;
    v14 = result;
    swift_unknownObjectRetain();
    v15 = PostProcessRenderManager.mpsConverter.getter();
    objc_msgSend(v15, sel_encodeToCommandBuffer_sourceTexture_destinationTexture_, v14, a2, v13);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

  }
  v16 = objc_msgSend((id)ARView.PostProcessContext.commandBuffer.getter(), sel_computeCommandEncoder);
  result = swift_unknownObjectRelease();
  if (!v16)
    return result;
  v17 = *(void **)(v5 + 56);
  if (v17)
  {
    swift_unknownObjectRetain();
    objc_msgSend(v16, sel_setComputePipelineState_, v17);
    objc_msgSend(v16, sel_setBuffer_offset_atIndex_, PostProcessRenderManager.frameUniformsBuffer.getter(), 0, 0);
    swift_unknownObjectRelease();
    objc_msgSend(v16, sel_setTexture_atIndex_, a3, 0);
    objc_msgSend(v16, sel_setTexture_atIndex_, ARView.PostProcessContext.sourceDepthTexture.getter(), 1);
    swift_unknownObjectRelease();
    swift_beginAccess();
    objc_msgSend(v16, sel_setTexture_atIndex_, *(_QWORD *)(v5 + 112), 2);
    v18 = (void *)*a4;
    objc_msgSend(v16, sel_setTexture_atIndex_, *a4, 3);
    v19 = objc_msgSend(v18, sel_width);
    v20 = objc_msgSend(v18, sel_height);
    v21 = (uint64_t)objc_msgSend(v17, sel_threadExecutionWidth);
    result = (uint64_t)objc_msgSend(v17, sel_maxTotalThreadsPerThreadgroup);
    if (v21)
    {
      if (result != 0x8000000000000000 || v21 != -1)
      {
        MTLSizeMake(v21, result / v21, &v26);
        v22 = v27;
        v23 = v26;
        *(_QWORD *)&v26 = v19;
        *((_QWORD *)&v26 + 1) = v20;
        v27 = 1;
        v24 = v23;
        v25 = v22;
        objc_msgSend(v16, sel_dispatchThreads_threadsPerThreadgroup_, &v26, &v24);
        objc_msgSend(v16, sel_endEncoding);
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  return swift_unknownObjectRelease();
}

id *PostProcessRenderManager.deinit()
{
  id *v0;
  char *v1;
  uint64_t v2;

  swift_unknownObjectRelease();
  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  v1 = (char *)v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager__uiOrientation;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Atomic<UIInterfaceOrientation>);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t PostProcessRenderManager.__deallocating_deinit()
{
  PostProcessRenderManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PostProcessRenderManager()
{
  return type metadata accessor for PostProcessRenderManager();
}

uint64_t type metadata accessor for PostProcessRenderManager()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PostProcessRenderManager;
  if (!type metadata singleton initialization cache for PostProcessRenderManager)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for PostProcessRenderManager()
{
  unint64_t v0;

  type metadata accessor for Atomic<UIInterfaceOrientation>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for Atomic<UIInterfaceOrientation>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Atomic<UIInterfaceOrientation>)
  {
    type metadata accessor for UIInterfaceOrientation(255);
    v0 = type metadata accessor for Atomic();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Atomic<UIInterfaceOrientation>);
  }
}

ValueMetadata *type metadata accessor for PostProcessRenderManager.Technique()
{
  return &type metadata for PostProcessRenderManager.Technique;
}

unint64_t lazy protocol witness table accessor for type PostProcessRenderManager.Technique and conformance PostProcessRenderManager.Technique()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PostProcessRenderManager.Technique and conformance PostProcessRenderManager.Technique;
  if (!lazy protocol witness table cache variable for type PostProcessRenderManager.Technique and conformance PostProcessRenderManager.Technique)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for PostProcessRenderManager.Technique, &type metadata for PostProcessRenderManager.Technique);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PostProcessRenderManager.Technique and conformance PostProcessRenderManager.Technique);
  }
  return result;
}

uint64_t MTLSizeMake@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  a3[2] = 1;
  return result;
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t sub_23569A458()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FrameCache.pop(arFrame:textureYCbCr:textureDepth:)@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in FrameCache.pop(arFrame:textureYCbCr:textureDepth:)(*(void ***)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

float specialized PostProcessRenderManager.updateUniforms(context:arFrame:arFrameTexture:viewportTexture:sceneProjection:viewOrientation:)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id v9;
  char *v10;
  id v11;
  id v12;
  double v13;
  Swift::Double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  float result;
  char v22;
  CGAffineTransform v23;
  CGAffineTransform v24;

  v5 = v4;
  v9 = PostProcessRenderManager.frameUniformsBuffer.getter();
  v10 = (char *)objc_msgSend(v9, sel_contents);
  v11 = v9;
  v12 = objc_msgSend(a3, sel_width);
  v13 = (double)(uint64_t)objc_msgSend(a3, sel_height);
  ARView.PostProcessContext.time.getter();
  *((float *)v10 + 28) = PostProcessRenderManager.getCameraFeedGain(at:)(v14);
  objc_msgSend(a2, sel_displayTransformForOrientation_viewportSize_, a4, (double)(uint64_t)v12, v13);
  CGAffineTransformInvert(&v23, &v24);
  v24 = v23;
  specialized simd_float3x3.init(cgTransform:vectorType:)(&v24.a, 0, (int32x4_t *)&v23);
  v15 = *(_OWORD *)&v23.c;
  *(_OWORD *)v10 = *(_OWORD *)&v23.a;
  *((_OWORD *)v10 + 1) = v15;
  *((_OWORD *)v10 + 2) = *(_OWORD *)&v23.tx;
  ARView.PostProcessContext.projection.getter();
  *((_OWORD *)v10 + 3) = v16;
  *((_OWORD *)v10 + 4) = v17;
  *((_OWORD *)v10 + 5) = v18;
  *((_OWORD *)v10 + 6) = v19;
  v20 = *(_BYTE *)(v5 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_useDepthHaze);
  result = *(float *)(v5 + 128);
  v22 = *(_BYTE *)(v5 + OBJC_IVAR____TtC19_RealityKit_SwiftUI24PostProcessRenderManager_useOcclusionHaze);
  *(_QWORD *)&v17 = *(_QWORD *)(v5 + 120);
  *(_OWORD *)(v10 + 116) = xmmword_2356C1B00;
  *((float *)v10 + 33) = result;
  *((_QWORD *)v10 + 17) = v17;
  v10[144] = v22;
  v10[145] = 1;
  v10[146] = v20;
  return result;
}

unint64_t lazy protocol witness table accessor for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error;
  if (!lazy protocol witness table cache variable for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for PostProcessRenderManager.Error, &type metadata for PostProcessRenderManager.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error;
  if (!lazy protocol witness table cache variable for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for PostProcessRenderManager.Error, &type metadata for PostProcessRenderManager.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PostProcessRenderManager.Error and conformance PostProcessRenderManager.Error);
  }
  return result;
}

uint64_t partial apply for closure #1 in PostProcessRenderManager.attach(to:frameProcessor:)(uint64_t a1)
{
  return closure #1 in PostProcessRenderManager.attach(to:frameProcessor:)(a1);
}

uint64_t storeEnumTagSinglePayload for PostProcessRenderManager.Technique(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23569A6A4 + 4 * byte_2356C1B15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23569A6D8 + 4 * byte_2356C1B10[v4]))();
}

uint64_t sub_23569A6D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23569A6E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23569A6E8);
  return result;
}

uint64_t sub_23569A6F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23569A6FCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23569A700(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23569A708(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PostProcessRenderManager.Error()
{
  return &type metadata for PostProcessRenderManager.Error;
}

void CameraFrustumRenderer.showShotLocations.didset(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  double v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  double v19;
  __int128 v20;
  _QWORD v21[3];
  __int128 v22;
  _QWORD v23[3];
  uint64_t v24;
  _OWORD v25[3];

  v2 = v1;
  if (one-time initialization token for logger != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v7 = 67109120;
    LODWORD(v25[0]) = *(unsigned __int8 *)(v2 + 24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_2355E9000, v5, v6, "Set showShotLocations to %{BOOL}d", v7, 8u);
    MEMORY[0x23B7D3428](v7, -1, -1);

  }
  else
  {

    swift_release();
  }
  v8 = *(unsigned __int8 *)(v2 + 24);
  if (v8 != (a1 & 1))
  {
    if ((v8 & 1) != 0)
    {
      v9 = 0;
    }
    else
    {
      *(_QWORD *)(v2 + 208) = 0;
      *(_QWORD *)(v2 + 56) = 0;
      swift_unknownObjectRelease();
      v9 = *(_BYTE *)(v2 + 24) ^ 1;
    }
    swift_beginAccess();
    outlined init with copy of Animation?(v2 + 216, (uint64_t)v25);
    v10 = *((_QWORD *)&v25[1] + 1);
    if (*((_QWORD *)&v25[1] + 1))
    {
      outlined init with copy of Cancellable((uint64_t)v25, (uint64_t)v23);
      outlined destroy of Animation?((uint64_t)v25);
      __swift_project_boxed_opaque_existential_1(v23, v24);
      v11 = COERCE_UNSIGNED_INT(RampAnimation.update(time:)(*(Swift::Double *)(v2 + 72)));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    }
    else
    {
      outlined destroy of Animation?((uint64_t)v25);
      v11 = 0;
    }
    v12 = v10 == 0;
    v13 = type metadata accessor for RampAnimation();
    swift_allocObject();
    LOBYTE(v25[0]) = v12;
    v14 = RampAnimation.init(type:duration:target:startValue:)(v9 & 1, 0, 0, v11 | ((unint64_t)v12 << 32), 0.5);
    *((_QWORD *)&v25[1] + 1) = v13;
    *(_QWORD *)&v25[2] = &protocol witness table for RampAnimation;
    *(_QWORD *)&v25[0] = v14;
    outlined init with take of Animation?((uint64_t)v25, (uint64_t)v23);
    swift_beginAccess();
    outlined assign with take of Animation?((uint64_t)v23, v2 + 216);
    swift_endAccess();
    outlined init with copy of Animation?(v2 + 216, (uint64_t)v23);
    if (v24)
    {
      outlined init with copy of Cancellable((uint64_t)v23, (uint64_t)v21);
      outlined destroy of Animation?((uint64_t)v23);
      v20 = v22;
      v15 = __swift_project_boxed_opaque_existential_1(v21, v22);
      v16 = *(double *)(v2 + 72);
      *(_OWORD *)((char *)&v25[1] + 8) = v20;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v25);
      v18 = *v15;
      v19 = v16 + *(double *)(*v15 + 16);
      *(double *)(v18 + 48) = v16;
      *(double *)(v18 + 56) = v19;
      *boxed_opaque_existential_1 = v18;
      swift_retain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    }
    else
    {
      outlined destroy of Animation?((uint64_t)v23);
      memset(v25, 0, 40);
    }
    outlined destroy of Animation?((uint64_t)v25);
  }
}

void CameraFrustumRenderer.setup(device:pixelFormat:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  id v13;

  v4 = v2;
  if (one-time initialization token for logger != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_2355E9000, v8, v9, "Setting up CameraFrustumRenderer!", v10, 2u);
    MEMORY[0x23B7D3428](v10, -1, -1);
  }

  v4[4] = a1;
  swift_unknownObjectRetain_n();
  swift_unknownObjectRelease();
  type metadata accessor for CameraFrustumMesh();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_DWORD *)(v11 + 64) = 1000593162;
  *(_OWORD *)(v11 + 72) = xmmword_2356C1DB0;
  *(_QWORD *)(v11 + 88) = 0x3CA3D70A3CF5C28FLL;
  *(_QWORD *)(v11 + 96) = 32;
  *(_QWORD *)(v11 + 104) = 0x3CA3D70A3C75C28FLL;
  *(_DWORD *)(v11 + 112) = 981668463;
  *(_QWORD *)(v11 + 120) = 32;
  CameraFrustumMesh.setConeMTLBuffer(device:coneHeight:coneBaseRadius:coneBaseSegments:)(a1, 32, 0.03, 0.02);
  CameraFrustumMesh.setHollowCylinderMTLBuffer(device:zOffset:innerRadius:outerRadius:height:circleSegments:)(a1, 32, -0.03, 0.015, 0.02, 0.001);
  CameraFrustumMesh.setSphereMTLBuffer(device:radius:radialSegments:verticalSegments:)((uint64_t)a1, 16, 8uLL, 0.005);
  swift_unknownObjectRelease();
  v4[8] = v11;
  swift_release();
  CameraFrustumRenderer.initRenderPipeline(pixelFormat:)(a2);
  if (!v3)
  {
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD590]), sel_init);
    objc_msgSend(v12, sel_setDepthCompareFunction_, 1);
    objc_msgSend(v12, sel_setDepthWriteEnabled_, 1);
    v13 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v12);

    if (v13)
    {
      v4[6] = v13;
      swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

void CameraFrustumRenderer.render(into:desc:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;

  if (*(float *)(v2 + 256) > 0.001)
  {
    if (*(_QWORD *)(v2 + 40))
    {
      v5 = MEMORY[0x23B7D34DC](v2 + 16);
      if (v5)
      {
        v6 = (void *)v5;
        v7 = v5 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots;
        swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v7 + 16))
        {
          CameraFrustumRenderer.createPosesMTLBufferIfNeeded()();
          v8 = objc_msgSend(a2, sel_colorAttachments);
          v9 = objc_msgSend(v8, sel_objectAtIndexedSubscript_, 0);

          if (!v9)
          {
            __break(1u);
            return;
          }
          objc_msgSend(v9, sel_setLoadAction_, 1);

          CameraFrustumRenderer.renderCone(into:desc:)(a1, (uint64_t)a2);
          CameraFrustumRenderer.renderHollowCylinder(into:desc:)(a1, (uint64_t)a2);
          CameraFrustumRenderer.renderSphere(into:desc:)(a1, (uint64_t)a2);
        }

      }
    }
  }
}

Swift::Void __swiftcall CameraFrustumRenderer.update(time:worldToView:viewToClip:)(Swift::Double time, simd_float4x4 *worldToView, simd_float4x4 *viewToClip)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  __int128 v21;

  v11 = v3;
  *(Swift::Double *)(v3 + 72) = time;
  *(_OWORD *)(v3 + 80) = v4;
  *(_OWORD *)(v3 + 96) = v5;
  *(_OWORD *)(v3 + 112) = v6;
  *(_OWORD *)(v3 + 128) = v7;
  *(_OWORD *)(v3 + 144) = v8;
  *(_OWORD *)(v3 + 160) = v9;
  *(_OWORD *)(v3 + 176) = v10;
  *(_OWORD *)(v3 + 192) = v21;
  v13 = v3 + 216;
  swift_beginAccess();
  outlined init with copy of Animation?(v13, (uint64_t)&v16);
  if (*((_QWORD *)&v17 + 1))
  {
    outlined init with take of Animation(&v16, (uint64_t)v19);
    v14 = __swift_project_boxed_opaque_existential_1(v19, v20);
    if (*(double *)(*v14 + 56) >= *(double *)(*v14 + 64))
    {
      __swift_project_boxed_opaque_existential_1(v19, v20);
      *(Swift::Float *)(v11 + 256) = RampAnimation.update(time:)(time);
    }
    else
    {
      v15 = 0.0;
      if (*(_BYTE *)(v11 + 24))
        v15 = 1.0;
      *(float *)(v11 + 256) = v15;
      v18 = 0;
      v16 = 0u;
      v17 = 0u;
      swift_beginAccess();
      outlined assign with take of Animation?((uint64_t)&v16, v13);
      swift_endAccess();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    outlined destroy of Animation?((uint64_t)&v16);
  }
}

void CameraFrustumRenderer.initRenderPipeline(pixelFormat:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  id v35[2];

  v35[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = *(void **)(v1 + 32);
  if (!v2)
    __break(1u);
  v4 = one-time initialization token for bundle;
  swift_unknownObjectRetain();
  if (v4 != -1)
    swift_once();
  v35[0] = 0;
  v5 = objc_msgSend(v2, sel_newDefaultLibraryWithBundle_error_, static BaseRenderer.bundle, v35);
  swift_unknownObjectRelease();
  if (!v5)
  {
    v31 = v35[0];
    v32 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  v6 = v35[0];
  v7 = (void *)MEMORY[0x23B7D2498](0xD000000000000028, 0x80000002356C8790);
  v8 = objc_msgSend(v5, sel_newFunctionWithName_, v7);

  v9 = (void *)MEMORY[0x23B7D2498](0xD000000000000026, 0x80000002356C87C0);
  v10 = objc_msgSend(v5, sel_newFunctionWithName_, v9);

  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD6B8]), sel_init);
  objc_msgSend(v11, sel_setVertexFunction_, v8);
  objc_msgSend(v11, sel_setFragmentFunction_, v10);
  objc_msgSend(v11, sel_setDepthAttachmentPixelFormat_, 252);
  v12 = objc_msgSend(v11, sel_colorAttachments);
  v13 = objc_msgSend(v12, sel_objectAtIndexedSubscript_, 0);

  if (!v13)
  {
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v13, sel_setPixelFormat_, a1);

  v14 = objc_msgSend(v11, sel_colorAttachments);
  v15 = objc_msgSend(v14, sel_objectAtIndexedSubscript_, 0);

  if (!v15)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  objc_msgSend(v15, sel_setBlendingEnabled_, 1);

  v16 = objc_msgSend(v11, sel_colorAttachments);
  v17 = objc_msgSend(v16, sel_objectAtIndexedSubscript_, 0);

  if (!v17)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v17, sel_setRgbBlendOperation_, 0);

  v18 = objc_msgSend(v11, sel_colorAttachments);
  v19 = objc_msgSend(v18, sel_objectAtIndexedSubscript_, 0);

  if (!v19)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  objc_msgSend(v19, sel_setAlphaBlendOperation_, 0);

  v20 = objc_msgSend(v11, sel_colorAttachments);
  v21 = objc_msgSend(v20, sel_objectAtIndexedSubscript_, 0);

  if (!v21)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  objc_msgSend(v21, sel_setSourceRGBBlendFactor_, 4);

  v22 = objc_msgSend(v11, sel_colorAttachments);
  v23 = objc_msgSend(v22, sel_objectAtIndexedSubscript_, 0);

  if (!v23)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  objc_msgSend(v23, sel_setSourceAlphaBlendFactor_, 4);

  v24 = objc_msgSend(v11, sel_colorAttachments);
  v25 = objc_msgSend(v24, sel_objectAtIndexedSubscript_, 0);

  if (!v25)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  objc_msgSend(v25, sel_setDestinationRGBBlendFactor_, 5);

  v26 = objc_msgSend(v11, sel_colorAttachments);
  v27 = objc_msgSend(v26, sel_objectAtIndexedSubscript_, 0);

  if (!v27)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  objc_msgSend(v27, sel_setDestinationAlphaBlendFactor_, 5);

  v28 = *(void **)(v1 + 32);
  if (!v28)
  {
LABEL_27:
    __break(1u);
    return;
  }
  v35[0] = 0;
  v29 = objc_msgSend(v28, sel_newRenderPipelineStateWithDescriptor_error_, v11, v35);
  v30 = v35[0];
  if (v29)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    *(_QWORD *)(v1 + 40) = v29;
    swift_unknownObjectRelease();
  }
  else
  {
    v33 = v30;
    v34 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error();
    swift_allocError();
    swift_willThrow();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

  }
}

void CameraFrustumRenderer.createPosesMTLBufferIfNeeded()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  unint64_t v12;
  id v13;
  void *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    v2 = v0;
    v3 = MEMORY[0x23B7D34DC](v0 + 16);
    if (v3)
    {
      v4 = (void *)v3;
      v5 = v3 + OBJC_IVAR____TtC19_RealityKit_SwiftUI17CameraPathManager_shots;
      swift_beginAccess();
      v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
      if (!v6 || *(_QWORD *)(v0 + 208) == v6)
      {
LABEL_17:

      }
      else
      {
        v7 = one-time initialization token for logger;
        swift_unknownObjectRetain();
        if (v7 != -1)
          goto LABEL_20;
        while (1)
        {
          v8 = type metadata accessor for Logger();
          __swift_project_value_buffer(v8, (uint64_t)logger);
          v9 = Logger.logObject.getter();
          v10 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v9, v10))
          {
            v11 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v11 = 0;
            _os_log_impl(&dword_2355E9000, v9, v10, "Recreating MTLBuffer for camera poses!", v11, 2u);
            MEMORY[0x23B7D3428](v11, -1, -1);
          }

          v12 = *(_QWORD *)(*(_QWORD *)v5 + 16);
          *(_QWORD *)(v2 + 208) = v12;
          if (v12 >> 57)
            break;
          v13 = objc_msgSend(v1, sel_newBufferWithLength_options_, v12 << 6, 1);
          if (!v13)
            goto LABEL_23;
          *(_QWORD *)(v2 + 56) = v13;
          swift_unknownObjectRelease();
          v14 = *(void **)(v2 + 56);
          if (!v14)
            goto LABEL_24;
          v15 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
          v16 = v14;
          v17 = *(_QWORD *)(v2 + 208);
          if (v17 < 0)
            goto LABEL_22;
          if (!v17)
          {
LABEL_16:
            swift_unknownObjectRelease();
            goto LABEL_17;
          }
          v18 = *(_QWORD *)(*(_QWORD *)v5 + 16);
          v19 = v15 + 32;
          v20 = (__int128 *)(*(_QWORD *)v5 + 96);
          while (v18)
          {
            v21 = *(v20 - 2);
            v22 = *(v20 - 1);
            v23 = *v20;
            *(v19 - 2) = *(v20 - 3);
            *(v19 - 1) = v21;
            *v19 = v22;
            v19[1] = v23;
            v19 += 4;
            --v18;
            v20 += 6;
            if (!--v17)
              goto LABEL_16;
          }
          __break(1u);
LABEL_20:
          swift_once();
        }
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
    }
  }
}

id CameraFrustumRenderer.renderCone(into:desc:)(id result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;
  _OWORD *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *(_QWORD *)(v2 + 64);
  if (v3 && *(_QWORD *)(v3 + 24))
  {
    v5 = result;
    swift_retain();
    result = objc_msgSend(v5, sel_renderCommandEncoderWithDescriptor_, a2);
    if (result)
    {
      if (*(_QWORD *)(v2 + 40))
      {
        v6 = result;
        objc_msgSend(result, sel_setRenderPipelineState_);
        objc_msgSend(v6, sel_setDepthStencilState_, *(_QWORD *)(v2 + 48));
        objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, *(_QWORD *)(v2 + 56), 0, 0);
        result = *(id *)(v2 + 32);
        if (result)
        {
          result = objc_msgSend(result, sel_newBufferWithLength_options_, 144, 1);
          if (result)
          {
            v7 = result;
            v8 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
            v9 = v7;
            v10 = *(_OWORD *)(v2 + 96);
            v11 = *(_OWORD *)(v2 + 112);
            v12 = *(_OWORD *)(v2 + 128);
            *v8 = *(_OWORD *)(v2 + 80);
            v8[1] = v10;
            v8[2] = v11;
            v8[3] = v12;
            v13 = *(_OWORD *)(v2 + 160);
            v14 = *(_OWORD *)(v2 + 176);
            v15 = *(_OWORD *)(v2 + 192);
            v8[4] = *(_OWORD *)(v2 + 144);
            v8[5] = v13;
            v8[6] = v14;
            v8[7] = v15;
            *((_DWORD *)v8 + 32) = *(_DWORD *)(v2 + 256);
            result = objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v9, 0, 1);
            v16 = *(_QWORD *)(v3 + 16);
            if (v16)
            {
              objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v16, 0, 2);
              objc_msgSend(v6, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, *(_QWORD *)(v3 + 24), *(_QWORD *)(v2 + 208));
              objc_msgSend(v6, sel_endEncoding);
              swift_release();
              swift_unknownObjectRelease();
              return (id)swift_unknownObjectRelease();
            }
            goto LABEL_14;
          }
LABEL_13:
          __break(1u);
LABEL_14:
          __break(1u);
          return result;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

id CameraFrustumRenderer.renderHollowCylinder(into:desc:)(id result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;
  _OWORD *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *(_QWORD *)(v2 + 64);
  if (v3 && *(_QWORD *)(v3 + 40))
  {
    v5 = result;
    swift_retain();
    result = objc_msgSend(v5, sel_renderCommandEncoderWithDescriptor_, a2);
    if (result)
    {
      if (*(_QWORD *)(v2 + 40))
      {
        v6 = result;
        objc_msgSend(result, sel_setRenderPipelineState_);
        objc_msgSend(v6, sel_setDepthStencilState_, *(_QWORD *)(v2 + 48));
        objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, *(_QWORD *)(v2 + 56), 0, 0);
        result = *(id *)(v2 + 32);
        if (result)
        {
          result = objc_msgSend(result, sel_newBufferWithLength_options_, 144, 1);
          if (result)
          {
            v7 = result;
            v8 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
            v9 = v7;
            v10 = *(_OWORD *)(v2 + 96);
            v11 = *(_OWORD *)(v2 + 112);
            v12 = *(_OWORD *)(v2 + 128);
            *v8 = *(_OWORD *)(v2 + 80);
            v8[1] = v10;
            v8[2] = v11;
            v8[3] = v12;
            v13 = *(_OWORD *)(v2 + 160);
            v14 = *(_OWORD *)(v2 + 176);
            v15 = *(_OWORD *)(v2 + 192);
            v8[4] = *(_OWORD *)(v2 + 144);
            v8[5] = v13;
            v8[6] = v14;
            v8[7] = v15;
            *((_DWORD *)v8 + 32) = *(_DWORD *)(v2 + 256);
            result = objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v9, 0, 1);
            v16 = *(_QWORD *)(v3 + 32);
            if (v16)
            {
              objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v16, 0, 2);
              objc_msgSend(v6, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, *(_QWORD *)(v3 + 40), *(_QWORD *)(v2 + 208));
              objc_msgSend(v6, sel_endEncoding);
              swift_release();
              swift_unknownObjectRelease();
              return (id)swift_unknownObjectRelease();
            }
            goto LABEL_14;
          }
LABEL_13:
          __break(1u);
LABEL_14:
          __break(1u);
          return result;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

id CameraFrustumRenderer.renderSphere(into:desc:)(id result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;
  _OWORD *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *(_QWORD *)(v2 + 64);
  if (v3 && *(_QWORD *)(v3 + 56))
  {
    v5 = result;
    swift_retain();
    result = objc_msgSend(v5, sel_renderCommandEncoderWithDescriptor_, a2);
    if (result)
    {
      if (*(_QWORD *)(v2 + 40))
      {
        v6 = result;
        objc_msgSend(result, sel_setRenderPipelineState_);
        objc_msgSend(v6, sel_setDepthStencilState_, *(_QWORD *)(v2 + 48));
        objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, *(_QWORD *)(v2 + 56), 0, 0);
        result = *(id *)(v2 + 32);
        if (result)
        {
          result = objc_msgSend(result, sel_newBufferWithLength_options_, 144, 1);
          if (result)
          {
            v7 = result;
            v8 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
            v9 = v7;
            v10 = *(_OWORD *)(v2 + 96);
            v11 = *(_OWORD *)(v2 + 112);
            v12 = *(_OWORD *)(v2 + 128);
            *v8 = *(_OWORD *)(v2 + 80);
            v8[1] = v10;
            v8[2] = v11;
            v8[3] = v12;
            v13 = *(_OWORD *)(v2 + 160);
            v14 = *(_OWORD *)(v2 + 176);
            v15 = *(_OWORD *)(v2 + 192);
            v8[4] = *(_OWORD *)(v2 + 144);
            v8[5] = v13;
            v8[6] = v14;
            v8[7] = v15;
            *((_DWORD *)v8 + 32) = *(_DWORD *)(v2 + 256);
            result = objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v9, 0, 1);
            v16 = *(_QWORD *)(v3 + 48);
            if (v16)
            {
              objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v16, 0, 2);
              objc_msgSend(v6, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, *(_QWORD *)(v3 + 56), *(_QWORD *)(v2 + 208));
              objc_msgSend(v6, sel_endEncoding);
              swift_release();
              swift_unknownObjectRelease();
              return (id)swift_unknownObjectRelease();
            }
            goto LABEL_14;
          }
LABEL_13:
          __break(1u);
LABEL_14:
          __break(1u);
          return result;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t CameraFrustumRenderer.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  outlined destroy of Animation?(v0 + 216);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CameraFrustumRenderer()
{
  return objc_opt_self();
}

__n128 one-time initialization function for vertexColor()
{
  __n128 result;

  result.n128_u64[0] = 0x3F0000003F000000;
  result.n128_u64[1] = 1056964608;
  static CameraFrustumMesh.vertexColor = (__int128)result;
  return result;
}

_QWORD *CameraFrustumMesh.setConeMTLBuffer(device:coneHeight:coneBaseRadius:coneBaseSegments:)(void *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  __int128 v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  id v20;
  __int128 v21;
  uint64_t v22;
  __int128 *v23;
  float v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;

  v5 = v4;
  if (one-time initialization token for logger != -1)
    goto LABEL_21;
  while (1)
  {
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_2355E9000, v11, v12, "Creating MTLBuffer for the cone!", v13, 2u);
      MEMORY[0x23B7D3428](v13, -1, -1);
    }

    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CameraFrustumMesh.setConeMTLBuffer(device:coneHeight:coneBaseRadius:coneBaseSegments:));
    v29 = v14;
    result = (_QWORD *)specialized CameraFrustumMesh.createCircleVertices(zOffset:radius:circleSegments:)(a2, -a3, a4);
    v16 = result[2];
    v17 = 3 * v16;
    if ((unsigned __int128)(v16 * (__int128)3) >> 64 != (3 * v16) >> 63)
      break;
    *(_QWORD *)(v5 + 24) = v17;
    if ((unint64_t)(v17 - 0x400000000000000) >> 59 != 31)
      goto LABEL_23;
    a2 = (uint64_t)result;
    result = objc_msgSend(a1, sel_newBufferWithLength_options_, 96 * v16, 1);
    if (!result)
      goto LABEL_24;
    *(_QWORD *)(v5 + 16) = result;
    result = (_QWORD *)swift_unknownObjectRelease();
    v18 = *(void **)(v5 + 16);
    if (!v18)
      goto LABEL_25;
    v19 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v20 = v18;
    v21 = v29;
    if (!v16)
      return (_QWORD *)swift_bridgeObjectRelease();
    v22 = 0;
    a1 = (void *)(a2 + 32);
    v23 = (__int128 *)(v19 + 48);
    v24 = 1.0;
    v5 = 0x2AAAAAAAAAAAAAAALL;
    while (1)
    {
      *(v23 - 3) = v21;
      if (one-time initialization token for vertexColor != -1)
      {
        swift_once();
        v24 = 1.0;
        v21 = v29;
      }
      v25 = static CameraFrustumMesh.vertexColor;
      HIDWORD(v25) = 0;
      v26 = v25;
      *((float *)&v26 + 3) = v24;
      v27 = v22 + 1;
      *(v23 - 2) = v26;
      v28 = v16 - 1 == v22 ? 0 : v22 + 1;
      if (v28 >= *(_QWORD *)(a2 + 16))
        break;
      HIDWORD(v25) = 1053609165;
      *(v23 - 1) = *((_OWORD *)a1 + v28);
      *v23 = v25;
      if (v22 == 0x2AAAAAAAAAAAAAAALL)
        goto LABEL_20;
      v23[1] = *((_OWORD *)a1 + v22);
      v23[2] = v25;
      v23 += 6;
      ++v22;
      if (v16 == v27)
        return (_QWORD *)swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    swift_once();
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *CameraFrustumMesh.setHollowCylinderMTLBuffer(device:zOffset:innerRadius:outerRadius:height:circleSegments:)(void *a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  char *v6;
  char *v7;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *result;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _OWORD *v32;
  void **p_cache;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v7 = v6;
  if (one-time initialization token for logger != -1)
    goto LABEL_41;
  while (1)
  {
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)logger);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_2355E9000, v15, v16, "Creating MTLBuffer for the concentric circles!", v17, 2u);
      MEMORY[0x23B7D3428](v17, -1, -1);
    }

    v18 = specialized CameraFrustumMesh.createCircleVertices(zOffset:radius:circleSegments:)(a2, a3, a4);
    v49 = specialized CameraFrustumMesh.createCircleVertices(zOffset:radius:circleSegments:)(a2, a3, a5);
    a6 = a3 + a6;
    v48 = specialized CameraFrustumMesh.createCircleVertices(zOffset:radius:circleSegments:)(a2, a6, a4);
    result = (_QWORD *)specialized CameraFrustumMesh.createCircleVertices(zOffset:radius:circleSegments:)(a2, a6, a5);
    v20 = *(_QWORD *)(v18 + 16);
    if ((unsigned __int128)((uint64_t)v20 * (__int128)6) >> 64 != (uint64_t)(6 * v20) >> 63)
      break;
    v21 = 18 * v20;
    if ((unsigned __int128)((uint64_t)(6 * v20) * (__int128)3) >> 64 != (uint64_t)(18 * v20) >> 63)
      goto LABEL_43;
    *((_QWORD *)v7 + 5) = v21;
    if ((unint64_t)(v21 - 0x400000000000000) >> 59 != 31)
      goto LABEL_44;
    v46 = result;
    v47 = v20;
    result = objc_msgSend(a1, sel_newBufferWithLength_options_, 576 * v20, 1);
    if (!result)
      goto LABEL_48;
    *((_QWORD *)v7 + 4) = result;
    result = (_QWORD *)swift_unknownObjectRelease();
    v22 = (void *)*((_QWORD *)v7 + 4);
    if (!v22)
      goto LABEL_49;
    v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v23 = v22;
    v24 = v47;
    if (!v47)
    {
LABEL_30:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (_QWORD *)swift_bridgeObjectRelease();
    }
    v25 = v49;
    result = v46;
    if (v47 > *(_QWORD *)(v49 + 16))
      goto LABEL_45;
    if (v47 > v46[2])
      goto LABEL_46;
    v26 = v48;
    if (v47 > *(_QWORD *)(v48 + 16))
      goto LABEL_47;
    v27 = 0;
    v28 = v18;
    v29 = v18 + 32;
    v30 = v49 + 32;
    a1 = (void *)(v48 + 32);
    v31 = v46 + 4;
    v32 = v7 + 144;
    a2 = 8;
    p_cache = _TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D19RangefinderObserver.cache;
    v34 = &unk_256259000;
    while (1)
    {
      v35 = v47 - 1 == v27 ? 0 : v27 + 1;
      if (v35 >= *(_QWORD *)(v28 + 16))
        break;
      *(v32 - 9) = *(_OWORD *)(v29 + 16 * v35);
      if (p_cache[472] != (void *)-1)
      {
        swift_once();
        v34 = (_OWORD *)&unk_256259000;
        p_cache = (void **)(_TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D19RangefinderObserver
                          + 16);
        result = v46;
        v24 = v47;
        v26 = v48;
        v28 = v18;
        v25 = v49;
      }
      v36 = v34[61];
      HIDWORD(v36) = 1061997773;
      *(v32 - 8) = v36;
      if (v35 >= *(_QWORD *)(v25 + 16))
        goto LABEL_32;
      *(v32 - 7) = *(_OWORD *)(v30 + 16 * v35);
      *(v32 - 6) = v36;
      *(v32 - 5) = *(_OWORD *)(v30 + 16 * v27);
      *(v32 - 4) = v36;
      *(v32 - 3) = *(_OWORD *)(v29 + 16 * v35);
      *(v32 - 2) = v36;
      *(v32 - 1) = *(_OWORD *)(v30 + 16 * v27);
      *v32 = v36;
      v32[1] = *(_OWORD *)(v29 + 16 * v27);
      v32[2] = v36;
      if (v35 >= *(_QWORD *)(v26 + 16))
        goto LABEL_33;
      v32[3] = *((_OWORD *)a1 + v35);
      v32[4] = v36;
      if (v35 >= result[2])
        goto LABEL_34;
      v32[5] = *(_OWORD *)&v31[2 * v35];
      v32[6] = v36;
      if (v27 == 0x71C71C71C71C71CLL)
        goto LABEL_35;
      v32[7] = *(_OWORD *)&v31[2 * v27];
      v32[8] = v36;
      if (__OFADD__(a2, 1))
        goto LABEL_36;
      v37 = &v7[32 * a2 + 32];
      *(_OWORD *)v37 = *((_OWORD *)a1 + v35);
      *((_OWORD *)v37 + 1) = v36;
      v38 = &v7[32 * a2 + 64];
      *(_OWORD *)v38 = *(_OWORD *)&v31[2 * v27];
      *((_OWORD *)v38 + 1) = v36;
      if (__OFADD__(a2 + 2, 1))
        goto LABEL_37;
      v39 = &v7[32 * a2 + 96];
      *(_OWORD *)v39 = *((_OWORD *)a1 + v27);
      *((_OWORD *)v39 + 1) = v36;
      v40 = &v7[32 * a2 + 128];
      *(_OWORD *)v40 = *(_OWORD *)&v31[2 * v35];
      *((_OWORD *)v40 + 1) = v36;
      if (__OFADD__(a2 + 4, 1))
        goto LABEL_38;
      v41 = &v7[32 * a2 + 160];
      *(_OWORD *)v41 = *(_OWORD *)(v30 + 16 * v35);
      *((_OWORD *)v41 + 1) = v36;
      v42 = &v7[32 * a2 + 192];
      *(_OWORD *)v42 = *(_OWORD *)(v30 + 16 * v27);
      *((_OWORD *)v42 + 1) = v36;
      if (__OFADD__(a2 + 6, 1))
        goto LABEL_39;
      v43 = &v7[32 * a2 + 224];
      *(_OWORD *)v43 = *(_OWORD *)&v31[2 * v35];
      *((_OWORD *)v43 + 1) = v36;
      v44 = &v7[32 * a2 + 256];
      *(_OWORD *)v44 = *(_OWORD *)(v30 + 16 * v27);
      *((_OWORD *)v44 + 1) = v36;
      if (__OFADD__(a2 + 8, 1))
        goto LABEL_40;
      v45 = &v7[32 * a2 + 288];
      *(_OWORD *)v45 = *(_OWORD *)&v31[2 * v27];
      *((_OWORD *)v45 + 1) = v36;
      a2 += 18;
      v32 += 36;
      if (v24 == ++v27)
        goto LABEL_30;
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    swift_once();
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t CameraFrustumMesh.setSphereMTLBuffer(device:radius:radialSegments:verticalSegments:)(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  __n128 v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  char *v34;
  id v35;
  unint64_t *v36;
  __int128 *v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (one-time initialization token for logger != -1)
    goto LABEL_67;
  while (1)
  {
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_2355E9000, v9, v10, "Creating MTLBuffer for the sphere!", v11, 2u);
      MEMORY[0x23B7D3428](v11, -1, -1);
    }

    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CameraFrustumMesh.setSphereMTLBuffer(device:radius:radialSegments:verticalSegments:));
    result = Sphere.createSurfaceSamples(radialSegments:verticalSegments:)(a2, a3, v12, a4);
    v46 = result;
    if ((a3 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    v41 = (id)a1;
    if (!a3)
      break;
    v45 = a2 + 1;
    if (__OFADD__(a2, 1))
      goto LABEL_70;
    if (a2 < 0)
      goto LABEL_71;
    v14 = 0;
    v15 = a3 - 1;
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v43 = a2;
    v44 = a3;
    while (1)
    {
      if (v14 == a3)
        goto LABEL_63;
      a1 = v14 * v45;
      if ((unsigned __int128)(v14 * (__int128)v45) >> 64 != (v14 * v45) >> 63)
        break;
      v17 = (char *)(a1 + a2);
      if (__OFADD__(a1, a2))
        goto LABEL_65;
      v18 = v17 + 1;
      if (__OFADD__(v17, 1))
        goto LABEL_66;
      for (; a2; --a2)
      {
        if (v14)
        {
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
            v16 = (_QWORD *)result;
          }
          v20 = v16[2];
          v19 = v16[3];
          v21 = v20 + 1;
          if (v20 >= v19 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v16);
            v16 = (_QWORD *)result;
          }
          v16[2] = v21;
          v16[v20 + 4] = a1;
          a3 = a1 + 1;
          if (__OFADD__(a1, 1))
            goto LABEL_58;
          v22 = v16[3];
          v23 = v20 + 2;
          if (v21 >= v22 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v20 + 2, 1, v16);
            v16 = (_QWORD *)result;
          }
          v16[2] = v23;
          v16[v21 + 4] = a3;
          v24 = v16[3];
          if ((uint64_t)(v20 + 3) > (uint64_t)(v24 >> 1))
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v20 + 3, 1, v16);
            v16 = (_QWORD *)result;
          }
          v16[2] = v20 + 3;
          v16[v23 + 4] = v18;
        }
        if (v14 == v15)
        {
          v25 = __OFADD__(a1++, 1);
          if (v25)
          {
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
          v25 = __OFADD__(v18++, 1);
          if (v25)
            goto LABEL_57;
        }
        else
        {
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
            v16 = (_QWORD *)result;
          }
          v27 = v16[2];
          v26 = v16[3];
          v28 = v27 + 1;
          if (v27 >= v26 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v16);
            v16 = (_QWORD *)result;
          }
          v16[2] = v28;
          v16[v27 + 4] = v18;
          v25 = __OFADD__(a1++, 1);
          if (v25)
            goto LABEL_59;
          v29 = v16[3];
          v30 = v27 + 2;
          if (v28 >= v29 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30, 1, v16);
            v16 = (_QWORD *)result;
          }
          v16[2] = v30;
          v16[v28 + 4] = a1;
          if (__OFADD__(v18, 1))
            goto LABEL_60;
          a3 = v16[2];
          v31 = v16[3];
          if (a3 >= v31 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), a3 + 1, 1, v16);
            v16 = (_QWORD *)result;
          }
          v16[2] = a3 + 1;
          v16[a3 + 4] = v18 + 1;
          v25 = __OFADD__(v18++, 1);
          if (v25)
            goto LABEL_57;
        }
      }
      ++v14;
      a2 = v43;
      a3 = v44;
      if (v14 == v44)
        goto LABEL_45;
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    swift_once();
  }
  v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_45:
  v32 = v16[2];
  if (v32 >> 58)
    goto LABEL_69;
  result = (uint64_t)objc_msgSend(v41, sel_newBufferWithLength_options_, 32 * v32, 1);
  if (!result)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  *(_QWORD *)(v42 + 48) = result;
  result = swift_unknownObjectRelease();
  v33 = *(void **)(v42 + 48);
  if (!v33)
  {
LABEL_73:
    __break(1u);
    return result;
  }
  v34 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v35 = v33;
  a1 = v16[2];
  if (a1)
  {
    v36 = v16 + 4;
    a2 = v46 + 32;
    v37 = (__int128 *)(v34 + 16);
    a3 = (unint64_t)one-time initialization function for vertexColor;
    do
    {
      v39 = *v36++;
      v38 = v39;
      if ((v39 & 0x8000000000000000) != 0)
        goto LABEL_61;
      if (v38 >= *(_QWORD *)(v46 + 16))
        goto LABEL_62;
      *(v37 - 1) = *(_OWORD *)(a2 + 16 * v38);
      if (one-time initialization token for vertexColor != -1)
        swift_once();
      v40 = static CameraFrustumMesh.vertexColor;
      HIDWORD(v40) = 1063675494;
      *v37 = v40;
      v37 += 2;
    }
    while (--a1);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v42 + 56) = v16[2];
  return swift_bridgeObjectRelease();
}

uint64_t CameraFrustumMesh.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CameraFrustumMesh()
{
  return objc_opt_self();
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *type metadata accessor for CameraFrustumMesh.Descriptor()
{
  return &unk_2506BDE10;
}

uint64_t specialized CameraFrustumRenderer.init(cameraPathManager:)()
{
  uint64_t v0;
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  swift_unknownObjectWeakInit();
  *(_BYTE *)(v0 + 24) = 0;
  v1 = (__int128 *)MEMORY[0x24BDAEE00];
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = v2;
  *(_OWORD *)(v0 + 96) = v3;
  *(_OWORD *)(v0 + 112) = v4;
  *(_OWORD *)(v0 + 128) = v5;
  *(_OWORD *)(v0 + 144) = v2;
  *(_OWORD *)(v0 + 160) = v3;
  *(_OWORD *)(v0 + 176) = v4;
  *(_OWORD *)(v0 + 192) = v5;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_DWORD *)(v0 + 256) = 0;
  swift_unknownObjectWeakAssign();
  return v0;
}

uint64_t specialized CameraFrustumMesh.createCircleVertices(zOffset:radius:circleSegments:)(uint64_t result, float a2, float a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  __float2 v8;
  unint64_t v9;
  __int128 v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    if (!result)
      return MEMORY[0x24BEE4AF8];
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v6 = 0;
    v7 = v5[2];
    do
    {
      v8 = __sincosf_stret((float)(6.2832 / (float)v3) * (float)v6);
      v9 = v5[3];
      if (v7 >= v9 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v7 + 1, 1, v5);
      *(float *)&v10 = v8.__cosval * a3;
      *((float *)&v10 + 1) = v8.__sinval * a3;
      *((_QWORD *)&v10 + 1) = LODWORD(a2);
      ++v6;
      v5[2] = v7 + 1;
      *(_OWORD *)&v5[2 * v7++ + 4] = v10;
    }
    while (v3 != v6);
    return (uint64_t)v5;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error;
  if (!lazy protocol witness table cache variable for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for CameraFrustumRenderer.Error, &type metadata for CameraFrustumRenderer.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error;
  if (!lazy protocol witness table cache variable for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for CameraFrustumRenderer.Error, &type metadata for CameraFrustumRenderer.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraFrustumRenderer.Error and conformance CameraFrustumRenderer.Error);
  }
  return result;
}

uint64_t outlined init with take of Animation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Animation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for CameraFrustumRenderer.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23569CC2C + 4 * byte_2356C1DC0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23569CC4C + 4 * byte_2356C1DC5[v4]))();
}

_BYTE *sub_23569CC2C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23569CC4C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23569CC54(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23569CC5C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23569CC64(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23569CC6C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CameraFrustumRenderer.Error()
{
  return &type metadata for CameraFrustumRenderer.Error;
}

float32x2_t Ray3D.point(t:)(float a1, float32x2_t a2, float32x2_t a3)
{
  return vadd_f32(a2, vmul_n_f32(a3, a1));
}

void specialized SIMD.subscript.getter(__n128 a1, double a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = a1.n128_u8[0] & 3;
  if (a1.n128_i64[0] <= 0)
    v2 = -(-a1.n128_u64[0] & 3);
  v3 = a1.n128_u8[8] & 3;
  if (a1.n128_i64[1] <= 0)
    v3 = -(-a1.n128_u64[1] & 3);
  v4 = LOBYTE(a2) & 3;
  if (*(uint64_t *)&a2 <= 0)
    v4 = -(-*(_QWORD *)&a2 & 3);
  if (((v2 | v4 | v3) & 0x8000000000000000) != 0)
    __break(1u);
}

uint64_t specialized static Ray3D.screenPointToPlane(within:screenPoint:plane:)(double a1, double a2, double a3, float32x4_t a4)
{
  uint64_t result;
  _QWORD *v5;
  const char *v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  _BYTE v14[48];
  uint64_t v15;
  float32x4_t v16;
  char v17;

  ARView.ray(through:)();
  result = outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?((uint64_t)v14, (uint64_t)&v15);
  if ((v17 & 1) != 0)
  {
    lazy protocol witness table accessor for type Ray3D.Error and conformance Ray3D.Error();
    swift_allocError();
    *v5 = 0xD000000000000031;
    v6 = "can't get world ray from screepoint in this view!";
  }
  else
  {
    v7 = (int32x4_t)vmulq_f32(v16, v16);
    v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
    v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
    v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
    v7.i32[0] = vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).u32[0];
    v10 = (int32x4_t)vmulq_f32(a4, a4);
    v11 = vmulq_n_f32(v16, *(float *)v7.i32);
    v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
    *(float32x2_t *)v10.i8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
    *(float32x2_t *)v10.i8 = vmul_f32(*(float32x2_t *)v10.i8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8)));
    v12 = vmulq_f32(v11, vmulq_n_f32(a4, vmul_f32(*(float32x2_t *)v10.i8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8))).f32[0]));
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]) >= 0.001)return result;
    lazy protocol witness table accessor for type Ray3D.Error and conformance Ray3D.Error();
    swift_allocError();
    *v5 = 0xD00000000000002ALL;
    v6 = "world ray and plane normal are orthogonal!";
  }
  v5[1] = (unint64_t)(v6 - 32) | 0x8000000000000000;
  return swift_willThrow();
}

double specialized static Ray3D.unproject(clipSpace:using:aspectRatio:)(double a1)
{
  int v2;
  int v3;
  uint64_t inited;
  int v5;
  int v6;
  uint64_t v7;
  double result;

  Entity.coreEntity.getter();
  REPerspectiveCameraComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REPerspectiveCameraComponentCalculateProjectionWithAspectRatio();
    REPerspectiveCameraComponentAdjustProjectionAspect();
    REProjectionClipSpaceNearZ();
    v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2356BAC90;
    *(double *)(inited + 32) = a1;
    *(_DWORD *)(inited + 40) = v3;
    specialized SIMD.init<A>(_:)(inited);
    swift_setDeallocating();
LABEL_5:
    REConvertProjectionToMatrix4x4();
    REProjectionUnprojectPoint();
    return result;
  }
  Entity.coreEntity.getter();
  RECustomMatrixCameraComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RECustomMatrixCameraComponentCalculateProjection();
    RECustomMatrixCameraComponentAdjustProjectionAspect();
    REProjectionClipSpaceNearZ();
    v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v7 = swift_initStackObject();
    *(_OWORD *)(v7 + 16) = xmmword_2356BAC90;
    *(double *)(v7 + 32) = a1;
    *(_DWORD *)(v7 + 40) = v6;
    specialized SIMD.init<A>(_:)(v7);
    swift_setDeallocating();
    goto LABEL_5;
  }
  return 0.0;
}

void specialized static Ray3D.worldRay(through:using:)(float32x4_t *a1@<X8>, double a2@<D0>)
{
  float32x4_t v3;
  char v4;
  float32x4_t v5;
  char v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;

  specialized static Ray3D.unproject(clipSpace:using:aspectRatio:)(a2);
  v3 = 0uLL;
  if ((v4 & 1) != 0)
  {
    v6 = 1;
    v12 = 0uLL;
  }
  else
  {
    Entity.coreEntity.getter();
    RETransformComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      RETransformComponentGetWorldMatrix4x4F();
      v13 = v5;
      simd_float4x4.transform(position:)();
      v3 = v13;
      v6 = 0;
      v8 = vsubq_f32(v7, v13);
      v3.i32[3] = 0;
      v9 = (int32x4_t)vmulq_f32(v8, v8);
      v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
      v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
      v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
      v12 = vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
    }
    else
    {
      v6 = 1;
      v12 = 0uLL;
      v3 = 0uLL;
    }
  }
  *a1 = v3;
  a1[1] = v12;
  a1[2].i8[0] = v6;
}

void specialized static Ray3D.closestPointParameter(to:along:)(double a1, float32x4_t a2, double a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  _QWORD *v8;

  v4 = vmulq_f32(a2, a2);
  v5 = vmulq_f32(a4, a4);
  v6 = vmulq_f32(a2, a4);
  v7 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1)));
  if (vsubq_f32(vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)))), vmulq_f32(v7, v7)).f32[0] <= 0.001)
  {
    lazy protocol witness table accessor for type Ray3D.Error and conformance Ray3D.Error();
    swift_allocError();
    *v8 = 0;
    v8[1] = 0;
    swift_willThrow();
  }
}

unint64_t lazy protocol witness table accessor for type Ray3D.Error and conformance Ray3D.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ray3D.Error and conformance Ray3D.Error;
  if (!lazy protocol witness table cache variable for type Ray3D.Error and conformance Ray3D.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for Ray3D.Error, &type metadata for Ray3D.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ray3D.Error and conformance Ray3D.Error);
  }
  return result;
}

uint64_t outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for Ray3D.Error(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Ray3D.Error()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for Ray3D.Error(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for Ray3D.Error(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Ray3D.Error(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Ray3D.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Ray3D.Error()
{
  return &type metadata for Ray3D.Error;
}

ValueMetadata *type metadata accessor for Ray3D()
{
  return &type metadata for Ray3D;
}

uint64_t static ViewBuilder.buildEither<A, B>(second:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = type metadata accessor for _ConditionalContent.Storage();
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t static ViewBuilder.buildEither<A, B>(first:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for _ConditionalContent.Storage();
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t Model3DPhase.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;

  v3 = *((unsigned __int8 *)v1 + 64);
  if (v3 > 0x3F)
  {
    v11 = 0;
    v8 = 0;
    v9 = 0;
    v7 = 0;
    v6 = 0;
    v5 = 0;
    v4 = 0;
    v10 = 0;
  }
  else
  {
    v5 = v1[6];
    v4 = v1[7];
    v7 = v1[4];
    v6 = v1[5];
    v8 = v1[1];
    v9 = v1[2];
    v10 = v3 & 1;
    v11 = *v1;
    swift_retain();
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v4;
  *(_BYTE *)(a1 + 64) = v10;
  return result;
}

id Model3DPhase.error.getter()
{
  uint64_t v0;
  id v1;
  id v2;

  if ((*(_BYTE *)(v0 + 64) & 0xC0) != 0x40)
    return 0;
  v1 = *(id *)v0;
  v2 = *(id *)v0;
  return v1;
}

uint64_t Model3D.init<>(url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model3D<ResolvedModel3D>);
  v5 = *(int *)(v4 + 36);
  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  type metadata accessor for Model3DLocation();
  result = swift_storeEnumTagMultiPayload();
  *(_QWORD *)(a2 + v5) = 0;
  v8 = (_QWORD *)(a2 + *(int *)(v4 + 40));
  *v8 = closure #1 in Model3D.init<>(url:);
  v8[1] = 0;
  return result;
}

uint64_t Model3D.init(url:transaction:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;

  v12 = type metadata accessor for Model3D(0, a5, a6, a4);
  v13 = *(int *)(v12 + 36);
  v14 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a7, a1, v14);
  type metadata accessor for Model3DLocation();
  result = swift_storeEnumTagMultiPayload();
  *(_QWORD *)(a7 + v13) = a2;
  v16 = (_QWORD *)(a7 + *(int *)(v12 + 40));
  *v16 = a3;
  v16[1] = a4;
  return result;
}

uint64_t type metadata accessor for Model3D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Model3D);
}

void Model3D.init<A, B>(url:content:placeholder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a6;
  v16[3] = a7;
  v16[4] = a8;
  v16[5] = a9;
  v16[6] = a2;
  v16[7] = a3;
  v16[8] = a4;
  v16[9] = a5;
  type metadata accessor for Model3DPlaceholderContent();
}

uint64_t sub_23569DA6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v4 = MEMORY[0x23B7D3350](&protocol conformance descriptor for Model3DPlaceholderContent<A, B>, a1);
  return Model3D.init(url:transaction:content:)(v6, 0, (uint64_t)partial apply for closure #1 in Model3D.init<A, B>(url:content:placeholder:), v2, a1, v4, v1);
}

void type metadata accessor for Model3DPlaceholderContent()
{
  JUMPOUT(0x23B7D32C0);
}

uint64_t Model3D.init<>(named:bundle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model3D<ResolvedModel3D>);
  v9 = *(int *)(v8 + 36);
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  type metadata accessor for Model3DLocation();
  result = swift_storeEnumTagMultiPayload();
  *(_QWORD *)((char *)a4 + v9) = 0;
  v11 = (_QWORD *)((char *)a4 + *(int *)(v8 + 40));
  *v11 = closure #1 in Model3D.init<>(url:);
  v11[1] = 0;
  return result;
}

uint64_t closure #1 in Model3D.init<>(url:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = *((unsigned __int8 *)a1 + 64);
  if (v3 > 0x3F)
  {
    result = BoundingBox.init()();
    v7 = 0;
    v4 = 0;
    v6 = 0;
    v5 = 0xE000000000000000;
  }
  else
  {
    v5 = a1[1];
    v4 = a1[2];
    v6 = *a1;
    v12 = *((_OWORD *)a1 + 2);
    v7 = v3 & 1;
    v11 = *((_OWORD *)a1 + 3);
    swift_retain();
    result = swift_bridgeObjectRetain();
    v10 = v11;
    v9 = v12;
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 64) = v7;
  return result;
}

uint64_t Model3D.init(named:bundle:transaction:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;

  v16 = type metadata accessor for Model3D(0, a7, a8, a4);
  v17 = *(int *)(v16 + 36);
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  type metadata accessor for Model3DLocation();
  result = swift_storeEnumTagMultiPayload();
  *(_QWORD *)((char *)a9 + v17) = a4;
  v19 = (_QWORD *)((char *)a9 + *(int *)(v16 + 40));
  *v19 = a5;
  v19[1] = a6;
  return result;
}

void Model3D.init<A, B>(named:bundle:content:placeholder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a8;
  v16[3] = a9;
  v16[4] = a10;
  v16[5] = a11;
  v16[6] = a4;
  v16[7] = a5;
  v16[8] = a6;
  v16[9] = a7;
  type metadata accessor for Model3DPlaceholderContent();
}

uint64_t sub_23569DD24(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = MEMORY[0x23B7D3350](&protocol conformance descriptor for Model3DPlaceholderContent<A, B>, a1);
  return Model3D.init(named:bundle:transaction:content:)(v6, v7, v8, 0, (uint64_t)partial apply for closure #1 in Model3D.init<A, B>(url:content:placeholder:), v2, a1, v4, v1);
}

void closure #1 in Model3D.init<A, B>(url:content:placeholder:)(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 64) <= 0x3Fu)
  {
    swift_retain();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for Model3DPlaceholderContent();
}

uint64_t sub_23569DE90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[8];
  char v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v6 = MEMORY[0x23B7D3350](&protocol conformance descriptor for Model3DPlaceholderContent<A, B>, a1);
  static ViewBuilder.buildExpression<A>(_:)(v10, a1, v6);
  swift_retain();
  swift_retain();
  outlined consume of ResolvedModel3D?(v9, v1);
  swift_release();
  swift_release();
  v3 = v15;
  v4 = v16;
  v10[0] = v15;
  v10[1] = v16;
  v10[2] = v17;
  v10[3] = v18;
  v10[4] = v19;
  v10[5] = v20;
  v10[6] = v21;
  v10[7] = v22;
  v11 = v23;
  v12 = v24;
  v13 = v25;
  v14 = v26;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a1, v8);
  outlined consume of ResolvedModel3D?(v3, v4);
  swift_release();
  return swift_release();
}

uint64_t objectdestroyTm_5()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in Model3D.init<A, B>(url:content:placeholder:)(uint64_t a1)
{
  closure #1 in Model3D.init<A, B>(url:content:placeholder:)(a1);
}

uint64_t Model3DPlaceholderContent.body.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[8];
  char v46;
  _QWORD v47[3];

  v44 = a2;
  v4 = a1[3];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v33 - v10;
  v12 = *(_QWORD *)(v9 + 16);
  v40 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v9);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v33 - v16;
  v18 = type metadata accessor for _ConditionalContent();
  v42 = *(_QWORD *)(v18 - 8);
  v43 = v18;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v41 = (char *)&v33 - v20;
  v21 = *(_QWORD *)(v2 + 8);
  if (v21)
  {
    v22 = *(void (**)(_QWORD *))(v2 + 72);
    v36 = *(unsigned __int8 *)(v2 + 64);
    v23 = *(_QWORD *)(v2 + 16);
    v39 = *(_QWORD *)(v2 + 24);
    v34 = *(_QWORD *)v2;
    v24 = *(_QWORD *)(v2 + 40);
    v35 = *(_QWORD *)(v2 + 32);
    v33 = v24;
    v25 = *(_QWORD *)(v2 + 56);
    v37 = *(_QWORD *)(v2 + 48);
    v38 = v25;
    v45[0] = v34;
    v45[1] = v21;
    v45[2] = v23;
    v45[4] = v35;
    v45[5] = v24;
    v45[6] = v37;
    v45[7] = v25;
    v46 = v36 & 1;
    swift_retain();
    swift_bridgeObjectRetain();
    v22(v45);
    v26 = a1[4];
    static ViewBuilder.buildExpression<A>(_:)(v15, v12, v26);
    v27 = *(void (**)(char *, uint64_t))(v40 + 8);
    v27(v15, v12);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v17, v12, (uint64_t)v15);
    v28 = a1[5];
    v29 = (uint64_t)v41;
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v15, v12);
    outlined consume of ResolvedModel3D?(v34, v21);
    v27(v15, v12);
    v27(v17, v12);
  }
  else
  {
    (*(void (**)(uint64_t))(v2 + 88))(v19);
    v28 = a1[5];
    static ViewBuilder.buildExpression<A>(_:)(v8, v4, v28);
    v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v8, v4);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v11, v4, (uint64_t)v8);
    v26 = a1[4];
    v29 = (uint64_t)v41;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v8, v12, v4);
    v30(v8, v4);
    v30(v11, v4);
  }
  v47[0] = v26;
  v47[1] = v28;
  v31 = v43;
  MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v43, v47);
  static ViewBuilder.buildBlock<A>(_:)(v29, v31, v44);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v29, v31);
}

uint64_t outlined consume of ResolvedModel3D?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in Model3D<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in Model3DPlaceholderContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

id outlined copy of Model3DPhase(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  int v9;

  v9 = a9 >> 6;
  if (v9 == 1)
    return result;
  if (!v9)
  {
    swift_retain();
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

void destroy for Model3DPhase(uint64_t a1)
{
  outlined consume of Model3DPhase(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

void outlined consume of Model3DPhase(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  int v9;

  v9 = a9 >> 6;
  if (v9 == 1)
  {

  }
  else if (!v9)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
}

uint64_t initializeWithCopy for Model3DPhase(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  outlined copy of Model3DPhase(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for Model3DPhase(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  outlined copy of Model3DPhase(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = *(void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  outlined consume of Model3DPhase(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for Model3DPhase(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_BYTE *)(a2 + 64);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  outlined consume of Model3DPhase(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Model3DPhase(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 24);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for Model3DPhase(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 56) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 64) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_BYTE *)(a1 + 64) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for Model3DPhase(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 64);
  v2 = (char)v1;
  v3 = v1 >> 6;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveProjectEnumData for Model3DPhase(uint64_t result)
{
  *(_BYTE *)(result + 64) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for Model3DPhase(uint64_t result, unsigned int a2)
{
  char v2;

  if (a2 < 2)
  {
    v2 = *(_BYTE *)(result + 64) & 1 | ((_BYTE)a2 << 6);
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 64) = v2;
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_QWORD *)(result + 56) = 0;
    *(_BYTE *)(result + 64) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for Model3DPhase()
{
  return &type metadata for Model3DPhase;
}

uint64_t type metadata completion function for Model3D()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Model3DLocation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Model3D(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for Model3DLocation();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v8 = a2[1];
        *v4 = *a2;
        v4[1] = v8;
        v9 = (void *)a2[2];
        v4[2] = v9;
        swift_bridgeObjectRetain();
        v10 = v9;
        goto LABEL_9;
      case 1u:
        v12 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v4, a2, v12);
        goto LABEL_9;
      case 2u:
        v13 = type metadata accessor for AssetDescriptorRef();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v4, a2, v13);
        goto LABEL_9;
      case 3u:
        v14 = a2[1];
        *v4 = *a2;
        v4[1] = v14;
        v4[2] = a2[2];
        v15 = *((_OWORD *)a2 + 3);
        *((_OWORD *)v4 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)v4 + 3) = v15;
        *((_BYTE *)v4 + 64) = *((_BYTE *)a2 + 64);
        swift_bridgeObjectRetain();
        swift_retain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v16 = *(int *)(a3 + 40);
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 36)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 36));
    v17 = (_QWORD *)((char *)v4 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Model3D(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Model3DLocation();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();

      break;
    case 1u:
      v2 = type metadata accessor for URL();
      goto LABEL_5;
    case 2u:
      v2 = type metadata accessor for AssetDescriptorRef();
LABEL_5:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      break;
    case 3u:
      swift_bridgeObjectRelease();
      swift_release();
      break;
    default:
      break;
  }
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for Model3D(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = type metadata accessor for Model3DLocation();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = (void *)a2[2];
      a1[2] = v8;
      swift_bridgeObjectRetain();
      v9 = v8;
      goto LABEL_7;
    case 1u:
      v10 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      goto LABEL_7;
    case 2u:
      v11 = type metadata accessor for AssetDescriptorRef();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      goto LABEL_7;
    case 3u:
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      a1[2] = a2[2];
      v13 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v13;
      *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
      swift_bridgeObjectRetain();
      swift_retain();
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v14 = *(int *)(a3 + 40);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 36));
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Model3D(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    outlined destroy of Model3DLocation((uint64_t)a1);
    v6 = type metadata accessor for Model3DLocation();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        v7 = (void *)a2[2];
        a1[2] = v7;
        swift_bridgeObjectRetain();
        v8 = v7;
        goto LABEL_8;
      case 1u:
        v9 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        goto LABEL_8;
      case 2u:
        v10 = type metadata accessor for AssetDescriptorRef();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        v11 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v11;
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
        swift_bridgeObjectRetain();
        swift_retain();
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 36));
  swift_retain();
  swift_release();
  v12 = *(int *)(a3 + 40);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for Model3D(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Model3DLocation();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for AssetDescriptorRef();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v10 = *(int *)(a3 + 40);
  *(_QWORD *)&a1[*(int *)(a3 + 36)] = *(_QWORD *)&a2[*(int *)(a3 + 36)];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  return a1;
}

char *assignWithTake for Model3D(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of Model3DLocation((uint64_t)a1);
    v6 = type metadata accessor for Model3DLocation();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for AssetDescriptorRef();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_QWORD *)&a1[*(int *)(a3 + 36)] = *(_QWORD *)&a2[*(int *)(a3 + 36)];
  swift_release();
  *(_OWORD *)&a1[*(int *)(a3 + 40)] = *(_OWORD *)&a2[*(int *)(a3 + 40)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Model3D()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23569EFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Model3DLocation();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 40));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Model3D()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23569F02C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Model3DLocation();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  return result;
}

uint64_t destroy for Model3DPlaceholderContent(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for Model3DPlaceholderContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = v8;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Model3DPlaceholderContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_retain();
      swift_release();
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    }
    else
    {
      outlined destroy of ResolvedModel3D(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v7 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      v8 = *(_OWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v8;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v9 = *(_OWORD *)(a2 + 16);
    v10 = *(_OWORD *)(a2 + 32);
    v11 = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)(a1 + 48) = v11;
    *(_OWORD *)(a1 + 16) = v9;
  }
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  swift_retain();
  swift_release();
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of ResolvedModel3D(uint64_t a1)
{
  destroy for ResolvedModel3D();
  return a1;
}

__n128 __swift_memcpy104_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Model3DPlaceholderContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of ResolvedModel3D(a1);
LABEL_5:
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
LABEL_6:
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Model3DPlaceholderContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Model3DPlaceholderContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_23569F46C()
{
  return MEMORY[0x24BDF5138];
}

uint64_t sub_23569F478(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;

  v2 = type metadata accessor for _ConditionalContent();
  v4 = *(_OWORD *)(a1 + 16);
  return MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v2, &v4);
}

uint64_t specialized simd_float3x3.init(cgTransform:vectorType:)@<X0>(double *a1@<X0>, char a2@<W1>, int32x4_t *a3@<X8>)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t inited;
  int32x4_t v12;
  uint64_t v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t v16;
  uint64_t result;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2356BAC90;
  *(float *)(inited + 32) = v5;
  *(float *)(inited + 36) = v6;
  *(_DWORD *)(inited + 40) = 0;
  specialized SIMD.init<A>(_:)(inited);
  v24 = v12;
  swift_setDeallocating();
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_2356BAC90;
  *(float *)(v13 + 32) = v7;
  *(float *)(v13 + 36) = v8;
  *(_DWORD *)(v13 + 40) = 0;
  specialized SIMD.init<A>(_:)(v13);
  v23 = v14;
  swift_setDeallocating();
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_2356BAC90;
  *(float *)(v15 + 32) = v9;
  *(float *)(v15 + 36) = v10;
  *(_DWORD *)(v15 + 40) = 1065353216;
  specialized SIMD.init<A>(_:)(v15);
  v25 = v16;
  result = swift_setDeallocating();
  if ((a2 & 1) != 0)
  {
    v21 = vzip1q_s32(v24, v25);
    v22 = vzip1q_s32(v23, (int32x4_t)0);
    v19 = vzip1q_s32(v21, v22);
    v20 = vzip2q_s32(v21, v22);
    v18 = vzip1q_s32(vdupq_laneq_s32(v24, 2), vdupq_laneq_s32(v23, 2));
    v19.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v25, 0).i32[2];
    v20.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v25, 1).i32[2];
    v18.i32[2] = v25.i32[2];
  }
  else
  {
    v19 = v24;
    v18 = v25;
    v20 = v23;
  }
  *a3 = v19;
  a3[1] = v20;
  a3[2] = v18;
  return result;
}

uint64_t ARViewContainer.init(model:cameraFeedOverlay:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;

  type metadata accessor for DataModel(0);
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, type metadata accessor for DataModel, (uint64_t)&protocol conformance descriptor for DataModel);
  *a4 = ObservedObject.init(wrappedValue:)();
  a4[1] = v8;
  v10 = (char *)a4 + *(int *)(type metadata accessor for ARViewContainer(0, a2, a3, v9) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v10, a1, a2);
}

uint64_t type metadata accessor for ARViewContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ARViewContainer);
}

uint64_t type metadata completion function for ARViewContainer()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ARViewContainer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for ARViewContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for ARViewContainer(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  v10(v8, v9, v5);
  return a1;
}

_QWORD *assignWithCopy for ARViewContainer(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *initializeWithTake for ARViewContainer(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithTake for ARViewContainer(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ARViewContainer(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23569FBE8 + 4 * byte_2356C2120[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for ARViewContainer(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t associated type witness table accessor for View.Body : View in ARViewContainer<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ARViewContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];

  v26 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = type metadata accessor for ARViewContainer.ARViewContainer(255, v4, v3, a2);
  v6 = type metadata accessor for UUID();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  v30[2] = v5;
  v30[3] = v6;
  v30[4] = MEMORY[0x23B7D3350](&protocol conformance descriptor for ARViewContainer<A>.ARViewContainer, v5);
  v30[5] = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v7, MEMORY[0x24BDCEA88]);
  type metadata accessor for IDView();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v8 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v8);
  v9 = type metadata accessor for ZStack();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v23 - v11;
  v13 = type metadata accessor for ModifiedContent();
  v24 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v23 - v17;
  v27 = v4;
  v28 = v3;
  v29 = v25;
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  static Edge.Set.all.getter();
  v19 = MEMORY[0x23B7D3350](MEMORY[0x24BDF4750], v9);
  View.edgesIgnoringSafeArea(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v30[0] = v19;
  v30[1] = MEMORY[0x24BDF0420];
  v20 = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v13, v30);
  static ViewBuilder.buildExpression<A>(_:)(v16, v13, v20);
  v21 = *(void (**)(char *, uint64_t))(v24 + 8);
  v21(v16, v13);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, v13, v26);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, v13);
}

uint64_t closure #1 in ARViewContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(unint64_t, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t (*v62)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[2];
  _QWORD v94[2];
  _QWORD v95[2];
  _QWORD v96[2];
  _QWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v88 = a4;
  v7 = type metadata accessor for ModifiedContent();
  v8 = *(_QWORD *)(v7 - 8);
  v86 = v7;
  v87 = v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v84 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v85 = (char *)&v64 - v11;
  v89 = a2;
  v78 = a3;
  v90 = type metadata accessor for ARViewContainer(0, a2, a3, v12);
  v69 = *(_QWORD *)(v90 - 8);
  v81 = *(_QWORD *)(v69 + 64);
  MEMORY[0x24BDAC7A8](v90);
  v74 = (char *)&v64 - v13;
  v14 = type metadata accessor for UUID();
  v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  v73 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ARViewContainer.ARViewContainer(255, a2, a3, v18);
  v20 = MEMORY[0x23B7D3350](&protocol conformance descriptor for ARViewContainer<A>.ARViewContainer, v19);
  v68 = v20;
  v67 = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v15, MEMORY[0x24BDCEA88]);
  v98 = v19;
  v99 = v14;
  v100 = v20;
  v101 = v67;
  v21 = type metadata accessor for IDView();
  v70 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v64 - v22;
  v24 = type metadata accessor for ModifiedContent();
  v76 = *(_QWORD *)(v24 - 8);
  v72 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v66 = (char *)&v64 - v25;
  v26 = type metadata accessor for ModifiedContent();
  v82 = *(_QWORD *)(v26 - 8);
  v77 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v71 = (char *)&v64 - v27;
  v80 = type metadata accessor for ModifiedContent();
  v83 = *(_QWORD *)(v80 - 8);
  v28 = MEMORY[0x24BDAC7A8](v80);
  v75 = (char *)&v64 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v79 = (char *)&v64 - v30;
  type metadata accessor for DataModel(0);
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey((unint64_t *)&lazy protocol witness table cache variable for type DataModel and conformance DataModel, type metadata accessor for DataModel, (uint64_t)&protocol conformance descriptor for DataModel);
  swift_retain();
  v98 = ObservedObject.init(wrappedValue:)();
  v99 = v31;
  v65 = a1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  View.id<A>(_:)();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v17, v14);
  swift_release();
  static Edge.Set.all.getter();
  v32 = MEMORY[0x23B7D3350](MEMORY[0x24BDF44C8], v21);
  View.edgesIgnoringSafeArea(_:)();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v23, v21);
  v33 = v69;
  v73 = *(_QWORD *)(v69 + 16);
  v34 = v74;
  v35 = v90;
  ((void (*)(char *, uint64_t, uint64_t))v73)(v74, a1, v90);
  v36 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v81 += v36;
  v37 = swift_allocObject();
  v38 = v78;
  *(_QWORD *)(v37 + 16) = v89;
  *(_QWORD *)(v37 + 24) = v38;
  v39 = *(void (**)(unint64_t, char *, uint64_t))(v33 + 32);
  v39(v37 + v36, v34, v35);
  v97[0] = v32;
  v97[1] = MEMORY[0x24BDF0420];
  v40 = v72;
  v41 = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v72, v97);
  v42 = v71;
  v43 = v66;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v43, v40);
  v44 = v90;
  ((void (*)(char *, uint64_t, uint64_t))v73)(v34, v65, v90);
  v45 = swift_allocObject();
  *(_QWORD *)(v45 + 16) = v89;
  *(_QWORD *)(v45 + 24) = v38;
  v39(v45 + v36, v34, v44);
  v96[0] = v41;
  v96[1] = MEMORY[0x24BDF0910];
  v46 = MEMORY[0x24BDED308];
  v47 = v77;
  v48 = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v77, v96);
  v49 = (uint64_t)v75;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v42, v47);
  v95[0] = v48;
  v95[1] = MEMORY[0x24BDF0910];
  v50 = v46;
  v51 = v80;
  v81 = MEMORY[0x23B7D3350](v46, v80, v95);
  v52 = v79;
  static ViewBuilder.buildExpression<A>(_:)(v49, v51, v81);
  v53 = v83;
  v82 = *(_QWORD *)(v83 + 8);
  ((void (*)(uint64_t, uint64_t))v82)(v49, v51);
  v54 = v84;
  View.allowsHitTesting(_:)();
  v55 = lazy protocol witness table accessor for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier();
  v94[0] = v38;
  v94[1] = v55;
  v56 = v50;
  v57 = v86;
  v58 = MEMORY[0x23B7D3350](v56, v86, v94);
  v59 = v85;
  static ViewBuilder.buildExpression<A>(_:)(v54, v57, v58);
  v60 = v87;
  v61 = *(void (**)(char *, uint64_t))(v87 + 8);
  v61(v54, v57);
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 16))(v49, v52, v51);
  v98 = v49;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v54, v59, v57);
  v99 = (uint64_t)v54;
  v93[0] = v51;
  v93[1] = v57;
  v91 = v81;
  v92 = v58;
  static ViewBuilder.buildBlock<each A>(_:)(&v98, 2uLL, (uint64_t)v93);
  v61(v59, v57);
  v62 = (uint64_t (*)(uint64_t, uint64_t))v82;
  ((void (*)(char *, uint64_t))v82)(v52, v51);
  v61(v54, v57);
  return v62(v49, v51);
}

uint64_t closure #1 in closure #1 in ARViewContainer.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, void (*a5)(uint64_t))
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;

  if (one-time initialization token for logger != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_2355E9000, v8, v9, a4, v10, 2u);
    MEMORY[0x23B7D3428](v10, -1, -1);
  }

  v11 = swift_retain();
  a5(v11);
  return swift_release();
}

uint64_t ARViewContainer.ARViewContainer.ensureWorldAnchorExists()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;

  v3 = type metadata accessor for Scene.AnchorCollection();
  v4 = *(_QWORD *)(v3 - 8);
  result = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(a2 + 16);
  if (!v8)
  {
    __break(1u);
    goto LABEL_7;
  }
  v9 = v8;
  dispatch thunk of ARView.scene.getter();

  dispatch thunk of Scene.anchors.getter();
  swift_release();
  v10 = specialized Collection.first.getter();
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v7, v3);
  result = swift_release();
  if (v10)
    return result;
  type metadata accessor for AnchorEntity();
  v12 = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of ARViewContainer.ARViewContainer.ensureWorldAnchorExists());
  result = MEMORY[0x23B7D0770](v12);
  v13 = *(void **)(a2 + 16);
  if (!v13)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v14 = v13;
  dispatch thunk of ARView.scene.getter();

  dispatch thunk of Scene.anchors.getter();
  swift_release();
  swift_retain();
  Scene.AnchorCollection.append(_:)();
  swift_release_n();
  return ((uint64_t (*)(char *, uint64_t))v11)(v7, v3);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance ARViewContainer<A>.ARViewContainer()
{
  uint64_t v0;

  return specialized ARViewContainer.ARViewContainer.makeUIView(context:)(*(id *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ARViewContainer<A>.ARViewContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7D3350](&protocol conformance descriptor for ARViewContainer<A>.ARViewContainer, a3);
  return static UIViewRepresentable._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ARViewContainer<A>.ARViewContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7D3350](&protocol conformance descriptor for ARViewContainer<A>.ARViewContainer, a3);
  return static UIViewRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance ARViewContainer<A>.ARViewContainer(uint64_t a1)
{
  MEMORY[0x23B7D3350](&protocol conformance descriptor for ARViewContainer<A>.ARViewContainer, a1);
  UIViewRepresentable.body.getter();
  __break(1u);
}

uint64_t type metadata accessor for ARViewContainer.ARViewContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ARViewContainer.ARViewContainer);
}

uint64_t partial apply for closure #1 in ARViewContainer.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in ARViewContainer.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t partial apply for closure #1 in closure #1 in ARViewContainer.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in closure #1 in ARViewContainer.body.getter("DataModel is resuming...", (void (*)(uint64_t))DataModel.resume(), a3, a4);
}

uint64_t objectdestroyTm_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for ARViewContainer(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 36), v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ARViewContainer.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in closure #1 in ARViewContainer.body.getter("DataModel is pausing...", (void (*)(uint64_t))DataModel.pause(), a3, a4);
}

uint64_t partial apply for closure #1 in closure #1 in ARViewContainer.body.getter(const char *a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ARViewContainer(0, v7, v8, a4) - 8) + 80);
  return closure #1 in closure #1 in ARViewContainer.body.getter(v4 + ((v9 + 32) & ~v9), v7, v8, a1, a2);
}

unint64_t lazy protocol witness table accessor for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier;
  if (!lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier)
  {
    result = MEMORY[0x23B7D3350](MEMORY[0x24BDF08F0], MEMORY[0x24BDF0900]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier);
  }
  return result;
}

uint64_t sub_2356A0DA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v4 = type metadata accessor for ARViewContainer.ARViewContainer(255, *a1, a1[1], a4);
  v5 = type metadata accessor for UUID();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  v11[2] = v4;
  v11[3] = v5;
  v11[4] = MEMORY[0x23B7D3350](&protocol conformance descriptor for ARViewContainer<A>.ARViewContainer, v4);
  v11[5] = lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v6, MEMORY[0x24BDCEA88]);
  type metadata accessor for IDView();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v7 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v7);
  v8 = type metadata accessor for ZStack();
  v9 = type metadata accessor for ModifiedContent();
  v11[0] = MEMORY[0x23B7D3350](MEMORY[0x24BDF4750], v8);
  v11[1] = MEMORY[0x24BDF0420];
  return MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v9, v11);
}

void base witness table accessor for View in ARViewContainer<A>.ARViewContainer()
{
  JUMPOUT(0x23B7D3350);
}

id specialized ARViewContainer.ARViewContainer.makeUIView(context:)(id result, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8_t *buf;
  uint64_t v20;
  os_log_type_t type;
  uint64_t v22;

  v2 = *(void **)(a2 + 16);
  if (v2)
  {
    v3 = a2;
    v4 = (uint64_t)result;
    v5 = one-time initialization token for logger;
    v6 = v2;
    if (v5 != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    v8 = v6;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      type = v10;
      v11 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v22 = v20;
      *(_DWORD *)v11 = 136315138;
      buf = v11;
      v12 = v8;
      v13 = v4;
      v14 = v3;
      v15 = objc_msgSend(v12, sel_description);
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v17;

      v3 = v14;
      v4 = v13;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2355E9000, v9, type, "Got arView: %s", buf, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7D3428](v20, -1, -1);
      MEMORY[0x23B7D3428](buf, -1, -1);

    }
    else
    {

    }
    ARViewContainer.ARViewContainer.ensureWorldAnchorExists()(v4, v3);
    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t one-time initialization function for captureSoundModuleType()
{
  uint64_t v0;
  void *v1;
  void *v2;
  Swift::String v3;
  Swift::Int v4;
  uint64_t result;

  v0 = specialized static ExperimentSettings.loadCaptureSoundModuleType(default:)(0x6B6143726579616CLL, 0xE900000000000065);
  v2 = v1;
  v3._countAndFlagsBits = v0;
  v3._object = v2;
  v4 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CaptureSoundModuleType.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  captureSoundModuleType = v4 != 0;
  return result;
}

uint64_t createCaptureSoundModule()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _UNKNOWN **v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  if (one-time initialization token for captureSoundModuleType != -1)
    swift_once();
  if ((captureSoundModuleType & 1) != 0)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)logger);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_2355E9000, v3, v4, "Using layered sound module.", v5, 2u);
      MEMORY[0x23B7D3428](v5, -1, -1);
    }

    v6 = type metadata accessor for LayerCakeCaptureSoundModule();
    result = swift_allocObject();
    v8 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v8;
    *(_QWORD *)(result + 32) = v8;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 72) = v8;
    *(_DWORD *)(result + 80) = 1048576000;
    *(_QWORD *)(result + 88) = 0x3FD3333333333333;
    *(_QWORD *)(result + 96) = &outlined read-only object #0 of LayerCakeCaptureSoundModule.init();
    *(_QWORD *)(result + 104) = 0xFFF0000000000000;
    v9 = &protocol witness table for LayerCakeCaptureSoundModule;
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_2355E9000, v11, v12, "Using filter stack sound module.", v13, 2u);
      MEMORY[0x23B7D3428](v13, -1, -1);
    }

    v6 = type metadata accessor for FilterPipeCaptureSoundModule();
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 5;
    *(_DWORD *)(result + 64) = 16843009;
    *(_OWORD *)(result + 68) = xmmword_2356C2310;
    *(_DWORD *)(result + 84) = 1150681088;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_DWORD *)(result + 120) = 1048576000;
    v9 = &protocol witness table for FilterPipeCaptureSoundModule;
  }
  a1[3] = v6;
  a1[4] = (uint64_t)v9;
  *a1 = result;
  return result;
}

uint64_t one-time initialization function for isSoundEnabled()
{
  uint64_t result;

  result = specialized static ExperimentSettings.loadIsSoundEnabled(default:)(1u);
  static SoundManager.isSoundEnabled = result & 1;
  return result;
}

void *one-time initialization function for instance()
{
  void *result;
  uint64_t v1[5];

  createCaptureSoundModule()(v1);
  type metadata accessor for SoundManager();
  swift_allocObject();
  result = SoundManager.init(module:)((uint64_t)v1);
  static SoundManager.instance = (uint64_t)result;
  return result;
}

void *SoundManager.init(module:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *result;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;

  v20 = (_QWORD *)a1;
  v18 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v1 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v4);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v6);
  v17[1] = type metadata accessor for OS_dispatch_queue();
  v21 = 0xD000000000000022;
  v22 = 0x80000002356C38A0;
  v7._object = (void *)0x80000002356C8C80;
  v7._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v7);
  static DispatchQoS.userInteractive.getter();
  v21 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v5, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5750], v18);
  v8 = v19;
  *(_QWORD *)(v8 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_BYTE *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  if (one-time initialization token for isSoundEnabled != -1)
    swift_once();
  if (static SoundManager.isSoundEnabled != 1)
  {
    v9 = v20;
    if (one-time initialization token for logger != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)logger);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_2355E9000, v13, v14, "Sound is not enabled...  not creating the SoundManager singleton!", v15, 2u);
      MEMORY[0x23B7D3428](v15, -1, -1);
    }

    type metadata accessor for SoundManager();
    swift_deallocPartialClassInstance();
    v8 = 0;
    goto LABEL_12;
  }
  v9 = v20;
  outlined init with copy of Cancellable((uint64_t)v20, v8 + 32);
  v10 = v9[3];
  v11 = v9[4];
  __swift_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  SoundManager.initializeAudioEngine()();
  result = *(void **)(v8 + 72);
  if (result)
  {
    objc_msgSend(result, sel_prepare);
    *(_BYTE *)(v8 + 24) = 4;
LABEL_12:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    return (void *)v8;
  }
  __break(1u);
  return result;
}

_QWORD *SoundManager.initializeAudioEngine()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  void *v7;
  _QWORD *result;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void (*v13)(void);
  id v14;
  _QWORD v15[5];

  v1 = v0;
  if (one-time initialization token for logger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_2355E9000, v3, v4, "Initializing audio engine...", v5, 2u);
    MEMORY[0x23B7D3428](v5, -1, -1);
  }

  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1800]), sel_init);
  v7 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = v6;

  result = *(_QWORD **)(v1 + 72);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  v9 = objc_msgSend(result, sel_mainMixerNode);
  v10 = *(void **)(v1 + 80);
  *(_QWORD *)(v1 + 80) = v9;

  outlined init with copy of Cancellable(v1 + 32, (uint64_t)v15);
  v11 = v15[4];
  result = __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  v12 = *(void **)(v1 + 72);
  if (!v12)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v13 = *(void (**)(void))(v11 + 16);
  v14 = v12;
  v13();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  result = *(_QWORD **)(v1 + 72);
  if (result)
    return objc_msgSend(result, sel_setAutoShutdownEnabled_, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t SoundManager.__deallocating_deinit()
{
  id *v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_, v0);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 4));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SoundManager()
{
  return objc_opt_self();
}

void SoundManager.startEngineIfNeeded()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  uint64_t v17;
  unsigned int v18;
  id v19;
  id v20;
  unsigned __int8 v21;
  id v22;
  void *v23;
  unsigned __int8 v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  _QWORD *v39;
  id v40;
  void *v41;
  id v42;
  id v44[2];

  v1 = v0;
  v44[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (id *)((char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + 16);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5610], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
LABEL_5:
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_2355E9000, v10, v11, "Starting audio engine...", v12, 2u);
      MEMORY[0x23B7D3428](v12, -1, -1);
    }

    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_2355E9000, v13, v14, "Setting the audio session to soloAmbient and active...", v15, 2u);
      MEMORY[0x23B7D3428](v15, -1, -1);
    }

    v16 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    v17 = *MEMORY[0x24BDB15C0];
    v44[0] = 0;
    v18 = objc_msgSend(v16, sel_setCategory_error_, v17, v44);
    v19 = v44[0];
    if (v18
      && (v44[0] = 0,
          v20 = v19,
          v21 = objc_msgSend(v16, sel_setActive_withOptions_error_, 1, 0, v44),
          v19 = v44[0],
          (v21 & 1) != 0))
    {
      v22 = v44[0];

      v23 = *(void **)(v1 + 72);
      if (!v23)
      {
        __break(1u);
        return;
      }
      v44[0] = 0;
      v24 = objc_msgSend(v23, sel_startAndReturnError_, v44);
      v25 = v44[0];
      if ((v24 & 1) != 0)
      {
        *(_BYTE *)(v1 + 24) = 1;
        v26 = (void *)objc_opt_self();
        v27 = v25;
        v28 = objc_msgSend(v26, sel_defaultCenter);
        objc_msgSend(v28, sel_addObserver_selector_name_object_, v1, sel_handleEngineConfigChange_, *MEMORY[0x24BDB1580], 0);

        v29 = Logger.logObject.getter();
        v30 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v29, v30))
        {
          v31 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v31 = 0;
          _os_log_impl(&dword_2355E9000, v29, v30, "... done starting audio engine.", v31, 2u);
          MEMORY[0x23B7D3428](v31, -1, -1);
        }

        return;
      }
      v42 = v44[0];
      v33 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
    else
    {
      v32 = v19;
      v33 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
    v34 = v33;
    v35 = v33;
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      v39 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v38 = 138543362;
      v40 = v33;
      v41 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v44[0] = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v39 = v41;

      _os_log_impl(&dword_2355E9000, v36, v37, "Can't start audio engine!  error=%{public}@", v38, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B7D3428](v39, -1, -1);
      MEMORY[0x23B7D3428](v38, -1, -1);

    }
    else
    {

    }
    return;
  }
  v8 = *(void **)(v1 + 72);
  if (!v8)
    __break(1u);
  if ((objc_msgSend(v8, sel_isRunning) & 1) == 0)
  {
    if (one-time initialization token for logger == -1)
      goto LABEL_5;
    goto LABEL_23;
  }
}

Swift::Void __swiftcall SoundManager.start()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v13 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[1] = *(_QWORD *)(v1 + 16);
  v10 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for closure #1 in SoundManager.start();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_52;
  v11 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v14 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v3, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x23B7D27B0](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  swift_release();
}

uint64_t closure #1 in SoundManager.start()()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    SoundManager.startEngineIfNeeded()();
    return swift_release();
  }
  return result;
}

id SoundManager.pauseEngine()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  id result;
  uint64_t v8;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 16);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5610], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  result = (id)(*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  result = *(id *)(v0 + 72);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  result = objc_msgSend(result, sel_isRunning);
  if (!(_DWORD)result)
  {
LABEL_6:
    *(_BYTE *)(v0 + 24) = 3;
    return result;
  }
  result = *(id *)(v0 + 72);
  if (result)
  {
    result = objc_msgSend(result, sel_pause);
    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
  return result;
}

Swift::Void __swiftcall SoundManager.requestStandby(after:)(Swift::Double after)
{
  SoundManager.requestStandby(after:)(after, (uint64_t)&unk_2506BE7B8, (uint64_t)partial apply for closure #1 in SoundManager.requestStandby(after:), (uint64_t)&block_descriptor_45);
}

uint64_t closure #1 in SoundManager.requestStandby(after:)(double a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void (*v21)(char *, uint64_t);
  void *v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v27 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v28 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v24 - v13;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v16 = result;
    v25 = v5;
    if (one-time initialization token for logger != -1)
      swift_once();
    v26 = v2;
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)logger);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_2355E9000, v18, v19, "requestStop()...", v20, 2u);
      MEMORY[0x23B7D3428](v20, -1, -1);
    }

    *(_BYTE *)(v16 + 24) = 2;
    v24[1] = *(_QWORD *)(v16 + 16);
    static DispatchTime.now()();
    MEMORY[0x23B7D2414](v12, a1);
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    aBlock[4] = partial apply for closure #1 in closure #1 in SoundManager.requestStandby(after:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_48;
    v22 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v29 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v23 = v27;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x23B7D2774](v14, v7, v4, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v23);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v25);
    v21(v14, v8);
    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in closure #1 in SoundManager.requestStandby(after:)(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  if (*(_BYTE *)(a1 + 24) == 2)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)logger);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_2355E9000, v2, v3, "... requested standby reached, entering standby.", v4, 2u);
      MEMORY[0x23B7D3428](v4, -1, -1);
    }

    SoundManager.pauseEngine()();
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_2355E9000, oslog, v6, "... the requested standby was ignored since the request was overridden.", v7, 2u);
      MEMORY[0x23B7D3428](v7, -1, -1);
    }

  }
}

Swift::Void __swiftcall SoundManager.update(t:)(Swift::Double t)
{
  SoundManager.requestStandby(after:)(t, (uint64_t)&unk_2506BE768, (uint64_t)partial apply for closure #1 in SoundManager.update(t:), (uint64_t)&block_descriptor_38);
}

uint64_t SoundManager.requestStandby(after:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags();
  v20 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)(v4 + 16);
  v15 = swift_allocObject();
  swift_weakInit();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  *(double *)(v16 + 24) = a1;
  aBlock[4] = a3;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a4;
  v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v21 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x23B7D27B0](0, v14, v10, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in SoundManager.update(t:)(double a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    outlined init with copy of Cancellable(result + 32, (uint64_t)v5);
    swift_release();
    v3 = v6;
    v4 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    (*(void (**)(uint64_t, uint64_t, double))(v4 + 64))(v3, v4, a1);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return result;
}

Swift::Void __swiftcall SoundManager.startLoop(playStartSound:)(Swift::Bool playStartSound)
{
  SoundManager.startLoop(playStartSound:)(playStartSound, (uint64_t)&unk_2506BE718, (uint64_t)partial apply for closure #1 in SoundManager.startLoop(playStartSound:), (uint64_t)&block_descriptor_31);
}

void closure #1 in SoundManager.startLoop(playStartSound:)(uint64_t a1, char a2)
{
  uint64_t Strong;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v4 = (_QWORD *)Strong;
    if (one-time initialization token for logger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v8 = 67240192;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2355E9000, v6, v7, "Starting the loop sound...  playStartSound=%{BOOL,public}d", v8, 8u);
      MEMORY[0x23B7D3428](v8, -1, -1);
    }

    SoundManager.startEngineIfNeeded()();
    v9 = (void *)v4[9];
    if (v9)
    {
      if (objc_msgSend(v9, sel_isRunning))
      {
        v10 = v4[7];
        v11 = v4[8];
        __swift_project_boxed_opaque_existential_1(v4 + 4, v10);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 24))(a2 & 1, v10, v11);
      }
      else
      {
        v12 = Logger.logObject.getter();
        v13 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v12, v13))
        {
          v14 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v14 = 0;
          _os_log_impl(&dword_2355E9000, v12, v13, "Audio engine not running, not playing sound!", v14, 2u);
          MEMORY[0x23B7D3428](v14, -1, -1);
          swift_release();

          return;
        }

      }
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall SoundManager.stopLoop(playEndSound:)(Swift::Bool playEndSound)
{
  SoundManager.startLoop(playStartSound:)(playEndSound, (uint64_t)&unk_2506BE6C8, (uint64_t)partial apply for closure #1 in SoundManager.stopLoop(playEndSound:), (uint64_t)&block_descriptor_24);
}

uint64_t SoundManager.startLoop(playStartSound:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags();
  v20 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v4 + 16);
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  *(_BYTE *)(v15 + 24) = a1;
  aBlock[4] = a3;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a4;
  v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v21 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x23B7D27B0](0, v13, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v19);
  swift_release();
  return swift_release();
}

void closure #1 in SoundManager.stopLoop(playEndSound:)(uint64_t a1, char a2)
{
  uint64_t Strong;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v4 = (_QWORD *)Strong;
    SoundManager.startEngineIfNeeded()();
    v5 = (void *)v4[9];
    if (v5)
    {
      if (objc_msgSend(v5, sel_isRunning))
      {
        v6 = v4[7];
        v7 = v4[8];
        __swift_project_boxed_opaque_existential_1(v4 + 4, v6);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 + 32))(a2 & 1, v6, v7);
      }
      else
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v8 = type metadata accessor for Logger();
        __swift_project_value_buffer(v8, (uint64_t)logger);
        v9 = Logger.logObject.getter();
        v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v11 = 0;
          _os_log_impl(&dword_2355E9000, v9, v10, "Audio engine not running, not playing sound!", v11, 2u);
          MEMORY[0x23B7D3428](v11, -1, -1);
          swift_release();

          return;
        }

      }
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall SoundManager.playShutterSound(volume:)(Swift::Float volume)
{
  SoundManager.playShutterSound(volume:)(volume, (uint64_t)&unk_2506BE678, (uint64_t)partial apply for closure #1 in SoundManager.playShutterSound(volume:), (uint64_t)&block_descriptor_17);
}

void closure #1 in SoundManager.playShutterSound(volume:)(float a1)
{
  uint64_t Strong;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = (_QWORD *)Strong;
    SoundManager.startEngineIfNeeded()();
    v4 = (void *)v3[9];
    if (v4)
    {
      if (objc_msgSend(v4, sel_isRunning))
      {
        v5 = v3[7];
        v6 = v3[8];
        __swift_project_boxed_opaque_existential_1(v3 + 4, v5);
        (*(void (**)(uint64_t, uint64_t, float))(v6 + 40))(v5, v6, a1);
      }
      else
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v7 = type metadata accessor for Logger();
        __swift_project_value_buffer(v7, (uint64_t)logger);
        v8 = Logger.logObject.getter();
        v9 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v8, v9))
        {
          v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v10 = 0;
          _os_log_impl(&dword_2355E9000, v8, v9, "Audio engine not running, not playing sound!", v10, 2u);
          MEMORY[0x23B7D3428](v10, -1, -1);
          swift_release();

          return;
        }

      }
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall SoundManager.playCompletionSound(volume:)(Swift::Float volume)
{
  SoundManager.playShutterSound(volume:)(volume, (uint64_t)&unk_2506BE628, (uint64_t)partial apply for closure #1 in SoundManager.playCompletionSound(volume:), (uint64_t)&block_descriptor_10);
}

uint64_t SoundManager.playShutterSound(volume:)(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags();
  v20 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)(v4 + 16);
  v15 = swift_allocObject();
  swift_weakInit();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  *(float *)(v16 + 24) = a1;
  aBlock[4] = a3;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a4;
  v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v21 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x23B7D27B0](0, v14, v10, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_release();
  return swift_release();
}

void closure #1 in SoundManager.playCompletionSound(volume:)(float a1)
{
  uint64_t Strong;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = (_QWORD *)Strong;
    SoundManager.startEngineIfNeeded()();
    v4 = (void *)v3[9];
    if (v4)
    {
      if (objc_msgSend(v4, sel_isRunning))
      {
        v5 = v3[7];
        v6 = v3[8];
        __swift_project_boxed_opaque_existential_1(v3 + 4, v5);
        (*(void (**)(uint64_t, uint64_t, float))(v6 + 48))(v5, v6, a1);
      }
      else
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v7 = type metadata accessor for Logger();
        __swift_project_value_buffer(v7, (uint64_t)logger);
        v8 = Logger.logObject.getter();
        v9 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v8, v9))
        {
          v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v10 = 0;
          _os_log_impl(&dword_2355E9000, v8, v9, "Audio engine not running, not playing sound!", v10, 2u);
          MEMORY[0x23B7D3428](v10, -1, -1);
          swift_release();

          return;
        }

      }
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall SoundManager.updateGoodnessScore(_:)(Swift::Float a1)
{
  SoundManager.playShutterSound(volume:)(a1, (uint64_t)&unk_2506BE5D8, (uint64_t)partial apply for closure #1 in SoundManager.updateGoodnessScore(_:), (uint64_t)&block_descriptor_10);
}

uint64_t closure #1 in SoundManager.updateGoodnessScore(_:)(float a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    outlined init with copy of Cancellable(result + 32, (uint64_t)v5);
    swift_release();
    v3 = v6;
    v4 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    (*(void (**)(uint64_t, uint64_t, float))(v4 + 56))(v3, v4, a1);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return result;
}

void FilterPipeCaptureSoundModule.loadSamples()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;

  if (one-time initialization token for logger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_2355E9000, v3, v4, "Loading capture sound samples...", v5, 2u);
    MEMORY[0x23B7D3428](v5, -1, -1);
  }

  v6 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6C5F6E6163735F31, 0xEB00000000706F6FLL);
  if (!v1)
  {
    v7 = (void *)v0[12];
    v0[12] = v6;

    v8 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6163735F6E65706FLL, 0xE90000000000006ELL);
    v9 = (void *)v0[11];
    v0[11] = v8;

    v10 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6D6F635F6E616373, 0xED00006574656C70);
    v11 = (void *)v0[13];
    v0[13] = v10;

    v12 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x65736C7570, 0xE500000000000000);
    v13 = (void *)v0[14];
    v0[14] = v12;

    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_2355E9000, v14, v15, "... done loading capture sound samples.", v16, 2u);
      MEMORY[0x23B7D3428](v16, -1, -1);
    }

  }
}

void FilterPipeCaptureSoundModule.connectGraph(engine:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  void *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  void *v13;
  void *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  void *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  id v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  id v72;
  os_log_type_t v73;
  uint8_t *v74;
  NSObject *v75;
  NSObject *oslog;

  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_2355E9000, v4, v5, "Creating loop playback node...", v6, 2u);
    MEMORY[0x23B7D3428](v6, -1, -1);
  }

  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1850]), sel_init);
  v8 = (void *)v1[2];
  v1[2] = v7;

  if (!v1[2])
  {
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  objc_msgSend(a1, sel_attachNode_);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_2355E9000, v9, v10, "Creating an audio distortion node...", v11, 2u);
    MEMORY[0x23B7D3428](v11, -1, -1);
  }

  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB18A0]), sel_init);
  v13 = (void *)v1[3];
  v1[3] = v12;

  v14 = (void *)v1[3];
  if (!v14)
    goto LABEL_47;
  objc_msgSend(v14, sel_loadFactoryPreset_, v1[7]);
  if (!v1[3])
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  objc_msgSend(a1, sel_attachNode_);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_2355E9000, v15, v16, "Creating a pitchshifter node...", v17, 2u);
    MEMORY[0x23B7D3428](v17, -1, -1);
  }

  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB18C0]), sel_init);
  v19 = (void *)v1[4];
  v1[4] = v18;

  if (!v1[4])
    goto LABEL_49;
  objc_msgSend(a1, sel_attachNode_);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_2355E9000, v20, v21, "Creating a varispeed node...", v22, 2u);
    MEMORY[0x23B7D3428](v22, -1, -1);
  }

  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB18C8]), sel_init);
  v24 = (void *)v1[5];
  v1[5] = v23;

  if (!v1[5])
    goto LABEL_50;
  objc_msgSend(a1, sel_attachNode_);
  v25 = objc_msgSend(a1, sel_mainMixerNode);
  v26 = (void *)v1[2];
  if (!v26)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v27 = (void *)v1[5];
  if (!v27)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v28 = (void *)v1[12];
  if (!v28)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v29 = v25;
  v30 = v26;
  v31 = v27;
  v32 = objc_msgSend(v28, sel_format);
  objc_msgSend(a1, sel_connect_to_format_, v30, v31, v32);

  v33 = (void *)v1[5];
  if (!v33)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v34 = (void *)v1[3];
  if (!v34)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v35 = (void *)v1[12];
  if (!v35)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v36 = v33;
  v37 = v34;
  v38 = objc_msgSend(v35, sel_format);
  objc_msgSend(a1, sel_connect_to_format_, v36, v37, v38);

  v39 = (void *)v1[3];
  if (!v39)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v40 = (void *)v1[4];
  if (!v40)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v41 = (void *)v1[12];
  if (!v41)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v42 = v39;
  v43 = v40;
  v44 = objc_msgSend(v41, sel_format);
  objc_msgSend(a1, sel_connect_to_format_, v42, v43, v44);

  v45 = (void *)v1[4];
  if (!v45)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v46 = (void *)v1[12];
  if (!v46)
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v47 = v45;
  v48 = objc_msgSend(v46, sel_format);
  objc_msgSend(a1, sel_connect_to_format_, v47, v29, v48);

  v49 = Logger.logObject.getter();
  v50 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v51 = 0;
    _os_log_impl(&dword_2355E9000, v49, v50, "... playback node connected.", v51, 2u);
    MEMORY[0x23B7D3428](v51, -1, -1);
  }

  v52 = Logger.logObject.getter();
  v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v54 = 0;
    _os_log_impl(&dword_2355E9000, v52, v53, "... speed node connected.", v54, 2u);
    MEMORY[0x23B7D3428](v54, -1, -1);
  }

  v55 = Logger.logObject.getter();
  v56 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v57 = 0;
    _os_log_impl(&dword_2355E9000, v55, v56, "... distortion node connected.", v57, 2u);
    MEMORY[0x23B7D3428](v57, -1, -1);
  }

  v58 = Logger.logObject.getter();
  v59 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v60 = 0;
    _os_log_impl(&dword_2355E9000, v58, v59, "... pitchshifter node connected.", v60, 2u);
    MEMORY[0x23B7D3428](v60, -1, -1);
  }

  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v63 = 0;
    _os_log_impl(&dword_2355E9000, v61, v62, "... done audio engine initializing.", v63, 2u);
    MEMORY[0x23B7D3428](v63, -1, -1);
  }

  v64 = Logger.logObject.getter();
  v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v66 = 0;
    _os_log_impl(&dword_2355E9000, v64, v65, "Creating the shutter playback node...", v66, 2u);
    MEMORY[0x23B7D3428](v66, -1, -1);
  }

  v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1850]), sel_init);
  v68 = (void *)v1[6];
  v1[6] = v67;

  if (!v1[6])
    goto LABEL_62;
  objc_msgSend(a1, sel_attachNode_);
  v69 = (void *)v1[6];
  if (!v69)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v70 = (void *)v1[14];
  if (!v70)
  {
LABEL_64:
    __break(1u);
    return;
  }
  v71 = v69;
  v72 = objc_msgSend(v70, sel_format);
  objc_msgSend(a1, sel_connect_to_format_, v71, v29, v72);

  oslog = Logger.logObject.getter();
  v73 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v73))
  {
    v74 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v74 = 0;
    _os_log_impl(&dword_2355E9000, oslog, v73, "... connected shutter playback node.", v74, 2u);
    MEMORY[0x23B7D3428](v74, -1, -1);
    v75 = v29;
  }
  else
  {
    v75 = oslog;
    oslog = v29;
  }

}

id FilterPipeCaptureSoundModule.stopLoop(playEndSound:)(char a1)
{
  uint64_t v1;
  id result;
  uint64_t v3;

  if ((a1 & 1) == 0)
    goto LABEL_5;
  result = *(id *)(v1 + 16);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(v1 + 104);
  if (v3)
  {
    objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 2, 0);
LABEL_5:
    result = *(id *)(v1 + 16);
    if (result)
      return objc_msgSend(result, sel_stop);
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
  return result;
}

id FilterPipeCaptureSoundModule.playShutterSound(volume:)(float a1)
{
  uint64_t v1;
  id result;
  uint64_t v3;
  double v5;

  result = *(id *)(v1 + 48);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = *(_QWORD *)(v1 + 112);
  if (!v3)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 0, 0);
  result = *(id *)(v1 + 48);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(float *)&v5 = a1;
  objc_msgSend(result, sel_setVolume_, v5);
  result = *(id *)(v1 + 48);
  if (result)
    return objc_msgSend(result, sel_play);
LABEL_9:
  __break(1u);
  return result;
}

id FilterPipeCaptureSoundModule.playCompletionSound(volume:)(float a1)
{
  uint64_t v1;
  id result;
  uint64_t v3;
  double v5;

  result = *(id *)(v1 + 48);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = *(_QWORD *)(v1 + 104);
  if (!v3)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 0, 0);
  result = *(id *)(v1 + 48);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(float *)&v5 = a1;
  objc_msgSend(result, sel_setVolume_, v5);
  result = *(id *)(v1 + 48);
  if (result)
    return objc_msgSend(result, sel_play);
LABEL_9:
  __break(1u);
  return result;
}

id FilterPipeCaptureSoundModule.updateGoodnessScore(_:)(double a1)
{
  _QWORD *v1;
  float v2;
  float v3;
  id result;
  double v5;
  double v6;
  double v7;

  v2 = 0.0;
  if (*(float *)&a1 <= 0.0)
    *(float *)&a1 = 0.0;
  if (*(float *)&a1 > 1.0)
    *(float *)&a1 = 1.0;
  v3 = vabds_f32(1.0, *(float *)&a1);
  if (v3 > 0.25)
    v2 = (float)((float)(1.0 - *(float *)&a1) + (float)((float)((float)(1.0 - *(float *)&a1) / v3) * -0.25)) / 0.75;
  result = (id)v1[2];
  if (!result)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (*(float *)&a1 <= 0.2)
    *(float *)&a1 = 0.2;
  if (*(float *)&a1 > 0.8)
    *(float *)&a1 = 0.8;
  objc_msgSend(result, sel_setVolume_, a1);
  result = (id)v1[3];
  if (!result)
    goto LABEL_19;
  *(float *)&v5 = v2 * v2;
  if ((float)(v2 * v2) > 0.5)
    *(float *)&v5 = 0.5;
  objc_msgSend(result, sel_setWetDryMix_, v5);
  result = (id)v1[4];
  if (!result)
    goto LABEL_20;
  *(float *)&v6 = v2 * -1200.0;
  objc_msgSend(result, sel_setPitch_, v6);
  result = (id)v1[5];
  if (result)
  {
    *(float *)&v7 = (float)(v2 * -0.5) + 1.0;
    return objc_msgSend(result, sel_setRate_, v7);
  }
LABEL_21:
  __break(1u);
  return result;
}

id *FilterPipeCaptureSoundModule.deinit()
{
  id *v0;

  return v0;
}

uint64_t FilterPipeCaptureSoundModule.__deallocating_deinit()
{
  FilterPipeCaptureSoundModule.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FilterPipeCaptureSoundModule()
{
  return objc_opt_self();
}

void protocol witness for CaptureSoundModule.loadSamples() in conformance FilterPipeCaptureSoundModule()
{
  FilterPipeCaptureSoundModule.loadSamples()();
}

void protocol witness for CaptureSoundModule.connectGraph(engine:) in conformance FilterPipeCaptureSoundModule(void *a1)
{
  FilterPipeCaptureSoundModule.connectGraph(engine:)(a1);
}

id protocol witness for CaptureSoundModule.startLoop(playStartSound:) in conformance FilterPipeCaptureSoundModule()
{
  return specialized FilterPipeCaptureSoundModule.startLoop(playStartSound:)();
}

id protocol witness for CaptureSoundModule.stopLoop(playEndSound:) in conformance FilterPipeCaptureSoundModule(char a1)
{
  return FilterPipeCaptureSoundModule.stopLoop(playEndSound:)(a1);
}

id protocol witness for CaptureSoundModule.playShutterSound(volume:) in conformance FilterPipeCaptureSoundModule(float a1)
{
  return FilterPipeCaptureSoundModule.playShutterSound(volume:)(a1);
}

id protocol witness for CaptureSoundModule.playCompletionSound(volume:) in conformance FilterPipeCaptureSoundModule(float a1)
{
  return FilterPipeCaptureSoundModule.playCompletionSound(volume:)(a1);
}

id protocol witness for CaptureSoundModule.updateGoodnessScore(_:) in conformance FilterPipeCaptureSoundModule(double a1)
{
  return FilterPipeCaptureSoundModule.updateGoodnessScore(_:)(a1);
}

uint64_t Fader.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Fader()
{
  return objc_opt_self();
}

void LayerCakeCaptureSoundModule.loadSamples()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;

  v2 = v0;
  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)logger);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_2355E9000, v4, v5, "Loading capture sound samples...", v6, 2u);
    MEMORY[0x23B7D3428](v6, -1, -1);
  }

  v7 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6163735F6E65706FLL, 0xE90000000000006ELL);
  if (!v1)
  {
    v8 = (void *)v2[6];
    v2[6] = v7;

    v9 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6D6F635F6E616373, 0xED00006574656C70);
    v10 = (void *)v2[7];
    v2[7] = v9;

    v11 = specialized static SoundManager.loadAudioFileFromBundle(named:)(0x65736C7570, 0xE500000000000000);
    v12 = (void *)v2[8];
    v2[8] = v11;

    specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6C5F6E6163735F31, 0xEB00000000706F6FLL);
    v13 = v2 + 9;
    v14 = swift_beginAccess();
    MEMORY[0x23B7D25AC](v14);
    if (*(_QWORD *)((v2[9] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v2[9] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6C5F6E6163735F32, 0xEB00000000706F6FLL);
    v15 = swift_beginAccess();
    MEMORY[0x23B7D25AC](v15);
    if (*(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    specialized static SoundManager.loadAudioFileFromBundle(named:)(0x6C5F6E6163735F33, 0xEB00000000706F6FLL);
    v16 = swift_beginAccess();
    MEMORY[0x23B7D25AC](v16);
    if (*(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_2355E9000, v17, v18, "... done loading capture sound samples.", v19, 2u);
      MEMORY[0x23B7D3428](v19, -1, -1);
    }

  }
}

void LayerCakeCaptureSoundModule.connectGraph(engine:)(void *a1)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  unint64_t *v47;

  v6 = (unint64_t)v1;
  v8 = v1 + 3;
  swift_beginAccess();
  v9 = *(_QWORD *)(v6 + 24);
  if (!(v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v10)
      goto LABEL_3;
LABEL_32:
    __break(1u);
LABEL_33:
    v30 = (id)v4;
    swift_bridgeObjectRetain();
    v15 = (id)MEMORY[0x23B7D29C0](0, v5);
    swift_bridgeObjectRelease();
LABEL_8:
    v16 = objc_msgSend(v15, sel_format);

    objc_msgSend(a1, sel_connect_to_format_, v4, v2, v16);
    v10 = 0x24BDB1000uLL;
    objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1850]), *(SEL *)(v3 + 1168));
    v17 = swift_beginAccess();
    MEMORY[0x23B7D25AC](v17);
    if (*(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_31:
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v10)
    goto LABEL_32;
LABEL_3:
  v2 = objc_msgSend(a1, sel_mainMixerNode);
  v3 = (uint64_t)&stru_2506CA000;
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1828]), sel_init);
  v12 = *(void **)(v6 + 16);
  *(_QWORD *)(v6 + 16) = v11;

  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  objc_msgSend(a1, sel_attachNode_);
  v4 = *(_QWORD *)(v6 + 16);
  if (!v4)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v47 = (unint64_t *)(v6 + 72);
  swift_beginAccess();
  v5 = *(_QWORD *)(v6 + 72);
  if ((v5 & 0xC000000000000001) != 0)
    goto LABEL_33;
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(void **)(v5 + 32);
    v14 = (id)v4;
    v15 = v13;
    goto LABEL_8;
  }
  __break(1u);
LABEL_35:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_9:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  objc_msgSend(objc_allocWithZone(*(Class *)(v10 + 2128)), *(SEL *)(v3 + 1168));
  v18 = swift_beginAccess();
  MEMORY[0x23B7D25AC](v18);
  if (*(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  objc_msgSend(objc_allocWithZone(*(Class *)(v10 + 2128)), *(SEL *)(v3 + 1168));
  v19 = swift_beginAccess();
  MEMORY[0x23B7D25AC](v19);
  if (*(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  v4 = *v8;
  v45 = v2;
  if (*v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    if (v20)
    {
LABEL_15:
      v8 = (unint64_t *)(v6 + 32);
      v46 = v20;
      v3 = 4;
      while (1)
      {
        if ((v4 & 0xC000000000000001) != 0)
          v21 = (_QWORD *)MEMORY[0x23B7D29C0](v3 - 4, v4);
        else
          v21 = *(id *)(v4 + 8 * v3);
        v5 = (unint64_t)v21;
        v2 = (v3 - 3);
        if (__OFADD__(v3 - 4, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        v22 = a1;
        objc_msgSend(a1, sel_attachNode_, v21);
        a1 = *(void **)(v6 + 16);
        if (!a1)
          break;
        v23 = (_QWORD *)v6;
        v6 = *v47;
        if ((*v47 & 0xC000000000000001) != 0)
        {
          v29 = a1;
          swift_bridgeObjectRetain();
          v26 = (id)MEMORY[0x23B7D29C0](0, v6);
          swift_bridgeObjectRelease();
        }
        else
        {
          if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_30;
          v24 = *(void **)(v6 + 32);
          v25 = a1;
          v26 = v24;
        }
        v27 = objc_msgSend(v26, sel_format);

        objc_msgSend(v22, sel_connect_to_format_, v5, a1, v27);
        v28 = swift_beginAccess();
        MEMORY[0x23B7D25AC](v28);
        if (*(_QWORD *)(*v8 + 16) >= *(_QWORD *)(*v8 + 24) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();

        ++v3;
        a1 = v22;
        v6 = (unint64_t)v23;
        if (v2 == v46)
          goto LABEL_37;
      }
      __break(1u);
      goto LABEL_49;
    }
  }
  else
  {
    v20 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20)
      goto LABEL_15;
  }
LABEL_37:
  swift_bridgeObjectRelease();
  if (one-time initialization token for logger != -1)
    swift_once();
  v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)logger);
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_2355E9000, v32, v33, "Creating the shutter playback node...", v34, 2u);
    MEMORY[0x23B7D3428](v34, -1, -1);
  }

  v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1850]), sel_init);
  v36 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v35;

  if (!*(_QWORD *)(v6 + 40))
    goto LABEL_51;
  objc_msgSend(a1, sel_attachNode_);
  v37 = *(void **)(v6 + 40);
  if (!v37)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v38 = *(void **)(v6 + 64);
  if (!v38)
  {
LABEL_53:
    __break(1u);
    return;
  }
  v39 = v37;
  v40 = objc_msgSend(v38, sel_format);
  objc_msgSend(a1, sel_connect_to_format_, v39, v45, v40);

  v41 = Logger.logObject.getter();
  v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v43 = 0;
    _os_log_impl(&dword_2355E9000, v41, v42, "... connected shutter playback node to mainMixer.", v43, 2u);
    MEMORY[0x23B7D3428](v43, -1, -1);
    v44 = v45;
  }
  else
  {
    v44 = v41;
    v41 = v45;
  }

}

void LayerCakeCaptureSoundModule.startLoop(playStartSound:)(char a1)
{
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  double v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;

  if ((a1 & 1) == 0)
    goto LABEL_6;
  v2 = (void *)v1[5];
  if (!v2)
    goto LABEL_29;
  v3 = v1[6];
  if (v3)
  {
    objc_msgSend(v2, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 0, 0);
    v4 = (void *)v1[5];
    if (v4)
    {
      objc_msgSend(v4, sel_play);
LABEL_6:
      v5 = v1 + 9;
      swift_beginAccess();
      v6 = v1[9];
      if (v6 >> 62)
        goto LABEL_27;
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      while (1)
      {
        if (!v7)
          return;
        v8 = v1 + 3;
        v1 += 4;
        swift_beginAccess();
        v9 = -v7;
        v10 = 4;
        while (1)
        {
          v11 = v10 - 4;
          v12 = *v8;
          if ((*v8 & 0xC000000000000001) == 0)
            break;
          swift_bridgeObjectRetain();
          v13 = (id)MEMORY[0x23B7D29C0](v10 - 4, v12);
          swift_bridgeObjectRelease();
LABEL_13:
          v14 = *v5;
          if ((*v5 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            v15 = (id)MEMORY[0x23B7D29C0](v10 - 4, v14);
            swift_bridgeObjectRelease();
          }
          else
          {
            if (v11 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_25;
            v15 = *(id *)(v14 + 8 * v10);
          }
          objc_msgSend(v13, sel_scheduleBuffer_atTime_options_completionHandler_, v15, 0, 1, 0);
          LODWORD(v16) = 0;
          objc_msgSend(v13, sel_setVolume_, v16);
          objc_msgSend(v13, sel_play);
          swift_beginAccess();
          v17 = *v1;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v1 = v17;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _ArrayBuffer._consumeAndCreateNew()();
          if (v11 >= *(_QWORD *)(v17 + 16))
            goto LABEL_26;
          *(_QWORD *)(v17 + 8 * v10) = 0;
          swift_release();
          specialized Array._endMutation()();
          swift_endAccess();

          ++v10;
          if (v9 + v10 == 4)
            return;
        }
        if (v11 < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
          break;
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        swift_bridgeObjectRetain();
        v7 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v7 < 0)
        {
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
      }
      v13 = *(id *)(v12 + 8 * v10);
      goto LABEL_13;
    }
  }
  else
  {
LABEL_30:
    __break(1u);
  }
  __break(1u);
}

char *LayerCakeCaptureSoundModule.stopLoop(playEndSound:)(char a1)
{
  _QWORD *v1;
  char *result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;

  if ((a1 & 1) != 0)
  {
    result = (char *)v1[5];
    if (!result)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    v3 = v1[7];
    if (!v3)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 0, 0);
    result = (char *)v1[5];
    if (!result)
    {
LABEL_16:
      __break(1u);
      return result;
    }
    objc_msgSend(result, sel_play);
  }
  result = (char *)swift_beginAccess();
  v4 = v1[9];
  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  result = (char *)swift_bridgeObjectRelease();
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
LABEL_8:
  if (v5)
  {
    result = 0;
    do
    {
      v6 = result + 1;
      LayerCakeCaptureSoundModule.requestStop(layer:)((unint64_t)result);
      result = v6;
    }
    while ((char *)v5 != v6);
  }
  return result;
}

id LayerCakeCaptureSoundModule.playShutterSound(volume:)(float a1)
{
  uint64_t v1;
  id result;
  uint64_t v3;
  double v5;

  result = *(id *)(v1 + 40);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = *(_QWORD *)(v1 + 64);
  if (!v3)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 0, 0);
  result = *(id *)(v1 + 40);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(float *)&v5 = a1;
  objc_msgSend(result, sel_setVolume_, v5);
  result = *(id *)(v1 + 40);
  if (result)
    return objc_msgSend(result, sel_play);
LABEL_9:
  __break(1u);
  return result;
}

id LayerCakeCaptureSoundModule.playCompletionSound(volume:)(float a1)
{
  uint64_t v1;
  id result;
  uint64_t v3;
  double v5;

  result = *(id *)(v1 + 40);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = *(_QWORD *)(v1 + 56);
  if (!v3)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 0, 0);
  result = *(id *)(v1 + 40);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(float *)&v5 = a1;
  objc_msgSend(result, sel_setVolume_, v5);
  result = *(id *)(v1 + 40);
  if (result)
    return objc_msgSend(result, sel_play);
LABEL_9:
  __break(1u);
  return result;
}

void LayerCakeCaptureSoundModule.adjustMixLevels(_:)(float a1)
{
  _QWORD *v1;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  id v14;
  double v15;

  if (a1 < 0.0 || a1 > 1.0)
    goto LABEL_30;
  swift_beginAccess();
  v4 = v1[9];
  if (v4 >> 62)
    goto LABEL_31;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    v6 = v1 + 3;
    swift_beginAccess();
    v7 = 0;
    while (1)
    {
      v8 = v1[12];
      v9 = *(_QWORD *)(v8 + 16);
      if (v7 >= v9)
        break;
      v10 = v7 + 1;
      if (v7 + 1 >= v9)
        goto LABEL_28;
      v11 = (float)(a1 - *(float *)(v8 + 4 * v7 + 32))
          / (float)(*(float *)(v8 + 4 * v7 + 36) - *(float *)(v8 + 4 * v7 + 32));
      if (v11 <= 0.0)
        v11 = 0.0;
      if (v11 > 1.0)
        v11 = 1.0;
      if (v11 <= 0.0)
        v11 = 0.0;
      if (v11 <= 0.8)
        v12 = v11;
      else
        v12 = 0.8;
      v13 = *v6;
      if ((*v6 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v14 = (id)MEMORY[0x23B7D29C0](v7, v13);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v7 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_29;
        v14 = *(id *)(v13 + 8 * v7 + 32);
      }
      *(float *)&v15 = v12;
      objc_msgSend(v14, sel_setVolume_, v15);

      v7 = v10;
      if (v5 == v10)
        return;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 < 0)
    {
      __break(1u);
      return;
    }
  }
}

uint64_t LayerCakeCaptureSoundModule.requestStop(layer:)(unint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v2 = v1;
  if (one-time initialization token for logger != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)logger);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v7 = 134349056;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2355E9000, v5, v6, "Requesting faded stop for layer %{public}ld...", v7, 0xCu);
    MEMORY[0x23B7D3428](v7, -1, -1);
  }

  swift_beginAccess();
  v8 = v2[3];
  if ((v8 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      v9 = *(id *)(v8 + 8 * a1 + 32);
      goto LABEL_9;
    }
    __break(1u);
LABEL_16:
    specialized _ArrayBuffer._consumeAndCreateNew()();
  }
  swift_bridgeObjectRetain();
  v9 = (id)MEMORY[0x23B7D29C0](a1, v8);
  swift_bridgeObjectRelease();
LABEL_9:
  v10 = v2[13];
  type metadata accessor for Fader();
  v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v11 + 48) = 0;
  swift_unknownObjectWeakAssign();

  *(_BYTE *)(v11 + 24) = 1;
  *(_QWORD *)(v11 + 32) = v10;
  *(_QWORD *)(v11 + 40) = 0x3FD3333333333333;
  swift_beginAccess();
  v12 = v2[4];
  result = swift_isUniquelyReferenced_nonNull_native();
  v2[4] = v12;
  if ((result & 1) == 0)
    goto LABEL_16;
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v12 + 16) > a1)
  {
    *(_QWORD *)(v12 + 8 * a1 + 32) = v11;
    swift_release();
    specialized Array._endMutation()();
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t LayerCakeCaptureSoundModule.updateFaders(at:)(double a1)
{
  _QWORD *v1;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  void **p_cache;
  uint64_t *v9;
  __objc2_ivar *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  __objc2_ivar *v21;
  uint64_t *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v28;

  result = swift_beginAccess();
  v4 = v1[9];
  if (v4 >> 62)
    goto LABEL_39;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    v6 = v1 + 4;
    result = swift_beginAccess();
    v7 = 0;
    p_cache = _TtC19_RealityKit_SwiftUIP33_C9AE5511A982EB3959C0C8BA03AFBA3D19RangefinderObserver.cache;
    v9 = logger;
    v10 = &stru_2506CA000;
    v28 = v1 + 4;
    while (v5 != v7)
    {
      if (v7 >= *(_QWORD *)(*v6 + 16))
        goto LABEL_37;
      v11 = *(_QWORD *)(*v6 + 8 * v7 + 32);
      if (v11)
      {
        v12 = MEMORY[0x23B7D34DC](v11 + 16);
        if (v12)
        {
          v1 = (_QWORD *)v12;
          v13 = *(double *)(v11 + 32);
          swift_retain();
          if (v13 <= a1)
          {
            if ((objc_msgSend(v1, sel_isPlaying) & 1) != 0)
            {
              v14 = (a1 - v13) / 0.3;
              if (v14 <= 1.0)
                v15 = (a1 - v13) / 0.3;
              else
                v15 = 1.0;
              if (v14 > 0.0)
                v16 = v15;
              else
                v16 = 0.0;
              *(float *)&v16 = v16;
              if (*(_BYTE *)(v11 + 24))
                *(float *)&v16 = 1.0 - *(float *)&v16;
              objc_msgSend(v1, sel_setVolume_, v16);
            }

            if (v13 + 0.3 < a1)
              *(_BYTE *)(v11 + 48) = 1;
          }
          else
          {

          }
        }
        else
        {
          swift_retain();
        }
        if (*(_BYTE *)(v11 + 48) == 1)
        {
          if (p_cache[474] != (void *)-1)
            swift_once();
          v17 = type metadata accessor for Logger();
          __swift_project_value_buffer(v17, (uint64_t)v9);
          v18 = Logger.logObject.getter();
          v19 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v18, v19))
          {
            v20 = v5;
            v21 = v10;
            v22 = v9;
            v23 = p_cache;
            v24 = swift_slowAlloc();
            *(_DWORD *)v24 = 134349056;
            *(_QWORD *)(v24 + 4) = v7;
            _os_log_impl(&dword_2355E9000, v18, v19, "Removing expired fader layer %{public}ld...", (uint8_t *)v24, 0xCu);
            v25 = v24;
            p_cache = v23;
            v9 = v22;
            v10 = v21;
            v5 = v20;
            v6 = v28;
            MEMORY[0x23B7D3428](v25, -1, -1);
          }

          v26 = (void *)MEMORY[0x23B7D34DC](v11 + 16);
          objc_msgSend(v26, (SEL)v10[77].offs);

          swift_beginAccess();
          v1 = (_QWORD *)*v6;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v6 = v1;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _ArrayBuffer._consumeAndCreateNew()();
          if (v7 >= v1[2])
            goto LABEL_38;
          v1[v7 + 4] = 0;
          swift_release();
          v1 = v6;
          specialized Array._endMutation()();
          swift_endAccess();
        }
        result = swift_release();
      }
      if (v5 == ++v7)
        return result;
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v5 < 0)
    {
      __break(1u);
      return result;
    }
  }
  return result;
}

id *LayerCakeCaptureSoundModule.deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LayerCakeCaptureSoundModule.__deallocating_deinit()
{
  LayerCakeCaptureSoundModule.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LayerCakeCaptureSoundModule()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for Fader.Direction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2356A5F60 + 4 * byte_2356C2335[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2356A5F94 + 4 * byte_2356C2330[v4]))();
}

uint64_t sub_2356A5F94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2356A5F9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2356A5FA4);
  return result;
}

uint64_t sub_2356A5FB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2356A5FB8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2356A5FBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2356A5FC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Fader.Direction()
{
  return &unk_2506BE470;
}

uint64_t storeEnumTagSinglePayload for SoundManager.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2356A602C + 4 * byte_2356C233F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2356A6060 + 4 * byte_2356C233A[v4]))();
}

uint64_t sub_2356A6060(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2356A6068(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2356A6070);
  return result;
}

uint64_t sub_2356A607C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2356A6084);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2356A6088(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2356A6090(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SoundManager.State()
{
  return &unk_2506BE500;
}

unint64_t lazy protocol witness table accessor for type SoundManager.State and conformance SoundManager.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SoundManager.State and conformance SoundManager.State;
  if (!lazy protocol witness table cache variable for type SoundManager.State and conformance SoundManager.State)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for SoundManager.State, &unk_2506BE500);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SoundManager.State and conformance SoundManager.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Fader.Direction and conformance Fader.Direction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Fader.Direction and conformance Fader.Direction;
  if (!lazy protocol witness table cache variable for type Fader.Direction and conformance Fader.Direction)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for Fader.Direction, &unk_2506BE470);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Fader.Direction and conformance Fader.Direction);
  }
  return result;
}

void protocol witness for CaptureSoundModule.loadSamples() in conformance LayerCakeCaptureSoundModule()
{
  LayerCakeCaptureSoundModule.loadSamples()();
}

void protocol witness for CaptureSoundModule.connectGraph(engine:) in conformance LayerCakeCaptureSoundModule(void *a1)
{
  LayerCakeCaptureSoundModule.connectGraph(engine:)(a1);
}

void protocol witness for CaptureSoundModule.startLoop(playStartSound:) in conformance LayerCakeCaptureSoundModule(char a1)
{
  LayerCakeCaptureSoundModule.startLoop(playStartSound:)(a1);
}

char *protocol witness for CaptureSoundModule.stopLoop(playEndSound:) in conformance LayerCakeCaptureSoundModule(char a1)
{
  return LayerCakeCaptureSoundModule.stopLoop(playEndSound:)(a1);
}

id protocol witness for CaptureSoundModule.playShutterSound(volume:) in conformance LayerCakeCaptureSoundModule(float a1)
{
  return LayerCakeCaptureSoundModule.playShutterSound(volume:)(a1);
}

id protocol witness for CaptureSoundModule.playCompletionSound(volume:) in conformance LayerCakeCaptureSoundModule(float a1)
{
  return LayerCakeCaptureSoundModule.playCompletionSound(volume:)(a1);
}

void protocol witness for CaptureSoundModule.updateGoodnessScore(_:) in conformance LayerCakeCaptureSoundModule(float a1)
{
  if (a1 <= 0.0)
    a1 = 0.0;
  if (a1 > 1.0)
    a1 = 1.0;
  LayerCakeCaptureSoundModule.adjustMixLevels(_:)(a1);
}

uint64_t protocol witness for CaptureSoundModule.update(t:) in conformance LayerCakeCaptureSoundModule(double a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = LayerCakeCaptureSoundModule.updateFaders(at:)(a1);
  *(double *)(v3 + 104) = a1;
  return result;
}

id @nonobjc AVAudioFile.init(forReading:)(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  id v14;
  NSURL *v15;

  v2 = v1;
  v15 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v15);
  v5 = v4;
  v14 = 0;
  v6 = objc_msgSend(v2, sel_initForReading_error_, v4, &v14);

  v7 = v14;
  if (v6)
  {
    v8 = type metadata accessor for URL();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x23B7D29CCLL);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t specialized static SoundManager.loadAudioFileFromBundle(named:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, uint64_t);
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  char *v38;
  void *v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t *v48;
  id v49;
  uint64_t result;
  _QWORD v51[2];
  void *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  id v60[2];

  v60[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v55 = (char *)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v51 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)v51 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v57 = (char *)v51 - v17;
  if (one-time initialization token for bundle != -1)
    swift_once();
  v18 = (void *)static SoundManager.bundle;
  v58 = a1;
  v19 = (void *)MEMORY[0x23B7D2498](a1, a2);
  v20 = (void *)MEMORY[0x23B7D2498](7758199, 0xE300000000000000);
  v21 = objc_msgSend(v18, sel_URLForResource_withExtension_, v19, v20);

  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_10;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v22(v6, v16, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_10:
    outlined destroy of URL?((uint64_t)v6);
    lazy protocol witness table accessor for type SoundManager.Error and conformance SoundManager.Error();
    swift_allocError();
    *v33 = v58;
    v33[1] = a2;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return (uint64_t)v16;
  }
  v23 = v57;
  v22(v57, v6, v7);
  if (one-time initialization token for logger != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  v25 = __swift_project_value_buffer(v24, (uint64_t)logger);
  v54 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v54(v13, v23, v7);
  swift_bridgeObjectRetain_n();
  v53 = v25;
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc();
    v52 = (void *)swift_slowAlloc();
    v60[0] = v52;
    *(_DWORD *)v28 = 136315394;
    swift_bridgeObjectRetain();
    v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, a2, (uint64_t *)v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2080;
    v51[1] = v28 + 14;
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v29 = dispatch thunk of CustomStringConvertible.description.getter();
    v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v31 = *(void (**)(char *, uint64_t))(v8 + 8);
    v31(v13, v7);
    _os_log_impl(&dword_2355E9000, v26, v27, "Got fileUrl for audio resource \"%s\" as \"%s\"", (uint8_t *)v28, 0x16u);
    v32 = v52;
    swift_arrayDestroy();
    MEMORY[0x23B7D3428](v32, -1, -1);
    MEMORY[0x23B7D3428](v28, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v31 = *(void (**)(char *, uint64_t))(v8 + 8);
    v31(v13, v7);
  }

  v35 = (uint64_t)v55;
  v34 = v56;
  v16 = v57;
  v54(v55, v57, v7);
  v36 = objc_allocWithZone(MEMORY[0x24BDB1810]);
  v37 = @nonobjc AVAudioFile.init(forReading:)(v35);
  if (v34)
  {
    v38 = v16;
LABEL_24:
    v31(v38, v7);
    return (uint64_t)v16;
  }
  v39 = v37;
  v40 = objc_msgSend(v37, sel_processingFormat);
  v41 = (unint64_t)objc_msgSend(v39, sel_length);
  if ((v41 & 0x8000000000000000) == 0)
  {
    v42 = v58;
    if (!HIDWORD(v41))
    {
      v43 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1838]), sel_initWithPCMFormat_frameCapacity_, v40, v41);
      if (v43)
      {
        v16 = v43;
        v60[0] = 0;
        if ((objc_msgSend(v39, sel_readIntoBuffer_error_, v43, v60) & 1) != 0)
        {
          v44 = v60[0];
          v31(v57, v7);

          return (uint64_t)v16;
        }
        v49 = v60[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
      else
      {
        v45 = Logger.logObject.getter();
        v46 = static os_log_type_t.error.getter();
        v16 = (char *)v46;
        if (os_log_type_enabled(v45, v46))
        {
          v47 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v47 = 0;
          _os_log_impl(&dword_2355E9000, v45, (os_log_type_t)v16, "Can't create audio buffer!", v47, 2u);
          MEMORY[0x23B7D3428](v47, -1, -1);
        }

        lazy protocol witness table accessor for type SoundManager.Error and conformance SoundManager.Error();
        swift_allocError();
        *v48 = v42;
        v48[1] = a2;
        swift_bridgeObjectRetain();
        swift_willThrow();

      }
      v38 = v57;
      goto LABEL_24;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized SoundManager.handleEngineConfigChange(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = type metadata accessor for Notification();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v14 = v10;
    *(_DWORD *)v9 = 136446210;
    lazy protocol witness table accessor for type CHHapticPatternKey and conformance CHHapticPatternKey(&lazy protocol witness table cache variable for type Notification and conformance Notification, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB930], MEMORY[0x24BDCB950]);
    v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_2355E9000, v7, v8, ">> Received audio engine config change: %{public}s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7D3428](v10, -1, -1);
    MEMORY[0x23B7D3428](v9, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

}

id specialized FilterPipeCaptureSoundModule.startLoop(playStartSound:)()
{
  _QWORD *v0;
  id result;
  uint64_t v2;
  uint64_t v3;
  double v4;

  result = (id)v0[2];
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  v2 = v0[11];
  if (!v2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v2, 0, 0, 0);
  result = (id)v0[2];
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v3 = v0[12];
  if (!v3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(result, sel_scheduleBuffer_atTime_options_completionHandler_, v3, 0, 1, 0);
  result = (id)v0[2];
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  LODWORD(v4) = 1.0;
  objc_msgSend(result, sel_setVolume_, v4);
  result = (id)v0[2];
  if (result)
    return objc_msgSend(result, sel_play);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SoundManager.Error and conformance SoundManager.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SoundManager.Error and conformance SoundManager.Error;
  if (!lazy protocol witness table cache variable for type SoundManager.Error and conformance SoundManager.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for SoundManager.Error, &type metadata for SoundManager.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SoundManager.Error and conformance SoundManager.Error);
  }
  return result;
}

uint64_t sub_2356A6E18()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SoundManager.updateGoodnessScore(_:)()
{
  uint64_t v0;

  return closure #1 in SoundManager.updateGoodnessScore(_:)(*(float *)(v0 + 24));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

void partial apply for closure #1 in SoundManager.playCompletionSound(volume:)()
{
  uint64_t v0;

  closure #1 in SoundManager.playCompletionSound(volume:)(*(float *)(v0 + 24));
}

uint64_t sub_2356A6E6C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in SoundManager.playShutterSound(volume:)()
{
  uint64_t v0;

  closure #1 in SoundManager.playShutterSound(volume:)(*(float *)(v0 + 24));
}

uint64_t sub_2356A6E9C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in SoundManager.stopLoop(playEndSound:)()
{
  uint64_t v0;

  closure #1 in SoundManager.stopLoop(playEndSound:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void partial apply for closure #1 in SoundManager.startLoop(playStartSound:)()
{
  uint64_t v0;

  closure #1 in SoundManager.startLoop(playStartSound:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_2356A6ED8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SoundManager.update(t:)()
{
  uint64_t v0;

  return closure #1 in SoundManager.update(t:)(*(double *)(v0 + 24));
}

uint64_t partial apply for closure #1 in SoundManager.requestStandby(after:)()
{
  uint64_t v0;

  return closure #1 in SoundManager.requestStandby(after:)(*(double *)(v0 + 24));
}

void partial apply for closure #1 in closure #1 in SoundManager.requestStandby(after:)()
{
  uint64_t v0;

  closure #1 in closure #1 in SoundManager.requestStandby(after:)(v0);
}

uint64_t partial apply for closure #1 in SoundManager.start()()
{
  return closure #1 in SoundManager.start()();
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B7D3350](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SoundManager.Error()
{
  return &type metadata for SoundManager.Error;
}

uint64_t type metadata completion function for StackableMiniView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StackableMiniView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 24) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    v12 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v16(v14, v15, v4);
    *(_QWORD *)((v7 + v14) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v7 + v15) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for StackableMiniView(uint64_t a1, uint64_t a2)
{
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for StackableMiniView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v5 + v9 + 8) & ~v9;
  v11 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  v12(v10, v11, v7);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v10) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithCopy for StackableMiniView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 8) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v10, v11);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v10) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *initializeWithTake for StackableMiniView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for StackableMiniView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v7 + v10 + 8) & ~v10;
  v12 = ((unint64_t)v8 + v10 + 8) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v11, v12);
  *(_QWORD *)((*(_QWORD *)(v9 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v9 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackableMiniView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 24) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_2356A74C0 + 4 * byte_2356C2660[v10]))();
  }
}

void storeEnumTagSinglePayload for StackableMiniView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 24) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 24) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 24) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_2356A7650()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2356A76C4);
}

void sub_2356A7658(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2356A7660);
  JUMPOUT(0x2356A76C4);
}

void sub_2356A7674()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2356A76C4);
}

void sub_2356A767C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2356A76C4);
}

void sub_2356A7684(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x2356A7690);
    if (a2 < 0)
      JUMPOUT(0x2356A76BCLL);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x2356A76C4);
}

uint64_t type metadata accessor for StackableMiniView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StackableMiniView);
}

uint64_t associated type witness table accessor for View.Body : View in StackableMiniView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t StackableMiniView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD v28[4];
  _QWORD v29[2];

  v23 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for ModifiedContent();
  v21 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v20 - v6;
  v8 = type metadata accessor for ModifiedContent();
  v22 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - v9;
  static Alignment.center.getter();
  v11 = *(_QWORD *)(a1 + 24);
  View.frame(width:height:alignment:)();
  v29[0] = v11;
  v29[1] = MEMORY[0x24BDEBEE0];
  v12 = MEMORY[0x24BDED308];
  v13 = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v5, v29);
  View.fixedSize()();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  v28[3] = 0;
  Transaction.disablesAnimations.setter();
  v24 = v4;
  v25 = v11;
  v26 = v2;
  v27 = v10;
  v28[0] = v13;
  v28[1] = MEMORY[0x24BDEDB80];
  swift_retain();
  v14 = MEMORY[0x23B7D3350](v12, v8, v28);
  type metadata accessor for BottomCenterView(255, v8, v14, v15);
  type metadata accessor for TopCenterView(255, v8, v14, v16);
  type metadata accessor for _ConditionalContent();
  type metadata accessor for LeftCenterView(255, v8, v14, v17);
  type metadata accessor for RightCenterView(255, v8, v14, v18);
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  withTransaction<A>(_:_:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, v8);
}

uint64_t closure #1 in StackableMiniView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];

  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  v29[0] = a4;
  v29[1] = MEMORY[0x24BDEBEE0];
  v7 = MEMORY[0x24BDED308];
  v28[0] = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v5, v29);
  v28[1] = MEMORY[0x24BDEDB80];
  v8 = MEMORY[0x23B7D3350](v7, v6, v28);
  v10 = type metadata accessor for BottomCenterView(255, v6, v8, v9);
  v12 = type metadata accessor for TopCenterView(255, v6, v8, v11);
  v13 = type metadata accessor for _ConditionalContent();
  v15 = type metadata accessor for LeftCenterView(255, v6, v8, v14);
  v17 = type metadata accessor for RightCenterView(255, v6, v8, v16);
  v18 = type metadata accessor for _ConditionalContent();
  v19 = type metadata accessor for _ConditionalContent();
  v20 = type metadata accessor for _ConditionalContent();
  v27[0] = MEMORY[0x23B7D3350](&protocol conformance descriptor for BottomCenterView<A>, v10);
  v27[1] = MEMORY[0x23B7D3350](&protocol conformance descriptor for TopCenterView<A>, v12);
  v21 = MEMORY[0x24BDEF3E0];
  v22 = MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v13, v27);
  v26[0] = MEMORY[0x23B7D3350](&protocol conformance descriptor for LeftCenterView<A>, v15);
  v26[1] = MEMORY[0x23B7D3350](&protocol conformance descriptor for RightCenterView<A>, v17);
  v25[0] = v22;
  v25[1] = MEMORY[0x23B7D3350](v21, v18, v26);
  v24[0] = MEMORY[0x23B7D3350](v21, v19, v25);
  v24[1] = MEMORY[0x24BDF1F80];
  MEMORY[0x23B7D3350](v21, v20, v24);
  return Group<A>.init(content:)();
}

uint64_t closure #1 in closure #1 in StackableMiniView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD v183[2];
  _QWORD v184[2];
  _QWORD v185[2];
  _QWORD v186[2];
  _QWORD v187[2];
  _QWORD v188[2];
  _QWORD v189[2];
  _QWORD v190[2];
  _QWORD v191[2];
  _QWORD v192[2];
  _QWORD v193[2];
  _QWORD v194[2];
  _QWORD v195[2];
  _QWORD v196[2];
  _QWORD v197[2];
  _QWORD v198[2];
  __int128 v199;
  uint64_t v200;
  __int16 v201;
  _QWORD v202[2];
  _QWORD v203[2];
  _QWORD v204[2];
  _QWORD v205[2];
  __int128 v206;
  uint64_t v207;
  _QWORD v208[2];
  _QWORD v209[2];
  _QWORD v210[2];
  _QWORD v211[2];
  _QWORD v212[2];
  _QWORD v213[2];
  _QWORD v214[2];
  _QWORD v215[2];
  _QWORD v216[2];
  _QWORD v217[2];
  _QWORD v218[2];
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  char v224;

  v179 = a5;
  v9 = type metadata accessor for ModifiedContent();
  v182 = type metadata accessor for ModifiedContent();
  v10 = *(_QWORD *)(v182 - 8);
  MEMORY[0x24BDAC7A8](v182);
  *(_QWORD *)&v178 = (char *)&v175 - v12;
  v13 = *(void **)(*(_QWORD *)(a1 + 8) + 16);
  v14 = MEMORY[0x24BDEDB80];
  v180 = a4;
  v181 = v9;
  if (v13)
  {
    v15 = v9;
    v16 = v13;
    dispatch thunk of ARView.__interfaceOrientation.getter();

    v17 = v15;
    v14 = MEMORY[0x24BDEDB80];
    switch(a2)
    {
      case 0:
      case 1:
        break;
      case 2:
        v71 = a4;
        v72 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for StackableMiniView(0, a3, a4, v11) + 44));
        v73 = v178;
        v74 = v71;
        v75 = v14;
        v76 = v182;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v10 + 16))(v178, a2, v182);
        v77 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        v78 = swift_allocObject();
        *(_QWORD *)(v78 + 16) = a3;
        *(_QWORD *)(v78 + 24) = v74;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))(v78 + v77, v73, v76);
        v192[0] = v74;
        v192[1] = MEMORY[0x24BDEBEE0];
        v79 = MEMORY[0x24BDED308];
        v191[0] = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v181, v192);
        v191[1] = v75;
        v80 = MEMORY[0x23B7D3350](v79, v76, v191);
        *(_QWORD *)&v222 = partial apply for closure #4 in closure #1 in closure #1 in StackableMiniView.body.getter;
        *((_QWORD *)&v222 + 1) = v78;
        *(_QWORD *)&v223 = v72;
        v82 = type metadata accessor for TopCenterView(0, v76, v80, v81);
        v83 = MEMORY[0x23B7D3350](&protocol conformance descriptor for TopCenterView<A>, v82);
        static ViewBuilder.buildExpression<A>(_:)(&v222, v82, v83);
        swift_release();
        *(_QWORD *)&v178 = *((_QWORD *)&v206 + 1);
        v222 = v206;
        *(_QWORD *)&v223 = v207;
        static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v222, v82, (uint64_t)&v219);
        v199 = v219;
        v200 = v220;
        v85 = type metadata accessor for BottomCenterView(0, v76, v80, v84);
        v86 = MEMORY[0x23B7D3350](&protocol conformance descriptor for BottomCenterView<A>, v85);
        static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v199, v85, v82);
        swift_release();
        v176 = *((_QWORD *)&v222 + 1);
        *(_QWORD *)&v177 = v222;
        v199 = v222;
        v200 = v223;
        LOBYTE(v201) = BYTE8(v223);
        v87 = type metadata accessor for _ConditionalContent();
        v89 = type metadata accessor for LeftCenterView(255, v76, v80, v88);
        v91 = type metadata accessor for RightCenterView(255, v76, v80, v90);
        v92 = type metadata accessor for _ConditionalContent();
        v190[0] = v86;
        v190[1] = v83;
        v93 = MEMORY[0x24BDEF3E0];
        v94 = MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v87, v190);
        v95 = MEMORY[0x23B7D3350](&protocol conformance descriptor for LeftCenterView<A>, v89);
        v96 = MEMORY[0x23B7D3350](&protocol conformance descriptor for RightCenterView<A>, v91);
        v189[0] = v95;
        v189[1] = v96;
        v97 = MEMORY[0x23B7D3350](v93, v92, v189);
        static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v199, v87);
        outlined consume of StateObject<_RealityViewCameraModel>.Storage();
        v199 = v219;
        v200 = v220;
        v201 = v221;
        v98 = type metadata accessor for _ConditionalContent();
        v188[0] = v94;
        v188[1] = v97;
        MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v98, v188);
        static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v199, v98);
        goto LABEL_10;
      case 3:
        v99 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for StackableMiniView(0, a3, a4, v11) + 44));
        v100 = v178;
        v101 = v182;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v10 + 16))(v178, a2, v182);
        v102 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        v103 = swift_allocObject();
        *(_QWORD *)(v103 + 16) = a3;
        v104 = v180;
        *(_QWORD *)(v103 + 24) = v180;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))(v103 + v102, v100, v101);
        v205[0] = v104;
        v205[1] = MEMORY[0x24BDEBEE0];
        v105 = MEMORY[0x24BDED308];
        v204[0] = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v17, v205);
        v204[1] = v14;
        v106 = MEMORY[0x23B7D3350](v105, v101, v204);
        *(_QWORD *)&v222 = partial apply for closure #4 in closure #1 in closure #1 in StackableMiniView.body.getter;
        *((_QWORD *)&v222 + 1) = v103;
        *(_QWORD *)&v223 = v99;
        v108 = type metadata accessor for RightCenterView(0, v101, v106, v107);
        v109 = MEMORY[0x23B7D3350](&protocol conformance descriptor for RightCenterView<A>, v108);
        static ViewBuilder.buildExpression<A>(_:)(&v222, v108, v109);
        swift_release();
        *(_QWORD *)&v178 = *((_QWORD *)&v206 + 1);
        v222 = v206;
        *(_QWORD *)&v223 = v207;
        static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v222, v108, (uint64_t)&v219);
        v199 = v219;
        v200 = v220;
        v111 = type metadata accessor for LeftCenterView(0, v101, v106, v110);
        v112 = MEMORY[0x23B7D3350](&protocol conformance descriptor for LeftCenterView<A>, v111);
        static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v199, v111, v108);
        swift_release();
        v176 = v223;
        *(_QWORD *)&v177 = v222;
        HIDWORD(v175) = BYTE8(v223);
        v199 = v222;
        v200 = v223;
        LOBYTE(v201) = BYTE8(v223);
        v114 = type metadata accessor for BottomCenterView(255, v101, v106, v113);
        v116 = type metadata accessor for TopCenterView(255, v101, v106, v115);
        v117 = type metadata accessor for _ConditionalContent();
        v118 = type metadata accessor for _ConditionalContent();
        v119 = MEMORY[0x23B7D3350](&protocol conformance descriptor for BottomCenterView<A>, v114);
        v120 = MEMORY[0x23B7D3350](&protocol conformance descriptor for TopCenterView<A>, v116);
        v203[0] = v119;
        v203[1] = v120;
        v121 = MEMORY[0x24BDEF3E0];
        v122 = MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v117, v203);
        v202[0] = v112;
        v202[1] = v109;
        v123 = MEMORY[0x23B7D3350](v121, v118, v202);
        static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v199, v117, v118);
        outlined consume of StateObject<_RealityViewCameraModel>.Storage();
        v199 = v219;
        v200 = v220;
        v201 = v221;
        v124 = type metadata accessor for _ConditionalContent();
        v198[0] = v122;
        v198[1] = v123;
        v125 = v198;
        goto LABEL_9;
      case 4:
        v126 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for StackableMiniView(0, a3, a4, v11) + 44));
        v127 = v178;
        v128 = v182;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v10 + 16))(v178, a2, v182);
        v129 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        v130 = swift_allocObject();
        *(_QWORD *)(v130 + 16) = a3;
        v131 = v180;
        *(_QWORD *)(v130 + 24) = v180;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))(v130 + v129, v127, v128);
        v197[0] = v131;
        v197[1] = MEMORY[0x24BDEBEE0];
        v132 = MEMORY[0x24BDED308];
        v196[0] = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v17, v197);
        v196[1] = v14;
        v133 = MEMORY[0x23B7D3350](v132, v128, v196);
        *(_QWORD *)&v222 = partial apply for closure #4 in closure #1 in closure #1 in StackableMiniView.body.getter;
        *((_QWORD *)&v222 + 1) = v130;
        *(_QWORD *)&v223 = v126;
        v135 = type metadata accessor for LeftCenterView(0, v128, v133, v134);
        v136 = MEMORY[0x23B7D3350](&protocol conformance descriptor for LeftCenterView<A>, v135);
        static ViewBuilder.buildExpression<A>(_:)(&v222, v135, v136);
        swift_release();
        *(_QWORD *)&v178 = *((_QWORD *)&v206 + 1);
        v222 = v206;
        *(_QWORD *)&v223 = v207;
        static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v222, v135, (uint64_t)&v219);
        v199 = v219;
        v200 = v220;
        v138 = type metadata accessor for RightCenterView(0, v128, v133, v137);
        v139 = MEMORY[0x23B7D3350](&protocol conformance descriptor for RightCenterView<A>, v138);
        static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v199, v135);
        swift_release();
        v176 = *((_QWORD *)&v222 + 1);
        *(_QWORD *)&v177 = v222;
        HIDWORD(v175) = BYTE8(v223);
        v199 = v222;
        v200 = v223;
        LOBYTE(v201) = BYTE8(v223);
        v141 = type metadata accessor for BottomCenterView(255, v128, v133, v140);
        v143 = type metadata accessor for TopCenterView(255, v128, v133, v142);
        v144 = type metadata accessor for _ConditionalContent();
        v145 = type metadata accessor for _ConditionalContent();
        v146 = MEMORY[0x23B7D3350](&protocol conformance descriptor for BottomCenterView<A>, v141);
        v147 = MEMORY[0x23B7D3350](&protocol conformance descriptor for TopCenterView<A>, v143);
        v195[0] = v146;
        v195[1] = v147;
        v148 = MEMORY[0x24BDEF3E0];
        v149 = MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v144, v195);
        v194[0] = v136;
        v194[1] = v139;
        v150 = MEMORY[0x23B7D3350](v148, v145, v194);
        static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v199, v144, v145);
        outlined consume of StateObject<_RealityViewCameraModel>.Storage();
        v199 = v219;
        v200 = v220;
        v201 = v221;
        v124 = type metadata accessor for _ConditionalContent();
        v193[0] = v149;
        v193[1] = v150;
        v125 = v193;
LABEL_9:
        MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v124, v125);
        static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v199, v124);
        goto LABEL_10;
      default:
        LocalizedStringKey.init(stringLiteral:)();
        *(_QWORD *)&v177 = Text.init(_:tableName:bundle:comment:)();
        v46 = v45;
        *(_QWORD *)&v178 = v47;
        *(_QWORD *)&v219 = v177;
        *((_QWORD *)&v219 + 1) = v45;
        v49 = v48 & 1;
        LOBYTE(v220) = v48 & 1;
        v221 = v47;
        v218[0] = a4;
        v218[1] = MEMORY[0x24BDEBEE0];
        v50 = MEMORY[0x24BDED308];
        v217[0] = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v14, v218);
        v217[1] = MEMORY[0x24BDEDB80];
        v51 = v182;
        v52 = MEMORY[0x23B7D3350](v50, v182, v217);
        v54 = type metadata accessor for BottomCenterView(255, v51, v52, v53);
        v56 = type metadata accessor for TopCenterView(255, v51, v52, v55);
        v57 = type metadata accessor for _ConditionalContent();
        v59 = type metadata accessor for LeftCenterView(255, v51, v52, v58);
        v61 = type metadata accessor for RightCenterView(255, v51, v52, v60);
        v62 = type metadata accessor for _ConditionalContent();
        v63 = type metadata accessor for _ConditionalContent();
        v64 = MEMORY[0x23B7D3350](&protocol conformance descriptor for BottomCenterView<A>, v54);
        v65 = MEMORY[0x23B7D3350](&protocol conformance descriptor for TopCenterView<A>, v56);
        v216[0] = v64;
        v216[1] = v65;
        v66 = MEMORY[0x24BDEF3E0];
        v67 = MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v57, v216);
        v68 = MEMORY[0x23B7D3350](&protocol conformance descriptor for LeftCenterView<A>, v59);
        v69 = MEMORY[0x23B7D3350](&protocol conformance descriptor for RightCenterView<A>, v61);
        v215[0] = v68;
        v215[1] = v69;
        v70 = MEMORY[0x23B7D3350](v66, v62, v215);
        v214[0] = v67;
        v214[1] = v70;
        MEMORY[0x23B7D3350](v66, v63, v214);
        static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v219, v63, MEMORY[0x24BDF1FA8]);
        outlined consume of Text.Storage(v177, v46, v49);
        swift_bridgeObjectRelease();
        goto LABEL_11;
    }
  }
  v18 = a4;
  v19 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for StackableMiniView(0, a3, a4, v11) + 44));
  v20 = v178;
  v21 = v14;
  v22 = v182;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v10 + 16))(v178, a2, v182);
  v23 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a3;
  *(_QWORD *)(v24 + 24) = v18;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))(v24 + v23, v20, v22);
  v187[0] = v18;
  v187[1] = MEMORY[0x24BDEBEE0];
  v25 = MEMORY[0x24BDED308];
  v186[0] = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v181, v187);
  v186[1] = v21;
  v26 = MEMORY[0x23B7D3350](v25, v22, v186);
  *(_QWORD *)&v222 = partial apply for closure #4 in closure #1 in closure #1 in StackableMiniView.body.getter;
  *((_QWORD *)&v222 + 1) = v24;
  *(_QWORD *)&v223 = v19;
  v28 = type metadata accessor for BottomCenterView(0, v22, v26, v27);
  v29 = MEMORY[0x23B7D3350](&protocol conformance descriptor for BottomCenterView<A>, v28);
  static ViewBuilder.buildExpression<A>(_:)(&v222, v28, v29);
  swift_release();
  *(_QWORD *)&v178 = *((_QWORD *)&v206 + 1);
  v222 = v206;
  *(_QWORD *)&v223 = v207;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v222, v28, (uint64_t)&v219);
  v199 = v219;
  v200 = v220;
  v31 = type metadata accessor for TopCenterView(0, v22, v26, v30);
  v32 = MEMORY[0x23B7D3350](&protocol conformance descriptor for TopCenterView<A>, v31);
  static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v199, v28);
  swift_release();
  LODWORD(v177) = BYTE8(v223);
  v199 = v222;
  v200 = v223;
  LOBYTE(v201) = BYTE8(v223);
  v33 = type metadata accessor for _ConditionalContent();
  v35 = type metadata accessor for LeftCenterView(255, v22, v26, v34);
  v37 = type metadata accessor for RightCenterView(255, v22, v26, v36);
  v38 = type metadata accessor for _ConditionalContent();
  v185[0] = v29;
  v185[1] = v32;
  v39 = MEMORY[0x24BDEF3E0];
  v40 = MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v33, v185);
  v41 = MEMORY[0x23B7D3350](&protocol conformance descriptor for LeftCenterView<A>, v35);
  v42 = MEMORY[0x23B7D3350](&protocol conformance descriptor for RightCenterView<A>, v37);
  v184[0] = v41;
  v184[1] = v42;
  v43 = MEMORY[0x23B7D3350](v39, v38, v184);
  static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v199, v33);
  outlined consume of StateObject<_RealityViewCameraModel>.Storage();
  v199 = v219;
  v200 = v220;
  v201 = v221;
  v44 = type metadata accessor for _ConditionalContent();
  v183[0] = v40;
  v183[1] = v43;
  MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v44, v183);
  static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v199, v44);
LABEL_10:
  outlined consume of _ConditionalContent<_ConditionalContent<BottomCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, TopCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>, _ConditionalContent<LeftCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, RightCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>>.Storage<A>();
  swift_release();
LABEL_11:
  v151 = v224;
  v177 = v222;
  v178 = v223;
  v213[0] = v180;
  v213[1] = MEMORY[0x24BDEBEE0];
  v152 = MEMORY[0x24BDED308];
  v212[0] = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v181, v213);
  v212[1] = MEMORY[0x24BDEDB80];
  v153 = v182;
  v154 = MEMORY[0x23B7D3350](v152, v182, v212);
  v156 = type metadata accessor for BottomCenterView(255, v153, v154, v155);
  v158 = type metadata accessor for TopCenterView(255, v153, v154, v157);
  v159 = type metadata accessor for _ConditionalContent();
  v161 = type metadata accessor for LeftCenterView(255, v153, v154, v160);
  v163 = type metadata accessor for RightCenterView(255, v153, v154, v162);
  v164 = type metadata accessor for _ConditionalContent();
  v165 = type metadata accessor for _ConditionalContent();
  v166 = type metadata accessor for _ConditionalContent();
  v167 = MEMORY[0x23B7D3350](&protocol conformance descriptor for BottomCenterView<A>, v156);
  v168 = MEMORY[0x23B7D3350](&protocol conformance descriptor for TopCenterView<A>, v158);
  v211[0] = v167;
  v211[1] = v168;
  v169 = MEMORY[0x24BDEF3E0];
  v170 = MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v159, v211);
  v171 = MEMORY[0x23B7D3350](&protocol conformance descriptor for LeftCenterView<A>, v161);
  v172 = MEMORY[0x23B7D3350](&protocol conformance descriptor for RightCenterView<A>, v163);
  v210[0] = v171;
  v210[1] = v172;
  v173 = MEMORY[0x23B7D3350](v169, v164, v210);
  v209[0] = v170;
  v209[1] = v173;
  v208[0] = MEMORY[0x23B7D3350](v169, v165, v209);
  v208[1] = MEMORY[0x24BDF1F80];
  MEMORY[0x23B7D3350](v169, v166, v208);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v222, v166, v179);
  return outlined consume of _ConditionalContent<_ConditionalContent<_ConditionalContent<BottomCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, TopCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>, _ConditionalContent<LeftCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, RightCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>>, Text>.Storage<A>(v177, *((uint64_t *)&v177 + 1), v178, *((uint64_t *)&v178 + 1), v151);
}

uint64_t closure #2 in closure #1 in closure #1 in StackableMiniView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[2];

  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v14 - v9;
  v15[0] = a2;
  v15[1] = MEMORY[0x24BDEBEE0];
  v11 = MEMORY[0x24BDED308];
  v14[0] = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v6, v15);
  v14[1] = MEMORY[0x24BDEDB80];
  v12 = MEMORY[0x23B7D3350](v11, v7, v14);
  static ViewBuilder.buildExpression<A>(_:)(a1, v7, v12);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, v7, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t partial apply for closure #1 in StackableMiniView.body.getter()
{
  uint64_t *v0;

  return closure #1 in StackableMiniView.body.getter(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t type metadata accessor for BottomCenterView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BottomCenterView);
}

uint64_t type metadata accessor for TopCenterView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TopCenterView);
}

uint64_t type metadata accessor for LeftCenterView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LeftCenterView);
}

uint64_t type metadata accessor for RightCenterView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RightCenterView);
}

uint64_t partial apply for closure #1 in closure #1 in StackableMiniView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in closure #1 in StackableMiniView.body.getter(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t outlined consume of _ConditionalContent<_ConditionalContent<_ConditionalContent<BottomCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, TopCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>, _ConditionalContent<LeftCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, RightCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>>, Text>.Storage<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return outlined consume of _ConditionalContent<_ConditionalContent<BottomCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, TopCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>, _ConditionalContent<LeftCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, RightCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>>.Storage<A>();
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of _ConditionalContent<_ConditionalContent<BottomCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, TopCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>, _ConditionalContent<LeftCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>, RightCenterView<ModifiedContent<ModifiedContent<A, _FrameLayout>, _FixedSizeLayout>>>>.Storage<A>()
{
  return outlined consume of StateObject<_RealityViewCameraModel>.Storage();
}

uint64_t partial apply for closure #4 in closure #1 in closure #1 in StackableMiniView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 24);
  type metadata accessor for ModifiedContent();
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ModifiedContent() - 8) + 80);
  return closure #2 in closure #1 in closure #1 in StackableMiniView.body.getter(v1 + ((v4 + 32) & ~v4), v3, a1);
}

uint64_t objectdestroyTm_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  type metadata accessor for ModifiedContent();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ModifiedContent() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);
  return swift_deallocObject();
}

uint64_t assignWithTake for TopCenterView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for RightCenterView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for RightCenterView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

uint64_t sub_2356A90A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  v28[0] = v1;
  v28[1] = MEMORY[0x24BDEBEE0];
  v4 = MEMORY[0x24BDED308];
  v27[0] = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v2, v28);
  v27[1] = MEMORY[0x24BDEDB80];
  v5 = MEMORY[0x23B7D3350](v4, v3, v27);
  v7 = type metadata accessor for BottomCenterView(255, v3, v5, v6);
  v9 = type metadata accessor for TopCenterView(255, v3, v5, v8);
  v10 = type metadata accessor for _ConditionalContent();
  v12 = type metadata accessor for LeftCenterView(255, v3, v5, v11);
  v14 = type metadata accessor for RightCenterView(255, v3, v5, v13);
  v15 = type metadata accessor for _ConditionalContent();
  v16 = type metadata accessor for _ConditionalContent();
  v17 = type metadata accessor for _ConditionalContent();
  v18 = type metadata accessor for Group();
  v26[0] = MEMORY[0x23B7D3350](&protocol conformance descriptor for BottomCenterView<A>, v7);
  v26[1] = MEMORY[0x23B7D3350](&protocol conformance descriptor for TopCenterView<A>, v9);
  v19 = MEMORY[0x24BDEF3E0];
  v20 = MEMORY[0x23B7D3350](MEMORY[0x24BDEF3E0], v10, v26);
  v25[0] = MEMORY[0x23B7D3350](&protocol conformance descriptor for LeftCenterView<A>, v12);
  v25[1] = MEMORY[0x23B7D3350](&protocol conformance descriptor for RightCenterView<A>, v14);
  v24[0] = v20;
  v24[1] = MEMORY[0x23B7D3350](v19, v15, v25);
  v23[0] = MEMORY[0x23B7D3350](v19, v16, v24);
  v23[1] = MEMORY[0x24BDF1F80];
  v22 = MEMORY[0x23B7D3350](v19, v17, v23);
  return MEMORY[0x23B7D3350](MEMORY[0x24BDF3F50], v18, &v22);
}

uint64_t associated type witness table accessor for View.Body : View in RightCenterView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t RightCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;

  v25 = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v11 = type metadata accessor for TupleView();
  v12 = MEMORY[0x24BDF5428];
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v11);
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata3();
  v13 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](v12, v13);
  v14 = type metadata accessor for VStack();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - v19;
  v26 = a3;
  v27 = a4;
  v28 = a1;
  v29 = a2;
  v30 = a6;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  v21 = MEMORY[0x23B7D3350](MEMORY[0x24BDF4700], v14);
  static ViewBuilder.buildExpression<A>(_:)(v18, v14, v21);
  v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v18, v14);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v14, v25);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v14);
}

uint64_t closure #1 in RightCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  _QWORD v22[13];
  _QWORD v23[3];
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28[4];

  v22[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v11 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v11);
  v12 = type metadata accessor for HStack();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v22 - v17;
  v22[4] = a3;
  v22[5] = a4;
  v22[6] = a1;
  v22[7] = a2;
  *(double *)&v22[8] = a6;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  v19 = MEMORY[0x23B7D3350](MEMORY[0x24BDF4498], v12);
  static ViewBuilder.buildExpression<A>(_:)(v16, v12, v19);
  v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v16, v12);
  v26 = 0;
  v27 = 1;
  v28[0] = (uint64_t)&v26;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  v24 = 0;
  v25 = 1;
  v28[1] = (uint64_t)v16;
  v28[2] = (uint64_t)&v24;
  v23[0] = MEMORY[0x24BDF4638];
  v23[1] = v12;
  v23[2] = MEMORY[0x24BDF4638];
  v22[10] = MEMORY[0x24BDF4610];
  v22[11] = v19;
  v22[12] = MEMORY[0x24BDF4610];
  static ViewBuilder.buildBlock<each A>(_:)(v28, 3uLL, (uint64_t)v23);
  v20(v18, v12);
  return ((uint64_t (*)(char *, uint64_t))v20)(v16, v12);
}

uint64_t closure #1 in closure #1 in RightCenterView.body.getter@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  char v34;
  uint64_t v35[2];
  _QWORD v36[2];
  _QWORD v37[2];

  v26 = a1;
  v29 = a4;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ModifiedContent();
  v27 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - v10;
  v12 = type metadata accessor for ModifiedContent();
  v28 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v26 - v17;
  v26(v16);
  static Edge.Set.trailing.getter();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  static Edge.Set.trailing.getter();
  v19 = MEMORY[0x24BDECC60];
  v37[0] = a3;
  v37[1] = MEMORY[0x24BDECC60];
  v20 = MEMORY[0x24BDED308];
  v21 = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v9, v37);
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  v36[0] = v21;
  v36[1] = v19;
  v22 = MEMORY[0x23B7D3350](v20, v12, v36);
  static ViewBuilder.buildExpression<A>(_:)(v15, v12, v22);
  v23 = v28;
  v24 = *(void (**)(char *, uint64_t))(v28 + 8);
  v24(v15, v12);
  v33 = 0;
  v34 = 1;
  v35[0] = (uint64_t)&v33;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v15, v18, v12);
  v35[1] = (uint64_t)v15;
  v32[0] = MEMORY[0x24BDF4638];
  v32[1] = v12;
  v30 = MEMORY[0x24BDF4610];
  v31 = v22;
  static ViewBuilder.buildBlock<each A>(_:)(v35, 2uLL, (uint64_t)v32);
  v24(v18, v12);
  return ((uint64_t (*)(char *, uint64_t))v24)(v15, v12);
}

uint64_t protocol witness for View.body.getter in conformance RightCenterView<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance RightCenterView<A>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))RightCenterView.body.getter);
}

uint64_t associated type witness table accessor for View.Body : View in LeftCenterView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t LeftCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;

  v25 = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v11 = type metadata accessor for TupleView();
  v12 = MEMORY[0x24BDF5428];
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v11);
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata3();
  v13 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](v12, v13);
  v14 = type metadata accessor for VStack();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - v19;
  v26 = a3;
  v27 = a4;
  v28 = a1;
  v29 = a2;
  v30 = a6;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  v21 = MEMORY[0x23B7D3350](MEMORY[0x24BDF4700], v14);
  static ViewBuilder.buildExpression<A>(_:)(v18, v14, v21);
  v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v18, v14);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v14, v25);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v14);
}

uint64_t closure #1 in LeftCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  _QWORD v22[13];
  _QWORD v23[3];
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28[4];

  v22[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v11 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v11);
  v12 = type metadata accessor for HStack();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v22 - v17;
  v22[4] = a3;
  v22[5] = a4;
  v22[6] = a1;
  v22[7] = a2;
  *(double *)&v22[8] = a6;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  v19 = MEMORY[0x23B7D3350](MEMORY[0x24BDF4498], v12);
  static ViewBuilder.buildExpression<A>(_:)(v16, v12, v19);
  v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v16, v12);
  v26 = 0;
  v27 = 1;
  v28[0] = (uint64_t)&v26;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  v24 = 0;
  v25 = 1;
  v28[1] = (uint64_t)v16;
  v28[2] = (uint64_t)&v24;
  v23[0] = MEMORY[0x24BDF4638];
  v23[1] = v12;
  v23[2] = MEMORY[0x24BDF4638];
  v22[10] = MEMORY[0x24BDF4610];
  v22[11] = v19;
  v22[12] = MEMORY[0x24BDF4610];
  static ViewBuilder.buildBlock<each A>(_:)(v28, 3uLL, (uint64_t)v23);
  v20(v18, v12);
  return ((uint64_t (*)(char *, uint64_t))v20)(v16, v12);
}

uint64_t closure #1 in closure #1 in LeftCenterView.body.getter@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  char v34;
  uint64_t v35[2];
  _QWORD v36[2];
  _QWORD v37[2];

  v26 = a1;
  v29 = a4;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ModifiedContent();
  v27 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - v10;
  v12 = type metadata accessor for ModifiedContent();
  v28 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v26 - v17;
  v26(v16);
  static Edge.Set.leading.getter();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  static Edge.Set.leading.getter();
  v19 = MEMORY[0x24BDECC60];
  v37[0] = a3;
  v37[1] = MEMORY[0x24BDECC60];
  v20 = MEMORY[0x24BDED308];
  v21 = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v9, v37);
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  v36[0] = v21;
  v36[1] = v19;
  v22 = MEMORY[0x23B7D3350](v20, v12, v36);
  static ViewBuilder.buildExpression<A>(_:)(v15, v12, v22);
  v23 = v28;
  v24 = *(void (**)(char *, uint64_t))(v28 + 8);
  v24(v15, v12);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v15, v18, v12);
  v33 = 0;
  v34 = 1;
  v35[0] = (uint64_t)v15;
  v35[1] = (uint64_t)&v33;
  v32[0] = v12;
  v32[1] = MEMORY[0x24BDF4638];
  v30 = v22;
  v31 = MEMORY[0x24BDF4610];
  static ViewBuilder.buildBlock<each A>(_:)(v35, 2uLL, (uint64_t)v32);
  v24(v18, v12);
  return ((uint64_t (*)(char *, uint64_t))v24)(v15, v12);
}

uint64_t protocol witness for View.body.getter in conformance LeftCenterView<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance RightCenterView<A>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))LeftCenterView.body.getter);
}

uint64_t associated type witness table accessor for View.Body : View in TopCenterView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t BottomCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;

  v25 = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  v11 = type metadata accessor for TupleView();
  v12 = MEMORY[0x24BDF5428];
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v11);
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata2();
  v13 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](v12, v13);
  v14 = type metadata accessor for VStack();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - v19;
  v26 = a3;
  v27 = a4;
  v28 = a1;
  v29 = a2;
  v30 = a6;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  v21 = MEMORY[0x23B7D3350](MEMORY[0x24BDF4700], v14);
  static ViewBuilder.buildExpression<A>(_:)(v18, v14, v21);
  v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v18, v14);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v14, v25);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v14);
}

uint64_t closure #1 in BottomCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  _QWORD v22[11];
  _QWORD v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26[3];

  v22[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  v11 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v11);
  v12 = type metadata accessor for HStack();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v22 - v17;
  v22[4] = a3;
  v22[5] = a4;
  v22[6] = a1;
  v22[7] = a2;
  *(double *)&v22[8] = a6;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  v19 = MEMORY[0x23B7D3350](MEMORY[0x24BDF4498], v12);
  static ViewBuilder.buildExpression<A>(_:)(v16, v12, v19);
  v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v16, v12);
  v24 = 0;
  v25 = 1;
  v26[0] = (uint64_t)&v24;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  v26[1] = (uint64_t)v16;
  v23[0] = MEMORY[0x24BDF4638];
  v23[1] = v12;
  v22[9] = MEMORY[0x24BDF4610];
  v22[10] = v19;
  static ViewBuilder.buildBlock<each A>(_:)(v26, 2uLL, (uint64_t)v23);
  v20(v18, v12);
  return ((uint64_t (*)(char *, uint64_t))v20)(v16, v12);
}

uint64_t protocol witness for View.body.getter in conformance BottomCenterView<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance RightCenterView<A>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))BottomCenterView.body.getter);
}

uint64_t TopCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;

  v25 = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  v11 = type metadata accessor for TupleView();
  v12 = MEMORY[0x24BDF5428];
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v11);
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata2();
  v13 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](v12, v13);
  v14 = type metadata accessor for VStack();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - v19;
  v26 = a3;
  v27 = a4;
  v28 = a1;
  v29 = a2;
  v30 = a6;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  v21 = MEMORY[0x23B7D3350](MEMORY[0x24BDF4700], v14);
  static ViewBuilder.buildExpression<A>(_:)(v18, v14, v21);
  v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v18, v14);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v14, v25);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v14);
}

uint64_t closure #1 in TopCenterView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  _QWORD v22[11];
  _QWORD v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26[3];

  v22[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  v11 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v11);
  v12 = type metadata accessor for HStack();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v22 - v17;
  v22[4] = a3;
  v22[5] = a4;
  v22[6] = a1;
  v22[7] = a2;
  *(double *)&v22[8] = a6;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  v19 = MEMORY[0x23B7D3350](MEMORY[0x24BDF4498], v12);
  static ViewBuilder.buildExpression<A>(_:)(v16, v12, v19);
  v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v16, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  v24 = 0;
  v25 = 1;
  v26[0] = (uint64_t)v16;
  v26[1] = (uint64_t)&v24;
  v23[0] = v12;
  v23[1] = MEMORY[0x24BDF4638];
  v22[9] = v19;
  v22[10] = MEMORY[0x24BDF4610];
  static ViewBuilder.buildBlock<each A>(_:)(v26, 2uLL, (uint64_t)v23);
  v20(v18, v12);
  return ((uint64_t (*)(char *, uint64_t))v20)(v16, v12);
}

uint64_t closure #1 in closure #1 in BottomCenterView.body.getter@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45[3];
  _QWORD v46[2];
  _QWORD v47[3];

  v33 = a3;
  v36 = a5;
  v32 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ModifiedContent();
  v34 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - v11;
  v13 = type metadata accessor for ModifiedContent();
  v35 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v31 - v18;
  v20 = a1(v17);
  a4(v20);
  v21 = a4;
  v22 = v33;
  View.padding(_:_:)();
  v23 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v9, a2);
  v21(v23);
  v24 = MEMORY[0x24BDECC60];
  v47[0] = v22;
  v47[1] = MEMORY[0x24BDECC60];
  v25 = MEMORY[0x24BDED308];
  v26 = MEMORY[0x23B7D3350](MEMORY[0x24BDED308], v10, v47);
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v10);
  v46[0] = v26;
  v46[1] = v24;
  v27 = MEMORY[0x23B7D3350](v25, v13, v46);
  static ViewBuilder.buildExpression<A>(_:)(v16, v13, v27);
  v28 = v35;
  v29 = *(void (**)(char *, uint64_t))(v35 + 8);
  v29(v16, v13);
  v43 = 0;
  v44 = 1;
  v45[0] = (uint64_t)&v43;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v16, v19, v13);
  v41 = 0;
  v42 = 1;
  v45[1] = (uint64_t)v16;
  v45[2] = (uint64_t)&v41;
  v40[0] = MEMORY[0x24BDF4638];
  v40[1] = v13;
  v40[2] = MEMORY[0x24BDF4638];
  v37 = MEMORY[0x24BDF4610];
  v38 = v27;
  v39 = MEMORY[0x24BDF4610];
  static ViewBuilder.buildBlock<each A>(_:)(v45, 3uLL, (uint64_t)v40);
  v29(v19, v13);
  return ((uint64_t (*)(char *, uint64_t))v29)(v16, v13);
}

uint64_t protocol witness for View.body.getter in conformance TopCenterView<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance RightCenterView<A>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))TopCenterView.body.getter);
}

uint64_t protocol witness for View.body.getter in conformance RightCenterView<A>(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, double))
{
  uint64_t v3;

  return a3(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(double *)(v3 + 16));
}

uint64_t associated type witness table accessor for View.Body : View in BottomCenterView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in BottomCenterView.body.getter()
{
  return partial apply for closure #1 in BottomCenterView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))closure #1 in BottomCenterView.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in BottomCenterView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in closure #1 in TopCenterView.body.getter(MEMORY[0x24BDF14C8], a1);
}

uint64_t partial apply for closure #1 in closure #1 in TopCenterView.body.getter@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in BottomCenterView.body.getter(*(uint64_t (**)(uint64_t))(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t partial apply for closure #1 in TopCenterView.body.getter()
{
  return partial apply for closure #1 in BottomCenterView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))closure #1 in TopCenterView.body.getter);
}

uint64_t partial apply for closure #1 in BottomCenterView.body.getter(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, double))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(double *)(v1 + 48));
}

uint64_t partial apply for closure #1 in closure #1 in TopCenterView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in closure #1 in TopCenterView.body.getter(MEMORY[0x24BDF14C0], a1);
}

uint64_t partial apply for closure #1 in LeftCenterView.body.getter()
{
  return partial apply for closure #1 in BottomCenterView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))closure #1 in LeftCenterView.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in LeftCenterView.body.getter()
{
  return partial apply for closure #1 in BottomCenterView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))closure #1 in closure #1 in LeftCenterView.body.getter);
}

uint64_t partial apply for closure #1 in RightCenterView.body.getter()
{
  return partial apply for closure #1 in BottomCenterView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))closure #1 in RightCenterView.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in RightCenterView.body.getter()
{
  return partial apply for closure #1 in BottomCenterView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))closure #1 in closure #1 in RightCenterView.body.getter);
}

void sub_2356AACB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  v0 = type metadata accessor for TupleView();
  v1 = MEMORY[0x24BDF5428];
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v0);
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata2();
  v2 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](v1, v2);
  type metadata accessor for VStack();
  JUMPOUT(0x23B7D3350);
}

void sub_2356AADA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  v0 = type metadata accessor for TupleView();
  v1 = MEMORY[0x24BDF5428];
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v0);
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata2();
  v2 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](v1, v2);
  type metadata accessor for VStack();
  JUMPOUT(0x23B7D3350);
}

void sub_2356AAE90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v0 = type metadata accessor for TupleView();
  v1 = MEMORY[0x24BDF5428];
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v0);
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata3();
  v2 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](v1, v2);
  type metadata accessor for VStack();
  JUMPOUT(0x23B7D3350);
}

void sub_2356AAF80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v0 = type metadata accessor for TupleView();
  v1 = MEMORY[0x24BDF5428];
  MEMORY[0x23B7D3350](MEMORY[0x24BDF5428], v0);
  type metadata accessor for HStack();
  swift_getTupleTypeMetadata3();
  v2 = type metadata accessor for TupleView();
  MEMORY[0x23B7D3350](v1, v2);
  type metadata accessor for VStack();
  JUMPOUT(0x23B7D3350);
}

Swift::Void __swiftcall InteractiveCameraTransformManager.onStartDrag(pointView:)(CGPoint_optional pointView)
{
  uint64_t v1;
  Swift::Bool is_nil;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGPoint_optional v9;

  is_nil = pointView.is_nil;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection + 64) & 1) == 0)
  {
    if (*(_QWORD *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl))
    {
      swift_retain();
      v9.is_nil = is_nil;
      TurnTableCameraControl.onStartDrag(pointView:)(v9);
      swift_release();
      static DispatchTime.now()();
      v6 = type metadata accessor for DispatchTime();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
      v7 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_startTime;
      swift_beginAccess();
      outlined assign with take of DispatchTime?((uint64_t)v5, v7);
      swift_endAccess();
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall InteractiveCameraTransformManager.onDrag(pointView:)(CGPoint_optional pointView)
{
  uint64_t v1;
  Swift::Bool is_nil;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGPoint_optional v9;

  is_nil = pointView.is_nil;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl))
  {
    swift_retain();
    v9.is_nil = is_nil;
    TurnTableCameraControl.onDrag(pointView:)(v9);
    swift_release();
    static DispatchTime.now()();
    v6 = type metadata accessor for DispatchTime();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
    v7 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_startTime;
    swift_beginAccess();
    outlined assign with take of DispatchTime?((uint64_t)v5, v7);
    swift_endAccess();
  }
  else
  {
    __break(1u);
  }
}

uint64_t InteractiveCameraTransformManager.init(radius:springDelay:springTime:)(float a1, double a2, double a3)
{
  char *v3;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  id v20;
  char *v21;
  char *v22;
  id v23;
  void *v24;
  __n128 v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  objc_super v29;

  *(_QWORD *)&v3[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_time] = 0;
  v7 = &v3[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_arCameraTransform];
  v8 = v3;
  Transform.init()();
  *(_OWORD *)v7 = v9;
  *((_OWORD *)v7 + 1) = v10;
  *((_OWORD *)v7 + 2) = v11;
  v12 = &v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boundingBoxWorld];
  v13 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v14 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v15 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  *(_OWORD *)v12 = *MEMORY[0x24BDAEE00];
  *((_OWORD *)v12 + 1) = v13;
  *((_OWORD *)v12 + 2) = v14;
  *((_OWORD *)v12 + 3) = v15;
  v16 = &v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection];
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  v16[64] = 1;
  *(_QWORD *)&v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_dragGesture] = 0;
  v17 = &v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_startTime];
  v18 = type metadata accessor for DispatchTime();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_ignoreARCameraTracking] = 0;
  *(_DWORD *)&v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boxProjectionPadding] = 1066192077;
  if (a2 < 0.0)
  {
    __break(1u);
  }
  else
  {
    *(double *)&v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_springDelay] = a2;
    if (a3 > 0.0)
    {
      *(double *)&v8[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_springTime] = a3;

      v29.receiver = v8;
      v29.super_class = (Class)type metadata accessor for InteractiveCameraTransformManager();
      v20 = objc_msgSendSuper2(&v29, sel_init);
      v21 = (char *)objc_allocWithZone((Class)type metadata accessor for DragGestureRecognizer());
      v22 = (char *)v20;
      v23 = specialized DragGestureRecognizer.init(draggable:)(v22, v21);
      v24 = *(void **)&v22[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_dragGesture];
      *(_QWORD *)&v22[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_dragGesture] = v23;

      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of InteractiveCameraTransformManager.init(radius:springDelay:springTime:));
      v28 = v25;
      type metadata accessor for TurnTableCameraControl();
      swift_allocObject();
      v26 = v22;
      v27 = specialized TurnTableCameraControl.init(startTransformProvider:radius:lookAtWorld:gainX:gainY:)(a1, v28, 0.01, 0.01, (uint64_t)v22, (uint64_t)&protocol witness table for InteractiveCameraTransformManager);

      *(_QWORD *)&v26[OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl] = v27;
      swift_release();
      return (uint64_t)v26;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall InteractiveCameraTransformManager.updateTrackedCamera(at:viewToWorld:lookAtBoxWorld:projection:ignoreARCameraTracking:)(Swift::Double at, simd_float4x4 *viewToWorld, simd_float4x4 *lookAtBoxWorld, simd_float4x4 *projection, Swift::Bool ignoreARCameraTracking)
{
  uint64_t v5;
  __int128 v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  __int128 v11;
  float32x4_t v12;
  uint64_t v13;
  char v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  int32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float v42;
  uint64_t v43;
  float32x4_t *v44;
  float v45;
  float32x4_t v46;
  float *v47;
  float v48;
  float v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v13 = v5;
  v14 = (char)viewToWorld;
  v54 = v12;
  v55 = v8;
  v52 = v11;
  v53 = v7;
  v50 = v10;
  v51 = v6;
  v56 = v9;
  v16 = viewToWorld & 1;
  v17 = type metadata accessor for DispatchTime();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(Swift::Double *)(v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_time) = at;
  v24 = OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_ignoreARCameraTracking;
  if (*(unsigned __int8 *)(v13
                          + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_ignoreARCameraTracking) != v16)
  {
    if ((v14 & 1) != 0)
    {
      if (!*(_QWORD *)(v13
                      + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl))
      {
LABEL_16:
        __break(1u);
        return;
      }
      swift_retain();
      InteractiveCameraTransformManager.computeCurrentTransform()();
      TurnTableCameraControl.setFromCameraWorldPosition(cameraPositionWorld:)(v25);
      swift_release();
    }
    else
    {
      static DispatchTime.now()();
      MEMORY[0x23B7D2420](v20, *(double *)(v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_springDelay));
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v23, 0, 1, v17);
      v26 = v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_startTime;
      swift_beginAccess();
      outlined assign with take of DispatchTime?((uint64_t)v23, v26);
      swift_endAccess();
    }
    *(_BYTE *)(v13 + v24) = v14 & 1;
  }
  v27 = v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection;
  *(_OWORD *)v27 = v58;
  *(_OWORD *)(v27 + 16) = v59;
  *(_OWORD *)(v27 + 32) = v60;
  *(_OWORD *)(v27 + 48) = v61;
  *(_BYTE *)(v27 + 64) = 0;
  v28 = v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boundingBoxWorld;
  v29 = v52;
  *(_OWORD *)v28 = v50;
  *(_OWORD *)(v28 + 16) = v29;
  *(float32x4_t *)(v28 + 32) = v54;
  *(_OWORD *)(v28 + 48) = v57;
  Transform.init(matrix:)();
  v30 = v13 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_arCameraTransform;
  *(_OWORD *)v30 = v31;
  *(_OWORD *)(v30 + 16) = v32;
  *(_OWORD *)(v30 + 32) = v33;
  v34 = *(float32x4_t *)(v28 + 16);
  v53 = *(float32x4_t *)v28;
  v54 = v34;
  v35 = *(float32x4_t *)(v28 + 48);
  v55 = *(float32x4_t *)(v28 + 32);
  v56 = v35;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of InteractiveCameraTransformManager.updateTrackedCamera(at:viewToWorld:lookAtBoxWorld:projection:ignoreARCameraTracking:));
  v37.i32[3] = v56.i32[3];
  v38 = *(float32x2_t *)(v30 + 32);
  v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, v36.f32[0]), v54, *(float32x2_t *)v36.f32, 1), v55, v36, 2), v56, v36, 3);
  *(float32x2_t *)v37.f32 = vsub_f32(v38, *(float32x2_t *)v56.f32);
  v37.f32[2] = *(float *)(v30 + 40) - v56.f32[2];
  v39 = (int32x4_t)vmulq_f32(v37, v37);
  v39.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v39, 2), vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1))).u32[0];
  v40 = vrsqrte_f32((float32x2_t)v39.u32[0]);
  v41 = vmul_f32(v40, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v40, v40)));
  v42 = InteractiveCameraTransformManager.computeRadiusToViewBox(boxToCameraDir:)((__n128)vmulq_n_f32(v37, vmul_f32(v41, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v41, v41))).f32[0]));
  v43 = OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl;
  v44 = *(float32x4_t **)(v13
                        + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl);
  if (!v44)
  {
    __break(1u);
    goto LABEL_15;
  }
  v45 = v42;
  v46 = v56;
  v46.i32[3] = 0;
  v44[5] = v46;
  swift_retain();
  TurnTableCameraControl.update()();
  swift_release();
  v47 = *(float **)(v13 + v43);
  if (!v47)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v48 = v47[15];
  v49 = v47[16];
  if (v49 >= v45)
    v49 = v45;
  if (v49 > v48)
    v48 = v49;
  v47[14] = v48;
  swift_retain();
  TurnTableCameraControl.update()();
  swift_release();
}

float InteractiveCameraTransformManager.computeRadiusToViewBox(boxToCameraDir:)(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  double v8;
  float32x4_t v9;
  __n128 v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  double v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v28;
  double v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;

  v2 = v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection + 64) & 1) != 0)
    return 1.0;
  v28 = *(float32x4_t *)(v2 + 32);
  LODWORD(v30) = *(_QWORD *)v2;
  v29 = *(double *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v2 + 56);
  v32 = *(float32x4_t *)(v1 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boundingBoxWorld);
  v33 = *(float32x4_t *)(v1
                       + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boundingBoxWorld
                       + 16);
  v34 = *(float32x4_t *)(v1
                       + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boundingBoxWorld
                       + 32);
  v35 = *(float32x4_t *)(v1
                       + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_boundingBoxWorld
                       + 48);
  Transform.init(matrix:)();
  v25 = v7;
  v26 = v6;
  v24 = v8;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of InteractiveCameraTransformManager.computeRadiusToViewBox(boxToCameraDir:));
  v10 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v9.f32[0]), v33, *(float32x2_t *)v9.f32, 1), v34, v9, 2), v35, v9, 3);
  v10.n128_u32[3] = 0;
  *(float32x2_t *)v11.f32 = vsub_f32(0, (float32x2_t)a1.n128_u64[0]);
  v11.f32[2] = 0.0 - a1.n128_f32[2];
  v11.i32[3] = 0;
  v23.i64[0] = v4;
  v23.i64[1] = v5;
  specialized static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:)(1, v26, v25, v24, 1.1, v10, v11, v30, v29, v12, v13, v14, v15, v16, v17, v18, v28, v23);
  specialized SIMD.subscript.getter((__n128)xmmword_2356BE0D0, COERCE_DOUBLE(2));
  v31 = v19;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of InteractiveCameraTransformManager.computeRadiusToViewBox(boxToCameraDir:));
  v21 = vsubq_f32(v31, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v20.f32[0]), v33, *(float32x2_t *)v20.f32, 1), v34, v20, 2), v35, v20, 3));
  v22 = vmulq_f32(v21, v21);
  return sqrtf(v22.f32[2] + vaddv_f32(*(float32x2_t *)v22.f32));
}

double InteractiveCameraTransformManager.computeCurrentTransform()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  float32x4_t v5;
  float32x4_t v6;
  __int128 v7;
  __int128 v8;
  float32x4_t v9;
  uint64_t v10;
  __int128 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x4_t v29;
  __n128 v30;
  float v31;
  int32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  char v36;
  float32x4_t *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  __int128 v52;
  float32x4_t v53;
  float32x4_t v54;
  __int128 v55;
  float32x4_t v56;
  float32x4_t v57;

  v1 = type metadata accessor for DispatchTime();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transform.init()();
  Transform.init(matrix:)();
  v56 = v5;
  v52 = v7;
  v53 = v6;
  Transform.init()();
  v55 = v8;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of InteractiveCameraTransformManager.computeCurrentTransform());
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl);
  if (v10)
  {
    v11 = *(_OWORD *)(v10 + 160);
    v57 = *(float32x4_t *)(v10 + 192);
  }
  else
  {
    v57 = v9;
    v11 = v55;
  }
  v55 = v11;
  v12 = 0.0;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_ignoreARCameraTracking) & 1) != 0)
  {
    v13 = 0.0;
  }
  else
  {
    static DispatchTime.now()();
    InteractiveCameraTransformManager.interpolant(at:)();
    v13 = v14;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    if (v13 > 0.0)
    {
      if (v13 <= 1.0)
        v12 = v13;
      else
        v12 = 1.0;
    }
  }
  v57 = vmlaq_n_f32(v57, vsubq_f32(*(float32x4_t *)(v0+ OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_arCameraTransform+ 32), v57), (float)(v12 * v12)/ (float)((float)((float)((float)(v12 * v12) - v13) + (float)((float)(v12 * v12) - v13)) + 1.0));
  v15 = v57.f32[2];
  *(double *)v16.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v52, v53);
  v49 = v16;
  v50 = v17;
  v51 = v18;
  v54 = v19;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of InteractiveCameraTransformManager.computeCurrentTransform());
  v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, v20.f32[0]), v50, *(float32x2_t *)v20.f32, 1), v51, v20, 2), v54, v20, 3);
  v21.i32[3] = 0;
  *(float32x2_t *)v29.f32 = specialized static MiniViewHelpers.computeLookAt(cameraWorld:objectWorld:objectExtents:)(v57, v21, *(float32x2_t *)v56.f32);
  v30 = (__n128)v29;
  v29.i32[3] = v57.i32[3];
  *(float32x2_t *)v29.f32 = vsub_f32(*(float32x2_t *)v57.f32, (float32x2_t)v30.n128_u64[0]);
  v31 = v30.n128_f32[2];
  v29.f32[2] = v15 - v30.n128_f32[2];
  v32 = (int32x4_t)vmulq_f32(v29, v29);
  v32.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2), vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1))).u32[0];
  v33 = vrsqrte_f32((float32x2_t)v32.u32[0]);
  v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v33, v33)));
  v35 = vmulq_n_f32(v29, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v34, v34))).f32[0]);
  v36 = *(_BYTE *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection + 64);
  v54 = (float32x4_t)v30;
  v57 = v35;
  if ((v36 & 1) != 0)
  {
    v37 = (float32x4_t *)MEMORY[0x24BDAEE00];
    if (one-time initialization token for logger != -1)
      swift_once();
    v56 = v37[3];
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)logger);
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_2355E9000, v39, v40, "Computing the view to world with a nil projection!", v41, 2u);
      MEMORY[0x23B7D3428](v41, -1, -1);
    }

  }
  else
  {
    *(float32x2_t *)v42.f32 = vsub_f32(0, *(float32x2_t *)v35.f32);
    v42.f32[2] = 0.0 - v35.f32[2];
    v42.i32[3] = 0;
    specialized static MathHelpers.computeCameraMatrixForConstrainedLookAt(box:boxPadding:lookAtPoint:lookAtDir:projection:useBoundingSphere:)(1, v56, v53, *(double *)&v52, 1.1, v30, v42, COERCE_FLOAT(*(_QWORD *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection)), *(double *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection + 16), *(_QWORD *)&v22, *(_QWORD *)&v23, *(_QWORD *)&v24, *(_QWORD *)&v25, *(_QWORD *)&v26, *(_QWORD *)&v27, *(_QWORD *)&v28, *(float32x4_t *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection + 32), *(float32x4_t *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_projection + 48));
  }
  specialized SIMD.subscript.getter((__n128)xmmword_2356BE0D0, COERCE_DOUBLE(2));
  v44 = vsubq_f32(v43, v54);
  v45 = vmulq_f32(v44, v44);
  v45.f32[0] = sqrtf(v45.f32[2] + vaddv_f32(*(float32x2_t *)v45.f32));
  *(float32x2_t *)v46.f32 = vadd_f32(*(float32x2_t *)v54.f32, vmul_n_f32(*(float32x2_t *)v57.f32, v45.f32[0]));
  v46.f32[2] = v31 + vmuls_lane_f32(v45.f32[0], v57, 2);
  v46.i32[3] = 0;
  v57 = v46;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of InteractiveCameraTransformManager.computeCurrentTransform());
  specialized static MathHelpers.computeCameraLookAtRotation(pos:lookAt:up:)(v57, v54, v47);
  return *(double *)&v55;
}

unint64_t InteractiveCameraTransformManager.interpolant(at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchTime();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_startTime;
  swift_beginAccess();
  outlined init with copy of DispatchTime?(v8, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    return outlined destroy of DispatchTime?((uint64_t)v3);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  v10 = DispatchTime.uptimeNanoseconds.getter();
  result = DispatchTime.uptimeNanoseconds.getter();
  if (v10 >= result)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  __break(1u);
  return result;
}

id InteractiveCameraTransformManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InteractiveCameraTransformManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for InteractiveCameraTransformManager()
{
  return type metadata accessor for InteractiveCameraTransformManager();
}

uint64_t type metadata accessor for InteractiveCameraTransformManager()
{
  uint64_t result;

  result = type metadata singleton initialization cache for InteractiveCameraTransformManager;
  if (!type metadata singleton initialization cache for InteractiveCameraTransformManager)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for InteractiveCameraTransformManager()
{
  unint64_t v0;

  type metadata accessor for DispatchTime?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for DispatchTime?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DispatchTime?)
  {
    type metadata accessor for DispatchTime();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DispatchTime?);
  }
}

void protocol witness for Draggable.onStartDrag(pointView:) in conformance InteractiveCameraTransformManager(CGPoint_optional pointView)
{
  InteractiveCameraTransformManager.onStartDrag(pointView:)(pointView);
}

uint64_t protocol witness for Draggable.onEndDrag(pointView:) in conformance InteractiveCameraTransformManager()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  result = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_turnTableCameraControl);
  if (v5)
  {
    *(_QWORD *)(v5 + 128) = 0;
    *(_QWORD *)(v5 + 136) = 0;
    *(_BYTE *)(v5 + 144) = 1;
    v6 = type metadata accessor for DispatchTime();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
    v7 = v0 + OBJC_IVAR____TtC19_RealityKit_SwiftUI33InteractiveCameraTransformManager_startTime;
    swift_beginAccess();
    outlined assign with take of DispatchTime?((uint64_t)v4, v7);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void protocol witness for Draggable.onDrag(pointView:) in conformance InteractiveCameraTransformManager(CGPoint_optional pointView)
{
  InteractiveCameraTransformManager.onDrag(pointView:)(pointView);
}

uint64_t outlined assign with take of DispatchTime?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of DispatchTime?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DispatchTime?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Void __swiftcall TurnTableCameraControl.onStartDrag(pointView:)(CGPoint_optional pointView)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  float32x2_t v9;
  float32x4_t v10;
  float v11;
  int v12;
  _BYTE v13[28];

  v4 = v2;
  v5 = v1;
  v6 = *(_QWORD *)&pointView.is_nil;
  if (MEMORY[0x23B7D34DC](v3 + 16, (__n128)pointView.value, *(__n128 *)&pointView.value.y))
  {
    v7 = *(_QWORD *)(v3 + 24);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(ObjectType, v7);
    *(float32x2_t *)v10.f32 = vsub_f32(v9, *(float32x2_t *)(v3 + 80));
    v10.f32[2] = v11 - *(float *)(v3 + 88);
    v10.i32[3] = 0;
    specialized static TurnTableCameraControl.SphericalCoordinates.fromCartesian(pos:)((uint64_t)v13, v10);
    swift_unknownObjectRelease();
    *(_OWORD *)(v3 + 40) = *(_OWORD *)v13;
    *(_OWORD *)(v3 + 52) = *(_OWORD *)&v13[12];
  }
  v12 = *(_DWORD *)(v3 + 64);
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 112) = *(_QWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 120) = v12;
  *(_QWORD *)(v3 + 128) = v6;
  *(_QWORD *)(v3 + 136) = v5;
  *(_BYTE *)(v3 + 144) = v4 & 1;
}

Swift::Void __swiftcall TurnTableCameraControl.onDrag(pointView:)(CGPoint_optional pointView)
{
  double v1;
  char v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *oslog;

  if ((*(_BYTE *)(v3 + 144) & 1) != 0 || (v2 & 1) != 0)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_2355E9000, oslog, v9, "Expected non-nil drag start point and current drag point!", v10, 2u);
      MEMORY[0x23B7D3428](v10, -1, -1);
    }

  }
  else
  {
    v4 = *(double *)&pointView.is_nil - *(double *)(v3 + 128);
    v5 = v1 - *(double *)(v3 + 136);
    v6 = *(float *)(v3 + 96) - (float)(*(float *)(v3 + 32) * v4);
    v7 = *(float *)(v3 + 100) - (float)(*(float *)(v3 + 36) * v5);
    if (*(float *)(v3 + 52) < v7)
      v7 = *(float *)(v3 + 52);
    if (v7 <= *(float *)(v3 + 48))
      v7 = *(float *)(v3 + 48);
    *(float *)(v3 + 40) = v6;
    *(float *)(v3 + 44) = v7;
    TurnTableCameraControl.update()();
  }
}

float TurnTableCameraControl.setFromCameraWorldPosition(cameraPositionWorld:)(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float32x4_t v9;
  uint64_t v12;
  __n128 v13[2];

  if (one-time initialization token for logger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v12 = v6;
    *(_DWORD *)v5 = 136446210;
    v13[0] = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>();
    v7 = SIMD.description.getter();
    v13[0].n128_u64[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2355E9000, v3, v4, "TurnTable: setting from worldPos= %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7D3428](v6, -1, -1);
    MEMORY[0x23B7D3428](v5, -1, -1);
  }

  *(float32x2_t *)v9.f32 = vsub_f32((float32x2_t)a1.n128_u64[0], *(float32x2_t *)(v1 + 80));
  v9.f32[2] = a1.n128_f32[2] - *(float *)(v1 + 88);
  v9.i32[3] = 0;
  specialized static TurnTableCameraControl.SphericalCoordinates.fromCartesian(pos:)((uint64_t)v13, v9);
  *(__n128 *)(v1 + 40) = v13[0];
  *(__n128 *)(v1 + 52) = *(__n128 *)((char *)v13 + 12);
  return TurnTableCameraControl.update()();
}

void one-time initialization function for minElevation()
{
  static TurnTableCameraControl.SphericalCoordinates.minElevation = -1077426131;
}

double TurnTableCameraControl.SphericalCoordinates.position()()
{
  uint64_t v0;
  float v1;
  float32x4_t v2;
  __float2 v3;
  float v4;
  float32x4_t v5;
  __float2 v6;
  float32x4_t v7;
  int32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  uint64_t inited;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  double result;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;

  v1 = *(float *)v0;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TurnTableCameraControl.SphericalCoordinates.position());
  v25 = v2;
  v3 = __sincosf_stret(v1 * 0.5);
  v26 = vmulq_n_f32(v25, v3.__sinval);
  v4 = *(float *)(v0 + 4);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of TurnTableCameraControl.SphericalCoordinates.position());
  v24 = v5;
  v6 = __sincosf_stret(v4 * 0.5);
  v7 = vmulq_n_f32(v24, v6.__sinval);
  v7.i32[3] = LODWORD(v6.__cosval);
  v8 = (int32x4_t)vnegq_f32(v7);
  v9 = (int8x16_t)vtrn2q_s32((int32x4_t)v7, vtrn1q_s32((int32x4_t)v7, v8));
  v10 = (float32x4_t)vrev64q_s32((int32x4_t)v7);
  v10.i32[0] = v8.i32[1];
  v10.i32[3] = v8.i32[2];
  v28 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v7, v3.__cosval), v10, v26, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v8, 8uLL), *(float32x2_t *)v26.f32, 1), (float32x4_t)vextq_s8(v9, v9, 8uLL), v26.f32[0]));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2356BAC90;
  *(_QWORD *)(inited + 32) = 0;
  *(_DWORD *)(inited + 40) = *(_DWORD *)(v0 + 16);
  specialized SIMD.init<A>(_:)(inited);
  v27 = v12;
  swift_setDeallocating();
  v13 = vmulq_f32(v28, (float32x4_t)xmmword_2356BCB70);
  v14 = (int32x4_t)vnegq_f32(v13);
  v15 = (int8x16_t)vtrn2q_s32((int32x4_t)v13, vtrn1q_s32((int32x4_t)v13, v14));
  v16 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v14, 8uLL), *(float32x2_t *)v27.f32, 1);
  v17 = (float32x4_t)vrev64q_s32((int32x4_t)v13);
  v17.i32[0] = v14.i32[1];
  v17.i32[3] = v14.i32[2];
  v18 = vmlaq_laneq_f32(vmlaq_n_f32(v16, (float32x4_t)vextq_s8(v15, v15, 8uLL), v27.f32[0]), v17, v27, 2);
  v19 = (int32x4_t)vnegq_f32(v18);
  v20 = (int8x16_t)vtrn2q_s32((int32x4_t)v18, vtrn1q_s32((int32x4_t)v18, v19));
  v21 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 8uLL), *(float32x2_t *)v28.f32, 1), (float32x4_t)vextq_s8(v20, v20, 8uLL), v28.f32[0]);
  v22 = (float32x4_t)vrev64q_s32((int32x4_t)v18);
  v22.i32[0] = v19.i32[1];
  v22.i32[3] = v19.i32[2];
  *(_QWORD *)&result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v18, v28, 3), v22, v28, 2), v21).u64[0];
  return result;
}

float TurnTableCameraControl.update()()
{
  uint64_t v0;
  float32x4_t v1;
  __int128 v2;
  __int128 v3;
  float v4;
  float result;
  float32x4_t v6;
  float32x4_t v7;

  v6 = *(float32x4_t *)(v0 + 80);
  v7 = *(float32x4_t *)(v0 + 192);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TurnTableCameraControl.update());
  *(double *)&v2 = specialized static MathHelpers.computeCameraLookAtRotation(pos:lookAt:up:)(v7, v6, v1);
  *(_OWORD *)(v0 + 176) = v2;
  *(float32x2_t *)&v3 = vadd_f32(COERCE_FLOAT32X2_T(TurnTableCameraControl.SphericalCoordinates.position()()), *(float32x2_t *)(v0 + 80));
  result = v4 + *(float *)(v0 + 88);
  *((float *)&v3 + 2) = result;
  HIDWORD(v3) = 0;
  *(_OWORD *)(v0 + 192) = v3;
  return result;
}

uint64_t TurnTableCameraControl.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak RangefinderDelegate?(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TurnTableCameraControl()
{
  return objc_opt_self();
}

__n128 __swift_memcpy28_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

void *type metadata accessor for TurnTableCameraControl.SphericalCoordinates()
{
  return &unk_2506BEC70;
}

void protocol witness for Draggable.onStartDrag(pointView:) in conformance TurnTableCameraControl(CGPoint_optional pointView)
{
  TurnTableCameraControl.onStartDrag(pointView:)(pointView);
}

void protocol witness for Draggable.onEndDrag(pointView:) in conformance TurnTableCameraControl()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 136) = 0;
  *(_BYTE *)(v0 + 144) = 1;
}

void protocol witness for Draggable.onDrag(pointView:) in conformance TurnTableCameraControl(CGPoint_optional pointView)
{
  TurnTableCameraControl.onDrag(pointView:)(pointView);
}

__n128 protocol witness for TransformProvider.transform.getter in conformance TurnTableCameraControl()
{
  __n128 *v0;

  return v0[10];
}

uint64_t specialized TurnTableCameraControl.init(startTransformProvider:radius:lookAtWorld:gainX:gainY:)(float a1, __n128 a2, float a3, float a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int128 v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  float v17;
  float v18;
  int v19;

  *(_QWORD *)(v6 + 24) = 0;
  swift_unknownObjectWeakInit();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TurnTableCameraControl.init(startTransformProvider:radius:lookAtWorld:gainX:gainY:));
  *(_OWORD *)(v6 + 80) = v11;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_BYTE *)(v6 + 144) = 1;
  result = Transform.init()();
  *(_OWORD *)(v6 + 160) = v13;
  *(_OWORD *)(v6 + 176) = v14;
  *(_OWORD *)(v6 + 192) = v15;
  if (one-time initialization token for minElevation != -1)
    result = swift_once();
  v16 = static TurnTableCameraControl.SphericalCoordinates.minElevation;
  if (*(float *)&static TurnTableCameraControl.SphericalCoordinates.minElevation > 1.5608)
  {
    __break(1u);
  }
  else
  {
    v17 = 0.0;
    if (*(float *)&static TurnTableCameraControl.SphericalCoordinates.minElevation < 0.0)
      v18 = 0.0;
    else
      v18 = *(float *)&static TurnTableCameraControl.SphericalCoordinates.minElevation;
    if (a1 > 0.0)
      v17 = a1;
    *(_DWORD *)(v6 + 40) = 0;
    *(float *)(v6 + 44) = v18;
    *(_DWORD *)(v6 + 48) = v16;
    *(_DWORD *)(v6 + 52) = 1070057517;
    *(float *)(v6 + 56) = v17;
    *(_QWORD *)(v6 + 60) = 0x7F80000000000000;
    *(__n128 *)(v6 + 80) = a2;
    *(float *)(v6 + 32) = a3;
    *(float *)(v6 + 36) = a4;
    *(_QWORD *)(v6 + 24) = a6;
    swift_unknownObjectWeakAssign();
    v19 = *(_DWORD *)(v6 + 64);
    *(_OWORD *)(v6 + 96) = *(_OWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 112) = *(_QWORD *)(v6 + 56);
    *(_DWORD *)(v6 + 120) = v19;
    return v6;
  }
  return result;
}

void specialized static TurnTableCameraControl.SphericalCoordinates.fromCartesian(pos:)(uint64_t a1@<X8>, float32x4_t a2@<Q0>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  BOOL v10;
  float v11;
  float v12;
  float32x4_t v13;

  if (one-time initialization token for minElevation != -1)
  {
    v13 = a2;
    swift_once();
    a2 = v13;
  }
  v3 = *(float *)&static TurnTableCameraControl.SphericalCoordinates.minElevation;
  if (*(float *)&static TurnTableCameraControl.SphericalCoordinates.minElevation > 1.5608)
  {
    __break(1u);
  }
  else
  {
    v4 = a2.f32[1];
    v5 = sqrtf(vmuls_lane_f32(a2.f32[2], a2, 2)+ (float)(vmulq_f32(a2, a2).f32[0] + vmuls_lane_f32(a2.f32[1], *(float32x2_t *)a2.f32, 1)));
    v6 = atan2f(a2.f32[0], a2.f32[2]);
    v7 = v4 / v5;
    if ((float)(v4 / v5) <= -1.0)
      v7 = -1.0;
    if (v7 > 1.0)
      v7 = 1.0;
    v8 = asinf(v7);
    v9 = -v8;
    v10 = v8 < -1.5608;
    v11 = 1.5608;
    if (!v10)
      v11 = v9;
    if (v11 <= v3)
      v11 = v3;
    v12 = 0.0;
    if (v5 > 0.0)
      v12 = v5;
    *(float *)a1 = v6;
    *(float *)(a1 + 4) = v11;
    *(float *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 12) = 1070057517;
    *(float *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 20) = 0x7F80000000000000;
  }
}

uint64_t UserFeedbackSystem.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of UserFeedbackSystem.init());
  *(_QWORD *)(v0 + 16) = v1;
  *(_DWORD *)(v0 + 24) = 953267991;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2356BC690;
  *(int32x2_t *)(inited + 32) = vdup_n_s32(0x7F800000u);
  specialized SIMD.init<A>(_:)(inited);
  v4 = v3;
  swift_setDeallocating();
  *(_QWORD *)(v0 + 32) = v4;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_OWORD *)(v0 + 64) = xmmword_2356C2AB0;
  return v0;
}

uint64_t UserFeedbackSystem.reticleAimScoreFilter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  _BYTE v6[24];
  uint64_t v7;

  swift_beginAccess();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v1 + 40, (uint64_t)v6, &demangling cache variable for type metadata for Filter2D??);
  if (v7 != 1)
    return outlined init with take of Filter2D?((uint64_t)v6, a1);
  outlined destroy of URL?((uint64_t)v6, &demangling cache variable for type metadata for Filter2D??);
  v3 = specialized static ExperimentSettings.loadReticleDeltaFilterType(default:)(0xD00000000000003BLL, 0x80000002356C8F50);
  static Filter2DFactory.create(factoryString:)(v3, v4, a1);
  swift_bridgeObjectRelease();
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Filter2D?);
  swift_beginAccess();
  outlined assign with take of Filter2D??((uint64_t)v6, v1 + 40);
  return swift_endAccess();
}

uint64_t UserFeedbackSystem.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of URL?(v0 + 40, &demangling cache variable for type metadata for Filter2D??);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UserFeedbackSystem()
{
  return objc_opt_self();
}

uint64_t outlined assign with take of Filter2D??(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Filter2D??);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Filter2D?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Filter2D?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized UserFeedbackSystem.update(at:arView:bboxWorld:)(void *a1, double a2, float32x4_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  double v18;
  uint64_t inited;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  double v28;
  char v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double (*v45)(uint64_t, uint64_t, double);
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  simd_float4x4 v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  os_log_t osloga[2];
  float32x4_t oslogb;
  NSObject *oslog;
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  _BYTE v66[40];
  simd_float4x4 v67;
  CGRect v68;
  CGRect v69;

  v5 = v4;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v5 + 32);
  *(double *)v7.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(a4, a3);
  v51 = v7;
  v52 = v8;
  v53 = v9;
  *(_OWORD *)osloga = v10;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of UserFeedbackSystem.update(at:arView:bboxWorld:));
  oslogb = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, v11.f32[0]), v52, *(float32x2_t *)v11.f32, 1), v53, v11, 2), *(float32x4_t *)osloga, v11, 3);
  dispatch thunk of ARView.cameraTransform.getter();
  v13 = vsubq_f32(oslogb, v12);
  if (sqrtf(vmuls_lane_f32(v13.f32[2], v13, 2) + vaddv_f32(vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32))) <= 0.0001)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_2355E9000, oslog, v25, "cameraToBoxVector is too small to compute direction!", v26, 2u);
      MEMORY[0x23B7D3428](v26, -1, -1);
    }

  }
  else
  {
    v14 = (int32x4_t)vmulq_f32(v13, v13);
    v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
    v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
    v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
    v54 = vmulq_n_f32(v13, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
    dispatch thunk of ARView.cameraTransform.getter();
    *(double *)v67.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v18, v17);
    v50 = __invert_f4(v67);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2356BACA0;
    *(_QWORD *)(inited + 32) = v54.i64[0];
    *(_DWORD *)(inited + 40) = v54.i32[2];
    *(_DWORD *)(inited + 44) = 0;
    specialized SIMD.init<A>(_:)(inited);
    v55 = v20;
    swift_setDeallocating();
    v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v50.columns[0], v55.f32[0]), (float32x4_t)v50.columns[1], *(float32x2_t *)v55.f32, 1), (float32x4_t)v50.columns[2], v55, 2), (float32x4_t)v50.columns[3], v55, 3);
    v21.i32[3] = 0;
    v56 = v21;
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of UserFeedbackSystem.update(at:arView:bboxWorld:));
    specialized static MathHelpers.angleBetween(_:_:)(v56, v22);
    if (v23 < 1.5708)
    {
      *(double *)&v27 = COERCE_DOUBLE(ARView.project(_:)());
      if ((v29 & 1) != 0)
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v46 = type metadata accessor for Logger();
        __swift_project_value_buffer(v46, (uint64_t)logger);
        v47 = Logger.logObject.getter();
        v48 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v47, v48))
        {
          v49 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v49 = 0;
          _os_log_impl(&dword_2355E9000, v47, v48, "Can't project bbox center into the screen!", v49, 2u);
          MEMORY[0x23B7D3428](v49, -1, -1);
        }

      }
      else
      {
        v30 = *(double *)&v27;
        v31 = v28;
        v32 = swift_initStackObject();
        *(_OWORD *)(v32 + 16) = xmmword_2356BC690;
        objc_msgSend(a1, sel_center);
        *(float *)&v33 = v33 - v30;
        *(_DWORD *)(v32 + 32) = LODWORD(v33);
        objc_msgSend(a1, sel_center);
        v35 = v34 - v31;
        *(float *)(v32 + 36) = v35;
        specialized SIMD.init<A>(_:)(v32);
        v57 = v36;
        swift_setDeallocating();
        v37 = swift_initStackObject();
        *(_OWORD *)(v37 + 16) = xmmword_2356BC690;
        objc_msgSend(a1, sel_bounds);
        v38 = CGRectGetWidth(v68) * 0.5;
        *(float *)(v37 + 32) = *(float *)&v57 / v38;
        objc_msgSend(a1, sel_bounds);
        v39 = CGRectGetHeight(v69) * 0.5;
        *(float *)(v37 + 36) = *((float *)&v57 + 1) / v39;
        specialized SIMD.init<A>(_:)(v37);
        v41 = v40;
        swift_setDeallocating();
        *(_QWORD *)(v5 + 16) = v41;
        UserFeedbackSystem.reticleAimScoreFilter.getter((uint64_t)v66);
        outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>((uint64_t)v66, (uint64_t)&v64, (uint64_t *)&demangling cache variable for type metadata for Filter2D?);
        if (v65)
        {
          outlined init with take of Animation(&v64, (uint64_t)v61);
          v42 = v62;
          v43 = v63;
          __swift_project_boxed_opaque_existential_1(v61, v62);
          v44 = *(double *)(v5 + 16);
          v45 = *(double (**)(uint64_t, uint64_t, double))(v43 + 16);
          swift_retain();
          *(double *)(v5 + 16) = v45(v42, v43, v44);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
          swift_release();
        }
        outlined destroy of URL?((uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for Filter2D?);
      }
    }
  }
}

uint64_t Gesture.targetedToAnyEntity()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v3, a1);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 1, 1, v14);
  v17 = default argument 4 of TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)(a1, a2, v15, v16);
  return TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)((uint64_t)v12, (uint64_t)v10, (uint64_t)getEnumTag for FreeformCloudRenderer.Error, 0, v17, a3);
}

uint64_t default argument 4 of TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TargetingEntityGesture.EntityTargetState(0, a1, a2, a4);
  swift_allocObject();
  return TargetingEntityGesture.EntityTargetState.init()();
}

uint64_t TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v11 = *(_QWORD *)a5;
  v12 = *(_QWORD *)(*(_QWORD *)a5 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  v14 = (int *)type metadata accessor for TargetingEntityGesture(0, v12, *(_QWORD *)(v11 + 88), v13);
  swift_weakInit();
  swift_release();
  outlined init with take of Animation?(a2, a6 + v14[10], &demangling cache variable for type metadata for QueryPredicate<Entity>?);
  v15 = (_QWORD *)(a6 + v14[11]);
  *v15 = a3;
  v15[1] = a4;
  v16 = (uint64_t *)(a6 + v14[12]);
  result = property wrapper backing initializer of TargetingEntityGesture.state(a5, v17, v18, v19);
  *v16 = result;
  v16[1] = v21;
  return result;
}

uint64_t Gesture.targetedToEntity(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v4, a1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 1, 1, v15);
  v18 = default argument 4 of TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)(a1, a2, v16, v17);
  swift_retain();
  return TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)((uint64_t)v13, (uint64_t)v11, (uint64_t)getEnumTag for FreeformCloudRenderer.Error, 0, v18, a3);
}

uint64_t Gesture.targetedToEntity(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, v5, a2);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v13, a1, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v17);
  v21 = default argument 4 of TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)(a2, a3, v19, v20);
  return TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)((uint64_t)v15, (uint64_t)v13, (uint64_t)getEnumTag for FreeformCloudRenderer.Error, 0, v21, a4);
}

uint64_t specialized Gesture.targetedToInteraction(enabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = a2;
  v25 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TapGesture();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v3, v8);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>.EntityTargetState);
  v13 = swift_allocObject();
  swift_weakInit();
  swift_weakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_BYTE *)(v13 + 96) = 1;
  v14 = v13 + direct field offset for TargetingEntityGesture.EntityTargetState._ray;
  v15 = type metadata accessor for CollisionCastHit();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v14, 1, 1, v15);
  v16(v14, 1, 1, v15);
  v17 = v24;
  swift_retain();
  ObservationRegistrar.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v11, v8);
  v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>);
  swift_weakInit();
  outlined init with take of Animation?((uint64_t)v7, a3 + v18[10], &demangling cache variable for type metadata for QueryPredicate<Entity>?);
  v19 = (_QWORD *)(a3 + v18[11]);
  *v19 = v25;
  v19[1] = v17;
  v20 = (_QWORD *)(a3 + v18[12]);
  v26 = v13;
  result = State.init(wrappedValue:)();
  v22 = v28;
  *v20 = v27;
  v20[1] = v22;
  return result;
}

uint64_t Gesture.targetedToInteraction(enabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v6 = v5;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v6, a3);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v15, 1, 1, v19);
  swift_retain();
  v22 = default argument 4 of TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)(a3, a4, v20, v21);
  return TargetingEntityGesture.init(wrapped:entity:query:triggerEnabled:state:)((uint64_t)v17, (uint64_t)v15, a1, a2, v22, a5);
}

uint64_t TargetingEntityGesture.EntityTargetState.entity.getter()
{
  _QWORD *KeyPath;

  KeyPath = (_QWORD *)swift_getKeyPath();
  TargetingEntityGesture.EntityTargetState.access<A>(keyPath:)(KeyPath);
  swift_release();
  return swift_weakLoadStrong();
}

uint64_t TargetingEntityGesture.EntityTargetState.entity.setter()
{
  _QWORD *KeyPath;

  KeyPath = (_QWORD *)swift_getKeyPath();
  TargetingEntityGesture.EntityTargetState.withMutation<A, B>(keyPath:_:)(KeyPath);
  swift_release();
  return swift_release();
}

uint64_t TargetingEntityGesture.EntityTargetState.view.getter()
{
  uint64_t v0;
  _QWORD *KeyPath;

  KeyPath = (_QWORD *)swift_getKeyPath();
  TargetingEntityGesture.EntityTargetState.access<A>(keyPath:)(KeyPath);
  swift_release();
  return MEMORY[0x23B7D34DC](v0 + 24);
}

void TargetingEntityGesture.EntityTargetState.view.setter(void *a1)
{
  _QWORD *KeyPath;

  KeyPath = (_QWORD *)swift_getKeyPath();
  TargetingEntityGesture.EntityTargetState.withMutation<A, B>(keyPath:_:)(KeyPath);
  swift_release();

}

__n128 TargetingEntityGesture.EntityTargetState.defaultPlane.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *KeyPath;
  char v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  KeyPath = (_QWORD *)swift_getKeyPath();
  TargetingEntityGesture.EntityTargetState.access<A>(keyPath:)(KeyPath);
  swift_release();
  v4 = *(_BYTE *)(v1 + 96);
  v5 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v1 + 64);
  v7 = *(_OWORD *)(v1 + 80);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 64) = v4;
  return result;
}

uint64_t TargetingEntityGesture.EntityTargetState.defaultPlane.setter()
{
  _QWORD *KeyPath;

  KeyPath = (_QWORD *)swift_getKeyPath();
  TargetingEntityGesture.EntityTargetState.withMutation<A, B>(keyPath:_:)(KeyPath);
  return swift_release();
}

uint64_t TargetingEntityGesture.EntityTargetState.ray.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v4;

  KeyPath = (_QWORD *)swift_getKeyPath();
  TargetingEntityGesture.EntityTargetState.access<A>(keyPath:)(KeyPath);
  swift_release();
  v4 = v1 + direct field offset for TargetingEntityGesture.EntityTargetState._ray;
  swift_beginAccess();
  return outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v4, a1, &demangling cache variable for type metadata for CollisionCastHit?);
}

uint64_t key path setter for TargetingEntityGesture.EntityTargetState.ray : <A>TargetingEntityGesture<A>.EntityTargetState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(a1, (uint64_t)v4, &demangling cache variable for type metadata for CollisionCastHit?);
  return TargetingEntityGesture.EntityTargetState.ray.setter((uint64_t)v4);
}

uint64_t TargetingEntityGesture.EntityTargetState.ray.setter(uint64_t a1)
{
  _QWORD *KeyPath;

  KeyPath = (_QWORD *)swift_getKeyPath();
  TargetingEntityGesture.EntityTargetState.withMutation<A, B>(keyPath:_:)(KeyPath);
  swift_release();
  return outlined destroy of URL?(a1, &demangling cache variable for type metadata for CollisionCastHit?);
}

uint64_t closure #1 in TargetingEntityGesture.EntityTargetState.ray.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + direct field offset for TargetingEntityGesture.EntityTargetState._ray;
  swift_beginAccess();
  outlined assign with copy of CollisionCastHit?(a2, v3);
  return swift_endAccess();
}

uint64_t TargetingEntityGesture.EntityTargetState.access<A>(keyPath:)(_QWORD *a1)
{
  MEMORY[0x23B7D3350](&protocol conformance descriptor for TargetingEntityGesture<A>.EntityTargetState, *(_QWORD *)(*a1 + *MEMORY[0x24BEE46A8]));
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t TargetingEntityGesture.EntityTargetState.withMutation<A, B>(keyPath:_:)(_QWORD *a1)
{
  MEMORY[0x23B7D3350](&protocol conformance descriptor for TargetingEntityGesture<A>.EntityTargetState, *(_QWORD *)(*a1 + *MEMORY[0x24BEE46A8]));
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t TargetingEntityGesture.EntityTargetState.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();
  outlined destroy of URL?(v0 + direct field offset for TargetingEntityGesture.EntityTargetState._ray, &demangling cache variable for type metadata for CollisionCastHit?);
  v1 = v0 + direct field offset for TargetingEntityGesture.EntityTargetState._$observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t TargetingEntityGesture.EntityTargetState.__deallocating_deinit()
{
  TargetingEntityGesture.EntityTargetState.deinit();
  return swift_deallocClassInstance();
}

uint64_t TargetingEntityGesture.EntityTargetState.__allocating_init()()
{
  swift_allocObject();
  return TargetingEntityGesture.EntityTargetState.init()();
}

uint64_t TargetingEntityGesture.EntityTargetState.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t, uint64_t, uint64_t);
  char *v6;
  _OWORD v8[4];
  char v9;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakInit();
  swift_weakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  memset(v8, 0, sizeof(v8));
  v9 = 1;
  outlined init with take of Animation?((uint64_t)v8, v0 + 32, &demangling cache variable for type metadata for simd_float4x4?);
  outlined init with take of Animation?((uint64_t)v8, v0 + 32, &demangling cache variable for type metadata for simd_float4x4?);
  v4 = type metadata accessor for CollisionCastHit();
  v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v6 = (char *)(v0 + direct field offset for TargetingEntityGesture.EntityTargetState._ray);
  outlined init with take of Animation?((uint64_t)v3, v0 + direct field offset for TargetingEntityGesture.EntityTargetState._ray, &demangling cache variable for type metadata for CollisionCastHit?);
  v5(v6, 1, 1, v4);
  ObservationRegistrar.init()();
  return v0;
}

uint64_t property wrapper backing initializer of TargetingEntityGesture.state(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for TargetingEntityGesture.EntityTargetState(0, *(_QWORD *)(*(_QWORD *)a1 + 80), *(_QWORD *)(*(_QWORD *)a1 + 88), a4);
  State.init(wrappedValue:)();
  return v5;
}

uint64_t TargetingEntityGesture.state.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for TargetingEntityGesture.EntityTargetState(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  type metadata accessor for State();
  State.wrappedValue.getter();
  return v5;
}

uint64_t TargetingEntityGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = TargetingEntityGesture.buildTargetingEntityGesture()(a1);
  *a2 = result;
  return result;
}

uint64_t TargetingEntityGesture.buildTargetingEntityGesture()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v4);
  v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[2] = v10;
  v11 = v8;
  v52 = *(_QWORD *)(v8 + 24);
  v12 = type metadata accessor for PlatformViewHitTestFilterGesture();
  v49 = *(_QWORD *)(v12 - 8);
  v42 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v41 = (char *)v37 - v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v53 = type metadata accessor for EntityTargetValue(255, AssociatedTypeWitness, v15, v16);
  v43 = MEMORY[0x23B7D3350](MEMORY[0x24BDF11B8], v12);
  v17 = type metadata accessor for _MapGesture();
  v48 = *(_QWORD *)(v17 - 8);
  v45 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v40 = (char *)v37 - v18;
  v46 = MEMORY[0x23B7D3350](MEMORY[0x24BDEB9B8], v17);
  v47 = type metadata accessor for _EndedGesture();
  MEMORY[0x24BDAC7A8](v47);
  v44 = (char *)v37 - v19;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v51 = v1;
  v20(v10, v1, v6);
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v50(v5, v1, v11);
  v21 = *(unsigned __int8 *)(v2 + 80);
  v22 = (v21 + 32) & ~v21;
  v37[0] = v22;
  v37[1] = v21 | 7;
  v39 = v22 + v3;
  v23 = swift_allocObject();
  v24 = v52;
  *(_QWORD *)(v23 + 16) = v6;
  *(_QWORD *)(v23 + 24) = v24;
  v25 = v23 + v22;
  v26 = *(void (**)(uint64_t, char *, uint64_t))(v2 + 32);
  v27 = v5;
  v26(v25, v5, v11);
  v28 = v41;
  v38 = v6;
  PlatformViewHitTestFilterGesture.init(_:filter:)();
  v50(v27, v51, v11);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v6;
  *(_QWORD *)(v29 + 24) = v24;
  v30 = v37[0];
  v26(v29 + v37[0], v27, v11);
  v31 = v40;
  v32 = v42;
  Gesture.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v32);
  v50(v27, v51, v11);
  v33 = swift_allocObject();
  v34 = v52;
  *(_QWORD *)(v33 + 16) = v38;
  *(_QWORD *)(v33 + 24) = v34;
  v26(v33 + v30, v27, v11);
  v35 = v45;
  Gesture.onEnded(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v35);
  MEMORY[0x23B7D3350](MEMORY[0x24BDEC410], v47);
  return AnyGesture.init<A>(_:)();
}

uint64_t closure #1 in TargetingEntityGesture.buildTargetingEntityGesture()(void *a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v9 = type metadata accessor for TargetingEntityGesture(0, a5, a6, a6);
  specialized TargetingEntityGesture.populateState(from:at:with:)(a1, *(uint64_t *)&a2, *(uint64_t *)&a3, 0, v9);
  TargetingEntityGesture.state.getter(v9, v10, v11, v12);
  v13 = (void *)TargetingEntityGesture.EntityTargetState.view.getter();
  swift_release();

  if (!v13)
    return 0;
  TargetingEntityGesture.state.getter(v9, v14, v15, v16);
  v17 = TargetingEntityGesture.EntityTargetState.entity.getter();
  swift_release();
  if (!v17)
    return 0;
  v18 = TargetingEntityGesture.check(against:)(v17, v9);
  swift_release();
  return v18 & 1;
}

uint64_t TargetingEntityGesture.check(against:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v17 - v13;
  if (!swift_weakLoadStrong())
  {
    outlined init with copy of ZStack<_ConditionalContent<_ConditionalContent<ModifiedContent<ModifiedContent<IDView<CoveragePointCloudFullView, Int>, _BackgroundStyleModifier<Color>>, _SafeAreaRegionsIgnoringLayout>, FreeformFullView>, EmptyView>>(v2 + *(int *)(a2 + 40), (uint64_t)v7, &demangling cache variable for type metadata for QueryPredicate<Entity>?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
      v18 = a1;
      v15 = QueryPredicate.evaluate(value:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return v15 & 1;
    }
    outlined destroy of URL?((uint64_t)v7, &demangling cache variable for type metadata for QueryPredicate<Entity>?);
    if (((*(uint64_t (**)(uint64_t))(v2 + *(int *)(a2 + 44)))(a1) & 1) == 0)
    {
      v15 = 1;
      return v15 & 1;
    }
    dispatch thunk of Entity.scene.getter();
    type metadata accessor for Entity();
    static QueryPredicate.canInteract(on:)();
    swift_release();
    v18 = a1;
    v15 = QueryPredicate.evaluate(value:)();
    goto LABEL_8;
  }
  type metadata accessor for Entity();
  if ((static Entity.== infix(_:_:)() & 1) == 0)
  {
    static QueryPredicate.isDescendant(of:)();
    v18 = a1;
    v15 = QueryPredicate.evaluate(value:)();
    swift_release();
LABEL_8:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return v15 & 1;
  }
  swift_release();
  v15 = 1;
  return v15 & 1;
}

void closure #2 in TargetingEntityGesture.buildTargetingEntityGesture()(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[80];

  v29 = a1;
  v30 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v29 - v10;
  v13 = type metadata accessor for TargetingEntityGesture(0, a2, a3, v12);
  TargetingEntityGesture.state.getter(v13, v14, v15, v16);
  v17 = TargetingEntityGesture.EntityTargetState.entity.getter();
  swift_release();
  if (v17)
  {
    TargetingEntityGesture.state.getter(v13, v18, v19, v20);
    v21 = (void *)TargetingEntityGesture.EntityTargetState.view.getter();
    swift_release();
    if (v21)
    {
      type metadata accessor for PlatformViewHitTestFilterGesture.Value();
      PlatformViewHitTestFilterGesture.Value.gestureValue.getter();
      v22 = v21;
      TargetingEntityGesture.state.getter(v13, v23, v24, v25);
      TargetingEntityGesture.EntityTargetState.defaultPlane.getter((uint64_t)v31);
      swift_release();
      TargetingEntityGesture.state.getter(v13, v26, v27, v28);
      TargetingEntityGesture.EntityTargetState.ray.getter((uint64_t)v8);
      swift_release();
      EntityTargetValue.init(gestureValue:entity:view:defaultPlane:ray:)((uint64_t)v11, v17, (uint64_t)v21, (uint64_t)v31, (uint64_t)v8, AssociatedTypeWitness, v30);

      return;
    }
    swift_release();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t EntityTargetValue.init(gestureValue:entity:view:defaultPlane:ray:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13 = (int *)type metadata accessor for EntityTargetValue(0, a6, a3, a4);
  v14 = v13[8];
  v15 = a7 + v13[9];
  v16 = a7 + v13[10];
  v17 = type metadata accessor for CollisionCastHit();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(a7, a1, a6);
  *(_QWORD *)(a7 + v13[7]) = a2;
  *(_QWORD *)(a7 + v14) = a3;
  outlined init with take of Animation?(a4, v15, &demangling cache variable for type metadata for simd_float4x4?);
  return outlined assign with take of CollisionCastHit?(a5, v16);
}

uint64_t closure #3 in TargetingEntityGesture.buildTargetingEntityGesture()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v25[4];
  char v26;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TargetingEntityGesture(0, a3, a4, v9);
  TargetingEntityGesture.state.getter(v10, v11, v12, v13);
  TargetingEntityGesture.EntityTargetState.entity.setter();
  swift_release();
  TargetingEntityGesture.state.getter(v10, v14, v15, v16);
  TargetingEntityGesture.EntityTargetState.view.setter(0);
  swift_release();
  TargetingEntityGesture.state.getter(v10, v17, v18, v19);
  memset(v25, 0, sizeof(v25));
  v26 = 1;
  TargetingEntityGesture.EntityTargetState.defaultPlane.setter();
  swift_release();
  TargetingEntityGesture.state.getter(v10, v20, v21, v22);
  v23 = type metadata accessor for CollisionCastHit();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v8, 1, 1, v23);
  TargetingEntityGesture.EntityTargetState.ray.setter((uint64_t)v8);
  return swift_release();
}

uint64_t EntityTargetValue.gestureValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t EntityTargetValue.gestureValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*EntityTargetValue.gestureValue.modify())()
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

uint64_t EntityTargetValue.entity.getter()
{
  return swift_retain();
}

uint64_t EntityTargetValue.entity.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 28);
  result = swift_release();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*EntityTargetValue.entity.modify())()
{
  return closure #1 in BoundingBoxRotateManipulator.requestAsyncModelLoad();
}

uint64_t EntityTargetValue.subscript.getter()
{
  return swift_getAtKeyPath();
}

void EntityTapTriggerGesture.init()(uint64_t (**a1)()@<X8>)
{
  *a1 = protocol witness for static Equatable.== infix(_:_:) in conformance FreeformCloudRenderer.Error;
  a1[1] = 0;
}

uint64_t EntityTapTriggerGesture.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t EntityTapTriggerGesture.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;

  v14 = a1;
  v2 = type metadata accessor for TapGesture();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EndedGesture<TargetingEntityGesture<TapGesture>>);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *v1;
  v11 = v1[1];
  TapGesture.init(count:)();
  specialized Gesture.targetedToInteraction(enabled:)(v10, v11, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type TargetingEntityGesture<TapGesture> and conformance TargetingEntityGesture<A>, &demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>, (uint64_t)&protocol conformance descriptor for TargetingEntityGesture<A>);
  Gesture.onEnded(_:)();
  outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityTargetValue<()>);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<TargetingEntityGesture<TapGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<TargetingEntityGesture<TapGesture>>, MEMORY[0x24BDEC410]);
  result = AnyGesture.init<A>(_:)();
  *v14 = result;
  return result;
}

BOOL closure #1 in EntityTapTriggerGesture.body.getter()
{
  return Entity.applyTapForBehaviors()();
}

uint64_t protocol witness for Gesture.body.getter in conformance EntityTapTriggerGesture@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;

  v14 = a1;
  v2 = type metadata accessor for TapGesture();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EndedGesture<TargetingEntityGesture<TapGesture>>);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *v1;
  v11 = v1[1];
  TapGesture.init(count:)();
  specialized Gesture.targetedToInteraction(enabled:)(v10, v11, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type TargetingEntityGesture<TapGesture> and conformance TargetingEntityGesture<A>, &demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>, (uint64_t)&protocol conformance descriptor for TargetingEntityGesture<A>);
  Gesture.onEnded(_:)();
  outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for TargetingEntityGesture<TapGesture>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityTargetValue<()>);
  lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type _EndedGesture<TargetingEntityGesture<TapGesture>> and conformance _EndedGesture<A>, &demangling cache variable for type metadata for _EndedGesture<TargetingEntityGesture<TapGesture>>, MEMORY[0x24BDEC410]);
  result = AnyGesture.init<A>(_:)();
  *v14 = result;
  return result;
}

uint64_t static EntityTargetValue<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v6 = type metadata accessor for EntityTargetValue(0, a3, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v18 - v11;
  v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14(v12, a1, v6);
  v14(v10, a2, v6);
  if ((v13 & 1) != 0)
  {
    type metadata accessor for Entity();
    v15 = static Entity.== infix(_:_:)();
  }
  else
  {
    v15 = 0;
  }
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v12, v6);
  v16(v10, v6);
  return v15 & 1;
}

uint64_t type metadata accessor for EntityTargetValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EntityTargetValue);
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in EntityTapTriggerGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> EntityTargetValue<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EntityTargetValue<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

void type metadata completion function for TargetingEntityGesture.EntityTargetState()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CollisionCastHit?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F)
      swift_initClassMetadata2();
  }
}

uint64_t type metadata accessor for TargetingEntityGesture.EntityTargetState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TargetingEntityGesture.EntityTargetState);
}

void type metadata accessor for CollisionCastHit?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CollisionCastHit?)
  {
    type metadata accessor for CollisionCastHit();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CollisionCastHit?);
  }
}

void type metadata completion function for EntityTargetValue()
{
  unint64_t v0;
  unint64_t v1;

  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CollisionCastHit?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for EntityTargetValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for CollisionCastHit() - 8) + 80);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = *a2;
  *a1 = *a2;
  v9 = (v7 | v6) & 0xF0 | 0xFu;
  v10 = v8 + ((v9 + 16) & ~v9);
  swift_retain();
  return v10;
}

uint64_t destroy for EntityTargetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = ((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  v4 &= 0xFFFFFFFFFFFFF8uLL;

  v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF0;
  v6 = type metadata accessor for CollisionCastHit();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (v5 + *(unsigned __int8 *)(v7 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))(v8, v6);
  return result;
}

uint64_t initializeWithCopy for EntityTargetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  id v22;
  size_t v23;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  v10 = (void **)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  *v9 = *v10;
  v12 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0;
  v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  LOBYTE(v10) = *(_BYTE *)(v13 + 0x40);
  v15 = *(_OWORD *)(v13 + 32);
  v14 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
  *(_OWORD *)(v12 + 32) = v15;
  *(_OWORD *)(v12 + 48) = v14;
  *(_BYTE *)(v12 + 64) = (_BYTE)v10;
  v16 = type metadata accessor for CollisionCastHit();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (void *)((v18 + 65 + v12) & ~v18);
  v20 = (const void *)((v18 + 65 + v13) & ~v18);
  v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
  swift_retain();
  v22 = v11;
  if (v21(v20, 1, v16))
  {
    if (*(_DWORD *)(v17 + 84))
      v23 = *(_QWORD *)(v17 + 64);
    else
      v23 = *(_QWORD *)(v17 + 64) + 1;
    memcpy(v19, v20, v23);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v19, v20, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for EntityTargetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  void **v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  size_t v28;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v10 = (void **)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (v9 & 0xFFFFFFFFFFFFF8) + 23;
  v11 = *(void **)(v9 & 0xFFFFFFFFFFFFF8);
  v13 = *v10;
  *v10 = v11;
  v14 = v11;

  v15 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0;
  v16 = v12 & 0xFFFFFFFFFFFFFFF0;
  *(_OWORD *)v15 = *(_OWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x10);
  v18 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x20);
  v19 = *(_OWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x30);
  *(_BYTE *)(v15 + 64) = *(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x40);
  *(_OWORD *)(v15 + 32) = v18;
  *(_OWORD *)(v15 + 48) = v19;
  *(_OWORD *)(v15 + 16) = v17;
  v20 = type metadata accessor for CollisionCastHit();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (void *)((v22 + 65 + v15) & ~v22);
  v24 = (void *)((v22 + 65 + v16) & ~v22);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  v26 = v25(v23, 1, v20);
  v27 = v25(v24, 1, v20);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v23, v24, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, v20);
      return a1;
    }
  }
  else
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v23, v24, v20);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v23, v20);
  }
  if (*(_DWORD *)(v21 + 84))
    v28 = *(_QWORD *)(v21 + 64);
  else
    v28 = *(_QWORD *)(v21 + 64) + 1;
  memcpy(v23, v24, v28);
  return a1;
}

uint64_t initializeWithTake for EntityTargetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0;
  v12 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_OWORD *)v11 = *(_OWORD *)v12;
  LOBYTE(v10) = *(_BYTE *)(v12 + 0x40);
  v14 = *(_OWORD *)(v12 + 32);
  v13 = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
  *(_OWORD *)(v11 + 32) = v14;
  *(_OWORD *)(v11 + 48) = v13;
  *(_BYTE *)(v11 + 64) = (_BYTE)v10;
  v15 = type metadata accessor for CollisionCastHit();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (void *)((v17 + 65 + v11) & ~v17);
  v19 = (const void *)((v17 + 65 + v12) & ~v17);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15))
  {
    if (*(_DWORD *)(v16 + 84))
      v20 = *(_QWORD *)(v16 + 64);
    else
      v20 = *(_QWORD *)(v16 + 64) + 1;
    memcpy(v18, v19, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v18, v19, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for EntityTargetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  void **v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  size_t v24;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = (void **)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (void **)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  v11 = *v9;
  *v9 = *v10;

  v12 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0;
  v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v14 = *(_OWORD *)(v13 + 0x10);
  v15 = *(_OWORD *)(v13 + 0x20);
  v16 = *(_OWORD *)(v13 + 0x30);
  *(_BYTE *)(v12 + 64) = *(_BYTE *)(v13 + 0x40);
  *(_OWORD *)(v12 + 32) = v15;
  *(_OWORD *)(v12 + 48) = v16;
  *(_OWORD *)(v12 + 16) = v14;
  v17 = type metadata accessor for CollisionCastHit();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (void *)((v19 + 65 + v12) & ~v19);
  v21 = (void *)((v19 + 65 + v13) & ~v19);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v13) = v22(v20, 1, v17);
  v23 = v22(v21, 1, v17);
  if ((_DWORD)v13)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v20, v21, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v17);
      return a1;
    }
  }
  else
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v20, v21, v17);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  }
  if (*(_DWORD *)(v18 + 84))
    v24 = *(_QWORD *)(v18 + 64);
  else
    v24 = *(_QWORD *)(v18 + 64) + 1;
  memcpy(v20, v21, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityTargetValue(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(type metadata accessor for CollisionCastHit() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = v9 - 1;
  if (!v9)
    v10 = 0;
  if (v7 <= v10)
    v11 = v10;
  else
    v11 = v7;
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  if (v9)
    v13 = *(_QWORD *)(v8 + 64);
  else
    v13 = *(_QWORD *)(v8 + 64) + 1;
  if (!a2)
    return 0;
  v14 = *(_QWORD *)(v6 + 64);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = v15 + 65;
  if (a2 <= v12)
    goto LABEL_31;
  v17 = v13
      + ((v16 + ((((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF0)) & ~v15);
  v18 = 8 * v17;
  if (v17 > 3)
    goto LABEL_15;
  v20 = ((a2 - v12 + ~(-1 << v18)) >> v18) + 1;
  if (HIWORD(v20))
  {
    v19 = *(_DWORD *)(a1 + v17);
    if (v19)
      goto LABEL_22;
LABEL_31:
    if ((_DWORD)v7 == v12)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
    v23 = (unint64_t *)((a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((v11 & 0x80000000) == 0)
    {
      v24 = *v23;
      if (v24 >= 0xFFFFFFFF)
        LODWORD(v24) = -1;
      return (v24 + 1);
    }
    if (v9 >= 2)
    {
      v25 = (*(uint64_t (**)(unint64_t))(v8 + 48))((v16
                                                                   + (((((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                     + 23) & 0xFFFFFFFFFFFFFFF0)) & ~v15);
      if (v25 >= 2)
        return v25 - 1;
      else
        return 0;
    }
    return 0;
  }
  if (v20 > 0xFF)
  {
    v19 = *(unsigned __int16 *)(a1 + v17);
    if (*(_WORD *)(a1 + v17))
      goto LABEL_22;
    goto LABEL_31;
  }
  if (v20 < 2)
    goto LABEL_31;
LABEL_15:
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_31;
LABEL_22:
  v21 = (v19 - 1) << v18;
  if (v17 > 3)
    v21 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v22 = v17;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v12 + v21 + 1;
}

void storeEnumTagSinglePayload for EntityTargetValue(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = 0;
  v10 = *(_QWORD *)(type metadata accessor for CollisionCastHit() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = v11 - 1;
  if (!v11)
    v12 = 0;
  if (v8 > v12)
    v12 = v8;
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  v14 = *(_QWORD *)(v10 + 64);
  if (!v11)
    ++v14;
  v15 = v14
      + ((*(unsigned __int8 *)(v10 + 80)
        + 65
        + ((((((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF0)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  if (a3 > v13)
  {
    if (v15 > 3)
    {
      v9 = 1u;
      if (v13 >= a2)
LABEL_26:
        __asm { BR              X16 }
LABEL_19:
      v17 = ~v13 + a2;
      if (v15 < 4)
      {
        if ((_DWORD)v15)
        {
          v18 = v17 & ~(-1 << (8 * v15));
          bzero(a1, v15);
          if ((_DWORD)v15 == 3)
          {
            *(_WORD *)a1 = v18;
            a1[2] = BYTE2(v18);
          }
          else if ((_DWORD)v15 == 2)
          {
            *(_WORD *)a1 = v18;
          }
          else
          {
            *a1 = v18;
          }
        }
      }
      else
      {
        bzero(a1, v15);
        *(_DWORD *)a1 = v17;
      }
      __asm { BR              X10 }
    }
    v16 = ((a3 - v13 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v16))
    {
      v9 = 4u;
      if (v13 >= a2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v16 >= 0x100)
      v9 = 2;
    else
      v9 = v16 > 1;
  }
  if (v13 >= a2)
    goto LABEL_26;
  goto LABEL_19;
}

void sub_2356B01C0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x2356B01E0);
}

void sub_2356B01C8()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x2356B01E0);
}

void sub_2356B01D0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x2356B01E0);
}

ValueMetadata *type metadata accessor for EntityTapTriggerGesture()
{
  return &type metadata for EntityTapTriggerGesture;
}

void sub_2356B020C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TargetingEntityGesture(255, *a1, a1[1], a4);
  JUMPOUT(0x23B7D3350);
}

uint64_t type metadata accessor for TargetingEntityGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TargetingEntityGesture);
}

uint64_t sub_2356B0240()
{
  return lazy protocol witness table accessor for type LoadRequest<ModelEntity> and conformance LoadRequest<A>(&lazy protocol witness table cache variable for type AnyGesture<EntityTargetValue<()>> and conformance AnyGesture<A>, &demangling cache variable for type metadata for AnyGesture<EntityTargetValue<()>>, MEMORY[0x24BDEAEF0]);
}

uint64_t type metadata instantiation function for TargetingEntityGesture()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata completion function for TargetingEntityGesture()
{
  unint64_t v0;
  unint64_t v1;

  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for QueryPredicate<Entity>?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for TargetingEntityGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>)
                             - 8)
                 + 80);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = *a2;
  *a1 = *a2;
  v9 = (v7 | v6) & 0xF8 | 7u;
  v10 = v8 + ((v9 + 16) & ~v9);
  swift_retain();
  return v10;
}

uint64_t destroy for TargetingEntityGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_weakDestroy();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for TargetingEntityGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  swift_weakCopyInit();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)((v11 + 8 + v7) & ~v11);
  v13 = (const void *)((v11 + 8 + v8) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
    if (v14)
      v16 = *(_QWORD *)(v10 + 64);
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v12, v13, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  v18 = (_QWORD *)(((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TargetingEntityGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  size_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  swift_weakCopyAssign();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)((v11 + 8 + v7) & ~v11);
  v13 = (void *)((v11 + 8 + v8) & ~v11);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v14(v12, 1, v9);
  v15 = v14(v13, 1, v9);
  if ((_DWORD)v8)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v12, v13, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v12, v13, v9);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  }
  if (*(_DWORD *)(v10 + 84))
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = *(_QWORD *)(v10 + 64) + 1;
  memcpy(v12, v13, v16);
LABEL_10:
  if (*(_DWORD *)(v10 + 84))
    v17 = *(_QWORD *)(v10 + 64);
  else
    v17 = *(_QWORD *)(v10 + 64) + 1;
  v18 = (_QWORD *)(((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_retain();
  swift_release();
  v21 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  swift_retain();
  swift_release();
  v21[1] = v22[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TargetingEntityGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  swift_weakTakeInit();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)((v11 + 8 + v7) & ~v11);
  v13 = (const void *)((v11 + 8 + v8) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
    if (v14)
      v16 = *(_QWORD *)(v10 + 64);
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v12, v13, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  v18 = (_OWORD *)(((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFF8);
  v19 = (_OWORD *)(((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  *(_OWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TargetingEntityGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  size_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  swift_weakTakeAssign();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)((v11 + 8 + v7) & ~v11);
  v13 = (void *)((v11 + 8 + v8) & ~v11);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v14(v12, 1, v9);
  v15 = v14(v13, 1, v9);
  if ((_DWORD)v8)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  }
  if (*(_DWORD *)(v10 + 84))
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = *(_QWORD *)(v10 + 64) + 1;
  memcpy(v12, v13, v16);
LABEL_10:
  if (*(_DWORD *)(v10 + 84))
    v17 = *(_QWORD *)(v10 + 64);
  else
    v17 = *(_QWORD *)(v10 + 64) + 1;
  v18 = (_OWORD *)(((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (uint64_t)v13 + v17 + 7;
  v20 = (v19 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v18 = *(_OWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v21 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  v20 &= 0xFFFFFFFFFFFFFFF8;
  *v21 = *(_QWORD *)v20;
  swift_release();
  v21[1] = *(_QWORD *)(v20 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TargetingEntityGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>)
                 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = v10;
  if (v11 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v9)
    ++v12;
  if (!a2)
    return 0;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = v12 + 7;
  if (v11 < a2)
  {
    if (((((((v15 + ((v14 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v16 = 2;
    else
      v16 = a2 - v11 + 1;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    __asm { BR              X0 }
  }
  if ((_DWORD)v7 == v11)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
  v20 = (((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + v14 + 8) & ~v14;
  if (v10 == v11)
  {
    if (v9 < 2)
      return 0;
    v22 = (*(uint64_t (**)(unint64_t))(v8 + 48))(v20);
    if (v22 >= 2)
      return v22 - 1;
    else
      return 0;
  }
  else
  {
    v21 = *(_QWORD *)((v15 + v20) & 0xFFFFFFFFFFFFF8);
    if (v21 >= 0xFFFFFFFF)
      LODWORD(v21) = -1;
    return (v21 + 1);
  }
}

void storeEnumTagSinglePayload for TargetingEntityGesture(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = 0;
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>)
                  - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v8)
    v13 = v8;
  else
    v13 = v12;
  if (v13 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = *(_QWORD *)(v10 + 64);
  if (!v11)
    ++v16;
  v14 = *(_QWORD *)(v7 + 64);
  if (v13 < a3)
  {
    if ((((((_DWORD)v16 + 7 + (((_DWORD)v15 + (((_DWORD)v14 + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v15)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v17 = a3 - v13 + 1;
    else
      v17 = 2;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v9 = v18;
    else
      v9 = 0;
  }
  if (a2 > v13)
  {
    if ((((((_DWORD)v16 + 7 + (((_DWORD)v15 + (((_DWORD)v14 + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v15)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v19 = ~v13 + a2;
      bzero(a1, ((((v16 + 7 + ((v15 + ((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = v19;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

void sub_2356B0D88(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  *(_BYTE *)(v10 + v13) = 0;
  if ((_DWORD)v9)
  {
    if ((_DWORD)v12 == v3)
    {
      v15 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v16 = v10;
      v17 = v9;
      a1 = v12;
      a2 = v11;
LABEL_6:
      v15(v16, v17, a1, a2);
      return;
    }
    v16 = (((v10 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + v5 + 8) & v8;
    if (v4 == v3)
    {
      v17 = (v9 + 1);
      v15 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
      goto LABEL_6;
    }
    v18 = (_QWORD *)((v7 + v16) & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 0x80000000) != 0)
    {
      v19 = v9 ^ 0x80000000;
      v18[1] = 0;
    }
    else
    {
      v19 = (v9 - 1);
    }
    *v18 = v19;
  }
}

void type metadata accessor for QueryPredicate<Entity>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for QueryPredicate<Entity>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for QueryPredicate<Entity>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for QueryPredicate<Entity>?);
  }
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in TargetingEntityGesture<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in TargetingEntityGesture.buildTargetingEntityGesture()(void *a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = *(_QWORD *)(v6 + 16);
  v11 = *(_QWORD *)(v6 + 24);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TargetingEntityGesture(0, v10, v11, a6) - 8) + 80);
  return closure #1 in TargetingEntityGesture.buildTargetingEntityGesture()(a1, a2, a3, v6 + ((v12 + 32) & ~v12), v10, v11);
}

void partial apply for closure #2 in TargetingEntityGesture.buildTargetingEntityGesture()(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  type metadata accessor for TargetingEntityGesture(0, v6, v7, a2);
  closure #2 in TargetingEntityGesture.buildTargetingEntityGesture()(a1, v6, v7, a3);
}

uint64_t objectdestroyTm_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for TargetingEntityGesture(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v7 + 32) & ~v7), v5);
  swift_weakDestroy();
  v8 = v4 + ((v7 + 32) & ~v7) + *(int *)(v6 + 40);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicate<Entity>);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in TargetingEntityGesture.buildTargetingEntityGesture()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TargetingEntityGesture(0, v6, v7, a4) - 8) + 80);
  return closure #3 in TargetingEntityGesture.buildTargetingEntityGesture()(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t outlined assign with take of CollisionCastHit?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized SIMD.init<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 3;
    if ((unint64_t)(v1 - 1) < 3)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 4;
    if ((unint64_t)(v1 - 1) < 4)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 2;
    if ((unint64_t)(v1 - 1) < 2)
      v3 = v1 - 1;
    v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v2 & 1))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (!v3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 3;
    if ((unint64_t)(v1 - 1) < 3)
      v3 = v1 - 1;
    v4 = 0uLL;
    v5 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      v6 = *(_QWORD *)(result + 32 + 8 * v2);
      v7 = v4;
      v8 = v5;
      *((_QWORD *)&v7 + (v2 & 3)) = v6;
      v4 = v7;
      v5 = v8;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

void specialized TargetingEntityGesture.populateState(from:at:with:)(void *x0_0, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Type;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t active;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  id v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  __int128 v69;
  float32x4_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char v75;
  simd_float4x4 v76;

  v70.i64[0] = a5;
  v68 = a4;
  v66 = a2;
  v67 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v63 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v61 - v9;
  v11 = type metadata accessor for CollisionGroup();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Type = type metadata accessor for CollisionCastQueryType();
  v16 = *(_QWORD *)(Type - 8);
  MEMORY[0x24BDAC7A8](Type);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CollisionCastHit();
  v65 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v64 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (x0_0)
  {
    type metadata accessor for ARView();
    v21 = swift_dynamicCastClass();
    if (v21)
    {
      v22 = (void *)v21;
      v61 = v19;
      v23 = x0_0;
      TargetingEntityGesture.state.getter(v70.i64[0], v24, v25, v26);
      v62 = v23;
      TargetingEntityGesture.EntityTargetState.view.setter(v22);
      swift_release();
      if ((v68 & 1) != 0)
      {

      }
      else
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BDE66D8], Type);
        static CollisionGroup.all.getter();
        v27 = ARView.hitTest(_:requireInputTarget:query:mask:)();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, Type);
        v28 = v65;
        if (*(_QWORD *)(v27 + 16))
        {
          v29 = v61;
          (*(void (**)(char *, unint64_t, uint64_t))(v65 + 16))(v10, v27 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80)), v61);
          v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
          v30(v10, 0, 1, v29);
        }
        else
        {
          v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56);
          v29 = v61;
          v30(v10, 1, 1, v61);
        }
        v31 = v64;
        v32 = v70.i64[0];
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v10, 1, v29) == 1)
        {

          outlined destroy of URL?((uint64_t)v10, &demangling cache variable for type metadata for CollisionCastHit?);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v10, v29);
          TargetingEntityGesture.state.getter(v32, v33, v34, v35);
          CollisionCastHit.entity.getter();
          TargetingEntityGesture.EntityTargetState.entity.setter();
          swift_release();
          TargetingEntityGesture.state.getter(v32, v36, v37, v38);
          v39 = (uint64_t)v63;
          (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v63, v31, v29);
          v30((char *)v39, 0, 1, v29);
          TargetingEntityGesture.EntityTargetState.ray.setter(v39);
          swift_release();
          dispatch thunk of ARView.scene.getter();
          active = dispatch thunk of Scene.internalActiveCamera.getter();
          swift_release();
          if (active)
          {
            TargetingEntityGesture.state.getter(v32, v41, v42, v43);
            specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of TargetingEntityGesture.populateState(from:at:with:));
            v70 = v44;
            type metadata accessor for Entity();
            HasTransform.transformMatrix(relativeTo:)();
            *(double *)v45.i64 = simd_quaternion(v76);
            v46 = (int32x4_t)vmulq_f32(v45, (float32x4_t)xmmword_2356BCB70);
            v47 = (int32x4_t)vnegq_f32((float32x4_t)v46);
            v48 = (int8x16_t)vtrn2q_s32(v46, vtrn1q_s32(v46, v47));
            v49 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 8uLL), (float32x4_t)0), (float32x4_t)0, (float32x4_t)vextq_s8(v48, v48, 8uLL));
            v50 = (float32x4_t)vrev64q_s32(v46);
            v50.i32[0] = v47.i32[1];
            v50.i32[3] = v47.i32[2];
            v51 = (int32x4_t)vaddq_f32(v50, v49);
            v52 = (int32x4_t)vnegq_f32((float32x4_t)v51);
            v53 = (int8x16_t)vtrn2q_s32(v51, vtrn1q_s32(v51, v52));
            v54 = (float32x4_t)vrev64q_s32(v51);
            v54.i32[0] = v52.i32[1];
            v54.i32[3] = v52.i32[2];
            *(double *)v55.i64 = simd_quaternion(v70, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v51, v45, 3), v54, v45, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v52, 8uLL), *(float32x2_t *)v45.f32, 1), (float32x4_t)vextq_s8(v53, v53, 8uLL), v45.f32[0])));
            v70 = v55;
            CollisionCastHit.position.getter();
            v69 = v56;
            static simd_quatf.identity.getter();
            *(double *)&v57 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v69, v70);
            v71 = v57;
            v72 = v58;
            v73 = v59;
            v74 = v60;
            v75 = 0;
            TargetingEntityGesture.EntityTargetState.defaultPlane.setter();

            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v29);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v29);

          }
        }
      }
    }
  }
}

uint64_t sub_2356B1830@<X0>(uint64_t a1@<X8>)
{
  return TargetingEntityGesture.EntityTargetState.ray.getter(a1);
}

uint64_t sub_2356B1854()
{
  return 16;
}

__n128 sub_2356B1860(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for closure #1 in TargetingEntityGesture.EntityTargetState.ray.setter()
{
  uint64_t v0;

  return closure #1 in TargetingEntityGesture.EntityTargetState.ray.setter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t outlined assign with copy of CollisionCastHit?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_2356B18CC@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[80];

  TargetingEntityGesture.EntityTargetState.defaultPlane.getter((uint64_t)v3);
  return outlined init with take of Animation?((uint64_t)v3, a1, &demangling cache variable for type metadata for simd_float4x4?);
}

uint64_t sub_2356B1910(uint64_t a1)
{
  uint64_t v2;

  outlined init with take of Animation?(a1, (uint64_t)&v2, &demangling cache variable for type metadata for simd_float4x4?);
  return TargetingEntityGesture.EntityTargetState.defaultPlane.setter();
}

uint64_t sub_2356B1950()
{
  return 16;
}

__n128 sub_2356B195C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for closure #1 in TargetingEntityGesture.EntityTargetState.defaultPlane.setter()
{
  uint64_t v0;

  return outlined init with take of Animation?(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 16) + 32, &demangling cache variable for type metadata for simd_float4x4?);
}

uint64_t sub_2356B199C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = TargetingEntityGesture.EntityTargetState.view.getter();
  *a1 = result;
  return result;
}

void sub_2356B19C4(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  TargetingEntityGesture.EntityTargetState.view.setter(v1);
}

uint64_t sub_2356B19F0()
{
  return 16;
}

__n128 sub_2356B19FC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for closure #1 in TargetingEntityGesture.EntityTargetState.view.setter()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_2356B1A24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = TargetingEntityGesture.EntityTargetState.entity.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2356B1A4C()
{
  swift_retain();
  return TargetingEntityGesture.EntityTargetState.entity.setter();
}

uint64_t sub_2356B1A74()
{
  return 16;
}

__n128 sub_2356B1A80(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for closure #1 in TargetingEntityGesture.EntityTargetState.entity.setter()
{
  return swift_weakAssign();
}

void sub_2356B1AA8()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for EntityTargetValue(255, AssociatedTypeWitness, v1, v2);
  type metadata accessor for AnyGesture();
  JUMPOUT(0x23B7D3350);
}

id closure #1 in variable initialization expression of static VoxelRenderer.mtlLibrary()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  if (one-time initialization token for mtlDevice != -1)
    swift_once();
  v0 = (void *)static VoxelRenderer.mtlDevice;
  if (one-time initialization token for bundle != -1)
    swift_once();
  v6[0] = 0;
  v1 = objc_msgSend(v0, sel_newDefaultLibraryWithBundle_error_, static VoxelRenderer.bundle, v6);
  if (v1)
  {
    v2 = v6[0];
  }
  else
  {
    v3 = v6[0];
    v4 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

uint64_t VoxelRenderer.init(view:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v3 = v1;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_OWORD *)(v1 + 48) = xmmword_2356C2E40;
  *(_OWORD *)(v1 + 64) = xmmword_2356BE0D0;
  *(_QWORD *)(v1 + 80) = 2;
  if (one-time initialization token for mtlDevice != -1)
    swift_once();
  *(_QWORD *)(v1 + 16) = static VoxelRenderer.mtlDevice;
  swift_unknownObjectRetain();
  *(_QWORD *)(v1 + 40) = VoxelRenderer.makeCubePrimitive()();
  swift_unknownObjectRelease();
  if (*(_QWORD *)(v1 + 40))
  {
    VoxelRenderer.initRenderPipeline(colorPixelFormat:)((uint64_t)objc_msgSend(a1, sel_colorPixelFormat));
    if (v2)
      swift_release();
  }
  else
  {
    swift_release();
    if (one-time initialization token for logger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_2355E9000, v6, v7, "Can't make cube primitive!", v8, 2u);
      MEMORY[0x23B7D3428](v8, -1, -1);
    }

    lazy protocol witness table accessor for type VoxelRenderer.Error and conformance VoxelRenderer.Error();
    swift_allocError();
    swift_willThrow();
  }

  return v3;
}

void VoxelRenderer.render(encoder:uniforms:pointCloud:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  const char *v12;
  uint64_t v13;
  NSObject *oslog;

  v3 = v2;
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  v6 = dispatch thunk of OCDataBuffer.count.getter();
  swift_release();
  if (v6 <= 0)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    v10 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(oslog, v10))
      goto LABEL_14;
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    v12 = "No point cloud points, can't render!";
    goto LABEL_13;
  }
  ObjectCaptureSession.Frame.PointCloud.points.getter();
  v7 = dispatch thunk of OCDataBuffer.asMTLBuffer(from:)();
  swift_release();
  if (!v7)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)logger);
    oslog = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v10))
      goto LABEL_14;
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    v12 = "Can't get coverage point clouds MTLBuffer!";
LABEL_13:
    _os_log_impl(&dword_2355E9000, oslog, v10, v12, v11, 2u);
    MEMORY[0x23B7D3428](v11, -1, -1);
LABEL_14:

    return;
  }
  v8 = (void *)MEMORY[0x23B7D2498](0xD000000000000014, 0x80000002356C9180);
  objc_msgSend(a1, sel_pushDebugGroup_, v8);

  objc_msgSend(a1, sel_setCullMode_, 1);
  objc_msgSend(a1, sel_setDepthStencilState_, v3[4]);
  if (v3[3])
  {
    objc_msgSend(a1, sel_setRenderPipelineState_);
    objc_msgSend(a1, sel_setVertexBuffer_offset_atIndex_, v3[5], 0, 0);
    objc_msgSend(a1, sel_setVertexBuffer_offset_atIndex_, a2, 0, 1);
    objc_msgSend(a1, sel_setVertexBuffer_offset_atIndex_, v7, 0, 2);
    objc_msgSend(a1, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, 36, v6);
    objc_msgSend(a1, sel_popDebugGroup);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void VoxelRenderer.initRenderPipeline(colorPixelFormat:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD590]), sel_init);
  objc_msgSend(v4, sel_setDepthCompareFunction_, 1);
  objc_msgSend(v4, sel_setDepthWriteEnabled_, 1);
  v5 = objc_msgSend(*(id *)(v1 + 16), sel_newDepthStencilStateWithDescriptor_, v4);
  if (v5)
  {
    *(_QWORD *)(v1 + 32) = v5;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    VoxelRenderer.makeRenderPipelineState(colorPixelFormat:mtlVertexDescriptor:)(a1, 0);
    v7 = v6;

    swift_unknownObjectRelease();
    if (!v2)
    {
      *(_QWORD *)(v1 + 24) = v7;
      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_2355E9000, v9, v10, "Can't make depth stencil state!", v11, 2u);
      MEMORY[0x23B7D3428](v11, -1, -1);
    }

    lazy protocol witness table accessor for type VoxelRenderer.Error and conformance VoxelRenderer.Error();
    swift_allocError();
    swift_willThrow();

  }
}

void VoxelRenderer.makeRenderPipelineState(colorPixelFormat:mtlVertexDescriptor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  void *v40;
  id v41;
  id v42;
  id v43[2];

  v43[1] = *(id *)MEMORY[0x24BDAC8D0];
  if (one-time initialization token for mtlLibrary != -1)
    swift_once();
  v5 = (void *)static VoxelRenderer.mtlLibrary;
  if (!static VoxelRenderer.mtlLibrary)
  {
    lazy protocol witness table accessor for type VoxelRenderer.Error and conformance VoxelRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  swift_unknownObjectRetain();
  v6 = (void *)MEMORY[0x23B7D2498](0xD000000000000024, 0x80000002356C9120);
  v7 = v5;
  v8 = objc_msgSend(v5, sel_newFunctionWithName_, v6);

  v42 = v8;
  if (!v8)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)logger);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = (void *)swift_slowAlloc();
      v43[0] = v35;
      *(_DWORD *)v34 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x80000002356C9120, (uint64_t *)v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2355E9000, v32, v33, "Can't find vertex function: \"%s\"", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7D3428](v35, -1, -1);
      MEMORY[0x23B7D3428](v34, -1, -1);
    }

    lazy protocol witness table accessor for type VoxelRenderer.Error and conformance VoxelRenderer.Error();
    swift_allocError();
    swift_willThrow();
    goto LABEL_31;
  }
  v9 = (void *)MEMORY[0x23B7D2498](0xD000000000000025, 0x80000002356C9150);
  v10 = objc_msgSend(v7, sel_newFunctionWithName_, v9);

  if (!v10)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)logger);
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      v40 = (void *)swift_slowAlloc();
      v43[0] = v40;
      *(_DWORD *)v39 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000002356C9150, (uint64_t *)v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2355E9000, v37, v38, "Can't find fragment function: \"%s\"", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7D3428](v40, -1, -1);
      MEMORY[0x23B7D3428](v39, -1, -1);
    }

    lazy protocol witness table accessor for type VoxelRenderer.Error and conformance VoxelRenderer.Error();
    swift_allocError();
    swift_willThrow();
LABEL_30:
    swift_unknownObjectRelease();
LABEL_31:
    swift_unknownObjectRelease();
    return;
  }
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD6B8]), sel_init);
  v12 = (void *)MEMORY[0x23B7D2498](0x69507265646E6552, 0xEE00656E696C6570);
  objc_msgSend(v11, sel_setLabel_, v12);

  objc_msgSend(v11, sel_setVertexFunction_, v42);
  objc_msgSend(v11, sel_setFragmentFunction_, v10);
  if (a2)
    objc_msgSend(v11, sel_setVertexDescriptor_, a2);
  v13 = objc_msgSend(v11, sel_colorAttachments);
  v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, 0);

  if (!v14)
  {
    __break(1u);
    goto LABEL_33;
  }
  objc_msgSend(v14, sel_setPixelFormat_, a1);

  v15 = objc_msgSend(v11, sel_colorAttachments);
  v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  if (!v16)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  objc_msgSend(v16, sel_setBlendingEnabled_, 1);

  v17 = objc_msgSend(v11, sel_colorAttachments);
  v18 = objc_msgSend(v17, sel_objectAtIndexedSubscript_, 0);

  if (!v18)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  objc_msgSend(v18, sel_setRgbBlendOperation_, 0);

  v19 = objc_msgSend(v11, sel_colorAttachments);
  v20 = objc_msgSend(v19, sel_objectAtIndexedSubscript_, 0);

  if (!v20)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  objc_msgSend(v20, sel_setAlphaBlendOperation_, 0);

  v21 = objc_msgSend(v11, sel_colorAttachments);
  v22 = objc_msgSend(v21, sel_objectAtIndexedSubscript_, 0);

  if (!v22)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  objc_msgSend(v22, sel_setSourceRGBBlendFactor_, 4);

  v23 = objc_msgSend(v11, sel_colorAttachments);
  v24 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, 0);

  if (!v24)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  objc_msgSend(v24, sel_setSourceAlphaBlendFactor_, 4);

  v25 = objc_msgSend(v11, sel_colorAttachments);
  v26 = objc_msgSend(v25, sel_objectAtIndexedSubscript_, 0);

  if (!v26)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  objc_msgSend(v26, sel_setDestinationRGBBlendFactor_, 5);

  v27 = objc_msgSend(v11, sel_colorAttachments);
  v28 = objc_msgSend(v27, sel_objectAtIndexedSubscript_, 0);

  if (v28)
  {
    objc_msgSend(v28, sel_setDestinationAlphaBlendFactor_, 5);

    objc_msgSend(v11, sel_setDepthAttachmentPixelFormat_, *(_QWORD *)(v2 + 56));
    objc_msgSend(v11, sel_setStencilAttachmentPixelFormat_, 0);
    v29 = *(void **)(v2 + 16);
    v43[0] = 0;
    if (objc_msgSend(v29, sel_newRenderPipelineStateWithDescriptor_error_, v11, v43))
    {
      v30 = v43[0];
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      return;
    }
    v41 = v43[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unknownObjectRelease();

    goto LABEL_30;
  }
LABEL_39:
  __break(1u);
}

id VoxelRenderer.makeCubePrimitive()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *isUniquelyReferenced_nonNull_native;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  int64_t v27;
  _QWORD *v28;
  int64_t v29;
  int64_t v30;
  __int128 v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  __int128 v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  int64_t v45;
  _QWORD *v46;
  int64_t v47;
  int64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  __int128 v52;
  unint64_t v53;
  __int128 v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  int64_t v63;
  _QWORD *v64;
  int64_t v65;
  int64_t v66;
  _QWORD *v67;
  unint64_t v68;
  _QWORD *v69;
  __int128 v70;
  unint64_t v71;
  _QWORD *v72;
  __int128 v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  _QWORD *v80;
  int64_t v81;
  _QWORD *v82;
  int64_t v83;
  int64_t v84;
  _QWORD *v85;
  unint64_t v86;
  _QWORD *v87;
  __int128 v88;
  unint64_t v89;
  _QWORD *v90;
  __int128 v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  id v98;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectCaptureCubeVertex>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2356BBF50;
  *(_OWORD *)(v1 + 32) = xmmword_2356C2E50;
  *(_QWORD *)(v1 + 48) = 0;
  *(_OWORD *)(v1 + 64) = xmmword_2356C2E60;
  *(_QWORD *)(v1 + 80) = 0x3F80000000000000;
  *(_OWORD *)(v1 + 96) = xmmword_2356C2E70;
  *(_QWORD *)(v1 + 112) = 1065353216;
  *(_OWORD *)(v1 + 128) = xmmword_2356C2E60;
  *(_QWORD *)(v1 + 144) = 0x3F80000000000000;
  *(_OWORD *)(v1 + 160) = xmmword_2356C2E80;
  __asm { FMOV            V9.2S, #1.0 }
  *(_QWORD *)(v1 + 176) = _D9;
  *(_OWORD *)(v1 + 192) = xmmword_2356C2E70;
  *(_QWORD *)(v1 + 208) = 1065353216;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, 12, 1, (_QWORD *)v1);
  v10 = v8[2];
  v9 = v8[3];
  v11 = v9 >> 1;
  v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
    v9 = v8[3];
    v11 = v9 >> 1;
  }
  v8[2] = v12;
  v13 = &v8[4 * v10];
  *((_OWORD *)v13 + 2) = xmmword_2356C2E90;
  v13[6] = 0;
  v14 = v10 + 2;
  if (v11 < (uint64_t)(v10 + 2))
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 2, 1, v8);
    v9 = v8[3];
    v11 = v9 >> 1;
  }
  v8[2] = v14;
  v15 = &v8[4 * v12];
  v16 = xmmword_2356C2EA0;
  *((_OWORD *)v15 + 2) = xmmword_2356C2EA0;
  v15[6] = 0x3F80000000000000;
  v17 = v10 + 3;
  if (v11 < (uint64_t)(v10 + 3))
  {
    v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 3, 1, v8);
    v16 = xmmword_2356C2EA0;
    v8 = v100;
    v9 = v100[3];
    v11 = v9 >> 1;
  }
  v8[2] = v17;
  v18 = &v8[4 * v14];
  v19 = xmmword_2356C2EB0;
  *((_OWORD *)v18 + 2) = xmmword_2356C2EB0;
  v18[6] = 1065353216;
  v20 = v10 + 4;
  if (v11 < (uint64_t)(v10 + 4))
  {
    v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 4, 1, v8);
    v19 = xmmword_2356C2EB0;
    v16 = xmmword_2356C2EA0;
    v8 = v101;
    v9 = v101[3];
    v11 = v9 >> 1;
  }
  v8[2] = v20;
  v21 = &v8[4 * v17];
  *((_OWORD *)v21 + 2) = v16;
  v21[6] = 0x3F80000000000000;
  v22 = v10 + 5;
  if (v11 < (uint64_t)(v10 + 5))
  {
    v122 = v19;
    v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 5, 1, v8);
    v19 = v122;
    v8 = v102;
    v9 = v102[3];
    v11 = v9 >> 1;
  }
  v8[2] = v22;
  v23 = &v8[4 * v20];
  *((_OWORD *)v23 + 2) = xmmword_2356C2EC0;
  v23[6] = _D9;
  if (v11 < (uint64_t)(v10 + 6))
  {
    v123 = v19;
    v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 6, 1, v8);
    v19 = v123;
    v8 = v103;
  }
  v8[2] = v10 + 6;
  v24 = &v8[4 * v22];
  *((_OWORD *)v24 + 2) = v19;
  v24[6] = 1065353216;
  swift_bridgeObjectRelease();
  v26 = (_QWORD *)v8[2];
  v27 = (int64_t)v26 + 6;
  if (__OFADD__(v26, 6))
  {
    __break(1u);
LABEL_92:
    v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v27, 1, v26);
    v31 = xmmword_2356C2E70;
    v26 = v104;
    v25 = v104[3];
    v29 = v25 >> 1;
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  v28 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)v28 && (v25 = v8[3], v29 = v25 >> 1, (uint64_t)(v25 >> 1) >= v27))
  {
    v26 = v8;
  }
  else
  {
    if ((uint64_t)v26 <= v27)
      v30 = (int64_t)v26 + 6;
    else
      v30 = (int64_t)v26;
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28, v30, 1, v8);
    v25 = v26[3];
    v29 = v25 >> 1;
  }
  v31 = xmmword_2356C2E70;
  v10 = v26[2];
  v27 = v10 + 1;
  if (v29 <= v10)
    goto LABEL_92;
LABEL_22:
  v26[2] = v27;
  v32 = &v26[4 * v10];
  *((_OWORD *)v32 + 2) = xmmword_2356C2E50;
  v32[6] = 0;
  v33 = v10 + 2;
  if (v29 < (uint64_t)(v10 + 2))
  {
    v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v10 + 2, 1, v26);
    v31 = xmmword_2356C2E70;
    v26 = v105;
    v25 = v105[3];
    v29 = v25 >> 1;
  }
  v26[2] = v33;
  v34 = &v26[4 * v27];
  *((_OWORD *)v34 + 2) = v31;
  v34[6] = 0x3F80000000000000;
  v35 = v10 + 3;
  if (v29 < (uint64_t)(v10 + 3))
  {
    v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v10 + 3, 1, v26);
    v31 = xmmword_2356C2E70;
    v26 = v106;
    v25 = v106[3];
    v29 = v25 >> 1;
  }
  v26[2] = v35;
  v36 = &v26[4 * v33];
  v37 = xmmword_2356C2ED0;
  *((_OWORD *)v36 + 2) = xmmword_2356C2ED0;
  v36[6] = 1065353216;
  v38 = v10 + 4;
  if (v29 < (uint64_t)(v10 + 4))
  {
    v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v10 + 4, 1, v26);
    v37 = xmmword_2356C2ED0;
    v31 = xmmword_2356C2E70;
    v26 = v107;
    v25 = v107[3];
    v29 = v25 >> 1;
  }
  v26[2] = v38;
  v39 = &v26[4 * v35];
  *((_OWORD *)v39 + 2) = v31;
  v39[6] = 0x3F80000000000000;
  v40 = v10 + 5;
  if (v29 < (uint64_t)(v10 + 5))
  {
    v124 = v37;
    v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v10 + 5, 1, v26);
    v37 = v124;
    v26 = v108;
    v25 = v108[3];
    v29 = v25 >> 1;
  }
  v26[2] = v40;
  v41 = &v26[4 * v38];
  *((_OWORD *)v41 + 2) = xmmword_2356C2EE0;
  v41[6] = _D9;
  if (v29 < (uint64_t)(v10 + 6))
  {
    v125 = v37;
    v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v10 + 6, 1, v26);
    v37 = v125;
    v26 = v109;
  }
  v26[2] = v10 + 6;
  v42 = &v26[4 * v40];
  *((_OWORD *)v42 + 2) = v37;
  v42[6] = 1065353216;
  swift_bridgeObjectRelease();
  v44 = (_QWORD *)v26[2];
  v45 = (int64_t)v44 + 6;
  if (__OFADD__(v44, 6))
  {
    __break(1u);
LABEL_94:
    v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v45, 1, v44);
    v43 = v44[3];
    v47 = v43 >> 1;
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v46 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)v46 && (v43 = v26[3], v47 = v43 >> 1, (uint64_t)(v43 >> 1) >= v45))
  {
    v44 = v26;
  }
  else
  {
    if ((uint64_t)v44 <= v45)
      v48 = (int64_t)v44 + 6;
    else
      v48 = (int64_t)v44;
    v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46, v48, 1, v26);
    v43 = v44[3];
    v47 = v43 >> 1;
  }
  v10 = v44[2];
  v45 = v10 + 1;
  if (v47 <= v10)
    goto LABEL_94;
LABEL_41:
  v44[2] = v45;
  v49 = &v44[4 * v10];
  *((_OWORD *)v49 + 2) = xmmword_2356C2EF0;
  v49[6] = 0;
  v50 = v10 + 2;
  if (v47 < (uint64_t)(v10 + 2))
  {
    v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v10 + 2, 1, v44);
    v43 = v44[3];
    v47 = v43 >> 1;
  }
  v44[2] = v50;
  v51 = &v44[4 * v45];
  v52 = xmmword_2356C2F00;
  *((_OWORD *)v51 + 2) = xmmword_2356C2F00;
  v51[6] = 0x3F80000000000000;
  v53 = v10 + 3;
  v54 = xmmword_2356C2EA0;
  if (v47 < (uint64_t)(v10 + 3))
  {
    v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v10 + 3, 1, v44);
    v52 = xmmword_2356C2F00;
    v54 = xmmword_2356C2EA0;
    v44 = v110;
    v43 = v110[3];
    v47 = v43 >> 1;
  }
  v44[2] = v53;
  v55 = &v44[4 * v50];
  *((_OWORD *)v55 + 2) = v54;
  v55[6] = 1065353216;
  v56 = v10 + 4;
  if (v47 < (uint64_t)(v10 + 4))
  {
    v126 = v52;
    v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v10 + 4, 1, v44);
    v52 = v126;
    v54 = xmmword_2356C2EA0;
    v44 = v111;
    v43 = v111[3];
    v47 = v43 >> 1;
  }
  v44[2] = v56;
  v57 = &v44[4 * v53];
  *((_OWORD *)v57 + 2) = v52;
  v57[6] = 0x3F80000000000000;
  v58 = v10 + 5;
  if (v47 < (uint64_t)(v10 + 5))
  {
    v112 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v10 + 5, 1, v44);
    v54 = xmmword_2356C2EA0;
    v44 = v112;
    v43 = v112[3];
    v47 = v43 >> 1;
  }
  v44[2] = v58;
  v59 = &v44[4 * v56];
  *((_OWORD *)v59 + 2) = xmmword_2356C2EC0;
  v59[6] = _D9;
  if (v47 < (uint64_t)(v10 + 6))
  {
    v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v10 + 6, 1, v44);
    v54 = xmmword_2356C2EA0;
    v44 = v113;
  }
  v44[2] = v10 + 6;
  v60 = &v44[4 * v58];
  *((_OWORD *)v60 + 2) = v54;
  v60[6] = 1065353216;
  swift_bridgeObjectRelease();
  v62 = (_QWORD *)v44[2];
  v63 = (int64_t)v62 + 6;
  if (__OFADD__(v62, 6))
  {
    __break(1u);
LABEL_96:
    v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v61 > 1), v63, 1, v62);
    v61 = v62[3];
    v65 = v61 >> 1;
    goto LABEL_60;
  }
  swift_bridgeObjectRetain();
  v64 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)v64 && (v61 = v44[3], v65 = v61 >> 1, (uint64_t)(v61 >> 1) >= v63))
  {
    v62 = v44;
  }
  else
  {
    if ((uint64_t)v62 <= v63)
      v66 = (int64_t)v62 + 6;
    else
      v66 = (int64_t)v62;
    v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64, v66, 1, v44);
    v61 = v62[3];
    v65 = v61 >> 1;
  }
  v10 = v62[2];
  v63 = v10 + 1;
  if (v65 <= v10)
    goto LABEL_96;
LABEL_60:
  v62[2] = v63;
  v67 = &v62[4 * v10];
  *((_OWORD *)v67 + 2) = xmmword_2356C2F10;
  v67[6] = 0;
  v68 = v10 + 2;
  if (v65 < (uint64_t)(v10 + 2))
  {
    v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v61 > 1), v10 + 2, 1, v62);
    v61 = v62[3];
    v65 = v61 >> 1;
  }
  v62[2] = v68;
  v69 = &v62[4 * v63];
  v70 = xmmword_2356C2F20;
  *((_OWORD *)v69 + 2) = xmmword_2356C2F20;
  v69[6] = 0x3F80000000000000;
  v71 = v10 + 3;
  if (v65 < (uint64_t)(v10 + 3))
  {
    v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v61 > 1), v10 + 3, 1, v62);
    v70 = xmmword_2356C2F20;
    v62 = v114;
    v61 = v114[3];
    v65 = v61 >> 1;
  }
  v62[2] = v71;
  v72 = &v62[4 * v68];
  v73 = xmmword_2356C2F30;
  *((_OWORD *)v72 + 2) = xmmword_2356C2F30;
  v72[6] = 1065353216;
  v74 = v10 + 4;
  if (v65 < (uint64_t)(v10 + 4))
  {
    v127 = v70;
    v115 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v61 > 1), v10 + 4, 1, v62);
    v70 = v127;
    v73 = xmmword_2356C2F30;
    v62 = v115;
    v61 = v115[3];
    v65 = v61 >> 1;
  }
  v62[2] = v74;
  v75 = &v62[4 * v71];
  *((_OWORD *)v75 + 2) = v70;
  v75[6] = 0x3F80000000000000;
  v76 = v10 + 5;
  if (v65 < (uint64_t)(v10 + 5))
  {
    v129 = v73;
    v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v61 > 1), v10 + 5, 1, v62);
    v73 = v129;
    v62 = v116;
    v61 = v116[3];
    v65 = v61 >> 1;
  }
  v62[2] = v76;
  v77 = &v62[4 * v74];
  *((_OWORD *)v77 + 2) = xmmword_2356C2F40;
  v77[6] = _D9;
  if (v65 < (uint64_t)(v10 + 6))
  {
    v130 = v73;
    v117 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v61 > 1), v10 + 6, 1, v62);
    v73 = v130;
    v62 = v117;
  }
  v62[2] = v10 + 6;
  v78 = &v62[4 * v76];
  *((_OWORD *)v78 + 2) = v73;
  v78[6] = 1065353216;
  swift_bridgeObjectRelease();
  v80 = (_QWORD *)v62[2];
  v81 = (int64_t)v80 + 6;
  if (__OFADD__(v80, 6))
  {
    __break(1u);
LABEL_98:
    v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v79 > 1), v81, 1, v80);
    v79 = v80[3];
    v83 = v79 >> 1;
    goto LABEL_79;
  }
  swift_bridgeObjectRetain();
  v82 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)v82 && (v79 = v62[3], v83 = v79 >> 1, (uint64_t)(v79 >> 1) >= v81))
  {
    v80 = v62;
  }
  else
  {
    if ((uint64_t)v80 <= v81)
      v84 = (int64_t)v80 + 6;
    else
      v84 = (int64_t)v80;
    v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v82, v84, 1, v62);
    v79 = v80[3];
    v83 = v79 >> 1;
  }
  v10 = v80[2];
  v81 = v10 + 1;
  if (v83 <= v10)
    goto LABEL_98;
LABEL_79:
  v80[2] = v81;
  v85 = &v80[4 * v10];
  *((_OWORD *)v85 + 2) = xmmword_2356C2F50;
  v85[6] = 0;
  v86 = v10 + 2;
  if (v83 < (uint64_t)(v10 + 2))
  {
    v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v79 > 1), v10 + 2, 1, v80);
    v79 = v80[3];
    v83 = v79 >> 1;
  }
  v80[2] = v86;
  v87 = &v80[4 * v81];
  v88 = xmmword_2356C2F60;
  *((_OWORD *)v87 + 2) = xmmword_2356C2F60;
  v87[6] = 0x3F80000000000000;
  v89 = v10 + 3;
  if (v83 < (uint64_t)(v10 + 3))
  {
    v118 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v79 > 1), v10 + 3, 1, v80);
    v88 = xmmword_2356C2F60;
    v80 = v118;
    v79 = v118[3];
    v83 = v79 >> 1;
  }
  v80[2] = v89;
  v90 = &v80[4 * v86];
  v91 = xmmword_2356C2F70;
  *((_OWORD *)v90 + 2) = xmmword_2356C2F70;
  v90[6] = 1065353216;
  v92 = v10 + 4;
  if (v83 < (uint64_t)(v10 + 4))
  {
    v128 = v88;
    v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v79 > 1), v10 + 4, 1, v80);
    v88 = v128;
    v91 = xmmword_2356C2F70;
    v80 = v119;
    v79 = v119[3];
    v83 = v79 >> 1;
  }
  v80[2] = v92;
  v93 = &v80[4 * v89];
  *((_OWORD *)v93 + 2) = v88;
  v93[6] = 0x3F80000000000000;
  v94 = v10 + 5;
  if (v83 < (uint64_t)(v10 + 5))
  {
    v131 = v91;
    v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v79 > 1), v10 + 5, 1, v80);
    v91 = v131;
    v80 = v120;
    v79 = v120[3];
    v83 = v79 >> 1;
  }
  v80[2] = v94;
  v95 = &v80[4 * v92];
  *((_OWORD *)v95 + 2) = xmmword_2356C2F80;
  v95[6] = _D9;
  if (v83 < (uint64_t)(v10 + 6))
  {
    v132 = v91;
    v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v79 > 1), v10 + 6, 1, v80);
    v91 = v132;
    v80 = v121;
  }
  v80[2] = v10 + 6;
  v96 = (uint64_t)&v80[4 * v94 + 4];
  *(_OWORD *)v96 = v91;
  *(_QWORD *)(v96 + 16) = 1065353216;
  swift_bridgeObjectRelease();
  v97 = v80[2];
  if (v97 >> 58)
    __break(1u);
  v98 = objc_msgSend(*(id *)(v0 + 16), sel_newBufferWithBytes_length_options_, v80 + 4, 32 * v97, 0);
  swift_bridgeObjectRelease();
  return v98;
}

uint64_t VoxelRenderer.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VoxelRenderer()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type VoxelRenderer.Error and conformance VoxelRenderer.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VoxelRenderer.Error and conformance VoxelRenderer.Error;
  if (!lazy protocol witness table cache variable for type VoxelRenderer.Error and conformance VoxelRenderer.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for VoxelRenderer.Error, &type metadata for VoxelRenderer.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoxelRenderer.Error and conformance VoxelRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VoxelRenderer.Error and conformance VoxelRenderer.Error;
  if (!lazy protocol witness table cache variable for type VoxelRenderer.Error and conformance VoxelRenderer.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for VoxelRenderer.Error, &type metadata for VoxelRenderer.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoxelRenderer.Error and conformance VoxelRenderer.Error);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for VoxelRenderer.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2356B3878 + 4 * byte_2356C2FA0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2356B3898 + 4 * byte_2356C2FA5[v4]))();
}

_BYTE *sub_2356B3878(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2356B3898(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2356B38A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2356B38A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2356B38B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2356B38B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for VoxelRenderer.Error()
{
  return &type metadata for VoxelRenderer.Error;
}

uint64_t type metadata accessor for ViewAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewAdaptor);
}

uint64_t associated type witness table accessor for View.Body : View in ViewAdaptor<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ViewAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v10 = a1;
  *(_QWORD *)&v11 = a2;
  *((_QWORD *)&v11 + 1) = a3;
  v12 = a4;
  v7 = type metadata accessor for ViewAdaptor.Representation(0, a5, a3, a4);
  v8 = MEMORY[0x23B7D3350](&protocol conformance descriptor for ViewAdaptor<A>.Representation, v7);
  static ViewBuilder.buildExpression<A>(_:)(&v10, v7, v8);
  v10 = v13;
  v11 = v14;
  v12 = v15;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v10, v7, a6);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for UIViewRepresentable.makeUIView(context:) in conformance ViewAdaptor<A>.Representation()
{
  uint64_t (**v0)(void);

  return specialized ViewAdaptor.Representation.makeUIView(context:)(*v0);
}

uint64_t protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance ViewAdaptor<A>.Representation(uint64_t a1)
{
  uint64_t v1;

  return specialized ViewAdaptor.Representation.updateUIView(_:context:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(uint64_t (**)(void))(v1 + 16));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ViewAdaptor<A>.Representation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7D3350](&protocol conformance descriptor for ViewAdaptor<A>.Representation, a3);
  return static UIViewRepresentable._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ViewAdaptor<A>.Representation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7D3350](&protocol conformance descriptor for ViewAdaptor<A>.Representation, a3);
  return static UIViewRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance ViewAdaptor<A>.Representation(uint64_t a1)
{
  MEMORY[0x23B7D3350](&protocol conformance descriptor for ViewAdaptor<A>.Representation, a1);
  UIViewRepresentable.body.getter();
  __break(1u);
}

uint64_t protocol witness for View.body.getter in conformance ViewAdaptor<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return ViewAdaptor.body.getter(*v2, v2[1], v2[2], v2[3], *(_QWORD *)(a1 + 16), a2);
}

uint64_t type metadata accessor for ViewAdaptor.Representation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewAdaptor.Representation);
}

uint64_t destroy for ViewAdaptor()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ViewAdaptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ViewAdaptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ViewAdaptor(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

void sub_2356B3C64(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ViewAdaptor.Representation(255, *a1, a3, a4);
  JUMPOUT(0x23B7D3350);
}

void base witness table accessor for View in ViewAdaptor<A>.Representation()
{
  JUMPOUT(0x23B7D3350);
}

uint64_t specialized ViewAdaptor.Representation.makeUIView(context:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t specialized ViewAdaptor.Representation.updateUIView(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

double specialized KeyframeAnimation.duration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
    return *(double *)(v1 + 48 * v2 - 16);
  else
    return INFINITY;
}

void specialized KeyframeAnimation.sample(at:)(double a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (a1 < 0.0)
  {
    if (v4)
      return;
    __break(1u);
    goto LABEL_25;
  }
  if (!v4)
  {
    if (a1 > INFINITY)
    {
LABEL_32:
      __break(1u);
      return;
    }
LABEL_8:
    v6 = *(_QWORD *)(v1 + 24);
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6 < v4)
      {
        v7 = v3 + 32;
        if (*(double *)(v3 + 32 + 48 * v6) > a1)
          goto LABEL_13;
        if (v6 + 1 >= v4)
          goto LABEL_30;
        if (*(double *)(v7 + 48 * (v6 + 1)) < a1)
        {
LABEL_13:
          v2 = 0;
          specialized KeyframeAnimation.findLeftIndex(t:)(a1);
          *(_QWORD *)(v1 + 24) = v6;
          if ((v6 & 0x8000000000000000) != 0)
            goto LABEL_29;
          v4 = *(_QWORD *)(v3 + 16);
        }
        if (v6 < v4)
        {
          if (v6 + 1 < v4)
          {
            v18 = v7 + 48 * v6;
            v19 = v7 + 48 * (v6 + 1);
            v20 = (a1 - *(double *)v18) / (*(double *)v19 - *(double *)v18);
            specialized static PlatterAnimVar.lerp(a:b:alpha:)(*(float32x4_t *)(v18 + 16), *(double *)(v18 + 32), *(float32x4_t *)(v19 + 16), *(double *)(v19 + 32), v20);
            return;
          }
          goto LABEL_28;
        }
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        swift_once();
        v8 = type metadata accessor for Logger();
        __swift_project_value_buffer(v8, (uint64_t)logger);
        v9 = v2;
        v10 = v2;
        v11 = Logger.logObject.getter();
        v12 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v11, v12))
        {
          v13 = (uint8_t *)swift_slowAlloc();
          v14 = swift_slowAlloc();
          v21 = v14;
          *(_DWORD *)v13 = 136446210;
          v15 = v2;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
          v16 = String.init<A>(describing:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_2355E9000, v11, v12, "Unexpected error sampling animation: %{public}s", v13, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B7D3428](v14, -1, -1);
          MEMORY[0x23B7D3428](v13, -1, -1);
        }
        else
        {

        }
        if (*(_QWORD *)(v3 + 16))
        {

          return;
        }
        __break(1u);
        goto LABEL_32;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (*(double *)(v3 + 32 + 48 * (v4 - 1)) >= a1)
    goto LABEL_8;
}

void specialized KeyframeAnimation.findLeftIndex(t:)(double a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  double *v6;
  double v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  _BYTE *v13;

  if (a1 >= 0.0)
  {
    v2 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      if (*(double *)(v2 + 48 * v3 - 16) >= a1)
      {
        v4 = v3 - 2;
        if (v3 >= 2)
        {
          if (*(double *)(v2 + 80) < a1 && v3 >= 3)
          {
            v5 = 0;
            v6 = (double *)(v2 + 128);
            do
            {
              ++v5;
              v7 = *v6;
              v6 += 6;
            }
            while (v7 < a1 && v5 < v4);
          }
          return;
        }
LABEL_21:
        __break(1u);
        return;
      }
    }
    else if (a1 <= INFINITY)
    {
      goto LABEL_21;
    }
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  swift_retain();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    *(_DWORD *)v12 = 134349312;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2050;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_2355E9000, v10, v11, "Indexing animation out of range: %{public}f not in [0,%{public}f]", (uint8_t *)v12, 0x16u);
    MEMORY[0x23B7D3428](v12, -1, -1);

  }
  else
  {

    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyframeAnimation<PlatterAnimVar>.Error);
  lazy protocol witness table accessor for type KeyframeAnimation<PlatterAnimVar>.Error and conformance KeyframeAnimation<A>.Error();
  swift_allocError();
  *v13 = 3;
  swift_willThrow();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for RealityViewCameraConvertible(0);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t makeRadialPlatterAnimation(baseColor:pulseColor:duration:)(__n128 a1, __n128 a2, double a3)
{
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  double v10;
  __n128 *v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  __n128 *v15;
  unint64_t v16;
  unint64_t v17;
  __n128 *v18;
  unint64_t v19;
  unint64_t v20;
  __n128 *v21;
  unint64_t v22;
  __n128 *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;

  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v7 = v5[2];
  v6 = v5[3];
  v8 = v6 >> 1;
  v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
    v6 = v5[3];
    v8 = v6 >> 1;
  }
  v10 = a3 + a3;
  v5[2] = v9;
  v11 = (__n128 *)&v5[6 * v7];
  v11[2].n128_u64[0] = 0;
  v13 = a2;
  v12 = a1;
  v11[3] = a1;
  v11[4] = a1;
  v14 = v7 + 2;
  if (v8 < (uint64_t)(v7 + 2))
  {
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 2, 1, v5);
    v13 = a2;
    v12 = a1;
    v5 = v27;
  }
  v5[2] = v14;
  v15 = (__n128 *)&v5[6 * v9];
  v15[2].n128_f64[0] = v10 * 0.125;
  v15[3] = v13;
  v15[4] = v12;
  v16 = v5[3];
  v17 = v7 + 3;
  if ((uint64_t)(v7 + 3) > (uint64_t)(v16 >> 1))
  {
    v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v7 + 3, 1, v5);
    v13 = a2;
    v12 = a1;
    v5 = v28;
  }
  v5[2] = v17;
  v18 = (__n128 *)&v5[6 * v14];
  v18[2].n128_f64[0] = v10 * 0.25;
  v18[3] = v13;
  v18[4] = v13;
  v19 = v5[3];
  v20 = v7 + 4;
  if ((uint64_t)(v7 + 4) > (uint64_t)(v19 >> 1))
  {
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v7 + 4, 1, v5);
    v13 = a2;
    v12 = a1;
    v5 = v29;
  }
  v5[2] = v20;
  v21 = (__n128 *)&v5[6 * v17];
  v21[2].n128_f64[0] = v10 * 0.375;
  v21[3] = v12;
  v21[4] = v13;
  v22 = v5[3];
  if ((uint64_t)(v7 + 5) > (uint64_t)(v22 >> 1))
  {
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v7 + 5, 1, v5);
    v12 = a1;
    v5 = v30;
  }
  v5[2] = v7 + 5;
  v23 = (__n128 *)&v5[6 * v20];
  v23[2].n128_f64[0] = v10 * 0.5;
  v23[3] = v12;
  v23[4] = v12;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyframeAnimation<PlatterAnimVar>);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v5;
  *(_QWORD *)(v24 + 24) = 0;
  v25 = swift_bridgeObjectRetain();
  specialized KeyframeAnimation.throwIfInvalid(_:)(v25);
  swift_bridgeObjectRelease();
  if (v3)
    swift_release();
  return v24;
}

void makeTriangleVerticesForCircle(center:radius:fromAngle:angleRange:numSamples:)(uint64_t a1, float32x2_t a2, float a3, float a4, float a5)
{
  uint64_t v9;
  float v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float sinval;
  float32x2_t v15;
  __float2 v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;

  if (a3 <= 0.0 || a1 < 3)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    return;
  }
  v9 = a1 - 1;
  v10 = a5 / (float)(a1 - 1);
  v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v12 = 0;
  v13 = v11[2];
  do
  {
    v16 = __sincosf_stret((float)(v10 * (float)v12) + a4);
    v15.f32[0] = v16.__cosval;
    sinval = v16.__sinval;
    v17 = v11[3];
    if (v13 + v12 >= v17 >> 1)
    {
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v13 + v12 + 1, 1, v11);
      sinval = v16.__sinval;
      v15.i32[0] = LODWORD(v16.__cosval);
      v11 = v19;
    }
    v18 = v12 + 1;
    v15.f32[1] = sinval;
    v11[2] = v13 + v12 + 1;
    v11[v13 + 4 + v12] = vadd_f32(vmul_n_f32(v15, a3), a2);
    v12 = v18;
  }
  while (a1 != v18);
  v20 = v13 + v18;
  if (v20 == 1 || a1 - 2 > v20 - 1 || v20 < a1)
    goto LABEL_22;
  v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v22 = 0;
  do
  {
    v24 = v21[2];
    v23 = v21[3];
    v25 = v23 >> 1;
    v26 = v24 + 1;
    if (v23 >> 1 <= v24)
    {
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v21);
      v23 = v21[3];
      v25 = v23 >> 1;
    }
    v21[2] = v26;
    *(double *)&v21[v24 + 4] = *(double *)&a2;
    v27 = &v11[v22];
    v28 = v27[4];
    v29 = v24 + 2;
    if (v25 < (uint64_t)(v24 + 2))
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 2, 1, v21);
    v21[2] = v29;
    v21[v26 + 4] = v28;
    v30 = v27[5];
    v31 = v21[3];
    if ((uint64_t)(v24 + 3) > (uint64_t)(v31 >> 1))
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v24 + 3, 1, v21);
    ++v22;
    v21[2] = v24 + 3;
    v21[v29 + 4] = v30;
  }
  while (v9 != v22);
  swift_bridgeObjectRelease();
}

void PlatterRenderer.render(state:into:viewportSize:desc:depthStencilState:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  _QWORD *v6;
  float v11;
  float32x2_t v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  float v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  float v24;
  int v25;
  float v26;
  float *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  simd_float4 v34;
  simd_float4 v35;
  simd_float4 v36;
  float32x2_t v37;
  simd_float4 v38;
  simd_float4 v39;
  simd_float4 v40;
  simd_float4 v41;
  simd_float4 v42;
  simd_float4 v43;
  simd_float4 v44;
  simd_float4 v45;
  simd_float4 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  simd_float4 v53;
  simd_float4 v54;
  simd_float4 v55;
  simd_float4 v56;
  _QWORD v57[4];
  __int128 v58;
  simd_float4x4 v59;
  simd_float4x4 v60;
  simd_float4x4 v61;

  v51 = *(_OWORD *)(a1 + 80);
  v52 = *(_OWORD *)(a1 + 64);
  v49 = *(_OWORD *)(a1 + 112);
  v50 = *(_OWORD *)(a1 + 96);
  v43 = *(simd_float4 *)(a1 + 144);
  v45 = *(simd_float4 *)(a1 + 128);
  v39 = *(simd_float4 *)(a1 + 176);
  v41 = *(simd_float4 *)(a1 + 160);
  v55 = *(simd_float4 *)(a1 + 208);
  v56 = *(simd_float4 *)(a1 + 192);
  v54 = *(simd_float4 *)(a1 + 224);
  v53 = *(simd_float4 *)(a1 + 240);
  v11 = specialized static PlatterRenderer.computeScreenConstraintScale(from:)(a1);
  Transform.init(matrix:)();
  v37 = v12;
  v13 = specialized static PlatterRenderer.makeDepthHazeData(from:)((float32x4_t *)a1);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = specialized static PlatterRenderer.makeShotAnimationState(from:)(a1);
  v47 = v22;
  v48 = v21;
  v23 = (void *)v6[5];
  if (!v23)
  {
    __break(1u);
    goto LABEL_8;
  }
  v24 = v20;
  v25 = *(_DWORD *)(a1 + 272);
  v26 = vmuls_lane_f32(-0.5, v37, 1);
  v59.columns[1] = v55;
  v59.columns[0] = v56;
  v59.columns[2] = v54;
  v59.columns[3] = v53;
  v60 = __invert_f4(v59);
  v36 = v60.columns[1];
  v38 = v60.columns[0];
  v34 = v60.columns[3];
  v35 = v60.columns[2];
  v60.columns[1] = v43;
  v60.columns[0] = v45;
  v60.columns[3] = v39;
  v60.columns[2] = v41;
  v61 = __invert_f4(v60);
  v44 = v61.columns[1];
  v46 = v61.columns[0];
  v40 = v61.columns[3];
  v42 = v61.columns[2];
  v27 = (float *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v28 = v23;
  *(_OWORD *)v27 = v52;
  *((_OWORD *)v27 + 1) = v51;
  *((_OWORD *)v27 + 2) = v50;
  *((_OWORD *)v27 + 3) = v49;
  *((simd_float4 *)v27 + 4) = v46;
  *((simd_float4 *)v27 + 5) = v44;
  *((simd_float4 *)v27 + 6) = v42;
  *((simd_float4 *)v27 + 7) = v40;
  *((simd_float4 *)v27 + 8) = v56;
  *((simd_float4 *)v27 + 9) = v55;
  *((simd_float4 *)v27 + 10) = v54;
  *((simd_float4 *)v27 + 11) = v53;
  *((simd_float4 *)v27 + 12) = v38;
  *((simd_float4 *)v27 + 13) = v36;
  *((simd_float4 *)v27 + 14) = v35;
  *((simd_float4 *)v27 + 15) = v34;
  v27[64] = v11;
  v27[65] = v26;
  v27[66] = v13;
  *((_DWORD *)v27 + 67) = v15;
  *((_DWORD *)v27 + 68) = v17;
  *((_DWORD *)v27 + 69) = v19;
  v27[72] = v24;
  *((_OWORD *)v27 + 19) = v48;
  *((_OWORD *)v27 + 20) = v47;
  *((_DWORD *)v27 + 84) = v25;
  v29 = objc_msgSend(a2, sel_renderCommandEncoderWithDescriptor_, a3);
  if (!v29)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v30 = v29;
  v57[0] = 0;
  v57[1] = 0;
  *(double *)&v57[2] = a5;
  *(double *)&v57[3] = a6;
  v58 = xmmword_2356BCBA0;
  objc_msgSend(v29, sel_setViewport_, v57);
  v31 = a4;
  if (!a4)
  {
    v31 = v6[6];
    swift_unknownObjectRetain();
  }
  swift_unknownObjectRetain();
  objc_msgSend(v30, sel_setDepthStencilState_, v31);
  if (v6[4])
  {
    objc_msgSend(v30, sel_setRenderPipelineState_);
    objc_msgSend(v30, sel_setVertexBuffer_offset_atIndex_, v6[5], 0, 0);
    objc_msgSend(v30, sel_setVertexBuffer_offset_atIndex_, v6[8], 0, 1);
    objc_msgSend(v30, sel_setFragmentBuffer_offset_atIndex_, v6[5], 0, 0);
    objc_msgSend(v30, sel_drawPrimitives_vertexStart_vertexCount_, 3, 0, v6[7]);
    objc_msgSend(v30, sel_endEncoding);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return;
  }
LABEL_9:
  __break(1u);
}

void one-time initialization function for depthHazeFloor()
{
  static PlatterRenderer.depthHazeFloor = specialized static ExperimentSettings.loadCaptureCircleDepthHazeFloor(default:)(0.2);
}

void one-time initialization function for depthHazeDistancePower()
{
  static PlatterRenderer.depthHazeDistancePower = specialized static ExperimentSettings.loadCaptureCircleDepthHazeDistancePower(default:)(2.0);
}

uint64_t one-time initialization function for platterBaseColor()
{
  uint64_t result;
  __int128 v1;

  result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for platterBaseColor);
  static PlatterRenderer.platterBaseColor = v1;
  return result;
}

void *one-time initialization function for platterRadialAnimation()
{
  __n128 v0;
  void *result;
  __n128 v2;

  if (one-time initialization token for platterBaseColor != -1)
    swift_once();
  v2 = (__n128)static PlatterRenderer.platterBaseColor;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for platterRadialAnimation);
  result = (void *)makeRadialPlatterAnimation(baseColor:pulseColor:duration:)(v2, v0, 0.5);
  static PlatterRenderer.platterRadialAnimation = result;
  return result;
}

void PlatterRenderer.initPlatterRenderPipeline()()
{
  _QWORD *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id v32[2];

  v32[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = (void *)v0[2];
  if (one-time initialization token for bundle != -1)
    swift_once();
  v32[0] = 0;
  v2 = objc_msgSend(v1, sel_newDefaultLibraryWithBundle_error_, static BaseRenderer.bundle, v32);
  if (!v2)
  {
    v28 = v32[0];
    v29 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type PlatterRenderer.Error and conformance PlatterRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  v3 = v2;
  v4 = v32[0];
  v5 = (void *)MEMORY[0x23B7D2498](0xD000000000000022, 0x80000002356C93F0);
  v6 = objc_msgSend(v3, sel_newFunctionWithName_, v5);

  v7 = (void *)MEMORY[0x23B7D2498](0xD000000000000020, 0x80000002356C9420);
  v8 = objc_msgSend(v3, sel_newFunctionWithName_, v7);

  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD6B8]), sel_init);
  objc_msgSend(v9, sel_setVertexFunction_, v6);
  objc_msgSend(v9, sel_setFragmentFunction_, v8);
  objc_msgSend(v9, sel_setDepthAttachmentPixelFormat_, 252);
  v10 = objc_msgSend(v9, sel_colorAttachments);
  v11 = objc_msgSend(v10, sel_objectAtIndexedSubscript_, 0);

  if (!v11)
  {
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v11, sel_setPixelFormat_, v0[3]);

  v12 = objc_msgSend(v9, sel_colorAttachments);
  v13 = objc_msgSend(v12, sel_objectAtIndexedSubscript_, 0);

  if (!v13)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_msgSend(v13, sel_setBlendingEnabled_, 1);

  v14 = objc_msgSend(v9, sel_colorAttachments);
  v15 = objc_msgSend(v14, sel_objectAtIndexedSubscript_, 0);

  if (!v15)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v15, sel_setRgbBlendOperation_, 0);

  v16 = objc_msgSend(v9, sel_colorAttachments);
  v17 = objc_msgSend(v16, sel_objectAtIndexedSubscript_, 0);

  if (!v17)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v17, sel_setAlphaBlendOperation_, 0);

  v18 = objc_msgSend(v9, sel_colorAttachments);
  v19 = objc_msgSend(v18, sel_objectAtIndexedSubscript_, 0);

  if (!v19)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  objc_msgSend(v19, sel_setSourceRGBBlendFactor_, 4);

  v20 = objc_msgSend(v9, sel_colorAttachments);
  v21 = objc_msgSend(v20, sel_objectAtIndexedSubscript_, 0);

  if (!v21)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v21, sel_setSourceAlphaBlendFactor_, 4);

  v22 = objc_msgSend(v9, sel_colorAttachments);
  v23 = objc_msgSend(v22, sel_objectAtIndexedSubscript_, 0);

  if (!v23)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  objc_msgSend(v23, sel_setDestinationRGBBlendFactor_, 5);

  v24 = objc_msgSend(v9, sel_colorAttachments);
  v25 = objc_msgSend(v24, sel_objectAtIndexedSubscript_, 0);

  if (!v25)
  {
LABEL_23:
    __break(1u);
    return;
  }
  objc_msgSend(v25, sel_setDestinationAlphaBlendFactor_, 5);

  v32[0] = 0;
  v26 = objc_msgSend(v1, sel_newRenderPipelineStateWithDescriptor_error_, v9, v32);
  v27 = v32[0];
  if (v26)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    v0[4] = v26;
    swift_unknownObjectRelease();
  }
  else
  {
    v30 = v27;
    v31 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type PlatterRenderer.Error and conformance PlatterRenderer.Error();
    swift_allocError();
    swift_willThrow();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

  }
}

void PlatterRenderer.makePlatterVertices()()
{
  uint64_t v0;
  float32x2_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  int32x4_t *v6;
  id v7;
  int32x4_t v8;
  uint64_t v9;
  uint64_t *v10;
  int32x4_t *v11;
  uint64_t v12;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of PlatterRenderer.makePlatterVertices());
  makeTriangleVerticesForCircle(center:radius:fromAngle:angleRange:numSamples:)(100, v1, 1.0, 0.0, 6.2832);
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v0 + 56) = v3;
  if (v3 >> 58)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = v2;
  *(_QWORD *)(v0 + 64) = objc_msgSend(*(id *)(v0 + 16), sel_newBufferWithLength_options_, 32 * v3, 0);
  swift_unknownObjectRelease();
  v5 = *(void **)(v0 + 64);
  if (v5)
  {
    v6 = (int32x4_t *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v7 = v5;
    v9 = *(_QWORD *)(v0 + 56);
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (!v9)
      {
LABEL_8:
        swift_bridgeObjectRelease();
        return;
      }
      if ((unint64_t)(v9 - 1) < *(_QWORD *)(v4 + 16))
      {
        v10 = (uint64_t *)(v4 + 32);
        v11 = v6 + 1;
        do
        {
          v12 = *v10++;
          v8.i64[0] = v12;
          v11[-1] = vtrn2q_s32(vzip1q_s32((int32x4_t)0, v8), (int32x4_t)0);
          v11->i64[0] = v12;
          v11 += 2;
          --v9;
        }
        while (v9);
        goto LABEL_8;
      }
      goto LABEL_11;
    }
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  __break(1u);
}

uint64_t PlatterRenderer.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PlatterRenderer()
{
  return objc_opt_self();
}

void CaptureCircleRenderer.update(captureCircle:bboxWorld:objectToWorld:viewToWorld:viewToClip:captureCircleViewportFraction:time:opacity:)(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,int a25,uint64_t a26,float a27)
{
  _QWORD *v27;
  unint64_t v29;
  float v30;
  _QWORD *v31;
  void *v32;
  id v33;
  id v34;
  _OWORD v43[16];
  int v44;
  unint64_t v45;
  float v46;
  uint64_t v47;
  _BYTE __src[432];

  v27[8] = a1;
  swift_retain();
  swift_release();
  if (a1)
    v29 = *(_QWORD *)(a1 + 64);
  else
    v29 = 0xFFF0000000000000;
  v30 = 0.0;
  if (a27 > 0.0)
    v30 = a27;
  v43[0] = a2;
  v43[1] = a3;
  if (v30 > 1.0)
    v30 = 1.0;
  v43[2] = a4;
  v43[3] = a5;
  v43[4] = a6;
  v43[5] = a7;
  v43[6] = a8;
  v43[7] = a9;
  v43[8] = a17;
  v43[9] = a18;
  v43[10] = a19;
  v43[11] = a20;
  v43[12] = a21;
  v43[13] = a22;
  v43[14] = a23;
  v43[15] = a24;
  v44 = a25;
  v45 = v29;
  v46 = v30;
  v47 = a26;
  _s19_RealityKit_SwiftUI23CommonCircleRenderStateVSgWOi_((uint64_t)v43);
  outlined init with take of CommonCircleRenderState?((uint64_t)v43, (uint64_t)(v27 + 10));
  if (!v27[53])
  {
    v31 = (_QWORD *)CaptureCircleRenderer.makeSingleBinVerticesCapsule(width:)(0.5);
    CaptureCircleRenderer.makeClonedBinVertices(binVerts:modelScale:)(v31, 1.0);
    swift_bridgeObjectRelease();
  }
  v32 = (void *)v27[50];
  if (v32)
  {
    v33 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v34 = v32;
    CaptureCircleRenderer.makeUniforms()((uint64_t)__src);
    memcpy(v33, __src, 0x1B0uLL);
    CaptureCircleRenderer.updateCaptureBins()();
  }
  else
  {
    __break(1u);
  }
}

void CaptureCircleRenderer.initRenderPipelines()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;

  v2 = v0;
  CaptureCircleRenderer.initCaptureBinRenderPipeline()();
  if (!v1)
  {
    v3 = (void *)v0[4];
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD590]), sel_init);
    objc_msgSend(v4, sel_setDepthCompareFunction_, 7);
    objc_msgSend(v4, sel_setDepthWriteEnabled_, 0);
    v5 = objc_msgSend(v3, sel_newDepthStencilStateWithDescriptor_, v4);

    if (v5)
    {
      v2[7] = v5;
      swift_unknownObjectRelease();
      v6 = v2[5];
      type metadata accessor for PlatterRenderer();
      v7 = swift_allocObject();
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_QWORD *)(v7 + 64) = 0;
      *(_QWORD *)(v7 + 16) = v3;
      *(_QWORD *)(v7 + 24) = v6;
      swift_unknownObjectRetain_n();
      PlatterRenderer.initPlatterRenderPipeline()();
      v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD590]), sel_init);
      objc_msgSend(v8, sel_setDepthCompareFunction_, 7);
      objc_msgSend(v8, sel_setDepthWriteEnabled_, 0);
      v9 = objc_msgSend(v3, sel_newDepthStencilStateWithDescriptor_, v8);

      if (v9)
      {
        *(_QWORD *)(v7 + 48) = v9;
        swift_unknownObjectRelease();
        PlatterRenderer.makePlatterVertices()();
        v10 = objc_msgSend(v3, sel_newBufferWithLength_options_, 352, 0);
        swift_unknownObjectRelease();
        *(_QWORD *)(v7 + 40) = v10;
        swift_unknownObjectRelease();
        v2[47] = v7;
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void CaptureCircleRenderer.initCaptureBinRenderPipeline()()
{
  _QWORD *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id v32[2];

  v32[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = (void *)v0[4];
  if (one-time initialization token for bundle != -1)
    swift_once();
  v32[0] = 0;
  v2 = objc_msgSend(v1, sel_newDefaultLibraryWithBundle_error_, static CaptureCircleRenderer.bundle, v32);
  if (!v2)
  {
    v28 = v32[0];
    v29 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  v3 = v2;
  v4 = v32[0];
  v5 = (void *)MEMORY[0x23B7D2498](0xD000000000000032, 0x80000002356C9380);
  v6 = objc_msgSend(v3, sel_newFunctionWithName_, v5);

  v7 = (void *)MEMORY[0x23B7D2498](0xD000000000000026, 0x80000002356C93C0);
  v8 = objc_msgSend(v3, sel_newFunctionWithName_, v7);

  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD6B8]), sel_init);
  objc_msgSend(v9, sel_setVertexFunction_, v6);
  objc_msgSend(v9, sel_setFragmentFunction_, v8);
  objc_msgSend(v9, sel_setDepthAttachmentPixelFormat_, 252);
  v10 = objc_msgSend(v9, sel_colorAttachments);
  v11 = objc_msgSend(v10, sel_objectAtIndexedSubscript_, 0);

  if (!v11)
  {
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v11, sel_setPixelFormat_, v0[5]);

  v12 = objc_msgSend(v9, sel_colorAttachments);
  v13 = objc_msgSend(v12, sel_objectAtIndexedSubscript_, 0);

  if (!v13)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_msgSend(v13, sel_setBlendingEnabled_, 1);

  v14 = objc_msgSend(v9, sel_colorAttachments);
  v15 = objc_msgSend(v14, sel_objectAtIndexedSubscript_, 0);

  if (!v15)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v15, sel_setRgbBlendOperation_, 0);

  v16 = objc_msgSend(v9, sel_colorAttachments);
  v17 = objc_msgSend(v16, sel_objectAtIndexedSubscript_, 0);

  if (!v17)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v17, sel_setAlphaBlendOperation_, 0);

  v18 = objc_msgSend(v9, sel_colorAttachments);
  v19 = objc_msgSend(v18, sel_objectAtIndexedSubscript_, 0);

  if (!v19)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  objc_msgSend(v19, sel_setSourceRGBBlendFactor_, 4);

  v20 = objc_msgSend(v9, sel_colorAttachments);
  v21 = objc_msgSend(v20, sel_objectAtIndexedSubscript_, 0);

  if (!v21)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v21, sel_setSourceAlphaBlendFactor_, 4);

  v22 = objc_msgSend(v9, sel_colorAttachments);
  v23 = objc_msgSend(v22, sel_objectAtIndexedSubscript_, 0);

  if (!v23)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  objc_msgSend(v23, sel_setDestinationRGBBlendFactor_, 5);

  v24 = objc_msgSend(v9, sel_colorAttachments);
  v25 = objc_msgSend(v24, sel_objectAtIndexedSubscript_, 0);

  if (!v25)
  {
LABEL_23:
    __break(1u);
    return;
  }
  objc_msgSend(v25, sel_setDestinationAlphaBlendFactor_, 5);

  v32[0] = 0;
  v26 = objc_msgSend(v1, sel_newRenderPipelineStateWithDescriptor_error_, v9, v32);
  v27 = v32[0];
  if (v26)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    v0[6] = v26;
    swift_unknownObjectRelease();
  }
  else
  {
    v30 = v27;
    v31 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    lazy protocol witness table accessor for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error();
    swift_allocError();
    swift_willThrow();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

  }
}

void CaptureCircleRenderer.makeUniforms()(uint64_t a1@<X8>)
{
  uint64_t v1;
  float v3;
  float32x2_t v4;
  float v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  float v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  float v20;
  float v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  simd_float4 v35;
  simd_float4 v36;
  simd_float4 v37;
  __int128 v38;
  float v39;
  float v40;
  int v41;
  int v42;
  int v43;
  int v44;
  float v45;
  float32x2_t v46;
  simd_float4 v47;
  float v48;
  __int128 v49;
  __int128 v50;
  simd_float4 v51;
  simd_float4 v52;
  simd_float4 v53;
  simd_float4 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  simd_float4 v59;
  simd_float4 v60;
  simd_float4 v61;
  simd_float4 v62;
  _BYTE v63[304];
  _BYTE v64[280];
  double v65;
  float32x4_t __dst[18];
  _BYTE v67[304];
  _OWORD __src[19];
  simd_float4x4 v69;
  simd_float4x4 v70;
  simd_float4x4 v71;

  outlined init with take of CommonCircleRenderState?(v1 + 80, (uint64_t)v67);
  outlined init with take of CommonCircleRenderState?((uint64_t)v67, (uint64_t)__src);
  if (_s19_RealityKit_SwiftUI23CommonCircleRenderStateVSgWOg((uint64_t)__src) == 1)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  memcpy(__dst, __src, sizeof(__dst));
  v57 = __src[5];
  v58 = __src[4];
  v55 = __src[7];
  v56 = __src[6];
  v53 = (simd_float4)__src[9];
  v54 = (simd_float4)__src[8];
  v51 = (simd_float4)__src[11];
  v52 = (simd_float4)__src[10];
  v61 = (simd_float4)__src[13];
  v62 = (simd_float4)__src[12];
  v59 = (simd_float4)__src[15];
  v60 = (simd_float4)__src[14];
  v3 = specialized static PlatterRenderer.computeScreenConstraintScale(from:)((uint64_t)__dst);
  Transform.init(matrix:)();
  v46 = v4;
  v5 = specialized static PlatterRenderer.makeDepthHazeData(from:)(__dst);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = specialized static PlatterRenderer.makeShotAnimationState(from:)((uint64_t)__dst);
  v13 = __src[17];
  v14 = *(_QWORD *)(v1 + 64);
  v49 = v16;
  v50 = v15;
  if (v14)
  {
    v17 = *(_QWORD *)(v14 + 32);
    if ((v17 & 0x8000000000000000) != 0 || HIDWORD(v17))
      goto LABEL_27;
    v48 = *(float *)(v14 + 40);
  }
  else
  {
    v48 = 0.5;
    LODWORD(v17) = 24;
  }
  outlined init with take of CommonCircleRenderState?(v1 + 80, (uint64_t)v63);
  outlined init with take of CommonCircleRenderState?((uint64_t)v63, (uint64_t)v64);
  if (_s19_RealityKit_SwiftUI23CommonCircleRenderStateVSgWOg((uint64_t)v64) == 1)
    goto LABEL_26;
  v18 = v65;
  v45 = v5;
  if (!v14)
  {
    LODWORD(v19) = 0;
    v20 = 0.0;
    goto LABEL_13;
  }
  v19 = *(_QWORD *)(v14 + 48);
  if ((v19 & 0x8000000000000000) != 0 || HIDWORD(v19))
  {
LABEL_27:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v20 = *(double *)(v14 + 56);
LABEL_13:
  v39 = v20;
  v40 = v3;
  v41 = v13;
  v42 = v11;
  v43 = v9;
  v44 = v7;
  if (one-time initialization token for nearestNeighborThreshRads != -1)
    swift_once();
  v21 = v18;
  v22 = static CaptureCircle.nearestNeighborThreshRads;
  v23 = *(_DWORD *)(v1 + 456);
  v38 = *(_OWORD *)(v1 + 432);
  v24 = *(_QWORD *)(v1 + 448);
  LOBYTE(v25) = *(_BYTE *)(v1 + 460);
  v26 = *(float *)(v1 + 464);
  v27 = *(float *)(v1 + 468);
  v28 = *(float *)(v1 + 472);
  v29 = *(_QWORD *)(v1 + 64);
  if (v29)
  {
    v30 = v12;
    if ((*(_BYTE *)(v29 + 248) & 1) == 0)
    {
      v25 = *(_DWORD *)(v29 + 232);
      v26 = *(float *)(v29 + 236);
      v27 = *(float *)(v29 + 240);
      v31 = (float)(v21 - v26) / v27;
      v32 = 1.0 - v31;
      if (v31 > 1.0)
        v32 = 0.0;
      if (v31 > 0.0)
        v33 = v32;
      else
        v33 = 1.0;
      v28 = 1.0 - (float)(v33 * (float)(v33 * v33));
    }
  }
  else
  {
    v30 = v12;
  }
  v34 = vmuls_lane_f32(-0.5, v46, 1);
  v69.columns[1] = v61;
  v69.columns[0] = v62;
  v69.columns[3] = v59;
  v69.columns[2] = v60;
  v70 = __invert_f4(v69);
  v47 = v70.columns[0];
  v36 = v70.columns[2];
  v37 = v70.columns[1];
  v35 = v70.columns[3];
  v70.columns[1] = v53;
  v70.columns[0] = v54;
  v70.columns[3] = v51;
  v70.columns[2] = v52;
  v71 = __invert_f4(v70);
  *(_OWORD *)a1 = v58;
  *(_OWORD *)(a1 + 16) = v57;
  *(_OWORD *)(a1 + 32) = v56;
  *(_OWORD *)(a1 + 48) = v55;
  *(simd_float4x4 *)(a1 + 64) = v71;
  *(simd_float4 *)(a1 + 128) = v62;
  *(simd_float4 *)(a1 + 144) = v61;
  *(simd_float4 *)(a1 + 160) = v60;
  *(simd_float4 *)(a1 + 176) = v59;
  *(simd_float4 *)(a1 + 192) = v47;
  *(simd_float4 *)(a1 + 208) = v37;
  *(simd_float4 *)(a1 + 224) = v36;
  *(simd_float4 *)(a1 + 240) = v35;
  *(float *)(a1 + 256) = v40;
  *(float *)(a1 + 260) = v34;
  *(float *)(a1 + 264) = v45;
  *(_DWORD *)(a1 + 268) = v44;
  *(_DWORD *)(a1 + 272) = v43;
  *(_DWORD *)(a1 + 276) = v42;
  *(float *)(a1 + 288) = v30;
  *(_OWORD *)(a1 + 304) = v50;
  *(_OWORD *)(a1 + 320) = v49;
  *(_DWORD *)(a1 + 336) = v41;
  *(_DWORD *)(a1 + 352) = 0x40000000;
  *(float *)(a1 + 356) = v48;
  *(float *)(a1 + 360) = v21;
  *(_DWORD *)(a1 + 364) = v17;
  *(_DWORD *)(a1 + 368) = v19;
  *(float *)(a1 + 372) = v39;
  *(_DWORD *)(a1 + 376) = v22;
  *(_DWORD *)(a1 + 380) = v23;
  *(_OWORD *)(a1 + 384) = v38;
  *(_QWORD *)(a1 + 400) = v24;
  *(_BYTE *)(a1 + 408) = v25;
  *(float *)(a1 + 412) = v26;
  *(float *)(a1 + 416) = v27;
  *(float *)(a1 + 420) = v28;
}

id CaptureCircleRenderer.renderCaptureBinTriangles(into:viewportSize:desc:)(id result, uint64_t a2, double a3, double a4)
{
  _QWORD *v4;
  void *v7;
  _QWORD v8[4];
  __int128 v9;

  if (v4[8])
  {
    result = objc_msgSend(result, sel_renderCommandEncoderWithDescriptor_, a2);
    if (result)
    {
      v7 = result;
      v8[0] = 0;
      v8[1] = 0;
      *(double *)&v8[2] = a3;
      *(double *)&v8[3] = a4;
      v9 = xmmword_2356BCBA0;
      objc_msgSend(result, sel_setViewport_, v8);
      result = objc_msgSend(v7, sel_setDepthStencilState_, v4[7]);
      if (v4[6])
      {
        objc_msgSend(v7, sel_setRenderPipelineState_);
        objc_msgSend(v7, sel_setVertexBuffer_offset_atIndex_, v4[51], 0, 0);
        objc_msgSend(v7, sel_setVertexBuffer_offset_atIndex_, v4[50], 0, 1);
        objc_msgSend(v7, sel_setVertexBuffer_offset_atIndex_, v4[53], 0, 2);
        objc_msgSend(v7, sel_setFragmentBuffer_offset_atIndex_, v4[51], 0, 0);
        objc_msgSend(v7, sel_setFragmentBuffer_offset_atIndex_, v4[50], 0, 1);
        objc_msgSend(v7, sel_drawPrimitives_vertexStart_vertexCount_, 3, 0, v4[52]);
        objc_msgSend(v7, sel_endEncoding);
        return (id)swift_unknownObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void CaptureCircleRenderer.updateCaptureBins()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  __float2 v28;
  uint64_t v29;
  NSObject *oslog;

  v1 = v0[8];
  if (!v1)
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_5:
      v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)logger);
      oslog = Logger.logObject.getter();
      v4 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v4))
      {
        v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v5 = 0;
        _os_log_impl(&dword_2355E9000, oslog, v4, "No capturecircle!", v5, 2u);
        MEMORY[0x23B7D3428](v5, -1, -1);
      }

      return;
    }
LABEL_42:
    swift_once();
    goto LABEL_5;
  }
  v2 = (void *)v0[51];
  if (v2)
  {
    swift_retain();
LABEL_10:
    v9 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v10 = v2;
    v11 = *(_QWORD *)(v1 + 32);
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (!v11)
      {
LABEL_33:
        swift_release();
        return;
      }
      v12 = (uint64_t *)(v1 + 72);
      swift_beginAccess();
      v13 = 0;
      v14 = v11 - 1;
      v15 = v9 + 12;
      while (1)
      {
        *((_DWORD *)v15 - 3) = v13;
        if (v13 >= v11)
          break;
        v16 = *v12;
        if ((*v12 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          v17 = MEMORY[0x23B7D29C0](v13, v16);
          swift_bridgeObjectRelease();
        }
        else
        {
          if ((unint64_t)v13 >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_37;
          v17 = *(_QWORD *)(v16 + 8 * v13 + 32);
          swift_retain();
        }
        v18 = *(double *)(v17 + 40);
        swift_release();
        v19 = v18;
        *((float *)v15 - 1) = v19;
        if (v13 >= *(_QWORD *)(v1 + 32))
          goto LABEL_36;
        v20 = *v12;
        if ((*v12 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          v21 = MEMORY[0x23B7D29C0](v13, v20);
          swift_bridgeObjectRelease();
        }
        else
        {
          if ((unint64_t)v13 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_39;
          v21 = *(_QWORD *)(v20 + 8 * v13 + 32);
          swift_retain();
        }
        v22 = *(unsigned __int8 *)(v21 + 36);
        swift_release();
        *((_DWORD *)v15 - 2) = v22;
        if (v13 >= *(_QWORD *)(v1 + 32))
          goto LABEL_38;
        v23 = *v12;
        if ((*v12 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          v24 = MEMORY[0x23B7D29C0](v13, v23);
          swift_bridgeObjectRelease();
        }
        else
        {
          if ((unint64_t)v13 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_40;
          v24 = *(_QWORD *)(v23 + 8 * v13 + 32);
          swift_retain();
        }
        v25 = *(float *)(v24 + 92);
        v26 = *(float *)(v24 + 32);
        swift_release();
        v27 = 1.0 - (float)(v25 / v26);
        if (v26 < v25)
          v27 = 0.0;
        *(float *)v15 = v27;
        v11 = *(_QWORD *)(v1 + 32);
        v28 = __sincosf_stret((float)((float)(6.2832 / (float)v11) * (float)v13) + (float)((float)(6.2832 / (float)v11)
                                                                                         * 0.5));
        *(float *)&v29 = -v28.__sinval;
        HIDWORD(v29) = LODWORD(v28.__cosval);
        *(_QWORD *)(v15 + 4) = __PAIR64__(LODWORD(v28.__sinval), LODWORD(v28.__cosval));
        *(_QWORD *)(v15 + 12) = v29;
        if (v14 == v13)
          goto LABEL_33;
        ++v13;
        v15 += 32;
        if (v13 == 0x100000000)
          goto LABEL_45;
      }
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
    }
    __break(1u);
    goto LABEL_42;
  }
  v6 = *(_QWORD *)(v1 + 32);
  if ((unint64_t)(v6 - 0x400000000000000) >> 59 == 31)
  {
    v7 = 32 * v6;
    v8 = (void *)v0[4];
    swift_retain();
    v0[51] = objc_msgSend(v8, sel_newBufferWithLength_options_, v7, 0);
    swift_unknownObjectRelease();
    v2 = (void *)v0[51];
    if (v2)
      goto LABEL_10;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_45:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_QWORD *CaptureCircleRenderer.makeClonedBinVertices(binVerts:modelScale:)(_QWORD *result, float a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int32x4_t *v9;
  int32x4_t v10;
  unint64_t v11;
  int32x4_t *v12;
  unint64_t v13;
  int32x4_t *i;

  v3 = *(_QWORD *)(v2 + 64);
  if (!v3)
    return result;
  v4 = result;
  v5 = *(_QWORD *)(v3 + 32);
  v6 = result[2];
  v7 = v6 * v5;
  if ((unsigned __int128)(v6 * (__int128)v5) >> 64 != (v6 * v5) >> 63)
    goto LABEL_21;
  *(_QWORD *)(v2 + 416) = v7;
  if ((unint64_t)(v7 - 0x400000000000000) >> 59 != 31)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  *(_QWORD *)(v2 + 424) = objc_msgSend(*(id *)(v2 + 32), sel_newBufferWithLength_options_, 32 * v7, 0);
  swift_unknownObjectRelease();
  v8 = *(void **)(v2 + 424);
  if (!v8)
    goto LABEL_24;
  v9 = (int32x4_t *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  result = v8;
  if ((v5 & 0x8000000000000000) == 0)
  {
    if (!v5)
      return result;
    v11 = 0;
    v12 = v9 + 1;
    while (v11 != v5)
    {
      if ((unsigned __int128)((uint64_t)v11 * (__int128)v6) >> 64 != (uint64_t)(v11 * v6) >> 63)
        goto LABEL_20;
      if (v6)
      {
        v13 = HIDWORD(v11);
        if (HIDWORD(v11))
          goto LABEL_25;
        for (i = v12; ; i += 2)
        {
          v10.i64[0] = v4[v13 + 4];
          i->i32[0] = v11;
          *(float32x2_t *)v10.i8 = vmul_n_f32(*(float32x2_t *)v10.i8, a2);
          v10 = vtrn2q_s32(vrev64q_s32(vzip1q_s32(v10, (int32x4_t)0)), (int32x4_t)0);
          i[-1] = v10;
          if (v6 - 1 == v13)
            break;
          if (__OFADD__(v11 * v6, ++v13))
          {
            __break(1u);
            return result;
          }
        }
      }
      ++v11;
      v12 += 2 * v6;
      if (v11 == v5)
        return result;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CaptureCircleRenderer.makeSingleBinVerticesCapsule(width:)(float a1)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v4;
  float32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t result;
  unint64_t v22;

  v2 = v1;
  v4 = specialized CaptureCircleRenderer.makeSingleBinVerticesQuad(width:)(a1);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CaptureCircleRenderer.makeSingleBinVerticesCapsule(width:));
  makeTriangleVerticesForCircle(center:radius:fromAngle:angleRange:numSamples:)(20, v5, a1, 1.5708, -3.1416);
  v7 = v6;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of CaptureCircleRenderer.makeSingleBinVerticesCapsule(width:));
  makeTriangleVerticesForCircle(center:radius:fromAngle:angleRange:numSamples:)(20, v8, a1, 1.5708, 3.1416);
  v2[110] = 0;
  v10 = *(_QWORD *)(v7 + 16);
  if (HIDWORD(v10))
    goto LABEL_18;
  v11 = (_DWORD)v10 != 0;
  v12 = v10 - 1;
  if (!v11)
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2[111] = v12;
  v13 = v12 + 1;
  v2[112] = v13;
  v14 = *(_QWORD *)(v9 + 16);
  if (!HIDWORD(v14))
  {
    v11 = __CFADD__(v13, (_DWORD)v14);
    v15 = v13 + v14;
    if (v11)
      goto LABEL_14;
    v11 = v15 != 0;
    v16 = v15 - 1;
    if (!v11)
      goto LABEL_15;
    v2[113] = v16;
    v17 = v16 + 1;
    v2[108] = v17;
    v18 = *(_QWORD *)(v4 + 16);
    if (!HIDWORD(v18))
    {
      v11 = __CFADD__(v17, (_DWORD)v18);
      v19 = v17 + v18;
      if (v11)
      {
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      v11 = v19 != 0;
      v20 = v19 - 1;
      if (!v11)
        goto LABEL_17;
      v2[109] = v20;
      specialized Array.append<A>(contentsOf:)(v9);
      specialized Array.append<A>(contentsOf:)(v4);
      result = v7;
      v22 = *(_QWORD *)(v7 + 16);
      if (!HIDWORD(v22))
      {
        v2[114] = v22;
        return result;
      }
    }
  }
LABEL_18:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CaptureCircleRenderer.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t CaptureCircleRenderer.__deallocating_deinit()
{
  CaptureCircleRenderer.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CaptureCircleRenderer()
{
  return objc_opt_self();
}

void *__swift_memcpy288_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t getEnumTagSinglePayload for CommonCircleRenderState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 288))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CommonCircleRenderState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 288) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CommonCircleRenderState()
{
  return &type metadata for CommonCircleRenderState;
}

uint64_t specialized KeyframeAnimation.throwIfInvalid(_:)(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  char v3;
  double v4;
  double *v5;
  char *v6;

  v1 = *(_QWORD *)(result + 16);
  v2 = v1 - 2;
  if (v1 < 2)
  {
    v3 = 0;
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyframeAnimation<PlatterAnimVar>.Error);
    lazy protocol witness table accessor for type KeyframeAnimation<PlatterAnimVar>.Error and conformance KeyframeAnimation<A>.Error();
    swift_allocError();
    *v6 = v3;
    return swift_willThrow();
  }
  v4 = *(double *)(result + 32);
  if (v4 != 0.0)
  {
    v3 = 1;
    goto LABEL_13;
  }
  if (v4 >= *(double *)(result + 80))
  {
LABEL_11:
    v3 = 2;
    goto LABEL_13;
  }
  if (v1 != 2)
  {
    v5 = (double *)(result + 128);
    while (v2)
    {
      if (*(v5 - 6) >= *v5)
        goto LABEL_11;
      v5 += 6;
      if (!--v2)
        return result;
    }
    __break(1u);
  }
  return result;
}

float specialized static PlatterRenderer.computeScreenConstraintScale(from:)(uint64_t a1)
{
  float v2;
  float v3;
  uint64_t inited;
  float v5;
  float v6;
  float v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  simd_float4x4 v16;
  float v17;

  v2 = *(float *)(a1 + 192);
  v3 = *(float *)(a1 + 212);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2356BC690;
  v5 = atanf(1.0 / v2);
  *(float *)(inited + 32) = v5 + v5;
  v6 = atanf(1.0 / v3);
  *(float *)(inited + 36) = v6 + v6;
  specialized SIMD.init<A>(_:)(inited);
  v17 = v7;
  swift_setDeallocating();
  v16 = __invert_f4(*(simd_float4x4 *)(a1 + 128));
  v11 = *(float32x4_t *)(a1 + 64);
  v12 = *(float32x4_t *)(a1 + 80);
  v13 = *(float32x4_t *)(a1 + 96);
  v14 = *(float32x4_t *)(a1 + 112);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static PlatterRenderer.computeScreenConstraintScale(from:));
  v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, v8.f32[0]), v12, *(float32x2_t *)v8.f32, 1), v13, v8, 2), v14, v8, 3);
  Transform.init(matrix:)();
  return *(float *)(a1 + 256)
       * (float)(tanf(0.5 * v17)
               * fabsf(COERCE_FLOAT(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)&v16, *(float *)&v15), *(float32x4_t *)(&v16 + 16), *(float *)(&v15 + 4) - vmuls_lane_f32(0.5, v9, 1)), *(float32x4_t *)(&v16 + 32), v15, 2), *(float32x4_t *)(&v16 + 48), v15, 3).i32[2])));
}

float specialized static PlatterRenderer.makeDepthHazeData(from:)(float32x4_t *a1)
{
  int8x16_t v2;
  uint64_t inited;
  float32x2_t v4;
  float32x2_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  simd_float4x4 v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  _BYTE v25[64];
  int8x16_t v26;
  simd_float4x4 v27;
  simd_float4x4 v28;

  Transform.init(matrix:)();
  v26 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2356BC690;
  *(float32x2_t *)(inited + 32) = vmul_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v26.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), (float32x2_t)0x3F0000003F000000);
  specialized SIMD.init<A>(_:)(inited);
  v5 = v4;
  swift_setDeallocating();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static PlatterRenderer.makeDepthHazeData(from:));
  *(float32x4_t *)v25 = a1[4];
  *(float32x4_t *)&v25[16] = a1[5];
  *(float32x4_t *)&v25[32] = a1[6];
  *(float32x4_t *)&v25[48] = a1[7];
  v18 = v6;
  v23 = a1[8];
  v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v25, v6.f32[0]), *(float32x4_t *)&v25[16], *(float32x2_t *)v6.f32, 1), *(float32x4_t *)&v25[32], v6, 2), *(float32x4_t *)&v25[48], v6, 3);
  v21 = a1[10];
  v22 = a1[9];
  v19 = a1[11];
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of static PlatterRenderer.makeDepthHazeData(from:));
  v8 = vsubq_f32(v24, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v7.f32[0]), v22, *(float32x2_t *)v7.f32, 1), v21, v7, 2), v19, v7, 3));
  v9 = (int32x4_t)vmulq_f32(v8, v8);
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  v16 = vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
  v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_2356BACA0;
  *(_QWORD *)(v12 + 32) = v16.i64[0];
  *(_DWORD *)(v12 + 40) = v16.i32[2];
  *(_DWORD *)(v12 + 44) = 0;
  specialized SIMD.init<A>(_:)(v12);
  v17 = v13;
  swift_setDeallocating();
  if (one-time initialization token for depthHazeFloor != -1)
    swift_once();
  if (one-time initialization token for depthHazeDistancePower != -1)
    swift_once();
  v14 = sqrtf(vaddv_f32(vmul_f32(v5, v5)));
  v27.columns[1] = (simd_float4)v22;
  v27.columns[0] = (simd_float4)v23;
  v27.columns[3] = (simd_float4)v19;
  v27.columns[2] = (simd_float4)v21;
  v20 = __invert_f4(v27);
  v28 = __invert_f4(*(simd_float4x4 *)v25);
  v28.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v28.columns[0], v17.f32[0]), (float32x4_t)v28.columns[1], *(float32x2_t *)v17.f32, 1), (float32x4_t)v28.columns[2], v17, 2), (float32x4_t)v28.columns[3], v17, 3);
  v28.columns[2] = (simd_float4)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v25, v18.f32[0] - (float)(v14 * v28.columns[0].f32[0])), *(float32x4_t *)&v25[16], v18.f32[1] - vmuls_lane_f32(v14, *(float32x2_t *)v28.columns[0].f32, 1)), *(float32x4_t *)&v25[32], v18.f32[2] - vmuls_lane_f32(v14, (float32x4_t)v28.columns[0], 2)), *(float32x4_t *)&v25[48], v18.f32[3] - vmuls_lane_f32(v14, (float32x4_t)v28.columns[0], 3));
  return vmuls_lane_f32(0.5, vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v20.columns[0], v24.f32[0]), (float32x4_t)v20.columns[1], *(float32x2_t *)v24.f32, 1), (float32x4_t)v20.columns[2], v24, 2), (float32x4_t)v20.columns[3], v24, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v20.columns[0], v28.columns[2].f32[0]),
                   (float32x4_t)v20.columns[1],
                   *(float32x2_t *)v28.columns[2].f32,
                   1),
                 (float32x4_t)v20.columns[2],
                 (float32x4_t)v28.columns[2],
                 2),
               (float32x4_t)v20.columns[3],
               (float32x4_t)v28.columns[2],
               3)),
           2);
}

double specialized static PlatterAnimVar.lerp(a:b:alpha:)(float32x4_t a1, double a2, float32x4_t a3, double a4, float a5)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(vmulq_n_f32(vsubq_f32(a3, a1), a5), a1).u64[0];
  return result;
}

float specialized static PlatterRenderer.makeShotAnimationState(from:)(uint64_t a1)
{
  double v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;

  if (one-time initialization token for platterBaseColor != -1)
    swift_once();
  v2 = *(double *)(a1 + 264);
  if (one-time initialization token for platterRadialAnimation != -1)
    swift_once();
  v3 = v2;
  if (static PlatterRenderer.platterRadialAnimation)
  {
    v4 = *((_QWORD *)static PlatterRenderer.platterRadialAnimation + 2);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
      v6 = *(double *)(v4 + 48 * v5 - 16);
    else
      v6 = INFINITY;
    v7 = *(double *)(a1 + 280) - v3;
    if (v7 <= 0.0)
      v7 = 0.0;
    if (v6 >= v7)
      v8 = v7;
    else
      v8 = v6;
    swift_retain();
    specialized KeyframeAnimation.sample(at:)(v8);
    swift_release();
  }
  return v3;
}

uint64_t specialized CaptureCircleRenderer.makeSingleBinVerticesQuad(width:)(float a1)
{
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  uint64_t v16;
  CGPoint v17;
  CGFloat y;
  float64x2_t v19;
  CGFloat v20;
  CGPoint v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  CGPoint v25;
  CGFloat v26;
  float64x2_t v27;
  CGFloat v28;
  CGPoint v29;
  unint64_t v30;
  unint64_t v31;
  CGPoint v32;
  CGFloat v33;
  float64x2_t v34;
  CGFloat v35;
  CGPoint v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  CGPoint v40;
  CGFloat v41;
  float64x2_t v42;
  CGFloat v43;
  CGPoint v44;
  unint64_t v45;
  unint64_t v46;
  CGPoint v47;
  CGFloat v48;
  float64x2_t v49;
  CGFloat v50;
  CGPoint v51;
  unint64_t v52;
  unint64_t v53;
  CGPoint v54;
  CGFloat v55;
  float64x2_t v56;
  CGFloat v57;
  CGPoint v58;
  unint64_t v59;
  uint64_t result;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  uint64_t v65;
  CGAffineTransform v66;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of CaptureCircleRenderer.makeSingleBinVerticesQuad(width:));
  v3 = v2;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of CaptureCircleRenderer.makeSingleBinVerticesQuad(width:));
  v5 = v4;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of CaptureCircleRenderer.makeSingleBinVerticesQuad(width:));
  v61 = v6;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #3 of CaptureCircleRenderer.makeSingleBinVerticesQuad(width:));
  v62 = v7;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #4 of CaptureCircleRenderer.makeSingleBinVerticesQuad(width:));
  v63 = v8;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #5 of CaptureCircleRenderer.makeSingleBinVerticesQuad(width:));
  v64 = v9;
  CGAffineTransformMakeScale(&v66, 1.0, a1);
  a = v66.a;
  b = v66.b;
  c = v66.c;
  d = v66.d;
  tx = v66.tx;
  ty = v66.ty;
  v65 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 6, 0);
  v16 = v65;
  v17 = (CGPoint)vcvtq_f64_f32(v3);
  y = v17.y;
  v66.a = a;
  v66.b = b;
  v66.c = c;
  v66.d = d;
  v66.tx = tx;
  v66.ty = ty;
  v21 = CGPointApplyAffineTransform(v17, &v66);
  v20 = v21.y;
  v19.f64[0] = v21.x;
  v23 = *(_QWORD *)(v65 + 16);
  v22 = *(_QWORD *)(v65 + 24);
  v24 = v23 + 1;
  if (v23 >= v22 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
    v20 = v21.y;
    v19.f64[0] = v21.x;
    v16 = v65;
  }
  v19.f64[1] = v20;
  *(_QWORD *)(v16 + 16) = v24;
  *(float32x2_t *)(v16 + 8 * v23 + 32) = vcvt_f32_f64(v19);
  v25 = (CGPoint)vcvtq_f64_f32(v5);
  v26 = v25.y;
  v66.a = a;
  v66.b = b;
  v66.c = c;
  v66.d = d;
  v66.tx = tx;
  v66.ty = ty;
  v29 = CGPointApplyAffineTransform(v25, &v66);
  v28 = v29.y;
  v27.f64[0] = v29.x;
  v30 = *(_QWORD *)(v16 + 24);
  v31 = v23 + 2;
  if ((uint64_t)(v23 + 2) > (uint64_t)(v30 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v23 + 2, 1);
    v28 = v29.y;
    v27.f64[0] = v29.x;
    v16 = v65;
  }
  v27.f64[1] = v28;
  *(_QWORD *)(v16 + 16) = v31;
  *(float32x2_t *)(v16 + 8 * v24 + 32) = vcvt_f32_f64(v27);
  v32 = (CGPoint)vcvtq_f64_f32(v61);
  v33 = v32.y;
  v66.a = a;
  v66.b = b;
  v66.c = c;
  v66.d = d;
  v66.tx = tx;
  v66.ty = ty;
  v36 = CGPointApplyAffineTransform(v32, &v66);
  v35 = v36.y;
  v34.f64[0] = v36.x;
  v37 = *(_QWORD *)(v16 + 24);
  v38 = v23 + 3;
  if ((uint64_t)(v23 + 3) > (uint64_t)(v37 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v23 + 3, 1);
    v35 = v36.y;
    v34.f64[0] = v36.x;
  }
  v34.f64[1] = v35;
  v39 = v65;
  *(_QWORD *)(v65 + 16) = v38;
  *(float32x2_t *)(v65 + 8 * v31 + 32) = vcvt_f32_f64(v34);
  v40 = (CGPoint)vcvtq_f64_f32(v62);
  v41 = v40.y;
  v66.a = a;
  v66.b = b;
  v66.c = c;
  v66.d = d;
  v66.tx = tx;
  v66.ty = ty;
  v44 = CGPointApplyAffineTransform(v40, &v66);
  v43 = v44.y;
  v42.f64[0] = v44.x;
  v45 = *(_QWORD *)(v65 + 24);
  v46 = v23 + 4;
  if ((uint64_t)(v23 + 4) > (uint64_t)(v45 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v23 + 4, 1);
    v43 = v44.y;
    v42.f64[0] = v44.x;
    v39 = v65;
  }
  v42.f64[1] = v43;
  *(_QWORD *)(v39 + 16) = v46;
  *(float32x2_t *)(v39 + 8 * v38 + 32) = vcvt_f32_f64(v42);
  v47 = (CGPoint)vcvtq_f64_f32(v63);
  v48 = v47.y;
  v66.a = a;
  v66.b = b;
  v66.c = c;
  v66.d = d;
  v66.tx = tx;
  v66.ty = ty;
  v51 = CGPointApplyAffineTransform(v47, &v66);
  v50 = v51.y;
  v49.f64[0] = v51.x;
  v52 = *(_QWORD *)(v39 + 24);
  v53 = v23 + 5;
  if ((uint64_t)(v23 + 5) > (uint64_t)(v52 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v23 + 5, 1);
    v50 = v51.y;
    v49.f64[0] = v51.x;
    v39 = v65;
  }
  v49.f64[1] = v50;
  *(_QWORD *)(v39 + 16) = v53;
  *(float32x2_t *)(v39 + 8 * v46 + 32) = vcvt_f32_f64(v49);
  v54 = (CGPoint)vcvtq_f64_f32(v64);
  v55 = v54.y;
  v66.a = a;
  v66.b = b;
  v66.c = c;
  v66.d = d;
  v66.tx = tx;
  v66.ty = ty;
  v58 = CGPointApplyAffineTransform(v54, &v66);
  v57 = v58.y;
  v56.f64[0] = v58.x;
  v59 = *(_QWORD *)(v39 + 24);
  if ((uint64_t)(v23 + 6) > (uint64_t)(v59 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v23 + 6, 1);
    v57 = v58.y;
    v56.f64[0] = v58.x;
  }
  v56.f64[1] = v57;
  result = v65;
  *(_QWORD *)(v65 + 16) = v23 + 6;
  *(float32x2_t *)(v65 + 8 * v53 + 32) = vcvt_f32_f64(v56);
  return result;
}

unint64_t lazy protocol witness table accessor for type KeyframeAnimation<PlatterAnimVar>.Error and conformance KeyframeAnimation<A>.Error()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type KeyframeAnimation<PlatterAnimVar>.Error and conformance KeyframeAnimation<A>.Error;
  if (!lazy protocol witness table cache variable for type KeyframeAnimation<PlatterAnimVar>.Error and conformance KeyframeAnimation<A>.Error)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for KeyframeAnimation<PlatterAnimVar>.Error);
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for KeyframeAnimation<A>.Error, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyframeAnimation<PlatterAnimVar>.Error and conformance KeyframeAnimation<A>.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error;
  if (!lazy protocol witness table cache variable for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for CaptureCircleRenderer.Error, &type metadata for CaptureCircleRenderer.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error;
  if (!lazy protocol witness table cache variable for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for CaptureCircleRenderer.Error, &type metadata for CaptureCircleRenderer.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptureCircleRenderer.Error and conformance CaptureCircleRenderer.Error);
  }
  return result;
}

uint64_t _s19_RealityKit_SwiftUI23CommonCircleRenderStateVSgWOi_(uint64_t result)
{
  *(_BYTE *)(result + 288) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatterRenderer.Error and conformance PlatterRenderer.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatterRenderer.Error and conformance PlatterRenderer.Error;
  if (!lazy protocol witness table cache variable for type PlatterRenderer.Error and conformance PlatterRenderer.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for PlatterRenderer.Error, &type metadata for PlatterRenderer.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatterRenderer.Error and conformance PlatterRenderer.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatterRenderer.Error and conformance PlatterRenderer.Error;
  if (!lazy protocol witness table cache variable for type PlatterRenderer.Error and conformance PlatterRenderer.Error)
  {
    result = MEMORY[0x23B7D3350](&protocol conformance descriptor for PlatterRenderer.Error, &type metadata for PlatterRenderer.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatterRenderer.Error and conformance PlatterRenderer.Error);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatterRenderer.Error()
{
  return &type metadata for PlatterRenderer.Error;
}

uint64_t storeEnumTagSinglePayload for PlatterRenderer.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2356B775C + 4 * byte_2356C3270[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2356B777C + 4 * byte_2356C3275[v4]))();
}

_BYTE *sub_2356B775C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2356B777C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2356B7784(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2356B778C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2356B7794(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2356B779C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CaptureCircleRenderer.Error()
{
  return &type metadata for CaptureCircleRenderer.Error;
}

void *type metadata accessor for PlatterAnimVar()
{
  return &unk_2506BF3E8;
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return MEMORY[0x24BDCB620]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCB8E8]();
}

uint64_t type metadata accessor for Notification()
{
  return MEMORY[0x24BDCB930]();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t LocalizedError.failureReason.getter()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t LocalizedError.errorDescription.getter()
{
  return MEMORY[0x24BDCBE78]();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t AttributeScopes.SwiftUIAttributes.baselineOffset.getter()
{
  return MEMORY[0x24BDEAD38]();
}

uint64_t AttributeScopes.SwiftUIAttributes.backgroundColor.getter()
{
  return MEMORY[0x24BDEAD48]();
}

uint64_t AttributeScopes.SwiftUIAttributes.foregroundColor.getter()
{
  return MEMORY[0x24BDEAD50]();
}

uint64_t AttributeScopes.SwiftUIAttributes.kern.getter()
{
  return MEMORY[0x24BDEAD68]();
}

uint64_t AttributeScopes.SwiftUIAttributes.tracking.getter()
{
  return MEMORY[0x24BDEAD70]();
}

uint64_t AttributedString.Runs.Run.subscript.getter()
{
  return MEMORY[0x24BDCC468]();
}

uint64_t AttributedString.Runs.Run.range.getter()
{
  return MEMORY[0x24BDCC478]();
}

uint64_t type metadata accessor for AttributedString.Runs.Run()
{
  return MEMORY[0x24BDCC480]();
}

uint64_t type metadata accessor for AttributedString.Runs.Index()
{
  return MEMORY[0x24BDCC498]();
}

uint64_t type metadata accessor for AttributedString.Runs()
{
  return MEMORY[0x24BDCC4A8]();
}

uint64_t AttributedString.runs.getter()
{
  return MEMORY[0x24BDCC4E0]();
}

uint64_t type metadata accessor for AttributedString()
{
  return MEMORY[0x24BDCC5A8]();
}

uint64_t AttributedString.init(_:)()
{
  return MEMORY[0x24BDCC618]();
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return MEMORY[0x24BDEAD90]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t URL.isFileURL.getter()
{
  return MEMORY[0x24BDCD748]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x24BDCD988]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t BoundingBox.transformed(by:)()
{
  return MEMORY[0x24BDE5FA8]();
}

uint64_t BoundingBox.boundingRadius.getter()
{
  return MEMORY[0x24BDE5FB0]();
}

uint64_t BoundingBox.init(min:max:)()
{
  return MEMORY[0x24BDE5FB8]();
}

uint64_t BoundingBox.union(_:)()
{
  return MEMORY[0x24BDE5FC0]();
}

uint64_t BoundingBox.center.getter()
{
  return MEMORY[0x24BDE5FC8]();
}

uint64_t BoundingBox.extents.getter()
{
  return MEMORY[0x24BDE5FD0]();
}

uint64_t BoundingBox.formUnion(_:)()
{
  return MEMORY[0x24BDE5FD8]();
}

{
  return MEMORY[0x24BDE5FE0]();
}

uint64_t BoundingBox.init()()
{
  return MEMORY[0x24BDE5FE8]();
}

uint64_t ModelEntity.init(mesh:materials:)()
{
  return MEMORY[0x24BDE6018]();
}

uint64_t type metadata accessor for ModelEntity()
{
  return MEMORY[0x24BDE6038]();
}

uint64_t SceneEvents.Update.deltaTime.getter()
{
  return MEMORY[0x24BDE6048]();
}

uint64_t type metadata accessor for SceneEvents.Update()
{
  return MEMORY[0x24BDE6058]();
}

uint64_t __EntityRef.__as<A>(_:)()
{
  return MEMORY[0x24BDE6080]();
}

uint64_t type metadata accessor for __EntityRef()
{
  return MEMORY[0x24BDE6088]();
}

uint64_t AnchorEntity.__allocating_init(world:)()
{
  return MEMORY[0x24BDE60C8]();
}

uint64_t AnchorEntity.init()()
{
  return MEMORY[0x24BDE60D8]();
}

uint64_t type metadata accessor for AnchorEntity()
{
  return MEMORY[0x24BDE60E0]();
}

Swift::Void __swiftcall HasHierarchy.removeFromParent(preservingWorldTransform:)(Swift::Bool preservingWorldTransform)
{
  MEMORY[0x24BDE6100](preservingWorldTransform);
}

uint64_t HasHierarchy.parent.getter()
{
  return MEMORY[0x24BDE6108]();
}

uint64_t HasHierarchy.addChild(_:preservingWorldTransform:)()
{
  return MEMORY[0x24BDE6110]();
}

uint64_t HasHierarchy.children.getter()
{
  return MEMORY[0x24BDE6118]();
}

uint64_t HasTransform.setTransformMatrix(_:relativeTo:)()
{
  return MEMORY[0x24BDE6128]();
}

uint64_t HasTransform.orientation(relativeTo:)()
{
  return MEMORY[0x24BDE6130]();
}

uint64_t HasTransform.orientation.modify()
{
  return MEMORY[0x24BDE6138]();
}

uint64_t HasTransform.orientation.getter()
{
  return MEMORY[0x24BDE6140]();
}

uint64_t HasTransform.setPosition(_:relativeTo:)()
{
  return MEMORY[0x24BDE6150]();
}

uint64_t HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)()
{
  return MEMORY[0x24BDE6158]();
}

uint64_t HasTransform.setOrientation(_:relativeTo:)()
{
  return MEMORY[0x24BDE6160]();
}

uint64_t HasTransform.transformMatrix(relativeTo:)()
{
  return MEMORY[0x24BDE6168]();
}

uint64_t HasTransform.move(to:relativeTo:duration:timingFunction:)()
{
  return MEMORY[0x24BDE6170]();
}

uint64_t HasTransform.scale(relativeTo:)()
{
  return MEMORY[0x24BDE6178]();
}

uint64_t HasTransform.scale.setter()
{
  return MEMORY[0x24BDE6180]();
}

uint64_t HasTransform.convert(position:from:)()
{
  return MEMORY[0x24BDE6188]();
}

uint64_t HasTransform.convert(direction:to:)()
{
  return MEMORY[0x24BDE6190]();
}

uint64_t HasTransform.convert(direction:from:)()
{
  return MEMORY[0x24BDE6198]();
}

uint64_t HasTransform.convert(transform:from:)()
{
  return MEMORY[0x24BDE61A0]();
}

uint64_t HasTransform.position(relativeTo:)()
{
  return MEMORY[0x24BDE61A8]();
}

uint64_t HasTransform.position.getter()
{
  return MEMORY[0x24BDE61B8]();
}

uint64_t HasTransform.setScale(_:relativeTo:)()
{
  return MEMORY[0x24BDE61C8]();
}

uint64_t HasTransform.transform.modify()
{
  return MEMORY[0x24BDE61D0]();
}

uint64_t HasTransform.transform.getter()
{
  return MEMORY[0x24BDE61D8]();
}

uint64_t HasTransform.transform.setter()
{
  return MEMORY[0x24BDE61E0]();
}

uint64_t MeshResource.ShapeExtrusionOptions._chamferProfileStorage.getter()
{
  return MEMORY[0x24BDE61E8]();
}

uint64_t MeshResource.ShapeExtrusionOptions._chamferProfileStorage.setter()
{
  return MEMORY[0x24BDE61F0]();
}

uint64_t type metadata accessor for MeshResource.ShapeExtrusionOptions()
{
  return MEMORY[0x24BDE61F8]();
}

uint64_t static MeshResource.generateBox(size:cornerRadius:)()
{
  return MEMORY[0x24BDE6298]();
}

{
  return MEMORY[0x24BDE62A0]();
}

uint64_t static MeshResource.generateSphere(radius:)()
{
  return MEMORY[0x24BDE62B8]();
}

uint64_t type metadata accessor for MeshResource()
{
  return MEMORY[0x24BDE62C8]();
}

uint64_t static ShapeResource.generateSphere(radius:)()
{
  return MEMORY[0x24BDE62E0]();
}

uint64_t type metadata accessor for ShapeResource()
{
  return MEMORY[0x24BDE62E8]();
}

uint64_t UnlitMaterial.init(color:)()
{
  return MEMORY[0x24BDE7DC8]();
}

uint64_t type metadata accessor for UnlitMaterial()
{
  return MEMORY[0x24BDE6300]();
}

uint64_t static CollisionGroup.all.getter()
{
  return MEMORY[0x24BDE6310]();
}

uint64_t type metadata accessor for CollisionGroup()
{
  return MEMORY[0x24BDE6318]();
}

uint64_t ModelComponent.materials.setter()
{
  return MEMORY[0x24BDE6330]();
}

uint64_t type metadata accessor for ModelComponent()
{
  return MEMORY[0x24BDE6340]();
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:)()
{
  return MEMORY[0x24BDE7DD0]();
}

uint64_t type metadata accessor for SimpleMaterial()
{
  return MEMORY[0x24BDE6358]();
}

uint64_t static CollisionFilter.default.getter()
{
  return MEMORY[0x24BDE6368]();
}

uint64_t type metadata accessor for CollisionFilter()
{
  return MEMORY[0x24BDE6370]();
}

uint64_t ARSessionManager.init(arView:)()
{
  return MEMORY[0x24BDE7DE0]();
}

uint64_t type metadata accessor for ARSessionManager()
{
  return MEMORY[0x24BDE7DE8]();
}

uint64_t CollisionCastHit.entity.getter()
{
  return MEMORY[0x24BDE6470]();
}

uint64_t CollisionCastHit.normal.getter()
{
  return MEMORY[0x24BDE6478]();
}

uint64_t CollisionCastHit.distance.getter()
{
  return MEMORY[0x24BDE6480]();
}

uint64_t CollisionCastHit.position.getter()
{
  return MEMORY[0x24BDE6488]();
}

uint64_t type metadata accessor for CollisionCastHit()
{
  return MEMORY[0x24BDE6490]();
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.getter()
{
  return MEMORY[0x24BDE64E0]();
}

uint64_t dispatch thunk of __ServiceLocator.sceneService.getter()
{
  return MEMORY[0x24BDE64F0]();
}

uint64_t static __ServiceLocator.shared.getter()
{
  return MEMORY[0x24BDE6508]();
}

uint64_t type metadata accessor for __ServiceLocator()
{
  return MEMORY[0x24BDE6510]();
}

uint64_t static AnimationResource.generate(with:)()
{
  return MEMORY[0x24BDE6528]();
}

uint64_t type metadata accessor for AnimationResource()
{
  return MEMORY[0x24BDE6538]();
}

uint64_t type metadata accessor for CollisionComponent.Mode()
{
  return MEMORY[0x24BDE6590]();
}

uint64_t CollisionComponent.init(shapes:mode:filter:)()
{
  return MEMORY[0x24BDE6598]();
}

uint64_t type metadata accessor for CollisionComponent()
{
  return MEMORY[0x24BDE65B0]();
}

uint64_t type metadata accessor for CollisionCastQueryType()
{
  return MEMORY[0x24BDE66E0]();
}

uint64_t static AnimationTimingFunction.linear.getter()
{
  return MEMORY[0x24BDE6738]();
}

uint64_t static AnimationTimingFunction.default.getter()
{
  return MEMORY[0x24BDE6740]();
}

uint64_t static AnimationTimingFunction.easeOut.getter()
{
  return MEMORY[0x24BDE6748]();
}

uint64_t type metadata accessor for AnimationTimingFunction()
{
  return MEMORY[0x24BDE6758]();
}

uint64_t MaterialScalarParameter.init(floatLiteral:)()
{
  return MEMORY[0x24BDE6768]();
}

uint64_t MaterialScalarParameter.init(integerLiteral:)()
{
  return MEMORY[0x24BDE6770]();
}

uint64_t type metadata accessor for MaterialScalarParameter()
{
  return MEMORY[0x24BDE6788]();
}

uint64_t PerspectiveCameraComponent.fieldOfViewInDegrees.getter()
{
  return MEMORY[0x24BDE68A8]();
}

uint64_t PerspectiveCameraComponent.fieldOfViewInDegrees.setter()
{
  return MEMORY[0x24BDE68B0]();
}

uint64_t type metadata accessor for PerspectiveCameraComponent()
{
  return MEMORY[0x24BDE68C0]();
}

uint64_t AnimationPlaybackController.isPlaying.getter()
{
  return MEMORY[0x24BDE6908]();
}

uint64_t dispatch thunk of AnimationPlaybackController.isComplete.getter()
{
  return MEMORY[0x24BDE6910]();
}

uint64_t dispatch thunk of AnimationPlaybackController.stop()()
{
  return MEMORY[0x24BDE6918]();
}

uint64_t type metadata accessor for EntityRotationGestureRecognizer()
{
  return MEMORY[0x24BDE7E00]();
}

uint64_t type metadata accessor for EntityTranslationGestureRecognizer()
{
  return MEMORY[0x24BDE7E08]();
}

uint64_t Scene.coreScene.getter()
{
  return MEMORY[0x24BDE6E80]();
}

uint64_t Scene.performQuery(_:)()
{
  return MEMORY[0x24BDE6E90]();
}

uint64_t dispatch thunk of Scene.findEntity(id:)()
{
  return MEMORY[0x24BDE6EA0]();
}

uint64_t dispatch thunk of Scene.findEntity(named:)()
{
  return MEMORY[0x24BDE6EA8]();
}

uint64_t dispatch thunk of Scene.defaultCamera.getter()
{
  return MEMORY[0x24BDE6EB0]();
}

uint64_t Scene.AnchorCollection.append(_:)()
{
  return MEMORY[0x24BDE6EB8]();
}

uint64_t type metadata accessor for Scene.AnchorCollection()
{
  return MEMORY[0x24BDE6EC0]();
}

uint64_t dispatch thunk of Scene.internalActiveCamera.getter()
{
  return MEMORY[0x24BDE6EE0]();
}

uint64_t dispatch thunk of Scene.anchors.getter()
{
  return MEMORY[0x24BDE6EF0]();
}

uint64_t Scene.raycast(origin:direction:length:query:mask:relativeTo:)()
{
  return MEMORY[0x24BDE6F00]();
}

uint64_t dispatch thunk of Scene.addAnchor(_:)()
{
  return MEMORY[0x24BDE6F10]();
}

uint64_t Scene.subscribe<A>(to:on:_:)()
{
  return MEMORY[0x24BDE6F18]();
}

uint64_t type metadata accessor for ARView.CameraMode()
{
  return MEMORY[0x24BDE7E28]();
}

uint64_t ARView.cameraMode.getter()
{
  return MEMORY[0x24BDE7E38]();
}

uint64_t ARView.cameraMode.setter()
{
  return MEMORY[0x24BDE7E40]();
}

uint64_t static ARView.Environment.Background.cameraFeed(exposureCompensation:)()
{
  return MEMORY[0x24BDE7E48]();
}

uint64_t static ARView.Environment.Background.color(_:)()
{
  return MEMORY[0x24BDE7E50]();
}

uint64_t static ARView.Environment.Background.skybox(_:)()
{
  return MEMORY[0x24BDE7E58]();
}

uint64_t type metadata accessor for ARView.Environment.Background()
{
  return MEMORY[0x24BDE7E60]();
}

uint64_t ARView.Environment.background.setter()
{
  return MEMORY[0x24BDE7E68]();
}

uint64_t ARView.Environment.ImageBasedLight.resource.setter()
{
  return MEMORY[0x24BDE7E78]();
}

uint64_t static ARView.Environment.SceneUnderstanding.Options.collision.getter()
{
  return MEMORY[0x24BDE7E80]();
}

uint64_t type metadata accessor for ARView.Environment.SceneUnderstanding.Options()
{
  return MEMORY[0x24BDE7E88]();
}

uint64_t ARView.Environment.SceneUnderstanding.options.modify()
{
  return MEMORY[0x24BDE7EA8]();
}

uint64_t ARView.Environment.sceneUnderstanding.modify()
{
  return MEMORY[0x24BDE7EB0]();
}

uint64_t ARView.Environment.lighting.modify()
{
  return MEMORY[0x24BDE7EB8]();
}

uint64_t type metadata accessor for ARView.Environment()
{
  return MEMORY[0x24BDE7EC0]();
}

uint64_t dispatch thunk of ARView.environment.modify()
{
  return MEMORY[0x24BDE7EC8]();
}

uint64_t dispatch thunk of ARView.environment.getter()
{
  return MEMORY[0x24BDE7ED0]();
}

uint64_t static ARView.DebugOptions.showPhysics.getter()
{
  return MEMORY[0x24BDE7EE0]();
}

uint64_t static ARView.DebugOptions.showWorldOrigin.getter()
{
  return MEMORY[0x24BDE7EF0]();
}

uint64_t static ARView.DebugOptions.showAnchorOrigins.getter()
{
  return MEMORY[0x24BDE7EF8]();
}

uint64_t static ARView.DebugOptions.showFeaturePoints.getter()
{
  return MEMORY[0x24BDE7F00]();
}

uint64_t static ARView.DebugOptions.showAnchorGeometry.getter()
{
  return MEMORY[0x24BDE7F08]();
}

uint64_t static ARView.DebugOptions.showSceneUnderstanding.getter()
{
  return MEMORY[0x24BDE7F10]();
}

uint64_t static ARView.DebugOptions.none.getter()
{
  return MEMORY[0x24BDE7F18]();
}

uint64_t type metadata accessor for ARView.DebugOptions()
{
  return MEMORY[0x24BDE7F20]();
}

uint64_t dispatch thunk of ARView.debugOptions.getter()
{
  return MEMORY[0x24BDE7F48]();
}

uint64_t dispatch thunk of ARView.debugOptions.setter()
{
  return MEMORY[0x24BDE7F50]();
}

uint64_t static ARView.RenderOptions.disableHDR.getter()
{
  return MEMORY[0x24BDE7F58]();
}

uint64_t static ARView.RenderOptions.disableMotionBlur.getter()
{
  return MEMORY[0x24BDE7F68]();
}

uint64_t static ARView.RenderOptions.disableCameraGrain.getter()
{
  return MEMORY[0x24BDE7F70]();
}

uint64_t static ARView.RenderOptions.disableDepthOfField.getter()
{
  return MEMORY[0x24BDE7F78]();
}

uint64_t static ARView.RenderOptions.disableFaceOcclusions.getter()
{
  return MEMORY[0x24BDE7F80]();
}

uint64_t static ARView.RenderOptions.disablePersonOcclusion.getter()
{
  return MEMORY[0x24BDE7F88]();
}

uint64_t static ARView.RenderOptions.disableGroundingShadows.getter()
{
  return MEMORY[0x24BDE7F90]();
}

uint64_t static ARView.RenderOptions.disableAREnvironmentLighting.getter()
{
  return MEMORY[0x24BDE7F98]();
}

uint64_t type metadata accessor for ARView.RenderOptions()
{
  return MEMORY[0x24BDE7FA0]();
}

uint64_t dispatch thunk of ARView.audioListener.getter()
{
  return MEMORY[0x24BDE7FC0]();
}

uint64_t dispatch thunk of ARView.audioListener.setter()
{
  return MEMORY[0x24BDE7FC8]();
}

uint64_t ARView.physicsOrigin.getter()
{
  return MEMORY[0x24BDE7FD0]();
}

uint64_t ARView.physicsOrigin.setter()
{
  return MEMORY[0x24BDE7FD8]();
}

uint64_t ARView.renderOptions.modify()
{
  return MEMORY[0x24BDE7FE0]();
}

uint64_t ARView.renderOptions.getter()
{
  return MEMORY[0x24BDE7FE8]();
}

uint64_t static ARView.EntityGestures.rotation.getter()
{
  return MEMORY[0x24BDE7FF8]();
}

uint64_t type metadata accessor for ARView.EntityGestures()
{
  return MEMORY[0x24BDE8000]();
}

Swift::UInt32 __swiftcall ARView.getLayerHandle()()
{
  return MEMORY[0x24BDE8018]();
}

uint64_t ARView.RenderCallbacks.postProcess.setter()
{
  return MEMORY[0x24BDE8020]();
}

uint64_t dispatch thunk of ARView.cameraTransform.getter()
{
  return MEMORY[0x24BDE8028]();
}

uint64_t ARView.installGestures(_:for:)()
{
  return MEMORY[0x24BDE8030]();
}

uint64_t ARView.renderCallbacks.modify()
{
  return MEMORY[0x24BDE8038]();
}

uint64_t dispatch thunk of ARView.antialiasingMode.setter()
{
  return MEMORY[0x24BDE8040]();
}

uint64_t type metadata accessor for ARView.EDRHeadroomPolicy()
{
  return MEMORY[0x24BDE8058]();
}

uint64_t dispatch thunk of ARView.edrHeadroomPolicy.setter()
{
  return MEMORY[0x24BDE8060]();
}

uint64_t ARView.PostProcessContext.projection.getter()
{
  return MEMORY[0x24BDE8068]();
}

uint64_t ARView.PostProcessContext.commandBuffer.getter()
{
  return MEMORY[0x24BDE8070]();
}

uint64_t ARView.PostProcessContext.sourceColorTexture.getter()
{
  return MEMORY[0x24BDE8078]();
}

uint64_t ARView.PostProcessContext.sourceDepthTexture.getter()
{
  return MEMORY[0x24BDE8080]();
}

uint64_t ARView.PostProcessContext.targetColorTexture.getter()
{
  return MEMORY[0x24BDE8088]();
}

uint64_t ARView.PostProcessContext.time.getter()
{
  return MEMORY[0x24BDE8090]();
}

uint64_t type metadata accessor for ARView.PostProcessContext()
{
  return MEMORY[0x24BDE80A0]();
}

uint64_t dispatch thunk of ARView.__disableComposition.getter()
{
  return MEMORY[0x24BDE80B0]();
}

uint64_t dispatch thunk of ARView.__disableComposition.setter()
{
  return MEMORY[0x24BDE80B8]();
}

uint64_t dispatch thunk of ARView.realityFusionSession.getter()
{
  return MEMORY[0x24BDE80D0]();
}

uint64_t dispatch thunk of ARView.__interfaceOrientation.getter()
{
  return MEMORY[0x24BDE80D8]();
}

uint64_t dispatch thunk of ARView.__disableCounterRotation.setter()
{
  return MEMORY[0x24BDE80E0]();
}

uint64_t dispatch thunk of ARView.extendedDynamicRangeOutput.setter()
{
  return MEMORY[0x24BDE80F8]();
}

uint64_t dispatch thunk of ARView.__proto_antialiasingMode_v1.getter()
{
  return MEMORY[0x24BDE8100]();
}

uint64_t ARView.ray(through:)()
{
  return MEMORY[0x24BDE8110]();
}

uint64_t ARView.init(frame:forRealityView:)()
{
  return MEMORY[0x24BDE8118]();
}

uint64_t ARView.init(frame:cameraMode:automaticallyConfigureSession:)()
{
  return MEMORY[0x24BDE8120]();
}

uint64_t dispatch thunk of ARView.scene.getter()
{
  return MEMORY[0x24BDE8128]();
}

uint64_t ARView.entity(at:)()
{
  return MEMORY[0x24BDE8130]();
}

uint64_t ARView.hitTest(_:requireInputTarget:query:mask:)()
{
  return MEMORY[0x24BDE8138]();
}

uint64_t ARView.hitTest(_:query:mask:)()
{
  return MEMORY[0x24BDE8140]();
}

uint64_t ARView.project(_:)()
{
  return MEMORY[0x24BDE8148]();
}

uint64_t ARView.entities(at:)()
{
  return MEMORY[0x24BDE8150]();
}

uint64_t dispatch thunk of ARView.snapshot(saveToHDR:completion:)()
{
  return MEMORY[0x24BDE8158]();
}

uint64_t ARView.unproject(_:viewport:)()
{
  return MEMORY[0x24BDE8160]();
}

uint64_t ARView.unproject(_:ontoPlane:relativeToCamera:)()
{
  return MEMORY[0x24BDE8168]();
}

uint64_t type metadata accessor for ARView()
{
  return MEMORY[0x24BDE8170]();
}

uint64_t Entity.coreEntity.getter()
{
  return MEMORY[0x24BDE6F28]();
}

uint64_t dispatch thunk of Entity.__coreEntity.getter()
{
  return MEMORY[0x24BDE6F30]();
}

uint64_t Entity.playAnimation(_:transitionDuration:blendLayerOffset:separateAnimatedValue:startsPaused:clock:)()
{
  return MEMORY[0x24BDE6F38]();
}

Swift::Bool __swiftcall Entity.applyTapForBehaviors()()
{
  return MEMORY[0x24BDE7010]();
}

uint64_t Entity.init(named:in:)()
{
  return MEMORY[0x24BDE7018]();
}

uint64_t dispatch thunk of Entity.components.modify()
{
  return MEMORY[0x24BDE7038]();
}

uint64_t dispatch thunk of Entity.components.getter()
{
  return MEMORY[0x24BDE7040]();
}

uint64_t Entity.ComponentSet.set<A>(_:)()
{
  return MEMORY[0x24BDE7080]();
}

uint64_t Entity.ComponentSet.remove(_:)()
{
  return MEMORY[0x24BDE7090]();
}

uint64_t type metadata accessor for Entity.ComponentSet()
{
  return MEMORY[0x24BDE7098]();
}

uint64_t Entity.ComponentSet.subscript.modify()
{
  return MEMORY[0x24BDE70A0]();
}

uint64_t Entity.ComponentSet.subscript.getter()
{
  return MEMORY[0x24BDE70A8]();
}

uint64_t Entity.ComponentSet.subscript.setter()
{
  return MEMORY[0x24BDE70B0]();
}

uint64_t static Entity.loadModelAsync(named:in:)()
{
  return MEMORY[0x24BDE70C8]();
}

uint64_t Entity.ChildCollection.insert<A>(contentsOf:beforeIndex:)()
{
  return MEMORY[0x24BDE70E0]();
}

Swift::Void __swiftcall Entity.ChildCollection.removeAll()()
{
  MEMORY[0x24BDE70F8]();
}

uint64_t Entity.ChildCollection.startIndex.getter()
{
  return MEMORY[0x24BDE7100]();
}

Swift::Int __swiftcall Entity.ChildCollection.index(after:)(Swift::Int after)
{
  return MEMORY[0x24BDE7128](after);
}

uint64_t Entity.ChildCollection.endIndex.getter()
{
  return MEMORY[0x24BDE7130]();
}

uint64_t type metadata accessor for Entity.ChildCollection()
{
  return MEMORY[0x24BDE7138]();
}

uint64_t Entity.ChildCollection.subscript.getter()
{
  return MEMORY[0x24BDE7158]();
}

Swift::Void __swiftcall Entity.generateCollisionShapes(recursive:)(Swift::Bool recursive)
{
  MEMORY[0x24BDE7178](recursive);
}

uint64_t static Entity.== infix(_:_:)()
{
  return MEMORY[0x24BDE7180]();
}

uint64_t dispatch thunk of Entity.name.setter()
{
  return MEMORY[0x24BDE7198]();
}

uint64_t dispatch thunk of Entity.scene.getter()
{
  return MEMORY[0x24BDE71A0]();
}

uint64_t static Entity.fromCore(_:ignoringEntityInfo:)()
{
  return MEMORY[0x24BDE71A8]();
}

uint64_t Entity.init()()
{
  return MEMORY[0x24BDE71E0]();
}

uint64_t type metadata accessor for Entity()
{
  return MEMORY[0x24BDE71E8]();
}

uint64_t Entity.deinit()
{
  return MEMORY[0x24BDE7208]();
}

uint64_t HasModel.model.modify()
{
  return MEMORY[0x24BDE7210]();
}

uint64_t static Component.__load(from:)()
{
  return MEMORY[0x24BDE7258]();
}

uint64_t static Component.__coreComponentType.getter()
{
  return MEMORY[0x24BDE7268]();
}

uint64_t static Component.__fromCore(_:)()
{
  return MEMORY[0x24BDE7278]();
}

uint64_t static Component.__typeName.getter()
{
  return MEMORY[0x24BDE7280]();
}

uint64_t static Component.componentName.getter()
{
  return MEMORY[0x24BDE7288]();
}

uint64_t static Component.__addIntrospectionData(_:)()
{
  return MEMORY[0x24BDE7290]();
}

uint64_t static Component.__free(to:offset:)()
{
  return MEMORY[0x24BDE7298]();
}

uint64_t static Component.__load(from:offset:)()
{
  return MEMORY[0x24BDE72A0]();
}

uint64_t static Component.__size.getter()
{
  return MEMORY[0x24BDE72A8]();
}

uint64_t static Component.__store(attribute:to:offset:deinitialize:)()
{
  return MEMORY[0x24BDE72B0]();
}

uint64_t static Component.__store(attribute:to:offset:)()
{
  return MEMORY[0x24BDE72B8]();
}

uint64_t Component.__toCore(_:)()
{
  return MEMORY[0x24BDE72C0]();
}

uint64_t Transform.init(matrix:)()
{
  return MEMORY[0x24BDE72D0]();
}

uint64_t static Transform.identity.getter()
{
  return MEMORY[0x24BDE72D8]();
}

uint64_t Transform.init()()
{
  return MEMORY[0x24BDE72E0]();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return MEMORY[0x24BEE5C38]();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return MEMORY[0x24BEE5C40]();
}

uint64_t ObservationRegistrar.didSet<A, B>(_:keyPath:)()
{
  return MEMORY[0x24BEE5C48]();
}

uint64_t ObservationRegistrar.willSet<A, B>(_:keyPath:)()
{
  return MEMORY[0x24BEE5C50]();
}

uint64_t ObservationRegistrar.init()()
{
  return MEMORY[0x24BEE5C58]();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return MEMORY[0x24BEE5C60]();
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCF760]();
}

uint64_t __ResolvedRealityCoordinateSpace.entity.getter()
{
  return MEMORY[0x24BDE7328]();
}

uint64_t type metadata accessor for __ResolvedRealityCoordinateSpace()
{
  return MEMORY[0x24BDE7330]();
}

uint64_t __RealityCoordinateSpaceContext.init(camera:)()
{
  return MEMORY[0x24BDE7338]();
}

uint64_t type metadata accessor for __RealityCoordinateSpaceContext()
{
  return MEMORY[0x24BDE7340]();
}

uint64_t dispatch thunk of RealityFusionSession.serviceManager.getter()
{
  return MEMORY[0x24BDE7348]();
}

uint64_t dispatch thunk of RealityCoordinateSpace._resolve(in:)()
{
  return MEMORY[0x24BDE7350]();
}

uint64_t type metadata accessor for BindTarget()
{
  return MEMORY[0x24BDE73A8]();
}

uint64_t dispatch thunk of Finishable.finish()()
{
  return MEMORY[0x24BDE73C0]();
}

uint64_t EntityQuery.init(where:)()
{
  return MEMORY[0x24BDE7400]();
}

uint64_t type metadata accessor for EntityQuery()
{
  return MEMORY[0x24BDE7408]();
}

uint64_t QueryResult.makeIterator()()
{
  return MEMORY[0x24BDE7410]();
}

uint64_t QueryResult.Iterator.next()()
{
  return MEMORY[0x24BDE7418]();
}

uint64_t SceneManager.componentTypeToComponentClass(_:)()
{
  return MEMORY[0x24BDE7430]();
}

uint64_t type metadata accessor for SceneManager()
{
  return MEMORY[0x24BDE7438]();
}

uint64_t static CameraControls.none.getter()
{
  return MEMORY[0x24BDE74A0]();
}

uint64_t CameraControls.rawValue.getter()
{
  return MEMORY[0x24BDE74A8]();
}

uint64_t type metadata accessor for CameraControls()
{
  return MEMORY[0x24BDE74B0]();
}

uint64_t static QueryPredicate.canInteract(on:)()
{
  return MEMORY[0x24BDE7680]();
}

uint64_t static QueryPredicate.isDescendant(of:)()
{
  return MEMORY[0x24BDE7688]();
}

uint64_t static QueryPredicate.has<A>(_:)()
{
  return MEMORY[0x24BDE7690]();
}

uint64_t QueryPredicate.evaluate(value:)()
{
  return MEMORY[0x24BDE7698]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode()
{
  return MEMORY[0x24BDE7778]();
}

uint64_t AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.init(sessionID:captureMode:)()
{
  return MEMORY[0x24BDE7780]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent()
{
  return MEMORY[0x24BDE7788]();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)()
{
  return MEMORY[0x24BDE7790]();
}

uint64_t AnalyticsManager.ObjectCaptureSessionInitEvent.init(sessionID:)()
{
  return MEMORY[0x24BDE7798]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent()
{
  return MEMORY[0x24BDE77A0]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent.Status()
{
  return MEMORY[0x24BDE77C0]();
}

uint64_t AnalyticsManager.ObjectCaptureSessionStatusEvent.init(sessionID:status:)()
{
  return MEMORY[0x24BDE77C8]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent()
{
  return MEMORY[0x24BDE77D0]();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)()
{
  return MEMORY[0x24BDE77D8]();
}

uint64_t AnalyticsManager.ObjectCaptureSessionImageStatsEvent.init(sessionID:numImages:)()
{
  return MEMORY[0x24BDE77E0]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent()
{
  return MEMORY[0x24BDE77E8]();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionStatusEvent(event:)()
{
  return MEMORY[0x24BDE77F0]();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:)()
{
  return MEMORY[0x24BDE77F8]();
}

uint64_t AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent.init(sessionID:bundleID:)()
{
  return MEMORY[0x24BDE7800]();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent()
{
  return MEMORY[0x24BDE7808]();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)()
{
  return MEMORY[0x24BDE7810]();
}

uint64_t static AnalyticsManager.shared.getter()
{
  return MEMORY[0x24BDE7818]();
}

uint64_t type metadata accessor for AnalyticsManager()
{
  return MEMORY[0x24BDE7820]();
}

uint64_t type metadata accessor for AntialiasingMode()
{
  return MEMORY[0x24BDE7838]();
}

uint64_t EntityCollection.append(_:)()
{
  return MEMORY[0x24BDE7858]();
}

uint64_t EntityCollection.insert(_:beforeIndex:)()
{
  return MEMORY[0x24BDE7860]();
}

uint64_t EntityCollection.removeAll(where:)()
{
  return MEMORY[0x24BDE7868]();
}

uint64_t type metadata accessor for AnimationFillMode()
{
  return MEMORY[0x24BDE7878]();
}

uint64_t dispatch thunk of AsyncUpdateStream.stream.getter()
{
  return MEMORY[0x24BDE7890]();
}

uint64_t EventSubscription.subscribe(to:)()
{
  return MEMORY[0x24BDE7898]();
}

uint64_t type metadata accessor for EventSubscription()
{
  return MEMORY[0x24BDE78A0]();
}

uint64_t EventSubscription.init(_:)()
{
  return MEMORY[0x24BDE78B0]();
}

uint64_t FromToByAnimation.init(name:from:to:by:duration:timing:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)()
{
  return MEMORY[0x24BDE78B8]();
}

uint64_t AssetDescriptorRef.__as<A>(_:)()
{
  return MEMORY[0x24BDE78E8]();
}

uint64_t type metadata accessor for AssetDescriptorRef()
{
  return MEMORY[0x24BDE78F0]();
}

uint64_t type metadata accessor for MaterialParameters.Texture()
{
  return MEMORY[0x24BDE7900]();
}

uint64_t SceneUpdateContext.scene.getter()
{
  return MEMORY[0x24BDE7928]();
}

uint64_t SceneUpdateContext.entities(matching:updatingSystemWhen:)()
{
  return MEMORY[0x24BDE7930]();
}

uint64_t SceneUpdateContext.deltaTime.getter()
{
  return MEMORY[0x24BDE7938]();
}

uint64_t type metadata accessor for AnimationRepeatMode()
{
  return MEMORY[0x24BDE7968]();
}

uint64_t static SystemUpdateCondition.rendering.getter()
{
  return MEMORY[0x24BDE7A48]();
}

uint64_t type metadata accessor for SystemUpdateCondition()
{
  return MEMORY[0x24BDE7A50]();
}

uint64_t SpatialTrackingManager.init(serviceManager:arkitRunnable:)()
{
  return MEMORY[0x24BDE7AB0]();
}

uint64_t static SpatialTrackingManager.shared.getter()
{
  return MEMORY[0x24BDE7AB8]();
}

uint64_t static SpatialTrackingManager.shared.setter()
{
  return MEMORY[0x24BDE7AC0]();
}

uint64_t type metadata accessor for SpatialTrackingManager()
{
  return MEMORY[0x24BDE7AC8]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.face.getter()
{
  return MEMORY[0x24BDE7AD0]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.image.getter()
{
  return MEMORY[0x24BDE7AD8]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter()
{
  return MEMORY[0x24BDE7AE0]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.world.getter()
{
  return MEMORY[0x24BDE7AE8]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.camera.getter()
{
  return MEMORY[0x24BDE7AF0]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.object.getter()
{
  return MEMORY[0x24BDE7AF8]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability()
{
  return MEMORY[0x24BDE7B00]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.shadow.getter()
{
  return MEMORY[0x24BDE7B20]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.physics.getter()
{
  return MEMORY[0x24BDE7B28]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.collision.getter()
{
  return MEMORY[0x24BDE7B30]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.occlusion.getter()
{
  return MEMORY[0x24BDE7B38]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability()
{
  return MEMORY[0x24BDE7B40]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration.Camera()
{
  return MEMORY[0x24BDE7B68]();
}

uint64_t SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)()
{
  return MEMORY[0x24BDE7B70]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration()
{
  return MEMORY[0x24BDE7B78]();
}

uint64_t type metadata accessor for SpatialTrackingSession.UnavailableCapabilities()
{
  return MEMORY[0x24BDE7B80]();
}

uint64_t SpatialTrackingSession.stop()()
{
  return MEMORY[0x24BDE7B90]();
}

uint64_t SpatialTrackingSession.autoRun(_:)()
{
  return MEMORY[0x24BDE7BA0]();
}

uint64_t SpatialTrackingSession.autoStop()()
{
  return MEMORY[0x24BDE7BB0]();
}

uint64_t SpatialTrackingSession.init()()
{
  return MEMORY[0x24BDE7BC0]();
}

uint64_t type metadata accessor for SpatialTrackingSession()
{
  return MEMORY[0x24BDE7BC8]();
}

uint64_t PhysicallyBasedMaterial.EmissiveColor.init(color:texture:)()
{
  return MEMORY[0x24BDE8190]();
}

uint64_t type metadata accessor for PhysicallyBasedMaterial.EmissiveColor()
{
  return MEMORY[0x24BDE7C00]();
}

uint64_t PhysicallyBasedMaterial.emissiveColor.setter()
{
  return MEMORY[0x24BDE7C08]();
}

uint64_t PhysicallyBasedMaterial.emissiveIntensity.setter()
{
  return MEMORY[0x24BDE7C10]();
}

uint64_t PhysicallyBasedMaterial.BaseColor.init(tint:texture:)()
{
  return MEMORY[0x24BDE8198]();
}

uint64_t type metadata accessor for PhysicallyBasedMaterial.BaseColor()
{
  return MEMORY[0x24BDE7C28]();
}

uint64_t PhysicallyBasedMaterial.baseColor.setter()
{
  return MEMORY[0x24BDE7C30]();
}

uint64_t PhysicallyBasedMaterial.init()()
{
  return MEMORY[0x24BDE7C38]();
}

uint64_t type metadata accessor for PhysicallyBasedMaterial()
{
  return MEMORY[0x24BDE7C40]();
}

uint64_t _StoredEventSubscription.__allocating_init(to:on:componentType:_:)()
{
  return MEMORY[0x24BDE7C60]();
}

uint64_t type metadata accessor for _StoredEventSubscription()
{
  return MEMORY[0x24BDE7C68]();
}

uint64_t static PhotogrammetryFileHelpers.byteFormatter.getter()
{
  return MEMORY[0x24BDE7CA0]();
}

uint64_t static PhotogrammetryFileHelpers.temporaryDirectory.getter()
{
  return MEMORY[0x24BDE7CA8]();
}

uint64_t static PhotogrammetryFileHelpers.getAvailableStorage(ofDir:)()
{
  return MEMORY[0x24BDE7CB0]();
}

uint64_t static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)()
{
  return MEMORY[0x24BDE7CB8]();
}

uint64_t static PhotogrammetryFileHelpers.requiredBytesCheckpointDir(maxNumImagesBytes:)()
{
  return MEMORY[0x24BDE7CC0]();
}

uint64_t static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory.getter()
{
  return MEMORY[0x24BDE7CC8]();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.publishUpdate(_:)()
{
  return MEMORY[0x24BDE7CD0]();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.makeUpdater()()
{
  return MEMORY[0x24BDE7CD8]();
}

uint64_t AsyncUpdateStreamContainer.init(name:)()
{
  return MEMORY[0x24BDE7CE0]();
}

uint64_t type metadata accessor for _Proto_AntialiasingMode_v1()
{
  return MEMORY[0x24BDE7CF8]();
}

uint64_t Atomic.init(wrappedValue:)()
{
  return MEMORY[0x24BDE7D38]();
}

uint64_t Atomic.wrappedValue.getter()
{
  return MEMORY[0x24BDE7D40]();
}

uint64_t Atomic.wrappedValue.setter()
{
  return MEMORY[0x24BDE7D48]();
}

uint64_t type metadata accessor for Atomic()
{
  return MEMORY[0x24BDE7D50]();
}

uint64_t static System.registerSystem()()
{
  return MEMORY[0x24BDE7D60]();
}

uint64_t static System.dependencies.getter()
{
  return MEMORY[0x24BDE7D68]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t dispatch thunk of OCDataBuffer.asMTLBuffer(from:)()
{
  return MEMORY[0x24BE1E680]();
}

uint64_t dispatch thunk of OCDataBuffer.count.getter()
{
  return MEMORY[0x24BE1E688]();
}

uint64_t ObjectCaptureSession.init(arSession:mtlDevice:motionManager:snapshotURL:configuration:)()
{
  return MEMORY[0x24BE1E690]();
}

uint64_t dispatch thunk of ObjectCaptureSession.resetCapturePoseGraph()()
{
  return MEMORY[0x24BE1E698]();
}

uint64_t dispatch thunk of ObjectCaptureSession.detectObject(at:)()
{
  return MEMORY[0x24BE1E6A0]();
}

uint64_t ObjectCaptureSession.CaptureOptions.usePlaneFiltering.setter()
{
  return MEMORY[0x24BE1E6A8]();
}

uint64_t ObjectCaptureSession.CaptureOptions.useFreeformScanVolume.setter()
{
  return MEMORY[0x24BE1E6B0]();
}

uint64_t ObjectCaptureSession.CaptureOptions.freeformPointDensityThreshold.setter()
{
  return MEMORY[0x24BE1E6B8]();
}

uint64_t ObjectCaptureSession.CaptureOptions.init()()
{
  return MEMORY[0x24BE1E6C0]();
}

uint64_t type metadata accessor for ObjectCaptureSession.CaptureOptions()
{
  return MEMORY[0x24BE1E6C8]();
}

uint64_t ObjectCaptureSession.Configuration.enableOverCapture.setter()
{
  return MEMORY[0x24BE1E6D0]();
}

uint64_t ObjectCaptureSession.Configuration.init()()
{
  return MEMORY[0x24BE1E6D8]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Configuration()
{
  return MEMORY[0x24BE1E6E0]();
}

uint64_t ObjectCaptureSession.HardwareSpecs.maxNumImages.getter()
{
  return MEMORY[0x24BE1E6E8]();
}

uint64_t type metadata accessor for ObjectCaptureSession.HardwareSpecs()
{
  return MEMORY[0x24BE1E6F0]();
}

uint64_t static ObjectCaptureSession.hardwareSpecs.getter()
{
  return MEMORY[0x24BE1E6F8]();
}

uint64_t dispatch thunk of ObjectCaptureSession.startCapturing(inside:with:)()
{
  return MEMORY[0x24BE1E700]();
}

uint64_t dispatch thunk of ObjectCaptureSession.takeManualShot()()
{
  return MEMORY[0x24BE1E708]();
}

uint64_t dispatch thunk of ObjectCaptureSession.objectFlippable.getter()
{
  return MEMORY[0x24BE1E710]();
}

uint64_t dispatch thunk of ObjectCaptureSession.canTakeManualShot.getter()
{
  return MEMORY[0x24BE1E718]();
}

uint64_t ObjectCaptureSession.writingPublishers.getter()
{
  return MEMORY[0x24BE1E720]();
}

uint64_t dispatch thunk of ObjectCaptureSession.captureCoolDownTime.getter()
{
  return MEMORY[0x24BE1E728]();
}

uint64_t ObjectCaptureSession.observingPublishers.getter()
{
  return MEMORY[0x24BE1E730]();
}

uint64_t dispatch thunk of ObjectCaptureSession.isFreeformModeEnabled.getter()
{
  return MEMORY[0x24BE1E738]();
}

uint64_t static ObjectCaptureSession.isCurrentDeviceSupported.getter()
{
  return MEMORY[0x24BE1E740]();
}

uint64_t dispatch thunk of ObjectCaptureSession.updateFreeformScanVolume(boundingBox:)()
{
  return MEMORY[0x24BE1E748]();
}

uint64_t dispatch thunk of ObjectCaptureSession.run()()
{
  return MEMORY[0x24BE1E750]();
}

uint64_t dispatch thunk of ObjectCaptureSession.spi.getter()
{
  return MEMORY[0x24BE1E758]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.identifier.getter()
{
  return MEMORY[0x24BE1E760]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.colors.getter()
{
  return MEMORY[0x24BE1E768]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.corner.getter()
{
  return MEMORY[0x24BE1E770]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.extent.getter()
{
  return MEMORY[0x24BE1E778]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.normals.getter()
{
  return MEMORY[0x24BE1E780]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.vertices.getter()
{
  return MEMORY[0x24BE1E788]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.didRemove.getter()
{
  return MEMORY[0x24BE1E790]();
}

uint64_t ObjectCaptureSession.Mesh.Anchor.transform.getter()
{
  return MEMORY[0x24BE1E798]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Mesh.Anchor()
{
  return MEMORY[0x24BE1E7A0]();
}

uint64_t ObjectCaptureSession.Mesh.anchors.getter()
{
  return MEMORY[0x24BE1E7B0]();
}

uint64_t static ObjectCaptureSession.Error.== infix(_:_:)()
{
  return MEMORY[0x24BE1E7F0]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Error()
{
  return MEMORY[0x24BE1E808]();
}

uint64_t ObjectCaptureSession.Frame.Object.boundingBox.getter()
{
  return MEMORY[0x24BE1E820]();
}

uint64_t ObjectCaptureSession.Frame.Object.transform.getter()
{
  return MEMORY[0x24BE1E828]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Frame.Object()
{
  return MEMORY[0x24BE1E830]();
}

uint64_t ObjectCaptureSession.Frame.PointCloud.points.getter()
{
  return MEMORY[0x24BE1E840]();
}

uint64_t ObjectCaptureSession.Frame.PointCloud.transform.getter()
{
  return MEMORY[0x24BE1E848]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Frame.PointCloud()
{
  return MEMORY[0x24BE1E850]();
}

uint64_t ObjectCaptureSession.Frame.pointCloud.getter()
{
  return MEMORY[0x24BE1E860]();
}

uint64_t ObjectCaptureSession.Frame.Camera.trackingState.getter()
{
  return MEMORY[0x24BE1E868]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Frame.Camera()
{
  return MEMORY[0x24BE1E870]();
}

uint64_t ObjectCaptureSession.Frame.camera.getter()
{
  return MEMORY[0x24BE1E878]();
}

uint64_t ObjectCaptureSession.Frame.object.getter()
{
  return MEMORY[0x24BE1E880]();
}

uint64_t static ObjectCaptureSession.Frame.Feedback.outOfFieldOfView.getter()
{
  return MEMORY[0x24BE1E888]();
}

uint64_t static ObjectCaptureSession.Frame.Feedback.tooFar.getter()
{
  return MEMORY[0x24BE1E890]();
}

uint64_t static ObjectCaptureSession.Frame.Feedback.tooDark.getter()
{
  return MEMORY[0x24BE1E898]();
}

uint64_t static ObjectCaptureSession.Frame.Feedback.tooFast.getter()
{
  return MEMORY[0x24BE1E8A0]();
}

uint64_t static ObjectCaptureSession.Frame.Feedback.lowLight.getter()
{
  return MEMORY[0x24BE1E8A8]();
}

uint64_t static ObjectCaptureSession.Frame.Feedback.tooClose.getter()
{
  return MEMORY[0x24BE1E8B0]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Frame.Feedback()
{
  return MEMORY[0x24BE1E8B8]();
}

uint64_t ObjectCaptureSession.Frame.feedback.getter()
{
  return MEMORY[0x24BE1E8D8]();
}

uint64_t static ObjectCaptureSession.State.== infix(_:_:)()
{
  return MEMORY[0x24BE1E8F0]();
}

uint64_t type metadata accessor for ObjectCaptureSession.State()
{
  return MEMORY[0x24BE1E938]();
}

uint64_t dispatch thunk of ObjectCaptureSession.pause(fastResuming:)()
{
  return MEMORY[0x24BE1E950]();
}

uint64_t dispatch thunk of ObjectCaptureSession.$state.getter()
{
  return MEMORY[0x24BE1E960]();
}

uint64_t ObjectCaptureSession.Metadata.Shot.Camera.transform.getter()
{
  return MEMORY[0x24BE1E980]();
}

uint64_t type metadata accessor for ObjectCaptureSession.Metadata.Shot.Camera()
{
  return MEMORY[0x24BE1E988]();
}

uint64_t ObjectCaptureSession.Metadata.Shot.camera.getter()
{
  return MEMORY[0x24BE1E990]();
}

uint64_t ObjectCaptureSession.Metadata.Shot.timestamp.getter()
{
  return MEMORY[0x24BE1E998]();
}

uint64_t type metadata accessor for ObjectCaptureSession()
{
  return MEMORY[0x24BE1E9A8]();
}

uint64_t type metadata accessor for PhotogrammetrySession()
{
  return MEMORY[0x24BE1ED90]();
}

uint64_t dispatch thunk of ObjectCaptureSessionSPI.setAutoCapture(_:for:)()
{
  return MEMORY[0x24BE1EDA0]();
}

uint64_t dispatch thunk of ObjectCaptureSessionSPI.setDebugTapPosition(_:for:)()
{
  return MEMORY[0x24BE1EDA8]();
}

uint64_t dispatch thunk of ObjectCaptureSessionSPI.setMobileSfMEnabled(_:for:)()
{
  return MEMORY[0x24BE1EDB0]();
}

uint64_t ObjectCaptureHEICBundleWriter.init(publishers:url:)()
{
  return MEMORY[0x24BE1EDB8]();
}

uint64_t dispatch thunk of ObjectCaptureHEICBundleWriter.completionPublisher.getter()
{
  return MEMORY[0x24BE1EDC0]();
}

uint64_t dispatch thunk of ObjectCaptureHEICBundleWriter.activeWriteQueueSize.getter()
{
  return MEMORY[0x24BE1EDC8]();
}

uint64_t type metadata accessor for ObjectCaptureHEICBundleWriter()
{
  return MEMORY[0x24BE1EDD8]();
}

uint64_t dispatch thunk of ObjectCaptureSessionWritingPublishers.shotPublisher.getter()
{
  return MEMORY[0x24BE1EDF8]();
}

uint64_t dispatch thunk of ObjectCaptureSessionWritingPublishers.shotMetadataPublisher.getter()
{
  return MEMORY[0x24BE1EE00]();
}

uint64_t dispatch thunk of ObjectCaptureSessionObservingPublishers.meshPublisher.getter()
{
  return MEMORY[0x24BE1EE08]();
}

uint64_t dispatch thunk of ObjectCaptureSessionObservingPublishers.framePublisher.getter()
{
  return MEMORY[0x24BE1EE10]();
}

uint64_t dispatch thunk of ObjectCaptureSessionObservingPublishers.tapPositionPublisher.getter()
{
  return MEMORY[0x24BE1EE18]();
}

uint64_t noErr.getter()
{
  return MEMORY[0x24BEE5370]();
}

uint64_t dispatch thunk of Cancellable.cancel()()
{
  return MEMORY[0x24BDB9A50]();
}

uint64_t AnyCancellable.store(in:)()
{
  return MEMORY[0x24BDB9B40]();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
  MEMORY[0x24BDB9B50]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x24BDB9B60]();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return MEMORY[0x24BDB9C48]();
}

uint64_t ConnectablePublisher.autoconnect()()
{
  return MEMORY[0x24BDB9D18]();
}

uint64_t Published.init(initialValue:)()
{
  return MEMORY[0x24BDB9E98]();
}

uint64_t Published.projectedValue.getter()
{
  return MEMORY[0x24BDB9EA0]();
}

uint64_t static Published.subscript.modify()
{
  return MEMORY[0x24BDB9EC0]();
}

uint64_t static Published.subscript.getter()
{
  return MEMORY[0x24BDB9EC8]();
}

uint64_t static Published.subscript.setter()
{
  return MEMORY[0x24BDB9ED0]();
}

uint64_t type metadata accessor for Published()
{
  return MEMORY[0x24BDB9EF0]();
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)()
{
  return MEMORY[0x24BDB9FB0]();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return MEMORY[0x24BDBA090]();
}

uint64_t Publisher<>.makeConnectable()()
{
  return MEMORY[0x24BDBA108]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x24BDBA110]();
}

uint64_t static Animatable._makeAnimatable(value:inputs:)()
{
  return MEMORY[0x24BDEAED0]();
}

uint64_t type metadata accessor for AnyGesture()
{
  return MEMORY[0x24BDEAED8]();
}

uint64_t AnyGesture.init<A>(_:)()
{
  return MEMORY[0x24BDEAEE8]();
}

uint64_t TapGesture.init(count:)()
{
  return MEMORY[0x24BDEB2A0]();
}

uint64_t type metadata accessor for TapGesture()
{
  return MEMORY[0x24BDEB2B0]();
}

uint64_t static ColorScheme.== infix(_:_:)()
{
  return MEMORY[0x24BDEB3E0]();
}

uint64_t type metadata accessor for ColorScheme()
{
  return MEMORY[0x24BDEB418]();
}

uint64_t DragGesture.init<A>(minimumDistance:coordinateSpace:)()
{
  return MEMORY[0x24BDEB4C0]();
}

uint64_t DragGesture.Value.predictedEndLocation.getter()
{
  return MEMORY[0x24BDEB4E8]();
}

uint64_t DragGesture.Value.location.getter()
{
  return MEMORY[0x24BDEB4F8]();
}

uint64_t type metadata accessor for DragGesture()
{
  return MEMORY[0x24BDEB540]();
}

uint64_t type metadata accessor for Environment.Content()
{
  return MEMORY[0x24BDEB560]();
}

uint64_t static GestureMask.all.getter()
{
  return MEMORY[0x24BDEB5B8]();
}

uint64_t static GestureMask.subviews.getter()
{
  return MEMORY[0x24BDEB5C8]();
}

uint64_t StateObject.wrappedValue.getter()
{
  return MEMORY[0x24BDEB790]();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return MEMORY[0x24BDEB7B8]();
}

uint64_t Transaction.disablesAnimations.setter()
{
  return MEMORY[0x24BDEB888]();
}

uint64_t type metadata accessor for _MapGesture()
{
  return MEMORY[0x24BDEB9B0]();
}

uint64_t ProgressView<>.init<>()()
{
  return MEMORY[0x24BDEBBC8]();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return MEMORY[0x24BDEBE00]();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return MEMORY[0x24BDEBED0]();
}

uint64_t AnyShapeStyle.init<A>(_:)()
{
  return MEMORY[0x24BDEBF88]();
}

uint64_t AnyTransition.init<A>(_:)()
{
  return MEMORY[0x24BDEC000]();
}

uint64_t GeometryProxy.size.getter()
{
  return MEMORY[0x24BDEC120]();
}

uint64_t GeometryProxy.frame(in:)()
{
  return MEMORY[0x24BDEC130]();
}

uint64_t type metadata accessor for GeometryProxy()
{
  return MEMORY[0x24BDEC148]();
}

uint64_t static PreferenceKey._isReadableByHost.getter()
{
  return MEMORY[0x24BDEC348]();
}

uint64_t static PreferenceKey._includesRemovedValues.getter()
{
  return MEMORY[0x24BDEC358]();
}

uint64_t type metadata accessor for _EndedGesture()
{
  return MEMORY[0x24BDEC3F0]();
}

uint64_t type metadata accessor for _TaskModifier()
{
  return MEMORY[0x24BDEC4E0]();
}

uint64_t withAnimation<A>(_:_:)()
{
  return MEMORY[0x24BDEC5A0]();
}

uint64_t static EnvironmentKey<>._valuesEqual(_:_:)()
{
  return MEMORY[0x24BDEC648]();
}

uint64_t GeometryReader.init(content:)()
{
  return MEMORY[0x24BDEC6D8]();
}

uint64_t type metadata accessor for GeometryReader()
{
  return MEMORY[0x24BDEC6E0]();
}

uint64_t MagnifyGesture.init(minimumScaleDelta:)()
{
  return MEMORY[0x24BDEC818]();
}

uint64_t MagnifyGesture.Value.magnification.getter()
{
  return MEMORY[0x24BDEC820]();
}

uint64_t type metadata accessor for MagnifyGesture()
{
  return MEMORY[0x24BDEC840]();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return MEMORY[0x24BDEC998]();
}

uint64_t type metadata accessor for CoordinateSpace()
{
  return MEMORY[0x24BDECE00]();
}

uint64_t type metadata accessor for ModifiedContent()
{
  return MEMORY[0x24BDED2D0]();
}

uint64_t static SafeAreaRegions.all.getter()
{
  return MEMORY[0x24BDED3B0]();
}

uint64_t withTransaction<A>(_:_:)()
{
  return MEMORY[0x24BDED5F8]();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return MEMORY[0x24BDEDEE8]();
}

uint64_t EnvironmentValues.colorScheme.setter()
{
  return MEMORY[0x24BDEDEF8]();
}

uint64_t EnvironmentValues.backgroundStyle.getter()
{
  return MEMORY[0x24BDEDFF8]();
}

uint64_t EnvironmentValues.backgroundStyle.setter()
{
  return MEMORY[0x24BDEE000]();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return MEMORY[0x24BDEE038]();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return MEMORY[0x24BDEE048]();
}

uint64_t EnvironmentValues.allowedDynamicRange.getter()
{
  return MEMORY[0x24BDEE1A8]();
}

uint64_t EnvironmentValues.allowedDynamicRange.setter()
{
  return MEMORY[0x24BDEE1B0]();
}

uint64_t EnvironmentValues.init()()
{
  return MEMORY[0x24BDEE4E0]();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return MEMORY[0x24BDEE4F8]();
}

uint64_t EnvironmentValues.subscript.getter()
{
  return MEMORY[0x24BDEE530]();
}

uint64_t EnvironmentValues.subscript.setter()
{
  return MEMORY[0x24BDEE538]();
}

uint64_t OpacityTransition.init()()
{
  return MEMORY[0x24BDEE628]();
}

uint64_t type metadata accessor for OpacityTransition()
{
  return MEMORY[0x24BDEE630]();
}

uint64_t static VerticalAlignment.center.getter()
{
  return MEMORY[0x24BDEE730]();
}

uint64_t static AnimatableModifier._makeViewList(modifier:inputs:body:)()
{
  return MEMORY[0x24BDEE8A0]();
}

uint64_t static AnimatableModifier._makeView(modifier:inputs:body:)()
{
  return MEMORY[0x24BDEE8A8]();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)()
{
  return MEMORY[0x24BDEE9E8]();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  MEMORY[0x24BDEEA28](a1._countAndFlagsBits, a1._object);
}

uint64_t LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return MEMORY[0x24BDEEA30]();
}

uint64_t type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return MEMORY[0x24BDEEA40]();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return MEMORY[0x24BDEEA50]();
}

uint64_t LocalizedStringKey.init(stringInterpolation:)()
{
  return MEMORY[0x24BDEEA60]();
}

uint64_t static HorizontalAlignment.center.getter()
{
  return MEMORY[0x24BDEEF60]();
}

uint64_t UIViewRepresentable._resetUIView(_:coordinator:destroy:)()
{
  return MEMORY[0x24BDEF228]();
}

uint64_t static UIViewRepresentable.dismantleUIView(_:coordinator:)()
{
  return MEMORY[0x24BDEF238]();
}

uint64_t UIViewRepresentable.sizeThatFits(_:uiView:context:)()
{
  return MEMORY[0x24BDEF248]();
}

uint64_t static UIViewRepresentable._makeViewList(view:inputs:)()
{
  return MEMORY[0x24BDEF260]();
}

uint64_t static UIViewRepresentable._layoutOptions(_:)()
{
  return MEMORY[0x24BDEF270]();
}

uint64_t UIViewRepresentable._identifiedViewTree(in:)()
{
  return MEMORY[0x24BDEF278]();
}

uint64_t UIViewRepresentable._overrideLayoutTraits(_:for:)()
{
  return MEMORY[0x24BDEF288]();
}

uint64_t UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)()
{
  return MEMORY[0x24BDEF298]();
}

uint64_t static UIViewRepresentable._modifyBridgedViewInputs(_:)()
{
  return MEMORY[0x24BDEF2A8]();
}

uint64_t UIViewRepresentable.body.getter()
{
  return MEMORY[0x24BDEF2C0]();
}

uint64_t static UIViewRepresentable._makeView(view:inputs:)()
{
  return MEMORY[0x24BDEF2C8]();
}

uint64_t UIViewRepresentable<>.makeCoordinator()()
{
  return MEMORY[0x24BDEF2D8]();
}

uint64_t type metadata accessor for _ConditionalContent.Storage()
{
  return MEMORY[0x24BDEF380]();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return MEMORY[0x24BDEF3A0]();
}

uint64_t type metadata accessor for _ConditionalContent()
{
  return MEMORY[0x24BDEF3B8]();
}

uint64_t type metadata accessor for LocalCoordinateSpace()
{
  return MEMORY[0x24BDEF540]();
}

uint64_t dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter()
{
  return MEMORY[0x24BDF0128]();
}

uint64_t static CoordinateSpaceProtocol<>.local.getter()
{
  return MEMORY[0x24BDF0138]();
}

uint64_t PlatformViewHitTestFilterGesture.Value.gestureValue.getter()
{
  return MEMORY[0x24BDF1198]();
}

uint64_t type metadata accessor for PlatformViewHitTestFilterGesture.Value()
{
  return MEMORY[0x24BDF11A0]();
}

uint64_t type metadata accessor for PlatformViewHitTestFilterGesture()
{
  return MEMORY[0x24BDF11A8]();
}

uint64_t PlatformViewHitTestFilterGesture.init(_:filter:)()
{
  return MEMORY[0x24BDF11B0]();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return MEMORY[0x24BDF1430]();
}

uint64_t static Edge.Set.all.getter()
{
  return MEMORY[0x24BDF14A8]();
}

uint64_t static Edge.Set.leading.getter()
{
  return MEMORY[0x24BDF14E0]();
}

uint64_t static Edge.Set.trailing.getter()
{
  return MEMORY[0x24BDF14F8]();
}

uint64_t static Font.Weight.bold.getter()
{
  return MEMORY[0x24BDF16A8]();
}

uint64_t Path.cgPath.getter()
{
  return MEMORY[0x24BDF1A78]();
}

Swift::Void __swiftcall Path.move(to:)(CGPoint to)
{
  unint64_t v1;
  unint64_t v2;

  MEMORY[0x24BDF1AF0]((__n128)__PAIR128__(v1, *(unint64_t *)&to.x), (__n128)__PAIR128__(v2, *(unint64_t *)&to.y));
}

uint64_t Path.addArc(tangent1End:tangent2End:radius:transform:)()
{
  return MEMORY[0x24BDF1B08]();
}

Swift::Void __swiftcall Path.addLine(to:)(CGPoint to)
{
  unint64_t v1;
  unint64_t v2;

  MEMORY[0x24BDF1B30]((__n128)__PAIR128__(v1, *(unint64_t *)&to.x), (__n128)__PAIR128__(v2, *(unint64_t *)&to.y));
}

uint64_t Path.init(_:)()
{
  return MEMORY[0x24BDF1BD0]();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return MEMORY[0x24BDF1FC0]();
}

uint64_t static View<>._makeView(view:inputs:)()
{
  return MEMORY[0x24BDF2028]();
}

uint64_t static View<>._makeViewList(view:inputs:)()
{
  return MEMORY[0x24BDF2030]();
}

uint64_t static View._makeView(view:inputs:)()
{
  return MEMORY[0x24BDF2088]();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return MEMORY[0x24BDF20A0]();
}

uint64_t View.fontWeight(_:)()
{
  return MEMORY[0x24BDF2138]();
}

uint64_t View.environment<A>(_:_:)()
{
  return MEMORY[0x24BDF2370]();
}

uint64_t View.onDisappear(perform:)()
{
  return MEMORY[0x24BDF23D8]();
}

uint64_t static View._viewListCount(inputs:)()
{
  return MEMORY[0x24BDF2698]();
}

uint64_t View.allowsHitTesting(_:)()
{
  return MEMORY[0x24BDF2920]();
}

uint64_t View.onContinuousHover<A>(coordinateSpace:perform:)()
{
  return MEMORY[0x24BDF2AC0]();
}

uint64_t View.edgesIgnoringSafeArea(_:)()
{
  return MEMORY[0x24BDF3040]();
}

uint64_t View.id<A>(_:)()
{
  return MEMORY[0x24BDF33C8]();
}

uint64_t View.task(priority:_:)()
{
  return MEMORY[0x24BDF34D0]();
}

uint64_t View.frame(width:height:alignment:)()
{
  return MEMORY[0x24BDF3628]();
}

uint64_t View.gesture<A>(_:including:)()
{
  return MEMORY[0x24BDF3768]();
}

uint64_t View.padding(_:_:)()
{
  return MEMORY[0x24BDF37E0]();
}

uint64_t View.onAppear(perform:)()
{
  return MEMORY[0x24BDF38C8]();
}

uint64_t View.fixedSize()()
{
  return MEMORY[0x24BDF39B8]();
}

uint64_t type metadata accessor for Color.RGBColorSpace()
{
  return MEMORY[0x24BDF3C40]();
}

uint64_t static Color.clear.getter()
{
  return MEMORY[0x24BDF3D10]();
}

uint64_t static Color.white.getter()
{
  return MEMORY[0x24BDF3D30]();
}

uint64_t static Color.yellow.getter()
{
  return MEMORY[0x24BDF3D60]();
}

uint64_t Color.opacity(_:)()
{
  return MEMORY[0x24BDF3D78]();
}

uint64_t Color.init(_:white:opacity:)()
{
  return MEMORY[0x24BDF3E78]();
}

uint64_t Group<A>.init(content:)()
{
  return MEMORY[0x24BDF3F18]();
}

uint64_t type metadata accessor for Group()
{
  return MEMORY[0x24BDF3F28]();
}

uint64_t Image.init(systemName:)()
{
  return MEMORY[0x24BDF3F80]();
}

uint64_t static Image.DynamicRange.constrainedHigh.getter()
{
  return MEMORY[0x24BDF3FA0]();
}

uint64_t static Image.DynamicRange.high.getter()
{
  return MEMORY[0x24BDF3FA8]();
}

uint64_t type metadata accessor for Image.DynamicRange()
{
  return MEMORY[0x24BDF3FB0]();
}

uint64_t type metadata accessor for Image.ResizingMode()
{
  return MEMORY[0x24BDF3FE8]();
}

uint64_t Image.resizable(capInsets:resizingMode:)()
{
  return MEMORY[0x24BDF40D8]();
}

uint64_t Shape.sizeThatFits(_:)()
{
  return MEMORY[0x24BDF4208]();
}

uint64_t static Shape._makeViewList(view:inputs:)()
{
  return MEMORY[0x24BDF4218]();
}

uint64_t Shape.layoutDirectionBehavior.getter()
{
  return MEMORY[0x24BDF4230]();
}

uint64_t Shape.body.getter()
{
  return MEMORY[0x24BDF4238]();
}

uint64_t static Shape.role.getter()
{
  return MEMORY[0x24BDF4248]();
}

uint64_t static Shape._makeView(view:inputs:)()
{
  return MEMORY[0x24BDF4278]();
}

uint64_t State.init(wrappedValue:)()
{
  return MEMORY[0x24BDF4280]();
}

uint64_t State.wrappedValue.getter()
{
  return MEMORY[0x24BDF4290]();
}

uint64_t State.wrappedValue.setter()
{
  return MEMORY[0x24BDF42A8]();
}

uint64_t State.projectedValue.getter()
{
  return MEMORY[0x24BDF42B0]();
}

uint64_t type metadata accessor for State()
{
  return MEMORY[0x24BDF42C0]();
}

uint64_t Button.init(action:label:)()
{
  return MEMORY[0x24BDF4340]();
}

uint64_t HStack.init(alignment:spacing:content:)()
{
  return MEMORY[0x24BDF4470]();
}

uint64_t type metadata accessor for HStack()
{
  return MEMORY[0x24BDF4480]();
}

uint64_t type metadata accessor for IDView()
{
  return MEMORY[0x24BDF44B0]();
}

uint64_t VStack.init(alignment:spacing:content:)()
{
  return MEMORY[0x24BDF46D8]();
}

uint64_t type metadata accessor for VStack()
{
  return MEMORY[0x24BDF46E0]();
}

uint64_t ZStack.init(alignment:content:)()
{
  return MEMORY[0x24BDF4728]();
}

uint64_t type metadata accessor for ZStack()
{
  return MEMORY[0x24BDF4730]();
}

uint64_t Binding.wrappedValue.setter()
{
  return MEMORY[0x24BDF47B8]();
}

uint64_t static Gesture<>._makeGesture(gesture:inputs:)()
{
  return MEMORY[0x24BDF4A18]();
}

uint64_t Gesture.map<A>(_:)()
{
  return MEMORY[0x24BDF4A20]();
}

uint64_t Gesture.onEnded(_:)()
{
  return MEMORY[0x24BDF4A28]();
}

uint64_t Gesture<>.onChanged(_:)()
{
  return MEMORY[0x24BDF4A40]();
}

uint64_t static Alignment.center.getter()
{
  return MEMORY[0x24BDF4F18]();
}

uint64_t static Animation.linear(duration:)()
{
  return MEMORY[0x24BDF4FB8]();
}

uint64_t static Animation.default.getter()
{
  return MEMORY[0x24BDF4FE0]();
}

uint64_t static Animation.easeOut(duration:)()
{
  return MEMORY[0x24BDF4FF0]();
}

uint64_t static Animation.easeInOut(duration:)()
{
  return MEMORY[0x24BDF5010]();
}

uint64_t type metadata accessor for TupleView()
{
  return MEMORY[0x24BDF53F0]();
}

uint64_t TupleView.init(_:)()
{
  return MEMORY[0x24BDF5418]();
}

uint64_t static UnitPoint.center.getter()
{
  return MEMORY[0x24BDF54A0]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return MEMORY[0x24BEE54D8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t DispatchTime.uptimeNanoseconds.getter()
{
  return MEMORY[0x24BEE5558]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x24BEE5570]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x24BEE5590]();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return MEMORY[0x24BEE5618]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x24BEE5628]();
}

uint64_t - infix(_:_:)()
{
  return MEMORY[0x24BEE5640]();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return MEMORY[0x24BEE5648]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return MEMORY[0x24BEE0620]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t type metadata accessor for ClosedRange()
{
  return MEMORY[0x24BEE08B8]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t String.init(cString:encoding:)()
{
  return MEMORY[0x24BDCFA80]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t static String.Encoding.ascii.getter()
{
  return MEMORY[0x24BDCFAD8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A08]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x24BEE0B78]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.remove(at:)()
{
  return MEMORY[0x24BEE0BE0]();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = MEMORY[0x24BEE0C00]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0D98]();
}

{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x24BEE0E70]();
}

uint64_t Sequence<>.joined(separator:)()
{
  return MEMORY[0x24BEE0F40]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF()
{
  return MEMORY[0x24BEE6908]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return MEMORY[0x24BEE6940]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t AsyncStream.Iterator.next()()
{
  return MEMORY[0x24BEE6A68]();
}

uint64_t type metadata accessor for AsyncStream.Iterator()
{
  return MEMORY[0x24BEE6A78]();
}

uint64_t type metadata accessor for AsyncStream()
{
  return MEMORY[0x24BEE6A98]();
}

Swift::Void __swiftcall Task.cancel()()
{
  MEMORY[0x24BEE6AD0]();
}

uint64_t Float.init(_:)()
{
  return MEMORY[0x24BEE1570]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x24BDCFCC0]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFCE8]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x24BEE1598]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x24BEE1908]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t static simd_quatf.identity.getter()
{
  return MEMORY[0x24BDE7D80]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

void __swiftcall simd_float4x4.init(_:)(simd_float4x4 *__return_ptr retstr, simd_quatf *a2)
{
  MEMORY[0x24BEE79B8](retstr, a2);
}

uint64_t simd_float4x4.scale(_:)()
{
  return MEMORY[0x24BDE7D90]();
}

uint64_t simd_float4x4.transform(position:)()
{
  return MEMORY[0x24BDE7DA0]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x24BEE56B8]();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return MEMORY[0x24BEE56F0]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x24BEE5780]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t type metadata accessor for NSNotificationCenter.Publisher()
{
  return MEMORY[0x24BDD0078]();
}

uint64_t NSNotificationCenter.publisher(for:object:)()
{
  return MEMORY[0x24BDD0098]();
}

uint64_t OS_geom_interpolating_curve_3f.init(keys:arcLengthParameterized:)()
{
  return MEMORY[0x24BE3D210]();
}

uint64_t UIColor.init(_:)()
{
  return MEMORY[0x24BDF5540]();
}

uint64_t static ARCamera.TrackingState.== infix(_:_:)()
{
  return MEMORY[0x24BEDF328]();
}

uint64_t type metadata accessor for ARCamera.TrackingState.Reason()
{
  return MEMORY[0x24BEDF350]();
}

uint64_t type metadata accessor for ARCamera.TrackingState()
{
  return MEMORY[0x24BEDF358]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE5BB8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x24BEE5BC8]();
}

uint64_t _NSRange.init<A, B>(_:in:)()
{
  return MEMORY[0x24BDD0270]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t StringProtocol.compare<A>(_:options:range:locale:)()
{
  return MEMORY[0x24BDD0620]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return MEMORY[0x24BEE2200]();
}

uint64_t dispatch thunk of SetAlgebra.intersection(_:)()
{
  return MEMORY[0x24BEE2210]();
}

uint64_t dispatch thunk of SetAlgebra.isEmpty.getter()
{
  return MEMORY[0x24BEE2250]();
}

uint64_t dispatch thunk of SetAlgebra.subtract(_:)()
{
  return MEMORY[0x24BEE2268]();
}

uint64_t dispatch thunk of SetAlgebra.formUnion(_:)()
{
  return MEMORY[0x24BEE2270]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x24BEE22F8]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return MEMORY[0x24BEE2318]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x24BEE2320]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x24BEE2328]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x24BEE2338]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x24BEE2348]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return MEMORY[0x24BEE2368]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x24BEE24C8]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE24D0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t Identifiable<>.id.getter()
{
  return MEMORY[0x24BEE2578]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x24BEE31D0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3368]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34B8]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x24BEE3548](a1);
}

uint64_t _stringCompareInternal(_:_:_:_:expecting:)()
{
  return MEMORY[0x24BEE3550]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t SIMD.description.getter()
{
  return MEMORY[0x24BEE3E90]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t SIMD4<>._xyz.getter()
{
  return MEMORY[0x24BDE7DB0]();
}

uint64_t SIMD4<>._xyz.setter()
{
  return MEMORY[0x24BDE7DB8]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t ARViewToCameraImageTransform()
{
  return MEMORY[0x24BDB1458]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x24BDE5410]();
  return result;
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x24BDBBD08]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8A0](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8C0](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8D8](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8E0](retstr, sx, sy);
}

CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x24BDBDA98](gray, alpha);
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  double v2;
  double v3;
  CGPoint result;

  MEMORY[0x24BDBEF90](t, (__n128)point, *(__n128 *)&point.y);
  result.y = v3;
  result.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x24BDBEFC0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFE8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF020]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x24BDC51F8](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x24BDC5200](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x24BDC5210](image);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x24BDC5278](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52B8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x24BDC52C0](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52E8](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52F0](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x24BDD88B0](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x24BDD8988](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDD89A8](name);
}

uint64_t IOSurfaceGetYCbCrMatrix()
{
  return MEMORY[0x24BDD8CE8]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x24BDDD1E0]();
}

uint64_t REComponentGetEntity()
{
  return MEMORY[0x24BE216F8]();
}

uint64_t REComponentMarkDirty()
{
  return MEMORY[0x24BE21708]();
}

uint64_t REConvertProjectionToMatrix4x4()
{
  return MEMORY[0x24BE217F0]();
}

uint64_t RECustomMatrixCameraComponentAdjustProjectionAspect()
{
  return MEMORY[0x24BE21918]();
}

uint64_t RECustomMatrixCameraComponentCalculateProjection()
{
  return MEMORY[0x24BE21920]();
}

uint64_t RECustomMatrixCameraComponentGetComponentType()
{
  return MEMORY[0x24BE21930]();
}

uint64_t REEntityGetComponentByClass()
{
  return MEMORY[0x24BE220A8]();
}

uint64_t REEntityGetOrAddComponentByClass()
{
  return MEMORY[0x24BE220D8]();
}

uint64_t REHideEntity()
{
  return MEMORY[0x24BE22618]();
}

uint64_t REHierarchicalFadeComponentGetComponentType()
{
  return MEMORY[0x24BE22620]();
}

uint64_t REHierarchicalFadeComponentSetOpacity()
{
  return MEMORY[0x24BE22630]();
}

uint64_t REPerspectiveCameraComponentAdjustProjectionAspect()
{
  return MEMORY[0x24BE23790]();
}

uint64_t REPerspectiveCameraComponentCalculateProjectionWithAspectRatio()
{
  return MEMORY[0x24BE23798]();
}

uint64_t REPerspectiveCameraComponentGetComponentType()
{
  return MEMORY[0x24BE237A0]();
}

uint64_t REPhysicsSimulationServiceSetAnchorShouldHaveSharedSimulationByDefault()
{
  return MEMORY[0x24BE23950]();
}

uint64_t REProjectionClipSpaceNearZ()
{
  return MEMORY[0x24BE23BB0]();
}

uint64_t REProjectionUnprojectPoint()
{
  return MEMORY[0x24BE23BB8]();
}

uint64_t RERelease()
{
  return MEMORY[0x24BE23EA8]();
}

uint64_t RERemoteEffectsServiceAddHitTestData()
{
  return MEMORY[0x24BE23F38]();
}

uint64_t RERemoteEffectsServiceHitTestDataSetLocation()
{
  return MEMORY[0x24BE23F40]();
}

uint64_t RERemoteEffectsServiceHitTestDataSetSource()
{
  return MEMORY[0x24BE23F48]();
}

uint64_t RERemoteEffectsServiceHitTestDataSetTargetEntity()
{
  return MEMORY[0x24BE23F50]();
}

uint64_t RERemoteEffectsServiceHoverEffectSettingsCreate()
{
  return MEMORY[0x24BE23F58]();
}

uint64_t RERemoteEffectsServiceInvalidateHitTestData()
{
  return MEMORY[0x24BE23F60]();
}

uint64_t RESceneGetComponentsOfClass()
{
  return MEMORY[0x24BE242F8]();
}

uint64_t REServiceLocatorGetPhysicsSimulationService()
{
  return MEMORY[0x24BE24588]();
}

uint64_t REServiceLocatorGetRemoteEffectsService()
{
  return MEMORY[0x24BE24590]();
}

uint64_t RETransformComponentGetComponentType()
{
  return MEMORY[0x24BE25690]();
}

uint64_t RETransformComponentGetWorldMatrix4x4F()
{
  return MEMORY[0x24BE256C0]();
}

void UIGraphicsPopContext(void)
{
  MEMORY[0x24BEBE2B8]();
}

void UIGraphicsPushContext(CGContextRef context)
{
  MEMORY[0x24BEBE2C0](context);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  simd_float4x4 result;

  MEMORY[0x24BDAC828]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

float acosf(float a1)
{
  float result;

  MEMORY[0x24BDAD110](a1);
  return result;
}

float asinf(float a1)
{
  float result;

  MEMORY[0x24BDAD190](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

float atanf(float a1)
{
  float result;

  MEMORY[0x24BDAD230](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

uint64_t geom_interpolating_curve_evaluate_at_3f()
{
  return MEMORY[0x24BE3D2F0]();
}

uint64_t geom_interpolating_curve_evaluate_tangent_at_3f()
{
  return MEMORY[0x24BE3D2F8]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x24BDAEB58](*(_QWORD *)&error_value);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x24BDAFE18](__x);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x24BDAFE20](a1);
  return result;
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x24BEE4DF0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x24BEE4E00]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x24BEE4E50]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x24BEE4FF0]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x24BEE4FF8]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x24BEE5000]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x24BEE5010]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x24BEE5018]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x24BEE5020]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x24BEE5040]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x24BEE5048]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

float tanf(float a1)
{
  float result;

  MEMORY[0x24BDB0140](a1);
  return result;
}

float tanhf(float a1)
{
  float result;

  MEMORY[0x24BDB0150](a1);
  return result;
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x24BDB0180](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

