int32x2_t *MTLResourceListAddResource(int32x2_t *result, uint64_t a2)
{
  int32x2_t *v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v2 = result + 1;
  v3 = (0x9E3779B97F4A7C15 * a2) >> -(uint64_t)result[1].u32[1];
  v4 = *(_DWORD *)(*(_QWORD *)&result[3] + 4 * v3);
  while (v4)
  {
    v5 = __clz(__rbit32(v4));
    v4 &= ~(1 << v5);
    if (*(_QWORD *)(*(_QWORD *)&result[4] + 8 * ((v5 + v3) & (result[1].i32[0] - 1))) == a2)
      return result;
  }
  if ((MTLResourceListAddHashValue((uint64_t)&result[1], a2) & 1) == 0)
  {
    MTLResourceListGrowAndReset(v2);
    MTLResourceListAddHashValue((uint64_t)v2, a2);
  }
  MTLResourceListChunksAddEntry(v2, a2);
  return (int32x2_t *)(id)a2;
}

_QWORD *MTLResourceListChunksAddEntry(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *((unsigned int *)result + 8);
  v5 = *((int *)result + 14);
  v6 = result[5];
  if (v4 >= v5)
  {
    *(_DWORD *)(v6 - 24) = v4;
    v7 = v6 - 24;
    *(_QWORD *)(v7 + 16) = result[6];
    *((_DWORD *)result + 8) = 1;
    result[6] = v7;
    result = malloc_type_malloc(8 * v5 + 24, 0xDE147B92uLL);
    result[3] = a2;
    *(_DWORD *)result = 0;
    result[1] = result + 3;
    result[2] = 0;
    v3[5] = result + 3;
  }
  else
  {
    *(_QWORD *)(v6 + 8 * v4) = a2;
    *((_DWORD *)result + 8) = v4 + 1;
  }
  return result;
}

uint64_t MTLResourceListAddHashValue(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v22;
  uint64_t v23;

  v2 = 0;
  v3 = *(_DWORD *)a1 - 1;
  v4 = (0x9E3779B97F4A7C15 * a2) >> -(uint64_t)*(unsigned int *)(a1 + 4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = v4 & 0x3F;
  v7 = *(_QWORD *)(v5 + 8 * (v4 >> 6)) | ~(-1 << v4);
  v8 = v4 >> 6 << 6;
  v9 = (v4 >> 6) + 1;
  while (v7 == -1)
  {
    v2 = v2 - v6 + 64;
    v7 = *(_QWORD *)(v5 + 8 * (v9 & ((*(_DWORD *)a1 >> 6) - 1)));
    v8 += 64;
    ++v9;
    v6 = 0;
    if (v2 >= 0x80)
      return 0;
  }
  v10 = __clz(__rbit64(~v7)) + v8;
  if ((v10 - v4) > 0x7F)
    return 0;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_DWORD *)a1 - 64;
  while ((v10 - v4) >= 0x20)
  {
    v15 = v10 - 31;
    if (v10 < 0x1F)
    {
LABEL_19:
      v20 = v10;
    }
    else
    {
      v15 = v10 - 30;
      if (v10 >= (int)v10 - 30)
        v15 = v10;
      v16 = -31;
      while (1)
      {
        v17 = ((_DWORD)v10 + v16) & v3;
        v18 = *(_DWORD *)(v12 + 4 * v17);
        v19 = __clz(__rbit32(v18));
        v20 = (_DWORD)v10 + v16 + v19;
        if (v18 && v20 < v10)
          break;
        if (!__CFADD__((_DWORD)v10, ++v16))
          goto LABEL_19;
      }
      v23 = *(_QWORD *)(v13 + 8 * (v20 & v3));
      *(_DWORD *)(v12 + 4 * v17) = v18 & ~(1 << v19) | (1 << -(char)v16);
      *(_QWORD *)(v5 + 8 * ((v10 & v14) >> 6)) |= 1 << v10;
      *(_QWORD *)(v13 + 8 * (v10 & v3)) = v23;
      v15 = v10 + v16;
    }
    v22 = v15 == (_DWORD)v10;
    v10 = v20;
    if (v22)
      return 0;
  }
  *(_QWORD *)(v13 + 8 * (v10 & v3)) = a2;
  result = 1;
  *(_DWORD *)(v12 + 4 * v4) |= 1 << (v10 - v4);
  *(_QWORD *)(v5 + 8 * ((v10 & v14) >> 6)) |= 1 << v10;
  return result;
}

void sub_182637ED4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL MTLTraceEnabled()
{
  IOAccelInitCommPage();
  return *(_DWORD *)*MEMORY[0x1E0D39EE0] != 0;
}

void MTLDispatchListApply(void *a1)
{
  void *v1;
  void *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = *(void **)v1;
      (*(void (**)(void))(*((_QWORD *)v1 + 1) + 16))();
      _Block_release(*((const void **)v1 + 1));
      free(v1);
      v1 = v2;
    }
    while (v2);
  }
}

MTLStructTypeInternal *deserializeStructArgument(uint64_t a1, unsigned int *a2, uint64_t a3, ReflectionDeserializeContext *a4, _BYTE *a5)
{
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  int *v11;
  void *StructForId;
  MTLStructTypeInternal *v14;
  MTLStructTypeInternal *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  void *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  MTLArrayTypeInternal *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  const void *v59;
  size_t v60;
  int v61;
  uint64_t v62;
  unsigned int *v63;
  int *v64;
  unsigned __int16 *v65;
  uint64_t v66;
  _DWORD *v67;
  unsigned int StructIndirectArgumentIndexStride;
  unsigned int *v69;
  int *v70;
  unsigned __int16 *v71;
  uint64_t v72;
  _DWORD *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  size_t v79;
  unint64_t v80;
  MTLArrayTypeInternal *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  MTLArrayTypeInternal *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const void *v94;
  size_t v95;
  MTLArrayTypeInternal *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const void *v100;
  size_t v101;
  unsigned int v102;
  const __CFString *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  MTLStructMemberInternal *v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int16 v115;
  uint64_t v116;
  uint64_t i;
  MTLStructTypeInternal *v118;
  uint64_t v119;
  unsigned int v120;
  ReflectionDeserializeContext *v121;
  size_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v127;
  __int128 v128;
  _BYTE v129[32];
  int v130;
  _OWORD v131[2];
  int v132;

  v8 = a3 + 4;
  v9 = (unsigned int *)(a3 + 4 + 4 * *a2);
  v10 = AirReflection::Node::node_as_StructTypeInfo((AirReflection::Node *)((char *)v9 + *v9));
  if (!v10)
    return 0;
  v11 = (int *)v10;
  StructForId = (void *)ReflectionDeserializeContext::getStructForId(a4, *a2);
  if (StructForId)
  {
    if (a5)
      *a5 = 0;
    return (MTLStructTypeInternal *)StructForId;
  }
  v15 = [MTLStructTypeInternal alloc];
  v16 = *((_QWORD *)a4 + 5) + *((_QWORD *)a4 + 4) - 1;
  v17 = *(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * (v16 / 0x49)) + 56 * (v16 % 0x49) + 16;
  *(_QWORD *)&v128 = *a2;
  *((_QWORD *)&v128 + 1) = v15;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,MTLStructTypeInternal *>>(v17, (unint64_t *)&v128, &v128);
  v18 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v18 < 5u || (v19 = v18[2]) == 0)
  {
    v23 = 0;
    goto LABEL_18;
  }
  v20 = *(unsigned int *)((char *)v11 + v19);
  v21 = *(unsigned int *)((char *)v11 + v19 + v20);
  v22 = malloc_type_calloc(v21, 8uLL, 0x80040B8603338uLL);
  v23 = v22;
  if (!(_DWORD)v21)
  {
LABEL_18:
    v14 = -[MTLStructTypeInternal initWithMembers:count:](v15, "initWithMembers:count:", v23, 0);
    v29 = 0;
    goto LABEL_19;
  }
  v24 = 0;
  v25 = (uint64_t)v11 + v20 + v19 + 24;
  v121 = a4;
  v119 = v8;
  v118 = v15;
  while (1)
  {
    v26 = *(unsigned int *)(v25 - 20) - (uint64_t)*(int *)(v25 + *(unsigned int *)(v25 - 20) - 20);
    v27 = *(unsigned __int16 *)(v25 + v26 - 20);
    if (v27 >= 0x13 && (*(_WORD *)(v25 + v26 - 2) || v27 >= 0x15 && *(_WORD *)(v25 + v26)))
      break;
    ++v24;
    v25 += 4;
    if (v24 >= v21)
    {
      v28 = 0;
      goto LABEL_22;
    }
  }
  v28 = 1;
LABEL_22:
  v30 = 0;
  v120 = v28;
  v123 = v22;
  v124 = v28;
  v31 = (uint64_t)v11 + v20 + v19 + 28;
  v122 = v21;
  do
  {
    v32 = *(unsigned int *)(v31 - 24);
    v33 = v31 + v32;
    v34 = v31 + v32 - *(int *)(v31 + v32 - 24);
    if (*(unsigned __int16 *)(v34 - 24) < 0xDu)
    {
      v35 = 0;
    }
    else
    {
      v35 = *(unsigned __int16 *)(v34 - 12);
      if (v35)
        v35 = v31 + v32 + v35 + *(unsigned int *)(v31 + v32 + v35 - 24) - 24;
    }
    v36 = (const void *)(v35 + 4);
    v37 = strlen((const char *)(v35 + 4));
    v38 = pixelFormatAndALUTypeFromString(v36, v37);
    v39 = v32 - *(int *)(v33 - 24);
    v40 = v31 + v39;
    v41 = *(unsigned __int16 *)(v31 + v39 - 24);
    if (v41 < 0x15)
    {
      if (v41 < 0x13)
      {
        v42 = 0;
        v47 = 0;
        v46 = 0;
        if (v41 < 5)
          goto LABEL_58;
LABEL_39:
        if (*(_WORD *)(v31 + v39 - 20))
        {
          v48 = *((_QWORD *)v121 + 5) + *((_QWORD *)v121 + 4) - 1;
          v49 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v121 + 1) + 8 * (v48 / 0x49)) + 56 * (v48 % 0x49));
          memset(v129, 0, sizeof(v129));
          v130 = 1065353216;
          *(_QWORD *)&v128 = v49;
          BYTE8(v128) = 1;
          memset(v131, 0, sizeof(v131));
          v132 = 1065353216;
          std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v129, (uint64_t *)v131);
          std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v131);
          std::deque<ContextStack>::push_back(v121, (uint64_t *)&v128);
          ContextStack::~ContextStack((ContextStack *)&v128);
          v50 = v31 + v32 - *(int *)(v33 - 24);
          if (*(unsigned __int16 *)(v50 - 24) >= 5u && (v51 = *(_WORD *)(v50 - 20)) != 0)
            v52 = v31 + v32 + v51 - 24;
          else
            v52 = 0;
          v46 = (MTLArrayTypeInternal *)deserializeStructArgument(a1, v52, a3, v121, 0);
          std::deque<ContextStack>::pop_back(v121);
          v47 = 1;
        }
        else
        {
          v47 = 0;
          v46 = 0;
        }
        goto LABEL_58;
      }
    }
    else if (*(_WORD *)(v40 - 4))
    {
      v42 = *(unsigned int *)(v31 + v32 + *(unsigned __int16 *)(v40 - 4) - 24);
      goto LABEL_32;
    }
    v42 = 0;
LABEL_32:
    v43 = v31 + v39;
    if (!*(_WORD *)(v31 + v39 - 6))
      goto LABEL_39;
    *(_QWORD *)&v128 = 0;
    if (*(_WORD *)(v43 - 6))
      v44 = v31 + v32 + *(unsigned __int16 *)(v43 - 6) - 24;
    else
      v44 = 0;
    deserializeArgument(a1, v44, a3, v121, &v128);
    v45 = (void *)v128;
    if ((_QWORD)v128)
    {
      v46 = (MTLArrayTypeInternal *)(id)v128;
      v42 = objc_msgSend(v45, "index");
      v47 = 57;
    }
    else
    {
      v53 = v31 + v32 - *(int *)(v33 - 24);
      if (*(unsigned __int16 *)(v53 - 24) < 0xDu)
      {
        v54 = 0;
      }
      else
      {
        v54 = *(unsigned __int16 *)(v53 - 12);
        if (v54)
          v54 = v31 + v32 + v54 + *(unsigned int *)(v31 + v32 + v54 - 24) - 24;
      }
      v55 = (const void *)(v54 + 4);
      v56 = strlen((const char *)(v54 + 4));
      if (dataTypeFromString(v55, v56))
      {
        v57 = v31 + v32 - *(int *)(v33 - 24);
        if (*(unsigned __int16 *)(v57 - 24) < 0xDu)
        {
          v58 = 0;
        }
        else
        {
          v58 = *(unsigned __int16 *)(v57 - 12);
          if (v58)
            v58 = v31 + v32 + v58 + *(unsigned int *)(v31 + v32 + v58 - 24) - 24;
        }
        v59 = (const void *)(v58 + 4);
        v60 = strlen((const char *)(v58 + 4));
        v46 = 0;
        v47 = dataTypeFromString(v59, v60);
      }
      else
      {
        v47 = 0;
        v46 = 0;
      }
    }

LABEL_58:
    v61 = *(_DWORD *)(v33 - 24);
    if (*(unsigned __int16 *)(v31 + v32 - v61 - 24) < 5u)
    {
      v62 = v124;
    }
    else
    {
      v62 = v124;
      if (*(_WORD *)(v31 + v32 - v61 - 20))
      {
        v63 = (unsigned int *)(v119
                             + 4 * *(unsigned int *)(v31 + v32 + *(unsigned __int16 *)(v31 + v32 - v61 - 20) - 24));
        v64 = (int *)AirReflection::Node::node_as_StructTypeInfo((AirReflection::Node *)((char *)v63 + *v63));
        v65 = (unsigned __int16 *)((char *)v64 - *v64);
        if (*v65 >= 5u && (v66 = v65[2]) != 0)
          v67 = (int *)((char *)v64 + v66 + *(unsigned int *)((char *)v64 + v66));
        else
          v67 = 0;
        StructIndirectArgumentIndexStride = getStructIndirectArgumentIndexStride(v67, a3);
        v61 = *(_DWORD *)(v33 - 24);
        v62 = v124;
        if (StructIndirectArgumentIndexStride > v120)
        {
          v69 = (unsigned int *)(v119
                               + 4
                               * *(unsigned int *)(v31
                                                 + v32
                                                 + *(unsigned __int16 *)(v31 + v32 - *(int *)(v33 - 24) - 20)
                                                 - 24));
          v70 = (int *)AirReflection::Node::node_as_StructTypeInfo((AirReflection::Node *)((char *)v69 + *v69));
          v71 = (unsigned __int16 *)((char *)v70 - *v70);
          if (*v71 >= 5u && (v72 = v71[2]) != 0)
            v73 = (int *)((char *)v70 + v72 + *(unsigned int *)((char *)v70 + v72));
          else
            v73 = 0;
          v62 = getStructIndirectArgumentIndexStride(v73, a3);
          v61 = *(_DWORD *)(v33 - 24);
        }
      }
    }
    v74 = *(unsigned __int16 *)(v31 + v32 - v61 - 24);
    if (v74 < 0xB)
      goto LABEL_77;
    v75 = v32 - v61;
    if (!*(_WORD *)(v31 + v75 - 14)
      || (v76 = *(unsigned int *)(v31 + v32 + *(unsigned __int16 *)(v31 + v75 - 14) - 24), !(_DWORD)v76))
    {
      if (v74 < 0xD)
      {
LABEL_77:
        v77 = 0;
      }
      else
      {
        v77 = *(unsigned __int16 *)(v31 + v75 - 12);
        if (v77)
          v77 = v31 + v32 + v77 + *(unsigned int *)(v31 + v32 + v77 - 24) - 24;
      }
      v78 = (void *)(v77 + 4);
      v79 = strlen((const char *)(v77 + 4));
      v76 = arraySizeFromTypeName(v78, v79);
    }
    v127 = v42;
    v80 = HIDWORD(v38);
    v38 = v38;
    if (v76 < 1)
      goto LABEL_88;
    if (v46)
    {
      v81 = [MTLArrayTypeInternal alloc];
      v82 = v31 + v32 - *(int *)(v33 - 24);
      if (*(unsigned __int16 *)(v82 - 24) >= 9u && (v83 = *(unsigned __int16 *)(v82 - 16)) != 0)
        v84 = *(unsigned int *)(v31 + v32 + v83 - 24);
      else
        v84 = 0;
      v85 = -[MTLArrayTypeInternal initWithArrayLength:elementType:stride:pixelFormat:aluType:details:](v81, "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", v76, v47, v84, v38, v80, v46);

      if (!v62)
        goto LABEL_87;
    }
    else
    {
      if (!v47)
      {
        v92 = v31 + v32 - *(int *)(v33 - 24);
        if (*(unsigned __int16 *)(v92 - 24) < 0xDu)
        {
          v93 = 0;
        }
        else
        {
          v93 = *(unsigned __int16 *)(v92 - 12);
          if (v93)
            v93 = v31 + v32 + v93 + *(unsigned int *)(v31 + v32 + v93 - 24) - 24;
        }
        v94 = (const void *)(v93 + 4);
        v95 = strlen((const char *)(v93 + 4));
        v47 = dataTypeFromString(v94, v95);
      }
      v96 = [MTLArrayTypeInternal alloc];
      v97 = v31 + v32 - *(int *)(v33 - 24);
      if (*(unsigned __int16 *)(v97 - 24) >= 9u && (v98 = *(unsigned __int16 *)(v97 - 16)) != 0)
        v99 = *(unsigned int *)(v31 + v32 + v98 - 24);
      else
        v99 = 0;
      v85 = -[MTLArrayTypeInternal initWithArrayLength:elementType:stride:pixelFormat:aluType:details:](v96, "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", v76, v47, v99, v38, v80, 0);
      if (!v62)
        goto LABEL_87;
    }
    -[MTLArrayTypeInternal setArgumentIndexStride:](v85, "setArgumentIndexStride:", v62);
LABEL_87:
    -[MTLArrayTypeInternal setIsIndirectArgumentBuffer:](v85, "setIsIndirectArgumentBuffer:", v120);
    v38 = 0;
    v80 = 0;
    v47 = 2;
    v46 = v85;
LABEL_88:
    v86 = 0;
    v87 = *(int *)(v33 - 24);
    v88 = v32 - v87;
    v89 = v31 + v32 - v87;
    v90 = *(unsigned __int16 *)(v89 - 24);
    if (v90 < 5)
      goto LABEL_112;
    v91 = -v87;
    if (*(_WORD *)(v89 - 20))
      goto LABEL_113;
    if (v90 < 0xB)
      goto LABEL_111;
    if (!*(_WORD *)(v31 + v88 - 14) || !*(_DWORD *)(v31 + v32 + *(unsigned __int16 *)(v31 + v88 - 14) - 24))
    {
      if (v90 < 0x13)
      {
        if (v90 >= 0xD)
          goto LABEL_109;
LABEL_111:
        v86 = 0;
      }
      else
      {
        if (*(_WORD *)(v31 + v88 - 6))
          goto LABEL_113;
LABEL_109:
        v86 = *(unsigned __int16 *)(v31 + v88 - 12);
        if (*(_WORD *)(v31 + v88 - 12))
          v86 = v31 + v32 + v86 + *(unsigned int *)(v31 + v32 + v86 - 24) - 24;
      }
LABEL_112:
      v100 = (const void *)(v86 + 4);
      v101 = strlen((const char *)(v86 + 4));
      v47 = dataTypeFromString(v100, v101);
      v91 = -(uint64_t)*(int *)(v33 - 24);
    }
LABEL_113:
    v102 = *(unsigned __int16 *)(v31 + v32 + v91 - 24);
    v103 = &stru_1E0FE5DC8;
    if (v102 >= 0xF)
    {
      if (*(_WORD *)(v31 + v91 + v32 - 10))
      {
        v104 = v31 + v32 + *(unsigned __int16 *)(v31 + v91 + v32 - 10);
        v105 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v104 + *(unsigned int *)(v104 - 24) - 20);
LABEL_116:
        v103 = (const __CFString *)v105;
        goto LABEL_120;
      }
      if (v102 >= 0x11)
      {
        v106 = *(unsigned __int16 *)(v31 + v91 + v32 - 8);
        if (v106)
        {
          v105 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("user(%s)"), v31 + v32 + v106 + *(unsigned int *)(v31 + v32 + v106 - 24) - 20);
          goto LABEL_116;
        }
      }
    }
LABEL_120:
    v107 = v31 + v32 - *(int *)(v33 - 24);
    if (*(unsigned __int16 *)(v107 - 24) >= 7u && (v108 = *(unsigned __int16 *)(v107 - 18)) != 0)
      v109 = *(unsigned int *)(v31 + v32 + v108 - 24);
    else
      v109 = 0;
    v110 = [MTLStructMemberInternal alloc];
    v111 = v32 - *(int *)(v33 - 24);
    v112 = *(unsigned __int16 *)(v31 + v111 - 24);
    if (v112 < 0x19)
    {
      v113 = 0xFFFFFFFFLL;
      v114 = 0xFFFFFFFFLL;
      if (v112 < 0x17)
        goto LABEL_133;
    }
    else if (*(_WORD *)(v31 + v111))
    {
      v113 = *(unsigned int *)(v31 + v32 + *(unsigned __int16 *)(v31 + v111) - 24);
    }
    else
    {
      v113 = 0xFFFFFFFFLL;
    }
    v115 = *(_WORD *)(v31 + v111 - 2);
    if (v115)
      v114 = *(unsigned int *)(v31 + v32 + v115 - 24);
    else
      v114 = 0xFFFFFFFFLL;
LABEL_133:
    v116 = -[MTLStructMemberInternal initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:](v110, "initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:", v103, v109, v47, v38, v80, v127, v113, v114, v46);
    v23 = v123;
    *((_QWORD *)v123 + v30) = v116;
    if (v46)

    ++v30;
    v31 += 4;
  }
  while (v122 != v30);
  v14 = -[MTLStructTypeInternal initWithMembers:count:](v118, "initWithMembers:count:", v123, v122);
  for (i = 0; i != v122; ++i)

  v29 = v120;
LABEL_19:
  free(v23);
  -[MTLStructTypeInternal setIsIndirectArgumentBuffer:](v14, "setIsIndirectArgumentBuffer:", v29);
  return v14;
}

void sub_182638FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  ContextStack::~ContextStack((ContextStack *)va);
  _Unwind_Resume(a1);
}

uint64_t pixelFormatAndALUTypeFromString(const void *a1, size_t a2)
{
  _BYTE v3[12];
  uint64_t v4;

  dataTypeInfoFromString(a1, a2, (uint64_t)v3);
  return v4;
}

uint64_t dataTypeFromString(const void *a1, size_t a2)
{
  _DWORD v3[5];

  dataTypeInfoFromString(a1, a2, (uint64_t)v3);
  return v3[0];
}

uint64_t arraySizeFromTypeName(void *__src, size_t __len)
{
  _QWORD *v4;
  size_t v5;
  size_t v6;
  int v7;
  void *v8;
  const char *v9;
  char *NextToken;
  const char *v11;
  uint64_t v12;
  _QWORD v14[2];
  int64_t v15;
  _DWORD v16[2];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v5 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v5 = __len | 7;
    v6 = v5 + 1;
    v4 = operator new(v5 + 1);
    v14[1] = __len;
    v15 = v6 | 0x8000000000000000;
    v14[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v15) = __len;
  v4 = v14;
  if (__len)
LABEL_8:
    memmove(v4, __src, __len);
  *((_BYTE *)v4 + __len) = 0;
  v7 = SHIBYTE(v15);
  v8 = (void *)v14[0];
  if (v15 >= 0)
    v9 = (const char *)v14;
  else
    v9 = (const char *)v14[0];
  v16[0] = 0;
  v17 = v9;
  v16[1] = strlen(v9);
  NextToken = BasicParser::getNextToken((BasicParser *)v16);
  if (!strcmp(NextToken, "array"))
  {
    v12 = 0;
    if ((v7 & 0x80000000) == 0)
      return v12;
    goto LABEL_15;
  }
  do
  {
    v11 = NextToken;
    NextToken = BasicParser::getNextToken((BasicParser *)v16);
  }
  while (NextToken);
  v12 = atol(v11);
  if (v7 < 0)
LABEL_15:
    operator delete(v8);
  return v12;
}

MTLStructTypeInternal *structTypeFromSerializedContext(uint64_t a1, DeserialContext *a2, _BYTE *a3, _QWORD *a4, _BYTE *a5, unsigned int a6)
{
  void *v11;
  uint64_t *v12;
  MTLStructTypeInternal *v13;
  unsigned int v14;
  MTLStructTypeInternal *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  MTLStructMemberInternal *v28;
  MTLStructMemberInternal *v29;
  int v30;
  _QWORD v32[2];
  MTLStructTypeInternal *v33;
  _BYTE *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _DWORD *v44[2];

  v37 = a1;
  v44[1] = *(_DWORD **)MEMORY[0x1E0C80C00];
  v11 = (void *)MEMORY[0x186DAC640]();
  *a5 = 1;
  v38 = a6;
  if (!a6)
  {
    v14 = DeserialContext::deserializeUint32(a2);
    if (v14)
    {
LABEL_6:
      v15 = objc_alloc_init(MTLStructTypeInternal);
      v13 = v15;
      goto LABEL_7;
    }
LABEL_19:
    v13 = 0;
    goto LABEL_20;
  }
  v43 = DeserialContext::deserializeUint32(a2);
  if (!v43)
    goto LABEL_19;
  v12 = std::__hash_table<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>>>::find<unsigned int>(a4, &v43);
  if (v12)
  {
    *a5 = 0;
    v13 = (MTLStructTypeInternal *)v12[3];
    goto LABEL_20;
  }
  v13 = objc_alloc_init(MTLStructTypeInternal);
  v44[0] = &v43;
  std::__hash_table<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)a4, &v43, (uint64_t)&std::piecewise_construct, v44)[3] = v13;
  v15 = (MTLStructTypeInternal *)DeserialContext::deserializeUint32(a2);
  if (!(_DWORD)v15)
    goto LABEL_20;
  v14 = v15;
  if (!v13)
    goto LABEL_6;
LABEL_7:
  v33 = v13;
  v34 = a3;
  v35 = v11;
  v36 = a4;
  v32[1] = v32;
  LOBYTE(v44[0]) = 0;
  v40 = v14;
  MEMORY[0x1E0C80A78](v15);
  v39 = (char *)v32 - v16;
  v17 = 0;
  do
  {
    v18 = DeserialContext::stringFromSerializedData(a2);
    v19 = DeserialContext::deserializeUint32(a2);
    v20 = DeserialContext::deserializeUint32(a2);
    v21 = DeserialContext::deserializeUint32(a2);
    v22 = DeserialContext::deserializeUint32(a2);
    v23 = DeserialContext::deserializeUint32(a2);
    v24 = 1;
    LOBYTE(v43) = 1;
    v41 = v20;
    v42 = v19;
    switch(v21)
    {
      case 0x39u:
        v25 = (void *)newArgumentTypeFromSerializedContext(v37, a2);
        LOBYTE(v44[0]) = 1;
        break;
      case 2u:
        v25 = newArrayTypeFromSerializedContext(v37, a2, v44, (uint64_t)v36, v38);
        break;
      case 1u:
        v25 = (void *)structTypeFromSerializedContext(v37, a2, v44, v36, &v43, v38);
        v24 = v43;
        break;
      default:
        v25 = 0;
        break;
    }
    v26 = DeserialContext::deserializeUint32(a2);
    v27 = DeserialContext::deserializeUint32(a2);
    v28 = [MTLStructMemberInternal alloc];
    v29 = -[MTLStructMemberInternal initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:](v28, "initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:", v18, v42, v21, v22, v23, v41, v26, v27, v25);
    *(_QWORD *)&v39[8 * v17] = v29;
    if (v24)

    ++v17;
  }
  while (v40 != v17);
  v30 = LOBYTE(v44[0]);
  v13 = v33;
  *v34 |= LOBYTE(v44[0]);
  -[MTLStructTypeInternal setMembers:count:](v13, "setMembers:count:", v39, v40);
  -[MTLStructTypeInternal setIsIndirectArgumentBuffer:](v13, "setIsIndirectArgumentBuffer:", v30 != 0);
  v11 = v35;
LABEL_20:
  objc_autoreleasePoolPop(v11);
  return v13;
}

uint64_t DeserialContext::deserializeUint32(DeserialContext *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = v1 >= v2;
  v5 = v1 == v2;
  v3 = v1 - v2;
  if (!v5 && v4)
  {
    v4 = v3 >= 3;
    v5 = v3 == 3;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  if (v5 || !v4)
    abort();
  v6 = *(unsigned int *)(*(_QWORD *)this + v2);
  *((_QWORD *)this + 2) = v2 + 4;
  return v6;
}

uint64_t DeserialContext::stringFromSerializedData(DeserialContext *this)
{
  unint64_t v1;
  unint64_t v2;
  size_t v3;
  const char *v5;
  size_t v6;
  size_t v7;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v1 = *((_QWORD *)this + 2);
  v3 = v2 - v1;
  if (v2 <= v1 || (v5 = (const char *)(*(_QWORD *)this + v1), v6 = strnlen(v5, v3), v6 == v3))
    abort();
  v7 = v6;
  result = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v5, 4);
  *((_QWORD *)this + 2) += v7 + 1;
  return result;
}

void ContextStack::~ContextStack(ContextStack *this)
{
  id *i;

  for (i = (id *)((char *)this + 32); ; i[3])
  {
    i = (id *)*i;
    if (!i)
      break;
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 16);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void dataTypeInfoFromString(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *NextToken;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  unsigned __int8 v28;
  int v29;
  void *__dst[2];
  int64_t v31;
  _DWORD v32[2];
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 >= 0x17)
  {
    v7 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v7 = a2 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)a2;
    v31 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v31) = a2;
    v6 = __dst;
    if (!a2)
      goto LABEL_9;
  }
  memmove(v6, a1, a2);
LABEL_9:
  *((_BYTE *)v6 + a2) = 0;
  if (v31 >= 0)
    v9 = (const char *)__dst;
  else
    v9 = (const char *)__dst[0];
  v32[0] = 0;
  v33 = v9;
  v32[1] = strlen(v9);
  while (1)
  {
    NextToken = BasicParser::getNextToken((BasicParser *)v32);
    if (!NextToken)
      goto LABEL_31;
    v11 = bufferTypeMap();
    std::string::basic_string[abi:ne180100]<0>(&__p, NextToken);
    v12 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::find<std::string>(v11, (const void **)&__p);
    if (SHIBYTE(v27) < 0)
      operator delete(__p);
    if (bufferTypeMap() + 8 == v12)
      break;
    if (*(_DWORD *)(v12 + 56) != 1)
    {
      LODWORD(NextToken) = 0;
      v13 = 0;
      v14 = *(_DWORD *)(v12 + 60);
      v15 = *(_QWORD *)(v12 + 64);
      goto LABEL_32;
    }
  }
  v16 = pixelFormatTypeMap();
  std::string::basic_string[abi:ne180100]<0>(&__p, NextToken);
  v17 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::find<std::string>(v16, (const void **)&__p);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  if (pixelFormatTypeMap() + 8 == v17)
  {
    LODWORD(NextToken) = 0;
LABEL_31:
    v13 = 0;
    v14 = 0;
    v15 = 0;
    goto LABEL_32;
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(&__p, v17 + 56);
  v13 = (int)__p;
  if ((v28 & 0x80u) == 0)
    v18 = &v26;
  else
    v18 = v26;
  if ((v28 & 0x80u) == 0)
    v19 = v28;
  else
    v19 = v27;
  dataTypeInfoFromString(&v23, v18, v19);
  v14 = v29;
  v21 = v24;
  NextToken = BasicParser::getNextToken((BasicParser *)v32);
  v20 = strlen(NextToken);
  dataTypeInfoFromString(&v22, NextToken, v20);
  LODWORD(NextToken) = v22;
  v15 = v21;
  if ((char)v28 < 0)
  {
    operator delete(v26);
    v15 = v21;
  }
LABEL_32:
  *(_DWORD *)a3 = v14;
  *(_QWORD *)(a3 + 4) = v15;
  *(_DWORD *)(a3 + 12) = v13;
  *(_DWORD *)(a3 + 16) = (_DWORD)NextToken;
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
}

void sub_18263A588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0)
    operator delete(a17);
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t bufferTypeMap(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&bufferTypeMapOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&bufferTypeMapOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<bufferTypeMap(void)::$_0 &&>>);
  }
  return bufferTypeMap(void)::nonGlobalBufferTypeMap;
}

char *BasicParser::getNextToken(BasicParser *this)
{
  unsigned int v1;
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  char *v12;

  v2 = *(unsigned int *)this;
  v1 = *((_DWORD *)this + 1);
  if (v2 < v1)
  {
    v3 = (char *)(*((_QWORD *)this + 1) + v2);
    while (1)
    {
      v4 = *v3++;
      v5 = (1 << v4) & 0x5000144100000001;
      if (v4 > 0x3E || v5 == 0)
        break;
      LODWORD(v2) = v2 + 1;
      *(_DWORD *)this = v2;
      if (v1 == (_DWORD)v2)
      {
        LODWORD(v2) = v1;
        goto LABEL_10;
      }
    }
  }
  if (v2 <= v1)
  {
LABEL_10:
    v7 = 0;
    v8 = *((_QWORD *)this + 1);
    while (*(char *)(v8 + (v2 + v7)) > 0x3E
         || ((1 << *(_BYTE *)(v8 + (v2 + v7))) & 0x5000144100000001) == 0)
    {
      if (v7 == 63)
      {
        v12 = (char *)this + 16;
        *((_BYTE *)this + 79) = 0;
        return v12;
      }
      v10 = v7 + 1;
      *((_BYTE *)this + v7 + 16) = *(_BYTE *)(v8 + (v2 + v7));
      *(_DWORD *)this = v2 + v7 + 1;
      v11 = v2 + ++v7;
      if (v11 > v1)
      {
        if (!v10)
          return 0;
        return (char *)this + 16;
      }
    }
    *((_BYTE *)this + v7 + 16) = 0;
    if ((_DWORD)v7)
      return (char *)this + 16;
  }
  return 0;
}

uint64_t std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

uint64_t pixelFormatTypeMap(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&pixelFormatTypeMapOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&pixelFormatTypeMapOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<pixelFormatTypeMap(void)::$_0 &&>>);
  }
  return pixelFormatTypeMap(void)::nonGlobalPixelFormatTypeMap;
}

uint64_t MTLAtomicIncrement(unsigned int *a1)
{
  unsigned int v1;
  uint64_t v2;

  do
  {
    v1 = __ldaxr(a1);
    v2 = v1 + 1;
  }
  while (__stlxr(v2, a1));
  return v2;
}

uint64_t AirReflection::Node::node_as_StructTypeInfo(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524289) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear((_QWORD *)a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,MTLStructTypeInternal *>>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_18263AF50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<ContextStack>::push_back(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 73 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<ContextStack>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *a2;
  v9 = *(_QWORD *)(v5 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  *(_BYTE *)(v9 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)v9 = v8;
  result = std::unordered_map<unsigned long,MTLStructTypeInternal *>::unordered_map(v9 + 16, (uint64_t)(a2 + 2));
  ++a1[5];
  return result;
}

uint64_t std::unordered_map<unsigned long,MTLStructTypeInternal *>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,MTLStructTypeInternal *> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_18263B080(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t ReflectionDeserializeContext::getStructForId(ReflectionDeserializeContext *this, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v13;

  v13 = a2;
  v3 = *((_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = (_QWORD *)(v4 + 8 * (v3 / 0x49));
  if (v5 == v4)
    v7 = 0;
  else
    v7 = *v6 + 56 * (v3 % 0x49);
  while (1)
  {
    if (v5 == v4)
    {
      v9 = 0;
    }
    else
    {
      v8 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4);
      v9 = *(_QWORD *)(v4 + 8 * (v8 / 0x49)) + 56 * (v8 % 0x49);
    }
    if (v7 == v9)
      return 0;
    v10 = std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::find<unsigned long>((_QWORD *)(v7 + 16), &v13);
    if (v10)
      break;
    v7 += 56;
    if (v7 - *v6 == 4088)
    {
      v11 = v6[1];
      ++v6;
      v7 = v11;
    }
    v4 = *((_QWORD *)this + 1);
    v5 = *((_QWORD *)this + 2);
  }
  return v10[3];
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::find<unsigned long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::deque<ContextStack>::pop_back(_QWORD *a1)
{
  unint64_t v2;

  v2 = a1[5] + a1[4] - 1;
  ContextStack::~ContextStack((ContextStack *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x49)) + 56 * (v2 % 0x49)));
  --a1[5];
  return std::deque<ContextStack>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_18263B7AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

MTLArrayTypeInternal *newArrayTypeFromSerializedContext(uint64_t a1, DeserialContext *a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  MTLArrayTypeInternal *v16;
  unsigned int v18;
  unsigned int v19;
  char v20;
  char v21;

  v19 = DeserialContext::deserializeUint32(a2);
  v10 = DeserialContext::deserializeUint32(a2);
  v18 = DeserialContext::deserializeUint32(a2);
  v11 = DeserialContext::deserializeUint32(a2);
  v12 = DeserialContext::deserializeUint32(a2);
  v13 = DeserialContext::deserializeUint32(a2);
  v21 = 0;
  v20 = 1;
  switch(v10)
  {
    case 0x39u:
      v14 = (void *)newArgumentTypeFromSerializedContext(a1, a2);
      v15 = 0;
      v21 = 1;
      break;
    case 2u:
      v14 = (void *)newArrayTypeFromSerializedContext(a1, a2, &v21, a4, a5);
      v15 = 0;
      break;
    case 1u:
      v14 = (void *)structTypeFromSerializedContext(a1, a2, &v21, a4, &v20, a5);
      v15 = v20 == 0;
      break;
    default:
      v15 = 0;
      v14 = 0;
      break;
  }
  v16 = -[MTLArrayTypeInternal initWithArrayLength:elementType:stride:pixelFormat:aluType:details:]([MTLArrayTypeInternal alloc], "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", v19, v10, v18, v12, v13, v14);
  if (!v15)

  if (v11)
    -[MTLArrayTypeInternal setArgumentIndexStride:](v16, "setArgumentIndexStride:", v11);
  *a3 |= v21;
  -[MTLArrayTypeInternal setIsIndirectArgumentBuffer:](v16, "setIsIndirectArgumentBuffer:");
  return v16;
}

void MTLLibraryBuilder::releaseCacheEntry(MTLLibraryBuilder *this, MTLLibraryContainer *a2)
{
  __int128 v4;
  uint64_t *v5;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)this);
  if (!MTLAtomicDecrement((unsigned int *)&a2->var1))
  {
    v4 = *(_OWORD *)&a2->var2.var0[16];
    v6[0] = *(_OWORD *)a2->var2.var0;
    v6[1] = v4;
    v5 = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>((uint64_t)this + 8, (unsigned int *)v6);
    if ((uint64_t *)((char *)this + 16) != v5)
    {
      std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__remove_node_pointer((uint64_t **)this + 1, v5);
      operator delete(v5);
    }
    MTLLibraryContainer::~MTLLibraryContainer(a2);
    MEMORY[0x186DABFBC]();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this);
}

void sub_18263BA94(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t newArgumentTypeFromSerializedContext(int a1, DeserialContext *a2)
{
  uint64_t v2;

  deserializeArguments(a1, a2);
  v2 = MEMORY[0];
  free(0);
  return v2;
}

void std::deque<ContextStack>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x49;
  v4 = v2 - 73;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF8uLL);
      std::__split_buffer<ContextStack *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF8uLL);
    std::__split_buffer<ContextStack *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF8uLL);
  std::__split_buffer<ContextStack *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<ContextStack *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_18263BDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<ContextStack *>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_18263C050(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18263C790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MTLGetTextureLevelInfoForDeviceWithOptions(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, unint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  MTLPixelFormatGetInfoForDevice(a1, a2, (uint64_t)&v28);
  v17 = v30;
  v18 = *((_QWORD *)&v29 + 1);
  switch(a2)
  {
    case 250:
    case 252:
      v19 = 2;
      if (a2 == 252)
        v19 = 4;
      if (a8 <= 1)
        v18 = v19;
      break;
    case 253:
    case 261:
      if ((a8 | 2) == 2)
        v18 = 1;
      break;
    case 260:
      if (a8 < 3)
        v18 = qword_182819C28[a8];
      break;
    default:
      break;
  }
  if ((WORD4(v28) & 0x400) != 0)
    v20 = *((_QWORD *)&v30 + 1);
  else
    v20 = 1;
  if ((WORD4(v28) & 0x400) == 0)
    v17 = 1;
  v21 = a3 >> a7;
  if (a3 >> a7 <= 1)
    v21 = 1;
  v22 = a4 >> a7;
  if (a4 >> a7 <= 1)
    v22 = 1;
  *a9 = v21;
  a9[1] = v22;
  v23 = a5 >> a7;
  if (a5 >> a7 <= 1)
    v23 = 1;
  v24 = (v21 + v17 - 1) / v17;
  a9[2] = v23;
  a9[3] = v24;
  v25 = (v22 + v20 - 1) / v20;
  a9[4] = v25;
  a9[5] = v23;
  a9[6] = v24 * v17;
  a9[7] = v25 * v20;
  v26 = v18 * a6;
  a9[8] = v23;
  a9[9] = v26;
  v27 = v24 * v26;
  a9[10] = v27;
  a9[11] = v25 * v27;
  a9[12] = v25 * v27 * v23;
}

void _mtlValidateArgumentsForTextureViewOnDevice(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, char a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[3];
  uint64_t v64;

  v64 = 0;
  memset(v63, 0, sizeof(v63));
  _MTLMessageContextBegin_((uint64_t)v63, (uint64_t)"_mtlValidateArgumentsForTextureViewOnDevice", 1855, (uint64_t)a1, 0, (uint64_t)"Texture Creation");
  v17 = objc_msgSend(a2, "pixelFormat");
  v62 = 0;
  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  MTLPixelFormatGetInfoForDevice(a1, v17, (uint64_t)&v59);
  v58 = 0;
  v56 = 0u;
  v57 = 0u;
  v55 = 0u;
  MTLPixelFormatGetInfoForDevice(a1, a3, (uint64_t)&v55);
  if (a9)
  {
    if ((BYTE9(v59) & 4) == 0)
      _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("source texture (%s) is not a compressed pixel format."), v18, v19, v20, v21, v22, v59);
    if ((BYTE9(v55) & 4) != 0)
      _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("texture view pixelFormat (%s) is a compressed pixel format."), v18, v19, v20, v21, v22, v59);
    if (*((_QWORD *)&v60 + 1) != *((_QWORD *)&v56 + 1))
      _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("source texture block size (%lu) does not match texture view pixel size (%lu)"), v18, v19, v20, v21, v22, *((uint64_t *)&v60 + 1));
  }
  else if (v17 != a3)
  {
    if (!(_QWORD)v60)
      _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("source texture pixelFormat (%s) not castable."), v18, v19, v20, v21, v22, v59);
    v23 = v56;
    if (!(_QWORD)v56)
    {
      _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("texture view pixelFormat (%s) not castable."), v18, v19, v20, v21, v22, v55);
      v23 = v56;
    }
    if ((_QWORD)v60 != v23)
      _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("source texture pixelFormat (%s) not compatible with texture view pixelFormat (%s)."), v18, v19, v20, v21, v22, v59);
  }
  v29 = objc_msgSend(a2, "textureType");
  if (a4 >= 0xA)
    _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("type (%lu) is not a valid MTLTextureType."), v24, v25, v26, v27, v28, a4);
  if (v29 >= 0xA || a4 >= 0xA)
    abort();
  if (qword_182819BD8[v29] == qword_182819BD8[a4])
  {
    if (a6)
      goto LABEL_21;
LABEL_39:
    _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("newLevelRange.length must not be 0."), v24, v25, v26, v27, v28, v54);
    if (a8)
      goto LABEL_22;
    goto LABEL_40;
  }
  _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("source texture textureType (%@) not compatible with texture view textureType (%@)."), v24, v25, v26, v27, v28, *((_QWORD *)&off_1E0FE3A40 + v29));
  if (!a6)
    goto LABEL_39;
LABEL_21:
  if (a8)
    goto LABEL_22;
LABEL_40:
  _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("newSliceRange.length must not be 0."), v24, v25, v26, v27, v28, v54);
LABEL_22:
  v30 = a5 + a6;
  if (v30 > objc_msgSend(a2, "mipmapLevelCount"))
  {
    objc_msgSend(a2, "mipmapLevelCount");
    _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("(newLevelRange.location + newLevelRange.length)(%lu) must be <= [texture mipmapLevelCount](%lu)."), v44, v45, v46, v47, v48, v30);
  }
  v31 = a7 + a8;
  v32 = objc_msgSend(a2, "numFaces");
  if (v31 > objc_msgSend(a2, "arrayLength") * v32)
  {
    objc_msgSend(a2, "numFaces");
    objc_msgSend(a2, "arrayLength");
    _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("(newSliceRange.location + newSliceRange.length)(%lu) must be <= (%lu)."), v49, v50, v51, v52, v53, v31);
  }
  if (a4 - 5 >= 2)
    v38 = 1;
  else
    v38 = 6;
  if (a8 % v38)
    _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("newSliceRange.length(%lu) must be a multiple of (%lu)."), v33, v34, v35, v36, v37, a8);
  if (((1 << a4) & 0x16A) == 0 && a8 != v38)
    _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("newSliceRange.length(%lu) must equal (%lu) for textureType (%@)."), v33, v34, v35, v36, v37, a8);
  if (objc_msgSend(a2, "sampleCount") != 1 && (WORD4(v55) & 0x100) == 0)
    _MTLMessageContextPush_((uint64_t)v63, 4, (uint64_t)CFSTR("newPixelFormat(%s) must be MSAA capable to be used to view a texture with sampleCount(%lu)."), v39, v40, v41, v42, v43, v55);
  _MTLMessageContextEnd((uint64_t)v63);
}

uint64_t MTLPipelineLibrarySerializer::deserializeColorAttachments(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result;
  void *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  uint64_t v14;
  unsigned __int8 *v15[2];
  unsigned int __dst;

  v15[0] = a2;
  v15[1] = a3;
  result = MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v7, v15);
  if (v10 < v9)
  {
    v5 = 0;
    while (1)
    {
      switch(v12)
      {
        case 0:
          __dst = 0;
          if (v13 + v14 > v8)
            goto LABEL_28;
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          result = objc_msgSend(a1, "objectAtIndexedSubscript:", __dst);
          v5 = (void *)result;
          break;
        case 1:
          __dst = 0;
          if (v13 + v14 > v8)
            goto LABEL_28;
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          result = objc_msgSend(v5, "setPixelFormat:", __dst);
          break;
        case 2:
          __dst = 0;
          if (v13 + v14 > v8)
            goto LABEL_28;
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          result = objc_msgSend(v5, "setBlendingEnabled:", __dst != 0);
          break;
        case 3:
          __dst = 0;
          if (v13 + v14 > v8)
            goto LABEL_28;
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          result = objc_msgSend(v5, "setSourceRGBBlendFactor:", __dst);
          break;
        case 4:
          __dst = 0;
          if (v13 + v14 > v8)
            goto LABEL_28;
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          result = objc_msgSend(v5, "setDestinationRGBBlendFactor:", __dst);
          break;
        case 5:
          __dst = 0;
          if (v13 + v14 > v8)
            goto LABEL_28;
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          result = objc_msgSend(v5, "setRgbBlendOperation:", __dst);
          break;
        case 6:
          __dst = 0;
          if (v13 + v14 > v8)
            goto LABEL_28;
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          result = objc_msgSend(v5, "setSourceAlphaBlendFactor:", __dst);
          break;
        case 7:
          __dst = 0;
          if (v13 + v14 > v8)
            goto LABEL_28;
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          result = objc_msgSend(v5, "setDestinationAlphaBlendFactor:", __dst);
          break;
        case 8:
          __dst = 0;
          if (v13 + v14 > v8)
            goto LABEL_28;
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          result = objc_msgSend(v5, "setAlphaBlendOperation:", __dst);
          break;
        case 9:
          __dst = 0;
          if (v13 + v14 > v8)
            goto LABEL_28;
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          result = objc_msgSend(v5, "setWriteMask:", __dst);
          break;
        default:
          break;
      }
      if (++v10 >= v9)
        break;
      if (v11 + 2 > v8)
LABEL_28:
        abort();
      v6 = *(unsigned __int8 *)(v7 + v11 + 1);
      v12 = *(unsigned __int8 *)(v7 + v11);
      v13 = v6;
      v14 = v11 + 2;
      v11 += 2 + v6;
    }
  }
  return result;
}

void MTLDebugValidateMTLPixelFormat(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[3];
  uint64_t v7;

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  MTLPixelFormatGetInfoForDevice(0, a1, (uint64_t)v6);
  if (a1)
  {
    if ((BYTE8(v6[0]) & 1) == 0)
      MTLReportFailure(0, "MTLDebugValidateMTLPixelFormat", 1598, (uint64_t)CFSTR("pixelFormat (%lu) is not a valid MTLPixelFormat."), v2, v3, v4, v5, a1);
  }
}

void _mtlValidateStrideTextureParameters(void *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[3];
  uint64_t v45;

  v45 = 0;
  memset(v44, 0, sizeof(v44));
  _MTLMessageContextBegin_((uint64_t)v44, (uint64_t)"_mtlValidateStrideTextureParameters", 1916, (uint64_t)a1, 0, (uint64_t)"Texture Descriptor Validation");
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  MTLPixelFormatGetInfoForDevice(a1, objc_msgSend(a2, "pixelFormat"), (uint64_t)&v40);
  if (a6)
    v17 = "IOSurface";
  else
    v17 = "Linear";
  if ((BYTE9(v40) & 4) == 0 && *((_QWORD *)&v41 + 1) * a3 > a5)
    _MTLMessageContextPush_((uint64_t)v44, 4, (uint64_t)CFSTR("%s texture: bytesPerRow (%llu) must be greater or equal to (%llu) bytes"), v12, v13, v14, v15, v16, (uint64_t)v17);
  if (objc_msgSend(a2, "textureType") == 9)
  {
    v23 = 1;
LABEL_24:
    v25 = v23;
    goto LABEL_25;
  }
  if (*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 288) != 7085)
  {
    if (a6)
    {
      if (objc_msgSend(a2, "usage") == 1)
        v24 = objc_msgSend(a1, "iosurfaceReadOnlyTextureAlignmentBytes");
      else
        v24 = objc_msgSend(a1, "iosurfaceTextureAlignmentBytes");
    }
    else
    {
      v24 = objc_msgSend(a1, "linearTextureAlignmentBytes");
    }
LABEL_23:
    v23 = v24;
    goto LABEL_24;
  }
  if (objc_msgSend(a2, "textureType") != 3)
  {
    if (objc_msgSend(a2, "usage") == 1)
      v24 = objc_msgSend(a1, "deviceLinearReadOnlyTextureAlignmentBytes");
    else
      v24 = objc_msgSend(a1, "deviceLinearTextureAlignmentBytes");
    goto LABEL_23;
  }
  v23 = objc_msgSend(a1, "linearTextureArrayAlignmentBytes");
  v25 = objc_msgSend(a1, "linearTextureArrayAlignmentSlice");
  if (!v23 || !v25)
  {
    _MTLMessageContextPush_((uint64_t)v44, 4, (uint64_t)CFSTR("2D linear texture array is not supported."), v18, v19, v20, v21, v22, v39);
    if (!v25)
      goto LABEL_24;
  }
LABEL_25:
  if (((v23 - 1) & a5) != 0)
    _MTLMessageContextPush_((uint64_t)v44, 4, (uint64_t)CFSTR("%s texture: bytesPerRow (%llu) must be aligned to %llu bytes"), v18, v19, v20, v21, v22, (uint64_t)v17);
  if (((v25 - 1) & a4) != 0)
    _MTLMessageContextPush_((uint64_t)v44, 4, (uint64_t)CFSTR("%s texture: offset (%llu) must be aligned to %llu bytes"), v18, v19, v20, v21, v22, (uint64_t)v17);
  if ((WORD4(v40) & 0x4000) == 0 && (BYTE8(v40) & 0x60) != 0)
    _MTLMessageContextPush_((uint64_t)v44, 4, (uint64_t)CFSTR("%s texture: cannot create compressed, depth, or stencil textures, pixelFormat (%s) disallowed"), v18, v19, v20, v21, v22, (uint64_t)v17);
  v31 = (uint64_t *)objc_msgSend(a2, "descriptorPrivate");
  if (v31[5] != 1)
    _MTLMessageContextPush_((uint64_t)v44, 4, (uint64_t)CFSTR("%s texture: cannot be mipmapped, mipmapLevelCount (%lu) disallowed"), v26, v27, v28, v29, v30, (uint64_t)v17);
  if (v31[4] != 1)
    _MTLMessageContextPush_((uint64_t)v44, 4, (uint64_t)CFSTR("%s texture: must have depth == 1, depth (%lu) disallowed"), v26, v27, v28, v29, v30, (uint64_t)v17);
  if (objc_msgSend(a2, "textureType") != 9)
  {
    v37 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 288);
    v38 = *v31;
    if (v37 == 7085)
    {
      if ((unint64_t)(v38 - 4) <= 0xFFFFFFFFFFFFFFFDLL)
        _MTLMessageContextPush_((uint64_t)v44, 4, (uint64_t)CFSTR("%s texture: must be of type MTLTextureType2D or linear MTLTextureType2DArray, textureType (%@) disallowed"), v32, v33, v34, v35, v36, (uint64_t)v17);
    }
    else if (v38 != 2)
    {
      _MTLMessageContextPush_((uint64_t)v44, 4, (uint64_t)CFSTR("%s texture: must be of type MTLTextureType2D, textureType (%@) disallowed"), v32, v33, v34, v35, v36, (uint64_t)v17);
    }
  }
  _MTLMessageContextEnd((uint64_t)v44);
}

void _MTLMessageContextEnd(uint64_t a1)
{
  void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40))
  {
    v2 = (void *)objc_opt_new();
    v3 = (void *)objc_opt_new();
    if (objc_msgSend(*(id *)(a1 + 40), "count"))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "objectAtIndex:", v4), "type");
        v7 = objc_msgSend(*(id *)(a1 + 40), "objectAtIndex:", v4);
        if ((_DWORD)v6)
          objc_msgSend(v3, "addObject:", v7);
        v5 |= v6;
        ++v4;
      }
      while (objc_msgSend(*(id *)(a1 + 40), "count") > v4);
    }
    else
    {
      v5 = 0;
    }
    objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("MTLMessageArrayKey"));
    objc_msgSend(v2, "setObject:forKey:", CFSTR("There was an issue with your Metal framework usage. Please see MTLMessageArrayKey for the NSArray of issue strings."), *MEMORY[0x1E0CB2D50]);
    objc_msgSend(v2, "setObject:forKey:", CFSTR("There was an issue with your Metal framework usage."), *MEMORY[0x1E0CB2D68]);
    objc_msgSend(v2, "setObject:forKey:", CFSTR("Please address issues included in MTLMessageArrayKey and try again."), *MEMORY[0x1E0CB2D80]);
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLValidationError"), *(_QWORD *)(a1 + 32), v2);
    v9 = -[MTLMessageFilter init:device:]([MTLMessageFilter alloc], "init:device:", v5, *(_QWORD *)(a1 + 24));
    _MTLNotifyMessageObservers((uint64_t)v9, (uint64_t)v8);

    if (*(_QWORD *)(a1 + 40))
    {
      v10 = (void *)MEMORY[0x186DAC640]();
      v11 = *(id *)(a1 + 40);
      v12 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%s"), *(_QWORD *)(a1 + 48));
      objc_msgSend(v12, "appendString:", CFSTR("\n"));
      v13 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
      v14 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
      v15 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v16 = *(void **)(a1 + 40);
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      if (v17)
      {
        v18 = v17;
        v31 = v15;
        v29 = v12;
        v30 = v10;
        v19 = 0;
        v20 = *(_QWORD *)v33;
        do
        {
          for (i = 0; i != v18; ++i)
          {
            if (*(_QWORD *)v33 != v20)
              objc_enumerationMutation(v16);
            v22 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
            v23 = v13;
            if ((objc_msgSend(v22, "type") & 4) != 0
              || (v23 = v14, (objc_msgSend(v22, "type") & 8) != 0)
              || (v23 = v31, (objc_msgSend(v22, "type") & 2) != 0))
            {
              objc_msgSend(v23, "appendFormat:", CFSTR("%@\n"), objc_msgSend(v22, "string"));
            }
            v19 |= objc_msgSend(v22, "type");
          }
          v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
        }
        while (v18);
        v12 = v29;
        objc_msgSend(v29, "appendFormat:", CFSTR("%@%@%@"), v13, v14, v31);
        if ((v19 & 4) != 0)
        {
          v28 = 0;
          v10 = v30;
          goto LABEL_27;
        }
        v10 = v30;
        if ((v19 & 8) != 0)
        {
          v28 = 1;
LABEL_27:
          MTLReportFailure(v28, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), (uint64_t)CFSTR("%@"), v24, v25, v26, v27, (uint64_t)v12);
          objc_autoreleasePoolPop(v10);
          goto LABEL_28;
        }
      }
      else
      {
        objc_msgSend(v12, "appendFormat:", CFSTR("%@%@%@"), v13, v14, v15);
      }
      v28 = 2;
      goto LABEL_27;
    }
  }
LABEL_28:
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t _MTLMessageContextBegin_(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = a5;
  *(_DWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = a6;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = a2;
  return result;
}

void MTLPixelFormatGetInfoForDevice(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v3[2];
  void *__p;
  void *v5;
  uint64_t v6;

  v3[0] = a1;
  v3[1] = (id)-1;
  v5 = 0;
  v6 = 0;
  __p = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)(a3 + 48) = 0;
  MTLPixelFormatGetInfoForFeatureSetQuery(v3, a2, (int64x2_t *)a3);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_18263F0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void validateMTLStorageMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = 0;
  while (qword_182819BC0[v3] != a1)
  {
    if (++v3 == 3)
    {
      v4 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("invalid storageMode (%lu). Must be one of"), a1);
      for (i = 0; i != 3; ++i)
        v4 = (void *)objc_msgSend(v4, "stringByAppendingFormat:", CFSTR(" %@(%lu)"), *((_QWORD *)&off_1E0FE3A20 + qword_182819BC0[i]), qword_182819BC0[i]);
      _MTLMessageContextPush_(a2, 4, (uint64_t)CFSTR("%@"), v6, v7, v8, v9, v10, (uint64_t)v4);
      return;
    }
  }
}

void _mtlValidateMTLTextureSwizzleKey(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 6u)
    MTLReportFailure(0, "_mtlValidateMTLTextureSwizzle", 445, (uint64_t)CFSTR("swizzle(%u) is not a valid MTLTextureSwizzle."), a5, a6, a7, a8, a1);
  if (BYTE1(a1) >= 6u)
    MTLReportFailure(0, "_mtlValidateMTLTextureSwizzle", 445, (uint64_t)CFSTR("swizzle(%u) is not a valid MTLTextureSwizzle."), a5, a6, a7, a8, BYTE1(a1));
  if (BYTE2(a1) >= 6u)
    MTLReportFailure(0, "_mtlValidateMTLTextureSwizzle", 445, (uint64_t)CFSTR("swizzle(%u) is not a valid MTLTextureSwizzle."), a5, a6, a7, a8, BYTE2(a1));
  if (HIBYTE(a1) >= 6u)
    MTLReportFailure(0, "_mtlValidateMTLTextureSwizzle", 445, (uint64_t)CFSTR("swizzle(%u) is not a valid MTLTextureSwizzle."), a5, a6, a7, a8, HIBYTE(a1));
}

void MTLReportFailure(unint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int ErrorModeType;
  int v14;
  id v15;
  os_log_type_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  ErrorModeType = MTLFailureTypeGetErrorModeType(a1);
  if (ErrorModeType != 4)
  {
    v14 = ErrorModeType;
    v15 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", a4, &a9);
    if (reportFailureBlock)
    {
      (*(void (**)(void))(reportFailureBlock + 16))();
    }
    else
    {
      v16 = OS_LOG_TYPE_ERROR;
      v17 = "error";
      switch(a1)
      {
        case 0uLL:
        case 1uLL:
          goto LABEL_8;
        case 2uLL:
          v16 = OS_LOG_TYPE_INFO;
          v17 = "warning";
          goto LABEL_8;
        case 3uLL:
          v17 = "errorCheckExtended";
          goto LABEL_8;
        case 4uLL:
          if (dword_1ECD4517C >= 2)
          {
LABEL_8:
            switch(v14)
            {
              case 0:
                goto LABEL_12;
              case 1:
                v18 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", a2, 4);
                v19 = (void *)MEMORY[0x1E0C99DA0];
                v20 = *MEMORY[0x1E0C99750];
                v21[0] = CFSTR("Function Name");
                v21[1] = CFSTR("Line");
                v22[0] = v18;
                v22[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
                objc_exception_throw((id)objc_msgSend(v19, "exceptionWithName:reason:userInfo:", v20, v15, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 2)));
              case 2:
              case 6:
                if (os_log_type_enabled(MEMORY[0x1E0C81028], v16))
                {
                  *(_DWORD *)buf = 136315906;
                  v24 = a2;
                  v25 = 1024;
                  v26 = a3;
                  v27 = 2080;
                  v28 = v17;
                  v29 = 2080;
                  v30 = objc_msgSend(v15, "UTF8String");
                  _os_log_impl(&dword_182636000, MEMORY[0x1E0C81028], v16, "%s, line %u: %s '%s'\n", buf, 0x26u);
                }
                if (a1 != 4)
LABEL_12:
                  MTLReportFailure_cold_1(v15, a2, a3);
                return;
              case 3:
                fprintf_l((FILE *)*MEMORY[0x1E0C80C10], 0, "%s, line %u: %s '%s'\n", a2, a3, v17, (const char *)objc_msgSend(v15, "UTF8String"));
                return;
              case 5:
                break;
              default:
                goto LABEL_16;
            }
          }
          NSLog(CFSTR("%@"), v15);
          break;
        default:
LABEL_16:
          abort();
      }
    }
  }
}

void _MTLMessageContextPush_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v12;
  id v13;

  if (!*(_QWORD *)(a1 + 40))
    *(_QWORD *)(a1 + 40) = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", a3, &a9);
  v13 = -[MTLMessage init:message:]([MTLMessage alloc], "init:message:", a2, v12);

  objc_msgSend(*(id *)(a1 + 40), "addObject:", v13);
  if ((a2 & 0xC) != 0)
    ++*(_QWORD *)a1;

}

uint64_t MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator(uint64_t result, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *a2;
  v3 = (unint64_t)a2[1];
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  if (!v3)
    goto LABEL_6;
  v4 = *v2;
  *(_QWORD *)(result + 32) = 1;
  if (!v4)
    return result;
  *(_QWORD *)(result + 16) = v4;
  if (v3 <= 2)
LABEL_6:
    abort();
  v5 = v2[1];
  v6 = v2[2];
  *(_DWORD *)(result + 40) = v5;
  *(_QWORD *)(result + 48) = v6;
  *(_QWORD *)(result + 56) = 3;
  *(_QWORD *)(result + 32) = v6 + 3;
  return result;
}

uint64_t createFunctionArray(flatbuffers::FlatBufferBuilder *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  const char *v7;
  size_t v8;
  int String;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  _BYTE *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *__p;
  char *v32;
  char *v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v32 = 0;
  v33 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v4 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v28 != v5)
          objc_enumerationMutation(a2);
        v7 = (const char *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * i), "name"), "UTF8String");
        v8 = strlen(v7);
        String = flatbuffers::FlatBufferBuilder::CreateString(a1, v7, v8);
        v10 = String;
        v11 = v32;
        if (v32 >= v33)
        {
          v13 = (char *)__p;
          v14 = (v32 - (_BYTE *)__p) >> 2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v16 = v33 - (_BYTE *)__p;
          if ((v33 - (_BYTE *)__p) >> 1 > v15)
            v15 = v16 >> 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v33, v17);
            v13 = (char *)__p;
            v11 = v32;
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[4 * v14];
          *(_DWORD *)v19 = v10;
          v12 = v19 + 4;
          while (v11 != v13)
          {
            v20 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          __p = v19;
          v32 = v12;
          v33 = &v18[4 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_DWORD *)v32 = String;
          v12 = v11 + 4;
        }
        v32 = v12;
      }
      v4 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
    }
    while (v4);
    v21 = __p;
    v22 = v32;
  }
  else
  {
    v22 = 0;
    v21 = 0;
  }
  v23 = v22 - v21;
  if (v23)
    v24 = v21;
  else
    v24 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  v25 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v24, v23 >> 2);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
  return v25;
}

void sub_182640160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *((_BYTE *)a1 + 70) = 1;
  v6 = 4 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign(a1, 4 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(a1, v6, 4uLL);
  if (a3)
  {
    v7 = a2 - 4;
    v8 = a3;
    do
    {
      v9 = v8 - 1;
      flatbuffers::FlatBufferBuilder::PushElement<Air::FunctionConstantValue>(a1, *(_DWORD *)(v7 + 4 * v8));
      v8 = v9;
    }
    while (v9);
  }
  *((_BYTE *)a1 + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, a3);
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<Air::FunctionConstantValue>(flatbuffers::FlatBufferBuilder *a1, int a2)
{
  flatbuffers::FlatBufferBuilder::Align(a1, 4uLL);
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10) - a2 + 4);
}

dispatch_data_t _MTLCreateRenderPipelineScriptFromDescriptor(MTLRenderPipelineDescriptor *a1)
{
  const void *v1;
  size_t v2;
  dispatch_data_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  void *buffer[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v11 = 0;
  v12 = 0;
  v13 = xmmword_182809F30;
  v14 = 0u;
  *(_OWORD *)buffer = 0u;
  v16 = 0;
  v17 = 1;
  v18 = 256;
  v19 = 0;
  if (_MTLCreateRenderPipelineScriptFromDescriptor((flatbuffers::FlatBufferBuilder *)&v11, a1))
  {
    v1 = buffer[0];
    v2 = (v14 + DWORD2(v14) - LODWORD(buffer[0]));
    v5 = v11;
    v6 = v12;
    v7 = *((_QWORD *)&v14 + 1);
    v8 = v14;
    v9 = buffer[0];
    v10 = v2;
    if (v12)
    {
      v11 = 0;
      v12 = 0;
    }
    v14 = 0u;
    *(_OWORD *)buffer = 0u;
    v3 = dispatch_data_create(v1, v2, 0, 0);
    flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v5);
  }
  else
  {
    v3 = 0;
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v11);
  return v3;
}

void sub_18264032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t _MTLCreateRenderPipelineScriptFromDescriptor(flatbuffers::FlatBufferBuilder *a1, MTLRenderPipelineDescriptor *a2)
{
  const char *v5;
  size_t v6;
  const char *v7;
  size_t v8;
  MTLRenderPipelineDescriptor *v9;
  unint64_t maxVertexCallStackDepth;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  void *v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  int v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  int v52;
  void *v53;
  int v54;
  int v55;
  int PipelineBufferDescriptorVector;
  _BOOL4 v57;
  _BOOL4 v58;
  int LinkedFunctions;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int FragmentColorAttachmentDescriptorVector;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unint64_t v77;
  int v78;
  int String;
  void *__p;
  char *v81;
  char *v82;

  if (-[MTLRenderPipelineDescriptor objectFunction](a2, "objectFunction")
    || -[MTLRenderPipelineDescriptor meshFunction](a2, "meshFunction"))
  {
    return 0;
  }
  if (-[MTLRenderPipelineDescriptor vertexFunction](a2, "vertexFunction"))
  {
    v5 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLRenderPipelineDescriptor vertexFunction](a2, "vertexFunction"), "name"), "UTF8String");
    v6 = strlen(v5);
    String = flatbuffers::FlatBufferBuilder::CreateString(a1, v5, v6);
  }
  else
  {
    String = 0;
  }
  if (-[MTLRenderPipelineDescriptor fragmentFunction](a2, "fragmentFunction"))
  {
    v7 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLRenderPipelineDescriptor fragmentFunction](a2, "fragmentFunction"), "name"), "UTF8String");
    v8 = strlen(v7);
    v78 = flatbuffers::FlatBufferBuilder::CreateString(a1, v7, v8);
  }
  else
  {
    v78 = 0;
  }
  v9 = a2 + 1;
  maxVertexCallStackDepth = a2[6]._maxVertexCallStackDepth;
  if (!maxVertexCallStackDepth)
  {
    v33 = 0;
    goto LABEL_93;
  }
  v11 = *(_QWORD *)(maxVertexCallStackDepth + 16);
  if (!v11)
  {
    v32 = 0;
    goto LABEL_52;
  }
  v77 = a2[6]._maxVertexCallStackDepth;
  v12 = 0;
  __p = 0;
  v81 = 0;
  v82 = 0;
  do
  {
    v13 = *(void **)(v11 + 8 + 8 * v12);
    *((_BYTE *)a1 + 70) = 1;
    v14 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
    if (v13)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, objc_msgSend(v13, "format"), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, objc_msgSend(v13, "offset"), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, objc_msgSend(v13, "bufferIndex"), 0);
      v15 = flatbuffers::FlatBufferBuilder::EndTable(a1, v14);
      v16 = v81;
      if (v81 < v82)
        goto LABEL_24;
      v17 = (char *)__p;
      v18 = (v81 - (_BYTE *)__p) >> 2;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v20 = v82 - (_BYTE *)__p;
      if ((v82 - (_BYTE *)__p) >> 1 > v19)
        v19 = v20 >> 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v21 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v82, v21);
        v17 = (char *)__p;
        v16 = v81;
      }
      else
      {
        v22 = 0;
      }
      v27 = &v22[4 * v18];
      *(_DWORD *)v27 = v15;
      v23 = v27 + 4;
      while (v16 != v17)
      {
        v28 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v27 - 1) = v28;
        v27 -= 4;
      }
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, 0, 0);
      v15 = flatbuffers::FlatBufferBuilder::EndTable(a1, v14);
      v16 = v81;
      if (v81 < v82)
      {
LABEL_24:
        *(_DWORD *)v16 = v15;
        v23 = v16 + 4;
        goto LABEL_43;
      }
      v17 = (char *)__p;
      v24 = (v81 - (_BYTE *)__p) >> 2;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v26 = v82 - (_BYTE *)__p;
      if ((v82 - (_BYTE *)__p) >> 1 > v25)
        v25 = v26 >> 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
        v21 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v21 = v25;
      if (v21)
      {
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v82, v21);
        v17 = (char *)__p;
        v16 = v81;
      }
      else
      {
        v22 = 0;
      }
      v27 = &v22[4 * v24];
      *(_DWORD *)v27 = v15;
      v23 = v27 + 4;
      while (v16 != v17)
      {
        v29 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v27 - 1) = v29;
        v27 -= 4;
      }
    }
    __p = v27;
    v81 = v23;
    v82 = &v22[4 * v21];
    if (v17)
      operator delete(v17);
LABEL_43:
    v81 = v23;
    ++v12;
  }
  while (v12 != 31);
  if (v23 == __p)
    v30 = &flatbuffers::data<flatbuffers::Offset<Air::AttributeDescriptor>,std::allocator<flatbuffers::Offset<Air::AttributeDescriptor>>>(std::vector<flatbuffers::Offset<Air::AttributeDescriptor>> const&)::t;
  else
    v30 = __p;
  v31 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v30, (v23 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v81 = (char *)__p;
    operator delete(__p);
  }
  v32 = v31;
  maxVertexCallStackDepth = v77;
LABEL_52:
  v34 = *(_QWORD *)(maxVertexCallStackDepth + 8);
  if (!v34)
  {
    v54 = 0;
    goto LABEL_92;
  }
  v77 = v32;
  v35 = 0;
  __p = 0;
  v81 = 0;
  v82 = 0;
  while (2)
  {
    v36 = *(void **)(v34 + 8 + 8 * v35);
    *((_BYTE *)a1 + 70) = 1;
    v37 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
    if (v36)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, objc_msgSend(v36, "stepFunction"), 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, objc_msgSend(v36, "stepRate"), 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, objc_msgSend(v36, "stride"), 0);
      v38 = flatbuffers::FlatBufferBuilder::EndTable(a1, v37);
      v39 = v81;
      if (v81 >= v82)
      {
        v40 = (char *)__p;
        v41 = (v81 - (_BYTE *)__p) >> 2;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v43 = v82 - (_BYTE *)__p;
        if ((v82 - (_BYTE *)__p) >> 1 > v42)
          v42 = v43 >> 1;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
          v44 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44)
        {
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v82, v44);
          v40 = (char *)__p;
          v39 = v81;
        }
        else
        {
          v45 = 0;
        }
        v50 = &v45[4 * v41];
        *(_DWORD *)v50 = v38;
        v46 = v50 + 4;
        while (v39 != v40)
        {
          v51 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v50 - 1) = v51;
          v50 -= 4;
        }
        goto LABEL_82;
      }
LABEL_65:
      *(_DWORD *)v39 = v38;
      v46 = v39 + 4;
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, 1, 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, 1, 1);
      v38 = flatbuffers::FlatBufferBuilder::EndTable(a1, v37);
      v39 = v81;
      if (v81 < v82)
        goto LABEL_65;
      v40 = (char *)__p;
      v47 = (v81 - (_BYTE *)__p) >> 2;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v49 = v82 - (_BYTE *)__p;
      if ((v82 - (_BYTE *)__p) >> 1 > v48)
        v48 = v49 >> 1;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
        v44 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v44 = v48;
      if (v44)
      {
        v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v82, v44);
        v40 = (char *)__p;
        v39 = v81;
      }
      else
      {
        v45 = 0;
      }
      v50 = &v45[4 * v47];
      *(_DWORD *)v50 = v38;
      v46 = v50 + 4;
      while (v39 != v40)
      {
        v52 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v50 - 1) = v52;
        v50 -= 4;
      }
LABEL_82:
      __p = v50;
      v81 = v46;
      v82 = &v45[4 * v44];
      if (v40)
        operator delete(v40);
    }
    v81 = v46;
    if (++v35 != 31)
      continue;
    break;
  }
  if (v46 == __p)
    v53 = &flatbuffers::data<flatbuffers::Offset<Air::BufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Air::BufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Air::BufferLayoutDescriptor>> const&)::t;
  else
    v53 = __p;
  v54 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v53, (v46 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v81 = (char *)__p;
    operator delete(__p);
  }
LABEL_92:
  *((_BYTE *)a1 + 70) = 1;
  v55 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v32);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v54);
  v33 = flatbuffers::FlatBufferBuilder::EndTable(a1, v55);
  v9 = a2 + 1;
LABEL_93:
  PipelineBufferDescriptorVector = createPipelineBufferDescriptorVector(a1, (const MTLPipelineBufferDescriptorArrayInternal *)v9[8]._fragmentPreloadedLibraries);
  v57 = 1;
  v58 = 1;
  if (!-[MTLRenderPipelineDescriptor supportAddingVertexBinaryFunctions](a2, "supportAddingVertexBinaryFunctions"))
    v58 = -[NSArray count](-[MTLLinkedFunctions binaryFunctions](-[MTLRenderPipelineDescriptor vertexLinkedFunctions](a2, "vertexLinkedFunctions"), "binaryFunctions"), "count") != 0;
  LinkedFunctions = createLinkedFunctions(a1, -[MTLRenderPipelineDescriptor vertexLinkedFunctions](a2, "vertexLinkedFunctions", v77));
  v60 = -[MTLRenderPipelineDescriptor maxVertexAmplificationCount](a2, "maxVertexAmplificationCount");
  *((_BYTE *)a1 + 70) = 1;
  v61 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v33);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, -[MTLRenderPipelineDescriptor isRasterizationEnabled](a2, "isRasterizationEnabled"), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, -[MTLRenderPipelineDescriptor inputPrimitiveTopology](a2, "inputPrimitiveTopology"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, -[MTLRenderPipelineDescriptor maxTessellationFactor](a2, "maxTessellationFactor"), 16);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 14, -[MTLRenderPipelineDescriptor isTessellationFactorScaleEnabled](a2, "isTessellationFactorScaleEnabled"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, -[MTLRenderPipelineDescriptor tessellationFactorFormat](a2, "tessellationFactorFormat"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 18, -[MTLRenderPipelineDescriptor tessellationControlPointIndexType](a2, "tessellationControlPointIndexType"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, -[MTLRenderPipelineDescriptor tessellationFactorStepFunction](a2, "tessellationFactorStepFunction"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 22, -[MTLRenderPipelineDescriptor tessellationOutputWindingOrder](a2, "tessellationOutputWindingOrder"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 24, -[MTLRenderPipelineDescriptor tessellationPartitionMode](a2, "tessellationPartitionMode"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 26, v60, 1);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 30, PipelineBufferDescriptorVector);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 32, -[MTLRenderPipelineDescriptor supportIndirectCommandBuffers](a2, "supportIndirectCommandBuffers"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 28, -[MTLRenderPipelineDescriptor vertexAmplificationMode](a2, "vertexAmplificationMode"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 36, -[MTLRenderPipelineDescriptor textureWriteRoundingMode](a2, "textureWriteRoundingMode"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 38, -[MTLRenderPipelineDescriptor clipDistanceEnableMask](a2, "clipDistanceEnableMask"), 255);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 40, -[MTLRenderPipelineDescriptor vertexDepthCompareClampMask](a2, "vertexDepthCompareClampMask"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 42, -[MTLRenderPipelineDescriptor needsCustomBorderColorSamplers](a2, "needsCustomBorderColorSamplers"), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 44, LinkedFunctions);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 34, v58, 0);
  v62 = flatbuffers::FlatBufferBuilder::EndTable(a1, v61);
  v63 = -[MTLRenderPipelineDescriptor _descriptorPrivate](a2, "_descriptorPrivate");
  FragmentColorAttachmentDescriptorVector = createFragmentColorAttachmentDescriptorVector(a1, *(const MTLRenderPipelineColorAttachmentDescriptorArrayInternal **)v63);
  v65 = createPipelineBufferDescriptorVector(a1, *(const MTLPipelineBufferDescriptorArrayInternal **)(v63 + 416));
  if (!*(_BYTE *)(v63 + 569))
    v57 = objc_msgSend((id)objc_msgSend(*(id *)(v63 + 496), "binaryFunctions"), "count") != 0;
  v66 = createLinkedFunctions(a1, *(MTLLinkedFunctions **)(v63 + 496));
  *((_BYTE *)a1 + 70) = 1;
  v67 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 22, FragmentColorAttachmentDescriptorVector);
  v68 = *(_DWORD *)(v63 + 72);
  if ((v68 - 1) >= 0x285)
    LOWORD(v68) = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 24, (unsigned __int16)v68, 0);
  v69 = *(_DWORD *)(v63 + 80);
  if ((v69 - 1) >= 0x285)
    LOWORD(v69) = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 26, (unsigned __int16)v69, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, *(_DWORD *)(v63 + 224) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, (*(unsigned __int8 *)(v63 + 224) >> 1) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 6, (*(unsigned __int8 *)(v63 + 224) >> 2) & 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, *(_QWORD *)(v63 + 184), 1);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 28, v65);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 30, *(unsigned __int8 *)(v63 + 152), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 14, *(_QWORD *)(v63 + 216), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 16, *(_QWORD *)(v63 + 192), -1);
  flatbuffers::FlatBufferBuilder::AddElement<float>((char *)a1, 18, *(float *)(v63 + 200), 1.0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, (*(_DWORD *)(v63 + 224) >> 8) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 34, *(unsigned __int8 *)(v63 + 176), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 36, *(_DWORD *)(v63 + 224) >> 31, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 38, (*(_DWORD *)(v63 + 224) >> 27) & 0xF, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 40, (*(_DWORD *)(v63 + 224) >> 26) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 42, (*(_DWORD *)(v63 + 224) >> 23) & 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 44, (*(_DWORD *)(v63 + 224) >> 14) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 46, (*(unsigned __int8 *)(v63 + 224) >> 6) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 48, (*(_QWORD *)(v63 + 224) >> 7) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 52, *(_DWORD *)(v63 + 236), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 50, *(unsigned __int8 *)(v63 + 472), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 54, v66);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 32, v57, 0);
  v70 = flatbuffers::FlatBufferBuilder::EndTable(a1, v67);
  *((_BYTE *)a1 + 70) = 1;
  v71 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v78);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v62);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v70);
  v72 = flatbuffers::FlatBufferBuilder::EndTable(a1, v71);
  __p = (void *)0x300000000;
  LODWORD(v81) = 0;
  *((_BYTE *)a1 + 70) = 1;
  v73 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v72);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>((char *)a1, 4, (uint64_t *)&__p);
  v74 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 1);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 8, v74);
  v75 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 6, v75);
  v76 = flatbuffers::FlatBufferBuilder::EndTable(a1, v73);
  flatbuffers::FlatBufferBuilder::Finish(a1, v76, "AIRP", 0);
  return *((_QWORD *)a1 + 6) + **((unsigned int **)a1 + 6);
}

void sub_182641200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(char *result, uint64_t a2, int a3, int a4)
{
  char *v5;
  unsigned int v6;

  v5 = result;
  if (a3 != a4 || result[80])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  unsigned int v6;

  v5 = result;
  if (a3 != a4 || result[80])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(char *result, uint64_t a2, int a3, int a4)
{
  char *v5;
  unsigned int v6;

  v5 = result;
  if (a3 != a4 || result[80])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(uint64_t a1, char a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4 == *(_QWORD *)(a1 + 56))
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 1uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 1;
  *(_BYTE *)(v4 - 1) = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(char *result, uint64_t a2, int a3, int a4)
{
  char *v5;
  unsigned int v6;

  v5 = result;
  if (a3 != a4 || result[80])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned short>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned short>(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 1)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 2uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_WORD *)(v4 - 2) = a2;
  v5 = v4 - 2;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateString(flatbuffers::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  flatbuffers::FlatBufferBuilder::PreAlign(this, a3 + 1, 4uLL);
  flatbuffers::vector_downward::fill((char *)this, 1uLL);
  flatbuffers::vector_downward::push(this, (const unsigned __int8 *)a2, a3);
  flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a3);
  return (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
}

_QWORD *flatbuffers::vector_downward::push(_QWORD *this, const unsigned __int8 *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;

  if (a3)
  {
    v5 = this;
    v6 = this[6];
    if (v6 - this[7] < a3)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, a3);
      v6 = v5[6];
    }
    v5[6] = v6 - a3;
    return memcpy((void *)(v6 - a3), __src, a3);
  }
  return this;
}

char *flatbuffers::FlatBufferBuilder::AddOffset<void>(char *result, uint64_t a2, int a3)
{
  char *v5;

  if (a3)
  {
    v5 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, a2, *((_DWORD *)v5 + 8) - *((_DWORD *)v5 + 12) + *((_DWORD *)v5 + 10) - a3 + 4, 0);
  }
  return result;
}

uint64_t createPipelineBufferDescriptorVector(flatbuffers::FlatBufferBuilder *a1, const MTLPipelineBufferDescriptorArrayInternal *a2)
{
  uint64_t v4;
  MTLPipelineBufferDescriptorInternal *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  char *__p;
  char *v28;
  char *v29;

  if (!a2)
    return 0;
  v4 = 0;
  __p = 0;
  v28 = 0;
  v29 = 0;
  do
  {
    v5 = a2->_descriptors[v4];
    *((_BYTE *)a1 + 70) = 1;
    v6 = *((_QWORD *)a1 + 5);
    v7 = *((_QWORD *)a1 + 6);
    v8 = *((_QWORD *)a1 + 4);
    if (v5)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, -[MTLPipelineBufferDescriptorInternal mutability](v5, "mutability"), 0);
      v9 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v8 - (unsigned __int16)v7 + (unsigned __int16)v6);
      v10 = v28;
      if (v28 < v29)
        goto LABEL_14;
      v11 = __p;
      v12 = (v28 - __p) >> 2;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v14 = v29 - __p;
      if ((v29 - __p) >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v29, v15);
        v11 = __p;
        v10 = v28;
      }
      else
      {
        v16 = 0;
      }
      v21 = &v16[4 * v12];
      *(_DWORD *)v21 = v9;
      v17 = v21 + 4;
      while (v10 != v11)
      {
        v22 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v21 - 1) = v22;
        v21 -= 4;
      }
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, 0, 0);
      v9 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v8 - (unsigned __int16)v7 + (unsigned __int16)v6);
      v10 = v28;
      if (v28 < v29)
      {
LABEL_14:
        *(_DWORD *)v10 = v9;
        v17 = v10 + 4;
        goto LABEL_33;
      }
      v11 = __p;
      v18 = (v28 - __p) >> 2;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v20 = v29 - __p;
      if ((v29 - __p) >> 1 > v19)
        v19 = v20 >> 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v19;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v29, v15);
        v11 = __p;
        v10 = v28;
      }
      else
      {
        v16 = 0;
      }
      v21 = &v16[4 * v18];
      *(_DWORD *)v21 = v9;
      v17 = v21 + 4;
      while (v10 != v11)
      {
        v23 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v21 - 1) = v23;
        v21 -= 4;
      }
    }
    __p = v21;
    v29 = &v16[4 * v15];
    if (v11)
      operator delete(v11);
LABEL_33:
    v28 = v17;
    ++v4;
  }
  while (v4 != 31);
  if (v17 == __p)
    v24 = (char *)&flatbuffers::data<flatbuffers::Offset<Air::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>> const&)::t;
  else
    v24 = __p;
  v25 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v24, (v17 - __p) >> 2);
  if (__p)
    operator delete(__p);
  return v25;
}

void sub_1826419D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::FlatBufferBuilder *this, __int16 a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  unint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  char *v11;
  _WORD *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  size_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;

  v4 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 0);
  if ((unsigned __int16)(*((_WORD *)this + 34) + 2) <= 4u)
    v5 = 4;
  else
    v5 = (unsigned __int16)(*((_WORD *)this + 34) + 2);
  *((_WORD *)this + 34) = v5;
  v6 = *((_QWORD *)this + 6);
  if (v6 - *((_QWORD *)this + 7) < v5)
  {
    flatbuffers::vector_downward::reallocate(this, v5);
    v6 = *((_QWORD *)this + 6);
  }
  *((_QWORD *)this + 6) = v6 - v5;
  bzero((void *)(v6 - v5), v5);
  v7 = v4 - a2;
  v9 = (unsigned __int16 *)*((_QWORD *)this + 6);
  v8 = *((_QWORD *)this + 7);
  v9[1] = v7;
  *v9 = *((_WORD *)this + 34);
  v10 = *((unsigned int *)this + 16);
  v11 = (char *)(v8 - 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = (_WORD *)(v8 - 8 * v10);
    do
    {
      *(unsigned __int16 *)((char *)v9 + (unsigned __int16)v12[2]) = v4 - *v12;
      v12 += 4;
    }
    while ((unint64_t)v12 < v8);
  }
  *((_QWORD *)this + 7) = v11;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = 0;
  v13 = *((_QWORD *)this + 4);
  v14 = *((_QWORD *)this + 5);
  v15 = v13 - (_DWORD)v9 + v14;
  if (*((_BYTE *)this + 81) && v14 < (unint64_t)v11)
  {
    v16 = *v9;
    v17 = v14 + v13;
    v18 = (unsigned int *)*((_QWORD *)this + 5);
    while (1)
    {
      v19 = *v18;
      if ((_DWORD)v16 == *(unsigned __int16 *)(v17 - v19) && !memcmp((const void *)(v17 - v19), v9, v16))
        break;
      if (++v18 >= (unsigned int *)v11)
      {
        v15 = v13 - (_DWORD)v9 + v14;
        goto LABEL_17;
      }
    }
    v9 = (unsigned __int16 *)((char *)v9 + (v13 - (_DWORD)v9 + v14 - v4));
    *((_QWORD *)this + 6) = v9;
    v15 = v19;
  }
LABEL_17:
  if (v15 == (_DWORD)v13 + (_DWORD)v14 - (_DWORD)v9)
  {
    if ((unint64_t)((char *)v9 - v11) <= 3)
    {
      flatbuffers::vector_downward::reallocate(this, 4uLL);
      v11 = (char *)*((_QWORD *)this + 7);
      v13 = *((_QWORD *)this + 4);
      v14 = *((_QWORD *)this + 5);
    }
    *(_DWORD *)v11 = v15;
    *((_QWORD *)this + 7) = v11 + 4;
  }
  *(_DWORD *)(v14 + v13 - v4) = v15 - v4;
  *((_BYTE *)this + 70) = 0;
  return v4;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v4 - 4) = a2;
  v5 = v4 - 4;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

char *flatbuffers::vector_downward::fill(char *this, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this;
  v4 = *((_QWORD *)this + 6);
  if (v4 - *((_QWORD *)this + 7) >= a2)
  {
    *((_QWORD *)this + 6) = v4 - a2;
    if (!a2)
      return this;
  }
  else
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, a2);
    *((_QWORD *)v3 + 6) -= a2;
  }
  v5 = 0;
  do
    *(_BYTE *)(*((_QWORD *)v3 + 6) + v5++) = 0;
  while (a2 != v5);
  return this;
}

char *flatbuffers::FlatBufferBuilder::Align(flatbuffers::FlatBufferBuilder *this, unint64_t a2)
{
  if (*((_QWORD *)this + 9) < a2)
    *((_QWORD *)this + 9) = a2;
  return flatbuffers::vector_downward::fill((char *)this, (a2 - 1) & -(uint64_t)(*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10)));
}

char *flatbuffers::FlatBufferBuilder::PreAlign(flatbuffers::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  if (*((_QWORD *)this + 9) < a3)
    *((_QWORD *)this + 9) = a3;
  return flatbuffers::vector_downward::fill((char *)this, (a3 - 1) & (-a2 - (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10))));
}

char *flatbuffers::vector_downward::reallocate(flatbuffers::vector_downward *this, unint64_t a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  char *v11;
  char *v12;

  v4 = *((_QWORD *)this + 4);
  v3 = (char *)*((_QWORD *)this + 5);
  v5 = &v3[v4 - *((_QWORD *)this + 6)];
  v6 = *((_QWORD *)this + 7) - (_QWORD)v3;
  if (v4)
    v7 = v4 >> 1;
  else
    v7 = *((_QWORD *)this + 2);
  if (v7 <= a2)
    v7 = a2;
  v8 = (*((_QWORD *)this + 3) + v4 + v7 - 1) & -*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v8;
  v9 = *(_QWORD *)this;
  if (!v3)
  {
    if (v9)
      result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
    else
      result = (char *)operator new[]();
    goto LABEL_13;
  }
  if (v9)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, v3, v4, v8, v5, v6);
LABEL_13:
    v11 = result;
    goto LABEL_14;
  }
  v11 = (char *)operator new[]();
  memcpy(&v11[v8 - v5], &v3[v4 - v5], v5);
  memcpy(v11, v3, v6);
  result = (char *)MEMORY[0x186DABFA4](v3, 0x1000C8077774924);
LABEL_14:
  v12 = &v11[*((_QWORD *)this + 4) - v5];
  *((_QWORD *)this + 5) = v11;
  *((_QWORD *)this + 6) = v12;
  *((_QWORD *)this + 7) = &v11[v6];
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(v4 - 8) = a2;
  v5 = v4 - 8;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t _MTLCreateComputePipelineScriptFromDescriptor(flatbuffers::FlatBufferBuilder *a1, MTLComputePipelineDescriptor *a2)
{
  MTLComputePipelineDescriptor *v4;
  NSArray *insertLibraries;
  Class isa;
  uint64_t v7;
  void *v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  void *v25;
  uint64_t v26;
  int v27;
  Class v28;
  uint64_t v29;
  void *v30;
  int v31;
  int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  int v46;
  void *v47;
  int v48;
  int v49;
  int PipelineBufferDescriptorVector;
  _BOOL4 v51;
  int LinkedFunctions;
  uint64_t v53;
  int v54;
  int v55;
  const char *v56;
  size_t v57;
  int String;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  uint64_t v64;
  MTLComputePipelineDescriptor *v65;
  void *__p;
  char *v67;
  char *v68;

  v4 = a2 + 1;
  insertLibraries = a2[2]._insertLibraries;
  if (!insertLibraries)
  {
    v27 = 0;
    goto LABEL_84;
  }
  v65 = a2 + 1;
  isa = insertLibraries[2].super.isa;
  if (!isa)
  {
    v26 = 0;
    goto LABEL_43;
  }
  v7 = 0;
  __p = 0;
  v67 = 0;
  v68 = 0;
  do
  {
    v8 = (void *)*((_QWORD *)isa + v7 + 1);
    *((_BYTE *)a1 + 70) = 1;
    v9 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
    if (v8)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, objc_msgSend(v8, "format"), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, objc_msgSend(v8, "offset"), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, objc_msgSend(v8, "bufferIndex"), 0);
      v10 = flatbuffers::FlatBufferBuilder::EndTable(a1, v9);
      v11 = v67;
      if (v67 < v68)
        goto LABEL_15;
      v12 = (char *)__p;
      v13 = (v67 - (_BYTE *)__p) >> 2;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v15 = v68 - (_BYTE *)__p;
      if ((v68 - (_BYTE *)__p) >> 1 > v14)
        v14 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v68, v16);
        v12 = (char *)__p;
        v11 = v67;
      }
      else
      {
        v17 = 0;
      }
      v22 = &v17[4 * v13];
      *(_DWORD *)v22 = v10;
      v18 = v22 + 4;
      while (v11 != v12)
      {
        v23 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v22 - 1) = v23;
        v22 -= 4;
      }
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, 0, 0);
      v10 = flatbuffers::FlatBufferBuilder::EndTable(a1, v9);
      v11 = v67;
      if (v67 < v68)
      {
LABEL_15:
        *(_DWORD *)v11 = v10;
        v18 = v11 + 4;
        goto LABEL_34;
      }
      v12 = (char *)__p;
      v19 = (v67 - (_BYTE *)__p) >> 2;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v21 = v68 - (_BYTE *)__p;
      if ((v68 - (_BYTE *)__p) >> 1 > v20)
        v20 = v21 >> 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v20;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v68, v16);
        v12 = (char *)__p;
        v11 = v67;
      }
      else
      {
        v17 = 0;
      }
      v22 = &v17[4 * v19];
      *(_DWORD *)v22 = v10;
      v18 = v22 + 4;
      while (v11 != v12)
      {
        v24 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v22 - 1) = v24;
        v22 -= 4;
      }
    }
    __p = v22;
    v67 = v18;
    v68 = &v17[4 * v16];
    if (v12)
      operator delete(v12);
LABEL_34:
    v67 = v18;
    ++v7;
  }
  while (v7 != 31);
  if (v18 == __p)
    v25 = &flatbuffers::data<flatbuffers::Offset<Air::AttributeDescriptor>,std::allocator<flatbuffers::Offset<Air::AttributeDescriptor>>>(std::vector<flatbuffers::Offset<Air::AttributeDescriptor>> const&)::t;
  else
    v25 = __p;
  LODWORD(v26) = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v25, (v18 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v67 = (char *)__p;
    operator delete(__p);
  }
  v26 = v26;
LABEL_43:
  v28 = insertLibraries[1].super.isa;
  if (!v28)
  {
    v48 = 0;
    goto LABEL_83;
  }
  v64 = v26;
  v29 = 0;
  __p = 0;
  v67 = 0;
  v68 = 0;
  while (2)
  {
    v30 = (void *)*((_QWORD *)v28 + v29 + 1);
    *((_BYTE *)a1 + 70) = 1;
    v31 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
    if (v30)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, objc_msgSend(v30, "stepFunction"), 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, objc_msgSend(v30, "stepRate"), 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, objc_msgSend(v30, "stride"), 0);
      v32 = flatbuffers::FlatBufferBuilder::EndTable(a1, v31);
      v33 = v67;
      if (v67 >= v68)
      {
        v34 = (char *)__p;
        v35 = (v67 - (_BYTE *)__p) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v37 = v68 - (_BYTE *)__p;
        if ((v68 - (_BYTE *)__p) >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v68, v38);
          v34 = (char *)__p;
          v33 = v67;
        }
        else
        {
          v39 = 0;
        }
        v44 = &v39[4 * v35];
        *(_DWORD *)v44 = v32;
        v40 = v44 + 4;
        while (v33 != v34)
        {
          v45 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *((_DWORD *)v44 - 1) = v45;
          v44 -= 4;
        }
        goto LABEL_73;
      }
LABEL_56:
      *(_DWORD *)v33 = v32;
      v40 = v33 + 4;
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, 1, 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, 1, 1);
      v32 = flatbuffers::FlatBufferBuilder::EndTable(a1, v31);
      v33 = v67;
      if (v67 < v68)
        goto LABEL_56;
      v34 = (char *)__p;
      v41 = (v67 - (_BYTE *)__p) >> 2;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v43 = v68 - (_BYTE *)__p;
      if ((v68 - (_BYTE *)__p) >> 1 > v42)
        v42 = v43 >> 1;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
        v38 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v38 = v42;
      if (v38)
      {
        v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v68, v38);
        v34 = (char *)__p;
        v33 = v67;
      }
      else
      {
        v39 = 0;
      }
      v44 = &v39[4 * v41];
      *(_DWORD *)v44 = v32;
      v40 = v44 + 4;
      while (v33 != v34)
      {
        v46 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v44 - 1) = v46;
        v44 -= 4;
      }
LABEL_73:
      __p = v44;
      v67 = v40;
      v68 = &v39[4 * v38];
      if (v34)
        operator delete(v34);
    }
    v67 = v40;
    if (++v29 != 31)
      continue;
    break;
  }
  if (v40 == __p)
    v47 = &flatbuffers::data<flatbuffers::Offset<Air::BufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Air::BufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Air::BufferLayoutDescriptor>> const&)::t;
  else
    v47 = __p;
  v48 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v47, (v40 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v67 = (char *)__p;
    operator delete(__p);
  }
LABEL_83:
  *((_BYTE *)a1 + 70) = 1;
  v49 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v26);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v48);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, -[NSArray indexBufferIndex](insertLibraries, "indexBufferIndex"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, -[NSArray indexType](insertLibraries, "indexType"), 0);
  v27 = flatbuffers::FlatBufferBuilder::EndTable(a1, v49);
  v4 = v65;
LABEL_84:
  PipelineBufferDescriptorVector = createPipelineBufferDescriptorVector(a1, (const MTLPipelineBufferDescriptorArrayInternal *)v4[3].super.isa);
  v51 = 1;
  if (!-[MTLComputePipelineDescriptor supportAddingBinaryFunctions](a2, "supportAddingBinaryFunctions"))
    v51 = -[NSArray count](-[MTLLinkedFunctions binaryFunctions](-[MTLComputePipelineDescriptor linkedFunctions](a2, "linkedFunctions"), "binaryFunctions"), "count") != 0;
  LinkedFunctions = createLinkedFunctions(a1, -[MTLComputePipelineDescriptor linkedFunctions](a2, "linkedFunctions", v64));
  v53 = -[MTLComputePipelineDescriptor maxCallStackDepth](a2, "maxCallStackDepth");
  *((_BYTE *)a1 + 70) = 1;
  v54 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v27);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v53, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, -[MTLComputePipelineDescriptor threadGroupSizeIsMultipleOfThreadExecutionWidth](a2, "threadGroupSizeIsMultipleOfThreadExecutionWidth"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, -[MTLComputePipelineDescriptor maxTotalThreadsPerThreadgroup](a2, "maxTotalThreadsPerThreadgroup"), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 12, PipelineBufferDescriptorVector);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 14, -[MTLComputePipelineDescriptor supportIndirectCommandBuffers](a2, "supportIndirectCommandBuffers"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, v51, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 18, -[MTLComputePipelineDescriptor textureWriteRoundingMode](a2, "textureWriteRoundingMode"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, -[MTLComputePipelineDescriptor needsCustomBorderColorSamplers](a2, "needsCustomBorderColorSamplers"), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 22, LinkedFunctions);
  v55 = flatbuffers::FlatBufferBuilder::EndTable(a1, v54);
  v56 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLComputePipelineDescriptor computeFunction](a2, "computeFunction"), "name"), "UTF8String");
  v57 = strlen(v56);
  String = flatbuffers::FlatBufferBuilder::CreateString(a1, v56, v57);
  *((_BYTE *)a1 + 70) = 1;
  LODWORD(v56) = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v55);
  v59 = flatbuffers::FlatBufferBuilder::EndTable(a1, (__int16)v56);
  __p = (void *)0x300000000;
  LODWORD(v67) = 0;
  *((_BYTE *)a1 + 70) = 1;
  LODWORD(v56) = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v59);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>((char *)a1, 4, (uint64_t *)&__p);
  v60 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 8, v60);
  v61 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 6, v61);
  v62 = flatbuffers::FlatBufferBuilder::EndTable(a1, (__int16)v56);
  flatbuffers::FlatBufferBuilder::Finish(a1, v62, "AIRP", 0);
  return *((_QWORD *)a1 + 6) + **((unsigned int **)a1 + 6);
}

void sub_182642A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::FlatBufferBuilder::Finish(flatbuffers::FlatBufferBuilder *this, int a2, const char *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  *((_QWORD *)this + 7) = *((_QWORD *)this + 5);
  v8 = 4;
  if (a4)
    v8 = 8;
  flatbuffers::FlatBufferBuilder::PreAlign(this, v8 + 4 * (a3 != 0), *((_QWORD *)this + 9));
  if (a3)
  {
    v9 = *((_QWORD *)this + 6);
    if ((unint64_t)(v9 - *((_QWORD *)this + 7)) <= 3)
    {
      flatbuffers::vector_downward::reallocate(this, 4uLL);
      v9 = *((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v9 - 4;
    *(_DWORD *)(v9 - 4) = *(_DWORD *)a3;
  }
  flatbuffers::FlatBufferBuilder::Align(this, 4uLL);
  result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10) - a2 + 4);
  if (a4)
    result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
  *((_BYTE *)this + 71) = 1;
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>(char *result, uint64_t a2, uint64_t *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v5 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    v6 = *((_QWORD *)v5 + 6);
    if ((unint64_t)(v6 - *((_QWORD *)v5 + 7)) <= 0xB)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v5, 0xCuLL);
      v6 = *((_QWORD *)v5 + 6);
    }
    *((_QWORD *)v5 + 6) = v6 - 12;
    v7 = *a3;
    *(_DWORD *)(v6 - 4) = *((_DWORD *)a3 + 2);
    *(_QWORD *)(v6 - 12) = v7;
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, *((_DWORD *)v5 + 8) - *((_DWORD *)v5 + 12) + *((_DWORD *)v5 + 10));
  }
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddElement<float>(char *result, uint64_t a2, float a3, float a4)
{
  char *v5;
  unsigned int v6;

  v5 = result;
  if (a3 != a4 || result[80])
  {
    v6 = flatbuffers::FlatBufferBuilder::PushElement<float>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

void MTLResourceListChunkFreeEntries(MTLResourceListChunk *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *entries;

  if (a1->currentEntry)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      entries = a1->entries;
      _X9 = &entries[(v2 * 8) & 0xFFFFFFF8];
      __asm { PRFM            #4, [X9] }

      ++v3;
      ++v2;
    }
    while (v3 < a1->currentEntry);
  }
}

void MTLLibraryDataWithArchive::readFunctionPublicOrPrivateMetadata(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  signed int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _WORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  const __CFString *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  MTLFunctionConstantInternal *v89;
  MTLFunctionConstantInternal *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  MTLFunctionConstantInternal **v97;
  char *v98;
  char *v99;
  MTLFunctionConstantInternal *v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  MTLDataType v108;
  char v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unsigned __int8 *v113;
  int v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  __objc2_class **v124;
  void *v125;
  uint64_t i;
  uint64_t v127;
  const char *v128;
  unsigned int v129;
  int v130;
  const char *v131;
  const char *v132;
  uint64_t v133;
  MTLDataType v134;
  MTLStructType *v135;
  MTLBindingInternal *v136;
  uint64_t v137;
  MTLStructType *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  id *v145;
  id *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char **v150;
  id v151;
  unsigned int v152;
  unsigned __int16 v153;
  char *v154;
  char *v155;
  char *v156;
  int v157;
  unsigned __int16 v158;
  int v159;
  uint64_t v160;

  v151 = a3;
  v160 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1) & 1) == 0)
  {
    MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5653, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v10, v11, v12, v13, a9);
    return;
  }
  v159 = 0;
  if ((*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 320))(a1, &v159, 4) != 4)
  {
    MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5658, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v14, v15, v16, v17, v149);
    return;
  }
  v18 = 0;
  v19 = 0;
  v158 = 0;
  v150 = &v156;
  v157 = 0;
  v154 = 0;
  v155 = 0;
  v156 = 0;
  do
  {
    if ((*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 320))(a1, &v157, 4) != 4)
    {
      MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5670, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v20, v21, v22, v23, v149);
      goto LABEL_168;
    }
    v24 = v157;
    v25 = bswap32(v157);
    v157 = v25;
    v153 = 0;
    if (v24 != 1413762629)
    {
      if ((*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)a1 + 320))(a1, &v153, 2) != 2)
      {
        v148 = 5677;
        goto LABEL_163;
      }
      if (v157 > 1129206611)
      {
        if (v157 <= 1380275281)
        {
          switch(v157)
          {
            case 1129206612:
              v71 = malloc_type_malloc(v153, 0x8532C51EuLL);
              v72 = (*(uint64_t (**)(uint64_t, _WORD *, _QWORD))(*(_QWORD *)a1 + 320))(a1, v71, v153);
              if (v72 != v153)
              {
                MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5688, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v73, v74, v75, v76, v149);
                goto LABEL_168;
              }
              if (v153 >= 2u && (v77 = (unsigned __int16)*v71, *v71))
              {
                v149 = v19;
                std::vector<MTLSerializer::ObjectRef>::reserve((void **)&v154, ((v155 - v154) >> 3) + v77);
                v78 = 0;
                LODWORD(v19) = 2;
                do
                {
                  v79 = v153;
                  v80 = v19;
                  if (v19 >= (unint64_t)v153)
                  {
LABEL_50:
                    v83 = &stru_1E0FE5DC8;
                  }
                  else
                  {
                    v81 = (unsigned __int8 *)v71 + v19;
                    while (*v81++)
                    {
                      LODWORD(v19) = v19 + 1;
                      if (v19 >= v153)
                      {
                        LODWORD(v19) = v153;
                        goto LABEL_50;
                      }
                    }
                    v83 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v71 + v80);
                    LODWORD(v19) = v19 + 1;
                    v79 = v153;
                  }
                  v84 = v19;
                  if (v79 <= v19)
                  {
                    v85 = 0;
                  }
                  else
                  {
                    v19 = (v19 + 1);
                    v85 = *((unsigned __int8 *)v71 + v84);
                    v84 = v19;
                  }
                  v86 = v84 + 2;
                  if (v84 + 2 <= v79)
                  {
                    v87 = *(unsigned __int16 *)((char *)v71 + v84);
                    v84 = (v84 + 2);
                    LODWORD(v19) = v86;
                  }
                  else
                  {
                    v87 = 0;
                  }
                  if (v84 >= v79)
                  {
                    v88 = 0;
                  }
                  else
                  {
                    LODWORD(v19) = v19 + 1;
                    v88 = *((unsigned __int8 *)v71 + v84);
                  }
                  v89 = -[MTLFunctionConstantInternal initWithName:type:index:required:]([MTLFunctionConstantInternal alloc], "initWithName:type:index:required:", v83, v85, v87, v88 != 0);
                  v90 = v89;
                  v91 = v155;
                  if (v155 >= v156)
                  {
                    v93 = (v155 - v154) >> 3;
                    if ((unint64_t)(v93 + 1) >> 61)
                      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                    v94 = (v156 - v154) >> 2;
                    if (v94 <= v93 + 1)
                      v94 = v93 + 1;
                    if ((unint64_t)(v156 - v154) >= 0x7FFFFFFFFFFFFFF8)
                      v95 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v95 = v94;
                    if (v95)
                      v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v150, v95);
                    else
                      v96 = 0;
                    v97 = (MTLFunctionConstantInternal **)&v96[8 * v93];
                    *v97 = v90;
                    v92 = (char *)(v97 + 1);
                    v99 = v154;
                    v98 = v155;
                    if (v155 != v154)
                    {
                      do
                      {
                        v100 = (MTLFunctionConstantInternal *)*((_QWORD *)v98 - 1);
                        v98 -= 8;
                        *--v97 = v100;
                      }
                      while (v98 != v99);
                      v98 = v154;
                    }
                    v154 = (char *)v97;
                    v155 = v92;
                    v156 = &v96[8 * v95];
                    if (v98)
                      operator delete(v98);
                  }
                  else
                  {
                    *(_QWORD *)v155 = v89;
                    v92 = v91 + 8;
                  }
                  v155 = v92;
                  ++v78;
                }
                while (v78 != v77);
                free(v71);
                v19 = v149;
              }
              else
              {
                free(v71);
              }
              goto LABEL_151;
            case 1145389641:
              MEMORY[0x1E0C80A78](2);
              v42 = (unsigned int *)((char *)&v149 - v41);
              v43 = (*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)a1 + 320))(a1, (char *)&v149 - v41, v153);
              if (v43 != v153)
              {
                MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5879, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v44, v45, v46, v47, v149);
                goto LABEL_168;
              }
              objc_msgSend(v151, "setLineNumber:", *v42);
              if (v153 >= 5u)
              {
                v48 = (unsigned __int8 *)(v42 + 1);
                v49 = v153 - 4;
                while (*v48++)
                {
                  if (!--v49)
                    goto LABEL_151;
                }
                v143 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v42 + 1);
                objc_msgSend(v151, "setFilePath:", v143);
              }
              goto LABEL_151;
            case 1162757204:
              goto LABEL_153;
          }
        }
        else
        {
          switch(v157)
          {
            case 1380275282:
              MEMORY[0x1E0C80A78](2);
              v102 = (char *)&v149 - v101;
              v103 = (*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)a1 + 320))(a1, (char *)&v149 - v101, v153);
              if (v103 != v153)
              {
                MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5836, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v104, v105, v106, v107, v149);
                goto LABEL_168;
              }
              v152 = 0;
              if (v153)
              {
                v108 = (unint64_t)*(unsigned __int8 *)v102;
                v152 = 1;
              }
              else
              {
                v108 = MTLDataTypeNone;
              }
              v138 = typeFromBuffer(v108, v102, &v152, v153);
              objc_msgSend(v151, "setReturnType:", v138);

              goto LABEL_151;
            case 1447122004:
              MEMORY[0x1E0C80A78](2);
              v57 = (unsigned __int16 *)((char *)&v149 - v56);
              v58 = (*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)a1 + 320))(a1, (char *)&v149 - v56, v153);
              if (v58 != v153)
              {
                MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5716, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v59, v60, v61, v62, v149);
                goto LABEL_168;
              }
              if (v153 > 1u)
              {
                v158 = *v57;
                if (v158 && !v19)
                {
                  v19 = (uint64_t)malloc_type_malloc(8 * v158, 0x80040B8603338uLL);
                  bzero((void *)v19, 8 * v158);
                  if (v158)
                  {
                    v110 = 0;
                    v111 = 2;
                    do
                    {
                      if (v111 >= v153)
                      {
                        v115 = 0;
                      }
                      else
                      {
                        v112 = v111;
                        v113 = (unsigned __int8 *)v57 + v111;
                        while (1)
                        {
                          v114 = *v113++;
                          ++v111;
                          if (!v114)
                            break;
                          if (v111 >= v153)
                          {
                            v115 = 0;
                            v111 = v153;
                            goto LABEL_101;
                          }
                        }
                        v115 = (char *)v57 + v112;
                      }
LABEL_101:
                      if (v115)
                        v116 = v115;
                      else
                        v116 = "";
                      v117 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v116);
                      if ((unint64_t)v111 + 2 <= v153)
                      {
                        v118 = *(unsigned __int16 *)((char *)v57 + v111);
                        v120 = v118 >> 15;
                        v121 = (v118 >> 13) & 3;
                        v122 = v120 | 2;
                        if (v121 == 2)
                          v120 |= 4uLL;
                        if (v121 == 1)
                          v119 = v122;
                        else
                          v119 = v120;
                        v111 += 2;
                      }
                      else
                      {
                        LOWORD(v118) = 0;
                        v119 = 0;
                      }
                      v123 = objc_msgSend(v151, "functionType");
                      v124 = off_1E0FDDA98;
                      if (v123 != 1)
                        v124 = off_1E0FDD6A8;
                      *(_QWORD *)(v19 + 8 * v110++) = (id)objc_msgSend(objc_alloc(*v124), "initWithName:attributeIndex:attributeType:flags:", v117, v118 & 0x1FFF, 0, v119);
                      v18 = v158;
                    }
                    while (v110 < v158);
                  }
                  else
                  {
                    v18 = 0;
                  }
                }
              }
              else
              {
                v158 = 0;
              }
              goto LABEL_151;
            case 1447122009:
              v30 = malloc_type_malloc(v153, 0x29AA0C57uLL);
              v31 = (*(uint64_t (**)(uint64_t, _WORD *, _QWORD))(*(_QWORD *)a1 + 320))(a1, v30, v153);
              if (v31 == v153)
              {
                if (v153 >= 2u && v19 && *v30 && (unsigned __int16)*v30 == v158)
                {
                  v140 = 0;
                  v141 = 2;
                  do
                  {
                    if (v141 >= v153)
                      v142 = 0;
                    else
                      v142 = *((unsigned __int8 *)v30 + v141++);
                    objc_msgSend(*(id *)(v19 + 8 * v140++), "setAttributeType:", v142);
                  }
                  while (v140 < v158);
                  v109 = 1;
                  if (!v30)
                  {
LABEL_88:
                    if ((v109 & 1) == 0)
                      goto LABEL_168;
                    goto LABEL_151;
                  }
LABEL_87:
                  free(v30);
                  goto LABEL_88;
                }
                MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5784, (uint64_t)CFSTR("Invalid library file/data (bad VATY token)"), v32, v33, v34, v35, v149);
              }
              else
              {
                MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5777, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v32, v33, v34, v35, v149);
              }
              v109 = 0;
              if (!v30)
                goto LABEL_88;
              goto LABEL_87;
          }
        }
LABEL_137:
        v139 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, v139 + v153) & 1) == 0)
        {
          v148 = 5900;
          goto LABEL_163;
        }
LABEL_151:
        v25 = v157;
        continue;
      }
      if (v157 <= 1095911234)
      {
        if (v157 != 1095192643)
        {
          if (v157 == 1095192660)
          {
            MEMORY[0x1E0C80A78](2);
            v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
            if (v51 != v153)
            {
              MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5827, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v52, v53, v54, v55, v149);
              goto LABEL_168;
            }
            goto LABEL_151;
          }
          goto LABEL_137;
        }
        if ((*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)a1 + 320))(a1, &v158, 2) == 2)
          goto LABEL_151;
        v148 = 5819;
      }
      else
      {
        if (v157 != 1095911235)
        {
          if (v157 == 1095911250)
          {
            MEMORY[0x1E0C80A78](2);
            v64 = (char *)&v149 - v63;
            v65 = (*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)a1 + 320))(a1, (char *)&v149 - v63, v153);
            if (v65 != v153)
            {
              MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5849, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v66, v67, v68, v69, v149);
              goto LABEL_168;
            }
            v152 = 0;
            v149 = v19;
            if (v153)
            {
              v70 = *(unsigned __int8 *)v64;
              v152 = 1;
            }
            else
            {
              v70 = 0;
            }
            v125 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v70, v149);
            if (v70)
            {
              for (i = 0; i != v70; ++i)
              {
                v127 = v152;
                if (v152 >= v153)
                {
LABEL_124:
                  v131 = 0;
                  v152 = v127;
                }
                else
                {
                  v128 = &v64[v152];
                  v129 = v152;
                  while (1)
                  {
                    v130 = *(unsigned __int8 *)v128++;
                    ++v129;
                    if (!v130)
                      break;
                    if (v129 >= v153)
                    {
                      LODWORD(v127) = v153;
                      goto LABEL_124;
                    }
                  }
                  v152 = v129;
                  v131 = &v64[v127];
                }
                if (v131)
                  v132 = v131;
                else
                  v132 = "";
                v133 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v132);
                if (v152 >= v153)
                  v134 = MTLDataTypeNone;
                else
                  v134 = (unint64_t)v64[v152++];
                v135 = typeFromBuffer(v134, v64, &v152, v153);
                v136 = -[MTLBindingInternal initWithName:type:access:index:active:arrayLength:typeDescription:]([MTLBindingInternal alloc], "initWithName:type:access:index:active:arrayLength:typeDescription:", v133, 18, 0, 0, 1, 1, v135);
                objc_msgSend(v125, "setObject:atIndexedSubscript:", v136, i);

              }
            }
            v137 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v125);
            objc_msgSend(v151, "setArguments:", v137);
            v19 = v149;
            goto LABEL_151;
          }
          if (v157 == 1095911252)
          {
            MEMORY[0x1E0C80A78](2);
            v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
            if (v36 != v153)
            {
              MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5810, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v37, v38, v39, v40, v149);
              goto LABEL_168;
            }
            goto LABEL_151;
          }
          goto LABEL_137;
        }
        if ((*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)a1 + 320))(a1, &v158, 2) == 2)
          goto LABEL_151;
        v148 = 5802;
      }
LABEL_163:
      MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", v148, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v26, v27, v28, v29, v149);
      goto LABEL_168;
    }
  }
  while (v25 != 1162757204);
LABEL_153:
  if (v155 != v154)
  {
    v144 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:");
    objc_msgSend(v151, "setFunctionConstants:", v144);

    v145 = (id *)v154;
    v146 = (id *)v155;
    while (v145 != v146)

  }
  if (v19)
  {
    v147 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, v18);
    free((void *)v19);
    v19 = 0;
    objc_msgSend(v151, "setVertexAttributes:", v147);
  }
LABEL_168:
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  if (v19)
    free((void *)v19);
}

void sub_182644198(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  *(_QWORD *)(v2 - 160) = v1;
  v4 = *(void **)(v2 - 128);
  if (v4)
  {
    *(_QWORD *)(v2 - 120) = v4;
    operator delete(v4);
  }
  if (*(_QWORD *)(v2 - 160))
    free(*(void **)(v2 - 160));
  _Unwind_Resume(exception_object);
}

void MTLLibraryDataWithArchive::readFunctionMetadata(MTLLibraryDataWithArchive *this, unint64_t a2, _MTLFunction *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_DWORD)a4 == 2)
    MTLLibraryDataWithArchive::readFunctionSourceArchiveMetadata(this, a2, a3, a4, a5, a6, a7, a8, a9);
  else
    MTLLibraryDataWithArchive::readFunctionPublicOrPrivateMetadata((uint64_t)this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void std::vector<MTLSerializer::ObjectRef>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *_MTLPopulateLinkedFunctionExtraData(MTLLinkedFunctions *a1)
{
  _QWORD *v2;
  char *v3;
  NSArray *v4;
  NSArray *v5;
  __int128 *v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  NSArray *v11;
  NSArray *v12;
  __int128 *v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t j;
  NSDictionary *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t k;
  void *v22;
  id v23;
  uint64_t v24;
  const char *v25;
  CC_LONG v26;
  __int128 *v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t m;
  __int128 v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  CC_SHA256_CTX c;
  _BYTE v39[128];
  __int128 data;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)operator new();
  v2[2] = 0;
  v3 = (char *)malloc_type_malloc(0x400uLL, 0xFA8FEB0CuLL);
  *v2 = v3;
  v2[1] = 1024;
  CC_SHA256_Init(&c);
  v4 = -[MTLLinkedFunctions functions](a1, "functions");
  v5 = v4;
  if (v4 && -[NSArray count](v4, "count"))
  {
    CC_SHA256_Update(&c, "functions", 9u);
    v6 = (__int128 *)objc_msgSend(-[NSArray objectAtIndexedSubscript:](v5, "objectAtIndexedSubscript:", 0), "bitCodeHash");
    v7 = v6[1];
    data = *v6;
    v41 = v7;
    if (-[NSArray count](v5, "count") >= 2)
    {
      v8 = 1;
      do
      {
        v9 = objc_msgSend(-[NSArray objectAtIndexedSubscript:](v5, "objectAtIndexedSubscript:", v8), "bitCodeHash");
        for (i = 0; i != 32; i += 8)
          *(_QWORD *)((char *)&data + i) ^= *(_QWORD *)(v9 + i);
        v8 = (v8 + 1);
      }
      while (-[NSArray count](v5, "count") > v8);
    }
    CC_SHA256_Update(&c, &data, 0x20u);
  }
  v11 = -[MTLLinkedFunctions privateFunctions](a1, "privateFunctions");
  v12 = v11;
  if (v11 && -[NSArray count](v11, "count"))
  {
    CC_SHA256_Update(&c, "privateFunctions", 0x10u);
    v13 = (__int128 *)objc_msgSend(-[NSArray objectAtIndexedSubscript:](v12, "objectAtIndexedSubscript:", 0), "bitCodeHash");
    v14 = v13[1];
    data = *v13;
    v41 = v14;
    if (-[NSArray count](v12, "count") >= 2)
    {
      v15 = 1;
      do
      {
        v16 = objc_msgSend(-[NSArray objectAtIndexedSubscript:](v12, "objectAtIndexedSubscript:", v15), "bitCodeHash");
        for (j = 0; j != 32; j += 8)
          *(_QWORD *)((char *)&data + j) ^= *(_QWORD *)(v16 + j);
        v15 = (v15 + 1);
      }
      while (-[NSArray count](v12, "count") > v15);
    }
    CC_SHA256_Update(&c, &data, 0x20u);
  }
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v18 = -[MTLLinkedFunctions groups](a1, "groups", 0);
  v19 = -[NSDictionary countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v35;
    do
    {
      for (k = 0; k != v19; ++k)
      {
        if (*(_QWORD *)v35 != v20)
          objc_enumerationMutation(v18);
        v22 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * k);
        v23 = -[NSDictionary objectForKeyedSubscript:](-[MTLLinkedFunctions groups](a1, "groups"), "objectForKeyedSubscript:", v22);
        v24 = objc_msgSend(v22, "UTF8String");
        if (v23)
        {
          v25 = (const char *)v24;
          if (objc_msgSend(v23, "count"))
          {
            if (v25)
            {
              v26 = strlen(v25);
              CC_SHA256_Update(&c, v25, v26);
            }
            v27 = (__int128 *)objc_msgSend((id)objc_msgSend(v23, "objectAtIndexedSubscript:", 0), "bitCodeHash");
            v28 = v27[1];
            data = *v27;
            v41 = v28;
            if ((unint64_t)objc_msgSend(v23, "count") >= 2)
            {
              v29 = 1;
              do
              {
                v30 = objc_msgSend((id)objc_msgSend(v23, "objectAtIndexedSubscript:", v29), "bitCodeHash");
                for (m = 0; m != 32; m += 8)
                  *(_QWORD *)((char *)&data + m) ^= *(_QWORD *)(v30 + m);
                v29 = (v29 + 1);
              }
              while (objc_msgSend(v23, "count") > v29);
            }
            CC_SHA256_Update(&c, &data, 0x20u);
          }
        }
      }
      v19 = -[NSDictionary countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    }
    while (v19);
  }
  CC_SHA256_Final((unsigned __int8 *)&data, &c);
  *(_DWORD *)v3 = 1718645874;
  v32 = v41;
  *(_OWORD *)(v3 + 4) = data;
  *(_OWORD *)(v3 + 20) = v32;
  *((_DWORD *)v3 + 9) = 1701733460;
  v2[2] = 40;
  return v2;
}

void sub_182644978(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x1010C40113C0ABBLL);
  _Unwind_Resume(a1);
}

uint64_t _MTLGetSerializedVertexFormat(Air::PipelineScript *a1, _QWORD *a2, size_t *a3, char **a4)
{
  unsigned __int16 *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  std::string *v9;
  int *v12;
  unsigned __int16 *v13;
  int *v14;
  int *v15;
  unsigned __int16 *v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  int *v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned __int16 *v28;
  uint64_t v29;
  int *v30;
  unsigned __int16 *v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  unsigned int *v41;
  int *v42;
  unsigned __int16 *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t i;
  int *v48;
  unsigned __int16 *v49;
  uint64_t v50;
  unsigned int v51;
  int *v52;
  unsigned __int16 *v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned __int16 *v57;
  uint64_t v58;
  unsigned __int16 *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned __int8 v62;
  unsigned int v63;
  int *v64;
  unsigned __int16 *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 *v68;
  uint64_t v69;
  int v70;
  BOOL v71;
  unsigned __int16 *v72;
  uint64_t v73;
  uint64_t v74;
  size_t size;
  void *v76;
  std::string *p_p;
  uint64_t v78;
  const char *v79;
  int v80;
  int v81;
  std::string __p;
  std::string v83;
  std::string::value_type __s[8];
  std::string::value_type v85[8];
  std::string::value_type v86[4];
  std::string::value_type v87[6];
  std::string::value_type v88[2];
  std::string::value_type v89[2];
  std::string::value_type v90[2];

  memset(&v83, 0, sizeof(v83));
  memset(&__p, 0, sizeof(__p));
  *a3 = 0;
  *a2 = 0;
  v5 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v5 < 9u || (v6 = v5[4]) == 0 || (v7 = *((unsigned __int8 *)a1 + v6), (v7 - 3) <= 0xFFFFFFFD))
  {
    std::string::append(&v83, "Error: pipeline must be render or compute");
    if (a4)
    {
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v8 = 0;
        if (!*((_BYTE *)&v83.__r_.__value_.__s + 23))
          goto LABEL_34;
        goto LABEL_7;
      }
      if (v83.__r_.__value_.__l.__size_)
      {
        v8 = 0;
        goto LABEL_10;
      }
    }
LABEL_33:
    v8 = 0;
    goto LABEL_34;
  }
  if (v7 == 2)
  {
    v15 = (int *)Air::PipelineScript::pipeline_as_compute(a1);
    v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 < 7u)
    {
      v17 = 0;
    }
    else
    {
      v17 = (int *)v16[3];
      if (v17)
        v17 = (int *)((char *)v17 + (_QWORD)v15 + *(unsigned int *)((char *)v17 + (_QWORD)v15));
    }
    v28 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v28 < 0xBu)
      goto LABEL_33;
    v29 = v28[5];
    if (!v29)
      goto LABEL_33;
    v30 = (int *)((char *)v17 + v29 + *(unsigned int *)((char *)v17 + v29));
    v31 = (unsigned __int16 *)((char *)v30 - *v30);
    v32 = *v31;
    if (v32 <= 4)
    {
      v18 = 0;
      v21 = 0;
    }
    else
    {
      if (v31[2])
        v21 = (int *)((char *)v30 + v31[2] + *(unsigned int *)((char *)v30 + v31[2]));
      else
        v21 = 0;
      if (v32 >= 7)
      {
        if (v31[3])
          v22 = (unsigned int *)((char *)v30 + v31[3] + *(unsigned int *)((char *)v30 + v31[3]));
        else
          v22 = 0;
        if (v32 < 0xB)
        {
          v18 = 0;
          if (v32 < 9)
          {
            LOWORD(v35) = 0;
            goto LABEL_58;
          }
        }
        else if (v31[5])
        {
          v18 = *((unsigned __int8 *)v30 + v31[5]);
        }
        else
        {
          v18 = 0;
        }
        v78 = v31[4];
        if (v78)
        {
          v35 = *(int *)((char *)v30 + v78);
          goto LABEL_58;
        }
LABEL_57:
        LOWORD(v35) = 0;
LABEL_58:
        LODWORD(v20) = 0;
        v19 = (unsigned __int16)v35;
        goto LABEL_59;
      }
      v18 = 0;
    }
    v22 = 0;
    goto LABEL_57;
  }
  if (v7 == 1)
  {
    v12 = (int *)Air::PipelineScript::pipeline_as_render(a1);
    v13 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v13 < 9u)
    {
      v14 = 0;
    }
    else
    {
      v14 = (int *)v13[4];
      if (v14)
        v14 = (int *)((char *)v14 + (_QWORD)v12 + *(unsigned int *)((char *)v14 + (_QWORD)v12));
    }
    v23 = (unsigned __int16 *)((char *)v14 - *v14);
    v24 = *v23;
    if (v24 < 7 || !v23[3])
      goto LABEL_33;
    v25 = (int *)((char *)v14 + v23[3] + *(unsigned int *)((char *)v14 + v23[3]));
    v26 = (unsigned __int16 *)((char *)v25 - *v25);
    v27 = *v26;
    if (v27 <= 4)
    {
      v21 = 0;
    }
    else
    {
      if (v26[2])
        v21 = (int *)((char *)v25 + v26[2] + *(unsigned int *)((char *)v25 + v26[2]));
      else
        v21 = 0;
      if (v27 >= 7)
      {
        v34 = v26[3];
        if (v34)
        {
          v22 = (unsigned int *)((char *)v25 + v34 + *(unsigned int *)((char *)v25 + v34));
          goto LABEL_46;
        }
      }
    }
    v22 = 0;
LABEL_46:
    if (v24 < 0x13)
    {
      v18 = 0;
      v19 = 0;
      LODWORD(v20) = 0;
    }
    else
    {
      v20 = v23[9];
      v18 = 0;
      v19 = 0;
      if (v20)
        LODWORD(v20) = *((unsigned __int8 *)v14 + v20);
    }
    goto LABEL_59;
  }
  v18 = 0;
  v19 = 0;
  LODWORD(v20) = 0;
  v21 = 0;
  v22 = 0;
LABEL_59:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    *__p.__r_.__value_.__l.__data_ = 0;
    __p.__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  }
  v80 = v20;
  v81 = v18;
  *(_WORD *)v90 = v20;
  *(_WORD *)v89 = v18;
  *(_WORD *)v88 = v19;
  v36 = *v21;
  if (!(_DWORD)v36)
    goto LABEL_132;
  v37 = 0;
  v38 = 0;
  v39 = v21 + 1;
  v41 = v22 + 1;
  v40 = *v22;
  v79 = "bitset reset argument out of range";
  do
  {
    v42 = (_DWORD *)((char *)&v39[v37] + v39[v37]);
    v43 = (unsigned __int16 *)((char *)v42 - *v42);
    v44 = *v43;
    if (v44 >= 5 && v43[2] && *((_BYTE *)v42 + v43[2]))
    {
      if (v44 < 9 || (v45 = v43[4]) == 0)
      {
        LOBYTE(v46) = 0;
LABEL_72:
        v38 |= 1 << v46;
        goto LABEL_73;
      }
      v46 = *(int *)((char *)v42 + v45);
      if (v46 <= 0x1E)
        goto LABEL_72;
    }
LABEL_73:
    if ((_DWORD)v40)
    {
      for (i = 0; i != v40; ++i)
      {
        v48 = (int *)((char *)&v41[i] + v41[i]);
        v49 = (unsigned __int16 *)((char *)v48 - *v48);
        if (*v49 >= 9u)
        {
          v50 = v49[4];
          if (v50)
          {
            if (*(_QWORD *)((char *)v48 + v50))
              continue;
          }
        }
        if (i > 0x1E)
LABEL_148:
          std::__throw_out_of_range[abi:ne180100](v79);
        v38 &= ~(1 << i);
      }
    }
    ++v37;
  }
  while (v37 != v36);
  if ((v38 & 0x7FFFFFFF) == 0)
  {
LABEL_132:
    std::string::append(&v83, "No active buffer found ");
    v8 = 0;
    goto LABEL_133;
  }
  v51 = 0;
  *(_DWORD *)__s = 0;
  while (2)
  {
    v52 = (_DWORD *)((char *)&v39[v51] + v39[v51]);
    v53 = (unsigned __int16 *)((char *)v52 - *v52);
    v54 = *v53;
    if (v54 >= 5)
    {
      if (v53[2])
      {
        v55 = *((unsigned __int8 *)v52 + v53[2]);
        if (*((_BYTE *)v52 + v53[2]))
        {
          if (v54 < 9)
          {
            LOBYTE(v56) = 0;
          }
          else
          {
            v56 = v53[4];
            if (v56)
            {
              LODWORD(v56) = *(int *)((char *)v52 + v56);
              if (v56 > 0x1E)
                goto LABEL_102;
            }
          }
          if (((v38 >> v56) & 1) != 0)
          {
            *(_DWORD *)v87 = v55;
            std::string::append(&__p, __s, 4uLL);
            std::string::append(&__p, v87, 4uLL);
            v57 = (unsigned __int16 *)((char *)v52 - *v52);
            if (*v57 < 9u)
            {
              LODWORD(v58) = 0;
            }
            else
            {
              v58 = v57[4];
              if (v58)
                LODWORD(v58) = *(int *)((char *)v52 + v58);
            }
            *(_DWORD *)v86 = v58;
            std::string::append(&__p, v86, 4uLL);
            v59 = (unsigned __int16 *)((char *)v52 - *v52);
            if (*v59 < 7u)
            {
              v60 = 0;
            }
            else
            {
              v60 = v59[3];
              if (v60)
                v60 = *(_QWORD *)((char *)v52 + v60);
            }
            *(_QWORD *)v85 = v60;
            std::string::append(&__p, v85, 8uLL);
            v51 = *(_DWORD *)__s;
            LODWORD(v36) = *v21;
          }
        }
      }
    }
LABEL_102:
    *(_DWORD *)__s = ++v51;
    if (v51 < v36)
      continue;
    break;
  }
  *(_DWORD *)v87 = 0;
  v61 = *v22;
  if (*v22)
  {
    v62 = 0;
    v63 = 0;
    v79 = "bitset test argument out of range";
    do
    {
      v64 = (int *)((char *)&v41[v63] + v41[v63]);
      v65 = (unsigned __int16 *)((char *)v64 - *v64);
      if (*v65 >= 9u)
      {
        v66 = v65[4];
        if (v66)
        {
          if ((int)v63 <= 30)
          {
            v67 = *(_QWORD *)((char *)v64 + v66);
            if (v67)
            {
              if (v63 >= 0x1F)
                goto LABEL_148;
              if (((v38 >> v63) & 1) != 0)
              {
                *(_QWORD *)v85 = v67;
                std::string::append(&__p, v87, 4uLL);
                std::string::append(&__p, v85, 8uLL);
                v68 = (unsigned __int16 *)((char *)v64 - *v64);
                if (*v68 >= 5u && (v69 = v68[2]) != 0)
                  v70 = *((unsigned __int8 *)v64 + v69);
                else
                  v70 = 1;
                *(_DWORD *)v86 = v70;
                std::string::append(&__p, v86, 4uLL);
                v71 = *(_DWORD *)v86 == 4;
                v72 = (unsigned __int16 *)((char *)v64 - *v64);
                if (*v72 >= 7u && (v73 = v72[3]) != 0)
                  v74 = *(_QWORD *)((char *)v64 + v73);
                else
                  v74 = 1;
                *(_QWORD *)__s = v74;
                std::string::append(&__p, __s, 8uLL);
                v62 |= v71;
                v63 = *(_DWORD *)v87;
                v61 = *v22;
              }
            }
          }
        }
      }
      *(_DWORD *)v87 = ++v63;
    }
    while (v63 < v61);
    if (((v80 != 0) & v62) != 0)
      std::string::append(&__p, v90, 2uLL);
  }
  if (v19 | v81)
  {
    std::string::append(&__p, v89, 2uLL);
    std::string::append(&__p, v88, 2uLL);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  *a3 = size;
  v76 = malloc_type_malloc(size, 0x44AD0755uLL);
  *a2 = v76;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  memcpy(v76, p_p, *a3);
  v8 = 1;
LABEL_133:
  if (a4)
  {
    if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!*((_BYTE *)&v83.__r_.__value_.__s + 23))
        goto LABEL_34;
LABEL_7:
      v9 = &v83;
LABEL_11:
      *a4 = strdup((const char *)v9);
      goto LABEL_34;
    }
    if (v83.__r_.__value_.__l.__size_)
    {
LABEL_10:
      v9 = (std::string *)v83.__r_.__value_.__r.__words[0];
      goto LABEL_11;
    }
  }
LABEL_34:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  return v8;
}

void sub_182645114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1826451AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *_getPipelineFrameworkHash(Air::PipelineScript *a1, int a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  int *v5;
  unsigned __int16 *v6;
  unsigned int v7;
  uint64_t v8;
  int *v9;
  unsigned __int8 *result;
  int *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  int *v21;

  v2 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v2 < 9u)
    return 0;
  v3 = v2[4];
  if (!v3)
    return 0;
  switch(*((_BYTE *)a1 + v3))
  {
    case 1:
      v5 = (int *)Air::PipelineScript::pipeline_as_render(a1);
      v6 = (unsigned __int16 *)((char *)v5 - *v5);
      v7 = *v6;
      if (a2 == 1)
      {
        if (v7 >= 9 && (v8 = v6[4]) != 0)
          v9 = (int *)((char *)v5 + v8 + *(unsigned int *)((char *)v5 + v8));
        else
          v9 = 0;
        return getVertexHash(v9);
      }
      if (v7 >= 0xB)
      {
        v19 = v6[5];
        if (v19)
          goto LABEL_29;
      }
      goto LABEL_30;
    case 2:
      Air::PipelineScript::pipeline_as_compute(a1);
      goto LABEL_9;
    case 3:
      v11 = (int *)Air::PipelineScript::pipeline_as_tile_render(a1);
      v12 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v12 >= 7u && (v13 = v12[3]) != 0)
        v14 = (int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
      else
        v14 = 0;
      return getTileHash(v14);
    case 4:
      switch(a2)
      {
        case 2:
          v5 = (int *)Air::PipelineScript::pipeline_as_mesh_render(a1);
          v20 = (unsigned __int16 *)((char *)v5 - *v5);
          if (*v20 >= 0xFu && (v19 = v20[7]) != 0)
LABEL_29:
            v21 = (int *)((char *)v5 + v19 + *(unsigned int *)((char *)v5 + v19));
          else
LABEL_30:
            v21 = 0;
          result = getFragmentHash(v21);
          break;
        case 8:
          Air::PipelineScript::pipeline_as_mesh_render(a1);
LABEL_9:
          result = (unsigned __int8 *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
          break;
        case 7:
          v15 = (int *)Air::PipelineScript::pipeline_as_mesh_render(a1);
          v16 = (unsigned __int16 *)((char *)v15 - *v15);
          if (*v16 >= 0xDu && (v17 = v16[6]) != 0)
            v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
          else
            v18 = 0;
          result = getMeshHash(v18);
          break;
        default:
          return 0;
      }
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t Air::PipelineScript::pipeline_as_compute(Air::PipelineScript *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 2) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::PipelineScript::pipeline_as_render(Air::PipelineScript *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 1) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

unsigned __int8 *getFragmentHash(int *a1)
{
  char v2;
  unsigned __int8 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  _WORD *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  char *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned __int8 *md;

  v2 = 1;
  v3 = (unsigned __int8 *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  md = v3;
  if (*v4 < 0x17u)
  {
    v7 = 0;
LABEL_12:
    v10 = 0;
    goto LABEL_14;
  }
  v5 = v4[11];
  if (!v4[11])
  {
    v7 = 0;
    v10 = 0;
    v2 = 1;
    goto LABEL_14;
  }
  v6 = *(unsigned int *)((char *)a1 + v5);
  v7 = (int *)((char *)a1 + v5 + v6);
  v8 = *v7;
  if (!(_DWORD)v8)
  {
    v2 = 0;
    goto LABEL_12;
  }
  v9 = 0;
  v10 = 0;
  v11 = 4 * v8;
  v12 = (char *)a1 + v5 + v6;
  do
  {
    v13 = *(unsigned int *)&v12[v9 + 4];
    v14 = &v12[v9 + v13 - *(int *)((char *)&v7[v9 / 4 + 1] + v13)];
    if (*((unsigned __int16 *)v14 + 2) >= 5u)
    {
      v15 = *((unsigned __int16 *)v14 + 4);
      if (v15)
      {
        if (*(_WORD *)&v12[v9 + 4 + v13 + v15])
          ++v10;
      }
    }
    v9 += 4;
  }
  while (v11 != v9);
  v2 = 0;
LABEL_14:
  v16 = 2 * v10 + 8;
  v17 = malloc_type_malloc(v16, 0x9CEBF689uLL);
  bzero(v17, v16);
  *v17 = v10;
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 0x1Bu)
  {
    LOWORD(v19) = 0;
  }
  else
  {
    v19 = v18[13];
    if (v18[13])
      LOWORD(v19) = *(_WORD *)((char *)a1 + v19);
  }
  v17[2] = v19;
  if (*v18 < 0x19u)
  {
    LOWORD(v20) = 0;
  }
  else
  {
    v20 = v18[12];
    if (v20)
      LOWORD(v20) = *(_WORD *)((char *)a1 + v20);
  }
  v17[1] = v20;
  if ((v2 & 1) == 0 && *v7)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = v7[v21 + 1];
      v25 = (char *)&v7[v21] + v24;
      v26 = (char *)&v7[v21] + v24 - *((int *)v25 + 1);
      if (*((unsigned __int16 *)v26 + 2) >= 5u)
      {
        v27 = *((unsigned __int16 *)v26 + 4);
        if (v27)
        {
          if (*(_WORD *)((char *)&v7[v21 + 1] + v24 + v27))
          {
            v28 = &v17[v22];
            v30 = v28[4];
            v29 = v28 + 4;
            *v29 = v30 & 0xFFF0 | v23 & 0xF;
            v31 = v24 - *((int *)v25 + 1);
            if (*(unsigned __int16 *)((char *)&v7[v21 + 1] + v31) >= 5u
              && (v32 = *(unsigned __int16 *)((char *)&v7[v21 + 2] + v31)) != 0)
            {
              v33 = *(_WORD *)((char *)&v7[v21 + 1] + v24 + v32);
            }
            else
            {
              v33 = 0;
            }
            *v29 = v23 & 0xF | (16 * v33);
            v34 = v7[v21 + 1];
            v35 = (char *)&v7[v21] + v34 - *(int *)((char *)&v7[v21 + 1] + v34);
            if (*((unsigned __int16 *)v35 + 2) >= 9u)
            {
              v36 = *((unsigned __int16 *)v35 + 6);
              if (v36)
              {
                if (*((_BYTE *)&v7[v21 + 1] + v34 + v36))
                {
                  v37 = v24 - *((int *)v25 + 1);
                  v38 = *(unsigned __int16 *)((char *)&v7[v21 + 1] + v37);
                  if (v38 >= 0x15 && *(_WORD *)((char *)&v7[v21 + 6] + v37))
                    v39 = *((unsigned __int8 *)&v7[v21 + 1] + v24 + *(unsigned __int16 *)((char *)&v7[v21 + 6] + v37));
                  else
                    v39 = 1;
                  if (blendFactorSource(v39) == 2
                    || (v38 < 0x13 || !*(_WORD *)((char *)&v7[v21 + 5] + v37 + 2)
                      ? (v40 = 1)
                      : (v40 = *((unsigned __int8 *)&v7[v21 + 1]
                               + v24
                               + *(unsigned __int16 *)((char *)&v7[v21 + 5] + v37 + 2))),
                        blendFactorSource(v40) == 2
                     || (v38 < 0x11 || !*(_WORD *)((char *)&v7[v21 + 5] + v37)
                       ? (v41 = 0)
                       : (v41 = *((unsigned __int8 *)&v7[v21 + 1]
                                + v24
                                + *(unsigned __int16 *)((char *)&v7[v21 + 5] + v37))),
                         blendFactorSource(v41) == 2
                      || (v38 < 0xF || !*(_WORD *)((char *)&v7[v21 + 4] + v37 + 2)
                        ? (v42 = 0)
                        : (v42 = *((unsigned __int8 *)&v7[v21 + 1]
                                 + v24
                                 + *(unsigned __int16 *)((char *)&v7[v21 + 4] + v37 + 2))),
                          blendFactorSource(v42) == 2))))
                  {
                    v43 = (unsigned __int16)v17[3];
                    v44 = v43 | (1 << v23 << 8);
                    v17[3] = v43 | ((unsigned __int16)(1 << v23) << 8);
                  }
                  else
                  {
                    LOWORD(v44) = v17[3];
                  }
                  if ((unsigned __int16)v44 >= 0x100u)
                  {
                    v45 = v24 - *((int *)v25 + 1);
                    v46 = (char *)&v7[v21] + v45;
                    v47 = *((unsigned __int16 *)v46 + 2);
                    if (v47 >= 0x15 && (v48 = *((unsigned __int16 *)v46 + 12)) != 0)
                      v49 = *((unsigned __int8 *)&v7[v21 + 1] + v24 + v48);
                    else
                      v49 = 1;
                    if (blendFactorSource(v49) == 2
                      || (v47 < 0x13 || !*(_WORD *)((char *)&v7[v21 + 5] + v45 + 2)
                        ? (v50 = 1)
                        : (v50 = *((unsigned __int8 *)&v7[v21 + 1]
                                 + v24
                                 + *(unsigned __int16 *)((char *)&v7[v21 + 5] + v45 + 2))),
                          blendFactorSource(v50) == 2
                       || (v47 < 0x11 || !*(_WORD *)((char *)&v7[v21 + 5] + v45)
                         ? (v51 = 0)
                         : (v51 = *((unsigned __int8 *)&v7[v21 + 1]
                                  + v24
                                  + *(unsigned __int16 *)((char *)&v7[v21 + 5] + v45))),
                           blendFactorSource(v51) == 2
                        || (v47 < 0xF || !*(_WORD *)((char *)&v7[v21 + 4] + v45 + 2)
                          ? (v52 = 0)
                          : (v52 = *((unsigned __int8 *)&v7[v21 + 1]
                                   + v24
                                   + *(unsigned __int16 *)((char *)&v7[v21 + 4] + v45 + 2))),
                            blendFactorSource(v52) == 2))))
                    {
                      v17[3] = v44 | (1 << v23);
                    }
                  }
                }
              }
            }
            ++v22;
          }
        }
      }
      ++v23;
      ++v21;
    }
    while (v23 < *v7);
  }
  CC_SHA256(v17, v16, md);
  free(v17);
  return md;
}

unsigned __int8 *getVertexHash(int *a1)
{
  BOOL v2;
  unsigned __int8 *v3;
  unsigned __int16 *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  __int16 data;

  v2 = 1;
  v3 = (unsigned __int8 *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
  data = 0;
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  v5 = *v4;
  if (v5 <= 8)
  {
    LOBYTE(data) = 1;
  }
  else
  {
    if (v4[4])
      v6 = *((_BYTE *)a1 + v4[4]) != 0;
    else
      v6 = 1;
    LOBYTE(data) = v6;
    v2 = v5 < 0xB || (v7 = v4[5]) == 0 || *((_BYTE *)a1 + v7) == 0;
  }
  HIBYTE(data) = v2;
  CC_SHA256(&data, 2u, v3);
  return v3;
}

const __CFString *MTLFunctionTypeString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return CFSTR("Unknown");
  else
    return (const __CFString *)*((_QWORD *)&off_1E0FE4A78 + a1 - 1);
}

void sub_182645F88(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void PipelineLibraryData::~PipelineLibraryData(id *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  v5 = 0uLL;
  std::shared_ptr<std::unordered_map<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*>>>>::operator=[abi:ne180100]((uint64_t)this, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void MTLPipelineDataCache::~MTLPipelineDataCache(MTLPipelineDataCache *this)
{
  MTLPipelineDataCache::~MTLPipelineDataCache(this);
  JUMPOUT(0x186DABFBCLL);
}

{
  void *v2;
  void **v3;
  void **v4;

  *(_QWORD *)this = &off_1E0FE0868;
  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
    munmap(v2, *((_QWORD *)this + 18));
  free(*((void **)this + 7));
  v3 = (void **)*((_QWORD *)this + 14);
  v4 = (void **)*((_QWORD *)this + 15);
  if (v3 != v4)
  {
    do
    {
      free(v3[2]);
      v3[2] = 0;
      v3 += 3;
    }
    while (v3 != v4);
    v3 = (void **)*((_QWORD *)this + 14);
  }
  if (v3)
  {
    *((_QWORD *)this + 15) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 64);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

uint64_t std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

BOOL MTLFailureTypeGetEnabled(unint64_t a1)
{
  return MTLFailureTypeGetErrorModeType(a1) != 4;
}

uint64_t MTLFailureTypeGetErrorModeType(unint64_t a1)
{
  uint64_t v2;

  if (initFailureModes(void)::pred != -1)
    dispatch_once(&initFailureModes(void)::pred, &__block_literal_global_19);
  if (a1 >= 5)
    MTLFailureTypeGetErrorModeType_cold_1();
  if (a1 == 4)
    v2 = 1;
  else
    v2 = a1;
  return errorModes[v2];
}

void MTLPixelFormatGetInfoForFeatureSetQuery(id *this@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  MTLGPUFamily v6;
  int v7;
  MTLGPUFamily v8;
  int v9;
  MTLGPUFamily v10;
  int v11;
  MTLGPUFamily v12;
  int v13;
  MTLGPUFamily v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  MTLGPUFamily v26;
  int v27;
  MTLGPUFamily v28;
  int v29;
  const char *v30;
  MTLGPUFamily v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  int64x2_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  int v55;
  MTLGPUFamily v56;
  int v57;
  MTLGPUFamily v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  const char *v65;
  MTLGPUFamily v66;
  int v67;
  MTLGPUFamily v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  const char *v82;
  MTLGPUFamily v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  BOOL v95;
  int v96;
  int v97;
  int v98;
  __int128 v99;
  int v100;
  const char *v101;
  const char *v102;
  MTLGPUFamily v103;
  int v104;
  MTLGPUFamily v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  int v118;
  int v119;
  int v120;
  int v121;
  const char *v122;
  int v123;
  int v124;
  BOOL v125;
  uint64_t v126;
  MTLGPUFamily v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  MTLGPUFamily v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  MTLGPUFamily v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  const char *v148;
  MTLGPUFamily v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  BOOL v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  const char *v179;
  int v180;
  int v181;
  int v182;
  int v183;
  __int128 v184;
  int v185;
  int v186;
  int v187;
  const char *v188;
  int v189;
  const char *v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  const char *v214;
  const char *v215;
  const char *v216;
  const char *v217;
  const char *v218;
  const char *v219;
  const char *v220;
  const char *v221;
  const char *v222;
  const char *v223;
  const char *v224;
  const char *v225;
  const char *v226;
  const char *v227;
  const char *v228;
  const char *v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  const char *v246;
  int64x2_t v247;
  MTLGPUFamily v248;
  int v249;
  int v250;
  int v251;
  MTLGPUFamily v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  const char *v260;
  int v261;
  int v262;
  int v263;
  int v264;
  id *v265;
  MTLGPUFamily v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  id *v286;
  MTLGPUFamily v287;
  int v288;
  int v289;
  int v290;
  id *v291;
  MTLGPUFamily v292;
  int v293;
  int v294;
  const char *v295;
  int v296;
  int v297;
  int v298;
  int v299;
  const char *v300;
  int v301;
  id *v302;
  MTLGPUFamily v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  const char *v313;
  const char *v314;
  const char *v315;
  int v316;
  id *v317;
  MTLGPUFamily v318;
  const char *v319;
  const char *v320;
  int v321;
  int v322;
  const char *v323;
  const char *v324;
  const char *v325;
  int v326;
  const char *v327;
  int v328;
  int v329;
  const char *v330;
  int v331;
  int v332;
  int v333;
  id *v334;
  MTLGPUFamily v335;
  int v336;
  id *v337;
  MTLGPUFamily v338;
  int v339;
  int v340;
  id *v341;
  MTLGPUFamily v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  const char *v349;
  const char *v350;
  const char *v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  id *v357;
  MTLGPUFamily v358;
  int v359;
  int v360;
  id *v361;
  MTLGPUFamily v362;
  const char *v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  id *v373;
  MTLGPUFamily v374;
  int v375;
  int v376;
  const char *v377;
  int v378;
  const char *v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int64x2_t v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int64x2_t v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  _BOOL4 v479;
  _BOOL4 v480;
  int v481;
  int v482;
  _BOOL4 v483;
  _BOOL4 v484;
  int v485;
  _BOOL4 v486;
  _BOOL4 v487;
  int v488;
  _BOOL4 v489;
  int v490;
  int v491;
  _BOOL4 v492;
  int v493;
  MTLGPUFamily v494;
  int v495;
  MTLGPUFamily v496;
  _BOOL4 v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  char v622;
  int v623;
  int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int v639;
  int v640;
  int v641;
  int v642;
  int v643;
  int v644;
  int v645;
  int v646;
  int v647;
  int v648;
  int v649;
  int v650;
  int v651;
  unint64_t v652;
  int v653;
  int v654;
  int v655;
  int v656;
  int v657;
  int v658;
  int v659;
  int v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v665;
  int v666;
  int v667;
  int v668;
  int v669;
  int v670;
  int v671;
  int v672;
  int v673;
  int v674;
  int v675;
  int v676;
  int v677;
  int v678;
  int v679;
  int v680;
  int v681;
  int v682;
  int v683;
  int v684;
  int v685;
  int v686;
  int v687;
  int v688;
  int v689;
  int v690;
  int v691;
  int v692;
  int v693;
  int v694;
  int v695;
  int v696;
  int v697;
  int v698;
  int v699;
  int v700;
  int v701;
  int v702;
  int v703;
  MTLGPUFamily v704;
  int v705;
  char v706;
  int v707;
  int v708;
  MTLGPUFamily v709;
  int v710;
  MTLGPUFamily v711;
  int v712;
  int v713;
  int v714;
  int v715;
  int v716;
  int v717;
  unint64_t v718;
  int v719;
  int v720;
  int v721;
  int v722;
  int v723;
  int v724;
  int v725;
  int v726;
  int v727;
  int v728;
  BOOL v729;
  int v730;
  int v731;
  __int32 v732;
  BOOL v733;
  int v734;
  int v735;
  int v736;
  int v737;
  int v738;
  int v739;
  int v740;
  int v741;
  int v742;
  int v743;
  int v744;
  int v745;
  int v746;
  int v747;
  int v748;
  int v749;
  int v750;

  switch(a2)
  {
    case 1:
      a3->i64[0] = (uint64_t)"MTLPixelFormatA8Unorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v6 = MTLGPUFamilyApple3;
      else
        v6 = MTLGPUFamilyMac1;
      v7 = MTLPixelFormatQuery::supportsFamily(this, v6);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v8 = MTLGPUFamilyApple3;
      else
        v8 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v8))
        v9 = 8;
      else
        v9 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v10 = MTLGPUFamilyApple3;
      else
        v10 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v10))
        v11 = 16;
      else
        v11 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v12 = MTLGPUFamilyApple3;
      else
        v12 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v12))
        v13 = 128;
      else
        v13 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v14 = MTLGPUFamilyApple3;
      else
        v14 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v14))
        v15 = 256;
      else
        v15 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v16 = 0x4000000;
      else
        v16 = 0;
      if (v7)
        v17 = -2041;
      else
        v17 = -2043;
      v18 = v17 | v9 | v11 | v13;
      goto LABEL_69;
    case 10:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR8Unorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v19 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v20 = 0x2000000;
      else
        v20 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v21 = 0x4000000;
      else
        v21 = 0;
      if (v19)
        v22 = 16974239;
      else
        v22 = 197023;
      v23 = v22 | v20;
      goto LABEL_2511;
    case 11:
      v24 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatR8Unorm_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v24 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30800;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v25 = 2;
        else
          v25 = 0;
        v741 = v25;
      }
      else
      {
        v741 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v474 = 4;
        else
          v474 = 0;
        v736 = v474;
      }
      else
      {
        v736 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v556 = 8;
        else
          v556 = 0;
      }
      else
      {
        v556 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v594 = 16;
        else
          v594 = 0;
      }
      else
      {
        v594 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v616 = 128;
        else
          v616 = 0;
      }
      else
      {
        v616 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v634 = 256;
        else
          v634 = 0;
      }
      else
      {
        v634 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v649 = 0x1000000;
      else
        v649 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v650 = 0x2000000;
      else
        v650 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v651 = 0x4000000;
      else
        v651 = 0;
      v23 = v24 | v741 | v736 | v556 | v594 | v616 | v634 | v649;
      v21 = v650 | v651;
LABEL_2511:
      v29 = v23 | v21;
      goto LABEL_2512;
    case 12:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR8Snorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v26 = MTLGPUFamilyApple2;
      else
        v26 = MTLGPUFamilyMac1;
      v27 = MTLPixelFormatQuery::supportsFamily(this, v26);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v28 = MTLGPUFamilyApple1;
      else
        v28 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v28))
        v15 = 256;
      else
        v15 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v16 = 0x4000000;
      else
        v16 = 0;
      if (v27)
        v18 = -1889;
      else
        v18 = -2017;
LABEL_69:
      v29 = (v18 | v15) + v16 + 198656;
      goto LABEL_2512;
    case 13:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR8Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v29 = 69730579;
      else
        v29 = 2621715;
      goto LABEL_2512;
    case 14:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR8Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v29 = 68419859;
      else
        v29 = 1310995;
LABEL_2512:
      a3->i32[2] = v29;
      v652 = 1;
      goto LABEL_2522;
    case 20:
      v30 = "MTLPixelFormatR16Unorm";
      goto LABEL_78;
    case 22:
      v30 = "MTLPixelFormatR16Snorm";
LABEL_78:
      a3->i64[0] = (uint64_t)v30;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v31 = MTLGPUFamilyApple4;
      else
        v31 = MTLGPUFamilyMac1;
      v32 = MTLPixelFormatQuery::supportsFamily(this, v31);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v33 = 0x1000000;
      else
        v33 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v34 = 0x2000000;
      else
        v34 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v35 = 0x4000000;
      else
        v35 = 0;
      if (v32)
        v36 = -1633;
      else
        v36 = -1761;
      v37 = v36 + v33 + 198656;
      v38 = v34 | v35;
      goto LABEL_120;
    case 23:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR16Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v39 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v40 = 0x2000000;
      else
        v40 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v38 = 0x4000000;
      else
        v38 = 0;
      if (v39)
        v41 = 19398931;
      else
        v41 = 2621715;
      goto LABEL_119;
    case 24:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR16Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v42 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v40 = 0x2000000;
      else
        v40 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v38 = 0x4000000;
      else
        v38 = 0;
      v43 = v42 == 0;
      v41 = 1310995;
      v44 = 18088211;
      goto LABEL_117;
    case 25:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR16Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v45 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v40 = 0x2000000;
      else
        v40 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v38 = 0x4000000;
      else
        v38 = 0;
      v41 = 197023;
      v43 = v45 == 0;
      v44 = 16974239;
LABEL_117:
      if (!v43)
        v41 = v44;
LABEL_119:
      v37 = v41 | v40;
LABEL_120:
      v46 = v37 | v38;
      goto LABEL_121;
    case 26:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR16Bfloat";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v48 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8) | 0x30000;
      else
        v48 = 196608;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
          v475 = 2;
        else
          v475 = 0;
      }
      else
      {
        v475 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
          v557 = 16;
        else
          v557 = 0;
      }
      else
      {
        v557 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v46 = v48 | v475 | v557;
LABEL_121:
      a3->i32[2] = v46;
      v47 = vdupq_n_s64(2uLL);
      goto LABEL_2827;
    case 30:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG8Unorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v49 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v50 = 0x4000000;
      else
        v50 = 0;
      v51 = 197023;
      v52 = v49 == 0;
      v53 = 16974239;
      goto LABEL_164;
    case 31:
      v54 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG8Unorm_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v54 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30800;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v55 = 2;
        else
          v55 = 0;
        v742 = v55;
      }
      else
      {
        v742 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v476 = 4;
        else
          v476 = 0;
      }
      else
      {
        v476 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v558 = 8;
        else
          v558 = 0;
      }
      else
      {
        v558 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v595 = 16;
        else
          v595 = 0;
      }
      else
      {
        v595 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v617 = 128;
        else
          v617 = 0;
      }
      else
      {
        v617 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v635 = 256;
        else
          v635 = 0;
      }
      else
      {
        v635 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v653 = 0x1000000;
      else
        v653 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v50 = 0x4000000;
      else
        v50 = 0;
      v51 = v54 | v742 | v476 | v558 | v595 | v617 | v635 | v653;
      goto LABEL_2521;
    case 32:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG8Snorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v56 = MTLGPUFamilyApple2;
      else
        v56 = MTLGPUFamilyMac1;
      v57 = MTLPixelFormatQuery::supportsFamily(this, v56);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v58 = MTLGPUFamilyApple1;
      else
        v58 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v58))
        v59 = 256;
      else
        v59 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v60 = 0x1000000;
      else
        v60 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v50 = 0x4000000;
      else
        v50 = 0;
      if (v57)
        v61 = -1889;
      else
        v61 = -2017;
      v51 = (v61 | v59) + v60 + 198656;
      goto LABEL_2521;
    case 33:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG8Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v62 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v50 = 0x4000000;
      else
        v50 = 0;
      if (v62)
        v51 = 19398931;
      else
        v51 = 2621715;
      goto LABEL_2521;
    case 34:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG8Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v63 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v50 = 0x4000000;
      else
        v50 = 0;
      v52 = v63 == 0;
      v51 = 1310995;
      v53 = 18088211;
LABEL_164:
      if (!v52)
        v51 = v53;
LABEL_2521:
      a3->i32[2] = v51 | v50;
      v652 = 2;
LABEL_2522:
      a3[1] = vdupq_n_s64(v652);
      a3[2].i8[0] = v652;
      goto LABEL_2885;
    case 40:
      a3->i64[0] = (uint64_t)"MTLPixelFormatB5G6R5Unorm";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v64 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30000;
      else
        v64 = 196608;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v477 = 4;
        else
          v477 = 0;
      }
      else
      {
        v477 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v559 = 8;
        else
          v559 = 0;
      }
      else
      {
        v559 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v596 = 16;
        else
          v596 = 0;
      }
      else
      {
        v596 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v618 = 128;
        else
          v618 = 0;
      }
      else
      {
        v618 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v636 = 256;
        else
          v636 = 0;
      }
      else
      {
        v636 = 0;
      }
      a3->i32[2] = v64 | v477 | v559 | v596 | v618 | v636;
      v434 = vdupq_n_s64(2uLL);
      goto LABEL_2369;
    case 41:
      v65 = "MTLPixelFormatA1BGR5Unorm";
      goto LABEL_189;
    case 42:
      v65 = "MTLPixelFormatABGR4Unorm";
      goto LABEL_189;
    case 43:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGR5A1Unorm";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v66 = MTLGPUFamilyApple1;
      else
        v66 = MTLGPUFamilyMac1;
      v67 = MTLPixelFormatQuery::supportsFamily(this, v66);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v68 = MTLGPUFamilyApple1;
      else
        v68 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v68))
        v69 = 4;
      else
        v69 = 0;
      v70 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v70 = 8;
        else
          v70 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v71 = 16;
        else
          v71 = 0;
      }
      else
      {
        v71 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v478 = 128;
        else
          v478 = 0;
      }
      else
      {
        v478 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v560 = 256;
        else
          v560 = 0;
      }
      else
      {
        v560 = 0;
      }
      v78 = v69 | v67 | v70 | v71 | v478 | v560 | 0x30000;
      goto LABEL_2233;
    case 44:
      v65 = "MTLPixelFormatBGRA4Unorm";
LABEL_189:
      a3->i64[0] = (uint64_t)v65;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v72 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30000;
      else
        v72 = 196608;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v73 = 4;
        else
          v73 = 0;
      }
      else
      {
        v73 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v74 = 8;
        else
          v74 = 0;
      }
      else
      {
        v74 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v75 = 16;
        else
          v75 = 0;
      }
      else
      {
        v75 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v76 = 128;
        else
          v76 = 0;
      }
      else
      {
        v76 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v77 = 256;
        else
          v77 = 0;
      }
      else
      {
        v77 = 0;
      }
      v78 = v72 | v73 | v74 | v75 | v76 | v77;
LABEL_2233:
      a3->i32[2] = v78;
      v424 = vdupq_n_s64(2uLL);
      goto LABEL_2883;
    case 53:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR32Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v79 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1637;
      }
      if (*this)
      {
        v79 = objc_msgSend(*this, "isMsaa32bSupported");
LABEL_1637:
        v479 = v79;
        goto LABEL_2629;
      }
      v479 = this[1] == (id)-1;
LABEL_2629:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v688 = 0x4000000;
      else
        v688 = 0;
      v689 = 524307;
      goto LABEL_2638;
    case 54:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR32Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v80 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1639;
      }
      if (*this)
      {
        v80 = objc_msgSend(*this, "isMsaa32bSupported");
LABEL_1639:
        v479 = v80;
        goto LABEL_2634;
      }
      v479 = this[1] == (id)-1;
LABEL_2634:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v688 = 0x4000000;
      else
        v688 = 0;
      v689 = 262163;
LABEL_2638:
      if (v479)
        v689 |= 0x100u;
      v690 = v689 | v688;
      goto LABEL_2826;
    case 55:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR32Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v81 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1641;
      }
      if (*this)
      {
        v81 = objc_msgSend(*this, "isFloat32FilteringSupported");
LABEL_1641:
        v480 = v81;
        goto LABEL_2642;
      }
      v480 = this[1] == (id)-1;
LABEL_2642:
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v691 = objc_msgSend(*this, "isMsaa32bSupported");
        else
          v691 = this[1] == (id)-1;
      }
      else
      {
        v691 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v691)
        v719 = 128;
      else
        v719 = 0;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v720 = 0x4000000;
      else
        v720 = 0;
      if (v480)
        v721 = -1761;
      else
        v721 = -1765;
      v690 = (v721 | v719) + v720 + 198656;
LABEL_2826:
      a3->i32[2] = v690;
      v47 = (int64x2_t)xmmword_18280A360;
      goto LABEL_2827;
    case 60:
      v82 = "MTLPixelFormatRG16Unorm";
      goto LABEL_229;
    case 62:
      v82 = "MTLPixelFormatRG16Snorm";
LABEL_229:
      a3->i64[0] = (uint64_t)v82;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v83 = MTLGPUFamilyApple4;
      else
        v83 = MTLGPUFamilyMac1;
      v84 = MTLPixelFormatQuery::supportsFamily(this, v83);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v85 = 0x1000000;
      else
        v85 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v86 = 0x2000000;
      else
        v86 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v87 = 0x4000000;
      else
        v87 = 0;
      if (v84)
        v88 = -1633;
      else
        v88 = -1761;
      v89 = v88 + v85 + 198656;
      v90 = v86 | v87;
      goto LABEL_271;
    case 63:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG16Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v91 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v92 = 0x2000000;
      else
        v92 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v90 = 0x4000000;
      else
        v90 = 0;
      if (v91)
        v93 = 19398931;
      else
        v93 = 2621715;
      goto LABEL_270;
    case 64:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG16Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v94 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v92 = 0x2000000;
      else
        v92 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v90 = 0x4000000;
      else
        v90 = 0;
      v95 = v94 == 0;
      v93 = 1310995;
      v96 = 18088211;
      goto LABEL_268;
    case 65:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG16Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v97 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v92 = 0x2000000;
      else
        v92 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v90 = 0x4000000;
      else
        v90 = 0;
      v93 = 197023;
      v95 = v97 == 0;
      v96 = 16974239;
LABEL_268:
      if (!v95)
        v93 = v96;
LABEL_270:
      v89 = v93 | v92;
LABEL_271:
      v98 = v89 | v90;
      goto LABEL_272;
    case 66:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG16Bfloat";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v100 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8) | 0x30000;
      else
        v100 = 196608;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
          v481 = 2;
        else
          v481 = 0;
      }
      else
      {
        v481 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
          v561 = 16;
        else
          v561 = 0;
      }
      else
      {
        v561 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v98 = v100 | v481 | v561;
LABEL_272:
      a3->i32[2] = v98;
      v99 = xmmword_18280A360;
      goto LABEL_2864;
    case 70:
      v101 = "MTLPixelFormatRGBA8Unorm";
      goto LABEL_316;
    case 71:
      v102 = "MTLPixelFormatRGBA8Unorm_sRGB";
      goto LABEL_327;
    case 72:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA8Snorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v103 = MTLGPUFamilyApple2;
      else
        v103 = MTLGPUFamilyMac1;
      v104 = MTLPixelFormatQuery::supportsFamily(this, v103);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v105 = MTLGPUFamilyApple1;
      else
        v105 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v105))
        v106 = 256;
      else
        v106 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v107 = 0x1000000;
      else
        v107 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v108 = 0x2000000;
      else
        v108 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v109 = 0x4000000;
      else
        v109 = 0;
      if (v104)
        v110 = -1889;
      else
        v110 = -2017;
      v111 = (v110 | v106) + v107 + 198656;
      v112 = v108 | v109;
      goto LABEL_1388;
    case 73:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA8Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v113 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v114 = 0x2000000;
      else
        v114 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v112 = 0x4000000;
      else
        v112 = 0;
      if (v113)
        v115 = 19398931;
      else
        v115 = 2621715;
      goto LABEL_325;
    case 74:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA8Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v116 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v114 = 0x2000000;
      else
        v114 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v112 = 0x4000000;
      else
        v112 = 0;
      v117 = v116 == 0;
      v115 = 1310995;
      v118 = 18088211;
      goto LABEL_323;
    case 80:
      v101 = "MTLPixelFormatBGRA8Unorm";
LABEL_316:
      a3->i64[0] = (uint64_t)v101;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v119 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v114 = 0x2000000;
      else
        v114 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v112 = 0x4000000;
      else
        v112 = 0;
      v115 = 197023;
      v117 = v119 == 0;
      v118 = 16974239;
LABEL_323:
      if (!v117)
        v115 = v118;
LABEL_325:
      v111 = v115 | v114;
      goto LABEL_1388;
    case 81:
      v102 = "MTLPixelFormatBGRA8Unorm_sRGB";
LABEL_327:
      a3->i64[0] = (uint64_t)v102;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v120 = 415;
        else
          v120 = 413;
        v121 = v120 + 198656;
      }
      else
      {
        v121 = 199069;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v411 = 0x1000000;
      else
        v411 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v142 = 0x2000000;
      else
        v142 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v143 = 0x4000000;
      else
        v143 = 0;
      v111 = v121 | v411;
      goto LABEL_1276;
    case 84:
      v122 = "MTLPixelFormatARGB8Unorm";
      goto LABEL_659;
    case 85:
      a3->i64[0] = (uint64_t)"MTLPixelFormatARGB8Unorm_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v123 = 415;
        else
          v123 = 413;
        v124 = v123 + 198656;
      }
      else
      {
        v124 = 199069;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      goto LABEL_1744;
    case 90:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A2Unorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v125 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) == 0;
      v126 = 2001;
      goto LABEL_371;
    case 91:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A2Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v127 = MTLGPUFamilyApple3;
      else
        v127 = MTLGPUFamilyMac1;
      v128 = MTLPixelFormatQuery::supportsFamily(this, v127);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v129 = 0x1000000;
      else
        v129 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v130 = 0x2000000;
      else
        v130 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v131 = 0x4000000;
      else
        v131 = 0;
      if (v128)
        v111 = 2621715;
      else
        v111 = 2621713;
      v132 = v129 | v130;
      goto LABEL_1387;
    case 92:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG11B10Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v133 = MTLGPUFamilyApple3;
      else
        v133 = MTLGPUFamilyMac1;
      v134 = MTLPixelFormatQuery::supportsFamily(this, v133);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (v134)
        v135 = -1633;
      else
        v135 = -1635;
      v136 = v135 + 198656;
      goto LABEL_2356;
    case 93:
      v137 = 229381;
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB9E5Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v137 = 229383;
        else
          v137 = 229381;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v138 = 8;
        else
          v138 = 0;
      }
      else
      {
        v138 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v482 = 16;
        else
          v482 = 0;
      }
      else
      {
        v482 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v562 = 128;
        else
          v562 = 0;
      }
      else
      {
        v562 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
          v597 = 256;
        else
          v597 = 0;
      }
      else
      {
        v597 = 0;
      }
      v136 = v137 | v138 | v482 | v562 | v597;
LABEL_2356:
      a3->i32[2] = v136;
      v434 = (int64x2_t)xmmword_18280A360;
      goto LABEL_2369;
    case 94:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGR10A2Unorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v125 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) == 0;
      v126 = 2002;
LABEL_371:
      if (v125)
        v139 = v126;
      else
        v139 = MTLGPUFamilyApple3;
      v140 = MTLPixelFormatQuery::supportsFamily(this, v139);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v141 = 0x1000000;
      else
        v141 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v142 = 0x2000000;
      else
        v142 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v143 = 0x4000000;
      else
        v143 = 0;
      if (v140)
        v144 = -1633;
      else
        v144 = -1635;
      v111 = v144 + v141 + 198656;
LABEL_1276:
      v112 = v142 | v143;
      goto LABEL_1388;
    case 103:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG32Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v145 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1655;
      }
      if (*this)
      {
        v145 = objc_msgSend(*this, "isMsaa32bSupported");
LABEL_1655:
        v483 = v145;
        goto LABEL_2647;
      }
      v483 = this[1] == (id)-1;
LABEL_2647:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v692 = 0x4000000;
      else
        v692 = 0;
      v693 = 537395219;
      goto LABEL_2656;
    case 104:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG32Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v146 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1657;
      }
      if (*this)
      {
        v146 = objc_msgSend(*this, "isMsaa32bSupported");
LABEL_1657:
        v483 = v146;
        goto LABEL_2652;
      }
      v483 = this[1] == (id)-1;
LABEL_2652:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v692 = 0x4000000;
      else
        v692 = 0;
      v693 = 262163;
LABEL_2656:
      if (v483)
        v693 |= 0x100u;
      goto LABEL_2863;
    case 105:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG32Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v147 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1659;
      }
      if (*this)
      {
        v147 = objc_msgSend(*this, "isFloat32FilteringSupported");
LABEL_1659:
        v484 = v147;
        goto LABEL_2660;
      }
      v484 = this[1] == (id)-1;
LABEL_2660:
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v694 = objc_msgSend(*this, "isMsaa32bSupported");
        else
          v694 = this[1] == (id)-1;
      }
      else
      {
        v694 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v694)
        v722 = 128;
      else
        v722 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v723 = objc_msgSend(*this, "isMsaa32bSupported");
        else
          v723 = this[1] == (id)-1;
      }
      else
      {
        v723 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v723)
        v727 = 256;
      else
        v727 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v692 = 0x4000000;
      else
        v692 = 0;
      if (v484)
        v728 = -2017;
      else
        v728 = -2021;
      v693 = (v728 + 198656) | v722 | v727;
LABEL_2863:
      a3->i32[2] = v693 | v692;
      v99 = xmmword_18280A350;
      goto LABEL_2864;
    case 110:
      v148 = "MTLPixelFormatRGBA16Unorm";
      goto LABEL_398;
    case 112:
      v148 = "MTLPixelFormatRGBA16Snorm";
LABEL_398:
      a3->i64[0] = (uint64_t)v148;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v149 = MTLGPUFamilyApple4;
      else
        v149 = MTLGPUFamilyMac1;
      v150 = MTLPixelFormatQuery::supportsFamily(this, v149);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v151 = 0x1000000;
      else
        v151 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v152 = 0x2000000;
      else
        v152 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v153 = 0x4000000;
      else
        v153 = 0;
      if (v150)
        v154 = -1633;
      else
        v154 = -1761;
      v155 = v154 + v151 + 198656;
      v156 = v152 | v153;
      goto LABEL_440;
    case 113:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA16Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v157 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v158 = 0x2000000;
      else
        v158 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v156 = 0x4000000;
      else
        v156 = 0;
      if (v157)
        v159 = 19398931;
      else
        v159 = 2621715;
      goto LABEL_439;
    case 114:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA16Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v160 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v158 = 0x2000000;
      else
        v158 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v156 = 0x4000000;
      else
        v156 = 0;
      v161 = v160 == 0;
      v159 = 1310995;
      v162 = 18088211;
      goto LABEL_437;
    case 115:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA16Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v163 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v158 = 0x2000000;
      else
        v158 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v156 = 0x4000000;
      else
        v156 = 0;
      v159 = 197023;
      v161 = v163 == 0;
      v162 = 16974239;
LABEL_437:
      if (!v161)
        v159 = v162;
LABEL_439:
      v155 = v159 | v158;
LABEL_440:
      v164 = v155 | v156;
      goto LABEL_2243;
    case 116:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA16Bfloat";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v165 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8) | 0x30000;
      else
        v165 = 196608;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
          v485 = 2;
        else
          v485 = 0;
      }
      else
      {
        v485 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
          v563 = 16;
        else
          v563 = 0;
      }
      else
      {
        v563 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v164 = v165 | v485 | v563;
      goto LABEL_2243;
    case 123:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA32Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v166 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1666;
      }
      if (*this)
      {
        v166 = objc_msgSend(*this, "isMsaa32bSupported");
LABEL_1666:
        v486 = v166;
        goto LABEL_2665;
      }
      v486 = this[1] == (id)-1;
LABEL_2665:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v695 = 0x4000000;
      else
        v695 = 0;
      v696 = 524307;
      goto LABEL_2674;
    case 124:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA32Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v167 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1668;
      }
      if (*this)
      {
        v167 = objc_msgSend(*this, "isMsaa32bSupported");
LABEL_1668:
        v486 = v167;
        goto LABEL_2670;
      }
      v486 = this[1] == (id)-1;
LABEL_2670:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v695 = 0x4000000;
      else
        v695 = 0;
      v696 = 262163;
LABEL_2674:
      if (v486)
        v696 |= 0x100u;
      goto LABEL_2881;
    case 125:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA32Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v168 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1670;
      }
      if (*this)
      {
        v168 = objc_msgSend(*this, "isFloat32FilteringSupported");
LABEL_1670:
        v487 = v168;
        goto LABEL_2678;
      }
      v487 = this[1] == (id)-1;
LABEL_2678:
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v697 = objc_msgSend(*this, "isMsaa32bSupported");
        else
          v697 = this[1] == (id)-1;
      }
      else
      {
        v697 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v697)
        v716 = 128;
      else
        v716 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v724 = objc_msgSend(*this, "isMsaa32bSupported");
        else
          v724 = this[1] == (id)-1;
      }
      else
      {
        v724 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v724)
        v725 = 256;
      else
        v725 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v695 = 0x4000000;
      else
        v695 = 0;
      v729 = !v487;
      v730 = -2021;
      v731 = -2017;
      goto LABEL_2878;
    case 130:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC1_RGBA";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v169 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v169 = this[1] == (id)-1;
      }
      else
      {
        v169 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      v698 = v169 | 0x430404;
      goto LABEL_2686;
    case 131:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC1_RGBA_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v170 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v170 = this[1] == (id)-1;
      }
      else
      {
        v170 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      v698 = v170 | 0x430C04;
LABEL_2686:
      a3->i32[2] = v698;
      v184 = xmmword_18280A340;
      goto LABEL_2769;
    case 132:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC2_RGBA";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v171 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v171 = this[1] == (id)-1;
      }
      else
      {
        v171 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      v699 = v171 | 0x430404;
      goto LABEL_2691;
    case 133:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC2_RGBA_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v172 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v172 = this[1] == (id)-1;
      }
      else
      {
        v172 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      v699 = v172 | 0x430C04;
LABEL_2691:
      a3->i32[2] = v699;
      v184 = xmmword_18280A330;
      goto LABEL_2769;
    case 134:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC3_RGBA";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v173 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v173 = this[1] == (id)-1;
      }
      else
      {
        v173 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      v700 = v173 | 0x430404;
      goto LABEL_2696;
    case 135:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC3_RGBA_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v174 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v174 = this[1] == (id)-1;
      }
      else
      {
        v174 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      v700 = v174 | 0x430C04;
LABEL_2696:
      a3->i32[2] = v700;
      v184 = xmmword_18280A320;
      goto LABEL_2769;
    case 140:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC4_RUnorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v175 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v175 = this[1] == (id)-1;
      }
      else
      {
        v175 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      v701 = v175 | 0x430404;
      goto LABEL_2701;
    case 141:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC4_RSnorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v176 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v176 = this[1] == (id)-1;
      }
      else
      {
        v176 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      v701 = v176 | 0x430C04;
LABEL_2701:
      a3->i32[2] = v701;
      v184 = xmmword_18280A310;
      goto LABEL_2769;
    case 142:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC5_RGUnorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v177 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v177 = this[1] == (id)-1;
      }
      else
      {
        v177 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      v702 = v177 | 0x430404;
      goto LABEL_2706;
    case 143:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC5_RGSnorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v178 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v178 = this[1] == (id)-1;
      }
      else
      {
        v178 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      v702 = v178 | 0x430C04;
LABEL_2706:
      a3->i32[2] = v702;
      v184 = xmmword_18280A300;
      goto LABEL_2769;
    case 150:
      v179 = "MTLPixelFormatBC6H_RGBFloat";
      goto LABEL_484;
    case 151:
      v179 = "MTLPixelFormatBC6H_RGBUfloat";
LABEL_484:
      a3->i64[0] = (uint64_t)v179;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v180 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v180 = this[1] == (id)-1;
      }
      else
      {
        v180 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      a3->i32[2] = v180 | 0x430404;
      v184 = xmmword_18280A2F0;
      goto LABEL_2769;
    case 152:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC7_RGBAUnorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v181 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v181 = this[1] == (id)-1;
      }
      else
      {
        v181 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      v703 = v181 | 0x430404;
      goto LABEL_2711;
    case 153:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC7_RGBAUnorm_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v182 = objc_msgSend(*this, "supportsBCTextureCompression");
        else
          v182 = this[1] == (id)-1;
      }
      else
      {
        v182 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      v703 = v182 | 0x430C04;
LABEL_2711:
      a3->i32[2] = v703;
      v184 = xmmword_18280A2E0;
      goto LABEL_2769;
    case 160:
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGB_2BPP";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v183 = 205828;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_494;
      goto LABEL_495;
    case 161:
      v183 = 207876;
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGB_2BPP_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_495;
LABEL_494:
      v183 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
LABEL_495:
      a3->i32[2] = v183;
      v184 = xmmword_18280A2D0;
      goto LABEL_2787;
    case 162:
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGB_4BPP";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v185 = 205828;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_499;
      goto LABEL_500;
    case 163:
      v185 = 207876;
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGB_4BPP_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_500;
LABEL_499:
      v185 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
LABEL_500:
      a3->i32[2] = v185;
      v184 = xmmword_18280A2C0;
      goto LABEL_2769;
    case 164:
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGBA_2BPP";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v186 = 205828;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_504;
      goto LABEL_505;
    case 165:
      v186 = 207876;
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGBA_2BPP_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_505;
LABEL_504:
      v186 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
LABEL_505:
      a3->i32[2] = v186;
      v184 = xmmword_18280A2B0;
      goto LABEL_2787;
    case 166:
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGBA_4BPP";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v187 = 205828;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_509;
      goto LABEL_510;
    case 167:
      v187 = 207876;
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGBA_4BPP_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_510;
LABEL_509:
      v187 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
LABEL_510:
      a3->i32[2] = v187;
      v184 = xmmword_18280A2A0;
      goto LABEL_2769;
    case 170:
      v188 = "MTLPixelFormatEAC_R11Unorm";
      goto LABEL_515;
    case 172:
      v188 = "MTLPixelFormatEAC_R11Snorm";
LABEL_515:
      a3->i64[0] = (uint64_t)v188;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v189 = 197636;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v189 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30404;
      a3->i32[2] = v189;
      v184 = xmmword_18280A290;
      goto LABEL_2769;
    case 174:
      v190 = "MTLPixelFormatEAC_RG11Unorm";
      goto LABEL_520;
    case 176:
      v190 = "MTLPixelFormatEAC_RG11Snorm";
LABEL_520:
      a3->i64[0] = (uint64_t)v190;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v191 = 197636;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v191 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30404;
      a3->i32[2] = v191;
      v184 = xmmword_18280A280;
      goto LABEL_2769;
    case 178:
      a3->i64[0] = (uint64_t)"MTLPixelFormatEAC_RGBA8";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v192 = 197636;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v192 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30404;
      a3->i32[2] = v192;
      goto LABEL_1685;
    case 179:
      a3->i64[0] = (uint64_t)"MTLPixelFormatEAC_RGBA8_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v193 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30C04;
      else
        v193 = 199684;
      a3->i32[2] = v193;
LABEL_1685:
      v184 = xmmword_18280A270;
      goto LABEL_2769;
    case 180:
      a3->i64[0] = (uint64_t)"MTLPixelFormatETC2_RGB8";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v194 = 197636;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v194 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30404;
      a3->i32[2] = v194;
      goto LABEL_1688;
    case 181:
      a3->i64[0] = (uint64_t)"MTLPixelFormatETC2_RGB8_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v195 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30C04;
      else
        v195 = 199684;
      a3->i32[2] = v195;
LABEL_1688:
      v184 = xmmword_18280A260;
      goto LABEL_2769;
    case 182:
      a3->i64[0] = (uint64_t)"MTLPixelFormatETC2_RGB8A1";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v196 = 197636;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v196 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30404;
      a3->i32[2] = v196;
      goto LABEL_1691;
    case 183:
      a3->i64[0] = (uint64_t)"MTLPixelFormatETC2_RGB8A1_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v197 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30C04;
      else
        v197 = 199684;
      a3->i32[2] = v197;
LABEL_1691:
      v184 = xmmword_18280A250;
      goto LABEL_2769;
    case 185:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_4x2_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v198 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v198 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v198 = this[1] == (id)-1;
      }
      v672 = v198 | 0x31C04;
      goto LABEL_2765;
    case 186:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_4x4_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v199 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v199 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v199 = this[1] == (id)-1;
      }
      v673 = v199 | 0x31C04;
      goto LABEL_2768;
    case 187:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_5x4_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v200 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v200 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v200 = this[1] == (id)-1;
      }
      v674 = v200 | 0x31C04;
      goto LABEL_2774;
    case 188:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_5x5_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v201 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v201 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v201 = this[1] == (id)-1;
      }
      v675 = v201 | 0x31C04;
      goto LABEL_2777;
    case 189:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_6x5_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v202 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v202 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v202 = this[1] == (id)-1;
      }
      v676 = v202 | 0x31C04;
      goto LABEL_2780;
    case 190:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_6x6_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v203 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v203 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v203 = this[1] == (id)-1;
      }
      v677 = v203 | 0x31C04;
      goto LABEL_2783;
    case 191:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_8x4_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v204 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v204 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v204 = this[1] == (id)-1;
      }
      v678 = v204 | 0x31C04;
      goto LABEL_2786;
    case 192:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_8x5_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v205 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v205 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v205 = this[1] == (id)-1;
      }
      v679 = v205 | 0x31C04;
      goto LABEL_2790;
    case 193:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_8x6_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v206 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v206 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v206 = this[1] == (id)-1;
      }
      v680 = v206 | 0x31C04;
      goto LABEL_2793;
    case 194:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_8x8_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v207 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v207 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v207 = this[1] == (id)-1;
      }
      v681 = v207 | 0x31C04;
      goto LABEL_2796;
    case 195:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_10x5_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v208 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v208 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v208 = this[1] == (id)-1;
      }
      v682 = v208 | 0x31C04;
      goto LABEL_2799;
    case 196:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_10x6_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v209 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v209 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v209 = this[1] == (id)-1;
      }
      v683 = v209 | 0x31C04;
      goto LABEL_2802;
    case 197:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_10x8_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v210 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v210 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v210 = this[1] == (id)-1;
      }
      v684 = v210 | 0x31C04;
      goto LABEL_2805;
    case 198:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_10x10_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v211 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v211 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v211 = this[1] == (id)-1;
      }
      v685 = v211 | 0x31C04;
      goto LABEL_2808;
    case 199:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_12x10_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v212 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v212 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v212 = this[1] == (id)-1;
      }
      v686 = v212 | 0x31C04;
      goto LABEL_2811;
    case 200:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_12x12_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v213 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v213 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v213 = this[1] == (id)-1;
      }
      v687 = v213 | 0x31C04;
      goto LABEL_2814;
    case 203:
      v214 = "MTLPixelFormatASTC_4x2_LDR";
      goto LABEL_587;
    case 204:
      v215 = "MTLPixelFormatASTC_4x4_LDR";
      goto LABEL_590;
    case 205:
      v216 = "MTLPixelFormatASTC_5x4_LDR";
      goto LABEL_593;
    case 206:
      v217 = "MTLPixelFormatASTC_5x5_LDR";
      goto LABEL_596;
    case 207:
      v218 = "MTLPixelFormatASTC_6x5_LDR";
      goto LABEL_599;
    case 208:
      v219 = "MTLPixelFormatASTC_6x6_LDR";
      goto LABEL_602;
    case 209:
      v220 = "MTLPixelFormatASTC_8x4_LDR";
      goto LABEL_605;
    case 210:
      v221 = "MTLPixelFormatASTC_8x5_LDR";
      goto LABEL_608;
    case 211:
      v222 = "MTLPixelFormatASTC_8x6_LDR";
      goto LABEL_611;
    case 212:
      v223 = "MTLPixelFormatASTC_8x8_LDR";
      goto LABEL_614;
    case 213:
      v224 = "MTLPixelFormatASTC_10x5_LDR";
      goto LABEL_617;
    case 214:
      v225 = "MTLPixelFormatASTC_10x6_LDR";
      goto LABEL_620;
    case 215:
      v226 = "MTLPixelFormatASTC_10x8_LDR";
      goto LABEL_623;
    case 216:
      v227 = "MTLPixelFormatASTC_10x10_LDR";
      goto LABEL_626;
    case 217:
      v228 = "MTLPixelFormatASTC_12x10_LDR";
      goto LABEL_629;
    case 218:
      v229 = "MTLPixelFormatASTC_12x12_LDR";
      goto LABEL_632;
    case 221:
      v214 = "MTLPixelFormatASTC_4x2_HDR";
LABEL_587:
      a3->i64[0] = (uint64_t)v214;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v230 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v230 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v230 = this[1] == (id)-1;
      }
      v672 = v230 | 0x31404;
LABEL_2765:
      a3->i32[2] = v672;
      v184 = xmmword_18280A230;
      v247 = (int64x2_t)xmmword_18280A240;
      goto LABEL_2771;
    case 222:
      v215 = "MTLPixelFormatASTC_4x4_HDR";
LABEL_590:
      a3->i64[0] = (uint64_t)v215;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v231 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v231 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v231 = this[1] == (id)-1;
      }
      v673 = v231 | 0x31404;
LABEL_2768:
      a3->i32[2] = v673;
      v184 = xmmword_18280A220;
LABEL_2769:
      v718 = 4;
      goto LABEL_2770;
    case 223:
      v216 = "MTLPixelFormatASTC_5x4_HDR";
LABEL_593:
      a3->i64[0] = (uint64_t)v216;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v232 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v232 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v232 = this[1] == (id)-1;
      }
      v674 = v232 | 0x31404;
LABEL_2774:
      a3->i32[2] = v674;
      v184 = xmmword_18280A200;
      v247 = (int64x2_t)xmmword_18280A210;
      goto LABEL_2771;
    case 224:
      v217 = "MTLPixelFormatASTC_5x5_HDR";
LABEL_596:
      a3->i64[0] = (uint64_t)v217;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v233 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v233 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v233 = this[1] == (id)-1;
      }
      v675 = v233 | 0x31404;
LABEL_2777:
      a3->i32[2] = v675;
      v184 = xmmword_18280A1F0;
      v718 = 5;
      goto LABEL_2770;
    case 225:
      v218 = "MTLPixelFormatASTC_6x5_HDR";
LABEL_599:
      a3->i64[0] = (uint64_t)v218;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v234 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v234 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v234 = this[1] == (id)-1;
      }
      v676 = v234 | 0x31404;
LABEL_2780:
      a3->i32[2] = v676;
      v184 = xmmword_18280A1D0;
      v247 = (int64x2_t)xmmword_18280A1E0;
      goto LABEL_2771;
    case 226:
      v219 = "MTLPixelFormatASTC_6x6_HDR";
LABEL_602:
      a3->i64[0] = (uint64_t)v219;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v235 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v235 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v235 = this[1] == (id)-1;
      }
      v677 = v235 | 0x31404;
LABEL_2783:
      a3->i32[2] = v677;
      v184 = xmmword_18280A1C0;
      v718 = 6;
      goto LABEL_2770;
    case 227:
      v220 = "MTLPixelFormatASTC_8x4_HDR";
LABEL_605:
      a3->i64[0] = (uint64_t)v220;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v236 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v236 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v236 = this[1] == (id)-1;
      }
      v678 = v236 | 0x31404;
LABEL_2786:
      a3->i32[2] = v678;
      v184 = xmmword_18280A1A0;
LABEL_2787:
      v247 = (int64x2_t)xmmword_18280A1B0;
      goto LABEL_2771;
    case 228:
      v221 = "MTLPixelFormatASTC_8x5_HDR";
LABEL_608:
      a3->i64[0] = (uint64_t)v221;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v237 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v237 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v237 = this[1] == (id)-1;
      }
      v679 = v237 | 0x31404;
LABEL_2790:
      a3->i32[2] = v679;
      v184 = xmmword_18280A180;
      v247 = (int64x2_t)xmmword_18280A190;
      goto LABEL_2771;
    case 229:
      v222 = "MTLPixelFormatASTC_8x6_HDR";
LABEL_611:
      a3->i64[0] = (uint64_t)v222;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v238 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v238 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v238 = this[1] == (id)-1;
      }
      v680 = v238 | 0x31404;
LABEL_2793:
      a3->i32[2] = v680;
      v184 = xmmword_18280A160;
      v247 = (int64x2_t)xmmword_18280A170;
      goto LABEL_2771;
    case 230:
      v223 = "MTLPixelFormatASTC_8x8_HDR";
LABEL_614:
      a3->i64[0] = (uint64_t)v223;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v239 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v239 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v239 = this[1] == (id)-1;
      }
      v681 = v239 | 0x31404;
LABEL_2796:
      a3->i32[2] = v681;
      v184 = xmmword_18280A150;
      v718 = 8;
      goto LABEL_2770;
    case 231:
      v224 = "MTLPixelFormatASTC_10x5_HDR";
LABEL_617:
      a3->i64[0] = (uint64_t)v224;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v240 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v240 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v240 = this[1] == (id)-1;
      }
      v682 = v240 | 0x31404;
LABEL_2799:
      a3->i32[2] = v682;
      v184 = xmmword_18280A130;
      v247 = (int64x2_t)xmmword_18280A140;
      goto LABEL_2771;
    case 232:
      v225 = "MTLPixelFormatASTC_10x6_HDR";
LABEL_620:
      a3->i64[0] = (uint64_t)v225;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v241 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v241 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v241 = this[1] == (id)-1;
      }
      v683 = v241 | 0x31404;
LABEL_2802:
      a3->i32[2] = v683;
      v184 = xmmword_18280A110;
      v247 = (int64x2_t)xmmword_18280A120;
      goto LABEL_2771;
    case 233:
      v226 = "MTLPixelFormatASTC_10x8_HDR";
LABEL_623:
      a3->i64[0] = (uint64_t)v226;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v242 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v242 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v242 = this[1] == (id)-1;
      }
      v684 = v242 | 0x31404;
LABEL_2805:
      a3->i32[2] = v684;
      v184 = xmmword_18280A0F0;
      v247 = (int64x2_t)xmmword_18280A100;
      goto LABEL_2771;
    case 234:
      v227 = "MTLPixelFormatASTC_10x10_HDR";
LABEL_626:
      a3->i64[0] = (uint64_t)v227;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v243 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v243 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v243 = this[1] == (id)-1;
      }
      v685 = v243 | 0x31404;
LABEL_2808:
      a3->i32[2] = v685;
      v184 = xmmword_18280A0E0;
      v718 = 10;
      goto LABEL_2770;
    case 235:
      v228 = "MTLPixelFormatASTC_12x10_HDR";
LABEL_629:
      a3->i64[0] = (uint64_t)v228;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v244 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v244 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v244 = this[1] == (id)-1;
      }
      v686 = v244 | 0x31404;
LABEL_2811:
      a3->i32[2] = v686;
      v184 = xmmword_18280A0C0;
      v247 = (int64x2_t)xmmword_18280A0D0;
      goto LABEL_2771;
    case 236:
      v229 = "MTLPixelFormatASTC_12x12_HDR";
LABEL_632:
      a3->i64[0] = (uint64_t)v229;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v245 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        v245 = objc_msgSend(*this, "supportsASTCTextureCompression");
      }
      else
      {
        v245 = this[1] == (id)-1;
      }
      v687 = v245 | 0x31404;
LABEL_2814:
      a3->i32[2] = v687;
      v184 = xmmword_18280A0B0;
      v718 = 12;
LABEL_2770:
      v247 = vdupq_n_s64(v718);
      goto LABEL_2771;
    case 240:
      v246 = "MTLPixelFormatGBGR422";
      goto LABEL_636;
    case 241:
      v246 = "MTLPixelFormatBGRG422";
LABEL_636:
      a3->i64[0] = (uint64_t)v246;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      a3->i32[2] = 214021;
      v184 = xmmword_182809F70;
      v247 = (int64x2_t)xmmword_1827FE3E0;
LABEL_2771:
      a3[1] = (int64x2_t)v184;
      a3[2] = v247;
      a3[3].i64[0] = 1;
      goto LABEL_2885;
    case 250:
      a3->i64[0] = (uint64_t)"MTLPixelFormatDepth16Unorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v248 = MTLGPUFamilyApple3;
      else
        v248 = MTLGPUFamilyMac1;
      v249 = MTLPixelFormatQuery::supportsFamily(this, v248);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if ((MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) & 1) != 0)
      {
        v250 = 0;
      }
      else if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1))
      {
        v250 = 512;
      }
      else
      {
        v250 = 0;
      }
      if (v249)
        v488 = -1627;
      else
        v488 = -1755;
      v461 = v488 + 198656;
      goto LABEL_1731;
    case 252:
      a3->i64[0] = (uint64_t)"MTLPixelFormatDepth32Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v251 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1733;
      }
      if (*this)
      {
        v251 = objc_msgSend(*this, "isFloat32FilteringSupported");
LABEL_1733:
        v489 = v251;
        goto LABEL_2713;
      }
      v489 = this[1] == (id)-1;
LABEL_2713:
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v704 = MTLGPUFamilyApple3;
      else
        v704 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v704))
        v705 = 128;
      else
        v705 = 0;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v706 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v707 = 0;
      if ((v706 & 1) == 0)
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1))
          v707 = 512;
        else
          v707 = 0;
      }
      if (v489)
        v708 = -1755;
      else
        v708 = -1759;
      a3->i32[2] = (v708 + 198656) | v707 | v705;
      v47 = (int64x2_t)xmmword_182809F70;
LABEL_2827:
      a3[1] = v47;
      v622 = 1;
      goto LABEL_2884;
    case 253:
      a3->i64[0] = (uint64_t)"MTLPixelFormatStencil8";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v252 = MTLGPUFamilyApple3;
      else
        v252 = MTLGPUFamilyMac2;
      v253 = MTLPixelFormatQuery::supportsFamily(this, v252);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if ((MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) & 1) != 0)
      {
        v254 = 0;
      }
      else if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1))
      {
        v254 = 512;
      }
      else
      {
        v254 = 0;
      }
      if (v253)
        v490 = 174;
      else
        v490 = 46;
      v491 = v490 + 2621715;
      goto LABEL_2483;
    case 260:
      a3->i64[0] = (uint64_t)"MTLPixelFormatDepth32Float_Stencil8";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v255 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1742;
      }
      if (*this)
      {
        v255 = objc_msgSend(*this, "isFloat32FilteringSupported");
LABEL_1742:
        v492 = v255;
        goto LABEL_2728;
      }
      v492 = this[1] == (id)-1;
LABEL_2728:
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v709 = MTLGPUFamilyApple3;
      else
        v709 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v709))
        v710 = 128;
      else
        v710 = 0;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v711 = MTLGPUFamilyApple1;
      else
        v711 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v711))
        v712 = 512;
      else
        v712 = 0;
      if (v492)
        v713 = -1691;
      else
        v713 = -1695;
      a3->i32[2] = (v713 | v710 | v712) + 8587264;
      v99 = xmmword_18280A0A0;
LABEL_2864:
      a3[1] = (int64x2_t)v99;
      v622 = 2;
      goto LABEL_2884;
    case 261:
      v256 = 11010369;
      a3->i64[0] = (uint64_t)"MTLPixelFormatX32_Stencil8";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if ((MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) & 1) == 0)
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1))
          v256 = 11010881;
        else
          v256 = 11010369;
      }
      a3->i32[2] = v256;
      v47 = (int64x2_t)xmmword_18280A090;
      goto LABEL_2827;
    case 300:
      v122 = "MTLPixelFormatRGBX8Unorm";
LABEL_659:
      a3->i64[0] = (uint64_t)v122;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v257 = 197023;
      goto LABEL_1389;
    case 301:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX8Unorm_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v258 = 399;
        else
          v258 = 397;
        v124 = v258 + 198656;
      }
      else
      {
        v124 = 199053;
      }
LABEL_1744:
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      a3->i32[2] = v124;
      goto LABEL_1390;
    case 302:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX8Snorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if ((MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) & 1) != 0)
      {
        v259 = 196623;
      }
      else
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1))
          v493 = -2017;
        else
          v493 = -2033;
        v259 = v493 + 198656;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v494 = MTLGPUFamilyApple2;
      else
        v494 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v494))
        v495 = 128;
      else
        v495 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v496 = MTLGPUFamilyApple1;
      else
        v496 = MTLGPUFamilyMac1;
      if (MTLPixelFormatQuery::supportsFamily(this, v496))
        v112 = 256;
      else
        v112 = 0;
      v111 = v259 | v495;
      goto LABEL_1388;
    case 303:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX8Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v257 = 2621699;
      goto LABEL_1389;
    case 304:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX8Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v257 = 1310979;
      goto LABEL_1389;
    case 313:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX16Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v164 = 2621699;
      goto LABEL_2243;
    case 314:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX16Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v164 = 1310979;
      goto LABEL_2243;
    case 315:
      v260 = "MTLPixelFormatRGBX16Float";
      goto LABEL_830;
    case 323:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX32Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v261 = objc_msgSend(*this, "isMsaa32bSupported");
        else
          v261 = this[1] == (id)-1;
      }
      else
      {
        v261 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v261)
        v714 = 524547;
      else
        v714 = 524291;
      goto LABEL_2882;
    case 324:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX32Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v262 = objc_msgSend(*this, "isMsaa32bSupported");
        else
          v262 = this[1] == (id)-1;
      }
      else
      {
        v262 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v262)
        v715 = 240;
      else
        v715 = -16;
      v714 = v715 + 262163;
      goto LABEL_2882;
    case 325:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX32Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v263 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1765;
      }
      if (*this)
      {
        v263 = objc_msgSend(*this, "isFloat32FilteringSupported");
LABEL_1765:
        v497 = v263;
        goto LABEL_2754;
      }
      v497 = this[1] == (id)-1;
LABEL_2754:
      if ((MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) & 1) != 0)
      {
        v716 = 0;
      }
      else if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1))
      {
        v716 = 8;
      }
      else
      {
        v716 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v717 = objc_msgSend(*this, "isMsaa32bSupported");
        else
          v717 = this[1] == (id)-1;
      }
      else
      {
        v717 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v717)
        v725 = 128;
      else
        v725 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this)
          v726 = objc_msgSend(*this, "isMsaa32bSupported");
        else
          v726 = this[1] == (id)-1;
      }
      else
      {
        v726 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v726)
        v695 = 256;
      else
        v695 = 0;
      v729 = !v497;
      v730 = -2029;
      v731 = -2025;
LABEL_2878:
      if (!v729)
        v730 = v731;
      v696 = (v730 + 198656) | v716 | v725;
LABEL_2881:
      v714 = v696 | v695;
LABEL_2882:
      a3->i32[2] = v714;
      v424 = (int64x2_t)xmmword_18280A370;
LABEL_2883:
      a3[1] = v424;
      v622 = 4;
LABEL_2884:
      a3[2].i8[0] = v622;
LABEL_2885:
      v732 = a3->i32[2];
      if (*this)
        v733 = (a3->i32[2] & 1) == 0;
      else
        v733 = 1;
      if (v733)
      {
        a3->i32[2] = v732 & 0xFFFFFC01;
        if ((v732 & 0x400) == 0)
        {
          a3[2].i8[1] = 0;
          a3[2].i64[1] = 0;
          a3[3].i64[0] = 0;
          if ((v732 & 1) != 0)
            return;
          goto LABEL_2896;
        }
        if ((v732 & 1) == 0)
        {
LABEL_2896:
          bzero(a3, 0x38uLL);
          a3->i64[0] = (uint64_t)"MTLPixelFormatInvalid";
        }
      }
      else
      {
        if ((v732 & 0x400) == 0)
        {
          v734 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
          v735 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4);
          adjustPixelFormatForiOSDevice(a2, (uint64_t)a3, &a3[2].u64[1], a3[3].i64, &a3[2].i8[1], v734, v735);
          v732 = a3->i32[2];
        }
        if ((v732 & 1) == 0)
          goto LABEL_2896;
      }
      return;
    case 500:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_420_2P";
      v264 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v264 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x830000;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1345;
      v265 = this;
      v266 = MTLGPUFamilyApple1;
      goto LABEL_741;
    case 501:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_422_1P";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v267 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30000;
      else
        v267 = 196608;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1772;
      v286 = this;
      v287 = MTLGPUFamilyApple1;
      goto LABEL_1769;
    case 502:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_422_2P";
      v268 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_688;
      goto LABEL_689;
    case 503:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_444_2P";
      v270 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_694;
      goto LABEL_695;
    case 504:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_1P";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v272 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30000;
      else
        v272 = 196608;
      goto LABEL_1785;
    case 505:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_420_2P";
      v273 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_702;
      goto LABEL_703;
    case 506:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_422_2P";
      v275 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_708;
      goto LABEL_709;
    case 507:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_2P";
      v277 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_714;
      goto LABEL_715;
    case 508:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_420_2P_PACKED";
      v279 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_720;
      goto LABEL_721;
    case 509:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_422_2P_PACKED";
      v281 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_726;
      goto LABEL_727;
    case 510:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_2P_PACKED";
      v283 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v283 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3) | 0x830000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4))
          v284 = 2;
        else
          v284 = 0;
      }
      else
      {
        v284 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v508 = 4;
        else
          v508 = 0;
      }
      else
      {
        v508 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v564 = 16;
        else
          v564 = 0;
      }
      else
      {
        v564 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v598 = 0x1000000;
      else
        v598 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v599 = 0x2000000;
      else
        v599 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v600 = 0x4000000;
      else
        v600 = 0;
      v568 = v283 | v284 | v508 | v564 | v598;
      v569 = v599 | v600;
      goto LABEL_2255;
    case 520:
      v264 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_420_2P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v264 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x830800;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v265 = this;
        v266 = MTLGPUFamilyApple2;
LABEL_741:
        if (MTLPixelFormatQuery::supportsFamily(v265, v266))
          v285 = 4;
        else
          v285 = 0;
      }
      else
      {
LABEL_1345:
        v285 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v419 = 8;
        else
          v419 = 0;
      }
      else
      {
        v419 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v438 = 16;
        else
          v438 = 0;
      }
      else
      {
        v438 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v455 = 0x1000000;
      else
        v455 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v456 = 0x2000000;
      else
        v456 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v457 = 0x4000000;
      else
        v457 = 0;
      a3->i32[2] = v264 | v285 | v419 | v438 | v455 | v456 | v457;
      v434 = (int64x2_t)xmmword_18280A080;
      goto LABEL_2369;
    case 521:
      v267 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_422_1P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v267 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30800;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v286 = this;
        v287 = MTLGPUFamilyApple2;
LABEL_1769:
        if (MTLPixelFormatQuery::supportsFamily(v286, v287))
          v498 = 4;
        else
          v498 = 0;
      }
      else
      {
LABEL_1772:
        v498 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v499 = 8;
        else
          v499 = 0;
      }
      else
      {
        v499 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v500 = 16;
        else
          v500 = 0;
      }
      else
      {
        v500 = 0;
      }
      a3->i32[2] = v267 | v498 | v499 | v500;
      v434 = (int64x2_t)xmmword_18280A070;
      goto LABEL_2369;
    case 522:
      v268 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_422_2P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
LABEL_688:
        v268 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
LABEL_689:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v269 = 4;
        else
          v269 = 0;
      }
      else
      {
        v269 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v412 = 8;
        else
          v412 = 0;
      }
      else
      {
        v412 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v426 = 16;
        else
          v426 = 0;
      }
      else
      {
        v426 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v444 = 0x1000000;
      else
        v444 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v445 = 0x2000000;
      else
        v445 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v446 = 0x4000000;
      else
        v446 = 0;
      a3->i32[2] = v268 | v269 | v412 | v426 | v444 | v445 | v446;
      v434 = (int64x2_t)xmmword_18280A060;
      goto LABEL_2369;
    case 523:
      v270 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_444_2P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
LABEL_694:
        v270 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
LABEL_695:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4))
          v271 = 2;
        else
          v271 = 0;
      }
      else
      {
        v271 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v413 = 4;
        else
          v413 = 0;
      }
      else
      {
        v413 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v427 = 8;
        else
          v427 = 0;
      }
      else
      {
        v427 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v447 = 16;
        else
          v447 = 0;
      }
      else
      {
        v447 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v463 = 0x1000000;
      else
        v463 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v464 = 0x2000000;
      else
        v464 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v465 = 0x4000000;
      else
        v465 = 0;
      a3->i32[2] = v270 | v271 | v413 | v427 | v447 | v463 | v464 | v465;
      v434 = (int64x2_t)xmmword_18280A050;
      goto LABEL_2369;
    case 524:
      v272 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_1P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v272 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30800;
LABEL_1785:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4))
          v501 = 2;
        else
          v501 = 0;
      }
      else
      {
        v501 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v502 = 4;
        else
          v502 = 0;
      }
      else
      {
        v502 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v503 = 8;
        else
          v503 = 0;
      }
      else
      {
        v503 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v504 = 16;
        else
          v504 = 0;
      }
      else
      {
        v504 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v505 = 0x1000000;
      else
        v505 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v506 = 0x2000000;
      else
        v506 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v507 = 0x4000000;
      else
        v507 = 0;
      a3->i32[2] = v272 | v501 | v502 | v503 | v504 | v505 | v506 | v507;
      v434 = (int64x2_t)xmmword_18280A040;
      goto LABEL_2369;
    case 525:
      v273 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_420_2P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
LABEL_702:
        v273 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
LABEL_703:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v274 = 4;
        else
          v274 = 0;
      }
      else
      {
        v274 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v414 = 8;
        else
          v414 = 0;
      }
      else
      {
        v414 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v428 = 16;
        else
          v428 = 0;
      }
      else
      {
        v428 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v448 = 0x1000000;
      else
        v448 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v449 = 0x2000000;
      else
        v449 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v450 = 0x4000000;
      else
        v450 = 0;
      a3->i32[2] = v273 | v274 | v414 | v428 | v448 | v449 | v450;
      v434 = (int64x2_t)xmmword_18280A030;
      goto LABEL_2369;
    case 526:
      v275 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_422_2P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
LABEL_708:
        v275 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
LABEL_709:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v276 = 4;
        else
          v276 = 0;
      }
      else
      {
        v276 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v415 = 8;
        else
          v415 = 0;
      }
      else
      {
        v415 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v429 = 16;
        else
          v429 = 0;
      }
      else
      {
        v429 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v451 = 0x1000000;
      else
        v451 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v452 = 0x2000000;
      else
        v452 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v453 = 0x4000000;
      else
        v453 = 0;
      a3->i32[2] = v275 | v276 | v415 | v429 | v451 | v452 | v453;
      v434 = (int64x2_t)xmmword_18280A020;
      goto LABEL_2369;
    case 527:
      v277 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_2P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
LABEL_714:
        v277 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
LABEL_715:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4))
          v278 = 2;
        else
          v278 = 0;
      }
      else
      {
        v278 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v416 = 4;
        else
          v416 = 0;
      }
      else
      {
        v416 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v430 = 8;
        else
          v430 = 0;
      }
      else
      {
        v430 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v454 = 16;
        else
          v454 = 0;
      }
      else
      {
        v454 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v466 = 0x1000000;
      else
        v466 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v467 = 0x2000000;
      else
        v467 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v468 = 0x4000000;
      else
        v468 = 0;
      a3->i32[2] = v277 | v278 | v416 | v430 | v454 | v466 | v467 | v468;
      v434 = (int64x2_t)xmmword_18280A010;
      goto LABEL_2369;
    case 528:
      v279 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_420_2P_PACKED_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
LABEL_720:
        v279 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3);
LABEL_721:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v280 = 4;
        else
          v280 = 0;
      }
      else
      {
        v280 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v417 = 16;
        else
          v417 = 0;
      }
      else
      {
        v417 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v431 = 0x1000000;
      else
        v431 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v432 = 0x2000000;
      else
        v432 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v433 = 0x4000000;
      else
        v433 = 0;
      a3->i32[2] = v279 | v280 | v417 | v431 | v432 | v433;
      v434 = (int64x2_t)xmmword_18280A000;
      goto LABEL_2369;
    case 529:
      v281 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_422_2P_PACKED_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
LABEL_726:
        v281 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3);
LABEL_727:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v282 = 4;
        else
          v282 = 0;
      }
      else
      {
        v282 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v418 = 16;
        else
          v418 = 0;
      }
      else
      {
        v418 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v435 = 0x1000000;
      else
        v435 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v436 = 0x2000000;
      else
        v436 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v437 = 0x4000000;
      else
        v437 = 0;
      a3->i32[2] = v281 | v282 | v418 | v435 | v436 | v437;
      v434 = (int64x2_t)xmmword_182809FF0;
      goto LABEL_2369;
    case 530:
      v288 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_2P_PACKED_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v288 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3) | 0x830800;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v289 = 4;
        else
          v289 = 0;
      }
      else
      {
        v289 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v509 = 16;
        else
          v509 = 0;
      }
      else
      {
        v509 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v565 = 0x1000000;
      else
        v565 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v566 = 0x2000000;
      else
        v566 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v567 = 0x4000000;
      else
        v567 = 0;
      v568 = v288 | v289 | v509 | v565;
      v569 = v566 | v567;
LABEL_2255:
      a3->i32[2] = v568 | v569;
      v434 = (int64x2_t)xmmword_182809FE0;
      goto LABEL_2369;
    case 540:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB8_420_2P";
      v290 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v290 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x830000;
      goto LABEL_1865;
    case 541:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB8_422_2P";
      v290 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v290 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x830000;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1870;
      v291 = this;
      v292 = MTLGPUFamilyApple2;
      goto LABEL_1867;
    case 542:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB8_444_2P";
      v293 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v293 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x830000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4))
          v294 = 2;
        else
          v294 = 0;
      }
      else
      {
        v294 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v510 = 4;
        else
          v510 = 0;
      }
      else
      {
        v510 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v570 = 8;
        else
          v570 = 0;
      }
      else
      {
        v570 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v601 = 16;
        else
          v601 = 0;
      }
      else
      {
        v601 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v619 = 0x1000000;
      else
        v619 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v620 = 0x2000000;
      else
        v620 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v621 = 0x4000000;
      else
        v621 = 0;
      v353 = v293 | v294 | v510 | v570 | v601 | v619;
      v354 = v620 | v621;
      goto LABEL_2368;
    case 543:
      v295 = "MTLPixelFormatRGB10_420_2P";
      goto LABEL_784;
    case 544:
      v295 = "MTLPixelFormatRGB10_422_2P";
LABEL_784:
      a3->i64[0] = (uint64_t)v295;
      v296 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v296 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x830000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v297 = 4;
        else
          v297 = 0;
      }
      else
      {
        v297 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v336 = 8;
        else
          v336 = 0;
      }
      else
      {
        v336 = 0;
      }
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1451;
      v337 = this;
      v338 = MTLGPUFamilyApple3;
      goto LABEL_969;
    case 545:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10_444_2P";
      v298 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v298 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x830000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4))
          v299 = 2;
        else
          v299 = 0;
      }
      else
      {
        v299 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v339 = 4;
        else
          v339 = 0;
      }
      else
      {
        v339 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v340 = 8;
        else
          v340 = 0;
      }
      else
      {
        v340 = 0;
      }
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_2264;
      v341 = this;
      v342 = MTLGPUFamilyApple3;
      goto LABEL_949;
    case 546:
      v300 = "MTLPixelFormatRGB10_420_2P_PACKED";
      goto LABEL_799;
    case 547:
      v300 = "MTLPixelFormatRGB10_422_2P_PACKED";
      goto LABEL_799;
    case 548:
      v300 = "MTLPixelFormatRGB10_444_2P_PACKED";
LABEL_799:
      a3->i64[0] = (uint64_t)v300;
      v301 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v301 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3) | 0x830000;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_850;
      v302 = this;
      v303 = MTLGPUFamilyApple3;
      goto LABEL_847;
    case 550:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A8_2P_XR10";
      v304 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_804;
      goto LABEL_805;
    case 551:
      v304 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A8_2P_XR10_sRGB";
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_805;
LABEL_804:
      v304 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3);
LABEL_805:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v305 = 2;
        else
          v305 = 0;
      }
      else
      {
        v305 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v368 = 4;
        else
          v368 = 0;
      }
      else
      {
        v368 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v369 = 8;
        else
          v369 = 0;
      }
      else
      {
        v369 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v370 = 16;
        else
          v370 = 0;
      }
      else
      {
        v370 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v371 = 0x1000000;
      else
        v371 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v372 = 0x2000000;
      else
        v372 = 0;
      v373 = this;
      v374 = MTLGPUFamilyApple8;
      goto LABEL_1583;
    case 552:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10_XR";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v306 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30000;
      else
        v306 = 196608;
      v748 = v306;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v511 = 2;
        else
          v511 = 0;
        v737 = v511;
      }
      else
      {
        v737 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v571 = 4;
        else
          v571 = 0;
      }
      else
      {
        v571 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v603 = 8;
        else
          v603 = 0;
      }
      else
      {
        v603 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v623 = 16;
        else
          v623 = 0;
      }
      else
      {
        v623 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v637 = 128;
        else
          v637 = 0;
      }
      else
      {
        v637 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v654 = 256;
        else
          v654 = 0;
      }
      else
      {
        v654 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v665 = 0x1000000;
      else
        v665 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v666 = 0x2000000;
      else
        v666 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v667 = 0x4000000;
      else
        v667 = 0;
      v402 = v748 | v737 | v571 | v603 | v623 | v637 | v654 | v665;
      v401 = v666 | v667;
      goto LABEL_2593;
    case 553:
      v307 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10_XR_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v307 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30800;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v308 = 2;
        else
          v308 = 0;
        v743 = v308;
      }
      else
      {
        v743 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v512 = 4;
        else
          v512 = 0;
        v738 = v512;
      }
      else
      {
        v738 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v572 = 8;
        else
          v572 = 0;
      }
      else
      {
        v572 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v604 = 16;
        else
          v604 = 0;
      }
      else
      {
        v604 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v624 = 128;
        else
          v624 = 0;
      }
      else
      {
        v624 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v638 = 256;
        else
          v638 = 0;
      }
      else
      {
        v638 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v655 = 0x1000000;
      else
        v655 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v656 = 0x2000000;
      else
        v656 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v657 = 0x4000000;
      else
        v657 = 0;
      v402 = v307 | v743 | v738 | v572 | v604 | v624 | v638 | v655;
      v401 = v656 | v657;
      goto LABEL_2593;
    case 554:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGR10_XR";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v309 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30000;
      else
        v309 = 196608;
      v749 = v309;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v513 = 2;
        else
          v513 = 0;
        v739 = v513;
      }
      else
      {
        v739 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v573 = 4;
        else
          v573 = 0;
      }
      else
      {
        v573 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v605 = 8;
        else
          v605 = 0;
      }
      else
      {
        v605 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v625 = 16;
        else
          v625 = 0;
      }
      else
      {
        v625 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v639 = 128;
        else
          v639 = 0;
      }
      else
      {
        v639 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v658 = 256;
        else
          v658 = 0;
      }
      else
      {
        v658 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v668 = 0x1000000;
      else
        v668 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v669 = 0x2000000;
      else
        v669 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v670 = 0x4000000;
      else
        v670 = 0;
      v662 = v749 | v739 | v573 | v605 | v625 | v639 | v658 | v668;
      v663 = v669 | v670;
      goto LABEL_2584;
    case 555:
      v310 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGR10_XR_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v310 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30800;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v311 = 2;
        else
          v311 = 0;
        v744 = v311;
      }
      else
      {
        v744 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v514 = 4;
        else
          v514 = 0;
        v740 = v514;
      }
      else
      {
        v740 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v574 = 8;
        else
          v574 = 0;
      }
      else
      {
        v574 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v606 = 16;
        else
          v606 = 0;
      }
      else
      {
        v606 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v626 = 128;
        else
          v626 = 0;
      }
      else
      {
        v626 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2))
          v640 = 256;
        else
          v640 = 0;
      }
      else
      {
        v640 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v659 = 0x1000000;
      else
        v659 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v660 = 0x2000000;
      else
        v660 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v661 = 0x4000000;
      else
        v661 = 0;
      v662 = v310 | v744 | v740 | v574 | v606 | v626 | v640 | v659;
      v663 = v660 | v661;
LABEL_2584:
      a3->i32[2] = v662 | v663;
      v434 = (int64x2_t)xmmword_182809FD0;
      goto LABEL_2369;
    case 556:
      v260 = "MTLPixelFormatRGBA16Float_XR";
LABEL_830:
      a3->i64[0] = (uint64_t)v260;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      v164 = 197023;
LABEL_2243:
      a3->i32[2] = v164;
      v424 = (int64x2_t)xmmword_18280A350;
      goto LABEL_2883;
    case 560:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCRA8_444_1P";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v312 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4) | 0x30000;
      else
        v312 = 196608;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4))
          v515 = 2;
        else
          v515 = 0;
      }
      else
      {
        v515 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4))
          v575 = 4;
        else
          v575 = 0;
      }
      else
      {
        v575 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4))
          v607 = 8;
        else
          v607 = 0;
      }
      else
      {
        v607 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4))
          v627 = 16;
        else
          v627 = 0;
      }
      else
      {
        v627 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v641 = 0x1000000;
      else
        v641 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v642 = 0x2000000;
      else
        v642 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v643 = 0x4000000;
      else
        v643 = 0;
      a3->i32[2] = v312 | v515 | v575 | v607 | v627 | v641 | v642 | v643;
      v424 = (int64x2_t)xmmword_182809F70;
      goto LABEL_2883;
    case 562:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_422_1P_REV";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v290 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30000;
      else
        v290 = 196608;
LABEL_1865:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v291 = this;
        v292 = MTLGPUFamilyApple1;
LABEL_1867:
        if (MTLPixelFormatQuery::supportsFamily(v291, v292))
          v516 = 4;
        else
          v516 = 0;
      }
      else
      {
LABEL_1870:
        v516 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v517 = 8;
        else
          v517 = 0;
      }
      else
      {
        v517 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v518 = 16;
        else
          v518 = 0;
      }
      else
      {
        v518 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v519 = 0x1000000;
      else
        v519 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v520 = 0x2000000;
      else
        v520 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v521 = 0x4000000;
      else
        v521 = 0;
      v353 = v290 | v516 | v517 | v518 | v519;
      v354 = v520 | v521;
      goto LABEL_2368;
    case 563:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_1P_PQ";
      v298 = 134414336;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_932;
      goto LABEL_931;
    case 564:
      v313 = "MTLPixelFormatYCBCR10_420_2P_PQ";
      goto LABEL_858;
    case 565:
      v313 = "MTLPixelFormatYCBCR10_422_2P_PQ";
      goto LABEL_858;
    case 566:
      v314 = "MTLPixelFormatYCBCR10_444_2P_PQ";
      goto LABEL_861;
    case 567:
      v315 = "MTLPixelFormatYCBCR10_420_2P_PACKED_PQ";
      goto LABEL_843;
    case 568:
      v315 = "MTLPixelFormatYCBCR10_422_2P_PACKED_PQ";
      goto LABEL_843;
    case 569:
      v315 = "MTLPixelFormatYCBCR10_444_2P_PACKED_PQ";
LABEL_843:
      a3->i64[0] = (uint64_t)v315;
      v301 = 142802944;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v301 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x8830000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v302 = this;
        v303 = MTLGPUFamilyApple6;
LABEL_847:
        if (MTLPixelFormatQuery::supportsFamily(v302, v303))
          v316 = 4;
        else
          v316 = 0;
      }
      else
      {
LABEL_850:
        v316 = 0;
      }
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_905;
      v317 = this;
      v318 = MTLGPUFamilyApple7;
      goto LABEL_902;
    case 570:
      v319 = "MTLPixelFormatYCBCR12_420_2P";
      goto LABEL_915;
    case 571:
      v319 = "MTLPixelFormatYCBCR12_422_2P";
      goto LABEL_915;
    case 572:
      v320 = "MTLPixelFormatYCBCR12_444_2P";
      goto LABEL_930;
    case 573:
      v313 = "MTLPixelFormatYCBCR12_420_2P_PQ";
      goto LABEL_858;
    case 574:
      v313 = "MTLPixelFormatYCBCR12_422_2P_PQ";
LABEL_858:
      a3->i64[0] = (uint64_t)v313;
      v296 = 142802944;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_917;
      goto LABEL_916;
    case 575:
      v314 = "MTLPixelFormatYCBCR12_444_2P_PQ";
LABEL_861:
      a3->i64[0] = (uint64_t)v314;
      v298 = 142802944;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_932;
      goto LABEL_931;
    case 576:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR10Unorm_X6";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v321 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5) | 0x30000;
      else
        v321 = 196608;
      goto LABEL_1892;
    case 577:
      v321 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatR10Unorm_X6_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v321 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5) | 0x30800;
LABEL_1892:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5))
          v522 = 2;
        else
          v522 = 0;
      }
      else
      {
        v522 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5))
          v523 = 4;
        else
          v523 = 0;
      }
      else
      {
        v523 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5))
          v524 = 8;
        else
          v524 = 0;
      }
      else
      {
        v524 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5))
          v525 = 16;
        else
          v525 = 0;
      }
      else
      {
        v525 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v526 = 0x1000000;
      else
        v526 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v527 = 0x2000000;
      else
        v527 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v528 = 0x4000000;
      else
        v528 = 0;
      v529 = v321 | v522 | v523 | v524 | v525 | v526;
      v530 = v527 | v528;
      goto LABEL_2328;
    case 578:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG10Unorm_X12";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v322 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5) | 0x30000;
      else
        v322 = 196608;
      goto LABEL_1923;
    case 579:
      v322 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG10Unorm_X12_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v322 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5) | 0x30800;
LABEL_1923:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5))
          v531 = 2;
        else
          v531 = 0;
      }
      else
      {
        v531 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5))
          v532 = 4;
        else
          v532 = 0;
      }
      else
      {
        v532 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5))
          v533 = 8;
        else
          v533 = 0;
      }
      else
      {
        v533 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5))
          v534 = 16;
        else
          v534 = 0;
      }
      else
      {
        v534 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v535 = 0x1000000;
      else
        v535 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v536 = 0x2000000;
      else
        v536 = 0;
      v537 = v322 | v531 | v532 | v533 | v534 | v535;
      goto LABEL_2205;
    case 580:
      v323 = "MTLPixelFormatYCBCR12_420_2P_PACKED";
      goto LABEL_955;
    case 581:
      v323 = "MTLPixelFormatYCBCR12_422_2P_PACKED";
      goto LABEL_955;
    case 582:
      v323 = "MTLPixelFormatYCBCR12_444_2P_PACKED";
      goto LABEL_955;
    case 583:
      v324 = "MTLPixelFormatYCBCR12_420_2P_PACKED_PQ";
      goto LABEL_877;
    case 584:
      v324 = "MTLPixelFormatYCBCR12_422_2P_PACKED_PQ";
      goto LABEL_877;
    case 585:
      v324 = "MTLPixelFormatYCBCR12_444_2P_PACKED_PQ";
LABEL_877:
      a3->i64[0] = (uint64_t)v324;
      v296 = 142802944;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_957;
      goto LABEL_956;
    case 586:
      v325 = "MTLPixelFormatRGB10A2Unorm_sRGB";
      goto LABEL_1124;
    case 587:
      v326 = 134414337;
      v327 = "MTLPixelFormatRGB10A2Unorm_PQ";
      goto LABEL_1129;
    case 588:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR10Unorm_PACKED";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v328 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3) | 0x30000;
      else
        v328 = 196608;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v538 = 2;
        else
          v538 = 0;
      }
      else
      {
        v538 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v576 = 4;
        else
          v576 = 0;
      }
      else
      {
        v576 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v608 = 8;
        else
          v608 = 0;
      }
      else
      {
        v608 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v628 = 16;
        else
          v628 = 0;
      }
      else
      {
        v628 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v644 = 0x1000000;
      else
        v644 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v645 = 0x2000000;
      else
        v645 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v646 = 0x4000000;
      else
        v646 = 0;
      v491 = v328 | v538 | v576 | v608 | v628 | v644;
      v254 = v645 | v646;
      goto LABEL_2483;
    case 589:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG10Unorm_PACKED";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v329 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3) | 0x30000;
      else
        v329 = 196608;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v539 = 2;
        else
          v539 = 0;
      }
      else
      {
        v539 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3))
          v577 = 4;
        else
          v577 = 0;
      }
      else
      {
        v577 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v609 = 8;
        else
          v609 = 0;
      }
      else
      {
        v609 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v629 = 16;
        else
          v629 = 0;
      }
      else
      {
        v629 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v647 = 0x1000000;
      else
        v647 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v592 = 0x2000000;
      else
        v592 = 0;
      v593 = v329 | v539 | v577 | v609 | v629 | v647;
      goto LABEL_2492;
    case 590:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_1P_XR";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v298 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x30000;
      else
        v298 = 196608;
      goto LABEL_932;
    case 591:
      v319 = "MTLPixelFormatYCBCR10_420_2P_XR";
      goto LABEL_915;
    case 592:
      v319 = "MTLPixelFormatYCBCR10_422_2P_XR";
      goto LABEL_915;
    case 593:
      v320 = "MTLPixelFormatYCBCR10_444_2P_XR";
      goto LABEL_930;
    case 594:
      v330 = "MTLPixelFormatYCBCR10_420_2P_PACKED_XR";
      goto LABEL_893;
    case 595:
      v330 = "MTLPixelFormatYCBCR10_422_2P_PACKED_XR";
      goto LABEL_893;
    case 596:
      v330 = "MTLPixelFormatYCBCR10_444_2P_PACKED_XR";
LABEL_893:
      a3->i64[0] = (uint64_t)v330;
      v301 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v301 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x830000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v316 = 4;
        else
          v316 = 0;
      }
      else
      {
        v316 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v317 = this;
        v318 = MTLGPUFamilyApple6;
LABEL_902:
        if (MTLPixelFormatQuery::supportsFamily(v317, v318))
          v331 = 16;
        else
          v331 = 0;
      }
      else
      {
LABEL_905:
        v331 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v332 = 0x1000000;
      else
        v332 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v333 = 0x2000000;
      else
        v333 = 0;
      v334 = this;
      v335 = MTLGPUFamilyApple8;
      goto LABEL_1011;
    case 597:
      v319 = "MTLPixelFormatYCBCR12_420_2P_XR";
      goto LABEL_915;
    case 598:
      v319 = "MTLPixelFormatYCBCR12_422_2P_XR";
LABEL_915:
      a3->i64[0] = (uint64_t)v319;
      v296 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
LABEL_916:
        v296 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6);
LABEL_917:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v297 = 4;
        else
          v297 = 0;
      }
      else
      {
        v297 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v336 = 8;
        else
          v336 = 0;
      }
      else
      {
        v336 = 0;
      }
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1451;
      v337 = this;
      v338 = MTLGPUFamilyApple6;
      goto LABEL_969;
    case 599:
      v320 = "MTLPixelFormatYCBCR12_444_2P_XR";
LABEL_930:
      a3->i64[0] = (uint64_t)v320;
      v298 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
LABEL_931:
        v298 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6);
LABEL_932:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v299 = 2;
        else
          v299 = 0;
      }
      else
      {
        v299 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v339 = 4;
        else
          v339 = 0;
      }
      else
      {
        v339 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v340 = 8;
        else
          v340 = 0;
      }
      else
      {
        v340 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v341 = this;
        v342 = MTLGPUFamilyApple6;
LABEL_949:
        if (MTLPixelFormatQuery::supportsFamily(v341, v342))
          v343 = 16;
        else
          v343 = 0;
      }
      else
      {
LABEL_2264:
        v343 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v355 = 0x1000000;
      else
        v355 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v356 = 0x2000000;
      else
        v356 = 0;
      v357 = this;
      v358 = MTLGPUFamilyApple8;
      goto LABEL_2272;
    case 600:
      v323 = "MTLPixelFormatYCBCR12_420_2P_PACKED_XR";
      goto LABEL_955;
    case 601:
      v323 = "MTLPixelFormatYCBCR12_422_2P_PACKED_XR";
      goto LABEL_955;
    case 602:
      v323 = "MTLPixelFormatYCBCR12_444_2P_PACKED_XR";
LABEL_955:
      a3->i64[0] = (uint64_t)v323;
      v296 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
LABEL_956:
        v296 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7);
LABEL_957:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v297 = 4;
        else
          v297 = 0;
      }
      else
      {
        v297 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v336 = 8;
        else
          v336 = 0;
      }
      else
      {
        v336 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v337 = this;
        v338 = MTLGPUFamilyApple7;
LABEL_969:
        if (MTLPixelFormatQuery::supportsFamily(v337, v338))
          v344 = 16;
        else
          v344 = 0;
      }
      else
      {
LABEL_1451:
        v344 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v359 = 0x1000000;
      else
        v359 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v360 = 0x2000000;
      else
        v360 = 0;
      v361 = this;
      v362 = MTLGPUFamilyApple8;
      goto LABEL_1459;
    case 603:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR12Unorm_X4";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v345 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x30000;
      else
        v345 = 196608;
      goto LABEL_1962;
    case 604:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR12Unorm_X4_PQ";
      v345 = 134414336;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v345 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x8030000;
LABEL_1962:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v540 = 4;
        else
          v540 = 0;
      }
      else
      {
        v540 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v541 = 8;
        else
          v541 = 0;
      }
      else
      {
        v541 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v542 = 16;
        else
          v542 = 0;
      }
      else
      {
        v542 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v543 = 0x1000000;
      else
        v543 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v544 = 0x2000000;
      else
        v544 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v545 = 0x4000000;
      else
        v545 = 0;
      a3->i32[2] = v345 | v540 | v541 | v542 | v543 | v544 | v545;
      v47 = (int64x2_t)xmmword_182809F80;
      goto LABEL_2827;
    case 605:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG12Unorm_X8";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v346 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x30000;
      else
        v346 = 196608;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v546 = 4;
        else
          v546 = 0;
      }
      else
      {
        v546 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v578 = 8;
        else
          v578 = 0;
      }
      else
      {
        v578 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v610 = 16;
        else
          v610 = 0;
      }
      else
      {
        v610 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v630 = 0x1000000;
      else
        v630 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v631 = 0x2000000;
      else
        v631 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v632 = 0x4000000;
      else
        v632 = 0;
      a3->i32[2] = v346 | v546 | v578 | v610 | v630 | v631 | v632;
      v99 = xmmword_182809F70;
      goto LABEL_2864;
    case 606:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR10Unorm_X6_PQ";
      v347 = 134414336;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v347 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x8030000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v348 = 4;
        else
          v348 = 0;
      }
      else
      {
        v348 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v547 = 8;
        else
          v547 = 0;
      }
      else
      {
        v547 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6))
          v579 = 16;
        else
          v579 = 0;
      }
      else
      {
        v579 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v611 = 0x1000000;
      else
        v611 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v612 = 0x2000000;
      else
        v612 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8))
        v613 = 0x4000000;
      else
        v613 = 0;
      v529 = v347 | v348 | v547 | v579 | v611;
      v530 = v612 | v613;
      goto LABEL_2328;
    case 607:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_1P_HLG";
      v298 = 268632064;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1020;
      goto LABEL_1019;
    case 608:
      v349 = "MTLPixelFormatYCBCR10_420_2P_HLG";
      goto LABEL_1050;
    case 609:
      v349 = "MTLPixelFormatYCBCR10_422_2P_HLG";
      goto LABEL_1050;
    case 610:
      v350 = "MTLPixelFormatYCBCR10_444_2P_HLG";
      goto LABEL_1018;
    case 611:
      v351 = "MTLPixelFormatYCBCR10_420_2P_PACKED_HLG";
      goto LABEL_992;
    case 612:
      v351 = "MTLPixelFormatYCBCR10_422_2P_PACKED_HLG";
      goto LABEL_992;
    case 613:
      v351 = "MTLPixelFormatYCBCR10_444_2P_PACKED_HLG";
LABEL_992:
      a3->i64[0] = (uint64_t)v351;
      v301 = 277020672;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v301 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9) | 0x10830000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v316 = 4;
        else
          v316 = 0;
      }
      else
      {
        v316 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v331 = 16;
        else
          v331 = 0;
      }
      else
      {
        v331 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
        v332 = 0x1000000;
      else
        v332 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
        v333 = 0x2000000;
      else
        v333 = 0;
      v334 = this;
      v335 = MTLGPUFamilyApple9;
LABEL_1011:
      if (MTLPixelFormatQuery::supportsFamily(v334, v335))
        v352 = 0x4000000;
      else
        v352 = 0;
      v353 = v301 | v316 | v331 | v332;
      v354 = v333 | v352;
LABEL_2368:
      a3->i32[2] = v353 | v354;
      v434 = (int64x2_t)xmmword_182809F60;
      goto LABEL_2369;
    case 615:
      v349 = "MTLPixelFormatYCBCR12_420_2P_HLG";
      goto LABEL_1050;
    case 616:
      v349 = "MTLPixelFormatYCBCR12_422_2P_HLG";
      goto LABEL_1050;
    case 617:
      v350 = "MTLPixelFormatYCBCR12_444_2P_HLG";
LABEL_1018:
      a3->i64[0] = (uint64_t)v350;
      v298 = 277020672;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
LABEL_1019:
        v298 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9);
LABEL_1020:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v299 = 2;
        else
          v299 = 0;
      }
      else
      {
        v299 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v339 = 4;
        else
          v339 = 0;
      }
      else
      {
        v339 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v340 = 8;
        else
          v340 = 0;
      }
      else
      {
        v340 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v343 = 16;
        else
          v343 = 0;
      }
      else
      {
        v343 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
        v355 = 0x1000000;
      else
        v355 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
        v356 = 0x2000000;
      else
        v356 = 0;
      v357 = this;
      v358 = MTLGPUFamilyApple9;
LABEL_2272:
      if (MTLPixelFormatQuery::supportsFamily(v357, v358))
        v602 = 0x4000000;
      else
        v602 = 0;
      v440 = v298 | v299 | v339 | v340 | v343 | v355;
      v441 = v356 | v602;
      goto LABEL_2276;
    case 618:
      v349 = "MTLPixelFormatYCBCR12_420_2P_PACKED_HLG";
      goto LABEL_1050;
    case 619:
      v349 = "MTLPixelFormatYCBCR12_422_2P_PACKED_HLG";
      goto LABEL_1050;
    case 620:
      v349 = "MTLPixelFormatYCBCR12_444_2P_PACKED_HLG";
LABEL_1050:
      a3->i64[0] = (uint64_t)v349;
      v296 = 277020672;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v296 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9) | 0x10830000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v297 = 4;
        else
          v297 = 0;
      }
      else
      {
        v297 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v336 = 8;
        else
          v336 = 0;
      }
      else
      {
        v336 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v344 = 16;
        else
          v344 = 0;
      }
      else
      {
        v344 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
        v359 = 0x1000000;
      else
        v359 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
        v360 = 0x2000000;
      else
        v360 = 0;
      v361 = this;
      v362 = MTLGPUFamilyApple9;
LABEL_1459:
      if (MTLPixelFormatQuery::supportsFamily(v361, v362))
        v439 = 0x4000000;
      else
        v439 = 0;
      v440 = v296 | v297 | v336 | v344 | v359;
      v441 = v360 | v439;
LABEL_2276:
      a3->i32[2] = v440 | v441;
      v434 = (int64x2_t)xmmword_182809F50;
LABEL_2369:
      a3[1] = v434;
      v622 = 3;
      goto LABEL_2884;
    case 621:
      v363 = "MTLPixelFormatR10Unorm_X6_HLG";
      goto LABEL_1076;
    case 622:
      v363 = "MTLPixelFormatR12Unorm_X4_HLG";
LABEL_1076:
      a3->i64[0] = (uint64_t)v363;
      v364 = 268632064;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v364 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9) | 0x10030000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v365 = 4;
        else
          v365 = 0;
      }
      else
      {
        v365 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v420 = 8;
        else
          v420 = 0;
      }
      else
      {
        v420 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v442 = 16;
        else
          v442 = 0;
      }
      else
      {
        v442 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
        v458 = 0x1000000;
      else
        v458 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
        v459 = 0x2000000;
      else
        v459 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
        v460 = 0x4000000;
      else
        v460 = 0;
      v461 = v364 | v365 | v420 | v442 | v458;
      v250 = v459 | v460;
LABEL_1731:
      a3->i32[2] = v461 | v250;
      v47 = (int64x2_t)xmmword_182809F50;
      goto LABEL_2827;
    case 623:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A2Unorm_HLG";
      v366 = 268632064;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v366 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9) | 0x10030000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v367 = 4;
        else
          v367 = 0;
      }
      else
      {
        v367 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v548 = 8;
        else
          v548 = 0;
      }
      else
      {
        v548 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v580 = 16;
        else
          v580 = 0;
      }
      else
      {
        v580 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v614 = 128;
        else
          v614 = 0;
      }
      else
      {
        v614 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v112 = 256;
        else
          v112 = 0;
      }
      else
      {
        v112 = 0;
      }
      v111 = v366 | v367 | v548 | v580 | v614;
      goto LABEL_1388;
    case 624:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A8_2P";
      v304 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1089;
      goto LABEL_1090;
    case 625:
      v304 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A8_2P_sRGB";
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1090;
      goto LABEL_1089;
    case 626:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A8_2P_PQ";
      v304 = 142802944;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1090;
      goto LABEL_1089;
    case 627:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A8_2P_HLG";
      v304 = 277020672;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1090;
LABEL_1089:
      v304 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9);
LABEL_1090:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v305 = 2;
        else
          v305 = 0;
      }
      else
      {
        v305 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v368 = 4;
        else
          v368 = 0;
      }
      else
      {
        v368 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v369 = 8;
        else
          v369 = 0;
      }
      else
      {
        v369 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
          v370 = 16;
        else
          v370 = 0;
      }
      else
      {
        v370 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
        v371 = 0x1000000;
      else
        v371 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9))
        v372 = 0x2000000;
      else
        v372 = 0;
      v373 = this;
      v374 = MTLGPUFamilyApple9;
LABEL_1583:
      if (MTLPixelFormatQuery::supportsFamily(v373, v374))
        v469 = 0x4000000;
      else
        v469 = 0;
      a3->i32[2] = v304 | v305 | v368 | v369 | v370 | v371 | v372 | v469;
      v424 = (int64x2_t)xmmword_182809F40;
      goto LABEL_2883;
    case 628:
      v325 = "MTLPixelFormatBGR10A2Unorm_sRGB";
LABEL_1124:
      a3->i64[0] = (uint64_t)v325;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v326 = 198661;
        else
          v326 = 198657;
      }
      else
      {
        v326 = 198657;
      }
      goto LABEL_1366;
    case 629:
      v326 = 134414337;
      v327 = "MTLPixelFormatBGR10A2Unorm_PQ";
LABEL_1129:
      a3->i64[0] = (uint64_t)v327;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v326 = 134414341;
        else
          v326 = 134414337;
      }
LABEL_1366:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v421 = 8;
        else
          v421 = 0;
      }
      else
      {
        v421 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v422 = 16;
        else
          v422 = 0;
      }
      else
      {
        v422 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v423 = 128;
        else
          v423 = 0;
      }
      else
      {
        v423 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7))
          v131 = 256;
        else
          v131 = 0;
      }
      else
      {
        v131 = 0;
      }
      v111 = v326 | v421;
      v132 = v422 | v423;
LABEL_1387:
      v112 = v132 | v131;
LABEL_1388:
      v257 = v111 | v112;
LABEL_1389:
      a3->i32[2] = v257;
LABEL_1390:
      v424 = (int64x2_t)xmmword_18280A360;
      goto LABEL_2883;
    case 630:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Uint_PACKED";
      v375 = 2621440;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v375 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x280000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v376 = 2;
        else
          v376 = 0;
      }
      else
      {
        v376 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v549 = 16;
        else
          v549 = 0;
      }
      else
      {
        v549 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v581 = 0x1000000;
      else
        v581 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v388 = 0x2000000;
      else
        v388 = 0;
      v389 = v375 | v376 | v549 | v581;
      goto LABEL_2161;
    case 631:
      v377 = "MTLPixelFormatBGRA10_XR_PACKED";
      goto LABEL_1142;
    case 632:
      v378 = 198656;
      v379 = "MTLPixelFormatBGRA10_XR_PACKED_sRGB";
      goto LABEL_1145;
    case 633:
      v377 = "MTLPixelFormatBGRA10Unorm_PACKED";
LABEL_1142:
      a3->i64[0] = (uint64_t)v377;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v380 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x30000;
      else
        v380 = 196608;
      v747 = v380;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v425 = 2;
        else
          v425 = 0;
      }
      else
      {
        v425 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v443 = 4;
        else
          v443 = 0;
      }
      else
      {
        v443 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v462 = 8;
        else
          v462 = 0;
      }
      else
      {
        v462 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v470 = 16;
        else
          v470 = 0;
      }
      else
      {
        v470 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v471 = 128;
        else
          v471 = 0;
      }
      else
      {
        v471 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v472 = 256;
        else
          v472 = 0;
      }
      else
      {
        v472 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v473 = 0x1000000;
      else
        v473 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v388 = 0x2000000;
      else
        v388 = 0;
      v389 = v747 | v425 | v443 | v462 | v470 | v471 | v472 | v473;
      goto LABEL_2161;
    case 634:
      v378 = 198656;
      v379 = "MTLPixelFormatBGRA10Unorm_PACKED_sRGB";
LABEL_1145:
      a3->i64[0] = (uint64_t)v379;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1146;
      goto LABEL_1147;
    case 635:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Unorm_PACKED_HLG";
      v378 = 268632064;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1147;
      goto LABEL_1146;
    case 636:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Unorm_PACKED_PQ";
      v378 = 134414336;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1147;
LABEL_1146:
      v378 |= MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009);
LABEL_1147:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v381 = 2;
        else
          v381 = 0;
        v745 = v381;
      }
      else
      {
        v745 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v382 = 4;
        else
          v382 = 0;
      }
      else
      {
        v382 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v383 = 8;
        else
          v383 = 0;
      }
      else
      {
        v383 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v384 = 16;
        else
          v384 = 0;
      }
      else
      {
        v384 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v385 = 128;
        else
          v385 = 0;
      }
      else
      {
        v385 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v386 = 256;
        else
          v386 = 0;
      }
      else
      {
        v386 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v387 = 0x1000000;
      else
        v387 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v388 = 0x2000000;
      else
        v388 = 0;
      v389 = v378 | v745 | v382 | v383 | v384 | v385 | v386 | v387;
LABEL_2161:
      a3->i32[2] = v389 | v388;
      v424 = (int64x2_t)xmmword_182809FC0;
      goto LABEL_2883;
    case 637:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Uint";
      v390 = 2621440;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v390 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x280000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v391 = 2;
        else
          v391 = 0;
      }
      else
      {
        v391 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v550 = 16;
        else
          v550 = 0;
      }
      else
      {
        v550 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v582 = 0x1000000;
      else
        v582 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v401 = 0x2000000;
      else
        v401 = 0;
      v402 = v390 | v391 | v550 | v582;
      goto LABEL_2593;
    case 638:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Unorm";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v392 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x30000;
      else
        v392 = 196608;
      v750 = v392;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v551 = 2;
        else
          v551 = 0;
      }
      else
      {
        v551 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v583 = 4;
        else
          v583 = 0;
      }
      else
      {
        v583 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v615 = 8;
        else
          v615 = 0;
      }
      else
      {
        v615 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v633 = 16;
        else
          v633 = 0;
      }
      else
      {
        v633 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v648 = 128;
        else
          v648 = 0;
      }
      else
      {
        v648 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v664 = 256;
        else
          v664 = 0;
      }
      else
      {
        v664 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v671 = 0x1000000;
      else
        v671 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v401 = 0x2000000;
      else
        v401 = 0;
      v402 = v750 | v551 | v583 | v615 | v633 | v648 | v664 | v671;
      goto LABEL_2593;
    case 639:
      v393 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Unorm_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1198;
      goto LABEL_1199;
    case 640:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Unorm_HLG";
      v393 = 268632064;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1199;
      goto LABEL_1198;
    case 641:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Unorm_PQ";
      v393 = 134414336;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        goto LABEL_1199;
LABEL_1198:
      v393 |= MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009);
LABEL_1199:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v394 = 2;
        else
          v394 = 0;
        v746 = v394;
      }
      else
      {
        v746 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v395 = 4;
        else
          v395 = 0;
      }
      else
      {
        v395 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v396 = 8;
        else
          v396 = 0;
      }
      else
      {
        v396 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v397 = 16;
        else
          v397 = 0;
      }
      else
      {
        v397 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v398 = 128;
        else
          v398 = 0;
      }
      else
      {
        v398 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v399 = 256;
        else
          v399 = 0;
      }
      else
      {
        v399 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v400 = 0x1000000;
      else
        v400 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v401 = 0x2000000;
      else
        v401 = 0;
      v402 = v393 | v746 | v395 | v396 | v397 | v398 | v399 | v400;
LABEL_2593:
      a3->i32[2] = v402 | v401;
      v424 = (int64x2_t)xmmword_182809FB0;
      goto LABEL_2883;
    case 642:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR10Uint_X6";
      v403 = 2621440;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v403 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x280000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v404 = 2;
        else
          v404 = 0;
      }
      else
      {
        v404 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v552 = 16;
        else
          v552 = 0;
      }
      else
      {
        v552 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v584 = 0x1000000;
      else
        v584 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v585 = 0x2000000;
      else
        v585 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v586 = 0x4000000;
      else
        v586 = 0;
      v529 = v403 | v404 | v552 | v584;
      v530 = v585 | v586;
LABEL_2328:
      a3->i32[2] = v529 | v530;
      v47 = (int64x2_t)xmmword_182809F90;
      goto LABEL_2827;
    case 643:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR10Uint_PACKED";
      v405 = 2621440;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v405 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x280000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v406 = 2;
        else
          v406 = 0;
      }
      else
      {
        v406 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v553 = 16;
        else
          v553 = 0;
      }
      else
      {
        v553 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v587 = 0x1000000;
      else
        v587 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v588 = 0x2000000;
      else
        v588 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v589 = 0x4000000;
      else
        v589 = 0;
      v491 = v405 | v406 | v553 | v587;
      v254 = v588 | v589;
LABEL_2483:
      a3->i32[2] = v491 | v254;
      v47 = (int64x2_t)xmmword_182809F60;
      goto LABEL_2827;
    case 644:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG10Uint_X12";
      v407 = 2621440;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v407 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x280000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v408 = 2;
        else
          v408 = 0;
      }
      else
      {
        v408 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v554 = 16;
        else
          v554 = 0;
      }
      else
      {
        v554 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v590 = 0x1000000;
      else
        v590 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v536 = 0x2000000;
      else
        v536 = 0;
      v537 = v407 | v408 | v554 | v590;
LABEL_2205:
      a3->i32[2] = v537 | v536;
      v99 = xmmword_182809FA0;
      goto LABEL_2864;
    case 645:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG10Uint_PACKED";
      v409 = 2621440;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
        v409 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x280000;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v410 = 2;
        else
          v410 = 0;
      }
      else
      {
        v410 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
          v555 = 16;
        else
          v555 = 0;
      }
      else
      {
        v555 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v591 = 0x1000000;
      else
        v591 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009))
        v592 = 0x2000000;
      else
        v592 = 0;
      v593 = v409 | v410 | v555 | v591;
LABEL_2492:
      a3->i32[2] = v593 | v592;
      v99 = xmmword_182809F50;
      goto LABEL_2864;
    default:
      a3->i32[2] = 0;
      goto LABEL_2885;
  }
}

uint64_t MTLPixelFormatQuery::supportsFamily(id *this, MTLGPUFamily a2)
{
  _QWORD *v3;
  _QWORD *v4;

  if (*this)
    return objc_msgSend(*this, "supportsFamily:", a2);
  if (this[1] == (id)-1)
    return 1;
  v4 = this[2];
  v3 = this[3];
  if (v4 != v3)
  {
    while (*v4 != a2)
    {
      if (++v4 == v3)
      {
        v4 = this[3];
        return v4 != v3;
      }
    }
  }
  return v4 != v3;
}

uint64_t adjustPixelFormatForiOSDevice(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t *a4, _BYTE *a5, int a6, int a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  if ((*(_BYTE *)(a2 + 9) & 4) != 0)
  {
    v7 = 0;
    LOBYTE(v8) = 0;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 24);
    LOBYTE(v8) = 4;
    if (a7)
      v9 = 1;
    else
      v9 = 4;
    if (v7 <= v9)
      v7 = v9;
    if (a7)
    {
      v8 = v7 / *(unsigned __int8 *)(a2 + 32);
      if (v8 <= 1)
        LOBYTE(v8) = 1;
    }
  }
  if (result <= 499)
  {
    v10 = v7;
    switch(result)
    {
      case 'F':
      case 'P':
LABEL_38:
        v7 = 4;
        if (a7)
        {
          v11 = *(unsigned __int8 *)(a2 + 32);
          v10 = 4;
          goto LABEL_16;
        }
        v10 = 4;
        goto LABEL_47;
      case 'G':
      case 'H':
      case 'Q':
      case '[':
        v7 = 4;
        if (a7)
          goto LABEL_15;
        v10 = 8;
LABEL_47:
        LOBYTE(v8) = 4;
        break;
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
        break;
      case 'Z':
      case '\\':
      case ']':
      case '^':
LABEL_14:
        v7 = 8;
        if (a7)
        {
LABEL_15:
          v11 = *(unsigned __int8 *)(a2 + 32);
          v10 = 8;
LABEL_16:
          LODWORD(v8) = v7 / v11;
        }
        else
        {
          LOBYTE(v8) = 4;
          v10 = 8;
        }
        break;
      default:
        switch(result)
        {
          case '(':
          case ')':
          case '*':
          case '+':
            goto LABEL_38;
          case ',':
            goto LABEL_14;
          default:
            v10 = v7;
            if (result == 253)
            {
              LOBYTE(v8) = 4;
              if (a7)
                LOBYTE(v8) = *(_BYTE *)(a2 + 32) == 1;
              v7 = 1;
              v10 = 1;
            }
            break;
        }
        break;
    }
  }
  else
  {
    v10 = v7;
    switch(result)
    {
      case 500:
      case 501:
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 508:
      case 509:
      case 510:
      case 520:
      case 521:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 540:
      case 541:
      case 542:
      case 543:
      case 544:
      case 545:
      case 546:
      case 547:
      case 548:
      case 550:
      case 551:
      case 554:
      case 555:
      case 560:
      case 562:
      case 586:
      case 587:
        goto LABEL_14;
      case 511:
      case 512:
      case 513:
      case 514:
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 549:
      case 552:
      case 553:
      case 556:
      case 557:
      case 558:
      case 559:
      case 561:
      case 563:
      case 564:
      case 565:
      case 566:
      case 567:
      case 568:
      case 569:
      case 570:
      case 571:
      case 572:
      case 573:
      case 574:
      case 575:
      case 576:
      case 577:
      case 578:
      case 579:
      case 580:
      case 581:
      case 582:
      case 583:
      case 584:
      case 585:
        break;
      case 588:
        v7 = 2;
        if (a7)
        {
          v11 = *(unsigned __int8 *)(a2 + 32);
          v10 = 2;
          goto LABEL_16;
        }
        LOBYTE(v8) = 4;
        v10 = 2;
        break;
      case 589:
        goto LABEL_38;
      default:
        v10 = v7;
        switch(result)
        {
          case 623:
          case 624:
          case 625:
          case 626:
          case 627:
          case 628:
          case 629:
            goto LABEL_14;
          default:
            goto LABEL_18;
        }
        break;
    }
  }
LABEL_18:
  if (a6)
  {
    switch(result)
    {
      case '(':
        if ((a7 & 1) == 0)
        {
          LOBYTE(v8) = 4;
          v7 = 8;
          goto LABEL_51;
        }
LABEL_45:
        LOBYTE(v8) = 2;
        v7 = 6;
        v10 = 6;
        break;
      case ')':
      case '*':
      case '+':
        v7 = 8;
        if (a7)
        {
          v12 = *(unsigned __int8 *)(a2 + 32);
LABEL_22:
          v10 = 8;
          goto LABEL_43;
        }
        LOBYTE(v8) = 4;
LABEL_51:
        v10 = 8;
        break;
      default:
        if (result != 70 && result != 80)
          goto LABEL_31;
        if ((a7 & 1) != 0)
        {
LABEL_42:
          v12 = *(unsigned __int8 *)(a2 + 32);
          v7 = 4;
          v10 = 4;
LABEL_43:
          LODWORD(v8) = v7 / v12;
        }
        else
        {
          v10 = 8;
          v7 = 4;
LABEL_30:
          LOBYTE(v8) = 4;
        }
        break;
    }
  }
  else
  {
LABEL_31:
    if (a7)
    {
      if (result <= 499)
      {
        switch(result)
        {
          case 300:
          case 301:
          case 302:
          case 303:
          case 304:
            LOBYTE(v8) = 1;
            v7 = 3;
            v10 = 3;
            break;
          case 305:
          case 306:
          case 307:
          case 308:
          case 309:
          case 310:
          case 311:
          case 312:
          case 316:
          case 317:
          case 318:
          case 319:
          case 320:
          case 321:
          case 322:
            break;
          case 313:
            goto LABEL_45;
          case 314:
          case 315:
            LOBYTE(v8) = 2;
            v10 = 6;
            v7 = 6;
            break;
          case 323:
          case 324:
          case 325:
            LOBYTE(v8) = 4;
            v10 = 12;
            v7 = 12;
            break;
          default:
            switch(result)
            {
              case 'F':
              case 'G':
              case 'H':
              case 'P':
              case 'Q':
                goto LABEL_42;
              case 'I':
              case 'J':
              case 'K':
              case 'L':
              case 'M':
              case 'N':
              case 'O':
              case 'R':
              case 'S':
              case 'T':
              case 'U':
              case 'V':
              case 'W':
              case 'X':
              case 'Y':
                goto LABEL_52;
              case 'Z':
              case '\\':
              case ']':
              case '^':
                v7 = 4;
                v10 = 4;
                goto LABEL_30;
              case '[':
                v12 = *(unsigned __int8 *)(a2 + 32);
                v7 = 8;
                goto LABEL_22;
              default:
                if (result == 40)
                  goto LABEL_45;
                break;
            }
            break;
        }
      }
      else
      {
        switch(result)
        {
          case 500:
          case 501:
          case 502:
          case 503:
          case 504:
          case 505:
          case 506:
          case 507:
          case 520:
          case 521:
          case 522:
          case 523:
          case 524:
          case 525:
          case 526:
          case 527:
          case 540:
          case 541:
          case 542:
          case 543:
          case 544:
          case 545:
          case 554:
          case 555:
          case 562:
          case 563:
          case 564:
          case 565:
          case 566:
          case 567:
          case 568:
          case 569:
          case 570:
          case 571:
          case 572:
          case 573:
          case 574:
          case 575:
          case 607:
          case 608:
          case 609:
          case 610:
          case 611:
          case 612:
          case 613:
          case 615:
          case 616:
          case 617:
            v10 = 6;
            v7 = 6;
            LOBYTE(v8) = 6u / *(_BYTE *)(a2 + 32);
            break;
          default:
            break;
        }
      }
    }
  }
LABEL_52:
  if (a3)
    *a3 = v7;
  if (a4)
    *a4 = v10;
  if (a5)
    *a5 = v8;
  return result;
}

uint64_t getGlobalConstantOffsets@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id obj;
  _QWORD v25[3];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend(a3, "bufferLayoutMatchesFrontEndLayout");
  *a5 = 1;
  a5[1] = -1;
  a5[2] = -1;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  obj = (id)objc_msgSend(a1, "members");
  result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (!result)
  {
    v19 = 0;
    goto LABEL_32;
  }
  v9 = result;
  v10 = *(_QWORD *)v27;
  v11 = -1;
  do
  {
    v12 = 0;
    do
    {
      if (*(_QWORD *)v27 != v10)
        objc_enumerationMutation(obj);
      v13 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v12);
      v14 = objc_msgSend(v13, "indirectArgumentIndex");
      v15 = objc_msgSend(v13, "dataType");
      if ((unint64_t)(v15 - 57) <= 0x3D)
      {
        if (((1 << (v15 - 57)) & 0x3C00000000E00006) != 0)
        {
          v16 = -1;
          v17 = -1;
          v18 = 1;
          goto LABEL_17;
        }
        if (v15 == 60)
        {
          getGlobalConstantOffsets((void *)objc_msgSend(v13, "dataTypeDescription"), a4, v25);
LABEL_16:
          v18 = v25[0];
          v16 = v25[1];
          v17 = v25[2];
LABEL_17:
          v19 = v18 + v14;
          if ((v7 & 1) == 0)
            goto LABEL_18;
          goto LABEL_22;
        }
        if (v15 == 57)
          abort();
      }
      v17 = v14 + a2;
      if (v15 == 2)
      {
        getGlobalConstantOffsets((void *)objc_msgSend(v13, "arrayType"), v17, a3, a4, v25);
        goto LABEL_16;
      }
      if (v15 == 1)
      {
        getGlobalConstantOffsets(v25, objc_msgSend(v13, "structType"), v17, a3, a4);
        goto LABEL_16;
      }
      if (!v7)
      {
        v16 = objc_msgSend(a3, "constantOffsetAtIndex:", v14 + a2);
        v19 = v14 + 1;
LABEL_18:
        if (v17 == -1)
          v20 = -1;
        else
          v20 = v16;
        objc_msgSend(v13, "setOffset:", v20);
        goto LABEL_22;
      }
      v16 = 0;
      v19 = v14 + 1;
LABEL_22:
      if (v16 < v11)
      {
        a5[1] = v16;
        a5[2] = v17;
        v11 = v16;
      }
      ++v12;
    }
    while (v9 != v12);
    result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    v9 = result;
  }
  while (result);
LABEL_32:
  *a5 = v19;
  return result;
}

uint64_t structIsIndirectArgumentBuffer(uint64_t result)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = (void *)result;
    if ((objc_msgSend((id)result, "isIndirectArgumentBuffer") & 1) != 0)
      return 1;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v2 = (void *)objc_msgSend(v1, "members", 0);
    result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (result)
    {
      v3 = result;
      v4 = *(_QWORD *)v10;
LABEL_6:
      v5 = 0;
      while (1)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * v5);
        v7 = objc_msgSend(v6, "dataType");
        if (v7 <= 1)
        {
          if (v7 != 1)
            return 0;
          if ((structIsIndirectArgumentBuffer(objc_msgSend(v6, "structType")) & 1) != 0)
            return 1;
        }
        else
        {
          v8 = v7;
          if (v7 != 2)
          {
            result = 1;
            if ((unint64_t)(v8 - 57) >= 4 && (unint64_t)(v8 - 78) >= 3)
              return 0;
            return result;
          }
          if ((arrayIsIndirectArgumentBuffer((void *)objc_msgSend(v6, "arrayType")) & 1) != 0)
            return 1;
        }
        if (v3 == ++v5)
        {
          v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
          result = 0;
          if (v3)
            goto LABEL_6;
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t arrayIsIndirectArgumentBuffer(void *a1)
{
  void *v1;
  uint64_t v2;

  while (1)
  {
    v1 = a1;
    v2 = objc_msgSend(a1, "elementType");
    if (v2 != 2)
      break;
    a1 = (void *)objc_msgSend(v1, "elementArrayType");
  }
  if ((unint64_t)(v2 - 57) <= 0x17 && ((1 << (v2 - 57)) & 0xE0000F) != 0)
    return 1;
  if (v2 == 1)
    return structIsIndirectArgumentBuffer(objc_msgSend(v1, "elementStructType"));
  return 0;
}

void validateWithDevice(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[3];
  uint64_t v50;

  v50 = 0;
  memset(v49, 0, sizeof(v49));
  _MTLMessageContextBegin_((uint64_t)v49, (uint64_t)"validateWithDevice", 4704, (uint64_t)a1, 3, (uint64_t)"Render Pipeline Descriptor Validation");
  validateFunction((uint64_t)v49, (uint64_t)a1, *(void **)(a2 + 256), (uint64_t)"vertexFunction", *(_QWORD *)(a2 + 288) == 0, v4, v5, v6);
  validateFunction((uint64_t)v49, (uint64_t)a1, *(void **)(a2 + 264), (uint64_t)"fragmentFunction", 0, v7, v8, v9);
  validateFunction((uint64_t)v49, (uint64_t)a1, *(void **)(a2 + 280), (uint64_t)"objectFunction", 0, v10, v11, v12);
  validateFunction((uint64_t)v49, (uint64_t)a1, *(void **)(a2 + 288), (uint64_t)"meshFunction", 0, v13, v14, v15);
  v21 = *(void **)(a2 + 256);
  if (v21 && *(_QWORD *)(a2 + 288))
  {
    _MTLMessageContextPush_((uint64_t)v49, 4, (uint64_t)CFSTR("vertexFunction must be nil when meshFunction is not nil."), v16, v17, v18, v19, v20, v48);
    v21 = *(void **)(a2 + 256);
    if (!v21)
      goto LABEL_14;
  }
  else if (!v21)
  {
    goto LABEL_14;
  }
  if (objc_msgSend(v21, "patchType"))
  {
    MTLValidateFeatureSupport(a1, 77, 0);
    if (*(_QWORD *)(a2 + 96) > (unint64_t)*(unsigned int *)(objc_msgSend(a1, "limits") + 192))
      _MTLMessageContextPush_((uint64_t)v49, 4, (uint64_t)CFSTR("maxTessellationFactor(%lu) must be <= %lu."), v22, v23, v24, v25, v26, *(_QWORD *)(a2 + 96));
    v27 = *(_QWORD *)(a2 + 88);
    if ((unint64_t)(v27 - 2) < 2)
    {
      if ((*(_QWORD *)(a2 + 96) & 1) != 0)
        _MTLMessageContextPush_((uint64_t)v49, 4, (uint64_t)CFSTR("maxTessellationFactor(%lu) must be even when using MTLTessellationPartitionModeFractionalOdd or MTLTessellationPartitionModeFractionalEven."), v22, v23, v24, v25, v26, *(_QWORD *)(a2 + 96));
    }
    else if (v27 != 1)
    {
      if (v27)
        abort();
      if ((*(_QWORD *)(a2 + 96) & (*(_QWORD *)(a2 + 96) - 1)) != 0)
        _MTLMessageContextPush_((uint64_t)v49, 4, (uint64_t)CFSTR("maxTessellationFactor(%lu) must be a power of 2 when using MTLTessellationPartitionModePow2."), v22, v23, v24, v25, v26, *(_QWORD *)(a2 + 96));
    }
  }
LABEL_14:
  if (*(_QWORD *)(a2 + 256) && *(_QWORD *)(a2 + 272))
  {
    v28 = 0;
    while (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a2 + 272), "layouts"), "objectAtIndexedSubscript:", v28), "stride") != -1)
    {
      if (++v28 == 31)
        goto LABEL_22;
    }
    if ((objc_msgSend(a1, "supportsDynamicAttributeStride") & 1) == 0)
      _MTLMessageContextPush_((uint64_t)v49, 4, (uint64_t)CFSTR("MTLBufferLayoutStrideDynamic set on buffer-layout index %u; device does not support dynamic attribute strides."),
        v29,
        v30,
        v31,
        v32,
        v33,
        v28);
  }
LABEL_22:
  if (objc_msgSend(*(id *)(a2 + 256), "renderTargetArrayIndexType"))
  {
    if (*(_QWORD *)(a2 + 216))
      _MTLMessageContextPush_((uint64_t)v49, 4, (uint64_t)CFSTR("colorSampleCount not 0 but the pipeline vertex function is writing to render_target_array_index."), v34, v35, v36, v37, v38, v48);
    v39 = objc_msgSend(a1, "supportsTexture2DMultisampleArray");
    if (*(_QWORD *)(a2 + 184) != 1 && (v39 & 1) == 0)
      _MTLMessageContextPush_((uint64_t)v49, 4, (uint64_t)CFSTR("Pipeline rasterSampleCount (%u) is greater than 1 but the pipeline vertex function is writing to render_target_array_index."), v34, v35, v36, v37, v38, *(_QWORD *)(a2 + 184));
  }
  v40 = *(_QWORD *)(a2 + 112);
  if (v40 && (v40 != 1 || (objc_msgSend(a1, "supportsFP32TessFactors") & 1) == 0))
    _MTLMessageContextPush_((uint64_t)v49, 4, (uint64_t)CFSTR("tessellationFactorFormat(%d) is not a valid MTLTessellationFactorFormat."), v34, v35, v36, v37, v38, v40);
  validateRenderRasterAndLater<MTLRenderPipelineDescriptorPrivate>((uint64_t)v49, a1, a2);
  v41 = *(_QWORD *)(a2 + 616);
  if (v41 > objc_msgSend(a1, "maxAccelerationStructureTraversalDepth"))
  {
    v42 = *(_QWORD *)(a2 + 616);
    objc_msgSend(a1, "maxAccelerationStructureTraversalDepth");
    _MTLMessageContextPush_((uint64_t)v49, 4, (uint64_t)CFSTR("maxAccelerationStructureTraversalDepth (%lu) must be less than or equal to %lu"), v43, v44, v45, v46, v47, v42);
  }
  _MTLMessageContextEnd((uint64_t)v49);
}

void validateFunction(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a3 && (_DWORD)a5)
  {
    _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("%s must not be nil."), a4, a5, a6, a7, a8, a4);
  }
  else if (a3)
  {
    if (objc_msgSend(a3, "device") != a2)
      _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("%s is associated with a different device."), v11, v12, v13, v14, v15, a4);
    if (objc_msgSend(a3, "needsFunctionConstantValues"))
    {
      objc_msgSend(a3, "name");
      _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("%s %@ cannot be used to build a pipeline state. Use newFunctionWithName:constantValues:... to get the specialized function"), v16, v17, v18, v19, v20, a4);
    }
  }
}

void validateWithDevice(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[3];
  uint64_t v43;

  v43 = 0;
  memset(v42, 0, sizeof(v42));
  _MTLMessageContextBegin_((uint64_t)v42, (uint64_t)"validateWithDevice", 1437, (uint64_t)a1, 1, (uint64_t)"Compute Pipeline Descriptor Validation");
  v9 = *(void **)(a2 + 8);
  if (v9
    || (_MTLMessageContextPush_((uint64_t)v42, 4, (uint64_t)CFSTR("computeFunction must not be nil."), v4, v5, v6, v7, v8, v41), (v9 = *(void **)(a2 + 8)) != 0))
  {
    if ((void *)objc_msgSend(v9, "device") != a1)
      _MTLMessageContextPush_((uint64_t)v42, 8, (uint64_t)CFSTR("computeFunction is associated with a different device"), v10, v11, v12, v13, v14, v41);
    v15 = *(void **)(a2 + 8);
    if (v15)
    {
      if (objc_msgSend(v15, "needsFunctionConstantValues"))
      {
        v35 = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 8), "name"), "UTF8String");
        _MTLMessageContextPush_((uint64_t)v42, 4, (uint64_t)CFSTR("function %s cannot be used to build a pipeline state. Use newFunctionWithName:constantValues:... to get the specialized function"), v36, v37, v38, v39, v40, v35);
      }
      if (*(_QWORD *)(a2 + 8) && *(_QWORD *)(a2 + 24))
      {
        v16 = 0;
        while (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a2 + 24), "layouts"), "objectAtIndexedSubscript:", v16), "stride") != -1)
        {
          if (++v16 == 31)
            goto LABEL_15;
        }
        if ((objc_msgSend(a1, "supportsDynamicAttributeStride") & 1) == 0)
          _MTLMessageContextPush_((uint64_t)v42, 4, (uint64_t)CFSTR("MTLBufferLayoutStrideDynamic set on buffer-layout index %u; device does not support dynamic attribute strides."),
            v17,
            v18,
            v19,
            v20,
            v21,
            v16);
      }
    }
  }
LABEL_15:
  if ((objc_msgSend(a1, "supportsTextureWriteRoundingMode:", *(_QWORD *)(a2 + 104)) & 1) == 0)
  {
    v23 = MTLRoundingModeString(*(_QWORD *)(a2 + 104));
    _MTLMessageContextPush_((uint64_t)v42, 4, (uint64_t)CFSTR("device does not support %@"), v24, v25, v26, v27, v28, (uint64_t)v23);
  }
  v22 = *(_QWORD *)(a2 + 184);
  if (v22 > objc_msgSend(a1, "maxAccelerationStructureTraversalDepth"))
  {
    v29 = *(_QWORD *)(a2 + 184);
    objc_msgSend(a1, "maxAccelerationStructureTraversalDepth");
    _MTLMessageContextPush_((uint64_t)v42, 4, (uint64_t)CFSTR("maxAccelerationStructureTraversalDepth (%lu) must be less than or equal to %lu"), v30, v31, v32, v33, v34, v29);
  }
  _MTLMessageContextEnd((uint64_t)v42);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const __CFString *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _OWORD v76[3];
  uint64_t v77;
  _QWORD v78[56];
  uint64_t v79[10];

  v79[8] = *MEMORY[0x1E0C80C00];
  v77 = 0;
  memset(v76, 0, sizeof(v76));
  _MTLMessageContextBegin_((uint64_t)v76, (uint64_t)"validateWithDevice", 1052, (uint64_t)a1, 9, (uint64_t)"Tile Render Pipeline Descriptor Validation");
  v9 = *(void **)(a2 + 24);
  if (!v9)
  {
    _MTLMessageContextPush_((uint64_t)v76, 4, (uint64_t)CFSTR("tileFunction must not be nil"), v4, v5, v6, v7, v8, v70);
    v9 = *(void **)(a2 + 24);
  }
  if ((void *)objc_msgSend(v9, "device") != a1)
    _MTLMessageContextPush_((uint64_t)v76, 8, (uint64_t)CFSTR("tileFunction is associated with a different device"), v10, v11, v12, v13, v14, v70);
  if (objc_msgSend(*(id *)(a2 + 24), "needsFunctionConstantValues"))
  {
    v52 = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 24), "name"), "UTF8String");
    _MTLMessageContextPush_((uint64_t)v76, 4, (uint64_t)CFSTR("function %s cannot be used to build a pipeline state without setting constant values first."), v53, v54, v55, v56, v57, v52);
  }
  v15 = *(_QWORD *)(a2 + 8);
  v16 = objc_msgSend(a1, "supportsSeparateVisibilityAndShadingRate");
  v22 = *(_QWORD *)(a2 + 48);
  if (v16)
  {
    v23 = *(_QWORD *)(a2 + 8);
    if (v22 && v22 > v23)
    {
      _MTLMessageContextPush_((uint64_t)v76, 4, (uint64_t)CFSTR("colorSampleCount expected to be smaller or equal to rasterSampleCount"), v17, v18, v19, v20, v21, v70);
      v23 = *(_QWORD *)(a2 + 8);
      v22 = *(_QWORD *)(a2 + 48);
      if (!v23)
        goto LABEL_13;
    }
    else if (!v23)
    {
      goto LABEL_13;
    }
    if (v23 < v22)
    {
      _MTLMessageContextPush_((uint64_t)v76, 4, (uint64_t)CFSTR("rasterSampleCount expected to be greater or equal to colorSampleCount"), v17, v18, v19, v20, v21, v70);
      v22 = *(_QWORD *)(a2 + 48);
    }
LABEL_13:
    if (v22)
    {
      v24 = objc_msgSend(a1, "supportsTextureSampleCount:");
      v30 = *(_QWORD *)(a2 + 48);
      if ((v24 & 1) == 0)
      {
        _MTLMessageContextPush_((uint64_t)v76, 4, (uint64_t)CFSTR("colorSampleCount (%lu) is not supported by device."), v25, v26, v27, v28, v29, *(_QWORD *)(a2 + 48));
        v30 = *(_QWORD *)(a2 + 48);
      }
      if (v30)
        goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v22)
    _MTLMessageContextPush_((uint64_t)v76, 4, (uint64_t)CFSTR("colorSampleCount expected to be 0."), v17, v18, v19, v20, v21, v70);
LABEL_20:
  v30 = v15;
LABEL_21:
  v71 = v30;
  if ((objc_msgSend(a1, "supportsTextureWriteRoundingMode:", *(_QWORD *)(a2 + 72)) & 1) == 0)
  {
    v58 = MTLRoundingModeString(*(_QWORD *)(a2 + 72));
    _MTLMessageContextPush_((uint64_t)v76, 4, (uint64_t)CFSTR("device does not support %@"), v59, v60, v61, v62, v63, (uint64_t)v58);
  }
  v31 = objc_msgSend(a1, "maxColorAttachments");
  v32 = 0;
  v33 = 0;
  do
  {
    v34 = *(_QWORD *)(*(_QWORD *)a2 + 8 + 8 * v32);
    if (v34)
    {
      v35 = *(unsigned int *)(v34 + 8);
      v75 = 0;
      v73 = 0u;
      v74 = 0u;
      v72 = 0u;
      MTLPixelFormatGetInfoForDevice(a1, v35, (uint64_t)&v72);
      if ((_DWORD)v35)
      {
        if (v32 >= v31)
          _MTLMessageContextPush_((uint64_t)v76, 4, (uint64_t)CFSTR("MTLTileRenderPipelineDescriptor color render target(%lu) exceeds platform max(%lu)."), v36, v37, v38, v39, v40, v32);
        if ((BYTE8(v72) & 1) != 0)
        {
          if ((BYTE8(v72) & 0x10) != 0)
          {
LABEL_30:
            v79[v33] = v35;
            v41 = &v78[7 * v33++];
            v42 = v73;
            *(_OWORD *)v41 = v72;
            *((_OWORD *)v41 + 1) = v42;
            *((_OWORD *)v41 + 2) = v74;
            v41[6] = v75;
            goto LABEL_31;
          }
        }
        else
        {
          _MTLMessageContextPush_((uint64_t)v76, 4, (uint64_t)CFSTR("pixelFormat, for color render target(%lu), is not a valid MTLPixelFormat."), v36, v37, v38, v39, v40, v32);
          if ((BYTE8(v72) & 0x10) != 0)
            goto LABEL_30;
        }
        _MTLMessageContextPush_((uint64_t)v76, 4, (uint64_t)CFSTR("pixelFormat, for color render target(%lu), %s is not color renderable."), v36, v37, v38, v39, v40, v32);
        goto LABEL_30;
      }
    }
LABEL_31:
    ++v32;
  }
  while (v32 != 8);
  v43 = objc_msgSend(a1, "maxFramebufferStorageBits");
  v44 = MTLPixelFormatComputeTotalSizeUsed((uint64_t)v78, v79, v33, v71 > 1);
  v45 = objc_msgSend(a1, "isLargeMRTSupported");
  if ((v45 & 1) == 0 && 8 * v44 > v43)
    _MTLMessageContextPush_((uint64_t)v76, 4, (uint64_t)CFSTR("This set of render targets requires %lu bytes of pixel storage. This device supports %lu bytes."), v46, v47, v48, v49, v50, v44 & 0x1FFFFFFFFFFFFFFFLL);
  v51 = *(_QWORD *)(a2 + 136);
  if (v51 > objc_msgSend(a1, "maxAccelerationStructureTraversalDepth"))
  {
    v64 = *(_QWORD *)(a2 + 136);
    objc_msgSend(a1, "maxAccelerationStructureTraversalDepth");
    _MTLMessageContextPush_((uint64_t)v76, 4, (uint64_t)CFSTR("maxAccelerationStructureTraversalDepth (%lu) must be less than or equal to %lu"), v65, v66, v67, v68, v69, v64);
  }
  _MTLMessageContextEnd((uint64_t)v76);
}

void _MTLFixIABReflectionOffsets(void *a1, void *a2)
{
  void *v4;
  id v5;

  if (!objc_msgSend(a1, "type") && objc_msgSend(a1, "bufferDataType") == 1)
  {
    v4 = (void *)objc_msgSend(a1, "dataTypeDescription");
    if (objc_msgSend(v4, "elementIsArgumentBuffer"))
    {
      v5 = (id)objc_msgSend(a2, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v4, "elementTypeDescription"));
      _MTLFixIABReflectionOffsetsWithLayout(a1, v5, a2);

    }
  }
}

MTLArrayTypeInternal *newDataTypeDescriptionForIndirectArgument(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  MTLArrayTypeInternal *v7;
  uint64_t v8;
  MTLArrayTypeInternal *v9;
  uint64_t v10;
  MTLArrayTypeInternal *v11;
  MTLArrayTypeInternal *v12;
  MTLArrayTypeInternal *v13;
  MTLArrayTypeInternal *v14;
  uint64_t v15;
  MTLArrayTypeInternal *v16;

  v4 = objc_msgSend(a1, "type");
  switch(v4)
  {
    case 19:
      if ((unint64_t)objc_msgSend(a1, "arrayLength") >= 2)
      {
        *a2 = 2;
        v7 = [MTLArrayTypeInternal alloc];
        v8 = objc_msgSend(a1, "arrayLength");
        v9 = v7;
        v10 = 78;
        goto LABEL_18;
      }
      v13 = 0;
      v15 = 78;
      goto LABEL_33;
    case 20:
      if ((unint64_t)objc_msgSend(a1, "arrayLength") >= 2)
      {
        *a2 = 2;
        v11 = [MTLArrayTypeInternal alloc];
        v8 = objc_msgSend(a1, "arrayLength");
        v9 = v11;
        v10 = 79;
        goto LABEL_18;
      }
      v13 = 0;
      v15 = 79;
      goto LABEL_33;
    case 21:
      if ((unint64_t)objc_msgSend(a1, "arrayLength") < 2)
      {
        v13 = 0;
        v15 = 80;
        goto LABEL_33;
      }
      *a2 = 2;
      v12 = [MTLArrayTypeInternal alloc];
      v8 = objc_msgSend(a1, "arrayLength");
      v9 = v12;
      v10 = 80;
LABEL_18:
      v13 = -[MTLArrayTypeInternal initWithArrayLength:elementType:stride:pixelFormat:aluType:details:](v9, "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", v8, v10, 8, 0, 0, 0);
      -[MTLArrayTypeInternal setArgumentIndexStride:](v13, "setArgumentIndexStride:", 1);
      return v13;
    case 22:
    case 23:
LABEL_35:
      abort();
    case 24:
    case 25:
    case 26:
    case 27:
      if (objc_msgSend(a1, "type") == 24)
      {
        v5 = 115;
      }
      else if (objc_msgSend(a1, "type") == 25)
      {
        v5 = 117;
      }
      else if (objc_msgSend(a1, "type") == 26)
      {
        v5 = 118;
      }
      else
      {
        if (objc_msgSend(a1, "type") != 27)
          goto LABEL_30;
        v5 = 116;
      }
      *a2 = v5;
LABEL_30:
      if ((unint64_t)objc_msgSend(a1, "arrayLength") < 2)
        return 0;
      v13 = -[MTLArrayTypeInternal initWithArrayLength:elementType:stride:pixelFormat:aluType:details:]([MTLArrayTypeInternal alloc], "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", objc_msgSend(a1, "arrayLength"), *a2, 8, 0, 0, 0);
      -[MTLArrayTypeInternal setArgumentIndexStride:](v13, "setArgumentIndexStride:", 1);
      v15 = 2;
LABEL_33:
      *a2 = v15;
      return v13;
    default:
      switch(v4)
      {
        case 0:
          *a2 = 60;
          return (MTLArrayTypeInternal *)(id)objc_msgSend(a1, "dataTypeDescription");
        case 2:
          v13 = -[MTLTextureReferenceType initWithDataType:textureType:access:isDepthTexture:]([MTLTextureReferenceType alloc], "initWithDataType:textureType:access:isDepthTexture:", objc_msgSend(a1, "textureDataType"), objc_msgSend(a1, "textureType"), objc_msgSend(a1, "access"), objc_msgSend(a1, "isDepthTexture"));
          if ((unint64_t)objc_msgSend(a1, "arrayLength") < 2)
          {
            v15 = 58;
          }
          else
          {
            v14 = -[MTLArrayTypeInternal initWithArrayLength:elementType:stride:pixelFormat:aluType:details:]([MTLArrayTypeInternal alloc], "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", objc_msgSend(a1, "arrayLength"), 58, 8, 0, 0, v13);
            -[MTLArrayTypeInternal setArgumentIndexStride:](v14, "setArgumentIndexStride:", 1);

            v15 = 2;
            v13 = v14;
          }
          goto LABEL_33;
        case 3:
          if ((unint64_t)objc_msgSend(a1, "arrayLength") >= 2)
          {
            *a2 = 2;
            v16 = [MTLArrayTypeInternal alloc];
            v8 = objc_msgSend(a1, "arrayLength");
            v9 = v16;
            v10 = 59;
            goto LABEL_18;
          }
          v13 = 0;
          v15 = 59;
          break;
        case 4:
          v13 = 0;
          *a2 = objc_msgSend(a1, "indirectConstantDataType");
          return v13;
        default:
          goto LABEL_35;
      }
      goto LABEL_33;
  }
}

uint64_t deserializeArguments(void *a1, DeserialContext *this, int a3, void **a4, _QWORD *a5, unsigned int a6, uint64_t a7)
{
  uint64_t v12;
  DeserialContext *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  MTLBufferBindingInternal *v27;
  uint64_t v28;
  unsigned __int16 v29;
  MTLThreadgroupMemoryBindingInternal *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  MTLBindingInternal *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 v44;
  uint64_t v45;
  MTLStructTypeInternal *v46;
  BOOL v47;
  MTLImageBlockDataArgument *v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  MTLThreadgroupMemoryBindingInternal *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 v55;
  unsigned int v56;
  MTLObjectPayloadBindingInternal *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  MTLStructTypeInternal *v61;
  MTLStructTypeInternal *v62;
  MTLBuiltInMeshArgument *v63;
  uint64_t v64;
  MTLBuiltInMeshArgument *v65;
  uint64_t i;
  MTLStructTypeInternal *v67;
  MTLStructTypeInternal *v68;
  uint64_t v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  _QWORD *v82;
  unsigned int v83;
  void **v84;
  unsigned int v85;
  __int16 v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  size_t v101;
  unsigned __int8 v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109[9];

  v81 = DeserialContext::deserializeUint32(this);
  if ((_DWORD)v81)
  {
    v79 = a3;
    v82 = a5;
    v83 = a6;
    v101 = 8 * v81;
    v12 = 0;
    *a4 = malloc_type_malloc(v101, 0x80040B8603338uLL);
    v84 = a4;
    v13 = this;
    v98 = a7;
    do
    {
      v14 = DeserialContext::stringFromSerializedData(v13);
      v15 = DeserialContext::deserializeUint32(v13);
      if ((v15 & 0xF) == 6)
      {
        v16 = 0;
        v17 = 1;
      }
      else
      {
        v16 = DeserialContext::deserializeUint32(v13);
        v17 = DeserialContext::deserializeUint32(v13);
      }
      v18 = v15 & 0x1F;
      v19 = (v15 >> 5) & 0xF;
      switch(v15 & 0x1F)
      {
        case 1u:
        case 2u:
        case 0xEu:
          v88 = v16;
          v91 = v14;
          v20 = DeserialContext::deserializeUint32(v13);
          v21 = DeserialContext::deserializeUint32(v13);
          v22 = DeserialContext::deserializeUint32(v13);
          v23 = DeserialContext::deserializeUint32(v13);
          v85 = DeserialContext::deserializeUint32(v13);
          if (v18 == 1 && objc_msgSend(a1, "minConstantBufferAlignmentBytes") >= (unint64_t)v23)
            v23 = objc_msgSend(a1, "minConstantBufferAlignmentBytes");
          v24 = v20;
          v25 = (v15 >> 9) & 1;
          if (v18 == 14)
            v26 = 22;
          else
            v26 = 0;
          LOBYTE(v78) = v18 == 1;
          v27 = -[MTLBufferBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:]([MTLBufferBindingInternal alloc], "initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:", v91, v26, v19, v25, v88, v17, v24, v21, v22, v78, v85, v23);
          a7 = v98;
          -[MTLBindingInternal setIsArgument:](v27, "setIsArgument:", v98);
          a4 = v84;
          *(_QWORD *)((char *)*v84 + v12) = v27;
          goto LABEL_14;
        case 3u:
          v92 = (v15 >> 9) & 1;
          v28 = DeserialContext::deserializeUint32(v13);
          DeserialContext::deserializeUint32(v13);
          DeserialContext::deserializeUint32(v13);
          v29 = DeserialContext::deserializeUint32(v13);
          v73 = v28;
          a7 = v98;
          v30 = -[MTLThreadgroupMemoryBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:dataSize:alignment:]([MTLThreadgroupMemoryBindingInternal alloc], "initWithName:type:access:isActive:locationIndex:arraySize:dataType:dataSize:alignment:", v14, 1, v19, v92, v16, v17, v73, DeserialContext::deserializeUint32(v13), v29);
          goto LABEL_33;
        case 4u:
          v93 = (v15 >> 9) & 1;
          v31 = DeserialContext::deserializeUint32(v13);
          v32 = DeserialContext::deserializeUint32(v13);
          LOBYTE(v75) = BYTE2(v32) & 1;
          a7 = v98;
          v30 = -[MTLTextureBindingInternal initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:]([MTLTextureBindingInternal alloc], "initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:", v14, v19, v93, v16, v17, v31, (unsigned __int16)v32, v75);
          goto LABEL_33;
        case 5u:
          v33 = (v15 >> 9) & 1;
          v34 = [MTLBindingInternal alloc];
          v35 = v16;
          v36 = v17;
          v37 = v14;
          v38 = 3;
          goto LABEL_32;
        case 6u:
          v39 = (v15 >> 9) & 1;
          v40 = DeserialContext::deserializeUint32(v13);
          v30 = -[MTLBuiltInArgument initWithName:type:access:active:index:dataType:builtInType:]([MTLBuiltInArgument alloc], "initWithName:type:access:active:index:dataType:builtInType:", v14, 15, v19, v39, v16, v40, DeserialContext::deserializeUint32(v13));
          goto LABEL_33;
        case 8u:
          v94 = (v15 >> 9) & 1;
          v41 = DeserialContext::deserializeUint32(v13);
          v42 = DeserialContext::deserializeUint32(v13);
          v43 = DeserialContext::deserializeUint32(v13);
          v44 = DeserialContext::deserializeUint32(this);
          v76 = v43;
          v13 = this;
          v74 = v42;
          a7 = v98;
          v30 = -[MTLIndirectConstantArgument initWithName:type:access:isActive:locationIndex:dataType:pixelFormat:aluType:dataSize:alignment:]([MTLIndirectConstantArgument alloc], "initWithName:type:access:isActive:locationIndex:dataType:pixelFormat:aluType:dataSize:alignment:", v14, 4, v19, v94, v16, v41, v74, v76, DeserialContext::deserializeUint32(this), v44);
          goto LABEL_33;
        case 9u:
          v95 = (v15 >> 9) & 1;
          v45 = DeserialContext::deserializeUint32(v13);
          v109[0] = 0;
          v108 = 1;
          v46 = structTypeFromSerializedContext((uint64_t)a1, v13, v109, v82, &v108, v83);
          v47 = DeserialContext::deserializeUint32(v13) != 0;
          HIDWORD(v75) = DeserialContext::deserializeUint32(v13);
          LOBYTE(v75) = v47;
          a7 = v98;
          v48 = -[MTLImageBlockDataArgument initWithName:type:access:isActive:index:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:]([MTLImageBlockDataArgument alloc], "initWithName:type:access:isActive:index:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:", v14, 16, v19, v95, v16, v45, v46, v75);
          -[MTLBindingInternal setIsArgument:](v48, "setIsArgument:", v98);
          if (v108)
            goto LABEL_21;
          goto LABEL_22;
        case 0xAu:
          v96 = (v15 >> 9) & 1;
          v89 = DeserialContext::deserializeUint32(v13);
          v49 = v14;
          v50 = DeserialContext::deserializeUint32(v13);
          v107 = 0;
          v106 = 1;
          v46 = structTypeFromSerializedContext((uint64_t)a1, v13, &v107, v82, &v106, v83);
          v51 = DeserialContext::deserializeUint32(v13) != 0;
          HIDWORD(v77) = DeserialContext::deserializeUint32(v13);
          LOBYTE(v77) = v51;
          a7 = v98;
          LODWORD(v72) = v50;
          v48 = -[MTLImageBlockArgument initWithName:type:access:isActive:index:kind:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:]([MTLImageBlockArgument alloc], "initWithName:type:access:isActive:index:kind:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:", v49, 17, v19, v96, v16, v89, v72, v46, v77);
          -[MTLBindingInternal setIsArgument:](v48, "setIsArgument:", v98);
          if (!v106)
            goto LABEL_22;
LABEL_21:

LABEL_22:
          *(_QWORD *)((char *)*a4 + v12) = v48;
          break;
        case 0xBu:
          v33 = (v15 >> 9) & 1;
          v34 = [MTLBindingInternal alloc];
          v35 = v16;
          v36 = v17;
          v37 = v14;
          v38 = 20;
          goto LABEL_32;
        case 0xCu:
          v33 = (v15 >> 9) & 1;
          v34 = [MTLBindingInternal alloc];
          v35 = v16;
          v36 = v17;
          v37 = v14;
          v38 = 19;
          goto LABEL_32;
        case 0xDu:
          v33 = (v15 >> 9) & 1;
          v34 = [MTLBindingInternal alloc];
          v35 = v16;
          v36 = v17;
          v37 = v14;
          v38 = 21;
          goto LABEL_32;
        case 0x10u:
          v33 = (v15 >> 9) & 1;
          v34 = [MTLBindingInternal alloc];
          v35 = v16;
          v36 = v17;
          v37 = v14;
          v38 = 24;
          goto LABEL_32;
        case 0x11u:
          v33 = (v15 >> 9) & 1;
          v34 = [MTLBindingInternal alloc];
          v35 = v16;
          v36 = v17;
          v37 = v14;
          v38 = 27;
          goto LABEL_32;
        case 0x12u:
          v33 = (v15 >> 9) & 1;
          v34 = [MTLBindingInternal alloc];
          v35 = v16;
          v36 = v17;
          v37 = v14;
          v38 = 25;
          goto LABEL_32;
        case 0x13u:
          v33 = (v15 >> 9) & 1;
          v34 = [MTLBindingInternal alloc];
          v35 = v16;
          v36 = v17;
          v37 = v14;
          v38 = 26;
LABEL_32:
          v30 = -[MTLBindingInternal initWithName:type:access:index:active:arrayLength:](v34, "initWithName:type:access:index:active:arrayLength:", v37, v38, v19, v35, v33, v36);
          goto LABEL_33;
        case 0x15u:
          v53 = DeserialContext::deserializeUint32(v13);
          DeserialContext::deserializeUint32(v13);
          DeserialContext::deserializeUint32(v13);
          v54 = v14;
          v55 = DeserialContext::deserializeUint32(v13);
          v56 = DeserialContext::deserializeUint32(v13);
          v57 = [MTLObjectPayloadBindingInternal alloc];
          v58 = v56;
          v13 = this;
          v30 = -[MTLObjectPayloadBindingInternal initWithName:type:access:isActive:arraySize:dataType:dataSize:alignment:](v57, "initWithName:type:access:isActive:arraySize:dataType:dataSize:alignment:", v54, 34, (v15 >> 5) & 0xF, (v15 >> 9) & 1, v17, v53, v58, v55);
LABEL_33:
          v52 = v30;
          -[MTLBindingInternal setIsArgument:](v30, "setIsArgument:", a7);
          *(_QWORD *)((char *)*a4 + v12) = v52;
          break;
        case 0x16u:
          v97 = (v15 >> 9) & 1;
          v90 = DeserialContext::deserializeUint32(v13);
          v87 = DeserialContext::deserializeUint32(v13);
          v86 = DeserialContext::deserializeUint32(v13);
          v80 = DeserialContext::deserializeUint32(v13);
          v59 = DeserialContext::deserializeUint32(v13);
          v105 = 0;
          v104 = 1;
          v60 = v16;
          v61 = structTypeFromSerializedContext((uint64_t)a1, v13, &v105, v82, &v104, v83);
          a7 = v98;
          v62 = structTypeFromSerializedContext((uint64_t)a1, v13, &v105, v82, &v104, v83);
          v63 = [MTLBuiltInMeshArgument alloc];
          v64 = v60;
          WORD1(v78) = v80;
          LOWORD(v78) = v86;
          a4 = v84;
          v65 = -[MTLBuiltInMeshArgument initWithName:type:access:active:index:dataType:builtInType:meshVertexStructType:meshPrimitiveStructType:meshVertexCount:meshPrimitiveCount:meshTopologyType:](v63, "initWithName:type:access:active:index:dataType:builtInType:meshVertexStructType:meshPrimitiveStructType:meshVertexCount:meshPrimitiveCount:meshTopologyType:", v14, 35, v19, v97, v64, v90, v87, v61, v62, v78, v59);
          -[MTLBindingInternal setIsArgument:](v65, "setIsArgument:", v98);
          *(_QWORD *)((char *)*v84 + v12) = v65;
          if (v104)
          {

          }
LABEL_14:
          v13 = this;
          break;
        default:
          abort();
      }
      v12 += 8;
    }
    while (v101 != v12);
    if (v79)
    {
      for (i = 0; 8 * v81 != i; i += 8)
      {
        v103 = 0;
        v102 = 1;
        v67 = structTypeFromSerializedContext((uint64_t)a1, this, &v103, v82, &v102, v83);
        if (v67)
        {
          v68 = v67;
          v69 = objc_msgSend(*(id *)((char *)*a4 + i), "type");
          if (v69 <= 15)
          {
            if ((unint64_t)v69 > 1)
              goto LABEL_53;
          }
          else
          {
            if ((unint64_t)(v69 - 16) < 2)
            {
              objc_msgSend(*(id *)((char *)*a4 + i), "setStructType:", v68);
LABEL_53:
              if (!v102)
                continue;
LABEL_49:

              continue;
            }
            if (v69 != 34 && v69 != 22)
              goto LABEL_53;
          }
          v70 = v102;
          objc_msgSend(*(id *)((char *)*a4 + i), "setStructType:doRetain:", v68, v102);
          if (v70)
            goto LABEL_49;
        }
      }
    }
  }
  return v81;
}

uint64_t MTLConstantStorage::getConstantCountForFunction(MTLConstantStorage *this, _MTLFunction *a2, NSString **a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  MTLFunctionConstant *v12;
  unsigned __int16 *ConstantValue;
  unsigned __int16 *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  uint64_t v20;
  uint64_t v22;
  NSString **v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  v6 = (void *)-[_MTLFunction functionConstants](a2, "functionConstants");
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (!v7)
    return 0;
  v8 = v7;
  v23 = a3;
  v9 = 0;
  v10 = *(_QWORD *)v25;
  while (2)
  {
    for (i = 0; i != v8; ++i)
    {
      if (*(_QWORD *)v25 != v10)
        objc_enumerationMutation(v6);
      v12 = *(MTLFunctionConstant **)(*((_QWORD *)&v24 + 1) + 8 * i);
      ConstantValue = MTLConstantStorage::findConstantValue(this, v12);
      if (ConstantValue)
      {
        v14 = ConstantValue;
        v15 = *(unsigned __int8 *)ConstantValue;
        if (-[MTLFunctionConstant type](v12, "type") != v15)
        {
          v16 = (void *)MEMORY[0x1E0CB3940];
          v17 = -[MTLFunctionConstant name](v12, "name");
          v18 = -[MTLFunctionConstant index](v12, "index");
          v19 = MTLDataTypeString(-[MTLFunctionConstant type](v12, "type"));
          v20 = objc_msgSend(v16, "stringWithFormat:", CFSTR("Constant %@ (%lu) is of type %@ but value found has type %@"), v17, v18, v19, MTLDataTypeString(*(unsigned __int8 *)v14));
LABEL_17:
          *v23 = (NSString *)v20;
          return 0xFFFFFFFFLL;
        }
        v9 = (v9 + 1);
      }
      else if (-[MTLFunctionConstant required](v12, "required") && MTLFailureTypeGetEnabled(1uLL))
      {
        v20 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Constant %@ (%lu) value is required by function %@"), -[MTLFunctionConstant name](v12, "name"), -[MTLFunctionConstant index](v12, "index"), -[_MTLFunction name](a2, "name"), v22);
        goto LABEL_17;
      }
    }
    v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v8)
      continue;
    return v9;
  }
}

void sub_182652768(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

dispatch_data_t MTLConstantStorage::constantAirScriptForFunction(MTLConstantStorage *this, _MTLFunction *a2, NSString *a3, NSString *a4, NSString **a5)
{
  MTLConstantStorage *v9;
  MTLConstantStorage *v10;
  uint64_t v11;
  MTLConstantStorage *v12;
  MTLFunctionConstant *v13;
  unsigned __int16 *ConstantValue;
  MTLConstantStorage *v15;
  unsigned __int16 v16;
  int v17;
  int Value;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  MTLConstantStorage *v34;
  int v35;
  int v36;
  void *v37;
  int v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  int v42;
  __int16 v43;
  __int16 v44;
  unsigned int v45;
  int v46;
  const void *v47;
  size_t v48;
  dispatch_data_t v49;
  NSString *v51;
  NSString *v52;
  id obj;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void *__p;
  char *v65;
  char *v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 buffer;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (MTLConstantStorage::getConstantCountForFunction(this, a2, a5) == -1)
    return 0;
  v67 = 0;
  v68 = 0;
  v69 = xmmword_182809F30;
  v70 = 0u;
  buffer = 0u;
  v72 = 0;
  v73 = 1;
  v74 = 256;
  v75 = 0;
  v51 = a4;
  v52 = a3;
  __p = 0;
  v65 = 0;
  v66 = 0;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  obj = (id)-[_MTLFunction functionConstants](a2, "functionConstants");
  v9 = (MTLConstantStorage *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v76, 16);
  v10 = v9;
  if (v9)
  {
    v11 = *(_QWORD *)v61;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v61 != v11)
          objc_enumerationMutation(obj);
        v13 = *(MTLFunctionConstant **)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)v12);
        ConstantValue = MTLConstantStorage::findConstantValue(this, v13);
        if (ConstantValue)
        {
          v15 = -[MTLFunctionConstant index](v13, "index");
          v16 = (unsigned __int16)v15;
          v17 = *(unsigned __int8 *)ConstantValue;
          Value = MTLConstantStorage::makeValue(v15, (flatbuffers::FlatBufferBuilder *)&v67, (MTLDataType)*(unsigned __int8 *)ConstantValue, *((uint64_t **)ConstantValue + 1));
          BYTE6(v72) = 1;
          v19 = buffer;
          v20 = v70;
          v21 = WORD4(v70);
          flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)&v67, 4, v16, 0);
          flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)&v67, 6, v17, 0);
          flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v67, 8, Value);
          v22 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v67, v20 - v19 + v21);
          v23 = v22;
          v24 = v65;
          if (v65 >= v66)
          {
            v26 = (char *)__p;
            v27 = (v65 - (_BYTE *)__p) >> 2;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v29 = v66 - (_BYTE *)__p;
            if ((v66 - (_BYTE *)__p) >> 1 > v28)
              v28 = v29 >> 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
              v30 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
            {
              v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v66, v30);
              v26 = (char *)__p;
              v24 = v65;
            }
            else
            {
              v31 = 0;
            }
            v32 = &v31[4 * v27];
            *(_DWORD *)v32 = v23;
            v25 = v32 + 4;
            while (v24 != v26)
            {
              v33 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v32 - 1) = v33;
              v32 -= 4;
            }
            __p = v32;
            v65 = v25;
            v66 = &v31[4 * v30];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_DWORD *)v65 = v22;
            v25 = v24 + 4;
          }
          v65 = v25;
        }
        v12 = (MTLConstantStorage *)((char *)v12 + 1);
      }
      while (v12 != v10);
      v9 = (MTLConstantStorage *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v76, 16);
      v10 = v9;
    }
    while (v9);
  }
  v34 = (MTLConstantStorage *)MTLConstantStorage::addString(v9, (flatbuffers::FlatBufferBuilder *)&v67, v52);
  v35 = (int)v34;
  v36 = MTLConstantStorage::addString(v34, (flatbuffers::FlatBufferBuilder *)&v67, v51);
  if (v65 == __p)
    v37 = &flatbuffers::data<flatbuffers::Offset<Air::FunctionConstantValue>,std::allocator<flatbuffers::Offset<Air::FunctionConstantValue>>>(std::vector<flatbuffers::Offset<Air::FunctionConstantValue>> const&)::t;
  else
    v37 = __p;
  v38 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)&v67, (uint64_t)v37, (v65 - (_BYTE *)__p) >> 2);
  BYTE6(v72) = 1;
  v39 = buffer;
  v40 = v70;
  v41 = WORD4(v70);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v67, 4, v35);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v67, 6, v36);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v67, 8, v38);
  v42 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v67, v40 - v39 + v41);
  BYTE6(v72) = 1;
  v43 = buffer;
  v44 = v70;
  LOWORD(v38) = WORD4(v70);
  v45 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)&v67, 2);
  flatbuffers::FlatBufferBuilder::TrackField((char *)&v67, 6, v45);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v67, 8, v42);
  v46 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v67, v44 - v43 + v38);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)&v67, v46, "AIRC", 0);
  v47 = (const void *)buffer;
  v48 = (v70 + DWORD2(v70) - buffer);
  v54 = v67;
  v55 = v68;
  v56 = *((_QWORD *)&v70 + 1);
  v57 = v70;
  v58 = buffer;
  v59 = v48;
  if (v68)
  {
    v67 = 0;
    v68 = 0;
  }
  v70 = 0u;
  buffer = 0u;
  v49 = dispatch_data_create(v47, v48, 0, 0);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v54);
  if (__p)
  {
    v65 = (char *)__p;
    operator delete(__p);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v67);
  return v49;
}

void sub_182652C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  if (__p)
    operator delete(__p);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&a30);
  _Unwind_Resume(a1);
}

char *flatbuffers::FlatBufferBuilder::TrackField(char *this, uint64_t a2, unsigned int a3)
{
  char *v5;
  unint64_t *v6;
  unsigned int v7;

  v5 = this;
  v6 = (unint64_t *)*((_QWORD *)this + 7);
  if (*((_QWORD *)this + 6) - (_QWORD)v6 <= 7uLL)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, 8uLL);
    v6 = (unint64_t *)*((_QWORD *)v5 + 7);
  }
  *v6 = a3 | (unint64_t)(a2 << 32);
  *((_QWORD *)v5 + 7) += 8;
  ++*((_DWORD *)v5 + 16);
  v7 = *((unsigned __int16 *)v5 + 34);
  if (v7 <= a2)
    LOWORD(v7) = a2;
  *((_WORD *)v5 + 34) = v7;
  return this;
}

uint64_t MTLConstantStorage::makeValue(MTLConstantStorage *this, flatbuffers::FlatBufferBuilder *a2, MTLDataType a3, uint64_t *a4)
{
  uint64_t result;

  switch(a3)
  {
    case MTLDataTypeFloat:
    case MTLDataTypeInt:
    case MTLDataTypeUInt:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>((uint64_t)a2, a4);
      break;
    case MTLDataTypeFloat2:
    case MTLDataTypeInt2:
    case MTLDataTypeUInt2:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>((uint64_t)a2, a4);
      break;
    case MTLDataTypeFloat3:
    case MTLDataTypeInt3:
    case MTLDataTypeUInt3:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>((uint64_t)a2, a4);
      break;
    case MTLDataTypeFloat4:
    case MTLDataTypeInt4:
    case MTLDataTypeUInt4:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>((uint64_t)a2, a4);
      break;
    case MTLDataTypeHalf:
    case MTLDataTypeShort:
    case MTLDataTypeUShort:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>((uint64_t)a2, a4);
      break;
    case MTLDataTypeHalf2:
    case MTLDataTypeShort2:
    case MTLDataTypeUShort2:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>((uint64_t)a2, a4);
      break;
    case MTLDataTypeHalf3:
    case MTLDataTypeShort3:
    case MTLDataTypeUShort3:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>((uint64_t)a2, (int *)a4);
      break;
    case MTLDataTypeHalf4:
    case MTLDataTypeShort4:
    case MTLDataTypeUShort4:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>((uint64_t)a2, a4);
      break;
    case MTLDataTypeChar:
    case MTLDataTypeUChar:
    case MTLDataTypeBool:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>((uint64_t)a2, a4);
      break;
    case MTLDataTypeChar2:
    case MTLDataTypeUChar2:
    case MTLDataTypeBool2:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>((uint64_t)a2, a4);
      break;
    case MTLDataTypeChar3:
    case MTLDataTypeUChar3:
    case MTLDataTypeBool3:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>((uint64_t)a2, (__int16 *)a4);
      break;
    case MTLDataTypeChar4:
    case MTLDataTypeUChar4:
    case MTLDataTypeBool4:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>((uint64_t)a2, a4);
      break;
    case MTLDataTypeLong:
    case MTLDataTypeULong:
    case MTLDataTypeULong4|MTLDataTypeStruct:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>((uint64_t)a2, a4);
      break;
    case MTLDataTypeLong2:
    case MTLDataTypeULong2:
    case MTLDataTypeULong4|MTLDataTypeArray:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>((uint64_t)a2, a4);
      break;
    case MTLDataTypeLong3:
    case MTLDataTypeULong3:
    case MTLDataTypeULong4|MTLDataTypeFloat:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>((uint64_t)a2, (__int128 *)a4);
      break;
    case MTLDataTypeLong4:
    case MTLDataTypeULong4:
    case MTLDataTypeULong4|MTLDataTypeFloat2:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>((uint64_t)a2, a4);
      break;
    case MTLDataTypeULong4|MTLDataTypeFloat3:
    case MTLDataTypeR16Snorm|MTLDataTypeInt4:
    case MTLDataTypeRG8Snorm|MTLDataTypeInt4:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>((uint64_t)a2, a4);
      break;
    case MTLDataTypeULong4|MTLDataTypeFloat4:
    case MTLDataTypeRG8Unorm|MTLDataTypeInt4:
    case MTLDataTypeRG16Unorm|MTLDataTypeInt4:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>((uint64_t)a2, (__int128 *)a4);
      break;
    case MTLDataTypeULong4|MTLDataTypeFloat2x2:
    case MTLDataTypeRG16Snorm|MTLDataTypeInt4:
    case MTLDataTypeRGBA8Unorm_sRGB|MTLDataTypeInt4:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>((uint64_t)a2, a4);
      break;
    case MTLDataTypeR16Unorm|MTLDataTypeInt4:
    case MTLDataTypeRGBA8Unorm|MTLDataTypeInt4:
    case MTLDataTypeRGBA8Snorm|MTLDataTypeInt4:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>((uint64_t)a2, a4);
      break;
    case MTLDataTypeRGBA16Unorm|MTLDataTypeInt4:
    case MTLDataTypeRGB10A2Unorm|MTLDataTypeInt4:
    case MTLDataTypeInstanceAccelerationStructure|MTLDataTypeStruct:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool8>((uint64_t)a2, a4);
      break;
    case MTLDataTypeRGBA16Snorm|MTLDataTypeInt4:
    case MTLDataTypeRG11B10Float|MTLDataTypeInt4:
    case MTLDataTypeULong4|MTLDataTypeInt4:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool16>((uint64_t)a2, a4);
      break;
    case MTLDataTypeRGB9E5Float|MTLDataTypeInt4:
    case MTLDataTypeComputePipeline|MTLDataTypeInt4:
    case MTLDataTypeLong|MTLDataTypeInt4:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong8>((uint64_t)a2, (__int128 *)a4);
      break;
    case MTLDataTypeRenderPipeline|MTLDataTypeInt4:
    case MTLDataTypeIndirectCommandBuffer|MTLDataTypeInt4:
    case MTLDataTypeLong2|MTLDataTypeInt4:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong16>((uint64_t)a2, (__int128 *)a4);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4 == *(_QWORD *)(a1 + 56))
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 1uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 1;
  *(_BYTE *)(v4 - 1) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t MTLConstantStorage::addString(MTLConstantStorage *this, flatbuffers::FlatBufferBuilder *a2, NSString *a3)
{
  const char *v6;
  size_t v7;

  if (!a3 || -[NSString isEqualToString:](a3, "isEqualToString:", &stru_1E0FE5DC8))
    return 0;
  v6 = -[NSString cStringUsingEncoding:](a3, "cStringUsingEncoding:", 4);
  v7 = strlen(v6);
  return flatbuffers::FlatBufferBuilder::CreateString(a2, v6, v7);
}

dispatch_data_t _MTLCreateComputePipelineScriptFromDescriptor(MTLComputePipelineDescriptor *a1)
{
  const void *v1;
  size_t v2;
  dispatch_data_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  void *buffer[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v11 = 0;
  v12 = 0;
  v13 = xmmword_182809F30;
  v14 = 0u;
  *(_OWORD *)buffer = 0u;
  v16 = 0;
  v17 = 1;
  v18 = 256;
  v19 = 0;
  _MTLCreateComputePipelineScriptFromDescriptor((flatbuffers::FlatBufferBuilder *)&v11, a1);
  v1 = buffer[0];
  v2 = (v14 + DWORD2(v14) - LODWORD(buffer[0]));
  v5 = v11;
  v6 = v12;
  v7 = *((_QWORD *)&v14 + 1);
  v8 = v14;
  v9 = buffer[0];
  v10 = v2;
  if (v12)
  {
    v11 = 0;
    v12 = 0;
  }
  v14 = 0u;
  *(_OWORD *)buffer = 0u;
  v3 = dispatch_data_create(v1, v2, 0, 0);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v5);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v11);
  return v3;
}

void sub_182653240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void flatbuffers::DetachedBuffer::~DetachedBuffer(flatbuffers::DetachedBuffer *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  v3 = (_OWORD *)((char *)this + 16);
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v4 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    else
      MEMORY[0x186DABFA4](v2, 0x1000C8077774924);
  }
  if (*((_BYTE *)this + 8) && *(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *v3 = 0u;
  v3[1] = 0u;
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(*((_QWORD *)this + 11), *(_QWORD **)(v2 + 8));
    MEMORY[0x186DABFBC](v2, 0x1060C40C2B13FB5);
  }
  flatbuffers::vector_downward::~vector_downward(this);
}

void flatbuffers::vector_downward::~vector_downward(flatbuffers::vector_downward *this)
{
  flatbuffers::vector_downward::clear_buffer(this);
  if (*((_BYTE *)this + 8) && *(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

_QWORD *flatbuffers::vector_downward::clear_buffer(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = this[5];
  if (v2)
  {
    v3 = *this;
    if (*v1)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    else
      this = (_QWORD *)MEMORY[0x186DABFA4](v2, 0x1000C8077774924);
  }
  v1[5] = 0;
  return this;
}

_DWORD *MTLConstantStorage::serializedConstantDataForFunction(MTLConstantStorage *this, _MTLFunction *a2, unint64_t *a3, NSString **a4)
{
  int ConstantCountForFunction;
  int v7;
  void *v8;
  size_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t i;
  MTLFunctionConstant *v15;
  unsigned __int16 *ConstantValue;
  __int16 v17;
  __int16 v18;
  size_t v19;
  char v20;
  unint64_t v21;
  const void *v22;
  unint64_t v23;
  size_t v24;
  unint64_t *v26;
  id obj;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  ConstantCountForFunction = MTLConstantStorage::getConstantCountForFunction(this, a2, a4);
  if (ConstantCountForFunction == -1)
    return 0;
  v7 = ConstantCountForFunction;
  v8 = (void *)-[_MTLFunction functionConstants](a2, "functionConstants");
  v9 = (20 * v7) + 4;
  v10 = malloc_type_malloc(v9, 0xFA8FEB0CuLL);
  *v10 = v7;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  obj = v8;
  v11 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  v26 = a3;
  if (v11)
  {
    v12 = *(_QWORD *)v30;
    v13 = 4;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v30 != v12)
          objc_enumerationMutation(obj);
        v15 = *(MTLFunctionConstant **)(*((_QWORD *)&v29 + 1) + 8 * i);
        ConstantValue = MTLConstantStorage::findConstantValue(this, v15);
        if (ConstantValue)
        {
          v17 = -[MTLFunctionConstant index](v15, "index");
          if (v13 >= 0xFFFFFFFFFFFFFFFELL)
            abort();
          v18 = v17;
          v19 = v13 + 2;
          if (v9 < v13 + 2)
          {
            if (!v9)
              v9 = 128;
            while (v9 < v19)
            {
              if (v9 >> 1 >= ~v9)
                v9 = v13 + 2;
              else
                v9 += v9 >> 1;
            }
            v10 = malloc_type_realloc(v10, v9, 0x227314A4uLL);
            if (!v10)
              goto LABEL_41;
          }
          *(_WORD *)((char *)v10 + v13) = v18;
          if (v13 == -3)
            abort();
          v20 = *(_BYTE *)ConstantValue;
          v21 = v13 + 3;
          if (v9 <= v19)
          {
            if (!v9)
              v9 = 128;
            while (v9 <= v19)
            {
              if (v9 >> 1 >= ~v9)
                v9 = v13 + 3;
              else
                v9 += v9 >> 1;
            }
            v10 = malloc_type_realloc(v10, v9, 0x227314A4uLL);
            if (!v10)
              goto LABEL_41;
          }
          *((_BYTE *)v10 + v19) = v20;
          v22 = (const void *)*((_QWORD *)ConstantValue + 1);
          v23 = _MTLConstantDataSize(*(unsigned __int8 *)ConstantValue);
          v24 = v23;
          if (-4 - v13 < v23)
            abort();
          v13 = v23 + v21;
          if (v9 < v23 + v21)
          {
            do
            {
              if (v9 >> 1 >= ~v9)
                v9 = v23 + v21;
              else
                v9 += v9 >> 1;
            }
            while (v9 < v13);
            v10 = malloc_type_realloc(v10, v9, 0x227314A4uLL);
            if (!v10)
LABEL_41:
              abort();
          }
          memcpy((char *)v10 + v21, v22, v24);
        }
      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v11);
  }
  else
  {
    v13 = 4;
  }
  *v26 = v13;
  return v10;
}

void sub_1826536B4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

unsigned __int16 *MTLConstantStorage::findConstantValue(MTLConstantStorage *this, MTLFunctionConstant *a2)
{
  unsigned __int16 v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  MTLConstantStorage *v10;
  void *__p[2];
  char v13;

  v4 = -[MTLFunctionConstant index](a2, "index");
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = (unsigned __int16 *)((char *)this + 32);
    do
    {
      v7 = *(unsigned __int16 *)(v5 + 32);
      v8 = v7 >= v4;
      if (v7 >= v4)
        v9 = (uint64_t *)v5;
      else
        v9 = (uint64_t *)(v5 + 8);
      if (v8)
        v6 = (unsigned __int16 *)v5;
      v5 = *v9;
    }
    while (*v9);
    if (v6 != (unsigned __int16 *)((char *)this + 32) && v6[16] <= v4)
      return v6 + 20;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)-[NSString UTF8String](-[MTLFunctionConstant name](a2, "name"), "UTF8String"));
  v10 = (MTLConstantStorage *)std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::find<std::string>((uint64_t)this, (const void **)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if ((MTLConstantStorage *)((char *)this + 8) == v10)
    return 0;
  else
    return (unsigned __int16 *)((char *)v10 + 56);
}

void sub_18265379C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _MTLConstantDataSize(uint64_t a1)
{
  uint64_t result;

  result = 4;
  switch(a1)
  {
    case 3:
    case 17:
    case 29:
    case 33:
    case 38:
    case 42:
    case 48:
    case 52:
    case 56:
      return result;
    case 4:
    case 19:
    case 30:
    case 34:
    case 40:
    case 44:
    case 81:
    case 85:
LABEL_5:
      result = 8;
      break;
    case 5:
    case 31:
    case 35:
      result = 12;
      break;
    case 6:
    case 32:
    case 36:
    case 82:
    case 86:
      result = 16;
      break;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
LABEL_12:
      result = 0;
      break;
    case 16:
    case 37:
    case 41:
    case 46:
    case 50:
    case 54:
LABEL_4:
      result = 2;
      break;
    case 18:
    case 39:
    case 43:
LABEL_6:
      result = 6;
      break;
    case 45:
    case 49:
    case 53:
      result = 1;
      break;
    case 47:
    case 51:
    case 55:
      result = 3;
      break;
    case 83:
    case 87:
      result = 24;
      break;
    case 84:
    case 88:
      result = 32;
      break;
    default:
      switch(a1)
      {
        case 'y':
          goto LABEL_4;
        case 'z':
          return result;
        case '{':
          goto LABEL_6;
        case '|':
          goto LABEL_5;
        default:
          goto LABEL_12;
      }
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v4 - 4) = *a2;
  v5 = v4 - 4;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void getGlobalConstantOffsets(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  MTLStructType *v5;
  id v6;
  _QWORD v7[3];

  *a3 = 1;
  a3[1] = -1;
  a3[2] = -1;
  if (objc_msgSend(a1, "elementIsArgumentBuffer"))
  {
    v5 = (MTLStructType *)objc_msgSend(a1, "elementTypeDescription");
    v6 = (id)objc_msgSend(a2, "newIndirectArgumentBufferLayoutWithStructType:", v5);
    getGlobalConstantOffsets(v7, v5, 0, v6, a2);
    if ((objc_msgSend(v6, "bufferLayoutMatchesFrontEndLayout") & 1) == 0)
    {
      updatePointerType(a1, v6, a2);
      makeOffsetRelative(v5, 0);
    }

  }
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 5)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 6uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 6;
  v5 = *a2;
  *(_WORD *)(v4 - 2) = *((_WORD *)a2 + 2);
  *(_DWORD *)(v4 - 6) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 4;
  *(_DWORD *)(v4 - 4) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 8;
  *(_QWORD *)(v4 - 8) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 0xF)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x10uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 16;
  *(_OWORD *)(v4 - 16) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

void sub_182655EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, MTLHashKey *a19)
{
  uint64_t v19;

  _Block_object_dispose((const void *)(v19 - 224), 8);
  MTLHashKey::~MTLHashKey(a19);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x290]);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A0]);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B0]);
  _Block_object_dispose((const void *)(v19 - 256), 8);
  _Unwind_Resume(a1);
}

void *FunctionHashFactory::createHash(uint64_t a1, int a2, dispatch_data_t data, NSObject *a4)
{
  NSObject *v8;
  NSObject *v9;
  void *v10;
  size_t v11;
  void *Hash;
  const char *v13;
  const __CFString *v14;
  const __CFString *v15;
  void *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  const char *v21;
  size_t v23;
  void *v24;
  size_t size_ptr;
  void *buffer_ptr;
  _OWORD v27[2];
  _BYTE v28[32];
  _BYTE v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  size_ptr = 0;
  buffer_ptr = 0;
  if (data)
    v8 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  else
    v8 = 0;
  v23 = 0;
  v24 = 0;
  if (a4)
  {
    v9 = dispatch_data_create_map(a4, (const void **)&v24, &v23);
    v11 = v23;
    v10 = v24;
  }
  else
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
  }
  Hash = (void *)FunctionHashFactory::createHash(a1, a2, buffer_ptr, size_ptr, v10, v11);
  if (v8)
    dispatch_release(v8);
  if (v9)
    dispatch_release(v9);
  if (*(_BYTE *)(a1 + 104))
  {
    if (a2)
      v13 = FunctionHashFactory::functionHashStringForType(a1, a2);
    else
      v13 = "function binary";
    if (!((unint64_t)data | (unint64_t)a4))
    {
      v16 = 0;
LABEL_23:
      v17 = *(_QWORD *)(a1 + 112);
      v18 = (_OWORD *)objc_msgSend(Hash, "value");
      v19 = v18[1];
      v27[0] = *v18;
      v27[1] = v19;
      v20 = _MTLRequestHashToString((uint64_t)v27);
      if (v16)
        v21 = (const char *)objc_msgSend(v16, "UTF8String");
      else
        v21 = "";
      NSLog(CFSTR("[Hash for %@] %s hash: %@ %s"), v17, v13, v20, v21);
      return Hash;
    }
    if (data)
    {
      _MTLHashForData(data, v29);
      v14 = (const __CFString *)_MTLRequestHashToString((uint64_t)v29);
      if (a4)
      {
LABEL_18:
        _MTLHashForData(a4, v28);
        v15 = (const __CFString *)_MTLRequestHashToString((uint64_t)v28);
LABEL_22:
        v16 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("[driver key(%@), framework key(%@)]"), v14, v15);
        goto LABEL_23;
      }
    }
    else
    {
      v14 = CFSTR("<null>");
      if (a4)
        goto LABEL_18;
    }
    v15 = CFSTR("<null>");
    goto LABEL_22;
  }
  return Hash;
}

uint64_t FunctionHashFactory::createHash(uint64_t a1, int a2, const void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const char *v13;
  const char *v14;
  CC_LONG v15;
  MTLBinaryKey *v16;
  uint64_t v17;
  CC_SHA256_CTX v19;
  MTLHashKey v20;
  unsigned __int8 md[32];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v19.wbuf[6] = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v19.wbuf[10] = v10;
  *(_QWORD *)&v19.wbuf[14] = *(_QWORD *)(a1 + 96);
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v19.count = *(_OWORD *)a1;
  *(_OWORD *)&v19.hash[2] = v11;
  v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v19.hash[6] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v19.wbuf[2] = v12;
  v13 = FunctionHashFactory::functionHashStringForType(a1, a2);
  if (v13)
  {
    v14 = v13;
    v15 = strlen(v13);
    CC_SHA256_Update(&v19, v14, v15);
  }
  if (a3 && a4)
    CC_SHA256_Update(&v19, a3, a4);
  if (a5 && a6)
    CC_SHA256_Update(&v19, a5, a6);
  CC_SHA256_Final(md, &v19);
  MTLHashKey::MTLHashKey((uint64_t)&v20, (uint64_t)md);
  v16 = [MTLBinaryKey alloc];
  v17 = -[MTLBinaryKey initWithHash:](v16, "initWithHash:", &v20, *(_OWORD *)v19.count, *(_OWORD *)&v19.hash[2], *(_OWORD *)&v19.hash[6], *(_OWORD *)&v19.wbuf[2], *(_OWORD *)&v19.wbuf[6], *(_OWORD *)&v19.wbuf[10], *(_QWORD *)&v19.wbuf[14]);
  MTLHashKey::~MTLHashKey(&v20);
  return v17;
}

void sub_182656414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, MTLHashKey *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a22);
  _Unwind_Resume(a1);
}

void sub_1826564AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x1020C405FF5E128);
  _Unwind_Resume(a1);
}

const char *FunctionHashFactory::functionHashStringForType(uint64_t a1, int a2)
{
  int v3;
  const char *v5;
  const char *v6;

  v3 = useRelaxedMath();
  switch(a2)
  {
    case 0:
      if (v3)
        return "RM_Bin";
      else
        return 0;
    case 1:
      v5 = "linking";
      v6 = "RM_linking";
      goto LABEL_9;
    case 2:
      v5 = "reflection";
      v6 = "RM_reflection";
      goto LABEL_9;
    case 3:
      v5 = "pipelineStatistics";
      v6 = "RM_pipelineStatistics";
      goto LABEL_9;
    case 6:
      v5 = "debugInstrumentation";
      v6 = "RM_debugInstrumentation";
LABEL_9:
      if (v3)
        return v6;
      else
        return v5;
    default:
      abort();
  }
}

uint64_t useRelaxedMath(void)
{
  if (_MTLIsInternalBuild() && useRelaxedMath(void)::onceToken != -1)
    dispatch_once(&useRelaxedMath(void)::onceToken, &__block_literal_global_1391);
  return useRelaxedMath(void)::useRlxMath;
}

uint64_t _MTLIsInternalBuild()
{
  return os_variant_has_internal_diagnostics();
}

uint64_t MultiLevelCacheBase::getElement(_QWORD *a1, _OWORD *a2, dispatch_data_t *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t result;
  __int128 v9;
  size_t v10;
  const void *v11;
  _OWORD v12[2];
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v11 = 0;
  v6 = a1[1];
  if (v6)
  {
    v7 = a2[1];
    v13[0] = *a2;
    v13[1] = v7;
    if ((*(unsigned int (**)(uint64_t, _OWORD *, const void **, size_t *))(*(_QWORD *)v6 + 32))(v6, v13, &v11, &v10))
    {
      goto LABEL_7;
    }
  }
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) & 1) != 0)
    return 0;
  result = a1[2];
  if (result)
  {
    v9 = a2[1];
    v12[0] = *a2;
    v12[1] = v9;
    result = (*(uint64_t (**)(uint64_t, _OWORD *, const void **, size_t *))(*(_QWORD *)result + 32))(result, v12, &v11, &v10);
    if ((_DWORD)result)
    {
LABEL_7:
      *a3 = dispatch_data_create(v11, v10, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
      return 1;
    }
  }
  return result;
}

uint64_t MTLPipelineDataCache::getElement(uint64_t a1, _OWORD *a2, _QWORD *a3, _QWORD *a4)
{
  os_unfair_lock_s *v8;
  _OWORD *v9;
  __int128 v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  void *v13;
  uint64_t v14;
  void *__p;
  __int128 v17;

  v8 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v9 = operator new(0x28uLL);
  __p = v9;
  v17 = xmmword_1827FC840;
  v10 = a2[1];
  *v9 = *a2;
  v9[1] = v10;
  *((_BYTE *)v9 + 32) = 0;
  v11 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((_QWORD *)(a1 + 64), (unsigned __int8 *)&__p);
  v12 = v11;
  if (v11)
  {
    v13 = malloc_type_malloc(*((_QWORD *)v11 + 5), 0x79B4D9F0uLL);
    *a3 = v13;
    memcpy(v13, *((const void **)v12 + 7), *((_QWORD *)v12 + 5));
    *a4 = *((_QWORD *)v12 + 5);
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  os_unfair_lock_unlock(v8);
  return v14;
}

void sub_1826567A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  os_unfair_lock_s *v15;

  if (a15 < 0)
    operator delete(__p);
  os_unfair_lock_unlock(v15);
  _Unwind_Resume(a1);
}

BOOL MultiLevelCacheBase::initialize(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  _BOOL8 result;
  uint64_t v8;
  int v9;
  int v10;
  _BOOL4 v11;
  uint8_t v12[16];

  *(_DWORD *)(a1 + 32) = a4;
  if (!a2)
    goto LABEL_5;
  if (_MTLDebugIgnorePrecompiledBinaries(void)::onceToken != -1)
    dispatch_once(&_MTLDebugIgnorePrecompiledBinaries(void)::onceToken, &__block_literal_global);
  if (_MTLDebugIgnorePrecompiledBinaries(void)::ignorePrecompiledBinaries)
  {
LABEL_5:
    *(_QWORD *)(a1 + 8) = a3;
    *(_QWORD *)(a1 + 16) = 0;
LABEL_6:
    *(_QWORD *)(a1 + 24) = a3;
    goto LABEL_7;
  }
  v8 = objc_msgSend(a2, "cache");
  v9 = *(_DWORD *)(a1 + 32);
  v10 = v9 | objc_msgSend(a2, "disableRunTimeCompilation");
  *(_DWORD *)(a1 + 32) = v10;
  if (!v8)
  {
    if ((v10 & 1) != 0)
    {
      v11 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v11)
        return result;
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_182636000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "The pipeline library's cache is nil, but disableRunTimeCompilation was set. Cache lookups will always fail.", v12, 2u);
      return 0;
    }
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + 8) = v8;
  if (!objc_msgSend(a2, "writable"))
  {
    *(_QWORD *)(a1 + 16) = a3;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = objc_msgSend(a2, "cache");
  *(_DWORD *)(a1 + 32) &= ~1u;
LABEL_7:
  if (!*(_QWORD *)(a1 + 8))
  {
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    MultiLevelCacheBase::initialize();
    return 0;
  }
  if (_MTLDebugIgnoreFailOnMissFlag())
    *(_DWORD *)(a1 + 32) &= 4u;
  return 1;
}

BOOL _MTLDebugIgnoreFailOnMissFlag(void)
{
  if (_MTLDebugIgnoreFailOnMissFlag(void)::onceToken != -1)
    dispatch_once(&_MTLDebugIgnoreFailOnMissFlag(void)::onceToken, &__block_literal_global_7);
  if (_MTLDebugIgnoreFailOnMissFlag(void)::ignoreFailOnMiss)
    return 1;
  if (_MTLDebugIgnorePrecompiledBinaries(void)::onceToken != -1)
    dispatch_once(&_MTLDebugIgnorePrecompiledBinaries(void)::onceToken, &__block_literal_global);
  return _MTLDebugIgnorePrecompiledBinaries(void)::ignorePrecompiledBinaries != 0;
}

void MTLCompilerRequest::~MTLCompilerRequest(MTLCompilerRequest *this)
{
  NSObject *v1;

  *(_QWORD *)this = &off_1E0FE05F0;
  v1 = *((_QWORD *)this + 2);
  if (v1)
    dispatch_release(v1);
  JUMPOUT(0x186DABFBCLL);
}

{
  NSObject *v1;

  *(_QWORD *)this = &off_1E0FE05F0;
  v1 = *((_QWORD *)this + 2);
  if (v1)
    dispatch_release(v1);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 24);
}

uint64_t MTLGetCompilerOptions(void *a1, unint64_t a2, unsigned int a3, unint64_t a4, int a5)
{
  int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v26;

  if ((a2 & 0x200000) != 0)
    v7 = 129;
  else
    v7 = 0;
  v26 = a2 >> 2;
  v8 = (a2 >> 10) & 0x100 | v7;
  v9 = (a2 >> 22) & 1 | _MTLCompilePerformanceStatisticsEnabled();
  v10 = v9 == 0;
  if (v9)
    v11 = v8 | 0x200;
  else
    v11 = v8;
  if (v10)
    v12 = 0xFFFFFFFD28C7FFFBLL;
  else
    v12 = 0xFFFFFFFD2887FFFBLL;
  if ((a2 & 0x80000) != 0)
    v11 |= 0x11u;
  if ((a2 & 0x100000) != 0)
    v13 = v11 | 0x21;
  else
    v13 = v11;
  v14 = objc_msgSend(a1, "supportsFamily:", 1005);
  v15 = 65539;
  if (!v14)
    v15 = v12;
  v16 = (a2 >> 9) & 0x80000 | (a2 >> 12) & 0x1000 | ((v26 & 1) << 14) | (a2 >> 9) & 0x10000 | (a2 >> 13) & 0x2000 | (a2 >> 30 << 24) | (a2 >> 3) & 0x40000000 | ((v15 & a2) != 0) | v13;
  if (a1)
  {
    if (objc_msgSend(a1, "supportsVertexAmplification"))
      v17 = 1024;
    else
      v17 = 2048;
    v18 = v17 | v16;
    if (objc_msgSend(a1, "supportsUnalignedVertexFetch"))
      v16 = v18 | 0x20000;
    else
      v16 = v18;
    if (objc_msgSend(a1, "requiresRaytracingEmulation")
      && objc_msgSend(a1, "supportsRaytracing"))
    {
      v16 |= 0x40000u;
    }
    v19 = a4;
    if (a4 <= 1 && ((v16 & 0x80) == 0 || (objc_msgSend(a1, "supportsTLS") & 1) == 0))
      v16 |= 0x400000u;
    if (objc_msgSend(a1, "supportsBfloat16Buffers")
      && objc_msgSend(a1, "requiresBFloat16Emulation"))
    {
      v16 |= 0x80000000;
    }
  }
  else
  {
    v19 = a4;
  }
  v20 = v16 | 2;
  if (!a5)
    v20 = v16;
  v21 = (a3 << 13) & 0x200000 | (((a3 >> 7) & 1) << 15) & 0xFF7FFFFF | (((a3 >> 9) & 1) << 23) | v20;
  if (v19 == 1)
  {
    if (!objc_msgSend(a1, "supportsGlobalVariableRelocationCompute"))
      return v21;
    return v21 | 0x4000000;
  }
  if (!v19 && (objc_msgSend(a1, "supportsGlobalVariableRelocationRender") & 1) != 0)
    return v21 | 0x4000000;
  return v21;
}

uint64_t _MTLCompilePerformanceStatisticsEnabled()
{
  if (_MTLCompilePerformanceStatisticsEnabled::onceToken != -1)
    dispatch_once(&_MTLCompilePerformanceStatisticsEnabled::onceToken, &__block_literal_global_1500);
  return _collectCompilePerformanceStats;
}

NSUInteger createLinkedFunctions(flatbuffers::FlatBufferBuilder *a1, MTLLinkedFunctions *a2)
{
  int FunctionArray;
  int v5;
  NSDictionary *v6;
  uint64_t v7;
  void *v8;
  int v9;
  NSUInteger result;
  int v11;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(__n128 *, __n128 *);
  void (*v17)(uint64_t);
  void *v18;
  void *__p;
  void *v20;
  uint64_t v21;

  if (-[NSArray count](-[MTLLinkedFunctions functions](a2, "functions"), "count"))
    FunctionArray = createFunctionArray(a1, -[MTLLinkedFunctions functions](a2, "functions"));
  else
    FunctionArray = 0;
  if (-[NSArray count](-[MTLLinkedFunctions privateFunctions](a2, "privateFunctions"), "count"))
    v5 = createFunctionArray(a1, -[MTLLinkedFunctions privateFunctions](a2, "privateFunctions"));
  else
    v5 = 0;
  if (-[NSDictionary count](-[MTLLinkedFunctions groups](a2, "groups"), "count"))
  {
    v6 = -[MTLLinkedFunctions groups](a2, "groups");
    v13 = 0;
    v14 = &v13;
    v15 = 0x4812000000;
    v16 = __Block_byref_object_copy__7;
    v17 = __Block_byref_object_dispose__7;
    v18 = &unk_182827312;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = ___ZL12createGroupsRN11flatbuffers17FlatBufferBuilderEP12NSDictionaryIP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEE_block_invoke;
    v12[3] = &unk_1E0FE3198;
    v12[4] = &v13;
    v12[5] = a1;
    -[NSDictionary enumerateKeysAndObjectsUsingBlock:](v6, "enumerateKeysAndObjectsUsingBlock:", v12);
    v7 = v14[7] - v14[6];
    if (v7)
      v8 = (void *)v14[6];
    else
      v8 = &flatbuffers::data<flatbuffers::Offset<Air::FunctionGroup>,std::allocator<flatbuffers::Offset<Air::FunctionGroup>>>(std::vector<flatbuffers::Offset<Air::FunctionGroup>> const&)::t;
    v9 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v8, v7 >> 2);
    _Block_object_dispose(&v13, 8);
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v9 = 0;
  }
  if (-[NSArray count](-[MTLLinkedFunctions functions](a2, "functions"), "count")
    || -[NSArray count](-[MTLLinkedFunctions privateFunctions](a2, "privateFunctions"), "count")
    || (result = -[NSDictionary count](-[MTLLinkedFunctions groups](a2, "groups"), "count")) != 0)
  {
    *((_BYTE *)a1 + 70) = 1;
    v11 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, FunctionArray);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v5);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v9);
    return flatbuffers::FlatBufferBuilder::EndTable(a1, v11);
  }
  return result;
}

void sub_182656EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_182657748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<CompilerOutputType,MTLBinaryKey *>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 24);
}

uint64_t MultiLevelCacheBase::failOnPipelineCacheMiss(MultiLevelCacheBase *this)
{
  return *((_DWORD *)this + 8) & 1;
}

uint64_t MTLCompilerFSCache::getElement(uint64_t a1, unint64_t *a2)
{
  os_unfair_lock_s *v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  v5 = *(_QWORD **)(a1 + 144);
  if (v5)
  {
    v6 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>(v5, a2);
    os_unfair_lock_unlock(v4);
    if (!v6)
      return 0;
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (MTLCompilerFSCache::openSync((MTLCompilerFSCache *)a1))
  {
    if (fscache_find_and_retain() == 203)
    {
      ++*(_DWORD *)(a1 + 16);
    }
    else if (!fscache_element_get_data())
    {
      fscache_remove_and_release();
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  return 0;
}

void sub_182657AA4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<MultiLevelFunctionCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<MTLPipelineDescriptions>::__on_zero_shared(uint64_t a1)
{
  MTLPipelineDescriptions::~MTLPipelineDescriptions((MTLPipelineDescriptions *)(a1 + 24));
}

uint64_t MTLLibraryDataWithArchive::parseHeaderExtension(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  signed int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int16 v14;
  signed int v15;
  _BYTE v16[16];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a2 + 4) != 1)
    return 1;
  if (*(_WORD *)(a2 + 6) != 2)
    return 1;
  if (*(unsigned __int16 *)(a2 + 8) < 3u)
    return 1;
  v4 = *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 32);
  if (v4 == -4)
    return 1;
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 312))(a1, v4 + 4);
  v15 = 0;
  while ((*(uint64_t (**)(_QWORD *, signed int *, uint64_t))(*a1 + 320))(a1, &v15, 4) == 4)
  {
    v8 = v15;
    v9 = bswap32(v15);
    v15 = v9;
    v14 = 0;
    if (v8 != 1413762629)
    {
      if ((*(uint64_t (**)(_QWORD *, unsigned __int16 *, uint64_t))(*a1 + 320))(a1, &v14, 2) != 2)
        break;
      if (v15 > 1380733779)
      {
        if (v15 > 1431652675)
        {
          if (v15 == 1431652676)
          {
            if ((*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(*a1 + 320))(a1, v16, 16) != 16)
              break;
            a1[17] = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", v16);
            goto LABEL_33;
          }
          if (v15 != 1447842644)
            goto LABEL_39;
          if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 32, 8) != 8)
            goto LABEL_40;
          v10 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 40, 8);
        }
        else
        {
          if (v15 == 1380733780)
          {
            if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 64, 8) != 8)
              goto LABEL_40;
            v10 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 72, 8);
            goto LABEL_32;
          }
          if (v15 != 1397510996)
            goto LABEL_39;
          if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 80, 8) != 8)
            goto LABEL_40;
          v10 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 88, 8);
        }
      }
      else
      {
        if (v15 > 1213420098)
        {
          if ((v15 - 1213420099) < 2)
          {
            if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a3, 8) != 8
              || (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 8, 8) != 8)
            {
              break;
            }
            goto LABEL_33;
          }
          if (v15 == 1229738836)
          {
            if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 48, 8) != 8)
              goto LABEL_40;
            v10 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 56, 8);
            goto LABEL_32;
          }
LABEL_39:
          v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
          if (((*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 312))(a1, v11 + v14) & 1) == 0)
          {
LABEL_40:
            generateNSError(a4, CFSTR("MTLLibraryErrorDomain"), MTLLibraryErrorUnsupported, CFSTR("Invalid library file (unexpected end of file)"));
            return 0;
          }
LABEL_33:
          v9 = v15;
          goto LABEL_34;
        }
        if (v15 != 1212438862)
        {
          if (v15 == 1162757204)
            return 1;
          goto LABEL_39;
        }
        if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 16, 8) != 8)
          goto LABEL_40;
        v10 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 24, 8);
      }
LABEL_32:
      if (v10 != 8)
        goto LABEL_40;
      goto LABEL_33;
    }
LABEL_34:
    if (v9 == 1162757204)
      return 1;
  }
  if (a4)
  {
    v13 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid library file (unexpected end of file)"), *MEMORY[0x1E0CB2D50]);
    *a4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v13);
  }
  return 0;
}

size_t LibraryWithFile::readBytes(FILE **this, void *__ptr, size_t __size)
{
  return fread(__ptr, __size, 1uLL, this[81]) * __size;
}

BOOL LibraryWithFile::setPosition(FILE **this, uint64_t a2)
{
  return fseek(this[81], (uint64_t)this[30] + a2, 0) == 0;
}

uint64_t LibraryWithFile::getPosition(LibraryWithFile *this)
{
  return MEMORY[0x186DAC46C](*((_QWORD *)this + 81)) - *((_QWORD *)this + 30);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,unsigned long long>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,unsigned long long>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *i = *v24;
LABEL_48:
    *v24 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_182658318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)i + 5) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_182658598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

BOOL LibraryWithData::setPosition(LibraryWithData *this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 30) + a2;
  v3 = *((_QWORD *)this + 82);
  if (v3 >= v2)
    *((_QWORD *)this + 83) = (*((_DWORD *)this + 60) + a2);
  return v3 >= v2;
}

uint64_t LibraryWithData::getPosition(LibraryWithData *this)
{
  return *((_QWORD *)this + 83) - *((_QWORD *)this + 30);
}

size_t LibraryWithData::readBytes(LibraryWithData *this, void *__dst, size_t a3)
{
  uint64_t v3;
  size_t v4;

  v3 = *((_QWORD *)this + 83);
  if (v3 + a3 > *((_QWORD *)this + 82))
    return 0;
  v4 = a3;
  memcpy(__dst, (const void *)(*((_QWORD *)this + 81) + v3), a3);
  *((_QWORD *)this + 83) += v4;
  return v4;
}

uint64_t MTLLibraryDataWithArchive::parseImportedSymbolListSection(MTLLibraryDataWithArchive *this, NSError **a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSError **v14;
  uint64_t result;
  uint64_t v16;
  NSError *v17;
  void *v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  NSError **v22;
  uint64_t v23;
  uint64_t v24;
  NSError **v25;
  unsigned __int16 v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 72))
    return 1;
  (*(void (**)(MTLLibraryDataWithArchive *, _QWORD))(*(_QWORD *)this + 312))(this, *((_QWORD *)this + 71));
  v29 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(_QWORD *)this + 320))(this, &v29, 4) == 4)
  {
    v4 = objc_alloc(MEMORY[0x1E0C99DE8]);
    v5 = (void *)objc_msgSend(v4, "initWithCapacity:", v29);
    if (!v29)
      goto LABEL_18;
    v25 = a2;
    v6 = 0;
    v7 = 0;
LABEL_5:
    v28 = 0;
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, int *, uint64_t))(*(_QWORD *)this + 320))(this, &v28, 4) == 4)
    {
      v8 = 0;
      v27 = 0;
      while ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(_QWORD *)this + 320))(this, &v27, 4) == 4)
      {
        v9 = v27;
        v27 = bswap32(v27);
        v26 = 0;
        if (v9 == 1413762629)
          goto LABEL_13;
        if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned __int16 *, uint64_t))(*(_QWORD *)this
                                                                                                 + 320))(this, &v26, 2) != 2)break;
        if (v27 != 1312902469)
        {
LABEL_13:
          v13 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(_QWORD *)this + 336))(this);
          if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(_QWORD *)this + 312))(this, v13 + v26) & 1) == 0)
          {
            v14 = v25;
            if (!v25)
              goto LABEL_27;
            v18 = (void *)MEMORY[0x1E0C99D80];
            v19 = *MEMORY[0x1E0CB2D50];
            v20 = CFSTR("Invalid library file (unexpected end of file)");
LABEL_26:
            v21 = objc_msgSend(v18, "dictionaryWithObject:forKey:", v20, v19, v25);
            *v14 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v21);
            goto LABEL_27;
          }
        }
        else
        {
          v10 = v26;
          MEMORY[0x1E0C80A78](2);
          v12 = (char *)&v25 - v11;
          if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, uint64_t))(*(_QWORD *)this + 320))(this, (char *)&v25 - v11, v10) != v10)
          {
            v22 = v25;
            if (v25)
            {
              v23 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid metallib file, unexpected end of file while parsing imported symbol names"), *MEMORY[0x1E0CB2D50]);
              *v22 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v23);
            }
            goto LABEL_27;
          }
          objc_msgSend(v5, "setObject:atIndexedSubscript:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v12), v6);
          v7 = (v7 + 1);
        }
        --v8;
        if (v27 == 1162757204)
        {
          if (v8)
          {
            if (++v6 < (unint64_t)v29)
              goto LABEL_5;
            v14 = v25;
            if ((_DWORD)v7 == v29)
            {
LABEL_18:
              *((_QWORD *)this + 14) = v5;
              return 1;
            }
            v24 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("failed to parse imported symbol names, expected %u symbols, found only %u"), v29, v7);
            if (!v14)
              goto LABEL_27;
          }
          else
          {
            v24 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("failed to parse imported symbol names, no tokens read"));
            v14 = v25;
            if (!v25)
              goto LABEL_27;
          }
          v20 = (const __CFString *)v24;
          v18 = (void *)MEMORY[0x1E0C99D80];
          v19 = *MEMORY[0x1E0CB2D50];
          goto LABEL_26;
        }
      }
    }
    v14 = v25;
    if (v25)
    {
      v18 = (void *)MEMORY[0x1E0C99D80];
      v19 = *MEMORY[0x1E0CB2D50];
      v20 = CFSTR("Invalid metallib file, unexpected end of file while parsing imported symbol names");
      goto LABEL_26;
    }
LABEL_27:

  }
  else if (a2)
  {
    v16 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid metallib file, unexpected end of file while parsing imported symbol names"), *MEMORY[0x1E0CB2D50]);
    v17 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v16);
    result = 0;
    *a2 = v17;
    return result;
  }
  return 0;
}

uint64_t MTLLibraryDataWithArchive::parseDynamicHeaderSection(MTLLibraryDataWithArchive *this, NSError **a2)
{
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v54[6];
  unsigned __int16 v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  unsigned int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 68))
    return 1;
  (*(void (**)(MTLLibraryDataWithArchive *, _QWORD))(*(_QWORD *)this + 312))(this, *((_QWORD *)this + 67));
  v59 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(_QWORD *)this + 320))(this, &v59, 4) != 4)
  {
    v7 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v7)
      MTLLibraryDataWithArchive::parseDynamicHeaderSection(v7, v8, v9, v10, v11, v12, v13, v14);
    return 0;
  }
  v4 = v59;
  v59 = bswap32(v59);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  if (v4 == 1413762629)
  {
    v5 = 0;
LABEL_5:
    v6 = 1;
    if (v5)
      goto LABEL_54;
    return v6;
  }
  do
  {
    v55 = 0;
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned __int16 *, uint64_t))(*(_QWORD *)this + 320))(this, &v55, 2) != 2)
    {
      v36 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v36)
LABEL_46:
        MTLLibraryDataWithArchive::parseDynamicHeaderSection(v36, v37, v38, v39, v40, v41, v42, v43);
LABEL_52:
      v6 = 0;
      goto LABEL_53;
    }
    if (v59 == 1312902469)
    {
      v21 = v55;
      MEMORY[0x1E0C80A78](2);
      v23 = &v54[-v22];
      if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, _BYTE *, uint64_t))(*(_QWORD *)this + 320))(this, &v54[-v22], v21) != v21)
      {
        v36 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (!v36)
          goto LABEL_52;
        goto LABEL_46;
      }
      if ((_DWORD)v21)
        *((_QWORD *)this + 12) = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v23);
    }
    else if (v59 == 1146703436)
    {
      v15 = v55;
      MEMORY[0x1E0C80A78](2);
      v17 = &v54[-v16];
      if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, _BYTE *, uint64_t))(*(_QWORD *)this + 320))(this, &v54[-v16], v15) != v15)
      {
        v44 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (v44)
          MTLLibraryDataWithArchive::parseDynamicHeaderSection(v44, v45, v46, v47, v48, v49, v50, v51);
        goto LABEL_52;
      }
      v18 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v17);
      v19 = v18;
      v20 = v57;
      if (v57 >= (uint64_t *)v58)
      {
        v25 = ((char *)v57 - v56) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v27 = v58 - v56;
        if ((v58 - v56) >> 2 > v26)
          v26 = v27 >> 2;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v58, v28);
        else
          v29 = 0;
        v30 = (uint64_t *)&v29[8 * v25];
        *v30 = v19;
        v31 = v30 + 1;
        v33 = (uint64_t *)v56;
        v32 = v57;
        if (v57 != (uint64_t *)v56)
        {
          do
          {
            v34 = *--v32;
            *--v30 = v34;
          }
          while (v32 != v33);
          v32 = (uint64_t *)v56;
        }
        v56 = (char *)v30;
        v57 = v31;
        v58 = &v29[8 * v28];
        if (v32)
          operator delete(v32);
        v57 = v31;
      }
      else
      {
        *v57 = v18;
        v57 = v20 + 1;
      }
    }
    else
    {
      v24 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(_QWORD *)this + 336))(this);
      if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(_QWORD *)this + 312))(this, v24 + v55) & 1) == 0)
      {
        if (a2)
        {
          v52 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid library file (unexpected end of file)"), *MEMORY[0x1E0CB2D50]);
          *a2 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v52);
        }
        goto LABEL_52;
      }
    }
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(_QWORD *)this + 320))(this, &v59, 4) != 4)
    {
      v36 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v36)
        goto LABEL_46;
      goto LABEL_52;
    }
    v35 = v59;
    v59 = bswap32(v59);
  }
  while (v35 != 1413762629);
  v5 = (uint64_t *)v56;
  if (v57 == (uint64_t *)v56)
    goto LABEL_5;
  *((_QWORD *)this + 13) = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:");
  v6 = 1;
LABEL_53:
  v5 = (uint64_t *)v56;
  if (v56)
  {
LABEL_54:
    v57 = v5;
    operator delete(v5);
  }
  return v6;
}

void sub_182658EDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(_QWORD *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLLibraryDataWithArchive::parseVariableListSection(MTLLibraryDataWithArchive *this, NSError **a2)
{
  void *v4;
  int v5;
  int v6;
  signed int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  void *v14;
  uint64_t v15;
  const __CFString *v16;
  uint64_t v17;
  NSError *v18;
  NSError **v19;
  void *v20;
  uint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  NSError **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _BYTE *v30;
  NSError **v31;
  __int128 v32;
  uint64_t v33;
  unsigned __int16 v34;
  signed int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD v39[5];
  _BYTE v40[24];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 70))
    return 1;
  (*(void (**)(MTLLibraryDataWithArchive *, _QWORD))(*(_QWORD *)this + 312))(this, *((_QWORD *)this + 69));
  v37 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(_QWORD *)this + 320))(this, &v37, 4) == 4)
  {
    v31 = a2;
    v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v37);
    if (v37)
    {
      v5 = 0;
      v29 = v39;
      v30 = v40;
LABEL_5:
      v36 = 0;
      if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, int *, uint64_t))(*(_QWORD *)this + 320))(this, &v36, 4) == 4)
      {
        v6 = 0;
        v35 = 0;
        v34 = 0;
        while ((*(uint64_t (**)(MTLLibraryDataWithArchive *, signed int *, uint64_t))(*(_QWORD *)this + 320))(this, &v35, 4) == 4)
        {
          v7 = v35;
          v35 = bswap32(v35);
          if (v7 == 1413762629)
            goto LABEL_28;
          if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned __int16 *, uint64_t))(*(_QWORD *)this + 320))(this, &v34, 2) != 2)break;
          if (v35 <= 1312902468)
          {
            if (v35 == 1212240712)
            {
              if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, _QWORD *, uint64_t))(*(_QWORD *)this + 320))(this, v29, 32) != 32)break;
            }
            else
            {
              if (v35 != 1296323418)
              {
LABEL_26:
                v11 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(_QWORD *)this + 336))(this);
                if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(_QWORD *)this + 312))(this, v11 + v34) & 1) == 0)
                {
                  v19 = v31;
                  if (!v31)
                    return 0;
                  v20 = (void *)MEMORY[0x1E0C99D80];
                  v21 = *MEMORY[0x1E0CB2D50];
                  v22 = CFSTR("Invalid library file (unexpected end of file)");
                  goto LABEL_38;
                }
                goto LABEL_27;
              }
              if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, _BYTE *, uint64_t))(*(_QWORD *)this + 320))(this, v30, 8) != 8)break;
            }
          }
          else
          {
            switch(v35)
            {
              case 1447383635:
                if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, __int128 *, uint64_t))(*(_QWORD *)this
                                                                                                 + 320))(this, &v32, 8) != 8)goto LABEL_36;
                v41 = v32;
                *((_DWORD *)this + 155) = WORD1(v32) | ((unsigned __int16)v32 << 16);
                break;
              case 1330005588:
                if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, __int128 *, uint64_t))(*(_QWORD *)this
                                                                                                 + 320))(this, &v32, 24) != 24)goto LABEL_36;
                *(_OWORD *)&v40[8] = v32;
                v39[4] = v33;
                break;
              case 1312902469:
                v8 = v34;
                MEMORY[0x1E0C80A78](2);
                v10 = (char *)&v28 - v9;
                if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, uint64_t))(*(_QWORD *)this + 320))(this, (char *)&v28 - v9, v8) != v8)
                {
                  v25 = v31;
                  if (v31)
                  {
                    v26 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid metallib file, unexpected end of file while parsing the variable list"), *MEMORY[0x1E0CB2D50]);
                    *v25 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v26);
                  }
                  return 0;
                }
                v38 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v10, 4);
                objc_msgSend(v4, "addObject:", v38);
                break;
              default:
                goto LABEL_26;
            }
          }
LABEL_27:
          ++v6;
          if (v35 == 1162757204)
          {
LABEL_28:
            if (v6)
            {
              if (++v5 < v37)
                goto LABEL_5;
              goto LABEL_30;
            }
            v27 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("failed to parse variable list, no tokens read"));
            v19 = v31;
            if (!v31)
              return 0;
            v22 = (const __CFString *)v27;
            v20 = (void *)MEMORY[0x1E0C99D80];
            v21 = *MEMORY[0x1E0CB2D50];
            goto LABEL_38;
          }
        }
      }
LABEL_36:
      v19 = v31;
      if (v31)
      {
        v20 = (void *)MEMORY[0x1E0C99D80];
        v21 = *MEMORY[0x1E0CB2D50];
        v22 = CFSTR("Invalid metallib file, unexpected end of file while parsing the variable list");
LABEL_38:
        v23 = objc_msgSend(v20, "dictionaryWithObject:forKey:", v22, v21);
        *v19 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v23);
      }
      return 0;
    }
LABEL_30:
    v12 = objc_msgSend(v4, "count");
    if (v37 == (_DWORD)v12)
    {
      *((_QWORD *)this + 15) = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:", v4);
      return 1;
    }
    v24 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("failed to parse the variable list, expected %u variables, found only %u"), v37, v12);
    a2 = v31;
    if (v31)
    {
      v16 = (const __CFString *)v24;
      v14 = (void *)MEMORY[0x1E0C99D80];
      v15 = *MEMORY[0x1E0CB2D50];
      goto LABEL_35;
    }
  }
  else if (a2)
  {
    v14 = (void *)MEMORY[0x1E0C99D80];
    v15 = *MEMORY[0x1E0CB2D50];
    v16 = CFSTR("Invalid metallib file, unexpected end of file while parsing the variable list");
LABEL_35:
    v17 = objc_msgSend(v14, "dictionaryWithObject:forKey:", v16, v15);
    v18 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v17);
    result = 0;
    *a2 = v18;
    return result;
  }
  return 0;
}

uint64_t MTLLibraryDataWithArchive::parseScriptSection(MTLLibraryDataWithArchive *this, NSError **a2)
{
  int v4;
  uint64_t result;
  void *v6;
  const char *v7;
  uint64_t v8;
  NSError *v9;
  unsigned int size[4];
  unsigned int v11;

  if (!*((_QWORD *)this + 76))
    return 1;
  (*(void (**)(MTLLibraryDataWithArchive *, _QWORD))(*(_QWORD *)this + 312))(this, *((_QWORD *)this + 75));
  v11 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(_QWORD *)this + 320))(this, &v11, 4) != 4)
  {
    if (!a2)
      return 0;
    v8 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid metallib file, unexpected end of file while parsing the script list"), *MEMORY[0x1E0CB2D50]);
    v9 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v8);
    result = 0;
    *a2 = v9;
    return result;
  }
  if (!v11)
    return 1;
  v4 = 0;
  while (1)
  {
    *(_QWORD *)&size[1] = 0;
    size[0] = 0;
    result = MTLLibraryDataWithArchive::extractScript(this, (char **)&size[1], size, a2);
    if (!(_DWORD)result)
      break;
    v6 = *(void **)&size[1];
    v7 = (const char *)(*(_QWORD *)&size[1] + 4);
    if (!strncmp((const char *)(*(_QWORD *)&size[1] + 4), "AIRC", 4uLL) || !strncmp(v7, "AIRS", 4uLL))
    {
      free(v6);
    }
    else if (!strncmp(v7, "MTLP", 4uLL))
    {
      MTLLibraryDataWithArchive::handleMetalScript(this, (char *)v6, size[0]);
    }
    if (++v4 >= v11)
      return 1;
  }
  return result;
}

uint64_t LibraryWithData::getFileSize(LibraryWithData *this)
{
  return *((_QWORD *)this + 82) - *((_QWORD *)this + 30);
}

uint64_t LibraryWithFile::getFileSize(LibraryWithFile *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x186DAC46C](*((_QWORD *)this + 81));
  fseek(*((FILE **)this + 81), 0, 2);
  v3 = MEMORY[0x186DAC46C](*((_QWORD *)this + 81));
  fseek(*((FILE **)this + 81), v2, 0);
  return v3 - *((_QWORD *)this + 30);
}

uint64_t MTLLibraryDataWithArchive::extractScript(MTLLibraryDataWithArchive *this, char **a2, unsigned int *a3, NSError **a4)
{
  uint64_t result;
  uint64_t v9;
  NSError *v10;
  int v11;

  v11 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, int *, uint64_t))(*(_QWORD *)this + 320))(this, &v11, 4) == 4)return MTLLibraryDataWithArchive::extractFlatbuffer(this, a2, a3, a4);
  if (!a4)
    return 0;
  v9 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid metallib file, unexpected end of file while parsing scripts"), *MEMORY[0x1E0CB2D50]);
  v10 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v9);
  result = 0;
  *a4 = v10;
  return result;
}

void sub_182659BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL14getGlobalStatev_block_invoke()
{
  LoaderGlobalState *v0;
  uint64_t v1;

  v0 = (LoaderGlobalState *)operator new();
  LoaderGlobalState::LoaderGlobalState(v0);
  getGlobalState(void)::_loaderGlobalState = v1;
}

void LoaderGlobalState::LoaderGlobalState(LoaderGlobalState *this)
{
  void *v2;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  v2 = (void *)MEMORY[0x186DAC640]();
  *(_QWORD *)this = (id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "executableURL"), "path"), "stringByDeletingLastPathComponent");
  objc_autoreleasePoolPop(v2);
  *((_QWORD *)this + 1) = dispatch_queue_create("MTLLoader global file queue", 0);
}

void LibraryWithFile::~LibraryWithFile(LibraryWithFile *this)
{
  LibraryWithFile::~LibraryWithFile(this);
  JUMPOUT(0x186DABFBCLL);
}

{
  FILE *v2;

  *(_QWORD *)this = &off_1E0FE0370;
  v2 = (FILE *)*((_QWORD *)this + 81);
  if (v2)
  {
    fileno(v2);
    change_fdguard_np();
    v2 = (FILE *)*((_QWORD *)this + 81);
  }
  fclose(v2);
  *((_QWORD *)this + 81) = 0;
  MTLLibraryDataWithArchive::~MTLLibraryDataWithArchive((id *)this);
}

void LibraryWithData::~LibraryWithData(dispatch_object_t *this)
{
  LibraryWithData::~LibraryWithData(this);
  JUMPOUT(0x186DABFBCLL);
}

{
  *this = (dispatch_object_t)&off_1E0FE0208;
  dispatch_release(this[85]);
  dispatch_release(this[84]);
  MTLLibraryDataWithArchive::~MTLLibraryDataWithArchive((id *)this);
}

void MTLLibraryDataWithArchive::~MTLLibraryDataWithArchive(id *this)
{
  dispatch_object_t i;
  NSObject *v3;

  *this = off_1E0FE0F48;

  this[31] = 0;
  for (i = (dispatch_object_t)this[47]; i; i = (dispatch_object_t)i->isa)
    dispatch_release((dispatch_object_t)i[5].isa);
  v3 = this[79];
  if (v3)
    dispatch_release(v3);

  this[32] = 0;
  this[33] = 0;

  this[34] = 0;
  this[80] = 0;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)(this + 60));
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)(this + 55));
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)(this + 53));
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)(this + 50), this[51]);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)(this + 45));
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)(this + 40));
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)(this + 35));
  MTLCachedLibraryData::~MTLCachedLibraryData((MTLCachedLibraryData *)this);
}

void std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(a1, *a2);
    std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void MTLLibraryData::~MTLLibraryData(MTLLibraryData *this)
{
  *(_QWORD *)this = off_1E0FE00A8;

  *((_QWORD *)this + 11) = 0;
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 40);
}

void MTLCachedLibraryData::~MTLCachedLibraryData(MTLCachedLibraryData *this)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E0FE0708;
  v2 = *((_QWORD *)this + 18);
  v3 = *(_OWORD *)((char *)this + 24);
  v4[0] = *(_OWORD *)((char *)this + 8);
  v4[1] = v3;
  MTLLibraryCache::removeLibraryData(v2, v4);

  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 12) = 0;

  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;

  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  MTLLibraryData::~MTLLibraryData((MTLLibraryData *)this);
}

void sub_18265A268(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void MTLLibraryCache::removeLibraryData(uint64_t a1, _OWORD *a2)
{
  uint64_t **v3;
  __int128 v4;
  uint64_t *v5;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t **)(a1 + 8);
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v5 = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(a1 + 8, (unsigned int *)v6);
  if ((uint64_t *)(a1 + 16) != v5)
  {
    std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__remove_node_pointer(v3, v5);
    operator delete(v5);
  }
}

uint64_t *std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;
  uint64_t *result;
  unsigned int v5;
  unint64_t i;
  unsigned int v7;
  unsigned int v8;

  v3 = (uint64_t *)(a1 + 8);
  result = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__lower_bound<MTLLibraryIdentifier>(a1, a2, *(uint64_t **)(a1 + 8), (uint64_t *)(a1 + 8));
  if (v3 == result)
    return v3;
  v5 = *((_DWORD *)result + 8);
  if (*a2 < v5)
    return v3;
  if (*a2 <= v5)
  {
    for (i = 0; i != 7; ++i)
    {
      v7 = a2[i + 1];
      v8 = *((_DWORD *)result + i + 9);
      if (v7 < v8)
      {
        if (i <= 6)
          return v3;
        return result;
      }
      if (v7 > v8)
        return result;
    }
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__emplace_unique_key_args<MTLLibraryIdentifier,std::piecewise_construct_t const&,std::tuple<MTLLibraryIdentifier&&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__find_equal<MTLLibraryIdentifier>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = (*a4)[1];
    v7[2] = **a4;
    v7[3] = v9;
    *((_QWORD *)v7 + 8) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_QWORD *std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__find_equal<MTLLibraryIdentifier>(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v5 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v8 = *a3;
    v6 = a3 + 1;
    v7 = v8;
    while (1)
    {
      while (1)
      {
        v9 = (_QWORD *)v4;
        v10 = *(_DWORD *)(v4 + 32);
        if (v7 >= v10)
          break;
LABEL_4:
        v4 = *v9;
        result = v9;
        if (!*v9)
          goto LABEL_23;
      }
      if (v7 <= v10)
      {
        v11 = 0;
        while (v11 != 7)
        {
          v12 = v6[v11];
          v13 = *((_DWORD *)v9 + v11 + 9);
          if (v12 < v13)
          {
            if (v11 <= 6)
              goto LABEL_4;
            break;
          }
          ++v11;
          if (v12 > v13)
            break;
        }
        if (v7 <= v10)
          break;
      }
LABEL_20:
      result = v9 + 1;
      v4 = v9[1];
      if (!v4)
        goto LABEL_23;
    }
    v14 = 0;
    while (v14 != 7)
    {
      v15 = *((_DWORD *)v9 + v14 + 9);
      v16 = v6[v14];
      if (v15 < v16)
      {
        if (v14 > 6)
          break;
        goto LABEL_20;
      }
      ++v14;
      if (v15 > v16)
        break;
    }
  }
  else
  {
    v9 = result;
  }
LABEL_23:
  *a2 = v9;
  return result;
}

uint64_t MTLLibraryData::MTLLibraryData(uint64_t result, __int128 *a2)
{
  __int128 v2;

  *(_QWORD *)result = off_1E0FE00A8;
  v2 = 0uLL;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_DWORD *)(result + 72) = 1065353216;
  *(_DWORD *)(result + 84) = 0;
  *(_QWORD *)(result + 88) = 0;
  atomic_store(1u, (unsigned int *)(result + 80));
  if (a2)
  {
    v2 = *a2;
    *(_OWORD *)(result + 24) = a2[1];
  }
  else
  {
    *(_OWORD *)(result + 24) = 0uLL;
  }
  *(_OWORD *)(result + 8) = v2;
  return result;
}

uint64_t *std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

void sub_18265A7A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10A1C401F86E653);
  _Unwind_Resume(a1);
}

void MTLConstantStorage::setConstantData(uint64_t **this, char *a2, uint64_t a3, const void *a4)
{
  char v5;
  size_t v8;
  void *v9;
  _OWORD *v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  void **v14;

  v5 = a3;
  v8 = _MTLConstantDataSize(a3);
  v9 = (void *)operator new[]();
  memcpy(v9, a4, v8);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v14 = __p;
  v10 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v14);
  v11 = *((_QWORD *)v10 + 8);
  if (v11)
    MEMORY[0x186DABFA4](v11, 0x1000C8077774924);
  *((_QWORD *)v10 + 8) = v9;
  *((_BYTE *)v10 + 56) = v5;
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_18265A8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x186DABFA4](v15, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *((_BYTE *)v7 + 56) = 0;
    *((_QWORD *)v7 + 8) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TokenData> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__construct_node<std::pair<std::string const,TokenData> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

__n128 std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__construct_node<std::pair<std::string const,TokenData> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_18265AB94(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

const void **std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(v12, v11 + 16, a2) & 1) != 0)return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

BOOL MTLPipelineDataCache::parseDataFileHeader(MTLPipelineDataCache *this)
{
  uint64_t v1;
  unint64_t v2;
  NSObject *v3;
  _BOOL8 result;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  _QWORD *i;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  void *__p;
  __int128 v26;
  void **p_p;

  v1 = *((_QWORD *)this + 17);
  if (v1 && (v2 = *((_QWORD *)this + 18), v2 > 0x27))
  {
    if (*(_DWORD *)v1 == 1297109068
      && *(_WORD *)(v1 + 4) == 1
      && !*(_WORD *)(v1 + 6)
      && (v5 = *(_DWORD *)(v1 + 8), v5 == *((_DWORD *)this + 38))
      && (v6 = *(_DWORD *)(v1 + 12), v6 == *((_DWORD *)this + 39))
      && *(_QWORD *)(v1 + 16) == v2)
    {
      *((_DWORD *)this + 38) = v5;
      *((_DWORD *)this + 39) = v6;
      v7 = *(_QWORD *)(v1 + 32);
      v8 = v2 - v7;
      if (v2 < v7 || (v9 = *(_QWORD *)(v1 + 24), v9 > v2 - 8))
      {
        v22 = MTLPipelineLibraryDebugLog();
        result = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
        if (result)
        {
          MTLPipelineDataCache::parseDataFileHeader();
          return 0;
        }
      }
      else
      {
        v10 = *(_QWORD *)(v1 + v9);
        v11 = !is_mul_ok(v10, 0x30uLL);
        v12 = __CFADD__(v9 + 8, 48 * v10);
        if (v11 || v12 || v9 + 8 + 48 * v10 > v2)
        {
          v23 = MTLPipelineLibraryDebugLog();
          result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          if (result)
          {
            MTLPipelineDataCache::parseDataFileHeader();
            return 0;
          }
        }
        else
        {
          if (v10)
          {
            v13 = v1 + v7;
            v14 = (char *)this + 64;
            for (i = (_QWORD *)(v9 + v1 + 48); ; i += 6)
            {
              v16 = operator new(0x28uLL);
              __p = v16;
              v26 = xmmword_1827FC840;
              v17 = *(_OWORD *)(i - 3);
              *v16 = *(_OWORD *)(i - 5);
              v16[1] = v17;
              *((_BYTE *)v16 + 32) = 0;
              v18 = *(i - 1);
              v19 = *i;
              if (__CFADD__(v18, *i) || v18 + *i > v8)
                break;
              p_p = &__p;
              v20 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v14, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
              *((_QWORD *)v20 + 5) = v19;
              *((_QWORD *)v20 + 6) = v18;
              *((_QWORD *)v20 + 7) = v13 + v18;
              if (SHIBYTE(v26) < 0)
                operator delete(__p);
              result = 1;
              if (!--v10)
                return result;
            }
            v24 = MTLPipelineLibraryDebugLog();
            if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)
              || (MTLPipelineDataCache::parseDataFileHeader((uint64_t)v24, (unsigned __int8 *)&v26 + 15) & 1) != 0)
            {
              operator delete(__p);
            }
            return 0;
          }
          return 1;
        }
      }
    }
    else
    {
      v21 = MTLPipelineLibraryDebugLog();
      result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
      if (result)
      {
        MTLPipelineDataCache::parseDataFileHeader();
        return 0;
      }
    }
  }
  else
  {
    v3 = MTLPipelineLibraryDebugLog();
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (result)
    {
      MTLPipelineDataCache::parseDataFileHeader();
      return 0;
    }
  }
  return result;
}

void sub_18265B0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_18265B344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_18265B3F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

_DWORD *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(_DWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *a1 = *(_DWORD *)a2;
  v4 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[8] = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__construct_node<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__construct_node<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_18265B5E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t MTLRangeAllocatorGetMaxFreeSize(unsigned int *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t result;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = a1[2];
  if (!(_DWORD)v2)
    return 0;
  result = 0;
  v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
  do
  {
    v6 = *(v5 - 1);
    if (a2)
    {
      if (v6 % a2)
        v7 = a2 - v6 % a2;
      else
        v7 = 0;
      v6 += v7;
    }
    v8 = *v5;
    v5 += 2;
    v9 = v8 + 1;
    v10 = v8 + 1 - v6;
    if (v10 <= result)
      v10 = result;
    if (v9 > v6)
      result = v10;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t getCompilerConnectionManager(void *a1, uint64_t a2)
{
  uint64_t *v3;

  if (a1)
    return objc_msgSend(a1, "getCompilerConnectionManager:", a2);
  if ((_DWORD)a2 == 32024)
  {
    if (getCompilerConnectionHost(int)::onceToken != -1)
      dispatch_once(&getCompilerConnectionHost(int)::onceToken, &__block_literal_global_1379);
    v3 = &getCompilerConnectionHost(int)::gCompilerConnection;
  }
  else
  {
    if ((_DWORD)a2 != 32023)
      abort();
    if (getCompilerConnectionHost(int)::onceToken != -1)
      dispatch_once(&getCompilerConnectionHost(int)::onceToken, &__block_literal_global_1378);
    v3 = &getCompilerConnectionHost(int)::gCompilerConnection;
  }
  return *v3;
}

uint64_t MTLCompilerConnectionManagerPrivate::registerCompilerPlugin(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = -1;
  v3 = *(NSObject **)(a1 + 24);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN35MTLCompilerConnectionManagerPrivate22registerCompilerPluginEPKcPU27objcproto16OS_dispatch_data8NSObject_block_invoke;
  v6[3] = &unk_1E0FE3798;
  v6[6] = a1;
  v6[7] = a2;
  v6[4] = a3;
  v6[5] = &v7;
  dispatch_sync(v3, v6);
  v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

BOOL reuseCacheOnReboot(void)
{
  int v0;

  v0 = gReuseCacheOnReboot;
  if (!reuseCacheOnRebootInitialised)
  {
    v0 = MTLGetEnvDefault("FS_CACHE_REUSE_ON_REBOOT", gReuseCacheOnReboot) != 0;
    gReuseCacheOnReboot = v0;
    reuseCacheOnRebootInitialised = 1;
  }
  return v0 != 0;
}

uint64_t ___ZL15initWrapperTypev_block_invoke()
{
  void *v0;
  char *v1;
  uint64_t result;
  uint64_t v3;
  int v4;
  Boolean keyExistsAndHasValidFormat;
  const __CFString *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v6 = CFSTR("METAL_DEVICE_WRAPPER_TYPE");
  v7[0] = &unk_1E103B408;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
  _CFXPreferencesRegisterDefaultValues();
  v1 = getenv((const char *)objc_msgSend(CFSTR("METAL_DEVICE_WRAPPER_TYPE"), "UTF8String"));
  if (v1)
  {
    result = strtol(v1, 0, 0);
    wrapperType = result;
    goto LABEL_4;
  }
  result = objc_msgSend(v0, "integerForKey:", CFSTR("METAL_DEVICE_WRAPPER_TYPE"));
  wrapperType = result;
  if ((_DWORD)result)
  {
LABEL_4:
    if ((result - 1) < 2)
      return result;
    goto LABEL_5;
  }
  v3 = MTLGetEnvDefault("MTL_DEBUG_LAYER", 0);
  result = MTLGetEnvDefault("MTL_SHADER_VALIDATION", 0);
  if (v3 && result)
  {
    v4 = 5;
  }
  else
  {
    if (v3)
    {
      wrapperType = 1;
      return result;
    }
    if (!result)
    {
      result = wrapperType;
      goto LABEL_4;
    }
    v4 = 4;
  }
  wrapperType = v4;
LABEL_5:
  keyExistsAndHasValidFormat = 0;
  result = CFPreferencesGetAppBooleanValue(CFSTR("UseMetalTelemetry"), CFSTR("com.apple.Metal"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    if ((_DWORD)result)
      wrapperType = 2;
  }
  return result;
}

_QWORD *addOrRemoveShaderFunctionCache@<X0>(__int128 *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t FSCache;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = (_QWORD *)addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache;
  if (a2)
  {
    if (addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache
                                     + 24))(*(_QWORD *)addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache);
      result = (_QWORD *)addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache;
      if (addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache)
      {
        v6 = std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache);
        result = (_QWORD *)MEMORY[0x186DABFBC](v6, 0x20C40A4A59CD2);
      }
      addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache = 0;
    }
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    if (addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache)
    {
      v7 = std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache);
      MEMORY[0x186DABFBC](v7, 0x20C40A4A59CD2);
    }
    v8 = (_QWORD *)operator new();
    FSCache = MTLCompilerCache::createFSCache(0, "functions", a1);
    result = std::shared_ptr<MTLCompilerCache>::shared_ptr[abi:ne180100]<MTLCompilerCache,void>(v8, FSCache);
    addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache = (uint64_t)v8;
    v10 = v8[1];
    *a3 = *v8;
    a3[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  return result;
}

void sub_18265BEF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerCache::createFSCache(uint64_t a1, char *a2, __int128 *a3)
{
  uint64_t v6;

  v6 = operator new();
  MTLCompilerFSCache::MTLCompilerFSCache(v6, a1, a2, a3);
  return v6;
}

void sub_18265BF74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10B3C403FEBB32CLL);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerFSCache::MTLCompilerFSCache(uint64_t a1, uint64_t a2, char *__s, __int128 *a4)
{
  uint64_t v7;
  __int128 v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)a1 = &off_1E0FE0588;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v7 = a1 + 56;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 80), __s);
  v8 = *a4;
  *(_OWORD *)(a1 + 120) = a4[1];
  *(_OWORD *)(a1 + 104) = v8;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (a2)
    MEMORY[0x186DABE30](v7, a2);
  *(_DWORD *)(a1 + 20) = 0x40000000;
  v9 = MTLGetEnvDefault("MTL_SHADER_CACHE_SIZE", 0x40000000);
  *(_DWORD *)(a1 + 20) = v9;
  v10 = MTLGetEnvDefault("FS_CACHE_SIZE", v9);
  *(_DWORD *)(a1 + 20) = v10;
  if (v10 < 0x40000001)
  {
    if (v10)
      *(_BYTE *)(a1 + 24) = 0;
    else
      *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = 0x40000000;
  }
  return a1;
}

void sub_18265C084(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ___ZL24MTLDeviceArrayInitializev_block_invoke()
{
  void *v0;

  v0 = (void *)MEMORY[0x186DAC640]();
  _deviceArrayQueue = (uint64_t)dispatch_queue_create("com.Metal.DeviceArray", 0);
  _deviceArray = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_autoreleasePoolPop(v0);
}

uint64_t MTLGetEnvDefault(const char *a1, uint64_t a2)
{
  char *v3;

  v3 = getenv(a1);
  if (v3)
    return strtol(v3, 0, 0);
  else
    return a2;
}

void MTLLogAPIValidationType(int a1)
{
  _BOOL4 v1;
  const char *v2;

  switch(a1)
  {
    case 1:
      if (MTLFailureTypeGetEnabled(3uLL))
      {
        NSLog(CFSTR("Metal API Extended Validation Enabled"));
      }
      else
      {
        v1 = MTLReportFailureTypeEnabled(1uLL);
        v2 = "Disabled";
        if (v1)
          v2 = "Enabled";
        NSLog(CFSTR("Metal API Validation %s"), v2);
      }
      break;
    case 2:
      NSLog(CFSTR("Metal API Telemetry Enabled!"));
      break;
    case 3:
      NSLog(CFSTR("Metal API Counters Enabled!"));
      break;
    case 4:
      goto LABEL_6;
    case 5:
      MTLLogAPIValidationType(1);
LABEL_6:
      NSLog(CFSTR("Metal GPU Validation Enabled"));
      break;
    default:
      return;
  }
}

void MTLRegisterDevices()
{
  void *v0;
  MTLIOAccelServiceGlobalContext *v1;

  v0 = (void *)MEMORY[0x186DAC640]();
  os_unfair_lock_lock((os_unfair_lock_t)&MTLRegisterDevices_lock);
  if (!_mtlIOAccelServiceGlobalContext)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&MTLRegisterDevices_lock);
    v1 = objc_alloc_init(MTLIOAccelServiceGlobalContext);
    os_unfair_lock_lock((os_unfair_lock_t)&MTLRegisterDevices_lock);
    if (_mtlIOAccelServiceGlobalContext || !v1)
    {

    }
    else
    {
      _mtlIOAccelServiceGlobalContext = (uint64_t)v1;
      -[MTLIOAccelServiceGlobalContext processPendingCreateIOAccelServiceRequests](v1, "processPendingCreateIOAccelServiceRequests");
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&MTLRegisterDevices_lock);
  objc_autoreleasePoolPop(v0);
}

void *getMetalPluginClassForService(io_registry_entry_t a1)
{
  CFTypeRef CFProperty;
  const void *v3;
  CFTypeID v4;
  uint64_t v5;
  void *v6;
  CFTypeRef v7;
  const void *v8;
  CFTypeID v9;
  void *v10;

  CFProperty = IORegistryEntryCreateCFProperty(a1, CFSTR("MetalPluginName"), 0, 0);
  if (CFProperty)
  {
    v3 = CFProperty;
    v4 = CFGetTypeID(CFProperty);
    if (v4 != CFStringGetTypeID()
      || (v5 = objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithPath:", objc_msgSend((id)objc_msgSend(CFSTR("/System/Library/Extensions"), "stringByAppendingPathComponent:", v3), "stringByAppendingString:", CFSTR(".bundle")))) == 0)
    {
      v10 = 0;
LABEL_14:
      CFRelease(v3);
      return v10;
    }
    v6 = (void *)v5;
    v7 = IORegistryEntryCreateCFProperty(a1, CFSTR("MetalPluginClassName"), 0, 0);
    if (v7)
    {
      v8 = v7;
      v9 = CFGetTypeID(v7);
      if (v9 == CFStringGetTypeID())
      {
        v10 = (void *)objc_msgSend(v6, "classNamed:", v8);
        CFRelease(v8);
        if (v10)
          goto LABEL_12;
      }
      else
      {
        CFRelease(v8);
      }
    }
    v10 = (void *)objc_msgSend(v6, "principalClass");
LABEL_12:
    if (!objc_msgSend(v10, "isSubclassOfClass:", objc_opt_class()))
      v10 = 0;
    goto LABEL_14;
  }
  return 0;
}

void MTLAddDevice(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD block[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  void *v18;

  v13 = 0;
  v14 = &v13;
  v15 = 0x3052000000;
  v16 = __Block_byref_object_copy__6;
  v17 = __Block_byref_object_dispose__6;
  v18 = a1;
  if (!_deviceArray)
  {
    v9 = "_deviceArray != NULL";
    v10 = 977;
    goto LABEL_10;
  }
  if (!objc_msgSend(a1, "conformsToProtocol:", &unk_1EDCF1690))
  {
    v9 = "[newDevice conformsToProtocol:@protocol(MTLDevice)]";
    v10 = 978;
    goto LABEL_10;
  }
  if ((objc_msgSend((id)v14[5], "conformsToProtocol:", &unk_1EDCF39D0) & 1) == 0)
  {
    v9 = "[newDevice conformsToProtocol:@protocol(MTLDeviceSPI)]";
    v10 = 979;
LABEL_10:
    MTLReleaseAssertionFailure((uint64_t)"MTLAddDevice", v10, (uint64_t)v9, 0, a5, a6, a7, a8, v11);
  }
  objc_msgSend((id)v14[5], "initLimits");
  objc_msgSend((id)v14[5], "initFeatureQueries");
  objc_msgSend((id)v14[5], "initWorkarounds");
  if (_CFMZEnabled())
    objc_msgSend(a1, "allowLibrariesFromOtherPlatforms");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MTLAddDevice_block_invoke;
  block[3] = &unk_1E0FE3468;
  block[4] = &v13;
  dispatch_sync((dispatch_queue_t)_deviceArrayQueue, block);
  _Block_object_dispose(&v13, 8);
}

void sub_18265C504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL16initFailureModesv_block_invoke()
{
  void *v0;
  _DWORD *v1;
  char *v2;
  void *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  int v8;
  void *__p;
  void *v10;
  char *v11;
  const __CFString *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  const __CFString *v16;
  uint64_t v17;
  const __CFString *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v1 = operator new(0x40uLL);
  *(_QWORD *)v1 = "ignore";
  v1[2] = 4;
  v10 = v1 + 16;
  v11 = (char *)(v1 + 16);
  *((_QWORD *)v1 + 2) = "assert";
  v1[6] = 6;
  *((_QWORD *)v1 + 4) = "nslog";
  v1[10] = 5;
  *((_QWORD *)v1 + 6) = "exception";
  v1[14] = 1;
  __p = v1;
  v18 = CFSTR("METAL_ERROR_MODE");
  v19[0] = &unk_1E103B420;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
  _CFXPreferencesRegisterDefaultValues();
  v2 = getenv((const char *)objc_msgSend(CFSTR("METAL_ERROR_MODE"), "UTF8String"));
  if (v2)
  {
    errorModes[0] = strtol(v2, 0, 0);
  }
  else
  {
    errorModes[0] = objc_msgSend(v0, "integerForKey:", CFSTR("METAL_ERROR_MODE"));
    MTLGetEnvCase<MTLErrorModeType>("MTL_ERROR_MODE", errorModes, (const char ***)&__p);
  }
  v16 = CFSTR("METAL_DEBUG_ERROR_MODE");
  v3 = (void *)MEMORY[0x1E0CB37E8];
  if (MTLValidationEnabled())
    v4 = 6;
  else
    v4 = 4;
  v17 = objc_msgSend(v3, "numberWithInt:", v4);
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
  _CFXPreferencesRegisterDefaultValues();
  v5 = getenv((const char *)objc_msgSend(CFSTR("METAL_DEBUG_ERROR_MODE"), "UTF8String"));
  if (v5)
  {
    dword_1ECD4517C = strtol(v5, 0, 0);
  }
  else
  {
    dword_1ECD4517C = objc_msgSend(v0, "integerForKey:", CFSTR("METAL_DEBUG_ERROR_MODE"));
    MTLGetEnvCase<MTLErrorModeType>("MTL_DEBUG_LAYER_ERROR_MODE", &dword_1ECD4517C, (const char ***)&__p);
  }
  v14 = CFSTR("METAL_WARNING_MODE");
  v15 = &unk_1E103B438;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1);
  _CFXPreferencesRegisterDefaultValues();
  v6 = getenv((const char *)objc_msgSend(CFSTR("METAL_WARNING_MODE"), "UTF8String"));
  if (v6)
  {
    dword_1ECD45180 = strtol(v6, 0, 0);
  }
  else
  {
    dword_1ECD45180 = objc_msgSend(v0, "integerForKey:", CFSTR("METAL_WARNING_MODE"));
    MTLGetEnvCase<MTLErrorModeType>("MTL_DEBUG_LAYER_WARNING_MODE", &dword_1ECD45180, (const char ***)&__p);
  }
  v12 = CFSTR("METAL_ERROR_CHECK_EXTENDED_MODE");
  v13 = &unk_1E103B438;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
  _CFXPreferencesRegisterDefaultValues();
  v7 = getenv((const char *)objc_msgSend(CFSTR("METAL_ERROR_CHECK_EXTENDED_MODE"), "UTF8String"));
  if (v7)
    v8 = strtol(v7, 0, 0);
  else
    v8 = objc_msgSend(v0, "integerForKey:", CFSTR("METAL_ERROR_CHECK_EXTENDED_MODE"));
  dword_1ECD45184 = v8;
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_18265E864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL MTLValidationEnabled()
{
  if (initWrapperType(void)::pred != -1)
    dispatch_once(&initWrapperType(void)::pred, &__block_literal_global_1238);
  return (wrapperType & 0xFFFFFFFB) == 1;
}

uint64_t _MTLShouldRemapPresent()
{
  if (_MTLShouldRemapPresent_onceToken != -1)
    dispatch_once(&_MTLShouldRemapPresent_onceToken, &__block_literal_global_21);
  return (_MTLShouldRemapPresent_shouldRemapPresent != 0) & objc_opt_respondsToSelector();
}

_QWORD *MTLDispatchListAppendBlock(_QWORD *result, _QWORD **a2, const void *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  if (a3)
  {
    v5 = result;
    v6 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
    result = _Block_copy(a3);
    *v6 = 0;
    v6[1] = result;
    v7 = *a2;
    if (*a2)
    {
      v8 = a2;
    }
    else
    {
      v7 = a2;
      v8 = v5;
    }
    *v7 = v6;
    *v8 = v6;
  }
  return result;
}

BOOL MTLGetEnvCase<MTLErrorModeType>(const char *a1, _DWORD *a2, const char ***a3)
{
  char *v6;
  const char **v7;
  const char **v8;

  v6 = getenv(a1);
  if (v6)
  {
    v7 = *a3;
    v8 = a3[1];
    while (1)
    {
      if (v7 == v8)
        MTLGetEnvCase<MTLErrorModeType>(a1, a3, a3 + 1);
      if (!strcmp(v6, *v7))
        break;
      v7 += 2;
    }
    *a2 = *((_DWORD *)v7 + 2);
  }
  return v6 != 0;
}

_QWORD *FunctionReplyParameters::FunctionReplyParameters(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v9;
  char *v10;

  *a1 = a2;
  a1[1] = a3;
  v9 = 0;
  v10 = &v9;
  a1[2] = objc_msgSend((id)std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a5, &v9, (uint64_t)&std::piecewise_construct, &v10)[3], "value");
  v9 = 0;
  v10 = &v9;
  a1[3] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  v9 = 2;
  v10 = &v9;
  a1[4] = objc_msgSend((id)std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a5, &v9, (uint64_t)&std::piecewise_construct, &v10)[3], "value");
  v9 = 2;
  v10 = &v9;
  a1[5] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  v9 = 1;
  v10 = &v9;
  a1[6] = objc_msgSend((id)std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a5, &v9, (uint64_t)&std::piecewise_construct, &v10)[3], "value");
  v9 = 1;
  v10 = &v9;
  a1[7] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  v9 = 3;
  v10 = &v9;
  a1[8] = objc_msgSend((id)std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a5, &v9, (uint64_t)&std::piecewise_construct, &v10)[3], "value");
  v9 = 3;
  v10 = &v9;
  a1[9] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  v9 = 6;
  v10 = &v9;
  a1[12] = objc_msgSend((id)std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a5, &v9, (uint64_t)&std::piecewise_construct, &v10)[3], "value");
  v9 = 6;
  v10 = &v9;
  a1[13] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  v9 = 4;
  v10 = &v9;
  a1[10] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  v9 = 5;
  v10 = &v9;
  a1[11] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  v9 = 7;
  v10 = &v9;
  a1[14] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(uint64_t a1, char *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_18265F2F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(uint64_t a1, char *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_18265F518(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void MTLCompilerFSCache::addElement(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  os_unfair_lock_s *v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  v9 = *(_QWORD *)(a1 + 144);
  if (v9)
    std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::__emplace_unique_key_args<HashKey,HashKey const&>(v9, (unint64_t *)a2, (_OWORD *)a2);
  os_unfair_lock_unlock(v8);
  v10 = malloc_type_malloc(a4 + 64, 0x583AF936uLL);
  if (v10)
  {
    v11 = v10;
    *(_OWORD *)md = 0u;
    v16 = 0u;
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, a3, a4);
    CC_SHA256_Final(md, &c);
    v12 = v16;
    *v11 = *(_OWORD *)md;
    v11[1] = v12;
    v13 = *(_OWORD *)(a2 + 16);
    v11[2] = *(_OWORD *)a2;
    v11[3] = v13;
    memcpy(v11 + 4, a3, a4);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    if (*(_QWORD *)(a1 + 48))
    {
      *(_QWORD *)c.count = 0;
      fscache_insert_and_retain();
      if (*(_QWORD *)c.count)
      {
        MTLCompilerFSCache::flushElement();
        fscache_release();
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    free(v11);
  }
}

void sub_18265F698(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18265FAB4(_Unwind_Exception *a1, MTLHashKey *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a10);
  _Unwind_Resume(a1);
}

void sub_1826639BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1826641A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,MTLHashKey *a25)
{
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1826643E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t createHashForType@<X0>(int a1@<W0>, const void *a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X6>, unsigned __int8 *a8@<X8>)
{
  void *v15;
  __int128 *v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  void *v27;
  uint64_t v28;
  const char *v29;
  CC_LONG v30;
  __int128 *v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t k;
  __int128 *v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t m;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  CC_SHA256_CTX c;
  int data;
  _BYTE v48[128];
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  data = a1;
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, &data, 4u);
  CC_SHA256_Update(&c, a4, 0x20u);
  if (a3)
    CC_SHA256_Update(&c, a2, a3);
  if (a5)
  {
    v15 = *(void **)(a5 + 88);
    if (v15 && objc_msgSend(*(id *)(a5 + 88), "count"))
    {
      CC_SHA256_Update(&c, "functions", 9u);
      v16 = (__int128 *)objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", 0), "bitCodeHash");
      v17 = v16[1];
      v49 = *v16;
      v50 = v17;
      if ((unint64_t)objc_msgSend(v15, "count") >= 2)
      {
        v18 = 1;
        do
        {
          v19 = objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", v18), "bitCodeHash");
          for (i = 0; i != 32; i += 8)
            *(_QWORD *)((char *)&v49 + i) ^= *(_QWORD *)(v19 + i);
          v18 = (v18 + 1);
        }
        while (objc_msgSend(v15, "count") > v18);
      }
      CC_SHA256_Update(&c, &v49, 0x20u);
    }
    v21 = *(void **)(a5 + 104);
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v42, v48, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v43;
      do
      {
        for (j = 0; j != v23; ++j)
        {
          if (*(_QWORD *)v43 != v24)
            objc_enumerationMutation(v21);
          v26 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * j);
          v27 = (void *)objc_msgSend(v21, "objectForKeyedSubscript:", v26);
          v28 = objc_msgSend(v26, "UTF8String");
          if (v27)
          {
            v29 = (const char *)v28;
            if (objc_msgSend(v27, "count"))
            {
              if (v29)
              {
                v30 = strlen(v29);
                CC_SHA256_Update(&c, v29, v30);
              }
              v31 = (__int128 *)objc_msgSend((id)objc_msgSend(v27, "objectAtIndexedSubscript:", 0), "bitCodeHash");
              v32 = v31[1];
              v49 = *v31;
              v50 = v32;
              if ((unint64_t)objc_msgSend(v27, "count") >= 2)
              {
                v33 = 1;
                do
                {
                  v34 = objc_msgSend((id)objc_msgSend(v27, "objectAtIndexedSubscript:", v33), "bitCodeHash");
                  for (k = 0; k != 32; k += 8)
                    *(_QWORD *)((char *)&v49 + k) ^= *(_QWORD *)(v34 + k);
                  v33 = (v33 + 1);
                }
                while (objc_msgSend(v27, "count") > v33);
              }
              CC_SHA256_Update(&c, &v49, 0x20u);
            }
          }
        }
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v42, v48, 16);
      }
      while (v23);
    }
    a7 = *(void **)(a5 + 96);
  }
  if (a7 && objc_msgSend(a7, "count"))
  {
    CC_SHA256_Update(&c, "privateFunctions", 0x10u);
    v36 = (__int128 *)objc_msgSend((id)objc_msgSend(a7, "objectAtIndexedSubscript:", 0), "bitCodeHash");
    v37 = v36[1];
    v49 = *v36;
    v50 = v37;
    if ((unint64_t)objc_msgSend(a7, "count") >= 2)
    {
      v38 = 1;
      do
      {
        v39 = objc_msgSend((id)objc_msgSend(a7, "objectAtIndexedSubscript:", v38), "bitCodeHash");
        for (m = 0; m != 32; m += 8)
          *(_QWORD *)((char *)&v49 + m) ^= *(_QWORD *)(v39 + m);
        v38 = (v38 + 1);
      }
      while (objc_msgSend(a7, "count") > v38);
    }
    CC_SHA256_Update(&c, &v49, 0x20u);
  }
  if (a6)
  {
    *(_QWORD *)&v49 = objc_msgSend(a6, "hash");
    CC_SHA256_Update(&c, &v49, 8u);
  }
  if (useRelaxedMath())
  {
    *(_QWORD *)&v49 = 1;
    CC_SHA256_Update(&c, &v49, 8u);
  }
  return CC_SHA256_Final(a8, &c);
}

BOOL processArchiveLibrary(uint64_t a1, dispatch_data_t data, uint64_t a3, void *a4, void *a5, uint64_t *a6, _QWORD *a7, uint64_t a8)
{
  NSObject *subrange;
  size_t v14;
  _MTLLibrary *v15;
  NSArray *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  id v22;
  _BOOL8 v23;
  uint64_t v24;
  NSObject *object;
  uint64_t *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  subrange = data;
  v33 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v14 = *(unsigned int *)(a3 + 44);
    if (!(_DWORD)v14)
    {
      v23 = 0;
      *a6 = 0;
      return v23;
    }
    v27 = a6;
    subrange = dispatch_data_create_subrange(data, *(unsigned int *)(a3 + 40), v14);
  }
  else
  {
    v27 = a6;
  }
  object = subrange;
  v15 = MTLLibraryBuilder::newLibraryWithData(*(_MTLDevice ***)(a1 + 424), (_MTLDevice *)a1, subrange, 0, a7, (uint64_t)a6, (uint64_t)a7, a8);
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v16 = -[_MTLLibrary functionNames](v15, "functionNames");
  v17 = -[NSArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v29 != v19)
          objc_enumerationMutation(v16);
        v21 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i);
        objc_msgSend(a5, "addObject:", v21, object);
        if (a4)
        {
          v22 = -[_MTLLibrary newFunctionWithName:](v15, "newFunctionWithName:", v21);
          objc_msgSend(a4, "setObject:forKey:", v22, v21);

        }
      }
      v18 = -[NSArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v18);
  }
  v23 = v15 != 0;
  if (v27 && v15)
  {
    v24 = -[_MTLLibrary libraryData](v15, "libraryData");
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    *v27 = v24;
  }

  if (a3)
    dispatch_release(object);
  return v23;
}

_MTLLibrary *MTLLibraryBuilder::newLibraryWithData(_MTLDevice **a1, _MTLDevice *a2, NSObject *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MTLLibraryBuilder::newLibraryWithData(a1, a2, a3, 0, a4, a6, a7, a8);
}

uint64_t MTLLibraryDataWithArchive::functionNames(os_unfair_lock_s *this)
{
  MTLLibraryDataWithArchive::allocateFunctionNames(this);
  return *(_QWORD *)&this[32]._os_unfair_lock_opaque;
}

void sub_182665060(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x1020C404C310C12);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::destroy(a1, a2[1]);
    v4 = a2[6];
    if (v4)
      MEMORY[0x186DABFA4](v4, 0x1000C8077774924);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,MTLConstantStorage::ConstantData>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void MTLConstantStorage::MTLConstantStorage(MTLConstantStorage *this, const void ***a2)
{
  uint64_t *v3;

  v3 = std::map<std::string,MTLConstantStorage::ConstantData>::map[abi:ne180100]((uint64_t *)this, a2);
  std::map<unsigned short,MTLConstantStorage::ConstantData>::map[abi:ne180100](v3 + 3, (uint64_t)(a2 + 3));
}

void sub_1826652DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,MTLConstantStorage::ConstantData> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__find_equal<unsigned short>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__construct_node<std::pair<unsigned short const,MTLConstantStorage::ConstantData> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__find_equal<unsigned short>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int16 *)a2 + 16), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int16 *)v10 + 16) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int16 *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 16))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int16 *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__construct_node<std::pair<unsigned short const,MTLConstantStorage::ConstantData> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<unsigned short const,MTLConstantStorage::ConstantData>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_182665580(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MTLConstantStorage::ConstantData> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__construct_node<std::pair<std::string const,MTLConstantStorage::ConstantData> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__construct_node<std::pair<std::string const,MTLConstantStorage::ConstantData> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,MTLConstantStorage::ConstantData>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_182665680(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t MultiLevelCacheBase::failOnFSCacheMiss(MultiLevelCacheBase *this)
{
  return (*((unsigned __int8 *)this + 32) >> 2) & 1;
}

NSString *MTLCompilerFunctionRequest::setSpecializedName(MTLCompilerFunctionRequest *this, NSString *a2)
{
  id var15;
  NSString *result;

  var15 = this->var15;
  if (var15)

  result = a2;
  this->var15 = result;
  return result;
}

MTLCompilerFunctionRequest *MTLCompilerFunctionRequest::setFunction(MTLCompilerFunctionRequest *this, _MTLFunction *a2)
{
  _MTLFunction *var4;
  MTLCompilerFunctionRequest *v4;

  var4 = (_MTLFunction *)this->var4;
  if (var4 != a2)
  {
    v4 = this;
    if (var4)

    this = a2;
    v4->var4 = this;
  }
  return this;
}

uint64_t newErrorWithWarningLog(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = objc_msgSend(CFSTR("Compilation succeeded with: \n\n"), "stringByAppendingString:", result);
    v2 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v1, *MEMORY[0x1E0CB2D50]);
    return objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 4, v2);
  }
  return result;
}

void sub_1826667C0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLRangeAllocatorInitWithStartRange(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  if (a5 <= 1)
    v8 = 1;
  else
    v8 = a5;
  if (a4 <= 1)
    v9 = 1;
  else
    v9 = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 32) = v9 - 1;
  result = allocElement(a1, 0);
  if ((_DWORD)result)
  {
    v11 = *(_QWORD **)a1;
    *v11 = a2;
    v11[1] = a3 + a2;
  }
  return result;
}

_QWORD *MTLRangeAllocatorDeallocate(_QWORD *result, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  unint64_t *v19;

  v4 = result;
  v5 = ((result[4] + a3) & ~result[4]) + a2;
  v6 = v5 - 1;
  v7 = *((unsigned int *)result + 2);
  if ((_DWORD)v7)
  {
    v8 = (_QWORD *)*result;
    v9 = *(_QWORD *)*result;
    if (v9 >= a2)
    {
      LODWORD(v10) = 0;
      v12 = 0;
LABEL_9:
      if (v12)
      {
        if (v5 >= v9)
        {
          v17 = v7 - 1;
          v18 = &v8[2 * v10];
          v8[2 * (v10 - 1) + 1] = v18[1];
          *((_DWORD *)v4 + 2) = v17;
          return memmove(v18, v18 + 2, 16 * (v17 - v10));
        }
        LODWORD(v7) = v10;
        goto LABEL_17;
      }
      if (v5 >= v9)
      {
        v13 = &v8[2 * v10];
        if (*v13 > a2)
          *v13 = a2;
        return result;
      }
    }
    else
    {
      v10 = 0;
      v11 = v8 + 1;
      while (v7 - 1 != v10)
      {
        v9 = v11[1];
        v11 += 2;
        ++v10;
        if (v9 >= a2)
        {
          v12 = *(v11 - 2) + 1 >= a2;
          goto LABEL_9;
        }
      }
      if (*v11 + 1 >= a2)
      {
        v8 = (_QWORD *)*result;
LABEL_17:
        v14 = &v8[2 * (v7 - 1)];
        v16 = v14[1];
        v15 = v14 + 1;
        if (v6 > v16)
          *v15 = v6;
        return result;
      }
      LODWORD(v10) = *((_DWORD *)result + 2);
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  result = (_QWORD *)allocElement((uint64_t)result, v10);
  if ((_DWORD)result)
  {
    v19 = (unint64_t *)(*v4 + 16 * v10);
    *v19 = a2;
    v19[1] = v6;
  }
  return result;
}

uint64_t MTLRangeAllocatorAllocate(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int i;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;

  result = 0;
  if (a2 && a3)
  {
    if (a4)
    {
      v7 = a4 - 1;
      v8 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 32);
      v7 = v8;
    }
    v9 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v9)
      return 0;
    v10 = 0;
    v11 = (v8 + a2) & ~v8;
    v12 = *(_QWORD *)a1;
    for (i = 1; ; ++i)
    {
      v14 = (_QWORD *)(v12 + v10);
      v15 = *(_QWORD *)(v12 + v10);
      v16 = *(_QWORD *)(v12 + v10 + 8);
      v17 = (v15 + v7) & ~v7;
      v18 = v17 + v11;
      v19 = v17 + v11 - 1;
      if (v19 <= v16)
        break;
      v10 += 16;
      if (16 * v9 == v10)
        return 0;
    }
    if (v17 == v15)
    {
      if (v19 == v16)
      {
        *(_DWORD *)(a1 + 8) = v9 - 1;
        memmove(v14, (const void *)(v12 + v10 + 16), 16 * (v9 - i));
      }
      else
      {
        *v14 = v18;
      }
    }
    else if (v19 == v16)
    {
      v14[1] = v17 - 1;
    }
    else
    {
      result = allocElement(a1, i);
      if (!(_DWORD)result)
        return result;
      v20 = (_QWORD *)(*(_QWORD *)a1 + v10);
      v20[1] = v17 - 1;
      v20[2] = v18;
      v20[3] = v16;
    }
    *a3 = v17;
    return 1;
  }
  return result;
}

uint64_t allocElement(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 != v4 || (v6 = *(_QWORD *)(a1 + 24)) == 0)
  {
    if (*(_QWORD *)a1)
    {
      memmove((void *)(*(_QWORD *)a1 + 16 * a2 + 16), (const void *)(*(_QWORD *)a1 + 16 * a2), 16 * (v4 - a2));
LABEL_11:
      ++*(_DWORD *)(a1 + 8);
      return 1;
    }
    v6 = *(_QWORD *)(a1 + 24);
  }
  v7 = v6 + v5;
  if (v6 + v5)
  {
    result = (uint64_t)malloc_type_malloc(16 * v7, 0x10F7EB30uLL);
    if (!result)
      return result;
    v9 = result;
    if (*(_QWORD *)a1)
    {
      memmove((void *)result, *(const void **)a1, 16 * a2);
      memmove((void *)(v9 + 16 * a2 + 16), (const void *)(*(_QWORD *)a1 + 16 * a2), 16 * (*(_DWORD *)(a1 + 8) - a2));
      free(*(void **)a1);
    }
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 16) = v7;
    goto LABEL_11;
  }
  return 0;
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

double __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  return result;
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

__n128 __Block_byref_object_copy__7(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void MTLResourceListRelease(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = a1[9];
  if (v1)
  {
    a1[9] = 0;
    v3 = a1;
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
    v3[10] = 0;
    v2 = *(_QWORD **)(v1 + 16);
    v3[11] = v2;
    *v2 = v3;
    *(_QWORD *)(v1 + 16) = v3 + 10;
    ++*(_DWORD *)(v1 + 28);
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
    a1 = (_QWORD *)v1;
  }

}

_QWORD *std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *a2 && result[3] == a2[1] && result[4] == a2[2] && result[5] == a2[3])
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t MTLCachedLibraryData::trueRelease(MTLCachedLibraryData *this)
{
  uint64_t result;

  result = MTLAtomicDecrement((unsigned int *)this + 20);
  if (this)
  {
    if (!(_DWORD)result)
      return (*(uint64_t (**)(MTLCachedLibraryData *))(*(_QWORD *)this + 8))(this);
  }
  return result;
}

uint64_t MTLAtomicDecrement(unsigned int *a1)
{
  unsigned int v1;
  uint64_t v2;

  do
  {
    v1 = __ldaxr(a1);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, a1));
  return v2;
}

void MTLLibraryContainer::~MTLLibraryContainer(MTLLibraryContainer *this)
{
  MTLLibraryData *var3;

  objc_msgSend(this->var4, "removeAllObjects");

  this->var4 = 0;
  this->var5 = 0;

  this->var6 = 0;
  var3 = this->var3;
  if (var3)
    (*(void (**)(MTLLibraryData *))(*(_QWORD *)var3 + 24))(var3);

  dispatch_release((dispatch_object_t)this->var7);
}

_MTLLibrary *MTLLibraryBuilder::newLibraryWithArchive(_MTLDevice **a1, __int128 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  MTLLibraryContainer *v9;
  uint64_t v10;
  uint64_t v11;
  MTLLibraryData *v12;
  NSMutableDictionary *v13;
  _MTLLibrary *v14;
  NSError *v16;
  char v17;

  v17 = 0;
  v8 = MTLLibraryBuilder::findOrCreateLibraryContainer((uint64_t)a1, a2, &v17);
  v9 = (MTLLibraryContainer *)v8;
  if (!v17)
  {
    dispatch_group_wait(*(dispatch_group_t *)(v8 + 80), 0xFFFFFFFFFFFFFFFFLL);
    if (v9->var3)
    {
      v14 = -[_MTLLibrary initWithLibraryContainer:device:]([_MTLLibrary alloc], "initWithLibraryContainer:device:", v9, a1[4]);
      if (!a3)
        goto LABEL_14;
    }
    else
    {
      v14 = 0;
      if (!a3)
        goto LABEL_14;
    }
LABEL_13:
    *a3 = (id)objc_msgSend(v9->var8, "copy");
LABEL_14:
    MTLLibraryBuilder::releaseCacheEntry((MTLLibraryBuilder *)a1, v9);
    return v14;
  }
  v10 = _MTLGetLibrariesCache(a1[4]);
  v16 = 0;
  v11 = MTLLibraryCache::newLibraryData(v10, a2, (uint64_t)&v16, a4);
  if (v11)
  {
    v12 = (MTLLibraryData *)v11;
    v13 = (NSMutableDictionary *)objc_opt_new();
    MTLLibraryContainer::init(v9, v12, v13, 0, v16);
    if (v9->var3)
      v14 = -[_MTLLibrary initWithLibraryContainer:device:]([_MTLLibrary alloc], "initWithLibraryContainer:device:", v9, a1[4]);
    else
      v14 = 0;

    (*(void (**)(MTLLibraryData *))(*(_QWORD *)v12 + 24))(v12);
    if (!a3)
      goto LABEL_14;
    goto LABEL_13;
  }
  MTLLibraryContainer::init(v9, 0, 0, 0, v16);
  if (a3)
    *a3 = (id)objc_msgSend(v9->var8, "copy");
  MTLLibraryBuilder::releaseCacheEntry((MTLLibraryBuilder *)a1, v9);
  return 0;
}

void MTLCachedLibraryData::release(MTLLibraryData *this)
{
  MTLLibraryCache::releaseLibraryData(*((os_unfair_lock_s **)this + 18), this);
}

uint64_t MTLLibraryBuilder::findOrCreateLibraryContainer(uint64_t a1, __int128 *a2, char *a3)
{
  __int128 v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  NSObject *v11;
  __int128 v12;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v6 = a2[1];
  v15 = *a2;
  v16 = v6;
  v7 = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(a1 + 8, (unsigned int *)&v15);
  if ((uint64_t *)(a1 + 16) == v7 || (v8 = v7[8]) == 0)
  {
    v8 = operator new();
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 88) = 0;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    atomic_store(1u, (unsigned int *)(v8 + 8));
    v10 = a2[1];
    *(_OWORD *)(v8 + 12) = *a2;
    *(_OWORD *)(v8 + 28) = v10;
    v11 = dispatch_group_create();
    *(_QWORD *)(v8 + 80) = v11;
    dispatch_group_enter(v11);
    v12 = a2[1];
    v15 = *a2;
    v16 = v12;
    v14 = &v15;
    *((_QWORD *)std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__emplace_unique_key_args<MTLLibraryIdentifier,std::piecewise_construct_t const&,std::tuple<MTLLibraryIdentifier&&>,std::tuple<>>((uint64_t **)(a1 + 8), (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v14)+ 8) = v8;
    v9 = 1;
  }
  else
  {
    MTLAtomicIncrement((unsigned int *)(v8 + 8));
    v9 = 0;
  }
  *a3 = v9;
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return v8;
}

void sub_1826676C4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryCache::newLibraryData(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v8 = a2[1];
  v14 = *a2;
  v15 = v8;
  v9 = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(a1 + 8, (unsigned int *)&v14);
  if ((uint64_t *)(a1 + 16) == v9)
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, a3);
    if (v10)
    {
      v11 = a2[1];
      v14 = *a2;
      v15 = v11;
      v13 = &v14;
      *((_QWORD *)std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__emplace_unique_key_args<MTLLibraryIdentifier,std::piecewise_construct_t const&,std::tuple<MTLLibraryIdentifier&&>,std::tuple<>>((uint64_t **)(a1 + 8), (unsigned int *)&v14, (uint64_t)&std::piecewise_construct, &v13)+ 8) = v10;
    }
  }
  else
  {
    v10 = v9[8];
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return v10;
}

void sub_182667884(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLLibraryContainer::init(MTLLibraryContainer *this, MTLLibraryData *a2, NSMutableDictionary *a3, NSArray *a4, NSError *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  this->var3 = a2;
  if (a2)
    (*(void (**)(MTLLibraryData *))(*(_QWORD *)a2 + 16))(a2);
  this->var4 = a3;
  if (a4)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v9 = -[NSArray countByEnumeratingWithState:objects:count:](a4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (!v9)
      goto LABEL_16;
    v10 = v9;
    v11 = 0;
    v12 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v16 != v12)
          objc_enumerationMutation(a4);
        if (objc_msgSend((id)objc_msgSend(this->var4, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i)), "functionType") == 4)++v11;
      }
      v10 = -[NSArray countByEnumeratingWithState:objects:count:](a4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v10);
    if (v11)
    {
      if (v11 == -[NSArray count](a4, "count"))
      {
        this->var6 = a4;
        this->var5 = objc_alloc_init(MEMORY[0x1E0C99D20]);
      }
      else
      {
        v14 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Compiler found unsupported library with both qualified functions and extern functions"), *MEMORY[0x1E0CB2D50]);
        this->var8 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 2, v14);
      }
    }
    else
    {
LABEL_16:
      this->var5 = a4;
      this->var6 = objc_alloc_init(MEMORY[0x1E0C99D20]);
    }
  }
  if (!this->var8)
    this->var8 = a5;
  dispatch_group_leave((dispatch_group_t)this->var7);
}

void MTLLibraryBuilder::newLibraryWithSource(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  char *v19;
  int v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  void *v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  int size;
  char *v40;
  void *v41;
  void *v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  const std::string::value_type *p_str;
  std::string::size_type v48;
  int64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  NSObject **v53;
  char *v54;
  char *v55;
  NSObject *v56;
  void *v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  const std::string::value_type *v62;
  std::string::size_type v63;
  int v64;
  int v65;
  uint64_t v66;
  const char *v67;
  const char *v68;
  int v69;
  const char *v70;
  unsigned int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t j;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unsigned int v83;
  const char *v84;
  const char *v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  BOOL v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  std::string::size_type v102;
  void *v103;
  int v104;
  void **v105;
  int v106;
  void *v107;
  unsigned int v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  int v112;
  int v113;
  unsigned __int8 v114;
  NSObject **v115;
  NSObject **v116;
  char v117;
  uint64_t v118;
  NSObject *v119;
  void **v120;
  _BYTE *v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t k;
  void *v128;
  void *v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;
  size_t v133;
  size_t v134;
  size_t v135;
  void *v136;
  void *v137;
  void **v138;
  size_t v139;
  size_t v140;
  void **v141;
  size_t v142;
  size_t v143;
  size_t v144;
  size_t v145;
  size_t v146;
  size_t v147;
  size_t v148;
  std::string *v149;
  size_t v150;
  size_t v151;
  size_t v152;
  size_t v153;
  size_t v154;
  size_t v155;
  size_t v156;
  _BOOL4 v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const __CFString *v164;
  unint64_t v165;
  uint64_t v166;
  const __CFString *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  char v175;
  __int128 v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  void *v181;
  int v182;
  char *__s;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  int v188;
  int v189;
  int v190;
  unint64_t v191;
  char v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  _BOOL4 v196;
  uint64_t v198;
  void *v199;
  void *v200;
  _BYTE *v201;
  unsigned int v202;
  id v203;
  _BYTE v204[32];
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  _QWORD applier[6];
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  void *__p;
  void **p_p;
  uint64_t v219;
  unint64_t v220;
  void *v221[2];
  char v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  void *v227[2];
  unsigned __int8 v228;
  void *v229[2];
  unsigned __int8 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  std::string v235;
  void *v236;
  void *v237;
  unint64_t v238;
  unsigned __int8 md[16];
  __int128 v240;
  _BYTE v241[128];
  _BYTE v242[128];
  _BYTE __src[32];
  _BYTE v244[128];
  CC_SHA256_CTX __str;
  uint64_t v246;

  v9 = a5;
  v246 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v164 = CFSTR("source must not be nil.");
    v165 = 0;
    v166 = 8657;
    goto LABEL_304;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v164 = CFSTR("source is not a NSString.");
    v165 = 1;
    v166 = 8660;
LABEL_304:
    MTLReportFailure(v165, "newLibraryWithSource", v166, (uint64_t)v164, a5, a6, a7, a8, v170);
    if (!a4)
      goto LABEL_10;
    goto LABEL_4;
  }
  if (!a4)
    goto LABEL_10;
LABEL_4:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    MTLReportFailure(1uLL, "newLibraryWithSource", 8665, (uint64_t)CFSTR("options is not a MTLCompileOptions."), v13, v14, v15, v16, v170);
  if (objc_msgSend(a4, "libraryType") == 1 && !objc_msgSend((id)objc_msgSend(a4, "installName"), "length"))
  {
    v98 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "options.installName cannot be nil or empty when options.libraryType is MTLLibraryTypeDynamic.");
    if (!v98)
      v98 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", "options.installName cannot be nil or empty when options.libraryType is MTLLibraryTypeDynamic.", 1);
    v99 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v98, *MEMORY[0x1E0CB2D50]);
    v203 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v99);
    (*(void (**)(uint64_t, _QWORD))(a6 + 16))(a6, 0);

    return;
  }
  if (objc_msgSend(a4, "optimizationLevel") < 0 || objc_msgSend(a4, "optimizationLevel") >= 2)
  {
    v159 = objc_msgSend(a4, "optimizationLevel");
    MTLReportFailure(1uLL, "newLibraryWithSource", 8678, (uint64_t)CFSTR("options.optimizationLevel has unsupported value %u"), v160, v161, v162, v163, v159);
  }
LABEL_10:
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      goto LABEL_12;
    v167 = CFSTR("device is not a MTLDevice.");
    v168 = 1;
    v169 = 8685;
  }
  else
  {
    v167 = CFSTR("device must not be nil.");
    v168 = 0;
    v169 = 8682;
  }
  MTLReportFailure(v168, "newLibraryWithSource", v169, (uint64_t)v167, a5, a6, a7, a8, v170);
LABEL_12:
  v237 = 0;
  v236 = 0;
  v238 = 0;
  v201 = a4;
  if (a4)
    v17 = (void *)objc_msgSend(a4, "preprocessorMacros");
  else
    v17 = 0;
  v18 = getenv("MTL_DISABLE_FASTMATH");
  if (!v18)
    v18 = "0";
  MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled = strtoul(v18, 0, 0) != 0;
  v19 = getenv("MTL_REPLACE_FAST_MATH_WITH_RELAXED_MATH");
  if (!v19)
    v19 = "0";
  MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envReplaceFastMathWithRelaxedMath = strtoul(v19, 0, 0) != 0;
  v193 = a6;
  v195 = a1;
  v192 = v9;
  if (a4)
  {
    v189 = objc_msgSend(a4, "glBufferBindPoints");
    v20 = MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled;
    if (!MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled)
      v20 = objc_msgSend(a4, "fastMathEnabled");
  }
  else
  {
    v189 = 0;
    v20 = MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled;
    if (!MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled)
      v20 = 1;
  }
  v21 = v20 != 0;
  v22 = objc_msgSend(a2, "workaroundNewLibraryWithSourceReplaceFastMathWithRelaxedMath");
  v23 = MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled;
  v24 = MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled == 0;
  v93 = v20 == 0;
  v25 = 2
      * (MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled == 0);
  if (v93)
    v24 = 0;
  if (a4
    && !MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled)
  {
    v25 = objc_msgSend(a4, "mathMode");
    v23 = objc_msgSend(a4, "mathFloatingPointFunctions");
    v24 = v21;
  }
  if (MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envReplaceFastMathWithRelaxedMath)
    v26 = 1;
  else
    v26 = v22;
  if (v25 == 2)
    v24 = 1;
  v177 = v26 & v24;
  if ((v26 & v24) != 0)
    v27 = 1;
  else
    v27 = v25;
  v178 = v23;
  v180 = v27;
  if (a4)
  {
    v175 = objc_msgSend(a4, "debuggingEnabled");
    v172 = objc_msgSend(a4, "compileSymbolVisibility");
    v188 = objc_msgSend(a4, "allowReferencingUndefinedSymbols");
    v187 = objc_msgSend(a4, "maxTotalThreadsPerThreadgroup");
  }
  else
  {
    v188 = 0;
    v175 = 0;
    v172 = 0;
    v187 = 0;
  }
  v28 = _MTLCompilePerformanceStatisticsEnabled();
  v29 = v28;
  if (v201)
    v30 = v28;
  else
    v30 = 1;
  if ((v30 & 1) == 0)
  {
    v29 = objc_msgSend(v201, "compileTimeStatisticsEnabled");
    goto LABEL_47;
  }
  if (v201)
  {
LABEL_47:
    v186 = objc_msgSend(v201, "tracingEnabled");
    goto LABEL_48;
  }
  v186 = 0;
LABEL_48:
  std::string::basic_string[abi:ne180100]<0>(&v235, "");
  v199 = a2;
  if (objc_msgSend(v201, "libraries")
    && (v233 = 0u,
        v234 = 0u,
        v231 = 0u,
        v232 = 0u,
        v31 = (void *)objc_msgSend(v201, "libraries"),
        (v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v231, v244, 16)) != 0))
  {
    v202 = 0;
    v33 = *(_QWORD *)v232;
    do
    {
      for (i = 0; i != v32; ++i)
      {
        if (*(_QWORD *)v232 != v33)
          objc_enumerationMutation(v31);
        v35 = *(void **)(*((_QWORD *)&v231 + 1) + 8 * i);
        v36 = objc_msgSend(v35, "airData");
        v37 = v36;
        if (v36)
        {
          v38 = v29;
          size = dispatch_data_get_size(v36);
          v40 = (char *)v237;
          if ((unint64_t)v237 >= v238)
          {
            v49 = ((_BYTE *)v237 - (_BYTE *)v236) >> 3;
            if ((unint64_t)(v49 + 1) >> 61)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v50 = (uint64_t)(v238 - (_QWORD)v236) >> 2;
            if (v50 <= v49 + 1)
              v50 = v49 + 1;
            if (v238 - (unint64_t)v236 >= 0x7FFFFFFFFFFFFFF8)
              v51 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            if (v51)
              v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v238, v51);
            else
              v52 = 0;
            v53 = (NSObject **)&v52[8 * v49];
            *v53 = v37;
            v41 = v53 + 1;
            v54 = (char *)v237;
            v55 = (char *)v236;
            if (v237 != v236)
            {
              do
              {
                v56 = *((_QWORD *)v54 - 1);
                v54 -= 8;
                *--v53 = v56;
              }
              while (v54 != v55);
              v54 = (char *)v236;
            }
            v236 = v53;
            v237 = v41;
            v238 = (unint64_t)&v52[8 * v51];
            if (v54)
              operator delete(v54);
          }
          else
          {
            *(_QWORD *)v237 = v37;
            v41 = v40 + 8;
          }
          v237 = v41;
          v202 += (size + 7) & 0xFFFFFFFC;
          v29 = v38;
        }
        else
        {
          v42 = (void *)objc_msgSend(v35, "libraryPath");
          if (objc_msgSend(v42, "length"))
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v42, "UTF8String"));
            escapeString((char *)&__p, (std::string *)__src);
            v43 = std::string::insert((std::string *)__src, 0, "-Wl,");
            v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
            *(_QWORD *)&v204[16] = *((_QWORD *)&v43->__r_.__value_.__l + 2);
            *(_OWORD *)v204 = v44;
            v43->__r_.__value_.__l.__size_ = 0;
            v43->__r_.__value_.__r.__words[2] = 0;
            v43->__r_.__value_.__r.__words[0] = 0;
            v45 = std::string::append((std::string *)v204, " ");
            v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
            *(_QWORD *)&__str.hash[2] = *((_QWORD *)&v45->__r_.__value_.__l + 2);
            *(_OWORD *)__str.count = v46;
            v45->__r_.__value_.__l.__size_ = 0;
            v45->__r_.__value_.__r.__words[2] = 0;
            v45->__r_.__value_.__r.__words[0] = 0;
            if ((__str.hash[3] & 0x80000000) == 0)
              p_str = (const std::string::value_type *)&__str;
            else
              p_str = *(const std::string::value_type **)__str.count;
            if ((__str.hash[3] & 0x80000000) == 0)
              v48 = HIBYTE(__str.hash[3]);
            else
              v48 = *(_QWORD *)__str.hash;
            std::string::append(&v235, p_str, v48);
            if (SHIBYTE(__str.hash[3]) < 0)
              operator delete(*(void **)__str.count);
            if ((v204[23] & 0x80000000) != 0)
              operator delete(*(void **)v204);
            if ((__src[23] & 0x80000000) != 0)
              operator delete(*(void **)__src);
            if (SHIBYTE(v219) < 0)
              operator delete(__p);
          }
        }
      }
      v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v231, v244, 16);
    }
    while (v32);
  }
  else
  {
    v202 = 0;
  }
  v57 = v201;
  if (!objc_msgSend(v201, "installName"))
    goto LABEL_105;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend((id)objc_msgSend(v201, "installName"), "UTF8String"));
  escapeString((char *)&__p, (std::string *)__src);
  v58 = std::string::insert((std::string *)__src, 0, "-Wl,-install_name -Wl,");
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  *(_QWORD *)&v204[16] = *((_QWORD *)&v58->__r_.__value_.__l + 2);
  *(_OWORD *)v204 = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = std::string::append((std::string *)v204, " ");
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  *(_QWORD *)&__str.hash[2] = *((_QWORD *)&v60->__r_.__value_.__l + 2);
  *(_OWORD *)__str.count = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  if ((__str.hash[3] & 0x80000000) == 0)
    v62 = (const std::string::value_type *)&__str;
  else
    v62 = *(const std::string::value_type **)__str.count;
  if ((__str.hash[3] & 0x80000000) == 0)
    v63 = HIBYTE(__str.hash[3]);
  else
    v63 = *(_QWORD *)__str.hash;
  std::string::append(&v235, v62, v63);
  if (SHIBYTE(__str.hash[3]) < 0)
    operator delete(*(void **)__str.count);
  if ((v204[23] & 0x80000000) != 0)
    operator delete(*(void **)v204);
  if ((__src[23] & 0x80000000) != 0)
    operator delete(*(void **)__src);
  if (SHIBYTE(v219) < 0)
  {
    operator delete(__p);
    if (v201)
      goto LABEL_106;
  }
  else
  {
LABEL_105:
    if (v201)
    {
LABEL_106:
      v64 = objc_msgSend(v201, "preserveInvariance");
      goto LABEL_109;
    }
  }
  v64 = 0;
LABEL_109:
  v65 = objc_msgSend(v199, "workaroundNewLibraryWithSourceImplicitInvariantPosition");
  v185 = objc_msgSend(v199, "workaroundNewLibraryWithSourceImplicitInvariantPosition");
  if (v201)
  {
    v66 = objc_msgSend(v201, "optimizationLevel");
    v67 = "-Os ";
    if (v66 != 1)
      v67 = 0;
    __s = (char *)v67;
  }
  else
  {
    __s = 0;
  }
  v184 = objc_msgSend(v201, "enableLogging");
  memset(__src, 0, sizeof(__src));
  v68 = "--driver-mode=metal -x metal ";
  if (!v201)
  {
    v196 = 1;
LABEL_122:
    v72 = _MTLGetMTLCompilerLLVMVersionForDevice(v199);
    if (getDefaultLanguageVersion(int)::pred != -1)
      dispatch_once(&getDefaultLanguageVersion(int)::pred, &__block_literal_global_1317);
    v73 = getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion;
    if ((unint64_t)getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion >= 0x30002)
      v73 = 196610;
    if ((v72 - 32023) >= 2)
      v71 = 0;
    else
      v71 = v73;
    goto LABEL_129;
  }
  v69 = objc_msgSend(v201, "sourceLanguage");
  v70 = "--driver-mode=openclc -x cl ";
  if (v69 != 1)
    v70 = 0;
  v196 = v69 == 0;
  if (v69)
    v68 = v70;
  if (!v201[8])
    goto LABEL_122;
  v71 = objc_msgSend(v201, "languageVersion");
LABEL_129:
  std::string::basic_string[abi:ne180100]<0>(v229, "");
  std::string::basic_string[abi:ne180100]<0>(v227, "");
  v182 = v64 | v65;
  v194 = (char *)v68;
  v190 = v29;
  if (!v196)
  {
    v82 = 0;
    v171 = 0;
    v83 = v202;
    if (v201)
      goto LABEL_202;
    goto LABEL_204;
  }
  if (!v17
    || (v225 = 0u,
        v226 = 0u,
        v223 = 0u,
        v224 = 0u,
        (v74 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v223, v242, 16)) == 0))
  {
    v75 = 0;
    goto LABEL_149;
  }
  v75 = 0;
  v76 = *(_QWORD *)v224;
  do
  {
    for (j = 0; j != v74; ++j)
    {
      if (*(_QWORD *)v224 != v76)
        objc_enumerationMutation(v17);
      v78 = *(void **)(*((_QWORD *)&v223 + 1) + 8 * j);
      v79 = (void *)objc_msgSend(v17, "objectForKey:", v78);
      v75 += objc_msgSend(v78, "lengthOfBytesUsingEncoding:", 4) + 2;
      if (v79)
      {
        objc_opt_class();
        v80 = v75 + 1;
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v81 = objc_msgSend((id)objc_msgSend(v79, "stringValue"), "lengthOfBytesUsingEncoding:", 4);
          goto LABEL_141;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v81 = objc_msgSend(v79, "lengthOfBytesUsingEncoding:", 4);
LABEL_141:
          v80 += v81;
        }
        v75 = v80 + 1;
        continue;
      }
    }
    v74 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v223, v242, 16);
  }
  while (v74);
LABEL_149:
  v84 = "-fmetal-math-mode=relaxed ";
  if (!v180)
    v84 = "-fmetal-math-mode=safe ";
  if (v180 == 2)
    v85 = "-fmetal-math-mode=fast ";
  else
    v85 = v84;
  MEMORY[0x186DABE30](v229, v85);
  if ((v230 & 0x80u) == 0)
    v86 = v230;
  else
    v86 = (unint64_t)v229[1];
  if (v177 & 1 | (v178 == 1))
    v87 = "-fmetal-math-fp32-functions=precise ";
  else
    v87 = "-fmetal-math-fp32-functions=fast ";
  MEMORY[0x186DABE30](v227, v87);
  v88 = v228;
  v89 = (char *)v227[1];
  v90 = objc_msgSend(v201, "libraryType");
  if ((v88 & 0x80u) == 0)
    v91 = (char *)v88;
  else
    v91 = v89;
  v92 = &v91[v86 + v75];
  v93 = v172 == 1 && v90 == 1;
  if (v93)
    v92 += 20;
  if (v188)
    v94 = v92 + 24;
  else
    v94 = v92;
  if (v187)
  {
    memset(&__str, 0, 64);
    snprintf((char *)&__str, 0x3FuLL, "-fmax-total-threads-per-threadgroup=%lu ", v187);
    v94 += strlen((const char *)&__str);
  }
  v57 = v201;
  v68 = v194;
  v95 = v94 + 22;
  if (!v182)
    v95 = v94;
  if (v185)
    v96 = v95 + 30;
  else
    v96 = v95;
  if (__s)
    v96 += strlen(__s);
  if (v184)
    v96 += 23;
  if (HIWORD(v71) <= 2u)
    snprintf(__src, 0x1FuLL, "-std=ios-metal%u.%u ");
  else
    snprintf(__src, 0x1FuLL, "-std=metal%u.%u ");
  v97 = &v96[strlen(__src)];
  if ((v186 & 1) != 0)
  {
    v171 = 0;
    v97 += 24;
    v83 = v202;
  }
  else
  {
    v83 = v202;
    if ((v175 & 1) != 0
      || (objc_opt_respondsToSelector() & 1) != 0 && objc_msgSend(v199, "shaderDebugInfoCaching"))
    {
      v97 += 34;
      v171 = "-debug-info-kind=line-tables-only ";
    }
    else
    {
      v171 = 0;
    }
  }
  v100 = objc_msgSend(v201, "libraryType");
  v101 = v97 + 16;
  if (!v189)
    v101 = v97;
  if (v100 == 1)
    v101 += 27;
  v102 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
  if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v102 = v235.__r_.__value_.__l.__size_;
  v82 = &v101[v102];
  if (v201)
  {
LABEL_202:
    v103 = (void *)objc_msgSend(v57, "additionalCompilerArguments");
    if (v103)
    {
      v181 = v103;
      v179 = 0;
      v82 += objc_msgSend(v103, "lengthOfBytesUsingEncoding:", 4) + 1;
      goto LABEL_205;
    }
  }
LABEL_204:
  v181 = 0;
  v179 = 1;
LABEL_205:
  v104 = strlen(v68);
  MTLGetCompilerWorkingDir(v221);
  if (v222 < 0)
  {
    if (!v221[1])
      goto LABEL_211;
    v105 = (void **)v221[0];
LABEL_210:
    v200 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("-working-directory \"%s\" "), v105);
    v106 = objc_msgSend(v200, "lengthOfBytesUsingEncoding:", 4);
  }
  else
  {
    if (v222)
    {
      v105 = v221;
      goto LABEL_210;
    }
LABEL_211:
    v106 = 0;
    v200 = 0;
  }
  v107 = *(void **)(v195 + 48);
  if (v107)
    v106 += objc_msgSend(v107, "length") + 24;
  v174 = v104 + (_DWORD)v82;
  v108 = v104 + (_DWORD)v82 + v106 + 1;
  v109 = objc_msgSend(a3, "lengthOfBytesUsingEncoding:", 4) + 1;
  v173 = ((v109 + 19) & 0x1FFFFFFFCLL) + v83;
  *((_QWORD *)&v176 + 1) = v173 + v108;
  v110 = malloc_type_calloc(*((size_t *)&v176 + 1), 1uLL, 0x5C334CD7uLL);
  v111 = v110;
  v112 = v110[3];
  if (v190)
    v113 = 2;
  else
    v113 = 0;
  v110[2] = v108;
  v110[3] = v112 & 0xFFFFFFFD | v113;
  *v110 = v109;
  v110[1] = v83;
  v110[3] = v110[3] & 0xFFFFFFFB | (4 * (objc_msgSend(v57, "libraryType") == 1));
  if ((v114 & 1) == 0
  {
    MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::env = (uint64_t)getenv("METAL_FORCE_OPT_SIZE");
  }
  if (MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::env
    && *(_BYTE *)MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::env == 49)
  {
    v111[3] |= 1u;
  }
  *(_QWORD *)&v176 = v111;
  objc_msgSend(a3, "getCString:maxLength:encoding:", v111 + 4, v109, 4);
  __p = 0;
  p_p = &__p;
  v219 = 0x2020000000;
  v191 = ((unint64_t)v111 + v109 + 19) & 0xFFFFFFFFFFFFFFFCLL;
  v220 = v191;
  v213 = 0;
  v214 = &v213;
  v215 = 0x2020000000;
  v198 = v83;
  v216 = v83;
  v115 = (NSObject **)v236;
  v116 = (NSObject **)v237;
  if (v236 != v237)
  {
    v117 = 1;
    v118 = MEMORY[0x1E0C809B0];
    do
    {
      v119 = *v115;
      v120 = p_p;
      v121 = p_p[3];
      v122 = (_DWORD *)((unint64_t)(v121 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((v117 & 1) == 0)
        v214[3] += v121 - (_BYTE *)v122;
      v120[3] = v122;
      *v122 = dispatch_data_get_size(v119);
      p_p[3] = (char *)p_p[3] + 4;
      v214[3] -= 4;
      applier[0] = v118;
      applier[1] = 3221225472;
      applier[2] = ___ZN17MTLLibraryBuilder20newLibraryWithSourceEPU19objcproto9MTLDevice11objc_objectP8NSStringP17MTLCompileOptionsbU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorE_block_invoke;
      applier[3] = &unk_1E0FE4328;
      applier[4] = &__p;
      applier[5] = &v213;
      dispatch_data_apply(v119, applier);
      dispatch_release(v119);
      v117 = 0;
      ++v115;
    }
    while (v115 != v116);
  }
  v123 = v191 + v198;
  if (v196)
  {
    if (v17
      && (v210 = 0u,
          v211 = 0u,
          v208 = 0u,
          v209 = 0u,
          (v124 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v208, v241, 16)) != 0))
    {
      v125 = 0;
      v126 = *(_QWORD *)v209;
      do
      {
        for (k = 0; k != v124; ++k)
        {
          if (*(_QWORD *)v209 != v126)
            objc_enumerationMutation(v17);
          v128 = *(void **)(*((_QWORD *)&v208 + 1) + 8 * k);
          v129 = (void *)objc_msgSend(v17, "objectForKey:", v128);
          *(_WORD *)(v123 + v125) = 17453;
          v130 = objc_msgSend(v128, "lengthOfBytesUsingEncoding:", 4);
          v131 = v125 + 2;
          memcpy((void *)(v123 + v131), (const void *)objc_msgSend(v128, "cStringUsingEncoding:", 4), v130);
          v125 = v130 + v131;
          if (v129)
          {
            *(_BYTE *)(v123 + v125) = 61;
            objc_opt_class();
            v132 = v125 + 1;
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v133 = objc_msgSend((id)objc_msgSend(v129, "stringValue"), "lengthOfBytesUsingEncoding:", 4);
              memcpy((void *)(v123 + v132), (const void *)objc_msgSend((id)objc_msgSend(v129, "stringValue"), "cStringUsingEncoding:", 4), v133);
              v132 += v133;
            }
            else
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v134 = objc_msgSend(v129, "lengthOfBytesUsingEncoding:", 4);
                memcpy((void *)(v123 + v132), (const void *)objc_msgSend(v129, "cStringUsingEncoding:", 4), v134);
                v132 += v134;
              }
            }
            *(_BYTE *)(v123 + v132) = 32;
            v125 = v132 + 1;
          }
        }
        v124 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v208, v241, 16);
      }
      while (v124);
    }
    else
    {
      v125 = 0;
    }
    if ((v230 & 0x80u) == 0)
      v138 = v229;
    else
      v138 = (void **)v229[0];
    v139 = strlen((const char *)v138);
    memcpy((void *)(v123 + v125), v138, v139);
    v140 = v139 + v125;
    if ((v228 & 0x80u) == 0)
      v141 = v227;
    else
      v141 = (void **)v227[0];
    v142 = strlen((const char *)v141);
    memcpy((void *)(v123 + v140), v141, v142);
    v136 = v201;
    v137 = v181;
    v143 = v142 + v140;
    if (objc_msgSend(v201, "libraryType") == 1 && v172 == 1)
    {
      v144 = v123 + v143;
      *(_OWORD *)v144 = *(_OWORD *)"-fvisibility hidden ";
      *(_DWORD *)(v144 + 16) = 544105828;
      v143 += 20;
    }
    if (v188)
    {
      qmemcpy((void *)(v123 + v143), "-Wl,-undefined,suppress ", 24);
      v143 += 24;
    }
    if (v187)
    {
      memset(&__str, 0, 64);
      snprintf((char *)&__str, 0x3FuLL, "-fmax-total-threads-per-threadgroup=%lu ", v187);
      v145 = strlen((const char *)&__str);
      memcpy((void *)(v123 + v143), &__str, v145);
      v143 += v145;
    }
    if (v182)
    {
      qmemcpy((void *)(v123 + v143), "-fpreserve-invariance ", 22);
      v143 += 22;
    }
    if (v185)
    {
      qmemcpy((void *)(v123 + v143), "-fimplicit-invariant-position ", 30);
      v143 += 30;
    }
    if (__s)
    {
      v146 = strlen(__s);
      memcpy((void *)(v123 + v143), __s, v146);
      v143 += v146;
    }
    if (v184)
    {
      qmemcpy((void *)(v123 + v143), "-fmetal-enable-logging ", 23);
      v143 += 23;
    }
    v147 = strlen(__src);
    memcpy((void *)(v123 + v143), __src, v147);
    v135 = v147 + v143;
    if (v171)
    {
      v148 = strlen(v171);
      memcpy((void *)(v123 + v135), v171, v148);
      v135 += v148;
    }
    if (v189)
    {
      *(_OWORD *)(v123 + v135) = *(_OWORD *)"-fgl_max_buffer ";
      v135 += 16;
    }
    if (v186)
    {
      qmemcpy((void *)(v123 + v135), "-ftracepoint-instrument ", 24);
      v135 += 24;
    }
    if (objc_msgSend(v201, "libraryType") == 1)
    {
      qmemcpy((void *)(v123 + v135), "-Wl,-create-shared-library ", 27);
      v135 += 27;
    }
    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v235.__r_.__value_.__l.__size_)
      {
        v149 = (std::string *)v235.__r_.__value_.__r.__words[0];
LABEL_278:
        v150 = strlen((const char *)v149);
        memcpy((void *)(v123 + v135), v149, v150);
        v135 += v150;
      }
    }
    else if (*((_BYTE *)&v235.__r_.__value_.__s + 23))
    {
      v149 = &v235;
      goto LABEL_278;
    }
  }
  else
  {
    v135 = 0;
    v136 = v201;
    v137 = v181;
  }
  v151 = strlen(v194);
  memcpy((void *)(v123 + v135), v194, v151);
  v152 = v151 + v135;
  if ((v179 & 1) == 0)
  {
    v153 = strlen((const char *)objc_msgSend(v137, "UTF8String"));
    memcpy((void *)(v123 + v152), (const void *)objc_msgSend(v137, "UTF8String"), v153);
    *(_BYTE *)(v123 + v153 + v152) = 32;
    v152 += v153 + 1;
  }
  if (v200)
  {
    v154 = strlen((const char *)objc_msgSend(v200, "UTF8String"));
    memcpy((void *)(v123 + v152), (const void *)objc_msgSend(v200, "UTF8String"), v154);
    v152 += v154;
  }
  if (*(_QWORD *)(v195 + 48))
  {
    qmemcpy((void *)(v123 + v152), "-fmodules-cache-path=\"", 22);
    v155 = strlen((const char *)objc_msgSend(*(id *)(v195 + 48), "UTF8String"));
    v156 = v152 + 22;
    memcpy((void *)(v123 + v156), (const void *)objc_msgSend(*(id *)(v195 + 48), "UTF8String"), v155);
    *(_WORD *)(v123 + v155 + v156) = 8226;
  }
  v157 = (*(_DWORD *)(v176 + 12) & 4 | v202) != 0;
  if (dyld_program_sdk_at_least())
    v157 = objc_msgSend(v136, "sourceLanguage") == 0;
  *(_OWORD *)&v204[16] = 0u;
  v205 = 0u;
  v206 = 0u;
  v207 = 0;
  *(_OWORD *)v204 = v176;
  if (v157)
    v158 = 13;
  else
    v158 = 3;
  *(_DWORD *)&v204[16] = v158;
  *(_QWORD *)&v204[24] = v136;
  DWORD2(v205) = 0;
  BYTE12(v205) = v192;
  *(_QWORD *)&v206 = 0;
  LOBYTE(v207) = 0;
  *(_OWORD *)md = 0uLL;
  v240 = 0uLL;
  CC_SHA256_Init(&__str);
  CC_SHA256_Update(&__str, (const void *)v176, v173 + v174);
  CC_SHA256_Final(md, &__str);
  md[0] ^= v157;
  MTLLibraryBuilder::newLibraryWithRequestDataAndHash(v195, (uint64_t)v204, (__int128 *)md, v193);
  _Block_object_dispose(&v213, 8);
  _Block_object_dispose(&__p, 8);
  if (v222 < 0)
    operator delete(v221[0]);
  if ((char)v228 < 0)
    operator delete(v227[0]);
  if ((char)v230 < 0)
    operator delete(v229[0]);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  if (v236)
  {
    v237 = v236;
    operator delete(v236);
  }
}

void sub_1826690B8(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void *MTLLibraryContainer::functionWithName(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 160))(*(_QWORD *)(a1 + 48));
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 56), "setObject:forKey:", v4, a2);

  }
  return v4;
}

_MTLFunctionInternal *MTLLibraryDataWithArchive::newFunction(MTLLibraryDataWithArchive *a1, void *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  id v10;
  void **v11;
  uint64_t v12;
  _MTLFunctionInternal *v13;
  void *v14;
  _MTLFunctionInternal *v15;
  _MTLFunctionInternal *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;
  uint64_t v29;
  void *v30[2];
  void *v31[2];
  __int128 v32;
  void *v33[2];
  uint64_t v34;
  MTLFunctionData v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v35, (char *)objc_msgSend(a2, "UTF8String"));
  v6 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((_QWORD *)a1 + 35, (unsigned __int8 *)&v35);
  v7 = v6;
  if ((SHIBYTE(v35.publicArgumentsOffset) & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_3;
    return 0;
  }
  operator delete((void *)v35.bitCodeOffset);
  if (!v7)
    return 0;
LABEL_3:
  v8 = *((_QWORD *)v7 + 5);
  v35.functionInputs = 0;
  v35.airScript = 0;
  v34 = 0;
  v32 = 0u;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)v31 = 0u;
  if (MTLLibraryDataWithArchive::getFunctionAtOffset(a1, v8, &v35, (MTLLibraryDataWithArchive::AdditionalFunctionData *)&v29))
  {
    if (*((_QWORD *)a1 + 48))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(a2, "UTF8String"));
      v9 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((_QWORD *)a1 + 45, (unsigned __int8 *)__p);
      if (v28 < 0)
        operator delete(__p[0]);
      if (v9)
      {
        v35.airScript = (OS_dispatch_data *)*((_QWORD *)v9 + 5);
        std::__hash_table<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>>>::erase((_QWORD *)a1 + 45, (uint64_t *)v9);
      }
    }
    if (SHIBYTE(v31[0]) < 0)
    {
      if (v30[1])
        goto LABEL_11;
    }
    else if (HIBYTE(v31[0]))
    {
LABEL_11:
      v10 = objc_alloc(MEMORY[0x1E0CB3940]);
      if (SHIBYTE(v31[0]) >= 0)
        v11 = v30;
      else
        v11 = (void **)v30[0];
      v12 = objc_msgSend(v10, "initWithUTF8String:", v11);
      goto LABEL_20;
    }
    v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithString:", a2);
LABEL_20:
    v14 = (void *)v12;
    v15 = [_MTLFunctionInternal alloc];
    v16 = -[_MTLFunctionInternal initWithName:type:libraryData:functionData:device:](v15, "initWithName:type:libraryData:functionData:device:", v14, v29, a1, &v35, a3);
    v13 = v16;
    if (*((_QWORD *)a1 + 53))
    {
      v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 54);
      v25 = *((_QWORD *)a1 + 53);
      v26 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      -[_MTLFunctionInternal setTrackingData:](v16, "setTrackingData:", &v25);
      v20 = v26;
      if (v26)
      {
        v21 = (unint64_t *)&v26->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }

    if (*((_QWORD *)a1 + 66))
    {
      if (v13)
      {
        v23 = -[_MTLFunctionInternal sourceArchiveOffset](v13, "sourceArchiveOffset");
        if (v23 != -1)
          -[_MTLFunctionInternal setSourceArchiveOffset:](v13, "setSourceArchiveOffset:", *((_QWORD *)a1 + 65) + v23);
      }
    }
    goto LABEL_33;
  }
  v13 = 0;
LABEL_33:
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (SHIBYTE(v32) < 0)
    operator delete(v31[1]);
  if (SHIBYTE(v31[0]) < 0)
    operator delete(v30[0]);
  return v13;
}

void sub_182669564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData((MTLLibraryDataWithArchive::AdditionalFunctionData *)&a17);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryData::retain(MTLLibraryData *this)
{
  return MTLAtomicIncrement((unsigned int *)this + 20);
}

unint64_t deserializeArguments(void *a1, unsigned int *a2, uint64_t a3, ReflectionDeserializeContext *a4, void **a5, char a6, _DWORD *a7)
{
  uint64_t v8;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  MTLBuiltInMeshArgument *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  MTLBuiltInMeshArgument **v29;
  char *v30;
  char *v31;
  MTLBuiltInMeshArgument *v32;
  MTLBuiltInMeshArgument **v33;
  char *v34;
  char *v35;
  MTLBuiltInMeshArgument *v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v49;
  MTLBuiltInMeshArgument *v50;
  void *__p;
  char *v52;
  char *v53;
  void *v54;
  char *v55;
  char *v56;

  if (a2)
  {
    v8 = *a2;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    __p = 0;
    v52 = 0;
    v53 = 0;
    if ((_DWORD)v8)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v49 = a2 + 1;
      do
      {
        v50 = 0;
        v15 = deserializeArgument(a1, &v49[v12], a3, a4, &v50);
        v16 = v50;
        if (v50
          && -[NSString isEqualToString:](v50->super._name, "isEqualToString:", CFSTR("trace.buffer"))
          && (*a7 = -[MTLBindingInternal index](v16, "index"), (a6 & 1) == 0))
        {

        }
        else
        {
          v13 += HIDWORD(v15);
          v14 += v15;
          if ((_DWORD)v15)
          {
            v17 = v52;
            if (v52 >= v53)
            {
              v21 = (v52 - (_BYTE *)__p) >> 3;
              if ((unint64_t)(v21 + 1) >> 61)
                goto LABEL_62;
              v22 = (v53 - (_BYTE *)__p) >> 2;
              if (v22 <= v21 + 1)
                v22 = v21 + 1;
              if ((unint64_t)(v53 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                v23 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v23 = v22;
              if (v23)
                v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v53, v23);
              else
                v24 = 0;
              v29 = (MTLBuiltInMeshArgument **)&v24[8 * v21];
              *v29 = v16;
              v18 = (char *)(v29 + 1);
              v31 = (char *)__p;
              v30 = v52;
              if (v52 != __p)
              {
                do
                {
                  v32 = (MTLBuiltInMeshArgument *)*((_QWORD *)v30 - 1);
                  v30 -= 8;
                  *--v29 = v32;
                }
                while (v30 != v31);
                v30 = (char *)__p;
              }
              __p = v29;
              v52 = v18;
              v53 = &v24[8 * v23];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_QWORD *)v52 = v16;
              v18 = v17 + 8;
            }
            v52 = v18;
          }
          else if (HIDWORD(v15))
          {
            v19 = v55;
            if (v55 >= v56)
            {
              v25 = (v55 - (_BYTE *)v54) >> 3;
              if ((unint64_t)(v25 + 1) >> 61)
LABEL_62:
                std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
              v26 = (v56 - (_BYTE *)v54) >> 2;
              if (v26 <= v25 + 1)
                v26 = v25 + 1;
              if ((unint64_t)(v56 - (_BYTE *)v54) >= 0x7FFFFFFFFFFFFFF8)
                v27 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v27 = v26;
              if (v27)
                v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v56, v27);
              else
                v28 = 0;
              v33 = (MTLBuiltInMeshArgument **)&v28[8 * v25];
              *v33 = v16;
              v20 = (char *)(v33 + 1);
              v35 = (char *)v54;
              v34 = v55;
              if (v55 != v54)
              {
                do
                {
                  v36 = (MTLBuiltInMeshArgument *)*((_QWORD *)v34 - 1);
                  v34 -= 8;
                  *--v33 = v36;
                }
                while (v34 != v35);
                v34 = (char *)v54;
              }
              v54 = v33;
              v55 = v20;
              v56 = &v28[8 * v27];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_QWORD *)v55 = v16;
              v20 = v19 + 8;
            }
            v55 = v20;
          }
        }
        ++v12;
      }
      while (v12 != v8);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    __p = 0;
    v52 = 0;
    v53 = 0;
  }
  *a5 = malloc_type_malloc(8 * v13, 0x80040B8603338uLL);
  v37 = (char *)v54;
  v38 = v55;
  if (v54 == v55)
  {
    v41 = 0;
  }
  else
  {
    v39 = 0;
    v40 = 0;
    do
    {
      *(_QWORD *)((char *)*a5 + v40) = *(_QWORD *)&v37[v40];
      v40 += 8;
      --v39;
    }
    while (&v37[v40] != v38);
    v41 = -v39;
  }
  v42 = (char *)__p;
  v43 = v52;
  if (__p != v52)
  {
    v44 = 8 * v41;
    do
    {
      v45 = *(_QWORD *)v42;
      v42 += 8;
      *(_QWORD *)((char *)*a5 + v44) = v45;
      v44 += 8;
    }
    while (v42 != v43);
    v42 = (char *)__p;
  }
  if (v42)
  {
    v52 = v42;
    operator delete(v42);
  }
  if (v54)
  {
    v55 = (char *)v54;
    operator delete(v54);
  }
  return v14 | ((unint64_t)v13 << 32);
}

void sub_18266A540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t deserializeArgument(void *a1, unsigned int *a2, uint64_t a3, ReflectionDeserializeContext *a4, MTLBuiltInMeshArgument **a5)
{
  uint64_t v6;
  unsigned int *v7;
  AirReflection::Node *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  const __CFString *v21;
  BOOL v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  const __CFString *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  const __CFString *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 *v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int16 *v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int16 *v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int16 *v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int16 *v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int16 *v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 *v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int16 *v103;
  uint64_t v104;
  int *v105;
  unsigned __int16 *v106;
  uint64_t v107;
  const __CFString *v108;
  int *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int16 *v112;
  uint64_t v113;
  const __CFString *v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int16 *v118;
  uint64_t v119;
  const __CFString *v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int16 *v124;
  uint64_t v125;
  const __CFString *v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int16 *v130;
  uint64_t v131;
  const __CFString *v132;
  int *v133;
  unsigned __int16 *v134;
  uint64_t v135;
  const __CFString *v136;
  int *v137;
  unsigned __int16 *v138;
  uint64_t v139;
  const __CFString *v140;
  int *v141;
  unsigned __int16 *v142;
  uint64_t v143;
  const __CFString *v144;
  int *v145;
  unsigned __int16 *v146;
  uint64_t v147;
  const __CFString *v148;
  int *v149;
  unsigned __int16 *v150;
  uint64_t v151;
  const __CFString *v152;
  int *v153;
  unsigned __int16 *v154;
  uint64_t v155;
  const __CFString *v156;
  int *v157;
  unsigned __int16 *v158;
  uint64_t v159;
  const __CFString *v160;
  int *v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int16 *v164;
  uint64_t v165;
  const __CFString *v166;
  int *v167;
  uint64_t v168;
  uint64_t v169;
  unsigned __int16 *v170;
  uint64_t v171;
  const __CFString *v172;
  int *v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int16 *v176;
  uint64_t v177;
  const __CFString *v178;
  unsigned __int16 *v179;
  uint64_t v180;
  unsigned __int16 *v181;
  unsigned int v182;
  uint64_t v183;
  unsigned __int16 *v184;
  uint64_t v185;
  unsigned __int16 *v186;
  unsigned __int16 v187;
  _BOOL4 v188;
  int v189;
  unsigned __int16 *v190;
  unsigned int v191;
  unsigned int *v192;
  unsigned __int16 *v193;
  unsigned int v194;
  _BOOL8 v195;
  uint64_t v196;
  unsigned __int16 *v197;
  uint64_t v198;
  unsigned __int16 *v199;
  uint64_t v200;
  unsigned __int16 *v201;
  uint64_t v202;
  unsigned __int16 *v203;
  uint64_t v204;
  unsigned __int16 *v205;
  uint64_t v206;
  unsigned __int16 *v207;
  uint64_t v208;
  unsigned __int16 *v209;
  uint64_t v210;
  unsigned __int16 *v211;
  uint64_t v212;
  unsigned __int16 *v213;
  uint64_t v214;
  unsigned __int16 *v215;
  uint64_t v216;
  unsigned __int16 *v217;
  uint64_t v218;
  unsigned __int16 *v219;
  uint64_t v220;
  unsigned __int16 *v221;
  uint64_t v222;
  unsigned __int16 *v223;
  uint64_t v224;
  MTLBindingInternal *v225;
  unsigned __int16 *v226;
  uint64_t v227;
  _BOOL8 v228;
  unsigned __int16 *v229;
  uint64_t v230;
  unsigned __int16 *v231;
  uint64_t v232;
  unsigned __int16 *v233;
  uint64_t v234;
  unsigned __int16 *v235;
  uint64_t v236;
  unsigned __int16 *v237;
  unsigned __int16 *v238;
  unsigned __int16 *v239;
  unsigned __int16 *v240;
  unsigned __int16 *v241;
  unsigned __int16 *v242;
  unsigned __int16 *v243;
  uint64_t v244;
  const __CFString *v245;
  uint64_t v246;
  MTLTextureBindingInternal *v247;
  MTLBuiltInMeshArgument *v248;
  const void *v249;
  size_t v250;
  uint64_t v251;
  MTLBuiltInArgument *v252;
  unsigned __int16 *v253;
  uint64_t v254;
  _BOOL8 v255;
  uint64_t v256;
  const void *v257;
  size_t v258;
  unsigned __int16 *v259;
  uint64_t v260;
  unint64_t v261;
  unsigned __int16 *v262;
  unsigned __int16 v263;
  unsigned int *v264;
  MTLStructTypeInternal *v265;
  unsigned __int16 *v266;
  unsigned int v267;
  BOOL v268;
  uint64_t v269;
  uint64_t v270;
  const void *v271;
  size_t v272;
  unsigned __int16 *v273;
  uint64_t v274;
  const void *v275;
  size_t v276;
  unint64_t v277;
  unsigned __int16 *v278;
  unsigned int v279;
  const __CFString *v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unsigned int v284;
  const void *v285;
  size_t v286;
  unsigned __int16 *v287;
  uint64_t v288;
  const void *v289;
  size_t v290;
  unsigned __int16 *v291;
  uint64_t v292;
  const void *v293;
  size_t v294;
  unsigned __int16 *v295;
  uint64_t v296;
  const void *v297;
  size_t v298;
  unsigned __int16 *v299;
  uint64_t v300;
  const void *v301;
  size_t v302;
  unsigned __int16 *v303;
  uint64_t v304;
  const void *v305;
  size_t v306;
  unsigned __int16 *v307;
  uint64_t v308;
  const void *v309;
  size_t v310;
  unsigned __int16 *v311;
  uint64_t v312;
  const void *v313;
  size_t v314;
  unsigned __int16 *v315;
  uint64_t v316;
  const void *v317;
  size_t v318;
  unsigned __int16 *v319;
  uint64_t v320;
  const void *v321;
  size_t v322;
  unsigned __int16 *v323;
  uint64_t v324;
  const void *v325;
  size_t v326;
  unsigned __int16 *v327;
  uint64_t v328;
  const void *v329;
  size_t v330;
  unsigned __int16 *v331;
  uint64_t v332;
  MTLBuiltInArgument *v333;
  void *v334;
  size_t v335;
  unsigned int v336;
  MTLTextureBindingInternal *v337;
  unsigned __int16 *v338;
  unsigned int v339;
  int v340;
  uint64_t v341;
  const void *v342;
  size_t v343;
  unint64_t v344;
  uint64_t v345;
  unsigned __int16 *v346;
  uint64_t v347;
  uint64_t v348;
  const void *v349;
  size_t v350;
  unint64_t v351;
  unsigned __int16 *v352;
  unsigned int v353;
  int v354;
  const void *v355;
  size_t v356;
  unint64_t v357;
  uint64_t v358;
  unsigned __int16 *v359;
  uint64_t v360;
  unint64_t v361;
  const void *v362;
  size_t v363;
  uint64_t v364;
  MTLBufferBindingInternal *v365;
  unsigned __int16 *v366;
  _BOOL8 v367;
  _BOOL4 v368;
  unint64_t v369;
  const void *v370;
  size_t v371;
  uint64_t v372;
  MTLIndirectConstantArgument *v373;
  unsigned __int16 *v374;
  _BOOL8 v375;
  uint64_t v376;
  _BOOL4 v377;
  unsigned __int16 v378;
  unsigned int *v379;
  unint64_t v380;
  unsigned __int16 *v381;
  unsigned __int16 v382;
  unsigned int *v383;
  MTLStructTypeInternal *v384;
  unint64_t v385;
  unsigned __int16 *v386;
  unsigned __int16 v387;
  unsigned int *v388;
  MTLStructTypeInternal *v389;
  unsigned __int16 *v390;
  unsigned int v391;
  BOOL v392;
  const void *v393;
  size_t v394;
  unsigned int v395;
  unsigned int *v396;
  int *v397;
  int *v398;
  unsigned __int16 *v399;
  uint64_t v400;
  unsigned int *v401;
  uint64_t v402;
  MTLStructTypeInternal *v403;
  unsigned __int16 *v404;
  uint64_t v405;
  unsigned int *v406;
  MTLStructTypeInternal *v407;
  unsigned __int16 *v408;
  unsigned int v409;
  int v410;
  int v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _BOOL8 v415;
  int v416;
  unsigned __int16 v417;
  unint64_t v418;
  uint64_t v419;
  char v420;
  uint64_t v421;
  const void *v422;
  size_t v423;
  unsigned int v424;
  __int16 v425;
  unint64_t v426;
  unsigned int v427;
  uint64_t v428;
  unsigned __int16 *v429;
  const void *v430;
  size_t v431;
  unsigned int v432;
  unint64_t v433;
  _BOOL8 v434;
  MTLObjectPayloadBindingInternal *v435;
  unsigned __int16 *v436;
  uint64_t v437;
  _BOOL8 v438;
  MTLObjectPayloadBindingInternal *v439;
  unsigned __int16 v440;
  int v441;
  MTLImageBlockArgument *v442;
  unsigned __int16 *v443;
  uint64_t v444;
  _BOOL8 v445;
  unsigned __int16 v446;
  int v447;
  MTLImageBlockDataArgument *v448;
  unsigned __int16 *v449;
  uint64_t v450;
  _BOOL8 v451;
  MTLThreadgroupMemoryBindingInternal *v452;
  unsigned __int16 *v453;
  unsigned int v454;
  int v455;
  uint64_t v456;
  MTLBufferBindingInternal *v457;
  unsigned __int16 *v458;
  unsigned int v459;
  int v460;
  uint64_t v461;
  _BOOL8 v462;
  const __CFString *v463;
  MTLThreadgroupMemoryBindingInternal *v464;
  _BOOL8 v465;
  const __CFString *v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  unsigned __int16 v470;
  uint64_t v471;
  const void *v472;
  size_t v473;
  char v474;
  unsigned __int16 *v475;
  uint64_t v476;
  MTLThreadgroupMemoryBindingInternal *v477;
  unsigned __int16 *v478;
  unsigned int v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  MTLBufferBindingInternal *v485;
  unsigned __int16 *v486;
  unsigned int v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  _BOOL8 v491;
  _BOOL8 v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  __int16 v498;
  const __CFString *v499;
  uint64_t v500;
  unsigned int v501;
  uint64_t v502[7];

  v6 = a3 + 4;
  v7 = (unsigned int *)(a3 + 4 + 4 * *a2);
  v8 = (AirReflection::Node *)((char *)v7 + *v7);
  v9 = (unsigned __int16 *)((char *)v8 - *(int *)v8);
  if (*v9 < 5u)
  {
    LODWORD(v10) = 0;
    goto LABEL_9;
  }
  v10 = v9[2];
  if (!v10)
  {
LABEL_9:
    AirReflection::EnumNameNodeType(v10);
    v14 = 0;
    v15 = 0;
    return v15 | v14;
  }
  v14 = 0;
  LODWORD(v10) = *(_DWORD *)((char *)v8 + v10);
  if ((int)v10 < 270336)
  {
    v15 = 0;
    switch((int)v10)
    {
      case 266240:
        v16 = (int *)AirReflection::Node::node_as_ThreadPositionInGridArg(v8);
        v17 = *v16;
        v18 = -v17;
        v19 = (unsigned __int16 *)((char *)v16 - v17);
        if (*v19 >= 9u && (v20 = v19[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v16 + v20 + *(unsigned int *)((char *)v16 + v20) + 4);
          v18 = -(uint64_t)*v16;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v197 = (unsigned __int16 *)((char *)v16 + v18);
        if (*v197 < 7u)
        {
          v198 = 0;
        }
        else
        {
          v198 = v197[3];
          if (v198)
            v198 += (uint64_t)v16 + *(unsigned int *)((char *)v16 + v198);
        }
        v271 = (const void *)(v198 + 4);
        v272 = strlen((const char *)(v198 + 4));
        v251 = dataTypeFromString(v271, v272);
        v252 = [MTLBuiltInArgument alloc];
        v273 = (unsigned __int16 *)((char *)v16 - *v16);
        v255 = *v273 < 0xBu || (v274 = v273[5]) == 0 || *((unsigned __int8 *)v16 + v274) == 0;
        v256 = 5;
        goto LABEL_382;
      case 266241:
        v45 = (int *)AirReflection::Node::node_as_ThreadsPerGridArg(v8);
        v46 = *v45;
        v47 = -v46;
        v48 = (unsigned __int16 *)((char *)v45 - v46);
        if (*v48 >= 9u && (v49 = v48[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v45 + v49 + *(unsigned int *)((char *)v45 + v49) + 4);
          v47 = -(uint64_t)*v45;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v201 = (unsigned __int16 *)((char *)v45 + v47);
        if (*v201 < 7u)
        {
          v202 = 0;
        }
        else
        {
          v202 = v201[3];
          if (v202)
            v202 += (uint64_t)v45 + *(unsigned int *)((char *)v45 + v202);
        }
        v285 = (const void *)(v202 + 4);
        v286 = strlen((const char *)(v202 + 4));
        v251 = dataTypeFromString(v285, v286);
        v252 = [MTLBuiltInArgument alloc];
        v287 = (unsigned __int16 *)((char *)v45 - *v45);
        v255 = *v287 < 0xBu || (v288 = v287[5]) == 0 || *((unsigned __int8 *)v45 + v288) == 0;
        v256 = 6;
        goto LABEL_382;
      case 266242:
        v50 = (int *)AirReflection::Node::node_as_ThreadgroupPositionInGridArg(v8);
        v51 = *v50;
        v52 = -v51;
        v53 = (unsigned __int16 *)((char *)v50 - v51);
        if (*v53 >= 9u && (v54 = v53[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v50 + v54 + *(unsigned int *)((char *)v50 + v54) + 4);
          v52 = -(uint64_t)*v50;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v203 = (unsigned __int16 *)((char *)v50 + v52);
        if (*v203 < 7u)
        {
          v204 = 0;
        }
        else
        {
          v204 = v203[3];
          if (v204)
            v204 += (uint64_t)v50 + *(unsigned int *)((char *)v50 + v204);
        }
        v289 = (const void *)(v204 + 4);
        v290 = strlen((const char *)(v204 + 4));
        v251 = dataTypeFromString(v289, v290);
        v252 = [MTLBuiltInArgument alloc];
        v291 = (unsigned __int16 *)((char *)v50 - *v50);
        v255 = *v291 < 0xBu || (v292 = v291[5]) == 0 || *((unsigned __int8 *)v50 + v292) == 0;
        v256 = 10;
        goto LABEL_382;
      case 266243:
        v55 = (int *)AirReflection::Node::node_as_ThreadgroupsPerGridArg(v8);
        v56 = *v55;
        v57 = -v56;
        v58 = (unsigned __int16 *)((char *)v55 - v56);
        if (*v58 >= 9u && (v59 = v58[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v55 + v59 + *(unsigned int *)((char *)v55 + v59) + 4);
          v57 = -(uint64_t)*v55;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v205 = (unsigned __int16 *)((char *)v55 + v57);
        if (*v205 < 7u)
        {
          v206 = 0;
        }
        else
        {
          v206 = v205[3];
          if (v206)
            v206 += (uint64_t)v55 + *(unsigned int *)((char *)v55 + v206);
        }
        v293 = (const void *)(v206 + 4);
        v294 = strlen((const char *)(v206 + 4));
        v251 = dataTypeFromString(v293, v294);
        v252 = [MTLBuiltInArgument alloc];
        v295 = (unsigned __int16 *)((char *)v55 - *v55);
        v255 = *v295 < 0xBu || (v296 = v295[5]) == 0 || *((unsigned __int8 *)v55 + v296) == 0;
        v256 = 11;
        goto LABEL_382;
      case 266244:
        v60 = (int *)AirReflection::Node::node_as_ThreadPositionInThreadgroupArg(v8);
        v61 = *v60;
        v62 = -v61;
        v63 = (unsigned __int16 *)((char *)v60 - v61);
        if (*v63 >= 9u && (v64 = v63[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v60 + v64 + *(unsigned int *)((char *)v60 + v64) + 4);
          v62 = -(uint64_t)*v60;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v207 = (unsigned __int16 *)((char *)v60 + v62);
        if (*v207 < 7u)
        {
          v208 = 0;
        }
        else
        {
          v208 = v207[3];
          if (v208)
            v208 += (uint64_t)v60 + *(unsigned int *)((char *)v60 + v208);
        }
        v297 = (const void *)(v208 + 4);
        v298 = strlen((const char *)(v208 + 4));
        v251 = dataTypeFromString(v297, v298);
        v252 = [MTLBuiltInArgument alloc];
        v299 = (unsigned __int16 *)((char *)v60 - *v60);
        v255 = *v299 < 0xBu || (v300 = v299[5]) == 0 || *((unsigned __int8 *)v60 + v300) == 0;
        v256 = 7;
        goto LABEL_382;
      case 266245:
        v65 = (int *)AirReflection::Node::node_as_ThreadsPerThreadgroupArg(v8);
        v66 = *v65;
        v67 = -v66;
        v68 = (unsigned __int16 *)((char *)v65 - v66);
        if (*v68 >= 9u && (v69 = v68[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v65 + v69 + *(unsigned int *)((char *)v65 + v69) + 4);
          v67 = -(uint64_t)*v65;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v209 = (unsigned __int16 *)((char *)v65 + v67);
        if (*v209 < 7u)
        {
          v210 = 0;
        }
        else
        {
          v210 = v209[3];
          if (v210)
            v210 += (uint64_t)v65 + *(unsigned int *)((char *)v65 + v210);
        }
        v301 = (const void *)(v210 + 4);
        v302 = strlen((const char *)(v210 + 4));
        v251 = dataTypeFromString(v301, v302);
        v252 = [MTLBuiltInArgument alloc];
        v303 = (unsigned __int16 *)((char *)v65 - *v65);
        v255 = *v303 < 0xBu || (v304 = v303[5]) == 0 || *((unsigned __int8 *)v65 + v304) == 0;
        v256 = 9;
        goto LABEL_382;
      case 266246:
      case 266249:
      case 266254:
      case 266255:
      case 266256:
      case 266258:
      case 266259:
      case 266260:
        return v15 | v14;
      case 266247:
        v70 = (int *)AirReflection::Node::node_as_ThreadIndexInThreadgroupArg(v8);
        v71 = *v70;
        v72 = -v71;
        v73 = (unsigned __int16 *)((char *)v70 - v71);
        if (*v73 >= 9u && (v74 = v73[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v70 + v74 + *(unsigned int *)((char *)v70 + v74) + 4);
          v72 = -(uint64_t)*v70;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v211 = (unsigned __int16 *)((char *)v70 + v72);
        if (*v211 < 7u)
        {
          v212 = 0;
        }
        else
        {
          v212 = v211[3];
          if (v212)
            v212 += (uint64_t)v70 + *(unsigned int *)((char *)v70 + v212);
        }
        v305 = (const void *)(v212 + 4);
        v306 = strlen((const char *)(v212 + 4));
        v251 = dataTypeFromString(v305, v306);
        v252 = [MTLBuiltInArgument alloc];
        v307 = (unsigned __int16 *)((char *)v70 - *v70);
        v255 = *v307 < 0xBu || (v308 = v307[5]) == 0 || *((unsigned __int8 *)v70 + v308) == 0;
        v256 = 8;
        goto LABEL_382;
      case 266248:
        v75 = (int *)AirReflection::Node::node_as_ThreadExecutionWidthArg(v8);
        v76 = *v75;
        v77 = -v76;
        v78 = (unsigned __int16 *)((char *)v75 - v76);
        if (*v78 >= 9u && (v79 = v78[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v75 + v79 + *(unsigned int *)((char *)v75 + v79) + 4);
          v77 = -(uint64_t)*v75;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v213 = (unsigned __int16 *)((char *)v75 + v77);
        if (*v213 < 7u)
        {
          v214 = 0;
        }
        else
        {
          v214 = v213[3];
          if (v214)
            v214 += (uint64_t)v75 + *(unsigned int *)((char *)v75 + v214);
        }
        v309 = (const void *)(v214 + 4);
        v310 = strlen((const char *)(v214 + 4));
        v251 = dataTypeFromString(v309, v310);
        v252 = [MTLBuiltInArgument alloc];
        v311 = (unsigned __int16 *)((char *)v75 - *v75);
        v255 = *v311 < 0xBu || (v312 = v311[5]) == 0 || *((unsigned __int8 *)v75 + v312) == 0;
        v256 = 12;
        goto LABEL_382;
      case 266250:
        v80 = (int *)AirReflection::Node::node_as_StageInGridOriginArg(v8);
        v81 = *v80;
        v82 = -v81;
        v83 = (unsigned __int16 *)((char *)v80 - v81);
        if (*v83 >= 9u && (v84 = v83[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v80 + v84 + *(unsigned int *)((char *)v80 + v84) + 4);
          v82 = -(uint64_t)*v80;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v215 = (unsigned __int16 *)((char *)v80 + v82);
        if (*v215 < 7u)
        {
          v216 = 0;
        }
        else
        {
          v216 = v215[3];
          if (v216)
            v216 += (uint64_t)v80 + *(unsigned int *)((char *)v80 + v216);
        }
        v313 = (const void *)(v216 + 4);
        v314 = strlen((const char *)(v216 + 4));
        v251 = dataTypeFromString(v313, v314);
        v252 = [MTLBuiltInArgument alloc];
        v315 = (unsigned __int16 *)((char *)v80 - *v80);
        v255 = *v315 < 0xBu || (v316 = v315[5]) == 0 || *((unsigned __int8 *)v80 + v316) == 0;
        v256 = 15;
        goto LABEL_382;
      case 266251:
        v85 = (int *)AirReflection::Node::node_as_StageInGridSizeArg(v8);
        v86 = *v85;
        v87 = -v86;
        v88 = (unsigned __int16 *)((char *)v85 - v86);
        if (*v88 >= 9u && (v89 = v88[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v85 + v89 + *(unsigned int *)((char *)v85 + v89) + 4);
          v87 = -(uint64_t)*v85;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v217 = (unsigned __int16 *)((char *)v85 + v87);
        if (*v217 < 7u)
        {
          v218 = 0;
        }
        else
        {
          v218 = v217[3];
          if (v218)
            v218 += (uint64_t)v85 + *(unsigned int *)((char *)v85 + v218);
        }
        v317 = (const void *)(v218 + 4);
        v318 = strlen((const char *)(v218 + 4));
        v251 = dataTypeFromString(v317, v318);
        v252 = [MTLBuiltInArgument alloc];
        v319 = (unsigned __int16 *)((char *)v85 - *v85);
        v255 = *v319 < 0xBu || (v320 = v319[5]) == 0 || *((unsigned __int8 *)v85 + v320) == 0;
        v256 = 16;
        goto LABEL_382;
      case 266252:
        v90 = (int *)AirReflection::Node::node_as_ThreadIndexInSimdgroupArg(v8);
        v91 = *v90;
        v92 = -v91;
        v93 = (unsigned __int16 *)((char *)v90 - v91);
        if (*v93 >= 9u && (v94 = v93[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v90 + v94 + *(unsigned int *)((char *)v90 + v94) + 4);
          v92 = -(uint64_t)*v90;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v219 = (unsigned __int16 *)((char *)v90 + v92);
        if (*v219 < 7u)
        {
          v220 = 0;
        }
        else
        {
          v220 = v219[3];
          if (v220)
            v220 += (uint64_t)v90 + *(unsigned int *)((char *)v90 + v220);
        }
        v321 = (const void *)(v220 + 4);
        v322 = strlen((const char *)(v220 + 4));
        v251 = dataTypeFromString(v321, v322);
        v252 = [MTLBuiltInArgument alloc];
        v323 = (unsigned __int16 *)((char *)v90 - *v90);
        v255 = *v323 < 0xBu || (v324 = v323[5]) == 0 || *((unsigned __int8 *)v90 + v324) == 0;
        v256 = 18;
        goto LABEL_382;
      case 266253:
        v95 = (int *)AirReflection::Node::node_as_ThreadsPerSimdgroupArg(v8);
        v96 = *v95;
        v97 = -v96;
        v98 = (unsigned __int16 *)((char *)v95 - v96);
        if (*v98 >= 9u && (v99 = v98[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v95 + v99 + *(unsigned int *)((char *)v95 + v99) + 4);
          v97 = -(uint64_t)*v95;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v221 = (unsigned __int16 *)((char *)v95 + v97);
        if (*v221 < 7u)
        {
          v222 = 0;
        }
        else
        {
          v222 = v221[3];
          if (v222)
            v222 += (uint64_t)v95 + *(unsigned int *)((char *)v95 + v222);
        }
        v325 = (const void *)(v222 + 4);
        v326 = strlen((const char *)(v222 + 4));
        v251 = dataTypeFromString(v325, v326);
        v252 = [MTLBuiltInArgument alloc];
        v327 = (unsigned __int16 *)((char *)v95 - *v95);
        v255 = *v327 < 0xBu || (v328 = v327[5]) == 0 || *((unsigned __int8 *)v95 + v328) == 0;
        v256 = 20;
        goto LABEL_382;
      case 266257:
        v100 = (int *)AirReflection::Node::node_as_ThreadIndexInQuadgroupArg(v8);
        v101 = *v100;
        v102 = -v101;
        v103 = (unsigned __int16 *)((char *)v100 - v101);
        if (*v103 >= 9u && (v104 = v103[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v100 + v104 + *(unsigned int *)((char *)v100 + v104) + 4);
          v102 = -(uint64_t)*v100;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v223 = (unsigned __int16 *)((char *)v100 + v102);
        if (*v223 < 7u)
        {
          v224 = 0;
        }
        else
        {
          v224 = v223[3];
          if (v224)
            v224 += (uint64_t)v100 + *(unsigned int *)((char *)v100 + v224);
        }
        v329 = (const void *)(v224 + 4);
        v330 = strlen((const char *)(v224 + 4));
        v251 = dataTypeFromString(v329, v330);
        v252 = [MTLBuiltInArgument alloc];
        v331 = (unsigned __int16 *)((char *)v100 - *v100);
        v255 = *v331 < 0xBu || (v332 = v331[5]) == 0 || *((unsigned __int8 *)v100 + v332) == 0;
        v256 = 17;
        goto LABEL_382;
      default:
        v15 = 0;
        switch((int)v10)
        {
          case 262144:
            v23 = (int *)AirReflection::Node::node_as_BufferArg(v8);
            v24 = *v23;
            v25 = -v24;
            v26 = (unsigned __int16 *)((char *)v23 - v24);
            if (*v26 >= 0x1Bu && (v27 = v26[13]) != 0)
            {
              v28 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v23 + v27 + *(unsigned int *)((char *)v23 + v27) + 4);
              v25 = -(uint64_t)*v23;
            }
            else
            {
              v28 = &stru_1E0FE5DC8;
            }
            v199 = (unsigned __int16 *)((char *)v23 + v25);
            if (*v199 < 0x19u)
            {
              v200 = 0;
            }
            else
            {
              v200 = v199[12];
              if (v200)
                v200 += (uint64_t)v23 + *(unsigned int *)((char *)v23 + v200);
            }
            v275 = (const void *)(v200 + 4);
            v276 = strlen((const char *)(v200 + 4));
            v277 = pixelFormatAndALUTypeFromString(v275, v276);
            v278 = (unsigned __int16 *)((char *)v23 - *v23);
            v279 = *v278;
            if (v279 >= 0x17 && v278[11])
              LODWORD(v280) = *(int *)((char *)v23 + v278[11]);
            else
              LOWORD(v280) = 0;
            v281 = *((_QWORD *)a4 + 5) + *((_QWORD *)a4 + 4) - 1;
            v282 = *(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * (v281 / 0x49));
            v283 = v281 % 0x49;
            if (!*(_BYTE *)(v282 + 56 * v283 + 8))
              goto LABEL_418;
            if (v279 < 7)
            {
              v377 = 0;
              v376 = 0;
              goto LABEL_568;
            }
            if (v278[3])
            {
              v284 = *(int *)((char *)v23 + v278[3]);
            }
            else
            {
LABEL_418:
              if (v279 >= 0x15)
              {
                v498 = (__int16)v280;
                if (v278[10])
                  v376 = *(unsigned int *)((char *)v23 + v278[10]);
                else
                  v376 = 0;
LABEL_560:
                v280 = v28;
                if (v278[7])
                  v469 = *((unsigned __int8 *)v23 + v278[7]);
                else
                  v469 = 1;
                v377 = v469 == 2;
                if (v279 >= 0x11)
                {
                  v470 = v278[8];
                  LOBYTE(v501) = 1;
                  v500 = v376;
                  if (v470)
                  {
                    ContextStack::ContextStack((ContextStack *)v502, *(MTLFunctionType *)(v282 + 56 * v283), 1);
                    std::deque<ContextStack>::push_back(a4, v502);
                    ContextStack::~ContextStack((ContextStack *)v502);
                    v265 = deserializeStructArgument((uint64_t)a1, (unsigned int *)((char *)v23 + v470), a3, a4, &v501);
                    std::deque<ContextStack>::pop_back(a4);
                    v419 = 1;
                    if (v469 != 2)
                    {
                      v474 = 0;
                      v28 = v280;
                      LOWORD(v280) = v498;
                      goto LABEL_578;
                    }
                    v28 = v280;
                    LOWORD(v280) = v498;
LABEL_570:
                    v474 = 1;
                    if (objc_msgSend(a1, "minConstantBufferAlignmentBytes") >= (unint64_t)(unsigned __int16)v280)
                      LOWORD(v280) = objc_msgSend(a1, "minConstantBufferAlignmentBytes");
LABEL_578:
                    v475 = (unsigned __int16 *)((char *)v23 - *v23);
                    if (*v475 >= 0xFu && (v476 = v475[7]) != 0 && *((_BYTE *)v23 + v476) == 3)
                    {
                      v477 = [MTLThreadgroupMemoryBindingInternal alloc];
                      v478 = (unsigned __int16 *)((char *)v23 - *v23);
                      v479 = *v478;
                      if (v479 < 0xD)
                      {
                        v482 = 0;
                        v493 = 1;
                        v480 = v500;
                      }
                      else
                      {
                        v480 = v500;
                        if (v478[6])
                        {
                          v481 = *((unsigned __int8 *)v23 + v478[6]);
                          if (v481 == 3)
                            v482 = 1;
                          else
                            v482 = 2 * (v481 == 2);
                        }
                        else
                        {
                          v482 = 0;
                        }
                        v493 = v479 < 0x1D || !v478[14] || *((unsigned __int8 *)v23 + v478[14]) == 0;
                      }
                      v464 = -[MTLThreadgroupMemoryBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:dataSize:alignment:](v477, "initWithName:type:access:isActive:locationIndex:arraySize:dataType:dataSize:alignment:", v28, 1, v482, v493, *(unsigned int *)((char *)v23 + v478[4]), *(unsigned int *)((char *)v23 + v478[5]), v419, v480, (unsigned __int16)v280);
                    }
                    else
                    {
                      v483 = v277;
                      v484 = HIDWORD(v277);
                      v485 = [MTLBufferBindingInternal alloc];
                      v486 = (unsigned __int16 *)((char *)v23 - *v23);
                      v487 = *v486;
                      if (v487 < 0xD)
                      {
                        v490 = 0;
                        v491 = 1;
                        v488 = v500;
                      }
                      else
                      {
                        v488 = v500;
                        if (v486[6])
                        {
                          v489 = *((unsigned __int8 *)v23 + v486[6]);
                          if (v489 == 3)
                            v490 = 1;
                          else
                            v490 = 2 * (v489 == 2);
                        }
                        else
                        {
                          v490 = 0;
                        }
                        v491 = v487 < 0x1D || !v486[14] || *((unsigned __int8 *)v23 + v486[14]) == 0;
                      }
                      LOBYTE(v497) = v474;
                      v464 = -[MTLBufferBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:](v485, "initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:", v28, 0, v490, v491, *(unsigned int *)((char *)v23 + v486[4]), *(unsigned int *)((char *)v23 + v486[5]), v419, v483, v484, v497, v488, (unsigned __int16)v280);
                    }
LABEL_598:
                    v248 = (MTLBuiltInMeshArgument *)v464;
                    if (v419 == 1)
                      -[MTLThreadgroupMemoryBindingInternal setStructType:doRetain:](v464, "setStructType:doRetain:", v265, v501);
                    if (v265)
                      goto LABEL_601;
LABEL_602:
                    v247 = (MTLTextureBindingInternal *)v248;
LABEL_603:
                    -[MTLBindingInternal setIsArgument:](v247, "setIsArgument:", 1);
                    v14 = 0;
                    goto LABEL_604;
                  }
                  if (v279 < 0x19)
                  {
                    v471 = 0;
                    v28 = v280;
                  }
                  else
                  {
                    v471 = v278[12];
                    v28 = v280;
                    if (v471)
                      v471 += (uint64_t)v23 + *(unsigned int *)((char *)v23 + v471);
                  }
                  LOWORD(v280) = v498;
LABEL_569:
                  v472 = (const void *)(v471 + 4);
                  v473 = strlen((const char *)(v471 + 4));
                  v265 = 0;
                  v419 = dataTypeFromString(v472, v473);
                  if (!v377)
                  {
                    v474 = 0;
                    goto LABEL_578;
                  }
                  goto LABEL_570;
                }
                v28 = v280;
                LOWORD(v280) = v498;
LABEL_568:
                v500 = v376;
                v471 = 0;
                LOBYTE(v501) = 1;
                goto LABEL_569;
              }
              v284 = 0;
            }
            v376 = v284;
            if (v279 < 0xF)
            {
              v377 = 0;
              goto LABEL_568;
            }
            v498 = (__int16)v280;
            goto LABEL_560;
          case 262145:
            v105 = (int *)AirReflection::Node::node_as_SamplerArg(v8);
            v106 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v106 >= 0xDu && (v107 = v106[6]) != 0)
              v108 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v105 + v107 + *(unsigned int *)((char *)v105 + v107) + 4);
            else
              v108 = &stru_1E0FE5DC8;
            v225 = [MTLBindingInternal alloc];
            v226 = (unsigned __int16 *)((char *)v105 - *v105);
            v227 = *(unsigned int *)((char *)v105 + v226[3]);
            v228 = *v226 < 0xFu || !v226[7] || *((unsigned __int8 *)v105 + v226[7]) == 0;
            v244 = *(unsigned int *)((char *)v105 + v226[4]);
            v245 = v108;
            v246 = 3;
            goto LABEL_267;
          case 262146:
            v109 = (int *)AirReflection::Node::node_as_TextureArg(v8);
            v110 = *v109;
            v111 = -v110;
            v112 = (unsigned __int16 *)((char *)v109 - v110);
            if (*v112 >= 0x11u && (v113 = v112[8]) != 0)
            {
              v114 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v109 + v113 + *(unsigned int *)((char *)v109 + v113) + 4);
              v111 = -(uint64_t)*v109;
            }
            else
            {
              v114 = &stru_1E0FE5DC8;
            }
            LODWORD(v502[0]) = 0;
            LOBYTE(v501) = 0;
            v229 = (unsigned __int16 *)((char *)v109 + v111);
            if (*v229 < 0xFu)
            {
              v230 = 0;
            }
            else
            {
              v230 = v229[7];
              if (v230)
                v230 += (uint64_t)v109 + *(unsigned int *)((char *)v109 + v230);
            }
            v334 = (void *)(v230 + 4);
            v335 = strlen((const char *)(v230 + 4));
            v336 = textureTypeFromString(v334, v335, v502, &v501);
            v337 = [MTLTextureBindingInternal alloc];
            v338 = (unsigned __int16 *)((char *)v109 - *v109);
            v339 = *v338;
            if (v339 < 0xB)
            {
              v341 = 0;
            }
            else
            {
              if (v338[5])
              {
                v340 = *((unsigned __int8 *)v109 + v338[5]);
                if (v340 == 3)
                  v341 = 1;
                else
                  v341 = 2 * (v340 == 2);
              }
              else
              {
                v341 = 0;
              }
              if (v339 >= 0x13 && v338[9])
              {
                v415 = *((unsigned __int8 *)v109 + v338[9]) == 0;
                goto LABEL_470;
              }
            }
            v415 = 1;
LABEL_470:
            LOBYTE(v495) = v501;
            v247 = -[MTLTextureBindingInternal initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:](v337, "initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:", v114, v341, v415, *(unsigned int *)((char *)v109 + v338[3]), *(unsigned int *)((char *)v109 + v338[4]), LODWORD(v502[0]), v336, v495);
LABEL_268:
            v248 = (MTLBuiltInMeshArgument *)v247;
            goto LABEL_603;
          case 262147:
            v115 = (int *)AirReflection::Node::node_as_ConstantArg(v8);
            v116 = *v115;
            v117 = -v116;
            v118 = (unsigned __int16 *)((char *)v115 - v116);
            if (*v118 >= 0x13u && (v119 = v118[9]) != 0)
            {
              v120 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v115 + v119 + *(unsigned int *)((char *)v115 + v119) + 4);
              v117 = -(uint64_t)*v115;
            }
            else
            {
              v120 = &stru_1E0FE5DC8;
            }
            v231 = (unsigned __int16 *)((char *)v115 + v117);
            if (*v231 < 0x11u)
            {
              v232 = 0;
            }
            else
            {
              v232 = v231[8];
              if (v232)
                v232 += (uint64_t)v115 + *(unsigned int *)((char *)v115 + v232);
            }
            v342 = (const void *)(v232 + 4);
            v343 = strlen((const char *)(v232 + 4));
            v344 = pixelFormatAndALUTypeFromString(v342, v343);
            v345 = v344;
            v346 = (unsigned __int16 *)((char *)v115 - *v115);
            v347 = *(unsigned __int16 *)((char *)v115 + v346[7]);
            if (*v346 < 0x11u)
            {
              v348 = 0;
            }
            else
            {
              v348 = v346[8];
              if (v348)
                v348 += (uint64_t)v115 + *(unsigned int *)((char *)v115 + v348);
            }
            v361 = HIDWORD(v344);
            v362 = (const void *)(v348 + 4);
            v363 = strlen((const char *)(v348 + 4));
            v364 = dataTypeFromString(v362, v363);
            v365 = [MTLBufferBindingInternal alloc];
            v366 = (unsigned __int16 *)((char *)v115 - *v115);
            v367 = *v366 < 0x15u || !v366[10] || *((unsigned __int8 *)v115 + v366[10]) == 0;
            LOBYTE(v497) = 0;
            v247 = -[MTLBufferBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:](v365, "initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:", v120, 22, 0, v367, *(unsigned int *)((char *)v115 + v366[3]), *(unsigned int *)((char *)v115 + v366[4]), v364, v345, v361, v497, *(unsigned int *)((char *)v115 + v366[6]), v347);
            goto LABEL_268;
          case 262148:
            v121 = (int *)AirReflection::Node::node_as_IndirectBufferArg(v8);
            v122 = *v121;
            v123 = -v122;
            v124 = (unsigned __int16 *)((char *)v121 - v122);
            if (*v124 >= 0x1Bu && (v125 = v124[13]) != 0)
            {
              v126 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v121 + v125 + *(unsigned int *)((char *)v121 + v125) + 4);
              v123 = -(uint64_t)*v121;
            }
            else
            {
              v126 = &stru_1E0FE5DC8;
            }
            v233 = (unsigned __int16 *)((char *)v121 + v123);
            v499 = v126;
            if (*v233 < 0x19u)
            {
              v234 = 0;
            }
            else
            {
              v234 = v233[12];
              if (v234)
                v234 += (uint64_t)v121 + *(unsigned int *)((char *)v121 + v234);
            }
            v349 = (const void *)(v234 + 4);
            v350 = strlen((const char *)(v234 + 4));
            v351 = pixelFormatAndALUTypeFromString(v349, v350);
            v352 = (unsigned __int16 *)((char *)v121 - *v121);
            v353 = *v352;
            if (v353 < 0x17)
            {
              LOWORD(v354) = 0;
              v368 = 0;
              if (v353 < 0xF)
                goto LABEL_479;
            }
            else if (v352[11])
            {
              v354 = *(int *)((char *)v121 + v352[11]);
            }
            else
            {
              LOWORD(v354) = 0;
            }
            if (v352[7])
              v416 = *((unsigned __int8 *)v121 + v352[7]);
            else
              v416 = 1;
            v368 = v416 == 2;
            if (v353 >= 0x11)
            {
              v417 = v352[8];
              LOBYTE(v501) = 1;
              if (v417)
              {
                v418 = *((_QWORD *)a4 + 5) + *((_QWORD *)a4 + 4) - 1;
                ContextStack::ContextStack((ContextStack *)v502, *(MTLFunctionType *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * (v418 / 0x49)) + 56 * (v418 % 0x49)), 1);
                std::deque<ContextStack>::push_back(a4, v502);
                ContextStack::~ContextStack((ContextStack *)v502);
                v265 = deserializeStructArgument((uint64_t)a1, (unsigned int *)((char *)v121 + v417), a3, a4, &v501);
                std::deque<ContextStack>::pop_back(a4);
                v419 = 1;
                if (v416 != 2)
                {
LABEL_478:
                  v420 = 0;
                  goto LABEL_484;
                }
LABEL_481:
                if (objc_msgSend(a1, "minConstantBufferAlignmentBytes") >= (unint64_t)(unsigned __int16)v354)
                {
                  v425 = objc_msgSend(a1, "minConstantBufferAlignmentBytes");
                  v420 = 1;
                  LOWORD(v354) = v425;
                }
                else
                {
                  v420 = 1;
                }
LABEL_484:
                v426 = *((_QWORD *)a4 + 5) + *((_QWORD *)a4 + 4) - 1;
                if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * (v426 / 0x49)) + 56 * (v426 % 0x49) + 8)
                  && (v427 = *(unsigned __int16 *)((char *)v121 - *v121), v427 >= 7)
                  && *(_WORD *)((char *)v121 - *v121 + 6))
                {
                  v428 = *(unsigned int *)((char *)v121 + *(unsigned __int16 *)((char *)v121 - *v121 + 6));
                }
                else
                {
                  v429 = (unsigned __int16 *)((char *)v121 - *v121);
                  v427 = *v429;
                  if (v427 >= 0x15)
                  {
                    if (v429[10])
                      v428 = *(unsigned int *)((char *)v121 + v429[10]);
                    else
                      v428 = 0;
LABEL_528:
                    if (*(_WORD *)((char *)v121 - *v121 + 14)
                      && *((_BYTE *)v121 + *(unsigned __int16 *)((char *)v121 - *v121 + 14)) == 3)
                    {
                      v452 = [MTLThreadgroupMemoryBindingInternal alloc];
                      v453 = (unsigned __int16 *)((char *)v121 - *v121);
                      v454 = *v453;
                      if (v454 < 0xD)
                      {
                        v456 = 0;
                        v465 = 1;
                        v466 = v499;
                      }
                      else
                      {
                        if (v453[6])
                        {
                          v455 = *((unsigned __int8 *)v121 + v453[6]);
                          if (v455 == 3)
                            v456 = 1;
                          else
                            v456 = 2 * (v455 == 2);
                        }
                        else
                        {
                          v456 = 0;
                        }
                        v466 = v499;
                        v465 = v454 < 0x1D || !v453[14] || *((unsigned __int8 *)v121 + v453[14]) == 0;
                      }
                      v464 = -[MTLThreadgroupMemoryBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:dataSize:alignment:](v452, "initWithName:type:access:isActive:locationIndex:arraySize:dataType:dataSize:alignment:", v466, 1, v456, v465, *(unsigned int *)((char *)v121 + v453[4]), *(unsigned int *)((char *)v121 + v453[5]), v419, v428, (unsigned __int16)v354);
                      goto LABEL_598;
                    }
LABEL_535:
                    v457 = [MTLBufferBindingInternal alloc];
                    v458 = (unsigned __int16 *)((char *)v121 - *v121);
                    v459 = *v458;
                    if (v459 < 0xD)
                    {
                      v461 = 0;
                      v462 = 1;
                      v463 = v499;
                    }
                    else
                    {
                      if (v458[6])
                      {
                        v460 = *((unsigned __int8 *)v121 + v458[6]);
                        if (v460 == 3)
                          v461 = 1;
                        else
                          v461 = 2 * (v460 == 2);
                      }
                      else
                      {
                        v461 = 0;
                      }
                      v463 = v499;
                      v462 = v459 < 0x1D || !v458[14] || *((unsigned __int8 *)v121 + v458[14]) == 0;
                    }
                    LOBYTE(v497) = v420;
                    v464 = -[MTLBufferBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:](v457, "initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:", v463, 0, v461, v462, *(unsigned int *)((char *)v121 + v458[4]), *(unsigned int *)((char *)v121 + v458[5]), v419, v351, HIDWORD(v351), v497, v428, (unsigned __int16)v354);
                    goto LABEL_598;
                  }
                  v428 = 0;
                }
                if (v427 < 0xF)
                  goto LABEL_535;
                goto LABEL_528;
              }
              if (v353 < 0x19)
              {
                v421 = 0;
              }
              else
              {
                v421 = v352[12];
                if (v421)
                  v421 += (uint64_t)v121 + *(unsigned int *)((char *)v121 + v421);
              }
LABEL_480:
              v422 = (const void *)(v421 + 4);
              v423 = strlen((const char *)(v421 + 4));
              v424 = dataTypeFromString(v422, v423);
              v265 = 0;
              v419 = v424;
              if (!v368)
                goto LABEL_478;
              goto LABEL_481;
            }
LABEL_479:
            v421 = 0;
            LOBYTE(v501) = 1;
            goto LABEL_480;
          case 262149:
            v127 = (int *)AirReflection::Node::node_as_IndirectConstantArg(v8);
            v128 = *v127;
            v129 = -v128;
            v130 = (unsigned __int16 *)((char *)v127 - v128);
            if (*v130 >= 0xDu && (v131 = v130[6]) != 0)
            {
              v132 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v127 + v131 + *(unsigned int *)((char *)v127 + v131) + 4);
              v129 = -(uint64_t)*v127;
            }
            else
            {
              v132 = &stru_1E0FE5DC8;
            }
            v235 = (unsigned __int16 *)((char *)v127 + v129);
            if (*v235 < 0xBu)
            {
              v236 = 0;
            }
            else
            {
              v236 = v235[5];
              if (v236)
                v236 += (uint64_t)v127 + *(unsigned int *)((char *)v127 + v236);
            }
            v355 = (const void *)(v236 + 4);
            v356 = strlen((const char *)(v236 + 4));
            v357 = pixelFormatAndALUTypeFromString(v355, v356);
            v358 = v357;
            v501 = 0;
            LODWORD(v502[0]) = 0;
            v359 = (unsigned __int16 *)((char *)v127 - *v127);
            if (*v359 < 0xBu)
            {
              v360 = 0;
            }
            else
            {
              v360 = v359[5];
              if (v360)
                v360 += (uint64_t)v127 + *(unsigned int *)((char *)v127 + v360);
            }
            v369 = HIDWORD(v357);
            v370 = (const void *)(v360 + 4);
            v371 = strlen((const char *)(v360 + 4));
            v372 = dataTypeFromString(v370, v371, v502, &v501);
            v373 = [MTLIndirectConstantArgument alloc];
            v374 = (unsigned __int16 *)((char *)v127 - *v127);
            v375 = *v374 < 0xFu || !v374[7] || *((unsigned __int8 *)v127 + v374[7]) == 0;
            v247 = -[MTLIndirectConstantArgument initWithName:type:access:isActive:locationIndex:dataType:pixelFormat:aluType:dataSize:alignment:](v373, "initWithName:type:access:isActive:locationIndex:dataType:pixelFormat:aluType:dataSize:alignment:", v132, 4, 0, v375, *(unsigned int *)((char *)v127 + v374[3]), v372, v358, v369, v501, LODWORD(v502[0]));
            goto LABEL_268;
          case 262150:
            v133 = (int *)AirReflection::Node::node_as_CommandBufferArg(v8);
            v134 = (unsigned __int16 *)((char *)v133 - *v133);
            if (*v134 >= 0xDu && (v135 = v134[6]) != 0)
              v136 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v133 + v135 + *(unsigned int *)((char *)v133 + v135) + 4);
            else
              v136 = &stru_1E0FE5DC8;
            v225 = [MTLBindingInternal alloc];
            v237 = (unsigned __int16 *)((char *)v133 - *v133);
            v227 = *(unsigned int *)((char *)v133 + v237[3]);
            v228 = *v237 < 0xFu || !v237[7] || *((unsigned __int8 *)v133 + v237[7]) == 0;
            v244 = *(unsigned int *)((char *)v133 + v237[4]);
            v245 = v136;
            v246 = 21;
            goto LABEL_267;
          case 262151:
            v137 = (int *)AirReflection::Node::node_as_ComputePipelineStateArg(v8);
            v138 = (unsigned __int16 *)((char *)v137 - *v137);
            if (*v138 >= 0xDu && (v139 = v138[6]) != 0)
              v140 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v137 + v139 + *(unsigned int *)((char *)v137 + v139) + 4);
            else
              v140 = &stru_1E0FE5DC8;
            v225 = [MTLBindingInternal alloc];
            v238 = (unsigned __int16 *)((char *)v137 - *v137);
            v227 = *(unsigned int *)((char *)v137 + v238[3]);
            v228 = *v238 < 0xFu || !v238[7] || *((unsigned __int8 *)v137 + v238[7]) == 0;
            v244 = *(unsigned int *)((char *)v137 + v238[4]);
            v245 = v140;
            v246 = 20;
            goto LABEL_267;
          case 262152:
            v141 = (int *)AirReflection::Node::node_as_RenderPipelineStateArg(v8);
            v142 = (unsigned __int16 *)((char *)v141 - *v141);
            if (*v142 >= 0xDu && (v143 = v142[6]) != 0)
              v144 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v141 + v143 + *(unsigned int *)((char *)v141 + v143) + 4);
            else
              v144 = &stru_1E0FE5DC8;
            v225 = [MTLBindingInternal alloc];
            v239 = (unsigned __int16 *)((char *)v141 - *v141);
            v227 = *(unsigned int *)((char *)v141 + v239[3]);
            v228 = *v239 < 0xFu || !v239[7] || *((unsigned __int8 *)v141 + v239[7]) == 0;
            v244 = *(unsigned int *)((char *)v141 + v239[4]);
            v245 = v144;
            v246 = 19;
            goto LABEL_267;
          case 262153:
            v145 = (int *)AirReflection::Node::node_as_VisibleFunctionTableArg(v8);
            v146 = (unsigned __int16 *)((char *)v145 - *v145);
            if (*v146 >= 0x11u && (v147 = v146[8]) != 0)
              v148 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v145 + v147 + *(unsigned int *)((char *)v145 + v147) + 4);
            else
              v148 = &stru_1E0FE5DC8;
            v225 = [MTLBindingInternal alloc];
            v240 = (unsigned __int16 *)((char *)v145 - *v145);
            v227 = *(unsigned int *)((char *)v145 + v240[3]);
            v228 = *v240 < 0x13u || !v240[9] || *((unsigned __int8 *)v145 + v240[9]) == 0;
            v244 = *(unsigned int *)((char *)v145 + v240[4]);
            v245 = v148;
            v246 = 24;
            goto LABEL_267;
          case 262154:
            v149 = (int *)AirReflection::Node::node_as_IntersectionFunctionTableArg(v8);
            v150 = (unsigned __int16 *)((char *)v149 - *v149);
            if (*v150 >= 0x11u && (v151 = v150[8]) != 0)
              v152 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v149 + v151 + *(unsigned int *)((char *)v149 + v151) + 4);
            else
              v152 = &stru_1E0FE5DC8;
            v225 = [MTLBindingInternal alloc];
            v241 = (unsigned __int16 *)((char *)v149 - *v149);
            v227 = *(unsigned int *)((char *)v149 + v241[3]);
            v228 = *v241 < 0x13u || !v241[9] || *((unsigned __int8 *)v149 + v241[9]) == 0;
            v244 = *(unsigned int *)((char *)v149 + v241[4]);
            v245 = v152;
            v246 = 27;
            goto LABEL_267;
          case 262155:
            v153 = (int *)AirReflection::Node::node_as_InstanceAccelerationStructureArg(v8);
            v154 = (unsigned __int16 *)((char *)v153 - *v153);
            if (*v154 >= 0x11u && (v155 = v154[8]) != 0)
              v156 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v153 + v155 + *(unsigned int *)((char *)v153 + v155) + 4);
            else
              v156 = &stru_1E0FE5DC8;
            v225 = [MTLBindingInternal alloc];
            v242 = (unsigned __int16 *)((char *)v153 - *v153);
            v227 = *(unsigned int *)((char *)v153 + v242[3]);
            v228 = *v242 < 0x13u || !v242[9] || *((unsigned __int8 *)v153 + v242[9]) == 0;
            v244 = *(unsigned int *)((char *)v153 + v242[4]);
            v245 = v156;
            v246 = 26;
            goto LABEL_267;
          case 262156:
            v157 = (int *)AirReflection::Node::node_as_PrimitiveAccelerationStructureArg(v8);
            v158 = (unsigned __int16 *)((char *)v157 - *v157);
            if (*v158 >= 0x11u && (v159 = v158[8]) != 0)
              v160 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v157 + v159 + *(unsigned int *)((char *)v157 + v159) + 4);
            else
              v160 = &stru_1E0FE5DC8;
            v225 = [MTLBindingInternal alloc];
            v243 = (unsigned __int16 *)((char *)v157 - *v157);
            v227 = *(unsigned int *)((char *)v157 + v243[3]);
            v228 = *v243 < 0x13u || !v243[9] || *((unsigned __int8 *)v157 + v243[9]) == 0;
            v244 = *(unsigned int *)((char *)v157 + v243[4]);
            v245 = v160;
            v246 = 25;
LABEL_267:
            v247 = -[MTLBindingInternal initWithName:type:access:index:active:arrayLength:](v225, "initWithName:type:access:index:active:arrayLength:", v245, v246, 0, v227, v228, v244);
            goto LABEL_268;
          case 262157:
            return v15 | v14;
          default:
            goto LABEL_9;
        }
    }
  }
  if ((int)v10 < 274432)
  {
    v29 = (int *)AirReflection::Node::node_as_BaseInstanceArg(v8);
    v30 = *v29;
    v31 = -v30;
    v32 = (unsigned __int16 *)((char *)v29 - v30);
    if (*v32 >= 9u && (v33 = v32[4]) != 0)
    {
      v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v29 + v33 + *(unsigned int *)((char *)v29 + v33) + 4);
      v31 = -(uint64_t)*v29;
    }
    else
    {
      v21 = &stru_1E0FE5DC8;
    }
    v179 = (unsigned __int16 *)((char *)v29 + v31);
    if (*v179 < 7u)
    {
      v180 = 0;
    }
    else
    {
      v180 = v179[3];
      if (v180)
        v180 += (uint64_t)v29 + *(unsigned int *)((char *)v29 + v180);
    }
    v249 = (const void *)(v180 + 4);
    v250 = strlen((const char *)(v180 + 4));
    v251 = dataTypeFromString(v249, v250);
    v252 = [MTLBuiltInArgument alloc];
    v253 = (unsigned __int16 *)((char *)v29 - *v29);
    v255 = *v253 < 0xBu || (v254 = v253[5]) == 0 || *((unsigned __int8 *)v29 + v254) == 0;
    v256 = 4;
LABEL_382:
    v333 = -[MTLBuiltInArgument initWithName:type:access:active:index:dataType:builtInType:](v252, "initWithName:type:access:active:index:dataType:builtInType:", v21, 15, 0, v255, 0, v251, v256);
    v248 = (MTLBuiltInMeshArgument *)v333;
    v14 = 1;
LABEL_383:
    -[MTLBindingInternal setIsArgument:](v333, "setIsArgument:", 1);
LABEL_604:
    *a5 = v248;
    v15 = 0x100000000;
    return v15 | v14;
  }
  if ((int)v10 >= 278528)
  {
    if ((int)v10 < 282624)
    {
      v15 = 0;
      if ((v10 - 278528) < 2)
        return v15 | v14;
      if ((_DWORD)v10 != 278531)
      {
        if ((_DWORD)v10 == 278532)
        {
          v34 = (int *)AirReflection::Node::node_as_ImageblockDataArg(v8);
          v35 = *v34;
          v36 = -v35;
          v37 = (unsigned __int16 *)((char *)v34 - v35);
          if (*v37 >= 0x15u && (v38 = v37[10]) != 0)
          {
            v39 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v34 + v38 + *(unsigned int *)((char *)v34 + v38) + 4);
            v36 = -(uint64_t)*v34;
          }
          else
          {
            v39 = &stru_1E0FE5DC8;
          }
          v181 = (unsigned __int16 *)((char *)v34 + v36);
          v182 = *v181;
          if (v182 < 7)
          {
            v183 = 0;
          }
          else
          {
            if (v181[3])
              v183 = *(unsigned int *)((char *)v34 + v181[3]);
            else
              v183 = 0;
            if (v182 >= 0xB)
            {
              v378 = v181[5];
              if (v378)
              {
                v379 = (unsigned int *)(v6 + 4 * *(unsigned int *)((char *)v34 + v378));
                AirReflection::Node::node_as_StructTypeInfo((AirReflection::Node *)((char *)v379 + *v379));
                v380 = *((_QWORD *)a4 + 5) + *((_QWORD *)a4 + 4) - 1;
                ContextStack::ContextStack((ContextStack *)v502, *(MTLFunctionType *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * (v380 / 0x49)) + 56 * (v380 % 0x49)), 1);
                std::deque<ContextStack>::push_back(a4, v502);
                ContextStack::~ContextStack((ContextStack *)v502);
                v381 = (unsigned __int16 *)((char *)v34 - *v34);
                if (*v381 >= 0xBu && (v382 = v381[5]) != 0)
                  v383 = (unsigned int *)((char *)v34 + v382);
                else
                  v383 = 0;
                v384 = deserializeStructArgument((uint64_t)a1, v383, a3, a4, 0);
                std::deque<ContextStack>::pop_back(a4);
LABEL_433:
                v385 = *((_QWORD *)a4 + 5) + *((_QWORD *)a4 + 4) - 1;
                ContextStack::ContextStack((ContextStack *)v502, *(MTLFunctionType *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * (v385 / 0x49)) + 56 * (v385 % 0x49)), 1);
                std::deque<ContextStack>::push_back(a4, v502);
                ContextStack::~ContextStack((ContextStack *)v502);
                v386 = (unsigned __int16 *)((char *)v34 - *v34);
                if (*v386 >= 9u && (v387 = v386[4]) != 0)
                  v388 = (unsigned int *)((char *)v34 + v387);
                else
                  v388 = 0;
                v389 = deserializeStructArgument((uint64_t)a1, v388, a3, a4, 0);
                std::deque<ContextStack>::pop_back(a4);
                v390 = (unsigned __int16 *)((char *)v34 - *v34);
                v391 = *v390;
                if (v391 < 0xD)
                {
                  v392 = 0;
                }
                else
                {
                  if (v390[6])
                    v392 = *((_BYTE *)v34 + v390[6]) != 0;
                  else
                    v392 = 0;
                  if (v391 >= 0xF)
                  {
                    v446 = v390[7];
                    if (v446)
                    {
                      v447 = *(int *)((char *)v34 + v446);
                      goto LABEL_522;
                    }
                  }
                }
                v447 = -1;
LABEL_522:
                v448 = [MTLImageBlockDataArgument alloc];
                v449 = (unsigned __int16 *)((char *)v34 - *v34);
                v451 = *v449 < 0x17u || (v450 = v449[11]) == 0 || *((unsigned __int8 *)v34 + v450) == 0;
                HIDWORD(v495) = v447;
                LOBYTE(v495) = v392;
                v248 = -[MTLImageBlockDataArgument initWithName:type:access:isActive:index:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:](v448, "initWithName:type:access:isActive:index:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:", v39, 16, 0, v451, 0, v183, v384, v495);
                -[MTLBuiltInMeshArgument setStructType:](v248, "setStructType:", v389);

                goto LABEL_602;
              }
            }
          }
          v384 = 0;
          goto LABEL_433;
        }
        goto LABEL_9;
      }
      v161 = (int *)AirReflection::Node::node_as_ImageblockArg(v8);
      v162 = *v161;
      v163 = -v162;
      v164 = (unsigned __int16 *)((char *)v161 - v162);
      if (*v164 >= 0x13u && (v165 = v164[9]) != 0)
      {
        v166 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v161 + v165 + *(unsigned int *)((char *)v161 + v165) + 4);
        v163 = -(uint64_t)*v161;
      }
      else
      {
        v166 = &stru_1E0FE5DC8;
      }
      v186 = (unsigned __int16 *)((char *)v161 + v163);
      if (*v186 < 7u)
      {
        v188 = 0;
      }
      else
      {
        v187 = v186[3];
        v188 = v187 != 0;
        if (v187)
        {
          v189 = *(int *)((char *)v161 + v187);
          v188 = 1;
LABEL_284:
          v261 = *((_QWORD *)a4 + 5) + *((_QWORD *)a4 + 4) - 1;
          ContextStack::ContextStack((ContextStack *)v502, *(MTLFunctionType *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * (v261 / 0x49)) + 56 * (v261 % 0x49)), 1);
          std::deque<ContextStack>::push_back(a4, v502);
          ContextStack::~ContextStack((ContextStack *)v502);
          v262 = (unsigned __int16 *)((char *)v161 - *v161);
          if (*v262 >= 9u && (v263 = v262[4]) != 0)
            v264 = (unsigned int *)((char *)v161 + v263);
          else
            v264 = 0;
          v265 = deserializeStructArgument((uint64_t)a1, v264, a3, a4, 0);
          std::deque<ContextStack>::pop_back(a4);
          v266 = (unsigned __int16 *)((char *)v161 - *v161);
          v267 = *v266;
          if (v267 < 0xB)
          {
            v268 = 0;
          }
          else
          {
            if (v266[5])
              v268 = *((_BYTE *)v161 + v266[5]) != 0;
            else
              v268 = 0;
            if (v267 >= 0xD)
            {
              v440 = v266[6];
              if (v440)
              {
                v441 = *(int *)((char *)v161 + v440);
                goto LABEL_512;
              }
            }
          }
          v441 = -1;
LABEL_512:
          v442 = [MTLImageBlockArgument alloc];
          v443 = (unsigned __int16 *)((char *)v161 - *v161);
          v445 = *v443 < 0x15u || (v444 = v443[10]) == 0 || *((unsigned __int8 *)v161 + v444) == 0;
          HIDWORD(v496) = v441;
          LOBYTE(v496) = v268;
          LODWORD(v494) = v189;
          v248 = -[MTLImageBlockArgument initWithName:type:access:isActive:index:kind:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:](v442, "initWithName:type:access:isActive:index:kind:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:", v166, 17, 0, v445, 0, v188, v494, 0, v496);
          -[MTLBuiltInMeshArgument setStructType:](v248, "setStructType:", v265);
LABEL_601:

          goto LABEL_602;
        }
      }
      v189 = 0;
      goto LABEL_284;
    }
    if ((_DWORD)v10 != 282624)
    {
      if ((_DWORD)v10 != 286720)
      {
        if ((_DWORD)v10 != 290816)
          goto LABEL_9;
        v40 = (int *)AirReflection::Node::node_as_MeshGridPropertiesArg(v8);
        v41 = *v40;
        v42 = -v41;
        v43 = (unsigned __int16 *)((char *)v40 - v41);
        if (*v43 >= 9u && (v44 = v43[4]) != 0)
        {
          v21 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v40 + v44 + *(unsigned int *)((char *)v40 + v44) + 4);
          v42 = -(uint64_t)*v40;
        }
        else
        {
          v21 = &stru_1E0FE5DC8;
        }
        v184 = (unsigned __int16 *)((char *)v40 + v42);
        if (*v184 < 7u)
        {
          v185 = 0;
        }
        else
        {
          v185 = v184[3];
          if (v185)
            v185 += (uint64_t)v40 + *(unsigned int *)((char *)v40 + v185);
        }
        v257 = (const void *)(v185 + 4);
        v258 = strlen((const char *)(v185 + 4));
        v251 = dataTypeFromString(v257, v258);
        v252 = [MTLBuiltInArgument alloc];
        v259 = (unsigned __int16 *)((char *)v40 - *v40);
        v255 = *v259 < 0xBu || (v260 = v259[5]) == 0 || *((unsigned __int8 *)v40 + v260) == 0;
        v256 = 23;
        goto LABEL_382;
      }
      v173 = (int *)AirReflection::Node::node_as_MeshArg(v8);
      v174 = *v173;
      v175 = -v174;
      v176 = (unsigned __int16 *)((char *)v173 - v174);
      if (*v176 >= 0xBu && (v177 = v176[5]) != 0)
      {
        v178 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v173 + v177 + *(unsigned int *)((char *)v173 + v177) + 4);
        v175 = -(uint64_t)*v173;
      }
      else
      {
        v178 = &stru_1E0FE5DC8;
      }
      v193 = (unsigned __int16 *)((char *)v173 + v175);
      v194 = *v193;
      if (v194 < 0xD)
      {
        v195 = 1;
        if (v194 < 9)
        {
          v269 = 0;
          goto LABEL_444;
        }
      }
      else if (v193[6])
      {
        v195 = *((unsigned __int8 *)v173 + v193[6]) == 0;
      }
      else
      {
        v195 = 1;
      }
      v269 = v193[4];
      if (v269)
        v269 += (uint64_t)v173 + *(unsigned int *)((char *)v173 + v269);
LABEL_444:
      v393 = (const void *)(v269 + 4);
      v394 = strlen((const char *)(v269 + 4));
      v395 = dataTypeFromString(v393, v394);
      v396 = (unsigned int *)(v6
                            + 4 * *(unsigned int *)((char *)v173 + *(unsigned __int16 *)((char *)v173 - *v173 + 6)));
      v397 = (int *)AirReflection::Node::node_as_MeshTypeInfo((AirReflection::Node *)((char *)v396 + *v396));
      v398 = v397;
      v399 = (unsigned __int16 *)((char *)v397 - *v397);
      if (*v399 >= 5u && (v400 = v399[2]) != 0)
        v401 = (unsigned int *)((char *)v397 + v400 + *(unsigned int *)((char *)v397 + v400));
      else
        v401 = 0;
      v402 = v395;
      v403 = deserializeMeshStructArgument(v401, a3);
      v404 = (unsigned __int16 *)((char *)v398 - *v398);
      if (*v404 >= 7u && (v405 = v404[3]) != 0)
        v406 = (unsigned int *)((char *)v398 + v405 + *(unsigned int *)((char *)v398 + v405));
      else
        v406 = 0;
      v407 = deserializeMeshStructArgument(v406, a3);
      v408 = (unsigned __int16 *)((char *)v398 - *v398);
      v409 = *v408;
      if (v409 < 9)
      {
        LOWORD(v411) = 0;
        LOWORD(v410) = 0;
      }
      else
      {
        if (v408[4])
          v410 = *(int *)((char *)v398 + v408[4]);
        else
          LOWORD(v410) = 0;
        if (v409 < 0xB)
        {
          LOWORD(v411) = 0;
        }
        else
        {
          if (v408[5])
            v411 = *(int *)((char *)v398 + v408[5]);
          else
            LOWORD(v411) = 0;
          if (v409 >= 0xD)
          {
            v467 = v408[6];
            if (v467)
            {
              v468 = *((unsigned __int8 *)v398 + v467);
LABEL_558:
              WORD1(v497) = v411;
              LOWORD(v497) = v410;
              v248 = -[MTLBuiltInMeshArgument initWithName:type:access:active:index:dataType:builtInType:meshVertexStructType:meshPrimitiveStructType:meshVertexCount:meshPrimitiveCount:meshTopologyType:]([MTLBuiltInMeshArgument alloc], "initWithName:type:access:active:index:dataType:builtInType:meshVertexStructType:meshPrimitiveStructType:meshVertexCount:meshPrimitiveCount:meshTopologyType:", v178, 35, 2, v195, 0, v402, 24, v403, v407, v497, v468);

              v14 = 1;
              v333 = (MTLBuiltInArgument *)v248;
              goto LABEL_383;
            }
          }
        }
      }
      v468 = 1;
      goto LABEL_558;
    }
    v167 = (int *)AirReflection::Node::node_as_PayloadArg(v8);
    v168 = *v167;
    v169 = -v168;
    v170 = (unsigned __int16 *)((char *)v167 - v168);
    if (*v170 >= 0xFu && (v171 = v170[7]) != 0)
    {
      v172 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v167 + v171 + *(unsigned int *)((char *)v167 + v171) + 4);
      v169 = -(uint64_t)*v167;
    }
    else
    {
      v172 = &stru_1E0FE5DC8;
    }
    v190 = (unsigned __int16 *)((char *)v167 + v169);
    v191 = *v190;
    if (v191 >= 7 && v190[3])
      v192 = (unsigned int *)((char *)v167 + v190[3]);
    else
      v192 = 0;
    if (v191 < 0xB)
    {
      v196 = 0;
      v270 = 0;
      if (v191 < 9)
      {
LABEL_460:
        LOBYTE(v501) = 1;
        if (v192)
        {
          v412 = *((_QWORD *)a4 + 5) + *((_QWORD *)a4 + 4) - 1;
          ContextStack::ContextStack((ContextStack *)v502, *(MTLFunctionType *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * (v412 / 0x49)) + 56 * (v412 % 0x49)), 1);
          std::deque<ContextStack>::push_back(a4, v502);
          ContextStack::~ContextStack((ContextStack *)v502);
          v265 = deserializeStructArgument((uint64_t)a1, v192, a3, a4, &v501);
          std::deque<ContextStack>::pop_back(a4);
          v413 = 1;
        }
        else
        {
          if (v191 < 0xD)
          {
            v414 = 0;
          }
          else
          {
            v414 = v190[6];
            if (v414)
              v414 += (uint64_t)v167 + *(unsigned int *)((char *)v167 + v414);
          }
          v430 = (const void *)(v414 + 4);
          v431 = strlen((const char *)(v414 + 4));
          v432 = dataTypeFromString(v430, v431);
          v265 = 0;
          v413 = v432;
        }
        v433 = *((_QWORD *)a4 + 5) + *((_QWORD *)a4 + 4) - 1;
        v434 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * (v433 / 0x49)) + 56 * (v433 % 0x49)) != 7;
        v435 = [MTLObjectPayloadBindingInternal alloc];
        v436 = (unsigned __int16 *)((char *)v167 - *v167);
        v438 = *v436 < 0x11u || (v437 = v436[8]) == 0 || *((unsigned __int8 *)v167 + v437) == 0;
        v439 = -[MTLObjectPayloadBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:dataSize:alignment:](v435, "initWithName:type:access:isActive:locationIndex:arraySize:dataType:dataSize:alignment:", v172, 34, v434, v438, 0xFFFFFFFFLL, 1, v413, v270, v196);
        v248 = (MTLBuiltInMeshArgument *)v439;
        if (!v265)
          goto LABEL_602;
        -[MTLObjectPayloadBindingInternal setStructType:doRetain:](v439, "setStructType:doRetain:", v265, v501);
        goto LABEL_601;
      }
    }
    else if (v190[5])
    {
      v196 = *(unsigned __int16 *)((char *)v167 + v190[5]);
    }
    else
    {
      v196 = 0;
    }
    if (v190[4])
      v270 = *(unsigned int *)((char *)v167 + v190[4]);
    else
      v270 = 0;
    goto LABEL_460;
  }
  v22 = (v10 - 274432) > 0xE || ((1 << v10) & 0x61FF) == 0;
  v15 = 0;
  if (v22)
    goto LABEL_9;
  return v15 | v14;
}

void sub_18266D814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  ContextStack::~ContextStack((ContextStack *)va);
  _Unwind_Resume(a1);
}

uint64_t AirReflection::Node::node_as_BufferArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 0x40000)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_TextureArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262146) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

void ContextStack::ContextStack(ContextStack *this, MTLFunctionType a2, char a3)
{
  _OWORD v3[2];
  int v4;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_QWORD *)this = a2;
  *((_BYTE *)this + 8) = a3;
  memset(v3, 0, sizeof(v3));
  v4 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)this + 16, (uint64_t *)v3);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v3);
}

uint64_t textureTypeFromString(void *__src, size_t __len, _DWORD *a3, _BYTE *a4)
{
  void **v8;
  size_t v9;
  size_t v10;
  const char *v11;
  char *NextToken;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v22;
  void *__dst[2];
  int64_t v24;
  char v25;
  void **v26;
  _DWORD v27[2];
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)__len;
    v24 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v24) = __len;
  v8 = __dst;
  if (__len)
LABEL_8:
    memmove(v8, __src, __len);
  *((_BYTE *)v8 + __len) = 0;
  if (v24 >= 0)
    v11 = (const char *)__dst;
  else
    v11 = (const char *)__dst[0];
  v27[0] = 0;
  v28 = v11;
  v27[1] = strlen(v11);
  NextToken = BasicParser::getNextToken((BasicParser *)v27);
  if (!strcmp(NextToken, "array"))
    NextToken = BasicParser::getNextToken((BasicParser *)v27);
  v13 = atomic_load(&textureTypeMapOnce);
  if (v13 != -1)
  {
    __p[0] = &v25;
    v26 = __p;
    std::__call_once(&textureTypeMapOnce, &v26, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<textureTypeMap(void)::$_0 &&>>);
  }
  v14 = textureTypeMap(void)::nonGlobalTextureTypeMap;
  std::string::basic_string[abi:ne180100]<0>(__p, NextToken);
  v15 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::find<std::string>(v14, (const void **)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v16 = *(unsigned int *)(v15 + 56);
  *a4 = *(_BYTE *)(v15 + 60);
  v17 = BasicParser::getNextToken((BasicParser *)v27);
  v18 = bufferTypeMap();
  std::string::basic_string[abi:ne180100]<0>(__p, v17);
  v19 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::find<std::string>(v18, (const void **)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  *a3 = *(_DWORD *)(v19 + 60);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
  return v16;
}

void sub_18266DB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AirReflection::Node::node_as_IndirectConstantArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262149) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_SamplerArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262145) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_VertexIDArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270339) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_IndirectBufferArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262148) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadPositionInGridArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 266240)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_InstanceIDArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270338) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_AmplificationIDArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270351) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadsPerGridArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266241) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)(a1 + 48));
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

_DWORD *getStructIndirectArgumentIndexStride(_DWORD *result, uint64_t a2)
{
  int *v3;
  unsigned __int16 *v4;
  unsigned int v5;
  int v6;
  int StructIndirectArgumentIndexStride;
  uint64_t v8;
  int *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  char *v12;
  unsigned __int16 v13;
  uint64_t v14;
  AirReflection::Node *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  int *v22;
  int *v23;
  unsigned __int16 *v24;
  unsigned int v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned __int16 v28;

  if (!result)
    return result;
  if (!*result)
    return 0;
  v3 = (_DWORD *)((char *)&result[*result - 1 + 1] + result[*result - 1 + 1]);
  v4 = (unsigned __int16 *)((char *)v3 - *v3);
  v5 = *v4;
  if (v5 < 0x15)
  {
    v6 = 0;
    StructIndirectArgumentIndexStride = 0;
    if (v5 < 5)
      goto LABEL_25;
  }
  else if (v4[10])
  {
    v6 = *(int *)((char *)v3 + v4[10]);
  }
  else
  {
    v6 = 0;
  }
  if (v4[2])
  {
    v8 = a2 + 4 * *(unsigned int *)((char *)v3 + v4[2]);
    v9 = (int *)AirReflection::Node::node_as_StructTypeInfo((AirReflection::Node *)(v8 + 4 + *(unsigned int *)(v8 + 4)));
    v10 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v10 >= 5u && (v11 = v10[2]) != 0)
      v12 = (char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11);
    else
      v12 = 0;
    StructIndirectArgumentIndexStride = getStructIndirectArgumentIndexStride(v12, a2);
  }
  else
  {
    if (v5 >= 0x13)
    {
      v13 = v4[9];
      if (v13)
      {
        v14 = a2 + 4 * *(unsigned int *)((char *)v3 + v13);
        v15 = (AirReflection::Node *)(v14 + 4 + *(unsigned int *)(v14 + 4));
        v16 = (unsigned __int16 *)((char *)v15 - *(int *)v15);
        if (*v16 < 5u)
        {
          LODWORD(v17) = 0;
        }
        else
        {
          v17 = v16[2];
          if (v17)
          {
            LODWORD(v17) = *(_DWORD *)((char *)v15 + v17);
            switch((int)v17)
            {
              case 262144:
                v18 = (int *)AirReflection::Node::node_as_BufferArg(v15);
                goto LABEL_35;
              case 262145:
                v22 = (int *)AirReflection::Node::node_as_SamplerArg(v15);
                goto LABEL_47;
              case 262146:
                v22 = (int *)AirReflection::Node::node_as_TextureArg(v15);
                goto LABEL_47;
              case 262148:
                v18 = (int *)AirReflection::Node::node_as_IndirectBufferArg(v15);
LABEL_35:
                v23 = v18;
                v24 = (unsigned __int16 *)((char *)v18 - *v18);
                v25 = *v24;
                if (v25 < 0xB)
                {
                  StructIndirectArgumentIndexStride = 1;
                  if (v25 < 9)
                    goto LABEL_57;
                }
                else if (v24[5])
                {
                  StructIndirectArgumentIndexStride = *(int *)((char *)v18 + v24[5]);
                }
                else
                {
                  StructIndirectArgumentIndexStride = 1;
                }
                v28 = v24[4];
                goto LABEL_54;
              case 262149:
                v22 = (int *)AirReflection::Node::node_as_IndirectConstantArg(v15);
                goto LABEL_47;
              case 262150:
                v22 = (int *)AirReflection::Node::node_as_CommandBufferArg(v15);
                goto LABEL_47;
              case 262151:
                v22 = (int *)AirReflection::Node::node_as_ComputePipelineStateArg(v15);
                goto LABEL_47;
              case 262152:
                v22 = (int *)AirReflection::Node::node_as_RenderPipelineStateArg(v15);
                goto LABEL_47;
              case 262153:
                v22 = (int *)AirReflection::Node::node_as_VisibleFunctionTableArg(v15);
                goto LABEL_47;
              case 262154:
                v22 = (int *)AirReflection::Node::node_as_IntersectionFunctionTableArg(v15);
                goto LABEL_47;
              case 262155:
                v22 = (int *)AirReflection::Node::node_as_InstanceAccelerationStructureArg(v15);
                goto LABEL_47;
              case 262156:
                v22 = (int *)AirReflection::Node::node_as_PrimitiveAccelerationStructureArg(v15);
                goto LABEL_47;
              case 262157:
                v22 = (int *)AirReflection::Node::node_as_BufferStrideArg(v15);
LABEL_47:
                v23 = v22;
                v26 = (unsigned __int16 *)((char *)v22 - *v22);
                v27 = *v26;
                if (v27 < 9)
                {
                  StructIndirectArgumentIndexStride = 1;
                  if (v27 < 7)
                    goto LABEL_57;
                }
                else if (v26[4])
                {
                  StructIndirectArgumentIndexStride = *(int *)((char *)v22 + v26[4]);
                }
                else
                {
                  StructIndirectArgumentIndexStride = 1;
                }
                v28 = v26[3];
LABEL_54:
                if (v28)
                {
                  v6 = *(int *)((char *)v23 + v28);
                  goto LABEL_25;
                }
LABEL_57:
                v6 = 0;
                break;
              default:
                goto LABEL_23;
            }
            goto LABEL_25;
          }
        }
LABEL_23:
        AirReflection::EnumNameNodeType(v17);
      }
    }
    StructIndirectArgumentIndexStride = 0;
  }
LABEL_25:
  v19 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v19 >= 0xBu)
  {
    v20 = v19[5];
    if (v20)
    {
      v21 = *(int *)((char *)v3 + v20);
      if (v21 <= 1)
        v21 = 1;
      StructIndirectArgumentIndexStride *= v21;
    }
  }
  return (_DWORD *)(StructIndirectArgumentIndexStride + v6);
}

void validateBlendFactorNotDualSourced(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = a2;
  blendFactorSource(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v11 == 2)
  {
    MTLBlendFactorString((MTLBlendFactor)v9);
    _MTLMessageContextPush_(a3, 4, (uint64_t)CFSTR("MTLRenderPipelineDescriptor color render target(%lu) is using a blend factor (%@)which is can only be used for render target 0"), v12, v13, v14, v15, v16, a1);
  }
}

uint64_t getPostVertexDumpOutputKernel@<X0>(int *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t result;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  unsigned int *v17;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v7 = (char *)a1 - *a1;
  if (*((_WORD *)v7 + 3))
    v8 = (uint64_t)a1 + *((unsigned __int16 *)v7 + 3) + *(unsigned int *)((char *)a1 + *((unsigned __int16 *)v7 + 3));
  else
    v8 = 0;
  v9 = v8
     + 4
     * *(unsigned int *)((char *)a1
                       + *((unsigned __int16 *)v7 + 6)
                       + *(unsigned int *)((char *)a1 + *((unsigned __int16 *)v7 + 6))
                       + 4);
  v10 = (int *)AirReflection::Node::node_as_KernelFunction((AirReflection::Node *)(v9 + 4 + *(unsigned int *)(v9 + 4)));
  result = getDefaultPostVertexBuiltins(v8, (void **)a4, 0, 0, a3);
  v12 = result;
  v13 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v13 >= 7u)
  {
    v14 = v13[3];
    if (v14)
    {
      v15 = (int *)((char *)v10 + v14 + *(unsigned int *)((char *)v10 + v14));
      if (*v15)
      {
        v16 = 0;
        v17 = v15 + 1;
        do
        {
          result = getPostVertexDumpOutputForNode(v17, v8, (void **)a4, v12);
          v12 = result;
          ++v16;
          ++v17;
        }
        while (v16 < *v15);
      }
    }
  }
  *a2 = v12;
  return result;
}

void sub_18266E9C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AirReflection::Node::node_as_KernelFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 2) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t getPostVertexDumpOutputVertex@<X0>(int *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  unsigned int *v14;
  uint64_t result;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  unsigned int *v21;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v7 = (char *)a1 - *a1;
  if (*((_WORD *)v7 + 3))
    v8 = (uint64_t)a1 + *((unsigned __int16 *)v7 + 3) + *(unsigned int *)((char *)a1 + *((unsigned __int16 *)v7 + 3));
  else
    v8 = 0;
  v9 = v8
     + 4
     * *(unsigned int *)((char *)a1
                       + *((unsigned __int16 *)v7 + 7)
                       + *(unsigned int *)((char *)a1 + *((unsigned __int16 *)v7 + 7))
                       + 4);
  v10 = (int *)AirReflection::Node::node_as_VertexFunction((AirReflection::Node *)(v9 + 4 + *(unsigned int *)(v9 + 4)));
  v11 = v10;
  v12 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v12 >= 0xBu && (v13 = v12[5]) != 0)
    v14 = (unsigned int *)((char *)v10 + v13);
  else
    v14 = 0;
  result = getDefaultPostVertexBuiltins(v8, (void **)a4, 0, v14, a3);
  v16 = result;
  v17 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v17 >= 7u)
  {
    v18 = v17[3];
    if (v18)
    {
      v19 = (int *)((char *)v11 + v18 + *(unsigned int *)((char *)v11 + v18));
      if (*v19)
      {
        v20 = 0;
        v21 = v19 + 1;
        do
        {
          result = getPostVertexDumpOutputForNode(v21, v8, (void **)a4, v16);
          v16 = result;
          ++v20;
          ++v21;
        }
        while (v20 < *v19);
      }
    }
  }
  *a2 = v16;
  return result;
}

void sub_18266EB68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t getPostVertexDumpOutputForNode(unsigned int *a1, uint64_t a2, void **a3, uint64_t a4)
{
  AirReflection::Node *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v9;
  int *v10;
  int *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  const __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int16 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int16 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int16 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int16 *v78;
  uint64_t v79;
  unsigned __int16 *v80;
  uint64_t v81;
  unsigned __int16 *v82;
  uint64_t v83;
  unsigned __int16 *v84;
  uint64_t v85;
  unsigned __int16 *v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  unsigned __int16 *v90;
  uint64_t v91;
  unsigned __int16 *v92;
  uint64_t v93;
  unsigned __int16 *v94;
  uint64_t v95;
  unsigned __int16 *v96;
  uint64_t v97;
  unsigned __int16 *v98;
  uint64_t v99;
  unsigned __int16 *v100;
  uint64_t v101;
  unsigned __int16 *v102;
  uint64_t v103;
  unsigned __int16 *v104;
  uint64_t v105;
  unsigned __int16 *v106;
  uint64_t v107;
  unsigned __int16 *v108;
  uint64_t v109;
  unsigned __int16 *v110;
  uint64_t v111;
  const void *v112;
  size_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  const __CFString *v120;
  const void *v121;
  size_t v122;
  unsigned int v123;
  unsigned __int16 *v124;
  unsigned int v125;
  const __CFString *v126;
  const void *v127;
  size_t v128;
  unsigned __int16 *v129;
  const void *v130;
  size_t v131;
  unsigned __int16 *v132;
  const void *v133;
  size_t v134;
  unsigned __int16 *v135;
  char *v136;
  const void *v137;
  size_t v138;
  unsigned __int16 *v139;
  const void *v140;
  size_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t ComponentType;
  int ComponentCount;
  unsigned int v147;
  int v148;
  MTLPostVertexDumpOutput *v149;
  unint64_t v150;
  MTLPostVertexDumpOutput **v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  MTLPostVertexDumpOutput **v158;
  char *v159;
  char *v160;
  char *v161;
  MTLPostVertexDumpOutput *v162;
  int v163;
  const void *v165;
  size_t v166;
  unsigned __int16 *v167;
  const void *v168;
  size_t v169;
  unsigned __int16 *v170;
  const void *v171;
  size_t v172;
  unsigned __int16 *v173;
  const void *v174;
  size_t v175;
  unsigned __int16 *v176;
  const void *v177;
  size_t v178;
  unsigned __int16 *v179;
  const void *v180;
  size_t v181;
  unsigned __int16 *v182;
  const void *v183;
  size_t v184;
  unsigned __int16 *v185;
  const void *v186;
  size_t v187;
  unsigned __int16 *v188;
  const void *v189;
  size_t v190;
  unsigned __int16 *v191;
  const void *v192;
  size_t v193;
  unsigned __int16 *v194;
  const void *v195;
  size_t v196;
  unsigned __int16 *v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  MTLPostVertexDumpOutput *v201;
  MTLPostVertexDumpOutput *v202;
  unint64_t v203;
  MTLPostVertexDumpOutput **v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char *v210;
  MTLPostVertexDumpOutput **v211;
  char *v212;
  char *v213;
  MTLPostVertexDumpOutput *v214;
  const __CFString *v215;
  int v216;
  MTLPostVertexDumpOutput *v217;
  unint64_t v218;
  MTLPostVertexDumpOutput **v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  MTLPostVertexDumpOutput **v225;
  char *v226;
  char *v227;
  char *v228;
  MTLPostVertexDumpOutput *v229;
  unsigned int v230;

  v5 = (AirReflection::Node *)(a2 + 4 * *a1 + 4 + *(unsigned int *)(a2 + 4 * *a1 + 4));
  v6 = (unsigned __int16 *)((char *)v5 - *(int *)v5);
  if (*v6 < 5u)
    return a4;
  v7 = v6[2];
  if (!v7)
    return a4;
  v9 = *(_DWORD *)((char *)v5 + v7);
  v230 = 0;
  if (v9 >= 139264)
  {
    if (v9 >= 143360)
    {
      switch(v9)
      {
        case 143360:
          v14 = (int *)AirReflection::Node::node_as_MeshPrimitiveDataRet(v5);
          v15 = *v14;
          v16 = -v15;
          v17 = (unsigned __int16 *)((char *)v14 - v15);
          if (*v17 >= 0xFu && (v18 = v17[7]) != 0)
          {
            v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v18 + *(unsigned int *)((char *)v14 + v18) + 4);
            v16 = -(uint64_t)*v14;
          }
          else
          {
            v19 = &stru_1E0FE5DC8;
          }
          v80 = (unsigned __int16 *)((char *)v14 + v16);
          if (*v80 < 0xDu)
          {
            v81 = 0;
          }
          else
          {
            v81 = v80[6];
            if (v81)
              v81 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v81);
          }
          v121 = (const void *)(v81 + 4);
          v122 = strlen((const char *)(v81 + 4));
          v123 = dataTypeFromString(v121, v122, 0, &v230);
          v124 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v124 < 0xDu)
          {
            v136 = 0;
            v126 = CFSTR("air.mesh_primitive_data");
            goto LABEL_152;
          }
          v125 = v124[6];
          v126 = CFSTR("air.mesh_primitive_data");
          if (v125)
            goto LABEL_151;
          goto LABEL_147;
        case 143361:
          v14 = (int *)AirReflection::Node::node_as_MeshVertexDataRet(v5);
          v48 = *v14;
          v49 = -v48;
          v50 = (unsigned __int16 *)((char *)v14 - v48);
          if (*v50 >= 0xFu && (v51 = v50[7]) != 0)
          {
            v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v51 + *(unsigned int *)((char *)v14 + v51) + 4);
            v49 = -(uint64_t)*v14;
          }
          else
          {
            v19 = &stru_1E0FE5DC8;
          }
          v96 = (unsigned __int16 *)((char *)v14 + v49);
          if (*v96 < 0xDu)
          {
            v97 = 0;
          }
          else
          {
            v97 = v96[6];
            if (v97)
              v97 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v97);
          }
          v174 = (const void *)(v97 + 4);
          v175 = strlen((const char *)(v97 + 4));
          v123 = dataTypeFromString(v174, v175, 0, &v230);
          v176 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v176 < 0xDu)
          {
            v136 = 0;
            v126 = CFSTR("air.vertex_data");
            goto LABEL_152;
          }
          v125 = v176[6];
          v126 = CFSTR("air.vertex_data");
          if (v125)
            goto LABEL_151;
          goto LABEL_147;
        case 143362:
          v14 = (int *)AirReflection::Node::node_as_PrimitiveCulledRet(v5);
          v52 = *v14;
          v53 = -v52;
          v54 = (unsigned __int16 *)((char *)v14 - v52);
          if (*v54 >= 0xBu && (v55 = v54[5]) != 0)
          {
            v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v55 + *(unsigned int *)((char *)v14 + v55) + 4);
            v53 = -(uint64_t)*v14;
          }
          else
          {
            v19 = &stru_1E0FE5DC8;
          }
          v98 = (unsigned __int16 *)((char *)v14 + v53);
          if (*v98 < 9u)
          {
            v99 = 0;
          }
          else
          {
            v99 = v98[4];
            if (v99)
              v99 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v99);
          }
          v177 = (const void *)(v99 + 4);
          v178 = strlen((const char *)(v99 + 4));
          v123 = dataTypeFromString(v177, v178, 0, &v230);
          v179 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v179 < 9u)
          {
            v136 = 0;
            v126 = CFSTR("air.primitive_culled");
            goto LABEL_152;
          }
          v125 = v179[4];
          v126 = CFSTR("air.primitive_culled");
          if (v125)
            goto LABEL_151;
          goto LABEL_147;
        case 143363:
          v14 = (int *)AirReflection::Node::node_as_PrimitiveIDRet(v5);
          v56 = *v14;
          v57 = -v56;
          v58 = (unsigned __int16 *)((char *)v14 - v56);
          if (*v58 >= 0xBu && (v59 = v58[5]) != 0)
          {
            v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v59 + *(unsigned int *)((char *)v14 + v59) + 4);
            v57 = -(uint64_t)*v14;
          }
          else
          {
            v19 = &stru_1E0FE5DC8;
          }
          v100 = (unsigned __int16 *)((char *)v14 + v57);
          if (*v100 < 9u)
          {
            v101 = 0;
          }
          else
          {
            v101 = v100[4];
            if (v101)
              v101 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v101);
          }
          v180 = (const void *)(v101 + 4);
          v181 = strlen((const char *)(v101 + 4));
          v123 = dataTypeFromString(v180, v181, 0, &v230);
          v182 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v182 < 9u)
          {
            v136 = 0;
            v126 = CFSTR("air.primitive_id");
            goto LABEL_152;
          }
          v125 = v182[4];
          v126 = CFSTR("air.primitive_id");
          if (v125)
            goto LABEL_151;
          break;
        default:
          return a4;
      }
      goto LABEL_147;
    }
    switch(v9)
    {
      case 139264:
        v14 = (int *)AirReflection::Node::node_as_AcceptIntersectionRet(v5);
        v72 = *v14;
        v73 = -v72;
        v74 = (unsigned __int16 *)((char *)v14 - v72);
        if (*v74 >= 9u && (v75 = v74[4]) != 0)
        {
          v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v75 + *(unsigned int *)((char *)v14 + v75) + 4);
          v73 = -(uint64_t)*v14;
        }
        else
        {
          v19 = &stru_1E0FE5DC8;
        }
        v108 = (unsigned __int16 *)((char *)v14 + v73);
        if (*v108 < 7u)
        {
          v109 = 0;
        }
        else
        {
          v109 = v108[3];
          if (v109)
            v109 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v109);
        }
        v192 = (const void *)(v109 + 4);
        v193 = strlen((const char *)(v109 + 4));
        v123 = dataTypeFromString(v192, v193, 0, &v230);
        v194 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v194 < 7u)
        {
          v136 = 0;
          v126 = CFSTR("air.accept_intersection");
          goto LABEL_152;
        }
        v125 = v194[3];
        v126 = CFSTR("air.accept_intersection");
        if (!v125)
          goto LABEL_147;
        break;
      case 139265:
        v14 = (int *)AirReflection::Node::node_as_ContinueSearchRet(v5);
        v76 = *v14;
        v77 = -v76;
        v78 = (unsigned __int16 *)((char *)v14 - v76);
        if (*v78 >= 9u && (v79 = v78[4]) != 0)
        {
          v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v79 + *(unsigned int *)((char *)v14 + v79) + 4);
          v77 = -(uint64_t)*v14;
        }
        else
        {
          v19 = &stru_1E0FE5DC8;
        }
        v110 = (unsigned __int16 *)((char *)v14 + v77);
        if (*v110 < 7u)
        {
          v111 = 0;
        }
        else
        {
          v111 = v110[3];
          if (v111)
            v111 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v111);
        }
        v195 = (const void *)(v111 + 4);
        v196 = strlen((const char *)(v111 + 4));
        v123 = dataTypeFromString(v195, v196, 0, &v230);
        v197 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v197 < 7u)
        {
          v136 = 0;
          v126 = CFSTR("air.continue_search");
          goto LABEL_152;
        }
        v125 = v197[3];
        v126 = CFSTR("air.continue_search");
        if (!v125)
          goto LABEL_147;
        break;
      case 139266:
        v14 = (int *)AirReflection::Node::node_as_DistanceRet(v5);
        v24 = *v14;
        v25 = -v24;
        v26 = (unsigned __int16 *)((char *)v14 - v24);
        if (*v26 >= 9u && (v27 = v26[4]) != 0)
        {
          v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v27 + *(unsigned int *)((char *)v14 + v27) + 4);
          v25 = -(uint64_t)*v14;
        }
        else
        {
          v19 = &stru_1E0FE5DC8;
        }
        v84 = (unsigned __int16 *)((char *)v14 + v25);
        if (*v84 < 7u)
        {
          v85 = 0;
        }
        else
        {
          v85 = v84[3];
          if (v85)
            v85 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v85);
        }
        v130 = (const void *)(v85 + 4);
        v131 = strlen((const char *)(v85 + 4));
        v123 = dataTypeFromString(v130, v131, 0, &v230);
        v132 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v132 >= 7u)
        {
          v125 = v132[3];
          v126 = CFSTR("air.distance");
          if (!v125)
          {
LABEL_147:
            v136 = 0;
            goto LABEL_152;
          }
          break;
        }
        v136 = 0;
        v126 = CFSTR("air.distance");
LABEL_152:
        v140 = v136 + 4;
        v141 = strlen(v136 + 4);
        v142 = pixelFormatAndALUTypeFromString(v140, v141);
        v143 = HIDWORD(v142);
        v144 = v142;
        ComponentType = MTLDataTypeGetComponentType(v123);
        ComponentCount = MTLDataTypeGetComponentCount(v123);
        v147 = MTLDataTypeGetSize(ComponentType) * ComponentCount;
        if (v147 <= 4)
          v148 = 4;
        else
          v148 = v147;
        v149 = -[MTLPostVertexDumpOutput initWithAirMDType:dataType:pixelFormat:aluType:name:offset:]([MTLPostVertexDumpOutput alloc], "initWithAirMDType:dataType:pixelFormat:aluType:name:offset:", v126, v123, v144, v143, v19, a4);
        v150 = (unint64_t)a3[2];
        v151 = (MTLPostVertexDumpOutput **)a3[1];
        if ((unint64_t)v151 >= v150)
        {
          v153 = ((char *)v151 - (_BYTE *)*a3) >> 3;
          if ((unint64_t)(v153 + 1) >> 61)
            goto LABEL_282;
          v154 = v150 - (_QWORD)*a3;
          v155 = v154 >> 2;
          if (v154 >> 2 <= (unint64_t)(v153 + 1))
            v155 = v153 + 1;
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8)
            v156 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v156 = v155;
          if (v156)
            v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a3 + 2), v156);
          else
            v157 = 0;
          v158 = (MTLPostVertexDumpOutput **)&v157[8 * v153];
          v159 = &v157[8 * v156];
          *v158 = v149;
          v152 = v158 + 1;
          v161 = (char *)*a3;
          v160 = (char *)a3[1];
          if (v160 != *a3)
          {
            do
            {
              v162 = (MTLPostVertexDumpOutput *)*((_QWORD *)v160 - 1);
              v160 -= 8;
              *--v158 = v162;
            }
            while (v160 != v161);
            v160 = (char *)*a3;
          }
          *a3 = v158;
          a3[1] = v152;
          a3[2] = v159;
          if (v160)
            operator delete(v160);
        }
        else
        {
          *v151 = v149;
          v152 = v151 + 1;
        }
        v163 = v148 + 3;
LABEL_172:
        a3[1] = v152;
        return (v163 & 0xFFFFFFFC) + a4;
      default:
        return a4;
    }
LABEL_151:
    v136 = (char *)v14 + v125 + *(int *)((char *)v14 + v125);
    goto LABEL_152;
  }
  switch(v9)
  {
    case 131072:
      v10 = (int *)AirReflection::Node::node_as_ClipDistanceRet(v5);
      v11 = v10;
      v12 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v12 < 0xBu)
      {
        v13 = 0;
      }
      else
      {
        v13 = v12[5];
        if (v13)
          v13 += (uint64_t)v10 + *(unsigned int *)((char *)v10 + v13);
      }
      v112 = (const void *)(v13 + 4);
      v113 = strlen((const char *)(v13 + 4));
      v114 = dataTypeFromString(v112, v113, 0, &v230);
      v115 = *v11;
      v116 = (char *)v11 - v115;
      v117 = *(unsigned __int16 *)((char *)v11 - v115);
      if (v117 < 7)
        goto LABEL_261;
      if (!*((_WORD *)v116 + 3))
      {
        if (v117 >= 0xD && *((_WORD *)v116 + 6))
          v215 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v11+ *((unsigned __int16 *)v116 + 6)+ *(unsigned int *)((char *)v11 + *((unsigned __int16 *)v116 + 6))+ 4);
        else
LABEL_261:
          v215 = &stru_1E0FE5DC8;
        if (v230 <= 4)
          v216 = 4;
        else
          v216 = v230;
        v217 = -[MTLPostVertexDumpOutput initWithAirMDType:dataType:pixelFormat:aluType:name:offset:]([MTLPostVertexDumpOutput alloc], "initWithAirMDType:dataType:pixelFormat:aluType:name:offset:", CFSTR("air.clip_distance"), v114, 0, 0, v215, a4);
        v218 = (unint64_t)a3[2];
        v219 = (MTLPostVertexDumpOutput **)a3[1];
        if ((unint64_t)v219 < v218)
        {
          *v219 = v217;
          v152 = v219 + 1;
LABEL_281:
          v163 = v216 + 3;
          goto LABEL_172;
        }
        v220 = ((char *)v219 - (_BYTE *)*a3) >> 3;
        if (!((unint64_t)(v220 + 1) >> 61))
        {
          v221 = v218 - (_QWORD)*a3;
          v222 = v221 >> 2;
          if (v221 >> 2 <= (unint64_t)(v220 + 1))
            v222 = v220 + 1;
          if ((unint64_t)v221 >= 0x7FFFFFFFFFFFFFF8)
            v223 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v223 = v222;
          if (v223)
            v224 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a3 + 2), v223);
          else
            v224 = 0;
          v225 = (MTLPostVertexDumpOutput **)&v224[8 * v220];
          v226 = &v224[8 * v223];
          *v225 = v217;
          v152 = v225 + 1;
          v228 = (char *)*a3;
          v227 = (char *)a3[1];
          if (v227 != *a3)
          {
            do
            {
              v229 = (MTLPostVertexDumpOutput *)*((_QWORD *)v227 - 1);
              v227 -= 8;
              *--v225 = v229;
            }
            while (v227 != v228);
            v227 = (char *)*a3;
          }
          *a3 = v225;
          a3[1] = v152;
          a3[2] = v226;
          if (v227)
            operator delete(v227);
          goto LABEL_281;
        }
LABEL_282:
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      v118 = -v115;
      if (v117 >= 0xD && (v119 = *((unsigned __int16 *)v116 + 6)) != 0)
      {
        v120 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v11 + v119 + *(unsigned int *)((char *)v11 + v119) + 4);
        v118 = -(uint64_t)*v11;
      }
      else
      {
        v120 = &stru_1E0FE5DC8;
      }
      if (*(int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 + v118 + 6)))
      {
        v198 = 0;
        do
        {
          v199 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@[%d]"), v120, v198);
          if (v230 <= 4)
            v200 = 4;
          else
            v200 = v230;
          v201 = -[MTLPostVertexDumpOutput initWithAirMDType:dataType:pixelFormat:aluType:name:offset:]([MTLPostVertexDumpOutput alloc], "initWithAirMDType:dataType:pixelFormat:aluType:name:offset:", CFSTR("air.clip_distance"), v114, 0, 0, v199, a4);
          v202 = v201;
          v204 = (MTLPostVertexDumpOutput **)a3[1];
          v203 = (unint64_t)a3[2];
          if ((unint64_t)v204 >= v203)
          {
            v206 = ((char *)v204 - (_BYTE *)*a3) >> 3;
            if ((unint64_t)(v206 + 1) >> 61)
              goto LABEL_282;
            v207 = v203 - (_QWORD)*a3;
            v208 = v207 >> 2;
            if (v207 >> 2 <= (unint64_t)(v206 + 1))
              v208 = v206 + 1;
            if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFF8)
              v209 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v209 = v208;
            if (v209)
              v210 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a3 + 2), v209);
            else
              v210 = 0;
            v211 = (MTLPostVertexDumpOutput **)&v210[8 * v206];
            *v211 = v202;
            v205 = v211 + 1;
            v213 = (char *)*a3;
            v212 = (char *)a3[1];
            if (v212 != *a3)
            {
              do
              {
                v214 = (MTLPostVertexDumpOutput *)*((_QWORD *)v212 - 1);
                v212 -= 8;
                *--v211 = v214;
              }
              while (v212 != v213);
              v212 = (char *)*a3;
            }
            *a3 = v211;
            a3[1] = v205;
            a3[2] = &v210[8 * v209];
            if (v212)
              operator delete(v212);
          }
          else
          {
            *v204 = v201;
            v205 = v204 + 1;
          }
          a3[1] = v205;
          a4 = ((v200 + 3) & 0xFFFFFFFC) + a4;
          v198 = (v198 + 1);
        }
        while (v198 < *(int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 6)));
      }
      return a4;
    case 131073:
      v14 = (int *)AirReflection::Node::node_as_PointSizeRet(v5);
      v28 = *v14;
      v29 = -v28;
      v30 = (unsigned __int16 *)((char *)v14 - v28);
      if (*v30 >= 0xBu && (v31 = v30[5]) != 0)
      {
        v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v31 + *(unsigned int *)((char *)v14 + v31) + 4);
        v29 = -(uint64_t)*v14;
      }
      else
      {
        v19 = &stru_1E0FE5DC8;
      }
      v86 = (unsigned __int16 *)((char *)v14 + v29);
      if (*v86 < 9u)
      {
        v87 = 0;
      }
      else
      {
        v87 = v86[4];
        if (v87)
          v87 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v87);
      }
      v133 = (const void *)(v87 + 4);
      v134 = strlen((const char *)(v87 + 4));
      v123 = dataTypeFromString(v133, v134, 0, &v230);
      v135 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v135 < 9u)
      {
        v136 = 0;
        v126 = CFSTR("air.point_size");
        goto LABEL_152;
      }
      v125 = v135[4];
      v126 = CFSTR("air.point_size");
      if (v125)
        goto LABEL_151;
      goto LABEL_147;
    case 131074:
      v14 = (int *)AirReflection::Node::node_as_PositionRet(v5);
      v32 = *v14;
      v33 = -v32;
      v34 = (unsigned __int16 *)((char *)v14 - v32);
      if (*v34 >= 0xDu && (v35 = v34[6]) != 0)
      {
        v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v35 + *(unsigned int *)((char *)v14 + v35) + 4);
        v33 = -(uint64_t)*v14;
      }
      else
      {
        v19 = &stru_1E0FE5DC8;
      }
      v88 = (unsigned __int16 *)((char *)v14 + v33);
      if (*v88 < 0xBu)
      {
        v89 = 0;
      }
      else
      {
        v89 = v88[5];
        if (v89)
          v89 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v89);
      }
      v137 = (const void *)(v89 + 4);
      v138 = strlen((const char *)(v89 + 4));
      v123 = dataTypeFromString(v137, v138, 0, &v230);
      v139 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v139 < 0xBu)
      {
        v136 = 0;
        v126 = CFSTR("air.position");
        goto LABEL_152;
      }
      v125 = v139[5];
      v126 = CFSTR("air.position");
      if (!v125)
        goto LABEL_147;
      goto LABEL_151;
    case 131075:
      v14 = (int *)AirReflection::Node::node_as_RenderTargetArrayIndexRet(v5);
      v36 = *v14;
      v37 = -v36;
      v38 = (unsigned __int16 *)((char *)v14 - v36);
      if (*v38 >= 0xBu && (v39 = v38[5]) != 0)
      {
        v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v39 + *(unsigned int *)((char *)v14 + v39) + 4);
        v37 = -(uint64_t)*v14;
      }
      else
      {
        v19 = &stru_1E0FE5DC8;
      }
      v90 = (unsigned __int16 *)((char *)v14 + v37);
      if (*v90 < 9u)
      {
        v91 = 0;
      }
      else
      {
        v91 = v90[4];
        if (v91)
          v91 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v91);
      }
      v165 = (const void *)(v91 + 4);
      v166 = strlen((const char *)(v91 + 4));
      v123 = dataTypeFromString(v165, v166, 0, &v230);
      v167 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v167 < 9u)
      {
        v136 = 0;
        v126 = CFSTR("air.render_target_array_index");
        goto LABEL_152;
      }
      v125 = v167[4];
      v126 = CFSTR("air.render_target_array_index");
      if (v125)
        goto LABEL_151;
      goto LABEL_147;
    case 131076:
      v14 = (int *)AirReflection::Node::node_as_VertexOutputRet(v5);
      v40 = *v14;
      v41 = -v40;
      v42 = (unsigned __int16 *)((char *)v14 - v40);
      if (*v42 >= 0xFu && (v43 = v42[7]) != 0)
      {
        v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v43 + *(unsigned int *)((char *)v14 + v43) + 4);
        v41 = -(uint64_t)*v14;
      }
      else
      {
        v19 = &stru_1E0FE5DC8;
      }
      v92 = (unsigned __int16 *)((char *)v14 + v41);
      if (*v92 < 0xDu)
      {
        v93 = 0;
      }
      else
      {
        v93 = v92[6];
        if (v93)
          v93 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v93);
      }
      v168 = (const void *)(v93 + 4);
      v169 = strlen((const char *)(v93 + 4));
      v123 = dataTypeFromString(v168, v169, 0, &v230);
      v170 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v170 < 0xDu)
      {
        v136 = 0;
        v126 = CFSTR("air.vertex_output");
        goto LABEL_152;
      }
      v125 = v170[6];
      v126 = CFSTR("air.vertex_output");
      if (v125)
        goto LABEL_151;
      goto LABEL_147;
    case 131077:
      v14 = (int *)AirReflection::Node::node_as_ViewportArrayIndexRet(v5);
      v44 = *v14;
      v45 = -v44;
      v46 = (unsigned __int16 *)((char *)v14 - v44);
      if (*v46 >= 0xBu && (v47 = v46[5]) != 0)
      {
        v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v47 + *(unsigned int *)((char *)v14 + v47) + 4);
        v45 = -(uint64_t)*v14;
      }
      else
      {
        v19 = &stru_1E0FE5DC8;
      }
      v94 = (unsigned __int16 *)((char *)v14 + v45);
      if (*v94 < 9u)
      {
        v95 = 0;
      }
      else
      {
        v95 = v94[4];
        if (v95)
          v95 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v95);
      }
      v171 = (const void *)(v95 + 4);
      v172 = strlen((const char *)(v95 + 4));
      v123 = dataTypeFromString(v171, v172, 0, &v230);
      v173 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v173 < 9u)
      {
        v136 = 0;
        v126 = CFSTR("air.viewport_array_index");
        goto LABEL_152;
      }
      v125 = v173[4];
      v126 = CFSTR("air.viewport_array_index");
      if (v125)
        goto LABEL_151;
      goto LABEL_147;
    default:
      switch(v9)
      {
        case 135168:
          v14 = (int *)AirReflection::Node::node_as_RenderTargetRet(v5);
          v20 = *v14;
          v21 = -v20;
          v22 = (unsigned __int16 *)((char *)v14 - v20);
          if (*v22 >= 0x11u && (v23 = v22[8]) != 0)
          {
            v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v23 + *(unsigned int *)((char *)v14 + v23) + 4);
            v21 = -(uint64_t)*v14;
          }
          else
          {
            v19 = &stru_1E0FE5DC8;
          }
          v82 = (unsigned __int16 *)((char *)v14 + v21);
          if (*v82 < 0xFu)
          {
            v83 = 0;
          }
          else
          {
            v83 = v82[7];
            if (v83)
              v83 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v83);
          }
          v127 = (const void *)(v83 + 4);
          v128 = strlen((const char *)(v83 + 4));
          v123 = dataTypeFromString(v127, v128, 0, &v230);
          v129 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v129 < 0xFu)
          {
            v136 = 0;
            v126 = CFSTR("air.render_target");
            goto LABEL_152;
          }
          v125 = v129[7];
          v126 = CFSTR("air.render_target");
          if (v125)
            goto LABEL_151;
          goto LABEL_147;
        case 135169:
          v14 = (int *)AirReflection::Node::node_as_DepthRet(v5);
          v60 = *v14;
          v61 = -v60;
          v62 = (unsigned __int16 *)((char *)v14 - v60);
          if (*v62 >= 0xBu && (v63 = v62[5]) != 0)
          {
            v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v63 + *(unsigned int *)((char *)v14 + v63) + 4);
            v61 = -(uint64_t)*v14;
          }
          else
          {
            v19 = &stru_1E0FE5DC8;
          }
          v102 = (unsigned __int16 *)((char *)v14 + v61);
          if (*v102 < 9u)
          {
            v103 = 0;
          }
          else
          {
            v103 = v102[4];
            if (v103)
              v103 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v103);
          }
          v183 = (const void *)(v103 + 4);
          v184 = strlen((const char *)(v103 + 4));
          v123 = dataTypeFromString(v183, v184, 0, &v230);
          v185 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v185 < 9u)
          {
            v136 = 0;
            v126 = CFSTR("air.depth");
            goto LABEL_152;
          }
          v125 = v185[4];
          v126 = CFSTR("air.depth");
          if (v125)
            goto LABEL_151;
          goto LABEL_147;
        case 135170:
          v14 = (int *)AirReflection::Node::node_as_StencilRet(v5);
          v64 = *v14;
          v65 = -v64;
          v66 = (unsigned __int16 *)((char *)v14 - v64);
          if (*v66 >= 9u && (v67 = v66[4]) != 0)
          {
            v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v67 + *(unsigned int *)((char *)v14 + v67) + 4);
            v65 = -(uint64_t)*v14;
          }
          else
          {
            v19 = &stru_1E0FE5DC8;
          }
          v104 = (unsigned __int16 *)((char *)v14 + v65);
          if (*v104 < 7u)
          {
            v105 = 0;
          }
          else
          {
            v105 = v104[3];
            if (v105)
              v105 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v105);
          }
          v186 = (const void *)(v105 + 4);
          v187 = strlen((const char *)(v105 + 4));
          v123 = dataTypeFromString(v186, v187, 0, &v230);
          v188 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v188 < 7u)
          {
            v136 = 0;
            v126 = CFSTR("air.stencil");
            goto LABEL_152;
          }
          v125 = v188[3];
          v126 = CFSTR("air.stencil");
          if (v125)
            goto LABEL_151;
          goto LABEL_147;
        case 135171:
          v14 = (int *)AirReflection::Node::node_as_SampleMaskRet(v5);
          v68 = *v14;
          v69 = -v68;
          v70 = (unsigned __int16 *)((char *)v14 - v68);
          if (*v70 >= 9u && (v71 = v70[4]) != 0)
          {
            v19 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v14 + v71 + *(unsigned int *)((char *)v14 + v71) + 4);
            v69 = -(uint64_t)*v14;
          }
          else
          {
            v19 = &stru_1E0FE5DC8;
          }
          v106 = (unsigned __int16 *)((char *)v14 + v69);
          if (*v106 < 7u)
          {
            v107 = 0;
          }
          else
          {
            v107 = v106[3];
            if (v107)
              v107 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v107);
          }
          v189 = (const void *)(v107 + 4);
          v190 = strlen((const char *)(v107 + 4));
          v123 = dataTypeFromString(v189, v190, 0, &v230);
          v191 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v191 < 7u)
          {
            v136 = 0;
            v126 = CFSTR("air.sample_mask");
            goto LABEL_152;
          }
          v125 = v191[3];
          v126 = CFSTR("air.sample_mask");
          if (v125)
            goto LABEL_151;
          break;
        default:
          return a4;
      }
      goto LABEL_147;
  }
}

uint64_t dataTypeFromString(const void *a1, size_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  _DWORD v7[5];

  dataTypeInfoFromString(a1, a2, (uint64_t)v7);
  result = v7[0];
  if (a3)
    *a3 = v7[1];
  if (a4)
    *a4 = v7[2];
  return result;
}

uint64_t MTLDataTypeGetComponentCount(uint64_t a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 3:
    case 16:
    case 29:
    case 33:
    case 37:
    case 41:
    case 45:
    case 49:
    case 53:
    case 81:
    case 85:
      return result;
    case 4:
    case 17:
    case 30:
    case 34:
    case 38:
    case 42:
    case 46:
    case 50:
    case 54:
    case 82:
    case 86:
LABEL_3:
      result = 2;
      break;
    case 5:
    case 18:
    case 31:
    case 35:
    case 39:
    case 43:
    case 47:
    case 51:
    case 55:
    case 83:
    case 87:
LABEL_4:
      result = 3;
      break;
    case 6:
    case 19:
    case 32:
    case 36:
    case 40:
    case 44:
    case 48:
    case 52:
    case 56:
    case 84:
    case 88:
LABEL_5:
      result = 4;
      break;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
LABEL_6:
      result = 0;
      break;
    default:
      switch(a1)
      {
        case 'y':
          return result;
        case 'z':
          goto LABEL_3;
        case '{':
          goto LABEL_4;
        case '|':
          goto LABEL_5;
        default:
          goto LABEL_6;
      }
  }
  return result;
}

uint64_t MTLDataTypeGetComponentType(uint64_t result)
{
  switch(result)
  {
    case 16:
    case 29:
    case 33:
    case 37:
    case 41:
    case 45:
    case 49:
    case 53:
    case 81:
    case 85:
    case 121:
      return result;
    case 17:
    case 18:
    case 19:
      result = 16;
      break;
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
      goto LABEL_15;
    case 30:
    case 31:
    case 32:
      result = 29;
      break;
    case 34:
    case 35:
    case 36:
      result = 33;
      break;
    case 38:
    case 39:
    case 40:
      result = 37;
      break;
    case 42:
    case 43:
    case 44:
      result = 41;
      break;
    case 46:
    case 47:
    case 48:
      result = 45;
      break;
    case 50:
    case 51:
    case 52:
      result = 49;
      break;
    case 54:
    case 55:
    case 56:
      result = 53;
      break;
    case 82:
    case 83:
    case 84:
      result = 81;
      break;
    case 86:
    case 87:
    case 88:
      result = 85;
      break;
    case 122:
    case 123:
    case 124:
      result = 121;
      break;
    default:
      if ((unint64_t)(result - 3) >= 4)
LABEL_15:
        result = 0;
      else
        result = 3;
      break;
  }
  return result;
}

uint64_t MTLDataTypeGetSize(uint64_t a1)
{
  if ((unint64_t)(a1 - 3) > 0x84)
    return 0;
  else
    return qword_18281B628[a1 - 3];
}

uint64_t AirReflection::Node::node_as_VertexOutputRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131076) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_VertexFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 3) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t getDefaultPostVertexBuiltins(uint64_t a1, void **a2, unsigned int a3, unsigned int *a4, void *a5)
{
  unsigned int v7;
  MTLPostVertexDumpOutput *v10;
  unint64_t v11;
  MTLPostVertexDumpOutput **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  MTLPostVertexDumpOutput **v19;
  char *v20;
  char *v21;
  char *v22;
  MTLPostVertexDumpOutput *v23;
  MTLPostVertexDumpOutput *v24;
  MTLPostVertexDumpOutput *v25;
  unint64_t v26;
  MTLPostVertexDumpOutput **v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  MTLPostVertexDumpOutput **v34;
  char *v35;
  char *v36;
  char *v37;
  MTLPostVertexDumpOutput *v38;
  uint64_t v39;
  MTLPostVertexDumpOutput *v40;
  MTLPostVertexDumpOutput *v41;
  unint64_t v42;
  MTLPostVertexDumpOutput **v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  MTLPostVertexDumpOutput **v50;
  char *v51;
  char *v52;
  char *v53;
  MTLPostVertexDumpOutput *v54;
  int *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  int v58;
  MTLPostVertexDumpOutput *v59;
  MTLPostVertexDumpOutput *v60;
  unint64_t v61;
  MTLPostVertexDumpOutput **v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  MTLPostVertexDumpOutput **v69;
  char *v70;
  char *v71;
  char *v72;
  MTLPostVertexDumpOutput *v73;
  int v74;
  MTLPostVertexDumpOutput *v75;
  MTLPostVertexDumpOutput *v76;
  unint64_t v77;
  MTLPostVertexDumpOutput **v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  MTLPostVertexDumpOutput **v85;
  char *v86;
  char *v87;
  char *v88;
  MTLPostVertexDumpOutput *v89;
  MTLPostVertexDumpOutput *v91;
  MTLPostVertexDumpOutput *v92;
  unint64_t v93;
  MTLPostVertexDumpOutput **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  MTLPostVertexDumpOutput **v100;
  char *v101;
  char *v102;
  char *v103;
  MTLPostVertexDumpOutput *v104;

  v7 = a3;
  if (!a4)
  {
    v10 = -[MTLPostVertexDumpOutput initWithAirMDType:dataType:pixelFormat:aluType:name:offset:]([MTLPostVertexDumpOutput alloc], "initWithAirMDType:dataType:pixelFormat:aluType:name:offset:", CFSTR("air.vertex_id"), 33, 0, 33, &stru_1E0FE5DC8, a3);
    v11 = (unint64_t)a2[2];
    v12 = (MTLPostVertexDumpOutput **)a2[1];
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        goto LABEL_111;
      v15 = v11 - (_QWORD)*a2;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a2 + 2), v17);
      else
        v18 = 0;
      v19 = (MTLPostVertexDumpOutput **)&v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v10;
      v13 = v19 + 1;
      v22 = (char *)*a2;
      v21 = (char *)a2[1];
      if (v21 != *a2)
      {
        do
        {
          v23 = (MTLPostVertexDumpOutput *)*((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v19 = v23;
        }
        while (v21 != v22);
        v21 = (char *)*a2;
      }
      *a2 = v19;
      a2[1] = v13;
      a2[2] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12 = v10;
      v13 = v12 + 1;
    }
    a2[1] = v13;
    v7 += 4;
  }
  v24 = -[MTLPostVertexDumpOutput initWithAirMDType:dataType:pixelFormat:aluType:name:offset:]([MTLPostVertexDumpOutput alloc], "initWithAirMDType:dataType:pixelFormat:aluType:name:offset:", CFSTR("air.instance_id"), 33, 0, 33, &stru_1E0FE5DC8, v7);
  v25 = v24;
  v26 = (unint64_t)a2[2];
  v27 = (MTLPostVertexDumpOutput **)a2[1];
  if ((unint64_t)v27 >= v26)
  {
    v29 = ((char *)v27 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v29 + 1) >> 61)
      goto LABEL_111;
    v30 = v26 - (_QWORD)*a2;
    v31 = v30 >> 2;
    if (v30 >> 2 <= (unint64_t)(v29 + 1))
      v31 = v29 + 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a2 + 2), v32);
    else
      v33 = 0;
    v34 = (MTLPostVertexDumpOutput **)&v33[8 * v29];
    v35 = &v33[8 * v32];
    *v34 = v25;
    v28 = v34 + 1;
    v37 = (char *)*a2;
    v36 = (char *)a2[1];
    if (v36 != *a2)
    {
      do
      {
        v38 = (MTLPostVertexDumpOutput *)*((_QWORD *)v36 - 1);
        v36 -= 8;
        *--v34 = v38;
      }
      while (v36 != v37);
      v36 = (char *)*a2;
    }
    *a2 = v34;
    a2[1] = v28;
    a2[2] = v35;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *v27 = v24;
    v28 = v27 + 1;
  }
  a2[1] = v28;
  v39 = v7 + 4;
  if (a4)
  {
    v40 = -[MTLPostVertexDumpOutput initWithAirMDType:dataType:pixelFormat:aluType:name:offset:]([MTLPostVertexDumpOutput alloc], "initWithAirMDType:dataType:pixelFormat:aluType:name:offset:", CFSTR("air.patch_id"), 33, 0, 33, &stru_1E0FE5DC8, v7 + 4);
    v41 = v40;
    v43 = (MTLPostVertexDumpOutput **)a2[1];
    v42 = (unint64_t)a2[2];
    if ((unint64_t)v43 >= v42)
    {
      v45 = ((char *)v43 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v45 + 1) >> 61)
        goto LABEL_111;
      v46 = v42 - (_QWORD)*a2;
      v47 = v46 >> 2;
      if (v46 >> 2 <= (unint64_t)(v45 + 1))
        v47 = v45 + 1;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v47;
      if (v48)
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a2 + 2), v48);
      else
        v49 = 0;
      v50 = (MTLPostVertexDumpOutput **)&v49[8 * v45];
      v51 = &v49[8 * v48];
      *v50 = v41;
      v44 = v50 + 1;
      v53 = (char *)*a2;
      v52 = (char *)a2[1];
      if (v52 != *a2)
      {
        do
        {
          v54 = (MTLPostVertexDumpOutput *)*((_QWORD *)v52 - 1);
          v52 -= 8;
          *--v50 = v54;
        }
        while (v52 != v53);
        v52 = (char *)*a2;
      }
      *a2 = v50;
      a2[1] = v44;
      a2[2] = v51;
      if (v52)
        operator delete(v52);
    }
    else
    {
      *v43 = v40;
      v44 = v43 + 1;
    }
    a2[1] = v44;
    v39 = v7 + 8;
    v55 = (int *)AirReflection::Node::node_as_PatchFnAttr((AirReflection::Node *)(a1
                                                                                + 4 * *a4
                                                                                + 4
                                                                                + *(unsigned int *)(a1 + 4 * *a4 + 4)));
    v56 = (unsigned __int16 *)((char *)v55 - *v55);
    if (*v56 >= 5u)
    {
      v57 = v56[2];
      if (v57)
      {
        v58 = *((unsigned __int8 *)v55 + v57);
        if (v58 == 1)
        {
          v91 = -[MTLPostVertexDumpOutput initWithAirMDType:dataType:pixelFormat:aluType:name:offset:]([MTLPostVertexDumpOutput alloc], "initWithAirMDType:dataType:pixelFormat:aluType:name:offset:", CFSTR("air.position_in_patch"), 4, 0, 3, &stru_1E0FE5DC8, v7 + 8);
          v92 = v91;
          v94 = (MTLPostVertexDumpOutput **)a2[1];
          v93 = (unint64_t)a2[2];
          if ((unint64_t)v94 >= v93)
          {
            v95 = ((char *)v94 - (_BYTE *)*a2) >> 3;
            if ((unint64_t)(v95 + 1) >> 61)
              goto LABEL_111;
            v96 = v93 - (_QWORD)*a2;
            v97 = v96 >> 2;
            if (v96 >> 2 <= (unint64_t)(v95 + 1))
              v97 = v95 + 1;
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
              v98 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v98 = v97;
            if (v98)
              v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a2 + 2), v98);
            else
              v99 = 0;
            v100 = (MTLPostVertexDumpOutput **)&v99[8 * v95];
            v101 = &v99[8 * v98];
            *v100 = v92;
            v63 = v100 + 1;
            v103 = (char *)*a2;
            v102 = (char *)a2[1];
            if (v102 != *a2)
            {
              do
              {
                v104 = (MTLPostVertexDumpOutput *)*((_QWORD *)v102 - 1);
                v102 -= 8;
                *--v100 = v104;
              }
              while (v102 != v103);
              v102 = (char *)*a2;
            }
            *a2 = v100;
            a2[1] = v63;
            a2[2] = v101;
            if (v102)
              operator delete(v102);
          }
          else
          {
            *v94 = v91;
            v63 = v94 + 1;
          }
          v74 = 16;
          goto LABEL_74;
        }
        if (v58)
          goto LABEL_75;
      }
    }
    v59 = -[MTLPostVertexDumpOutput initWithAirMDType:dataType:pixelFormat:aluType:name:offset:]([MTLPostVertexDumpOutput alloc], "initWithAirMDType:dataType:pixelFormat:aluType:name:offset:", CFSTR("air.position_in_patch"), 5, 0, 3, &stru_1E0FE5DC8, v7 + 8);
    v60 = v59;
    v62 = (MTLPostVertexDumpOutput **)a2[1];
    v61 = (unint64_t)a2[2];
    if ((unint64_t)v62 >= v61)
    {
      v64 = ((char *)v62 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v64 + 1) >> 61)
        goto LABEL_111;
      v65 = v61 - (_QWORD)*a2;
      v66 = v65 >> 2;
      if (v65 >> 2 <= (unint64_t)(v64 + 1))
        v66 = v64 + 1;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v67 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v67 = v66;
      if (v67)
        v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a2 + 2), v67);
      else
        v68 = 0;
      v69 = (MTLPostVertexDumpOutput **)&v68[8 * v64];
      v70 = &v68[8 * v67];
      *v69 = v60;
      v63 = v69 + 1;
      v72 = (char *)*a2;
      v71 = (char *)a2[1];
      if (v71 != *a2)
      {
        do
        {
          v73 = (MTLPostVertexDumpOutput *)*((_QWORD *)v71 - 1);
          v71 -= 8;
          *--v69 = v73;
        }
        while (v71 != v72);
        v71 = (char *)*a2;
      }
      *a2 = v69;
      a2[1] = v63;
      a2[2] = v70;
      if (v71)
        operator delete(v71);
    }
    else
    {
      *v62 = v59;
      v63 = v62 + 1;
    }
    v74 = 20;
LABEL_74:
    a2[1] = v63;
    v39 = v7 + v74;
  }
LABEL_75:
  if (objc_msgSend(a5, "supportsVertexAmplificationCount:", 2))
  {
    v75 = -[MTLPostVertexDumpOutput initWithAirMDType:dataType:pixelFormat:aluType:name:offset:]([MTLPostVertexDumpOutput alloc], "initWithAirMDType:dataType:pixelFormat:aluType:name:offset:", CFSTR("air.amplification_id"), 33, 0, 33, &stru_1E0FE5DC8, v39);
    v76 = v75;
    v78 = (MTLPostVertexDumpOutput **)a2[1];
    v77 = (unint64_t)a2[2];
    if ((unint64_t)v78 < v77)
    {
      *v78 = v75;
      v79 = v78 + 1;
LABEL_92:
      a2[1] = v79;
      return (v39 + 4);
    }
    v80 = ((char *)v78 - (_BYTE *)*a2) >> 3;
    if (!((unint64_t)(v80 + 1) >> 61))
    {
      v81 = v77 - (_QWORD)*a2;
      v82 = v81 >> 2;
      if (v81 >> 2 <= (unint64_t)(v80 + 1))
        v82 = v80 + 1;
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
        v83 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v83 = v82;
      if (v83)
        v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a2 + 2), v83);
      else
        v84 = 0;
      v85 = (MTLPostVertexDumpOutput **)&v84[8 * v80];
      v86 = &v84[8 * v83];
      *v85 = v76;
      v79 = v85 + 1;
      v88 = (char *)*a2;
      v87 = (char *)a2[1];
      if (v87 != *a2)
      {
        do
        {
          v89 = (MTLPostVertexDumpOutput *)*((_QWORD *)v87 - 1);
          v87 -= 8;
          *--v85 = v89;
        }
        while (v87 != v88);
        v87 = (char *)*a2;
      }
      *a2 = v85;
      a2[1] = v79;
      a2[2] = v86;
      if (v87)
        operator delete(v87);
      goto LABEL_92;
    }
LABEL_111:
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  return v39;
}

void validateRenderRasterAndLater<MTLRenderPipelineDescriptorPrivate>(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  BOOL v68;
  _QWORD *v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const __CFString *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t Name;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  void *v144;
  BOOL v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150[8];
  _QWORD v151[58];

  v151[56] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 184);
  v7 = objc_msgSend(a2, "supportsSeparateVisibilityAndShadingRate");
  v13 = *(_QWORD *)(a3 + 216);
  if (!v7)
  {
    if (v13)
      _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("colorSampleCount expected to be 0."), v8, v9, v10, v11, v12, v141);
    goto LABEL_17;
  }
  v14 = *(_QWORD *)(a3 + 184);
  if (v13)
    v15 = v13 > v14;
  else
    v15 = 0;
  if (v15)
  {
    _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("colorSampleCount expected to be smaller or equal to rasterSampleCount"), v8, v9, v10, v11, v12, v141);
    v14 = *(_QWORD *)(a3 + 184);
    v13 = *(_QWORD *)(a3 + 216);
    if (v14)
    {
LABEL_7:
      if (v14 < v13)
      {
        _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("rasterSampleCount expected to be greater or equal to colorSampleCount"), v8, v9, v10, v11, v12, v141);
        v13 = *(_QWORD *)(a3 + 216);
      }
    }
  }
  else if (v14)
  {
    goto LABEL_7;
  }
  if (v13)
  {
    v16 = objc_msgSend(a2, "supportsTextureSampleCount:");
    v22 = *(_QWORD *)(a3 + 216);
    if ((v16 & 1) == 0)
    {
      _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("colorSampleCount (%lu) is not supported by device."), v17, v18, v19, v20, v21, *(_QWORD *)(a3 + 216));
      v22 = *(_QWORD *)(a3 + 216);
    }
    if (v22)
      v6 = v22;
  }
LABEL_17:
  v142 = v6;
  v144 = a2;
  v143 = objc_msgSend(a2, "maxColorAttachments");
  v23 = 0;
  v24 = 0;
  v145 = 0;
  for (i = 0; i != 8; ++i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)a3 + 8 + 8 * i);
    if (!v26)
      continue;
    v27 = *(_QWORD *)(v26 + 8) >> 36;
    if (!v27)
      continue;
    v149 = 0;
    v147 = 0u;
    v148 = 0u;
    v146 = 0u;
    MTLPixelFormatGetInfoForDevice(v144, v27, (uint64_t)&v146);
    v33 = *(_QWORD *)(v26 + 8);
    if ((v33 & 1) != 0)
    {
      if ((BYTE8(v146) & 8) == 0)
      {
        _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("Blending is enabled for render target %lu; however, the pixelformat %s for this render target is not blendable."),
          v28,
          v29,
          v30,
          v31,
          v32,
          i);
        v33 = *(_QWORD *)(v26 + 8);
      }
      if ((v33 & 0xF80) >= 0x980)
      {
        _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("factor is not a valid MTLBlendFactor."), v28, v29, v30, v31, v32, v141);
        v33 = *(_QWORD *)(v26 + 8);
      }
      if ((v33 & 0x1F000) >= 0x13000)
      {
        _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("factor is not a valid MTLBlendFactor."), v28, v29, v30, v31, v32, v141);
        v33 = *(_QWORD *)(v26 + 8);
      }
      if ((v33 & 0x3E0000) >= 0x260000)
      {
        _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("factor is not a valid MTLBlendFactor."), v28, v29, v30, v31, v32, v141);
        v33 = *(_QWORD *)(v26 + 8);
      }
      if (((v33 >> 22) & 0x1F) >= 0x13)
      {
        _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("factor is not a valid MTLBlendFactor."), v28, v29, v30, v31, v32, v141);
        v33 = *(_QWORD *)(v26 + 8);
      }
      if ((v33 & 0xE) >= 0xA)
      {
        _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("func is not a valid MTLBlendOperation."), v28, v29, v30, v31, v32, v141);
        v33 = *(_QWORD *)(v26 + 8);
      }
      if ((v33 & 0x70) >= 0x50)
      {
        _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("func is not a valid MTLBlendOperation."), v28, v29, v30, v31, v32, v141);
        v33 = *(_QWORD *)(v26 + 8);
      }
      validateMTLPixelFormat(v33 >> 36, a1);
      v40 = *(_DWORD *)(v26 + 8);
      v41 = (v40 >> 7) & 0x1F;
      if (i)
      {
        validateBlendFactorNotDualSourced(i, v41, a1, v35, v36, v37, v38, v39);
        validateBlendFactorNotDualSourced(i, (*(_DWORD *)(v26 + 8) >> 12) & 0x1F, a1, v42, v43, v44, v45, v46);
        validateBlendFactorNotDualSourced(i, (*(_DWORD *)(v26 + 8) >> 17) & 0x1F, a1, v47, v48, v49, v50, v51);
        validateBlendFactorNotDualSourced(i, (*(_DWORD *)(v26 + 8) >> 22) & 0x1F, a1, v52, v53, v54, v55, v56);
      }
      else
      {
        blendFactorSource((v40 >> 7) & 0x1F, v41, v34, v35, v36, v37, v38, v39);
        if (v59 == 2
          || (blendFactorSource((*(_DWORD *)(v26 + 8) >> 12) & 0x1F, v57, v58, v28, v29, v30, v31, v32), v62 == 2)
          || (blendFactorSource((*(_DWORD *)(v26 + 8) >> 17) & 0x1F, v60, v61, v28, v29, v30, v31, v32), v65 == 2))
        {
          v66 = 1;
        }
        else
        {
          blendFactorSource((*(_DWORD *)(v26 + 8) >> 22) & 0x1F, v63, v64, v28, v29, v30, v31, v32);
          v66 = v71 == 2;
        }
        v145 = v66;
      }
    }
    v67 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8 + 8 * i) + 8) >> 27) & 0xFLL;
    if (v67)
      v68 = v67 == 15;
    else
      v68 = 1;
    if (!v68 && (BYTE9(v146) & 0x80) != 0)
      _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("writeMask(0x%lx) is not MTLColorWriteMaskAll or MTLColorWriteMaskNone for render target %lu; however, the pixelformat %s for this render target requires MTLColorWriteMaskAll or MTLColorWriteMaskNone."),
        v28,
        v29,
        v30,
        v31,
        v32,
        v67);
    if (i >= v143)
      _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("MTLRenderPipelineDescriptor color render target(%lu) exceeds platform max(%lu)."), v28, v29, v30, v31, v32, i);
    if ((BYTE8(v146) & 1) != 0)
    {
      if ((BYTE8(v146) & 0x10) == 0)
        goto LABEL_59;
    }
    else
    {
      _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("pixelFormat, for color render target(%lu), is not a valid MTLPixelFormat."), v28, v29, v30, v31, v32, i);
      if ((BYTE8(v146) & 0x10) == 0)
LABEL_59:
        _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("pixelFormat, for color render target(%lu), %s is not color renderable."), v28, v29, v30, v31, v32, i);
    }
    if (i != 0 && v145)
      _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("Dual source blending is used in combination with multiple render targets"), v28, v29, v30, v31, v32, v141);
    v150[v23] = v27;
    v69 = &v151[7 * v23++];
    v70 = v147;
    *(_OWORD *)v69 = v146;
    *((_OWORD *)v69 + 1) = v70;
    *((_OWORD *)v69 + 2) = v148;
    v69[6] = v149;
    v24 = 1;
  }
  v72 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  if (v72)
  {
    v73 = *(_QWORD *)(v72 + 8) >> 36;
    if (v73)
    {
      v149 = 0;
      v147 = 0u;
      v148 = 0u;
      v146 = 0u;
      MTLPixelFormatGetInfoForDevice(v144, v73, (uint64_t)&v146);
      v79 = *(_QWORD *)(a3 + 224);
      v80 = BYTE8(v146);
      if ((v79 & 1) != 0 && (BYTE8(v146) & 8) == 0)
      {
        _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("MTLRenderPipelineDescriptor with alphaToCoverageEnabled requires a float/unorm pixel format, but colorAttachments[0].pixelFormat(%s) is not blendable"), v74, v75, v76, v77, v78, v146);
        v80 = BYTE8(v146);
        if ((*(_QWORD *)(a3 + 224) & 2) != 0)
          goto LABEL_65;
      }
      else if ((v79 & 2) != 0)
      {
LABEL_65:
        if ((v80 & 8) == 0)
          _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("MTLRenderPipelineDescriptor with alphaToOneEnabled requires a float/unorm pixel format, but colorAttachments[0].pixelFormat(%s) is not blendable"), v74, v75, v76, v77, v78, v146);
      }
    }
  }
  v81 = objc_msgSend(v144, "maxFramebufferStorageBits");
  v82 = MTLPixelFormatComputeTotalSizeUsed((uint64_t)v151, v150, v23, v142 > 1);
  if ((objc_msgSend(v144, "isLargeMRTSupported") & 1) == 0 && 8 * v82 > v81)
    _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("This set of render targets requires %lu bytes of pixel storage. This device supports %lu bytes."), v83, v84, v85, v86, v87, v82 & 0x1FFFFFFFFFFFFFFFLL);
  v88 = *(_QWORD *)(a3 + 72);
  if (v88)
  {
    MTLPixelFormatGetInfoForDevice(v144, v88, (uint64_t)&v146);
    v94 = v146;
    LOBYTE(v81) = BYTE8(v146);
    if ((BYTE8(v146) & 1) != 0)
    {
      if ((BYTE8(v146) & 0x20) != 0)
        goto LABEL_73;
LABEL_99:
      _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("depthAttachmentPixelFormat %s is not depth renderable."), v89, v90, v91, v92, v93, v94);
    }
    else
    {
      _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("depthAttachmentPixelFormat is not a valid MTLPixelFormat."), v89, v90, v91, v92, v93, v141);
      if ((v81 & 0x20) == 0)
        goto LABEL_99;
    }
LABEL_73:
    v24 = 1;
  }
  v95 = *(_QWORD *)(a3 + 80);
  if (v95)
  {
    MTLPixelFormatGetInfoForDevice(v144, v95, (uint64_t)&v146);
    v101 = v146;
    LOBYTE(i) = BYTE8(v146);
    if ((BYTE8(v146) & 1) != 0)
    {
      if ((BYTE8(v146) & 0x40) != 0)
        goto LABEL_77;
LABEL_101:
      _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("stencilAttachmentPixelFormat %s is not stencil renderable."), v96, v97, v98, v99, v100, v101);
    }
    else
    {
      _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("stencilAttachmentPixelFormat is not a valid MTLPixelFormat."), v96, v97, v98, v99, v100, v141);
      if ((i & 0x40) == 0)
        goto LABEL_101;
    }
LABEL_77:
    v24 = 1;
  }
  if (dyld_program_sdk_at_least()
    && ((objc_msgSend(v144, "supportsRenderPassWithoutRenderTarget") | v24) & 1) == 0)
  {
    _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("No valid pixelFormats set."), v102, v103, v104, v105, v106, v141);
  }
  v107 = *(_QWORD *)(a3 + 72);
  v108 = *(_QWORD *)(a3 + 80);
  if (v107 && v108 && i & 0x20 | v81 & 0x40 && v107 != v108)
  {
    Name = MTLPixelFormatGetName(v107);
    MTLPixelFormatGetName(*(_QWORD *)(a3 + 80));
    _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("depthAttachmentPixelFormat (%s) and stencilAttachmentPixelFormat (%s) must match."), v130, v131, v132, v133, v134, Name);
    v108 = *(_QWORD *)(a3 + 80);
    if (*(_QWORD *)(a3 + 72))
      goto LABEL_86;
  }
  else if (v107)
  {
LABEL_86:
    if (v108)
    {
      v109 = objc_msgSend(v144, "supportsSeparateDepthStencil");
      if (i & 0x20 | v81 & 0x40 || (v109 & 1) == 0)
      {
        v110 = *(_QWORD *)(a3 + 72);
        if (v110 != *(_QWORD *)(a3 + 80))
        {
          v135 = MTLPixelFormatGetName(v110);
          MTLPixelFormatGetName(*(_QWORD *)(a3 + 80));
          _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("depthAttachmentPixelFormat (%s) and stencilAttachmentPixelFormat (%s) must match."), v136, v137, v138, v139, v140, v135);
        }
      }
    }
  }
  v111 = *(_DWORD *)(a3 + 476);
  if (!v111)
  {
    _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("maxVertexAmplificationCount (%u) cannot be set to zero."), v102, v103, v104, v105, v106, 0);
    v111 = *(_DWORD *)(a3 + 476);
  }
  if ((objc_msgSend(v144, "supportsVertexAmplificationCount:", v111) & 1) == 0)
    _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("maxVertexAmplificationCount (%u) is not supported on this device. See supportsVertexAmplificationCount:(NSUInteger)."), v112, v113, v114, v115, v116, *(unsigned int *)(a3 + 476));
  if ((objc_msgSend(v144, "supportsTextureWriteRoundingMode:", *(_QWORD *)(a3 + 176)) & 1) == 0)
  {
    v123 = MTLRoundingModeString(*(_QWORD *)(a3 + 176));
    _MTLMessageContextPush_(a1, 4, (uint64_t)CFSTR("device does not support %@"), v124, v125, v126, v127, v128, (uint64_t)v123);
  }
  validateMTLCompareFunction((*(_QWORD *)(a3 + 224) >> 23) & 7, a1, v117, v118, v119, v120, v121, v122, v141);
  validateMTLPixelFormat(*(_QWORD *)(a3 + 72), a1);
  validateMTLPixelFormat(*(_QWORD *)(a3 + 80), a1);
}

void validateMTLPixelFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  MTLPixelFormatGetInfoForDevice(0, a1, (uint64_t)v9);
  if (a1)
  {
    if ((BYTE8(v9[0]) & 1) == 0)
      _MTLMessageContextPush_(a2, 4, (uint64_t)CFSTR("pixelFormat is not a valid MTLPixelFormat."), v4, v5, v6, v7, v8, *(uint64_t *)&v9[0]);
  }
}

void validateMTLCompareFunction(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1 >= 8)
    _MTLMessageContextPush_(a2, 4, (uint64_t)CFSTR("function is not a valid MTLCompareFunction."), a4, a5, a6, a7, a8, a9);
}

uint64_t MTLPixelFormatComputeTotalSizeUsed(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  if (a3)
  {
    result = 0;
    v6 = (uint64_t *)(a1 + 48);
    while (1)
    {
      v8 = *a2++;
      v7 = v8;
      if ((unint64_t)(v8 - 603) < 2)
      {
        v9 = 4;
      }
      else
      {
        v9 = 4;
        if (v7 != 622)
        {
          if (v7 != 605)
          {
            v10 = *((unsigned __int8 *)v6 - 15);
            v9 = *(v6 - 1);
            v11 = *v6;
            goto LABEL_9;
          }
          v9 = 8;
        }
      }
      v10 = 4;
      v11 = v9;
LABEL_9:
      v6 += 7;
      if (a4)
        v9 = v11;
      result = ((result + v10 - 1) & -v10) + v9;
      if (!--a3)
        return result;
    }
  }
  return 0;
}

dispatch_data_t createSerializedFragmentData<MTLRenderPipelineDescriptorPrivate>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  const void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t size;

  v5 = 0;
  v6 = 0;
  do
  {
    v7 = *(_QWORD *)(*(_QWORD *)a3 + 8 + v5);
    if (v7 && *(_QWORD *)(v7 + 8) >> 36)
      ++v6;
    v5 += 8;
  }
  while (v5 != 64);
  v8 = *(void **)(a3 + 496);
  if (v8
    && (objc_msgSend(v8, "functions") && objc_msgSend((id)objc_msgSend(*(id *)(a3 + 496), "functions"), "count")
     || objc_msgSend(*(id *)(a3 + 496), "privateFunctions")
     && objc_msgSend((id)objc_msgSend(*(id *)(a3 + 496), "privateFunctions"), "count")))
  {
    v9 = 1;
    v10 = 24;
  }
  else
  {
    v9 = 0;
    v10 = 16;
  }
  v11 = v10 + 2 * v6;
  v12 = MTLSerializePluginDataDictionary((void *)objc_msgSend((id)objc_msgSend(*(id *)(a3 + 264), "device"), "pluginData"), 0);
  v13 = MTLSerializePluginDataDictionary(*(void **)(a3 + 464), 0);
  v14 = v13 + v12 + v11;
  v46 = v12 + v11;
  v47 = v11;
  v48 = v12;
  v49 = v13;
  if (v9)
  {
    v44 = v13 + v12 + v11;
    v45 = (const void **)_MTLPopulateLinkedFunctionExtraData(*(MTLLinkedFunctions **)(a3 + 496));
    v15 = (size_t)v45[2];
    v16 = v15 + v14;
  }
  else
  {
    v15 = 0;
    v44 = 0;
    v45 = 0;
    v16 = v13 + v12 + v11;
  }
  size = v16;
  v17 = malloc_type_malloc(v16, 0xA19C7A3DuLL);
  v25 = v17;
  v26 = 0;
  v27 = 0;
  *v17 = 0;
  v17[1] = 0;
  *((_DWORD *)v17 + 2) = (a2 << 6) & 0x40000000 | v6 | (((*(_DWORD *)(a3 + 224) >> 7) & 1) << 29);
  v28 = 2;
  if (v9)
    v28 = 3;
  v29 = &v17[v28];
  do
  {
    v30 = *(_QWORD *)(*(_QWORD *)a3 + 8 + 8 * v26);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 8);
      if (v31 >> 36)
      {
        *((_WORD *)v29 + v27++) = WORD2(v31) & 0xFFF0 | v26;
        v32 = *(_QWORD *)(v30 + 8);
        if ((v32 & 1) != 0)
        {
          blendFactorSource((v32 >> 7) & 0x1F, v18, v19, v20, v21, v22, v23, v24);
          if (v33 == 2
            || (blendFactorSource((*(_DWORD *)(v30 + 8) >> 12) & 0x1F, v18, v19, v20, v21, v22, v23, v24), v34 == 2)
            || (blendFactorSource((*(_DWORD *)(v30 + 8) >> 17) & 0x1F, v18, v19, v20, v21, v22, v23, v24), v35 == 2)
            || (blendFactorSource((*(_DWORD *)(v30 + 8) >> 22) & 0x1F, v18, v19, v20, v21, v22, v23, v24), v36 == 2))
          {
            v37 = v25[2] | (0x10000 << v26) & 0xFF0000;
            v25[2] = v37;
          }
          else
          {
            v37 = v25[2];
          }
          if ((v37 & 0xFF0000) != 0)
          {
            blendFactorSource((*(_DWORD *)(v30 + 8) >> 7) & 0x1F, v18, v19, v20, v21, v22, v23, v24);
            if (v38 == 2
              || (blendFactorSource((*(_DWORD *)(v30 + 8) >> 12) & 0x1F, v18, v19, v20, v21, v22, v23, v24), v39 == 2)
              || (blendFactorSource((*(_DWORD *)(v30 + 8) >> 17) & 0x1F, v18, v19, v20, v21, v22, v23, v24), v40 == 2)
              || (blendFactorSource((*(_DWORD *)(v30 + 8) >> 22) & 0x1F, v18, v19, v20, v21, v22, v23, v24), v41 == 2))
            {
              v25[2] |= (256 << v26) & 0xFF00;
            }
          }
        }
      }
    }
    ++v26;
  }
  while (v26 != 8);
  v42 = *(_QWORD *)(a3 + 80);
  *((_WORD *)v25 + 6) = *(_QWORD *)(a3 + 72);
  *((_WORD *)v25 + 7) = v42;
  if (v48)
  {
    *v25 = v47;
    MTLSerializePluginDataDictionary((void *)objc_msgSend((id)objc_msgSend(*(id *)(a3 + 264), "device"), "pluginData"), (_BYTE *)v25 + v47);
  }
  if (v49)
  {
    v25[1] = v46;
    MTLSerializePluginDataDictionary(*(void **)(a3 + 464), (_BYTE *)v25 + v46);
  }
  if (v15)
  {
    v25[2] |= 0x80000000;
    v25[4] = v44;
    v25[5] = v15;
    memcpy((char *)v25 + v44, *v45, v15);
    free((void *)*v45);
    MEMORY[0x186DABFBC](v45, 0x1010C40113C0ABBLL);
  }
  return dispatch_data_create(v25, size, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
}

uint64_t blendFactorSource(unsigned int a1)
{
  if (a1 > 0x12)
    return 5;
  else
    return dword_18281A06C[a1];
}

void blendFactorSource(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  if (a1 >= 0x13)
    MTLReportFailure(0, "blendFactorSource", 4433, (uint64_t)CFSTR("Invalid blend factor"), a5, a6, a7, a8, vars0);
}

uint64_t MTLSerializePluginDataDictionary(void *a1, _BYTE *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (!objc_msgSend(a1, "count"))
    return 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  if (a2)
  {
    *a2 = objc_msgSend(a1, "count");
    v4 = v10 + 3;
    v5 = v10[3] + 1;
  }
  else
  {
    v4 = &v12;
    v5 = 1;
  }
  *v4 = v5;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __MTLSerializePluginDataDictionary_block_invoke;
  v8[3] = &unk_1E0FE5138;
  v8[4] = &v9;
  v8[5] = a2;
  objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:", v8);
  v6 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_182671C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void validateVertexAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1 || !*(_QWORD *)(a1 + 8))
    _MTLMessageContextPush_(a4, 4, (uint64_t)CFSTR("Attribute at index %d references a buffer at index %lu that has no stride."), a4, a5, a6, a7, a8, a2);
  if (*(_QWORD *)(a3 + 8) >= 0x38uLL)
    _MTLMessageContextPush_(a4, 4, (uint64_t)CFSTR("format is not a valid MTLVertexFormat / MTLAttributeFormat."), a4, a5, a6, a7, a8, a9);
}

{
  if (!a1 || !*(_QWORD *)(a1 + 8))
    _MTLMessageContextPush_(a4, 4, (uint64_t)CFSTR("Attribute at index %d references a buffer at index %lu that has no stride."), a4, a5, a6, a7, a8, a2);
  validateMTLAttributeFormat(*(_QWORD *)(a3 + 8), a4, a3, a4, a5, a6, a7, a8, a9);
}

void validateFunctionStepRate(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = objc_msgSend(a1, "patchType");
  switch(a2)
  {
    case 0:
      if (a3)
        _MTLMessageContextPush_(a4, 4, (uint64_t)CFSTR("stepRate(%lu) must be zero if stepFunction is MTLVertexStepFunctionConstant."), v9, v10, v11, v12, v13, a3);
      break;
    case 1:
      if (a1 && v8)
        _MTLMessageContextPush_(a4, 4, (uint64_t)CFSTR("MTLVertexStepFunctionPerVertex not allowed with postTessellationVertexFunction."), v9, v10, v11, v12, v13, v14);
      if (a3 != 1)
        _MTLMessageContextPush_(a4, 4, (uint64_t)CFSTR("stepRate(%lu) must be one if stepFunction is MTLVertexStepFunctionPerVertex."), v9, v10, v11, v12, v13, a3);
      break;
    case 2:
      if (!a3)
        _MTLMessageContextPush_(a4, 4, (uint64_t)CFSTR("stepRate(%lu) cannot be zero if stepFunction is MTLVertexStepFunctionPerInstance."), v9, v10, v11, v12, v13, 0);
      break;
    case 3:
      if (a1 && !v8)
        _MTLMessageContextPush_(a4, 4, (uint64_t)CFSTR("MTLVertexStepFunctionPerPatch requires postTessellationVertexFunction."), v9, v10, v11, v12, v13, v14);
      if (a3 != 1)
        _MTLMessageContextPush_(a4, 4, (uint64_t)CFSTR("stepRate(%lu) must be one if stepFunction is MTLVertexStepFunctionPerPatch."), v9, v10, v11, v12, v13, a3);
      break;
    case 4:
      if (a1 && !v8)
        _MTLMessageContextPush_(a4, 4, (uint64_t)CFSTR("MTLVertexStepFunctionPerPatchControlPoint requires postTessellationVertexFunction."), v9, v10, v11, v12, v13, v14);
      if (a3 != 1)
        _MTLMessageContextPush_(a4, 4, (uint64_t)CFSTR("stepRate(%lu) must be one if stepFunction is MTLVertexStepFunctionPerPatchAndPerInstance."), v9, v10, v11, v12, v13, a3);
      break;
    default:
      return;
  }
}

uint64_t AirReflection::Node::node_as_PositionRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131074) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PointSizeRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131073) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

void MTLComputeReflectionReader::deserializeStageData(uint64_t a1, dispatch_data_t data, uint64_t a3)
{
  NSObject *v5;
  int v6;
  char *v7;
  size_t v8;
  void *buffer_ptr;

  if (data)
  {
    v8 = 0;
    buffer_ptr = 0;
    v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &v8);
    v6 = *((_DWORD *)buffer_ptr + 2);
    if ((v6 & 1) != 0)
    {
      if ((v6 & 0x20) != 0)
        v7 = (char *)buffer_ptr + 20;
      else
        v7 = (char *)buffer_ptr + 12;
      (*(void (**)(_QWORD, char *, size_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, v8 - 12, a3);
    }
    dispatch_release(v5);
  }
}

uint64_t MTLComputeReflectionReader::deserialize(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD *))(*a1[2] + 24))(a1[2]);
  if (a4)
    return ((uint64_t (*)(_QWORD **, uint64_t, _QWORD *))(*a1)[3])(a1, a4, a1[2] + 16);
  return result;
}

MTLResourceList *MTLResourceListPoolCreateResourceList(MTLResourceListPool *a1)
{
  os_unfair_lock_s *p_lock;
  MTLResourceList *tqh_first;
  $939123F7D218D08BBBF53C440B2E3BF0 *p_listPriv;
  MTLResourceList *tqe_next;
  id *tqe_prev;
  MTLResourceList *v7;
  MTLResourceList *v8;
  MTLResourceListPool *v9;

  p_lock = &a1->_priv.lock;
  os_unfair_lock_lock(&a1->_priv.lock);
  tqh_first = a1->_priv.queue.tqh_first;
  if (tqh_first)
  {
    p_listPriv = &tqh_first->_listPriv;
    tqe_next = tqh_first->_listPriv.entry.tqe_next;
    tqe_prev = tqh_first->_listPriv.entry.tqe_prev;
    if (tqe_next)
    {
      tqe_next->_listPriv.entry.tqe_prev = tqe_prev;
      v7 = tqh_first->_listPriv.entry.tqe_next;
      tqe_prev = tqh_first->_listPriv.entry.tqe_prev;
    }
    else
    {
      v7 = 0;
      a1->_priv.queue.tqh_last = tqe_prev;
    }
    *tqe_prev = v7;
    --a1->_priv.count;
    tqh_first->_listPriv.entry.tqe_next = 0;
    tqh_first->_listPriv.entry.tqe_prev = 0;
    os_unfair_lock_unlock(p_lock);
    goto LABEL_8;
  }
  os_unfair_lock_unlock(p_lock);
  v8 = -[MTLResourceList initWithCapacity:]([MTLResourceList alloc], "initWithCapacity:", a1->_resourceListCapacity);
  tqh_first = v8;
  if (v8)
  {
    p_listPriv = &v8->_listPriv;
LABEL_8:
    p_listPriv->pool = a1;
    v9 = a1;
  }
  return tqh_first;
}

dispatch_data_t _MTLNewReflectionData(dispatch_data_t data, unsigned int a2)
{
  NSObject *v2;
  NSObject *subrange;
  NSObject *v5;
  _QWORD *v6;
  size_t v7;
  size_t *v8;
  size_t v9;
  NSObject *v10;
  size_t v11;
  dispatch_data_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v17;
  void *buffer_ptr;
  size_t size_ptr;
  void *v20;

  v2 = data;
  if (!data)
    return v2;
  if (MTLUseAirntReflection(void)::once_token != -1)
    dispatch_once(&MTLUseAirntReflection(void)::once_token, &__block_literal_global_4);
  v17 = 0;
  buffer_ptr = 0;
  subrange = dispatch_data_create_subrange(v2, 0, 0x50uLL);
  v5 = dispatch_data_create_map(subrange, (const void **)&buffer_ptr, &v17);
  dispatch_release(subrange);
  v6 = buffer_ptr;
  if (*(_QWORD *)buffer_ptr != 0x8EF13C710)
  {
    dispatch_release(v5);
    if (*(_QWORD *)buffer_ptr != 0x56484645524C544DLL)
    {
      dispatch_retain(v2);
      return v2;
    }
    size_ptr = 0;
    v20 = 0;
    v5 = dispatch_data_create_map(v2, (const void **)&v20, &size_ptr);
    v9 = *((_QWORD *)v20 + 2);
    if (a2 == 4)
    {
      v14 = *((_QWORD *)v20 + 6);
      if (v14)
      {
        v15 = v9 + *((_QWORD *)v20 + 3) + *((_QWORD *)v20 + 4) + *((_QWORD *)v20 + 5);
LABEL_28:
        v11 = v15 + 56;
        v10 = v2;
        v9 = v14;
        goto LABEL_29;
      }
    }
    else
    {
      if (a2 == 3)
      {
LABEL_12:
        v10 = v2;
        v11 = 56;
LABEL_29:
        v2 = dispatch_data_create_subrange(v10, v11, v9);
LABEL_32:
        dispatch_release(v5);
        return v2;
      }
      v14 = *((_QWORD *)v20 + a2 + 3);
      if (v14)
      {
        v15 = v9 + *((_QWORD *)v20 + a2 + 2);
        goto LABEL_28;
      }
      if (v9)
        goto LABEL_12;
    }
LABEL_31:
    v2 = 0;
    goto LABEL_32;
  }
  switch(a2)
  {
    case 1u:
      v7 = *((_QWORD *)buffer_ptr + 7);
      if (!v7)
        goto LABEL_18;
      v8 = (size_t *)((char *)buffer_ptr + 48);
      break;
    case 2u:
      v7 = *((_QWORD *)buffer_ptr + 5);
      if (!v7)
        goto LABEL_18;
      v8 = (size_t *)((char *)buffer_ptr + 32);
      break;
    case 3u:
      v7 = *((_QWORD *)buffer_ptr + 3);
      if (!v7)
        goto LABEL_18;
      v8 = (size_t *)((char *)buffer_ptr + 16);
      break;
    case 4u:
      v9 = *((_QWORD *)buffer_ptr + 9);
      if (!v9)
        goto LABEL_31;
      v11 = *((_QWORD *)buffer_ptr + 8);
      v10 = v2;
      goto LABEL_29;
    default:
      goto LABEL_18;
  }
  v12 = dispatch_data_create_subrange(v2, *v8, v7);
  if (!v12)
  {
LABEL_18:
    v13 = v6[3];
    if (v13)
      v12 = dispatch_data_create_subrange(v2, v6[2], v13);
    else
      v12 = 0;
  }
  dispatch_release(v5);
  return v12;
}

dispatch_data_t MTLNewReflectionPluginData(NSObject *a1)
{
  return _MTLNewReflectionData(a1, 4u);
}

void MTLArgumentDeserializer::deserializePluginData(uint64_t a1, dispatch_data_t data)
{
  dispatch_data_t v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  size_t v7;
  void *buffer_ptr;

  if (!*(_QWORD *)(a1 + 48))
  {
    v7 = 0;
    buffer_ptr = 0;
    if (data)
    {
      v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &v7);
      if (v3)
      {
        v4 = v3;
        if (v7)
        {
          v5 = objc_alloc(MEMORY[0x1E0C99D50]);
          v6 = objc_msgSend(v5, "initWithBytes:length:", buffer_ptr, v7);
        }
        else
        {
          v6 = 0;
        }
        *(_QWORD *)(a1 + 48) = v6;
        dispatch_release(v4);
      }
    }
  }
}

dispatch_data_t MTLNewEmulationReflectionData(NSObject *a1)
{
  return _MTLNewReflectionData(a1, 2u);
}

_QWORD *ReflectionReaderFactory<MTLComputeReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
  int AIRVersion;
  uint64_t v4;
  _QWORD *v5;

  AIRVersion = ShouldCreateAIRVersion(a2);
  v4 = operator new();
  MTLArgumentDeserializer::MTLArgumentDeserializer((MTLArgumentDeserializer *)v4, a1);
  if (AIRVersion)
  {
    *(_DWORD *)(v4 + 108) = 0;
    *(_DWORD *)(v4 + 112) = 0;
    *(_QWORD *)(v4 + 120) = 0;
    *(_DWORD *)(v4 + 160) = 0;
    *(_QWORD *)(v4 + 168) = "stageInBuffer";
    *(_QWORD *)v4 = &off_1E0FE14B8;
  }
  else
  {
    *(_QWORD *)v4 = &off_1E0FE14F0;
    *(_DWORD *)(v4 + 108) = 0;
    *(_DWORD *)(v4 + 112) = 0;
    *(_QWORD *)(v4 + 120) = 0;
    *(_DWORD *)(v4 + 160) = 0;
    *(_QWORD *)(v4 + 168) = "stageInBuffer";
  }
  v5 = (_QWORD *)operator new();
  MTLInputStageReflectionReader::MTLInputStageReflectionReader(v5, v4);
  *v5 = &unk_1E0FE1128;
  return v5;
}

void sub_182672F34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10F1C404B152E84);
  _Unwind_Resume(a1);
}

uint64_t ShouldCreateAIRVersion(NSObject *a1)
{
  dispatch_data_t v1;
  NSObject *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v7;
  size_t size_ptr;

  if (!a1)
    return 0;
  v7 = 0;
  size_ptr = 0;
  v1 = dispatch_data_create_map(a1, (const void **)&v7, &size_ptr);
  v2 = v1;
  if (size_ptr < 8)
  {
    v5 = 0;
    if (!v1)
      return v5;
LABEL_10:
    dispatch_release(v2);
    return v5;
  }
  v3 = *v7;
  v4 = MTLUseAirntReflection();
  if (v3 == 0x4E494253504C544DLL)
    v5 = 0;
  else
    v5 = v4;
  if (v2)
    goto LABEL_10;
  return v5;
}

uint64_t MTLUseAirntReflection(void)
{
  if (MTLUseAirntReflection(void)::once_token != -1)
    dispatch_once(&MTLUseAirntReflection(void)::once_token, &__block_literal_global_4);
  return 1;
}

void MTLArgumentDeserializer::MTLArgumentDeserializer(MTLArgumentDeserializer *this, uint64_t a2)
{
  *(_QWORD *)this = off_1E0FE0BC8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = -1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 1065353216;
  *((_QWORD *)this + 12) = a2;
  *((_DWORD *)this + 26) = 0;
}

_QWORD *MTLInputStageReflectionReader::MTLInputStageReflectionReader(_QWORD *result, uint64_t a2)
{
  *result = off_1E0FE1370;
  result[1] = a2;
  result[2] = a2;
  return result;
}

uint64_t ReflectionValidator<MTLVertexReflectionReader>::Validate()
{
  return 1;
}

void MTLComputeReflectionReader::~MTLComputeReflectionReader(MTLComputeReflectionReader *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE0540;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  JUMPOUT(0x186DABFBCLL);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE0540;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
}

uint64_t MTLFragmentReflectionReader::deserialize(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

void MTLInputStageReflectionDeserializer::~MTLInputStageReflectionDeserializer(MTLInputStageReflectionDeserializer *this)
{
  MTLInputStageReflectionDeserializer::~MTLInputStageReflectionDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

{
  unint64_t v2;

  *(_QWORD *)this = &off_1E0FE14F0;
  if (*((_DWORD *)this + 28))
  {
    v2 = 0;
    do

    while (v2 < *((unsigned int *)this + 28));
  }
  free(*((void **)this + 15));
  *((_QWORD *)this + 15) = 0;
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);
}

void MTLArgumentDeserializer::~MTLArgumentDeserializer(MTLArgumentDeserializer *this)
{
  unint64_t v2;
  void *v3;
  unint64_t v4;

  *(_QWORD *)this = off_1E0FE0BC8;
  if (*((_DWORD *)this + 4))
  {
    v2 = 0;
    do

    while (v2 < *((unsigned int *)this + 4));
  }
  free(*((void **)this + 1));
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    if (*((_DWORD *)this + 8))
    {
      v4 = 0;
      do

      while (v4 < *((unsigned int *)this + 8));
      v3 = (void *)*((_QWORD *)this + 3);
    }
    free(v3);
  }

  *((_QWORD *)this + 6) = 0;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 56);
}

uint64_t MTLInputStageReflectionDeserializer::deserialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, a3, 0);
}

void MTLFragmentReflectionReader::~MTLFragmentReflectionReader(MTLFragmentReflectionReader *this)
{
  MTLArgumentReader::~MTLArgumentReader(this);
  JUMPOUT(0x186DABFBCLL);
}

void MTLArgumentReader::~MTLArgumentReader(MTLArgumentReader *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE0540;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE0540;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE0540;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  JUMPOUT(0x186DABFBCLL);
}

MTLArgumentReader *ReflectionReaderFactory<MTLFragmentReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
  int AIRVersion;
  uint64_t v4;
  void (**v5)(MTLFragmentReflectionDeserializerAIR *__hidden);
  MTLArgumentReader *v6;

  AIRVersion = ShouldCreateAIRVersion(a2);
  v4 = operator new();
  MTLArgumentDeserializer::MTLArgumentDeserializer((MTLArgumentDeserializer *)v4, a1);
  if (AIRVersion)
    v5 = &off_1E0FE1528;
  else
    v5 = (void (**)(MTLFragmentReflectionDeserializerAIR *__hidden))&unk_1E0FE15E0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_BYTE *)(v4 + 120) = 0;
  *(_QWORD *)v4 = v5;
  v6 = (MTLArgumentReader *)operator new();
  MTLArgumentReader::MTLArgumentReader(v6, (MTLArgumentDeserializer *)v4);
  *(_QWORD *)v6 = &off_1E0FE1230;
  *((_QWORD *)v6 + 2) = v4;
  return v6;
}

void sub_182673378(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10A1C40B6334502);
  _Unwind_Resume(a1);
}

void MTLArgumentReader::MTLArgumentReader(MTLArgumentReader *this, MTLArgumentDeserializer *a2)
{
  *(_QWORD *)this = &off_1E0FE0540;
  *((_QWORD *)this + 1) = a2;
}

void MTLVertexReflectionReader::~MTLVertexReflectionReader(MTLVertexReflectionReader *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE0540;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  JUMPOUT(0x186DABFBCLL);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE0540;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
}

uint64_t MTLInputStageReflectionReader::deserialize(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD *))(*a1[2] + 24))(a1[2]);
  if (a4)
    return ((uint64_t (*)(_QWORD **, uint64_t, _QWORD *))(*a1)[3])(a1, a4, a1[2] + 16);
  return result;
}

_QWORD *ReflectionReaderFactory<MTLVertexReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
  int AIRVersion;
  uint64_t v4;
  _QWORD *v5;

  AIRVersion = ShouldCreateAIRVersion(a2);
  v4 = operator new();
  MTLArgumentDeserializer::MTLArgumentDeserializer((MTLArgumentDeserializer *)v4, a1);
  if (AIRVersion)
  {
    *(_DWORD *)(v4 + 108) = 0;
    *(_DWORD *)(v4 + 112) = 0;
    *(_QWORD *)(v4 + 120) = 0;
    *(_DWORD *)(v4 + 160) = 0;
    *(_QWORD *)(v4 + 168) = "vertexBuffer";
    *(_QWORD *)v4 = &off_1E0FE1440;
  }
  else
  {
    *(_QWORD *)v4 = &off_1E0FE14F0;
    *(_DWORD *)(v4 + 108) = 0;
    *(_DWORD *)(v4 + 112) = 0;
    *(_QWORD *)(v4 + 120) = 0;
    *(_DWORD *)(v4 + 160) = 0;
    *(_QWORD *)(v4 + 168) = "vertexBuffer";
  }
  v5 = (_QWORD *)operator new();
  MTLInputStageReflectionReader::MTLInputStageReflectionReader(v5, v4);
  *v5 = &unk_1E0FE10D0;
  return v5;
}

void sub_18267356C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10F1C404B152E84);
  _Unwind_Resume(a1);
}

void MTLFragmentReflectionDeserializerLegacy::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  NSObject *v5;
  unint64_t v6;
  _DWORD *v7;
  size_t v8;
  int v9;
  uint64_t v10;
  size_t v11;
  int v12;
  size_t v13;
  void *v14;
  char *v15;
  int v16;
  size_t v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  size_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  size_t v27;
  size_t v28;
  size_t size_ptr;
  void *buffer_ptr;

  if (!data)
  {
    *(_DWORD *)(a1 + 40) = -1;
    return;
  }
  size_ptr = 0;
  buffer_ptr = 0;
  v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v6 = *(_QWORD *)(a1 + 96);
  v8 = size_ptr;
  v7 = buffer_ptr;
  v26 = (char *)buffer_ptr;
  v27 = size_ptr;
  v28 = 0;
  *(_DWORD *)(a1 + 104) = 0;
  if (v8 >= 8 && *(_QWORD *)v7 == 0x4E494253504C544DLL)
  {
    if (v8 < 9 || (v8 & 0xFFFFFFFFFFFFFFFCLL) == 8)
      goto LABEL_29;
    v9 = v7[2];
    v28 = 12;
    *(_DWORD *)(a1 + 104) = v9;
  }
  v10 = (v6 >> 1) & 1;
  deserializeArgumentsWithDeserializer(a2, a1, (DeserialContext *)&v26, (v6 >> 1) & 1);
  v11 = v27;
  if (v27 <= v28 || v27 - v28 <= 3)
    goto LABEL_29;
  v12 = *(_DWORD *)&v26[v28];
  v13 = v28 + 4;
  v28 += 4;
  if (v12)
  {
    *(_BYTE *)(a1 + 120) = 1;
    v25 = 0;
    deserializeArguments(a2, (DeserialContext *)&v26, 1, &v25, (_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 104), 1);
    v14 = v25;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)v25;
    free(v14);
    v11 = v27;
    v13 = v28;
  }
  if (v11 <= v13 || v11 - v13 <= 3)
    goto LABEL_29;
  v15 = v26;
  v16 = *(_DWORD *)&v26[v13];
  v17 = v13 + 4;
  v28 = v13 + 4;
  *(_DWORD *)(a1 + 40) = v16;
  v18 = *(_DWORD *)(a1 + 104);
  if (v18 < 0x10000)
    goto LABEL_25;
  v19 = v11 > v17;
  v20 = v11 - v17;
  if (!v19 || v20 <= 3)
LABEL_29:
    abort();
  v21 = *(unsigned int *)&v15[v17];
  v28 = v13 + 8;
  if ((_DWORD)v21)
  {
    v22 = objc_alloc(MEMORY[0x1E0C99D50]);
    v23 = v28;
    if (v28 < v27)
    {
      v28 += v21;
      if (v23 + v21 <= v27)
      {
        v24 = objc_msgSend(v22, "initWithBytes:length:", &v26[v23], v21);
        v18 = *(_DWORD *)(a1 + 104);
        goto LABEL_23;
      }
    }
    goto LABEL_29;
  }
  v24 = 0;
LABEL_23:
  *(_QWORD *)(a1 + 48) = v24;
  if (v18 >= 0x20000)
    deserializeGlobalBindingsWithDeserializer(a2, a1, (DeserialContext *)&v26, v10);
LABEL_25:
  if (v28 != size_ptr)
    goto LABEL_29;
  v28 = size_ptr;
  if (v27 < size_ptr)
    goto LABEL_29;
  dispatch_release(v5);
}

void MTLInputStageReflectionDeserializer::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  NSObject *v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  size_t v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  size_t v22;
  unint64_t v23;
  unsigned int v24;
  size_t v25;
  unsigned int v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  BOOL v41;
  unint64_t v42;
  char *v43;
  int v44;
  size_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  size_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  size_t v54;
  int v55;
  NSObject *v56;
  char *v57;
  size_t v58;
  size_t v59;
  size_t size_ptr;
  void *buffer_ptr;

  if (data)
  {
    size_ptr = 0;
    buffer_ptr = 0;
    v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    v6 = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 151) = 0;
    v7 = *(_QWORD *)(a1 + 96);
    v9 = size_ptr;
    v8 = buffer_ptr;
    v57 = (char *)buffer_ptr;
    v58 = size_ptr;
    v59 = 0;
    *(_DWORD *)(a1 + 104) = 0;
    if (v9 >= 8)
    {
      if (*(_QWORD *)v8 == 0x4E494253504C544DLL)
      {
        v59 = 8;
        if (v9 < 9 || (v9 & 0xFFFFFFFFFFFFFFFCLL) == 8)
          goto LABEL_68;
        v10 = v8[2];
        v6 = 12;
        v59 = 12;
        *(_DWORD *)(a1 + 104) = v10;
      }
      else
      {
        v6 = 0;
      }
    }
    v11 = v9 - v6;
    if (v9 <= v6 || v11 <= 3)
      goto LABEL_68;
    v12 = v8[v6 / 4];
    v13 = v6 + 4;
    v59 = v13;
    *(_DWORD *)(a1 + 160) = v12;
    if (v12)
    {
      v14 = v11 - 4;
      while (v13 < v9 && v14 > 3)
      {
        v15 = *(unsigned int *)((char *)v8 + v13);
        v13 += 4;
        v59 = v13;
        *(_BYTE *)(a1 + v15 + 128) = 1;
        v14 -= 4;
        if (!--v12)
          goto LABEL_16;
      }
LABEL_68:
      abort();
    }
LABEL_16:
    v16 = (v7 >> 1) & 1;
    deserializeArgumentsWithDeserializer(a2, a1, (DeserialContext *)&v57, (v7 >> 1) & 1);
    v18 = v58;
    v17 = v59;
    if (v58 <= v59)
      goto LABEL_68;
    if (v58 - v59 <= 3)
      goto LABEL_68;
    v19 = v57;
    v20 = *(_DWORD *)&v57[v59];
    v59 += 4;
    *(_DWORD *)(a1 + 108) = v20;
    if (v18 <= v17 + 4)
      goto LABEL_68;
    if (v18 - (v17 + 4) <= 3)
      goto LABEL_68;
    v21 = *(_QWORD *)(a1 + 96);
    v22 = *(unsigned int *)&v19[v17 + 4];
    v59 = v17 + 8;
    v31 = v18 > v17 + 8;
    v23 = v18 - (v17 + 8);
    if (!v31 || v23 <= 3)
      goto LABEL_68;
    v24 = *(_DWORD *)&v19[v17 + 8];
    v25 = v17 + 12;
    v59 = v25;
    if ((v21 & 0x80000) != 0)
      v26 = v24;
    else
      v26 = 0;
    if (v26)
    {
      v53 = v21;
      v54 = v22;
      v55 = v16;
      v56 = v5;
      v52 = v26;
      v27 = 8 * v26;
      v28 = 0;
      *(_QWORD *)(a1 + 120) = malloc_type_malloc(v27, 0x80040B8603338uLL);
      do
      {
        v29 = DeserialContext::stringFromSerializedData((DeserialContext *)&v57);
        v30 = v59;
        v31 = v58 > v59 && v58 - v59 > 3;
        if (!v31)
          goto LABEL_68;
        v32 = *(unsigned int *)&v57[v59];
        v59 += 4;
        if (v58 <= v30 + 4 || v58 - (v30 + 4) <= 3)
          goto LABEL_68;
        v34 = *(unsigned int *)&v57[v30 + 4];
        v59 = v30 + 8;
        if (v58 <= v30 + 8 || v58 - (v30 + 8) <= 3)
          goto LABEL_68;
        v36 = v29;
        v37 = *(unsigned int *)&v57[v30 + 8];
        v59 = v30 + 12;
        v38 = DeserialContext::stringFromSerializedData((DeserialContext *)&v57);
        if (v58 <= v59 || v58 - v59 <= 3)
          goto LABEL_68;
        v39 = *(unsigned int *)&v57[v59];
        v59 += 4;
        *(_QWORD *)(*(_QWORD *)(a1 + 120) + v28) = -[MTLPostVertexDumpOutput initWithAirMDType:dataType:pixelFormat:aluType:name:offset:]([MTLPostVertexDumpOutput alloc], "initWithAirMDType:dataType:pixelFormat:aluType:name:offset:", v36, v32, v34, v37, v38, v39);
        v28 += 8;
      }
      while (v27 != v28);
      v25 = v59;
      v5 = v56;
      v22 = v54;
      LODWORD(v16) = v55;
      v26 = v52;
      LODWORD(v21) = v53;
    }
    if ((v21 & 0x80000) != 0 && v25 != v22)
      goto LABEL_68;
    v59 = v22;
    v40 = v58;
    v42 = v58 - v22;
    v41 = v58 > v22;
    if (v58 < v22)
      goto LABEL_68;
    *(_DWORD *)(a1 + 112) = v26;
    if (!v41 || v42 <= 3)
      goto LABEL_68;
    v43 = v57;
    v44 = *(_DWORD *)&v57[v22];
    v45 = v22 + 4;
    v59 = v22 + 4;
    *(_DWORD *)(a1 + 40) = v44;
    v46 = *(_DWORD *)(a1 + 104);
    if (HIWORD(v46))
    {
      v31 = v40 > v45;
      v47 = v40 - v45;
      if (!v31 || v47 <= 3)
        goto LABEL_68;
      v48 = *(unsigned int *)&v43[v45];
      v59 = v22 + 8;
      if ((_DWORD)v48)
      {
        v49 = objc_alloc(MEMORY[0x1E0C99D50]);
        v50 = v59;
        if (v59 >= v58)
          goto LABEL_68;
        v59 += v48;
        if (v50 + v48 > v58)
          goto LABEL_68;
        v51 = objc_msgSend(v49, "initWithBytes:length:", &v57[v50], v48);
        v46 = *(_DWORD *)(a1 + 104);
      }
      else
      {
        v51 = 0;
      }
      *(_QWORD *)(a1 + 48) = v51;
      if (v46 >= 0x20000)
        deserializeGlobalBindingsWithDeserializer(a2, a1, (DeserialContext *)&v57, v16);
    }
    if (v59 != size_ptr)
      goto LABEL_68;
    v59 = size_ptr;
    if (v58 < size_ptr)
      goto LABEL_68;
    dispatch_release(v5);
  }
  else
  {
    *(_DWORD *)(a1 + 40) = -1;
  }
}

uint64_t DeserialContext::moveToOffset(uint64_t this, unint64_t a2, int a3)
{
  if (a3 && *(_QWORD *)(this + 16) != a2 || (*(_QWORD *)(this + 16) = a2, *(_QWORD *)(this + 8) < a2))
    abort();
  return this;
}

uint64_t deserializeArgumentsWithDeserializer(void *a1, uint64_t a2, DeserialContext *this, int a4)
{
  unsigned int v8;

  *(_DWORD *)(a2 + 36) = DeserialContext::deserializeUint32(this);
  v8 = DeserialContext::deserializeUint32(this);
  *(_DWORD *)(a2 + 16) = deserializeArguments(a1, this, a4, (void **)(a2 + 8), (_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 104), 1);
  return DeserialContext::moveToOffset((uint64_t)this, v8, a4);
}

uint64_t deserializeGlobalBindingsWithDeserializer(void *a1, uint64_t a2, DeserialContext *this, int a4)
{
  unsigned int v8;

  v8 = DeserialContext::deserializeUint32(this);
  *(_DWORD *)(a2 + 32) = deserializeArguments(a1, this, a4, (void **)(a2 + 24), (_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 104), 0);
  return DeserialContext::moveToOffset((uint64_t)this, v8, a4);
}

void MTLFragmentReflectionDeserializerLegacy::~MTLFragmentReflectionDeserializerLegacy(id *this)
{
  MTLFragmentReflectionDeserializer::~MTLFragmentReflectionDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

void MTLFragmentReflectionDeserializer::~MTLFragmentReflectionDeserializer(id *this)
{
  *this = off_1E0FE13E0;
  if (*((_BYTE *)this + 120))

  this[14] = 0;
  MTLArgumentDeserializer::~MTLArgumentDeserializer((MTLArgumentDeserializer *)this);
}

void MTLFragmentReflectionDeserializerAIR::~MTLFragmentReflectionDeserializerAIR(id *this)
{
  MTLFragmentReflectionDeserializer::~MTLFragmentReflectionDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MTLFragmentReflectionDeserializerAIR::deserialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, a3, 0);
}

void MTLVertexReflectionDeserializerAIR::~MTLVertexReflectionDeserializerAIR(MTLVertexReflectionDeserializerAIR *this)
{
  MTLInputStageReflectionDeserializer::~MTLInputStageReflectionDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

dispatch_data_t MTLNewReflectionData(NSObject *a1)
{
  return _MTLNewReflectionData(a1, 1u);
}

void MTLComputeReflectionDeserializerAIR::~MTLComputeReflectionDeserializerAIR(MTLComputeReflectionDeserializerAIR *this)
{
  MTLInputStageReflectionDeserializer::~MTLInputStageReflectionDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

void MTLComputeReflectionDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  NSObject *v5;
  NSObject *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  unsigned __int16 *v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  id *v26;
  id *v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  void *__p;
  id *v32;
  _OWORD v33[2];
  int v34;
  _OWORD v35[3];
  size_t size_ptr;
  void *buffer_ptr;
  _OWORD v38[2];
  int v39;

  if (!data)
    return;
  size_ptr = 0;
  buffer_ptr = 0;
  v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v6 = v5;
  v7 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
  v8 = *v7;
  v9 = -v8;
  v10 = (unsigned __int16 *)((char *)v7 - v8);
  if (*v10 >= 5u)
  {
    v11 = v10[2];
    if (v11)
    {
      *(_DWORD *)(a1 + 104) = *(int *)((char *)v7 + v11 + 4) | (*(int *)((char *)v7 + v11) << 16);
      v9 = -(uint64_t)*v7;
    }
  }
  v12 = (unsigned __int16 *)((char *)v7 + v9);
  v13 = *v12;
  if (v13 < 7
    || (!v12[3] ? (v14 = 0) : (v14 = (int *)((char *)v7 + v12[3] + *(unsigned int *)((char *)v7 + v12[3]))),
        v13 < 0xD || (v15 = v12[6]) == 0 || !v14 || !*v14))
  {
    dispatch_release(v5);
    return;
  }
  v16 = &v14[*(int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15) + 4)];
  v17 = (int *)AirReflection::Node::node_as_KernelFunction((AirReflection::Node *)((char *)v16 + v16[1]
                                                                                               + 4));
  v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 9u && (v19 = v18[4]) != 0)
    v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  else
    v20 = 0;
  memset(v35, 0, sizeof(v35));
  memset(v33, 0, sizeof(v33));
  v34 = 1065353216;
  __p = (void *)3;
  LOBYTE(v32) = 0;
  memset(v38, 0, sizeof(v38));
  v39 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v33, (uint64_t *)v38);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v38);
  std::deque<ContextStack>::push_back(v35, (uint64_t *)&__p);
  ContextStack::~ContextStack((ContextStack *)&__p);
  v21 = deserializeArguments(a2, v20, (uint64_t)v14, (ReflectionDeserializeContext *)v35, (void **)(a1 + 8), (*(_QWORD *)(a1 + 96) & 0x200000) == 0, (_DWORD *)(a1 + 40));
  v22 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v22 >= 0x1Du && (v23 = v22[14]) != 0)
    v24 = (unsigned int *)((char *)v7 + v23 + *(unsigned int *)((char *)v7 + v23));
  else
    v24 = 0;
  v25 = (unint64_t)deserializeGlobalBindings(a2, v24, (ReflectionDeserializeContext *)v35, (uint64_t)v14, (void **)(a1 + 24)) >> 32;
  deserializeInputArguments((AirReflection::Node *)v20, (uint64_t)v14, a1);
  *(_DWORD *)(a1 + 16) = HIDWORD(v21);
  *(_DWORD *)(a1 + 32) = v25;
  *(_DWORD *)(a1 + 36) = v21;
  getPostVertexDumpOutputKernel(v7, (_DWORD *)(a1 + 108), a2, (uint64_t)&__p);
  v26 = (id *)__p;
  v27 = v32;
  if ((*(_BYTE *)(a1 + 98) & 8) == 0)
    goto LABEL_28;
  v28 = ((char *)v32 - (_BYTE *)__p) >> 3;
  *(_DWORD *)(a1 + 112) = v28;
  if (!*(_DWORD *)(a1 + 108))
    goto LABEL_28;
  *(_QWORD *)(a1 + 120) = malloc_type_calloc(v28, 8uLL, 0x80040B8603338uLL);
  v26 = (id *)__p;
  if (v32 != __p)
  {
    v29 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v29) = v26[v29];
      ++v29;
      v26 = (id *)__p;
      v27 = v32;
    }
    while (v29 < ((char *)v32 - (_BYTE *)__p) >> 3);
LABEL_28:
    if (v27 != v26)
    {
      v30 = 0;
      do
      {

        v26 = (id *)__p;
      }
      while (v30 < ((char *)v32 - (_BYTE *)__p) >> 3);
    }
  }
  dispatch_release(v6);
  if (__p)
  {
    v32 = (id *)__p;
    operator delete(__p);
  }
  std::deque<ContextStack>::~deque[abi:ne180100](v35);
}

void sub_18267412C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  std::deque<ContextStack>::~deque[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void MTLVertexReflectionDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  NSObject *v5;
  NSObject *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  unsigned __int16 *v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  id *v26;
  id *v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  void *__p;
  id *v32;
  _OWORD v33[2];
  int v34;
  _OWORD v35[3];
  size_t size_ptr;
  void *buffer_ptr;
  _OWORD v38[2];
  int v39;

  if (!data)
    return;
  size_ptr = 0;
  buffer_ptr = 0;
  v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v6 = v5;
  v7 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
  v8 = *v7;
  v9 = -v8;
  v10 = (unsigned __int16 *)((char *)v7 - v8);
  if (*v10 >= 5u)
  {
    v11 = v10[2];
    if (v11)
    {
      *(_DWORD *)(a1 + 104) = *(int *)((char *)v7 + v11 + 4) | (*(int *)((char *)v7 + v11) << 16);
      v9 = -(uint64_t)*v7;
    }
  }
  v12 = (unsigned __int16 *)((char *)v7 + v9);
  v13 = *v12;
  if (v13 < 7
    || (!v12[3] ? (v14 = 0) : (v14 = (int *)((char *)v7 + v12[3] + *(unsigned int *)((char *)v7 + v12[3]))),
        v13 < 0xF || (v15 = v12[7]) == 0 || !v14 || !*v14))
  {
    dispatch_release(v5);
    return;
  }
  v16 = &v14[*(int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15) + 4)];
  v17 = (int *)AirReflection::Node::node_as_VertexFunction((AirReflection::Node *)((char *)v16 + v16[1]
                                                                                               + 4));
  v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 9u && (v19 = v18[4]) != 0)
    v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  else
    v20 = 0;
  memset(v35, 0, sizeof(v35));
  memset(v33, 0, sizeof(v33));
  v34 = 1065353216;
  __p = (void *)1;
  LOBYTE(v32) = 0;
  memset(v38, 0, sizeof(v38));
  v39 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v33, (uint64_t *)v38);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v38);
  std::deque<ContextStack>::push_back(v35, (uint64_t *)&__p);
  ContextStack::~ContextStack((ContextStack *)&__p);
  v21 = deserializeArguments(a2, v20, (uint64_t)v14, (ReflectionDeserializeContext *)v35, (void **)(a1 + 8), (*(_QWORD *)(a1 + 96) & 0x200000) == 0, (_DWORD *)(a1 + 40));
  v22 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v22 >= 0x1Du && (v23 = v22[14]) != 0)
    v24 = (unsigned int *)((char *)v7 + v23 + *(unsigned int *)((char *)v7 + v23));
  else
    v24 = 0;
  v25 = (unint64_t)deserializeGlobalBindings(a2, v24, (ReflectionDeserializeContext *)v35, (uint64_t)v14, (void **)(a1 + 24)) >> 32;
  deserializeInputArguments((AirReflection::Node *)v20, (uint64_t)v14, a1);
  *(_DWORD *)(a1 + 16) = HIDWORD(v21);
  *(_DWORD *)(a1 + 32) = v25;
  *(_DWORD *)(a1 + 36) = v21;
  getPostVertexDumpOutputVertex(v7, (_DWORD *)(a1 + 108), a2, (uint64_t)&__p);
  v26 = (id *)__p;
  v27 = v32;
  if ((*(_BYTE *)(a1 + 98) & 8) == 0)
    goto LABEL_28;
  v28 = ((char *)v32 - (_BYTE *)__p) >> 3;
  *(_DWORD *)(a1 + 112) = v28;
  if (!*(_DWORD *)(a1 + 108))
    goto LABEL_28;
  *(_QWORD *)(a1 + 120) = malloc_type_calloc(v28, 8uLL, 0x80040B8603338uLL);
  v26 = (id *)__p;
  if (v32 != __p)
  {
    v29 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v29) = v26[v29];
      ++v29;
      v26 = (id *)__p;
      v27 = v32;
    }
    while (v29 < ((char *)v32 - (_BYTE *)__p) >> 3);
LABEL_28:
    if (v27 != v26)
    {
      v30 = 0;
      do
      {

        v26 = (id *)__p;
      }
      while (v30 < ((char *)v32 - (_BYTE *)__p) >> 3);
    }
  }
  dispatch_release(v6);
  if (__p)
  {
    v32 = (id *)__p;
    operator delete(__p);
  }
  std::deque<ContextStack>::~deque[abi:ne180100](v35);
}

void sub_182674488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  std::deque<ContextStack>::~deque[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

AirReflection::Node *deserializeInputArguments(AirReflection::Node *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int v13;

  if (result)
  {
    v3 = *(unsigned int *)result;
    if ((_DWORD)v3)
    {
      v5 = (unsigned int *)((char *)result + 4);
      v6 = a2 + 4;
      do
      {
        v7 = *v5++;
        result = (AirReflection::Node *)(v6 + 4 * v7 + *(unsigned int *)(v6 + 4 * v7));
        v8 = (unsigned __int16 *)((char *)result - *(int *)result);
        if (*v8 >= 5u)
        {
          v9 = v8[2];
          if (v9)
          {
            v10 = *(_DWORD *)((char *)result + v9);
            if (v10 == 266249)
            {
              result = (AirReflection::Node *)AirReflection::Node::node_as_StageInArg(result);
              goto LABEL_10;
            }
            if (v10 == 270340)
            {
              result = (AirReflection::Node *)AirReflection::Node::node_as_VertexInputArg(result);
LABEL_10:
              v11 = (unsigned __int16 *)((char *)result - *(int *)result);
              v12 = *(unsigned int *)((char *)result + v11[3]);
              if (*v11 < 0xFu)
              {
                LOBYTE(v13) = 0;
              }
              else
              {
                v13 = v11[7];
                if (v13)
                  LOBYTE(v13) = *((_BYTE *)result + v13) != 0;
              }
              *(_BYTE *)(a3 + v12 + 128) = v13 ^ 1;
            }
          }
        }
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

void MTLFragmentReflectionDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  NSObject *v5;
  NSObject *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  unsigned __int16 *v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  int *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  AirReflection::Node *v33;
  unsigned __int16 *v34;
  uint64_t v35;
  int v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 v52;
  unsigned int *v53;
  unsigned __int16 *v54;
  unsigned int v55;
  unsigned __int16 v56;
  int v57;
  MTLImageBlockDataArgument *v58;
  uint64_t v59;
  BOOL v60;
  unsigned int v61;
  const __CFString *v62;
  MTLStructTypeInternal *v63;
  MTLStructTypeInternal *v64;
  uint64_t v65;
  unint64_t v66;
  _OWORD v67[2];
  __int128 v68;
  size_t size_ptr;
  void *buffer_ptr;
  uint64_t v71;
  char v72;
  __int128 v73;
  __int128 v74;
  int v75;
  __int128 v76;
  __int128 v77;
  int v78;

  if (data)
  {
    size_ptr = 0;
    buffer_ptr = 0;
    v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    v6 = v5;
    v7 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
    v8 = *v7;
    v9 = -v8;
    v10 = (unsigned __int16 *)((char *)v7 - v8);
    if (*v10 >= 5u)
    {
      v11 = v10[2];
      if (v11)
      {
        *(_DWORD *)(a1 + 104) = *(int *)((char *)v7 + v11 + 4) | (*(int *)((char *)v7 + v11) << 16);
        v9 = -(uint64_t)*v7;
      }
    }
    v12 = (unsigned __int16 *)((char *)v7 + v9);
    v13 = *v12;
    if (v13 >= 7
      && (!v12[3] ? (v14 = 0) : (v14 = (int *)((char *)v7 + v12[3] + *(unsigned int *)((char *)v7 + v12[3]))),
          v13 >= 9 && (v15 = v12[4]) != 0 && v14 && *v14))
    {
      v16 = v14 + 1;
      v17 = &v14[*(int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15) + 4) + 1];
      v18 = (int *)AirReflection::Node::node_as_FragmentFunction((AirReflection::Node *)((char *)v17 + *v17));
      v68 = 0u;
      memset(v67, 0, sizeof(v67));
      v74 = 0u;
      v73 = 0u;
      v75 = 1065353216;
      v71 = 2;
      v72 = 0;
      v76 = 0u;
      v77 = 0u;
      v78 = 1065353216;
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)&v73, (uint64_t *)&v76);
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&v76);
      std::deque<ContextStack>::push_back(v67, &v71);
      ContextStack::~ContextStack((ContextStack *)&v71);
      v19 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v19 >= 9u && (v20 = v19[4]) != 0)
        v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
      else
        v21 = 0;
      v22 = deserializeArguments(a2, v21, (uint64_t)v14, (ReflectionDeserializeContext *)v67, (void **)(a1 + 8), (*(_QWORD *)(a1 + 96) & 0x200000) == 0, (_DWORD *)(a1 + 40));
      v23 = (unsigned __int16 *)((char *)v7 - *v7);
      v66 = v22;
      if (*v23 >= 0x1Du && (v24 = v23[14]) != 0)
        v25 = (unsigned int *)((char *)v7 + v24 + *(unsigned int *)((char *)v7 + v24));
      else
        v25 = 0;
      v65 = deserializeGlobalBindings(a2, v25, (ReflectionDeserializeContext *)v67, (uint64_t)v14, (void **)(a1 + 24));
      v26 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v26 >= 7u)
      {
        v27 = v26[3];
        if (v27)
        {
          v28 = (char *)v18 + v27;
          v29 = *(unsigned int *)((char *)v18 + v27);
          if (*(int *)((char *)v18 + v27 + v29))
          {
            v30 = 0;
            v31 = (uint64_t)v18 + v27 + v29 + 4;
            do
            {
              v32 = &v16[*(unsigned int *)(v31 + 4 * v30)];
              v33 = (AirReflection::Node *)((char *)v32 + *v32);
              v34 = (unsigned __int16 *)((char *)v33 - *(int *)v33);
              if (*v34 >= 5u && (v35 = v34[2]) != 0)
              {
                v36 = *(_DWORD *)((char *)v33 + v35);
                if (v36 > 135171)
                {
                  if ((v36 - 143360) < 4 || (v36 - 139264) < 3)
                    goto LABEL_35;
                  if (v36 == 135172)
                  {
                    v37 = (int *)AirReflection::Node::node_as_ImageblockDataRet(v33);
                    v38 = *v37;
                    v39 = -v38;
                    v40 = (char *)v37 - v38;
                    v41 = *(unsigned __int16 *)((char *)v37 - v38);
                    if (v41 < 0x15)
                    {
                      v62 = &stru_1E0FE5DC8;
LABEL_44:
                      if (v41 >= 7)
                        goto LABEL_47;
                      v61 = 0;
                    }
                    else
                    {
                      v42 = *((unsigned __int16 *)v40 + 10);
                      if (v42)
                      {
                        v62 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v37 + v42 + *(unsigned int *)((char *)v37 + v42) + 4);
                        v43 = *v37;
                        v39 = -v43;
                        v41 = *(unsigned __int16 *)((char *)v37 - v43);
                        goto LABEL_44;
                      }
                      v62 = &stru_1E0FE5DC8;
LABEL_47:
                      v44 = (char *)v37 + v39;
                      if (*((_WORD *)v44 + 3))
                        v61 = *(int *)((char *)v37 + *((unsigned __int16 *)v44 + 3));
                      else
                        v61 = 0;
                      if (v41 >= 0xB && *((_WORD *)v44 + 5))
                      {
                        v45 = &v16[*(int *)((char *)v37 + *((unsigned __int16 *)v44 + 5))];
                        AirReflection::Node::node_as_StructTypeInfo((AirReflection::Node *)((char *)v45 + *v45));
                        v46 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v67[0] + 1)
                                                    + 8 * ((*((_QWORD *)&v68 + 1) + (_QWORD)v68 - 1) / 0x49uLL))
                                        + 56 * ((*((_QWORD *)&v68 + 1) + (_QWORD)v68 - 1) % 0x49uLL));
                        v73 = 0u;
                        v74 = 0u;
                        v75 = 1065353216;
                        v71 = v46;
                        v72 = 1;
                        v76 = 0u;
                        v77 = 0u;
                        v78 = 1065353216;
                        std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)&v73, (uint64_t *)&v76);
                        std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&v76);
                        std::deque<ContextStack>::push_back(v67, &v71);
                        ContextStack::~ContextStack((ContextStack *)&v71);
                        v47 = (unsigned __int16 *)((char *)v37 - *v37);
                        if (*v47 >= 0xBu && (v48 = v47[5]) != 0)
                          v49 = (unsigned int *)((char *)v37 + v48);
                        else
                          v49 = 0;
                        v64 = deserializeStructArgument((uint64_t)a2, v49, (uint64_t)v14, (ReflectionDeserializeContext *)v67, 0);
                        std::deque<ContextStack>::pop_back(v67);
LABEL_56:
                        v50 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v67[0] + 1)
                                                    + 8 * ((*((_QWORD *)&v68 + 1) + (_QWORD)v68 - 1) / 0x49uLL))
                                        + 56 * ((*((_QWORD *)&v68 + 1) + (_QWORD)v68 - 1) % 0x49uLL));
                        v73 = 0u;
                        v74 = 0u;
                        v75 = 1065353216;
                        v71 = v50;
                        v72 = 1;
                        v76 = 0u;
                        v77 = 0u;
                        v78 = 1065353216;
                        std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)&v73, (uint64_t *)&v76);
                        std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&v76);
                        std::deque<ContextStack>::push_back(v67, &v71);
                        ContextStack::~ContextStack((ContextStack *)&v71);
                        v51 = (unsigned __int16 *)((char *)v37 - *v37);
                        if (*v51 >= 9u && (v52 = v51[4]) != 0)
                          v53 = (unsigned int *)((char *)v37 + v52);
                        else
                          v53 = 0;
                        v63 = deserializeStructArgument((uint64_t)a2, v53, (uint64_t)v14, (ReflectionDeserializeContext *)v67, 0);
                        std::deque<ContextStack>::pop_back(v67);
                        v54 = (unsigned __int16 *)((char *)v37 - *v37);
                        v55 = *v54;
                        if (v55 < 0xD)
                        {
                          v60 = 0;
                        }
                        else
                        {
                          if (v54[6])
                            v60 = *((_BYTE *)v37 + v54[6]) != 0;
                          else
                            v60 = 0;
                          if (v55 >= 0xF)
                          {
                            v56 = v54[7];
                            if (v56)
                            {
                              v57 = *(int *)((char *)v37 + v56);
LABEL_69:
                              HIDWORD(v59) = v57;
                              LOBYTE(v59) = v60;
                              v58 = -[MTLImageBlockDataArgument initWithName:type:access:isActive:index:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:]([MTLImageBlockDataArgument alloc], "initWithName:type:access:isActive:index:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:", v62, 16, 0, 1, 0, v61, v64, v59);
                              -[MTLImageBlockDataArgument setStructType:](v58, "setStructType:", v63);

                              -[MTLBindingInternal setIsArgument:](v58, "setIsArgument:", 1);
                              if (v58 && v58->super._type == 16)
                              {
                                *(_QWORD *)(a1 + 112) = v58;
                                *(_BYTE *)(a1 + 120) = 1;
                              }
                              goto LABEL_35;
                            }
                          }
                        }
                        v57 = -1;
                        goto LABEL_69;
                      }
                    }
                    v64 = 0;
                    goto LABEL_56;
                  }
                }
                else if ((v36 - 0x20000) < 6 || (v36 - 135168) < 4)
                {
                  goto LABEL_35;
                }
              }
              else
              {
                v36 = 0;
              }
              AirReflection::EnumNameNodeType(v36);
LABEL_35:
              ++v30;
            }
            while (v30 < *(unsigned int *)&v28[v29]);
          }
        }
      }
      *(_DWORD *)(a1 + 16) = HIDWORD(v66);
      *(_DWORD *)(a1 + 32) = HIDWORD(v65);
      *(_DWORD *)(a1 + 36) = v66;
      dispatch_release(v6);
      std::deque<ContextStack>::~deque[abi:ne180100](v67);
    }
    else
    {
      dispatch_release(v5);
    }
  }
}

void sub_182674CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  ContextStack::~ContextStack((ContextStack *)&a28);
  std::deque<ContextStack>::~deque[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ContextStack *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t deserializeGlobalBindings(void *a1, unsigned int *a2, ReflectionDeserializeContext *a3, uint64_t a4, void **a5)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int *v16;
  unsigned __int16 *v17;
  unsigned __int16 v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;

  if (a2 && (v10 = *a2, *a5 = malloc_type_malloc(8 * v10, 0x80040B8603338uLL), (_DWORD)v10))
  {
    v11 = 0;
    LODWORD(v12) = 0;
    LODWORD(v13) = 0;
    v14 = a2 + 1;
    do
    {
      v15 = *v14++;
      v16 = (int *)AirReflection::Node::node_as_GlobalBinding((AirReflection::Node *)(a4
                                                                                    + 4
                                                                                    + 4 * v15
                                                                                    + *(unsigned int *)(a4 + 4 + 4 * v15)));
      v17 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v17 >= 7u && (v18 = v17[3]) != 0)
        v19 = (unsigned int *)((char *)v16 + v18);
      else
        v19 = 0;
      v20 = deserializeArgument(a1, v19, a4, a3, (MTLBuiltInMeshArgument **)*a5 + v11);
      v13 = (v13 + HIDWORD(v20));
      v12 = (v12 + v20);
      v11 += HIDWORD(v20);
      --v10;
    }
    while (v10);
    v21 = v13 << 32;
  }
  else
  {
    v21 = 0;
    v12 = 0;
  }
  return v21 | v12;
}

uint64_t AirReflection::Node::node_as_FragmentFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 1) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t AirReflection::Node::node_as_VertexInputArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270340) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t MTLComputeReflectionDeserializerAIR::deserialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, a3, 0);
}

void MTLVertexReflectionReader::deserializeStageData(uint64_t a1, dispatch_data_t data, uint64_t a3)
{
  NSObject *v5;
  size_t v6;
  void *buffer_ptr;

  v6 = 0;
  buffer_ptr = 0;
  v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &v6);
  if ((*((_BYTE *)buffer_ptr + 8) & 2) != 0)
    (*(void (**)(_QWORD, char *, size_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), (char *)buffer_ptr + 12, v6 - 12, a3);
  dispatch_release(v5);
}

void MTLInputStageReflectionDeserializer::deserializeStageInputDescriptor(MTLInputStageReflectionDeserializer *this, _WORD *a2, unint64_t a3, const BOOL *a4)
{
  unint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  unsigned int *v15;
  char v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  MTLBufferBindingInternal *v22;
  __int16 v23;
  uint64_t v24;
  MTLBufferBindingInternal *v25;
  uint64_t v26;
  uint64_t v27;
  MTLBufferBindingInternal *v28;
  uint64_t v29;
  MTLBufferBindingInternal **v30;
  BOOL v31;
  unsigned int v33;
  uint64_t v34;
  _OWORD v35[2];
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  memset(v35, 0, sizeof(v35));
  v5 = (unsigned __int16)a2[1];
  if (v5 >= 0x800)
  {
    v6 = (unsigned int *)((char *)a2 + (unsigned __int16)a2[3]);
    v7 = v5 >> 11;
    do
    {
      v9 = *v6;
      v6 += 2;
      v8 = v9;
      if (a4[v9 & 0x1F])
        *((_BYTE *)v35 + ((v8 >> 5) & 0x1F)) = 1;
      --v7;
    }
    while (v7);
  }
  v10 = (char *)a2 + (unsigned __int16)a2[2];
  v11 = (v5 >> 6) & 0x1F;
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = (v5 >> 6) & 0x1F;
    v15 = (unsigned int *)((char *)a2 + (unsigned __int16)a2[2]);
    do
    {
      v17 = *v15;
      v15 += 4;
      v16 = v17;
      if ((v17 >> 5) - 7 <= 1)
      {
        v13 = (*((unsigned __int8 *)v35 + (v16 & 0x1F)) | v13) != 0;
        v12 = 1;
      }
      --v14;
    }
    while (v14);
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v31 = v13;
  v33 = (v12 & 1) + v11 + *((_DWORD *)this + 4);
  v18 = malloc_type_malloc(8 * v33, 0x80040B8603338uLL);
  v30 = (MTLBufferBindingInternal **)&v18[v11];
  memcpy(&v30[v12 & 1], *((const void **)this + 1), 8 * *((unsigned int *)this + 4));
  free(*((void **)this + 1));
  *((_QWORD *)this + 1) = 0;
  v19 = 0x1E0CB3000uLL;
  v34 = v11;
  if ((_DWORD)v11)
  {
    v20 = 0;
    do
    {
      v21 = v19;
      LOBYTE(v29) = 0;
      v22 = -[MTLBufferBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:]([MTLBufferBindingInternal alloc], "initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:", objc_msgSend(*(id *)(v19 + 2368), "stringWithFormat:", CFSTR("%s.%u"), *((_QWORD *)this + 21), v20), 0, 0, *((unsigned __int8 *)v35 + (*(_DWORD *)v10 & 0x1F)), *(_DWORD *)v10 & 0x1F, 1, 1, 0, 0, v29, *((_QWORD *)v10 + 1), 4);
      -[MTLBufferBindingInternal setVertexDescriptorBuffer:](v22, "setVertexDescriptorBuffer:", 1);
      v19 = v21;
      v18[v20++] = v22;
      v10 += 16;
    }
    while (v34 != v20);
  }
  if ((v12 & 1) != 0)
  {
    v23 = a2[1];
    v24 = objc_msgSend(*(id *)(v19 + 2368), "stringWithFormat:", CFSTR("%s.%u"), *((_QWORD *)this + 21), v34);
    v25 = [MTLBufferBindingInternal alloc];
    v26 = 33;
    if ((v23 & 1) == 0)
      v26 = 41;
    v27 = 4;
    if ((v23 & 1) == 0)
      v27 = 2;
    LOBYTE(v29) = 0;
    v28 = -[MTLBufferBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:](v25, "initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:", v24, 0, 0, v31, ((unint64_t)(unsigned __int16)a2[1] >> 1) & 0x1F, 1, v26, 0, 0, v29, v27, v27);
    -[MTLBufferBindingInternal setVertexDescriptorBuffer:](v28, "setVertexDescriptorBuffer:", 1);
    *v30 = v28;
  }
  *((_QWORD *)this + 1) = v18;
  *((_DWORD *)this + 4) = v33;
}

void _MTLIndirectArgumentBufferLayoutPrivate::~_MTLIndirectArgumentBufferLayoutPrivate(id *this)
{
  id *i;

  for (i = this + 3; ; i[3])
  {
    i = (id *)*i;
    if (!i)
      break;
  }

  *this = 0;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)(this + 1));
}

void MTLPixelFormatGetInfo(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MTLPixelFormatGetInfoForDevice(0, a1, a2);
}

uint64_t MTLHashArray(void *a1, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unint64_t v11;
  char v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1 && !a2)
    return 3405691582;
  v5 = 3735928559;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v16 != v9)
          objc_enumerationMutation(a1);
        v11 = objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * i), "hash");
        if (a3)
        {
          v12 = v8 & 0x3F;
          v13 = v11 << v8++;
          v11 = (v11 >> (v12 ^ 0x3Fu)) | v13;
        }
        v5 ^= v11;
      }
      v7 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v7);
  }
  return v5;
}

uint64_t _MTLHashState(int *a1, unint64_t a2)
{
  unsigned int v2;
  int v3;

  v2 = a2 ^ 0x123456;
  if (a2 >= 4)
  {
    do
    {
      v3 = *a1++;
      v2 = (1540483477 * ((1540483477 * v3) ^ ((1540483477 * v3) >> 24))) ^ (1540483477 * v2);
      a2 -= 4;
    }
    while (a2 > 3);
  }
  return (1540483477 * (v2 ^ (v2 >> 13))) ^ ((1540483477 * (v2 ^ (v2 >> 13))) >> 15);
}

uint64_t _MTLFixIABReflectionOffsetsWithLayout(void *a1, void *a2, void *a3)
{
  char v6;
  void *v7;
  uint64_t result;
  uint64_t v9[3];

  v6 = objc_msgSend(a2, "bufferLayoutMatchesFrontEndLayout");
  if ((v6 & 1) == 0)
  {
    objc_msgSend(a1, "setDataSize:", objc_msgSend(a2, "encodedLength"));
    v7 = (void *)objc_msgSend(a1, "dataTypeDescription");
    updatePointerType(v7, a2, a3);
    objc_msgSend(a1, "setAlignment:", objc_msgSend(v7, "alignment"));
  }
  result = objc_msgSend((id)objc_msgSend(a1, "bufferStructType"), "isIndirectArgumentBuffer");
  if ((_DWORD)result)
  {
    result = getGlobalConstantOffsets((void *)objc_msgSend(a1, "bufferStructType"), 0, a2, a3, v9);
    if ((v6 & 1) == 0)
      return makeOffsetRelative((MTLStructType *)objc_msgSend(a1, "bufferStructType"), 0);
  }
  return result;
}

void sub_182676680(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10A0C40EA59D502);
  _Unwind_Resume(a1);
}

uint64_t _MTLIndirectArgumentBufferLayoutPrivate::_MTLIndirectArgumentBufferLayoutPrivate(uint64_t a1, MTLStructType *a2, void *a3)
{
  _QWORD v7[6];
  _QWORD *v8;

  *(_QWORD *)a1 = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZN39_MTLIndirectArgumentBufferLayoutPrivateC2EP13MTLStructTypePU23objcproto12MTLDeviceSPI11objc_object_block_invoke;
  v7[3] = &unk_1E0FE2928;
  v7[4] = a3;
  v7[5] = a1;
  v8 = v7;
  MTLIndirectResourceEnumerator::collectIndirectResources((MTLIndirectResourceEnumerator *)&v8, a2, 0);
  return a1;
}

void sub_182676744(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLIndirectResourceEnumerator::collectIndirectResources(MTLIndirectResourceEnumerator *this, MTLStructType *a2, uint64_t a3)
{
  NSArray *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v4 = -[MTLStructType members](a2, "members");
    v5 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v5)
    {
      v6 = v5;
      v7 = 0;
      v8 = *(_QWORD *)v19;
      while (1)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v19 != v8)
            objc_enumerationMutation(v4);
          v10 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
          v11 = objc_msgSend(v10, "indirectArgumentIndex") + a3;
          v12 = objc_msgSend(v10, "dataType");
          if ((unint64_t)(v12 - 58) <= 0x16)
          {
            if (((1 << (v12 - 58)) & 0x700003) != 0)
              goto LABEL_9;
            if (v12 == 60)
            {
              v14 = (void *)objc_msgSend(v10, "dataTypeDescription");
              if (objc_msgSend(v14, "elementIsArgumentBuffer")
                && objc_msgSend(v14, "elementTypeDescription"))
              {
                (*(void (**)(void))(*(_QWORD *)this + 16))();
              }
LABEL_9:
              v13 = v11 + 1;
              goto LABEL_19;
            }
          }
          if (v12 == 2)
          {
            v15 = MTLIndirectResourceEnumerator::collectIndirectResources(this, (MTLArrayType *)objc_msgSend(v10, "arrayType"), v11);
          }
          else
          {
            if (v12 != 1)
              goto LABEL_9;
            v15 = MTLIndirectResourceEnumerator::collectIndirectResources(this, (MTLStructType *)objc_msgSend(v10, "structType"), v11);
          }
          v13 = v15 + v11;
LABEL_19:
          if (v13 > v7)
            v7 = v13;
        }
        v6 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        if (!v6)
          return v7 - a3;
      }
    }
  }
  v7 = 0;
  return v7 - a3;
}

uint64_t ___ZN21XPCCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;

  v1 = *(_QWORD *)(result + 48);
  v2 = *(_DWORD *)(result + 72);
  if (v2 <= 2)
  {
    v3 = result;
    do
    {
      result = XPCCompilerConnection::BuildRequestInternal(v1, *(int **)(v3 + 56), *(const char **)(v3 + 64), *(NSObject **)(v3 + 32), v2, *(unsigned __int8 *)(v3 + 76), *(_QWORD *)(v3 + 40));
      if ((result & 1) != 0)
        break;
    }
    while (v2++ != 2);
  }
  v5 = (unsigned int *)(v1 + 28);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  return result;
}

BOOL XPCCompilerConnection::BuildRequestInternal(uint64_t a1, int *a2, const char *a3, NSObject *a4, int a5, int a6, uint64_t a7)
{
  NSObject *v13;
  NSObject *v14;
  xpc_object_t v15;
  int v16;
  _BOOL4 v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL8 v20;
  uint64_t v22;
  void *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  const char *v27;
  _xpc_connection_s *v28;
  xpc_object_t v29;
  unsigned int *v30;
  unsigned int v31;
  int v34;
  BOOL v35;
  _QWORD handler[2];
  void (*v37)(uint64_t, id);
  void *v38;
  xpc_object_t v39;
  NSObject *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int *v45;
  const char *v46;
  int v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  void *v54;
  os_activity_scope_state_s state;

  v13 = _os_activity_create(&dword_182636000, "compiling shader", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v13, &state);
  v34 = MTLAtomicIncrement((unsigned int *)&CompilerConnection::_compileCount);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 64), 0xFFFFFFFFFFFFFFFFLL);
  if (MTLTraceEnabled())
    kdebug_trace();
  v54 = 0;
  v14 = (*(uint64_t (**)(int *, _QWORD, void **))(*(_QWORD *)a2 + 16))(a2, *(unsigned int *)(a1 + 32), &v54);
  if (v14)
  {
    v15 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_uint64(v15, "llvmVersion", *(int *)(a1 + 32));
    v16 = a2[2];
    xpc_dictionary_set_uint64(v15, "requestType", v16);
    v17 = (v16 & 0xFFFFFFFE) == 16;
    if (v16 > 13)
    {
      if (v16 == 14)
      {
        v22 = 2;
        if (!*((_BYTE *)a2 + 88))
          goto LABEL_28;
        goto LABEL_27;
      }
      if (v16 != 15)
      {
LABEL_22:
        v22 = 1;
        if (v16 != 3 && v16 != 13)
        {
          if (!v17)
            goto LABEL_28;
          v22 = 2;
        }
LABEL_27:
        v23 = (void *)XPCCompilerConnection::setupSandbox((XPCCompilerConnection *)v22);
        xpc_dictionary_set_value(v15, "sandboxTokens", v23);
LABEL_28:
        if (a4)
        {
          v24 = xpc_data_create_with_dispatch_data(a4);
          xpc_dictionary_set_value(v15, "targetData", v24);
          xpc_release(v24);
        }
        v25 = xpc_data_create_with_dispatch_data(v14);
        xpc_dictionary_set_value(v15, "data", v25);
        xpc_release(v25);
        if (a3)
          xpc_dictionary_set_string(v15, "pluginPath", a3);
        if (a2[2] == 16)
        {
          v26 = xpc_fd_create(a2[7]);
          xpc_dictionary_set_value(v15, "machOFD", v26);
          xpc_release(v26);
        }
        if (_MTLIsInternalBuild() && enableRelaxedMath(void)::onceToken != -1)
          dispatch_once(&enableRelaxedMath(void)::onceToken, &__block_literal_global_59);
        if (enableRelaxedMath(void)::relaxedMathSet == 1)
          xpc_dictionary_set_uint64(v15, "setRelaxedMath", 1uLL);
        v27 = (const char *)MTLGetProcessName();
        if (v27)
          xpc_dictionary_set_string(v15, "client_name", v27);
        v50 = 0;
        v51 = &v50;
        v52 = 0x2020000000;
        v53 = 1;
        handler[0] = MEMORY[0x1E0C809B0];
        handler[1] = 3221225472;
        v37 = ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke;
        v38 = &unk_1E0FE36D8;
        v45 = a2;
        v46 = a3;
        v39 = v15;
        v40 = a4;
        v49 = a6;
        v43 = &v50;
        v44 = a1;
        v47 = a5;
        v48 = v34;
        v41 = v13;
        v42 = a7;
        if (a5 <= 0 && *(_QWORD *)(a1 + 56) && !*(_BYTE *)(a1 + 73)
          || (v35 = 0, XPCCompilerConnection::checkConnectionActive((XPCCompilerConnection *)a1, &v35)))
        {
          v28 = *(_xpc_connection_s **)(a1 + 56);
          if (a6)
          {
            v29 = xpc_connection_send_message_with_reply_sync(v28, v15);
            v37((uint64_t)handler, v29);
            xpc_release(v29);
            v20 = *((_BYTE *)v51 + 24) != 0;
LABEL_56:
            _Block_object_dispose(&v50, 8);
            goto LABEL_57;
          }
          xpc_connection_send_message_with_reply(v28, v15, *(dispatch_queue_t *)(a1 + 16), handler);
        }
        else
        {
          XPCCompilerConnection::reportError(a1, a6, (uint64_t)"MTLCompiler: Compiler service could not be reached.", a7, v35);
          (*(void (**)(int *))(*(_QWORD *)a2 + 8))(a2);
          if (MTLTraceEnabled())
            kdebug_trace();
          if ((a6 & 1) == 0)
          {
            v30 = (unsigned int *)(a1 + 28);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
          }
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));

        }
        v20 = 1;
        goto LABEL_56;
      }
    }
    else if (v16 != 1 && v16 != 10)
    {
      goto LABEL_22;
    }
    v17 = (v16 & 0xFFFFFFFE) == 0x10 || *((_BYTE *)a2 + 132) != 0;
    goto LABEL_22;
  }
  XPCCompilerConnection::reportError(a1, a6, (uint64_t)v54, a7, 0);
  (*(void (**)(int *))(*(_QWORD *)a2 + 8))(a2);
  free(v54);
  if (MTLTraceEnabled())
    kdebug_trace();
  if ((a6 & 1) == 0)
  {
    v18 = (unsigned int *)(a1 + 28);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));

  v20 = 1;
LABEL_57:
  os_activity_scope_leave(&state);
  return v20;
}

void sub_1826770B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v27 - 104));
  _Unwind_Resume(a1);
}

void ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke(uint64_t a1, id a2)
{
  uint64_t v4;
  int v5;
  id v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  xpc_object_t value;
  char *v27;
  BOOL v28;
  void (*v29)(void);
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  os_log_type_t v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  int v52;
  uint64_t v53;
  _DWORD v54[2];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (object_getClass(a2) != (Class)MEMORY[0x1E0C812F8])
  {
    if (object_getClass(a2) == (Class)MEMORY[0x1E0C81310])
    {
      if (a2 == (id)MEMORY[0x1E0C81258])
      {
        v33 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (v33)
          ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_cold_2(v33, v34, v35, v36, v37, v38, v39, v40);
        xpc_release(*(xpc_object_t *)(a1 + 32));
        v41 = *(_DWORD *)(a1 + 96);
        if (v41 == 2)
          v42 = OS_LOG_TYPE_FAULT;
        else
          v42 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], v42))
        {
          v54[0] = 67109120;
          v54[1] = v41 + 1;
          _os_log_impl(&dword_182636000, MEMORY[0x1E0C81028], v42, "MTLCompiler: Compilation failed with XPC_ERROR_CONNECTION_INTERRUPTED on %d try", (uint8_t *)v54, 8u);
        }
        v15 = 2;
      }
      else if (a2 == (id)MEMORY[0x1E0C81260])
      {
        v43 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (v43)
          ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_cold_4(v43, v44, v45, v46, v47, v48, v49, v50);
        xpc_release(*(xpc_object_t *)(a1 + 32));
        v51 = XPCCompilerConnection::cancelConnection((XPCCompilerConnection *)v4);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_cold_3(a1, (uint64_t)v51);
        v15 = 1;
      }
      else
      {
        v6 = (id)MEMORY[0x1E0C81288];
        v7 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (a2 == v6)
        {
          if (v7)
            ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_cold_5(v7, v8, v9, v10, v11, v12, v13, v14);
          v15 = 3;
        }
        else
        {
          if (v7)
            ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_cold_6(v7, v8, v9, v10, v11, v12, v13, v14);
          v15 = 4;
        }
        xpc_release(*(xpc_object_t *)(a1 + 32));
      }
      if (v5 != 8 && (*(_DWORD *)(a1 + 96) == 2 || *(_BYTE *)(v4 + 72)))
        v25 = newLogReplayRequest(*(_DWORD **)(a1 + 80), *(const char **)(a1 + 88), *(NSObject **)(a1 + 40), *(unsigned int *)(v4 + 32));
      else
        v25 = 0;
      if (v15 != 1)
      {
        v52 = *(_DWORD *)(a1 + 96);
        if (v52 <= 1)
        {
          if (*(_BYTE *)(a1 + 104))
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
          else
            (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 40), (v52 + 1), 0, *(_QWORD *)(a1 + 56));
          goto LABEL_27;
        }
      }
      v53 = *(_QWORD *)(a1 + 56);
      if (v15 == 1)
      {
        MTLCompiler_encountered_XPC_ERROR_CONNECTION_INVALID(v53);
LABEL_25:
        v30 = *(_QWORD *)(a1 + 80);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        goto LABEL_27;
      }
      v29 = *(void (**)(void))(v53 + 16);
LABEL_24:
      v29();
      goto LABEL_25;
    }
LABEL_15:
    xpc_release(*(xpc_object_t *)(a1 + 32));
    value = xpc_dictionary_get_value(a2, "reply");
    if (object_getClass(value) == (Class)MEMORY[0x1E0C812E8]
      && ((xpc_data_get_bytes_ptr(value),
           xpc_data_get_length(value),
           v27 = getenv("AGX_LOG_SHADER_COMPILER_REQUEST"),
           v5 != 8)
        ? (v28 = v27 == 0)
        : (v28 = 1),
          !v28 && *v27 == 49))
    {
      v25 = newLogReplayRequest(*(_DWORD **)(a1 + 80), *(const char **)(a1 + 88), *(NSObject **)(a1 + 40), *(unsigned int *)(v4 + 32));
    }
    else
    {
      v25 = 0;
    }
    v29 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
    goto LABEL_24;
  }
  if (!xpc_dictionary_get_uint64(a2, "error"))
    goto LABEL_15;
  v16 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if (v16)
    ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
  xpc_release(*(xpc_object_t *)(a1 + 32));
  xpc_dictionary_get_uint64(a2, "error");
  xpc_dictionary_get_string(a2, "errorMessage");
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  v24 = *(_QWORD *)(a1 + 80);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = 0;
LABEL_27:
  if (MTLTraceEnabled())
    kdebug_trace();
  if (!*(_BYTE *)(a1 + 104))
  {
    v31 = (unsigned int *)(v4 + 28);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v4 + 64));

  if (v25)
    XPCCompilerConnection::DispatchLogReplayRequest((XPCCompilerConnection *)v4, v25, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 104));
}

void ___ZN35MTLCompilerConnectionManagerPrivate12buildRequestEjP18MTLCompilerRequestbU13block_pointerFv16MTLCompilerErrorPU27objcproto16OS_dispatch_data8NSObjectPKcE_block_invoke_2(uint64_t a1, int a2, void *buffer, size_t size)
{
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (buffer && size)
  {
    v5 = dispatch_data_create(buffer, size, 0, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    dispatch_release(v5);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  v6 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void MTLCompilerFunctionRequest::~MTLCompilerFunctionRequest(MTLCompilerFunctionRequest *this)
{
  MTLCompilerFunctionRequest::~MTLCompilerFunctionRequest(this);
  JUMPOUT(0x186DABFBCLL);
}

{
  NSObject *var10;
  NSObject *var9;
  char *var20;
  NSObject *var22;
  NSObject *var24;
  NSObject *var2;

  this->var0 = (void **)&off_1E0FE1100;

  this->var12 = 0;
  this->var13 = 0;

  this->var14 = 0;
  this->var15 = 0;
  var10 = this->var10;
  if (var10)
  {
    dispatch_release(var10);
    this->var10 = 0;
  }
  var9 = this->var9;
  if (var9)
  {
    dispatch_release(var9);
    this->var9 = 0;
  }
  var20 = this->var20;
  if (var20)
  {
    free(var20);
    this->var20 = 0;
  }
  var22 = this->var22;
  if (var22)
  {
    dispatch_release(var22);
    this->var22 = 0;
  }
  var24 = this->var24;
  if (var24)
  {
    dispatch_release(var24);
    this->var24 = 0;
  }

  this->var25 = 0;
  this->var0 = (void **)&off_1E0FE05F0;
  var2 = this->var2;
  if (var2)
    dispatch_release(var2);
}

void sub_182677CB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

id MTLCompilerFunctionRequest::serializedRequest(MTLCompilerFunctionRequest *this, int a2, char **a3)
{
  id var10;
  MTLCompilerFunctionRequest *v6;
  _BOOL4 var19;
  NSObject *var22;
  int v10;
  int var1;
  _BOOL4 v12;
  int v13;
  char *var20;
  int v15;
  void *v16;
  uint64_t v17;
  NSObject *var2;
  int v19;
  int v20;
  char v21;
  int var17;
  uint64_t v23;
  unint64_t var11;
  void *v25;
  unint64_t v26;
  _QWORD *v27;
  void *v28;
  int var18;
  void *v30;
  unsigned int v31;
  NSObject *var9;
  size_t v33;
  int v34;
  size_t v35;
  __int16 v36;
  uint64_t v37;
  unsigned int v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  MTLCompilerFunctionRequest *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  void *v49;
  int v50;
  int v51;
  unsigned int v52;
  void *v53;
  id v54;
  __int128 *v55;
  __int128 v56;
  id var15;
  int v58;
  int var16;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *var24;
  dispatch_data_t v64;
  size_t v65;
  void *v66;
  id var25;
  uint64_t v68;
  uint64_t v69;
  uint64_t j;
  void *v71;
  __CFString *v72;
  const __CFString *v73;
  unint64_t v74;
  void *v75;
  int v76;
  char v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  void *v83;
  NSObject *v84;
  NSObject *v85;
  int v86;
  unint64_t var23;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  unsigned int var3;
  int v96;
  int v97;
  id *p_var15;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  NSObject *v103;
  int v104;
  uint64_t v105;
  int v106;
  unsigned int var6;
  int v108;
  NSObject *object;
  int active_platform;
  _BOOL4 v111;
  _QWORD *v112;
  int v113;
  int v114;
  int v115;
  char *__s;
  int v117;
  int v118;
  unsigned int v119;
  size_t v120;
  int v121;
  uint64_t v122;
  void *v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  size_t v128;
  id var5;
  size_t v130;
  void *v131;
  unsigned int v132;
  int v133;
  unint64_t v134;
  id var4;
  id obj;
  int obja;
  uint64_t v138;
  int v139;
  size_t count;
  size_t counta;
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  size_t v147;
  void *v148;
  void *__p;
  _BYTE *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  void *v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  size_t v163;
  void *v164;
  uint64_t v165;
  size_t __n;
  void *__src;
  size_t size;
  __int16 v169;
  char v170;
  size_t size_ptr;
  void *buffer_ptr;
  _BYTE v173[128];
  _BYTE v174[128];
  _BYTE v175[128];
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  var10 = this->var10;
  if (var10)
    return var10;
  v6 = this;
  var19 = this->var19;
  var22 = this->var22;
  v10 = var19 && var22 != 0;
  buffer_ptr = 0;
  size_ptr = 0;
  if (var22)
  {
    v85 = dispatch_data_create_map(var22, (const void **)&buffer_ptr, &size_ptr);
    v111 = strncmp((const char *)buffer_ptr + 4, "AIRC", 4uLL) != 0;
  }
  else
  {
    v111 = v10;
    v85 = 0;
  }
  var4 = v6->var4;
  var5 = v6->var5;
  var1 = v6->var1;
  if (var1 == 10)
    v12 = 1;
  else
    v12 = var1 == 7 && v6->var16 == 10;
  if (var4)
    v131 = (void *)objc_msgSend(var4, "device");
  else
    v131 = (void *)objc_msgSend(var5, "device");
  v13 = _MTLGetMTLCompilerLLVMVersionForDevice(v131);
  _MTLGetLLVMVersionFromDevice(v131);
  v180 = 0u;
  v181 = 0u;
  v178 = 0u;
  v179 = 0u;
  v169 = 0;
  v170 = 0;
  v176 = 0u;
  v177 = 0u;
  active_platform = dyld_get_active_platform();
  var20 = v6->var20;
  if (var20)
    LODWORD(var20) = v6->var19 << 23;
  if (v12)
    v15 = 0x2000000;
  else
    v15 = 100663296;
  if (v13 != a2)
    v15 = 0;
  v132 = var20 | v15;
  v16 = var4;
  if (var4)
  {
    v17 = objc_msgSend(var4, "libraryData");
    v16 = var4;
    if (objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 72))(v17), "count")
      || (v16 = var4, objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 64))(v17), "count")))
    {
      v132 |= 0x8000000u;
    }
  }
  *a3 = 0;
  __src = 0;
  __n = 0;
  var2 = v6->var2;
  if (var2)
  {
    object = dispatch_data_create_map(var2, (const void **)&__src, &__n);
    v19 = __n;
  }
  else
  {
    v19 = 0;
    object = 0;
  }
  v20 = v16 == 0;
  v21 = gCompilerTestMode;
  var17 = v6->var17;
  var6 = v6->var6;
  v23 = *(_QWORD *)&v6->var7;
  var11 = v6->var11;
  v106 = v19 - var11;
  v25 = v16;
  v108 = var11;
  v105 = (v19 - var11) + 288;
  v26 = v105 + var11;
  if (v25)
  {
    v27 = (_QWORD *)objc_msgSend(v25, "libraryData");
    v28 = (void *)v27[11];
    if (v28)
    {
      __s = (char *)objc_msgSend(v28, "UTF8String");
      v121 = v26;
      v120 = strlen(__s) + 1;
      v26 += v120;
      goto LABEL_38;
    }
  }
  else
  {
    v27 = (_QWORD *)objc_msgSend(var5, "libraryData");
  }
  v121 = 0;
  LODWORD(v120) = 0;
  __s = 0;
LABEL_38:
  v124 = v26 + 7;
  v104 = (v26 + 7) & 0xFFFFFFF8;
  size = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  var18 = v6->var18;
  if (!var18)
    var18 = 32023;
  v126 = var18;
  v165 = 0;
  _getForcedAIRVersion((_DWORD *)&v165 + 1, &v165);
  v122 = v165;
  if (!HIDWORD(v165))
  {
    v30 = var4;
    if ((_DWORD)v165 || v126 > 0x7D16)
      goto LABEL_45;
    v31 = _MTLGetAIRVersionForLLVMBitcodeVersion(v126);
    HIDWORD(v122) = HIWORD(v31);
    LODWORD(v122) = (unsigned __int16)v31;
  }
  v30 = var4;
LABEL_45:
  v164 = 0;
  v163 = 0;
  var9 = v6->var9;
  if (var9)
  {
    v103 = dispatch_data_create_map(var9, (const void **)&v164, &v163);
    v33 = v163;
  }
  else
  {
    v33 = 0;
    v103 = 0;
  }
  v119 = v33;
  v134 = ((v124 | 7) + v33) & 0xFFFFFFFFFFFFFFF8;
  if (v30)
  {
    v123 = (void *)objc_msgSend(v30, "name");
    v34 = strlen((const char *)objc_msgSend(v123, "UTF8String"));
    v102 = objc_msgSend(var4, "bitcodeType");
    v35 = ((v34 + 8) & 0xFFFFFFF8) + v134;
    size = v35;
    if (objc_msgSend(var4, "bitCodeFileSize"))
      objc_msgSend(var4, "pluginData");
    v162 = 0;
    v161 = 0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *, uint64_t *))(*v27 + 200))(v27, objc_msgSend(var4, "bitCodeOffset"), objc_msgSend(var4, "bitCodeFileSize"), &v161, &v162);
    v127 = v162;
    v125 = objc_msgSend((id)objc_msgSend(var4, "pluginData"), "length");
    v118 = v134;
    v36 = v34 + 1;
    v117 = v127 + v35;
    v128 = v125 + v127 + v35;
    LODWORD(v134) = v35;
  }
  else
  {
    v162 = 0;
    v161 = 0;
    if (var5)
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v27 + 216))(v27, &v161, &v162);
      v37 = v162;
    }
    else
    {
      v37 = 0;
    }
    v118 = 0;
    v36 = 0;
    v102 = 0;
    v123 = 0;
    v117 = 0;
    LODWORD(v125) = 0;
    LODWORD(v127) = v37;
    v128 = v37 + v134;
  }
  v101 = objc_msgSend(v6->var12, "count");
  std::vector<MTLBuildBinaryRequest>::vector(&v159, objc_msgSend(v6->var12, "count"));
  v100 = v36;
  v38 = 0;
  v142 = (var17 << 31) | ((v21 & 3) << 28) | v132 & 0xF800000 | (v20 << 30);
  size = v128 + 56 * objc_msgSend(v6->var12, "count");
  while (objc_msgSend(v6->var12, "count") > (unint64_t)v38)
  {
    v39 = (void *)objc_msgSend(v6->var12, "objectAtIndexedSubscript:", v38);
    prepareVisibleFunctionHeader(v39, (uint64_t)v159 + 56 * v38++, (uint64_t *)&size);
  }
  v130 = size;
  v112 = v27;
  if (v6->var14)
  {
    __p = 0;
    v40 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    obj = v6->var14;
    v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v155, v175, 16);
    if (v41)
    {
      v138 = *(_QWORD *)v156;
      do
      {
        v42 = 0;
        count = v41;
        do
        {
          if (*(_QWORD *)v156 != v138)
            objc_enumerationMutation(obj);
          v43 = *(_QWORD *)(*((_QWORD *)&v155 + 1) + 8 * v42);
          objc_msgSend(v40, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99DE8], "array"), v43);
          v153 = 0u;
          v154 = 0u;
          v151 = 0u;
          v152 = 0u;
          v44 = v6;
          v45 = (void *)objc_msgSend(v6->var14, "objectForKeyedSubscript:", v43);
          v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v151, v174, 16);
          if (v46)
          {
            v47 = *(_QWORD *)v152;
            do
            {
              for (i = 0; i != v46; ++i)
              {
                if (*(_QWORD *)v152 != v47)
                  objc_enumerationMutation(v45);
                objc_msgSend((id)objc_msgSend(v40, "objectForKeyedSubscript:", v43), "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v151 + 1) + 8 * i), "name"));
              }
              v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v151, v174, 16);
            }
            while (v46);
          }
          ++v42;
          v6 = v44;
        }
        while (v42 != count);
        v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v155, v175, 16);
      }
      while (v41);
    }
    v27 = v112;
    v49 = (void *)objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v40, 0, &__p);
    v50 = objc_msgSend(v49, "length");
    v139 = v130;
    v130 += objc_msgSend(v49, "length");
  }
  else
  {
    v50 = 0;
    v139 = 0;
    v49 = 0;
  }
  v51 = objc_msgSend(v6->var13, "count");
  std::vector<MTLBuildBinaryRequest>::vector(&__p, objc_msgSend(v6->var13, "count"));
  v96 = v51;
  v97 = v50;
  v52 = 0;
  size = v130 + 56 * objc_msgSend(v6->var13, "count");
  while (objc_msgSend(v6->var13, "count") > (unint64_t)v52)
  {
    v53 = (void *)objc_msgSend(v6->var13, "objectAtIndexedSubscript:", v52);
    prepareVisibleFunctionHeader(v53, (uint64_t)__p + 56 * v52++, (uint64_t *)&size);
  }
  v86 = v6->var1;
  if (v86 == 15)
  {
    v54 = var4;
    v55 = (__int128 *)objc_msgSend(var4, "bitCodeHash");
    v56 = v55[1];
    v176 = *v55;
    v177 = v56;
    var15 = v6->var15;
    p_var15 = &v6->var15;
    if (var15)
    {
      objc_msgSend(var15, "UTF8String");
      v58 = objc_msgSend(*p_var15, "lengthOfBytesUsingEncoding:", 4);
      v113 = size;
      v94 = (v58 & 0xFFFFFFF8) + 8;
      size += v94;
    }
    else
    {
      v113 = 0;
      LODWORD(v94) = 0;
    }
  }
  else
  {
    v113 = 0;
    LODWORD(v94) = 0;
    p_var15 = &v6->var15;
    v54 = var4;
  }
  var16 = v6->var16;
  if (!var16)
    var16 = v6->var1;
  v92 = var16;
  v93 = v6->var1;
  var3 = v6->var3;
  if ((v132 & 0x800000) != 0)
  {
    v114 = (size + 7) & 0xFFFFFFF8;
    v91 = strlen(v6->var20) + 1;
    v60 = ((size + 7) | 7) + v91;
    v115 = v60 & 0xFFFFFFF8;
    size = v60 & 0xFFFFFFFFFFFFFFF8;
    if (v111)
    {
      v61 = ((*((_QWORD *)v6->var21 + 8) - *((_QWORD *)v6->var21 + 7)) >> 5);
      v90 = (*((_QWORD *)v6->var21 + 8) - *((_QWORD *)v6->var21 + 7)) >> 5;
      v62 = (v60 | 7) + 4 * v61;
      v99 = v62 & 0xFFFFFFF8;
      size = (v62 + 32 * v61) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      LODWORD(v90) = 0;
      v115 = 0;
      v99 = 0;
    }
    v54 = var4;
  }
  else
  {
    v114 = 0;
    LODWORD(v90) = 0;
    LODWORD(v91) = 0;
    v115 = 0;
    v99 = 0;
  }
  if (v6->var22)
  {
    obja = size;
    v89 = size_ptr;
    size = (size + size_ptr + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    obja = 0;
    v89 = 0;
  }
  v147 = 0;
  v148 = 0;
  var24 = v6->var24;
  var23 = v6->var23;
  if (!var24)
  {
    v88 = 0;
    v84 = 0;
    v65 = size;
    v133 = size;
LABEL_100:
    counta = v65;
    goto LABEL_101;
  }
  v64 = dispatch_data_create_map(var24, (const void **)&v148, &v147);
  v65 = size;
  v84 = v64;
  v133 = size;
  if (!(_DWORD)v147)
  {
    v88 = 0;
    goto LABEL_100;
  }
  v88 = v147;
  counta = (size + v147 + 7) & 0xFFFFFFFFFFFFFFF8;
  size = counta;
LABEL_101:
  if (objc_msgSend(v6->var25, "count"))
  {
    v66 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", objc_msgSend(v6->var25, "count") << 7);
    var25 = v6->var25;
    v143 = 0u;
    v144 = 0u;
    v145 = 0u;
    v146 = 0u;
    v68 = objc_msgSend(var25, "countByEnumeratingWithState:objects:count:", &v143, v173, 16);
    v83 = v49;
    if (v68)
    {
      v69 = *(_QWORD *)v144;
      do
      {
        for (j = 0; j != v68; ++j)
        {
          if (*(_QWORD *)v144 != v69)
            objc_enumerationMutation(var25);
          v71 = *(void **)(*((_QWORD *)&v143 + 1) + 8 * j);
          v72 = (__CFString *)objc_msgSend(v6->var25, "objectForKeyedSubscript:", v71);
          if (objc_msgSend(v71, "isEqualToString:", CFSTR("enable-acceleration-structure-viewer-intersect-instrumentation")))
          {
            v142 |= 0x1000000u;
          }
          else
          {
            objc_msgSend(v66, "appendString:", CFSTR("-"));
            objc_msgSend(v66, "appendString:", v71);
            if (v72 != (__CFString *)objc_msgSend(MEMORY[0x1E0C99E38], "null"))
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v73 = v72;
              }
              else
              {
                objc_opt_class();
                v73 = &stru_1E0FE5DC8;
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v73 = (const __CFString *)-[__CFString stringValue](v72, "stringValue");
              }
              objc_msgSend(v66, "appendString:", CFSTR("="));
              objc_msgSend(v66, "appendString:", v73);
            }
            objc_msgSend(v66, "appendString:", CFSTR(" "));
          }
        }
        v68 = objc_msgSend(var25, "countByEnumeratingWithState:objects:count:", &v143, v173, 16);
      }
      while (v68);
    }
    v54 = var4;
    v27 = v112;
    v49 = v83;
    if (objc_msgSend(v66, "length"))
    {
      objc_msgSend(v66, "deleteCharactersInRange:", objc_msgSend(v66, "length") - 1, 1);
      v74 = (objc_msgSend(v66, "lengthOfBytesUsingEncoding:", 4) + 7) & 0xFFFFFFFFFFFFFFF8;
      size = counta + v74;
      v75 = (void *)objc_msgSend(v66, "copy");
      v76 = counta;
      counta += v74;
      v54 = var4;
    }
    else
    {
      v76 = 0;
      LODWORD(v74) = 0;
      v75 = 0;
    }

  }
  else
  {
    v76 = 0;
    LODWORD(v74) = 0;
    v75 = 0;
  }
  v77 = objc_msgSend(v131, "supportsGlobalVariableBindingInDylibs");
  v78 = (char *)malloc_type_calloc(counta, 1uLL, 0x1BD9D09DuLL);
  *((_DWORD *)v78 + 1) = var6;
  *((_DWORD *)v78 + 2) = 288;
  *((_DWORD *)v78 + 3) = v106;
  *((_DWORD *)v78 + 4) = v105;
  *((_DWORD *)v78 + 5) = v108;
  *((_DWORD *)v78 + 6) = v104;
  *((_DWORD *)v78 + 12) = HIDWORD(v122);
  *((_DWORD *)v78 + 13) = v122;
  *((_WORD *)v78 + 46) = v100;
  *((_WORD *)v78 + 47) = v102;
  *((_DWORD *)v78 + 36) = v101;
  *((_DWORD *)v78 + 38) = v97;
  *((_DWORD *)v78 + 40) = v96;
  *((_DWORD *)v78 + 43) = v94;
  *((_DWORD *)v78 + 45) = v91;
  *((_DWORD *)v78 + 46) = v90;
  *((_DWORD *)v78 + 50) = v89;
  *((_QWORD *)v78 + 26) = var23;
  *((_DWORD *)v78 + 54) = v93;
  *((_DWORD *)v78 + 55) = v92;
  *((_DWORD *)v78 + 56) = v126;
  v78[228] = v77;
  v78[231] = v170;
  *(_WORD *)(v78 + 229) = v169;
  *(_DWORD *)v78 = v142;
  *((_DWORD *)v78 + 42) = v113;
  *((_DWORD *)v78 + 44) = v114;
  *((_QWORD *)v78 + 5) = v23;
  v79 = v181;
  *(_OWORD *)(v78 + 56) = v180;
  *(_OWORD *)(v78 + 72) = v79;
  v80 = v179;
  *((_OWORD *)v78 + 7) = v178;
  *((_OWORD *)v78 + 8) = v80;
  v81 = v176;
  *(_OWORD *)(v78 + 252) = v177;
  *((_DWORD *)v78 + 7) = v119;
  *((_DWORD *)v78 + 8) = v121;
  *((_DWORD *)v78 + 9) = v120;
  *((_DWORD *)v78 + 22) = v118;
  *((_DWORD *)v78 + 24) = v134;
  *((_DWORD *)v78 + 25) = v127;
  *((_DWORD *)v78 + 26) = v117;
  *((_DWORD *)v78 + 27) = v125;
  *((_DWORD *)v78 + 37) = v128;
  *((_DWORD *)v78 + 39) = v139;
  *((_DWORD *)v78 + 41) = v130;
  *((_DWORD *)v78 + 47) = v115;
  *((_DWORD *)v78 + 48) = v99;
  *((_DWORD *)v78 + 49) = obja;
  *((_DWORD *)v78 + 51) = 0;
  *((_DWORD *)v78 + 58) = var3;
  *(_OWORD *)(v78 + 236) = v81;
  *((_DWORD *)v78 + 67) = active_platform;
  *((_DWORD *)v78 + 68) = v133;
  *((_DWORD *)v78 + 69) = v88;
  *((_DWORD *)v78 + 70) = v76;
  *((_DWORD *)v78 + 71) = v74;
  memcpy(v78 + 288, __src, __n);
  if (object)
    dispatch_release(object);
  if (v164)
    memcpy(&v78[v124 & 0xFFFFFFF8], v164, v119);
  if (v103)
    dispatch_release(v103);
  if (__s)
    memcpy(&v78[v121], __s, v120);
  if ((v142 & 0x800000) != 0)
  {
    strcpy(&v78[v114], v6->var20);
    if (v111)
      MTLHashKey::getHashTools((unint64_t *)v6->var21, &v78[v99], &v78[v115]);
  }
  if (v6->var22)
  {
    memcpy(&v78[obja], buffer_ptr, size_ptr);
    dispatch_release(v85);
  }
  if (v147)
  {
    memcpy(&v78[v133], v148, v147);
    dispatch_release(v84);
  }
  if (v123)
    strcpy(&v78[v118], (const char *)objc_msgSend(v123, "UTF8String"));
  (*(void (**)(_QWORD *, char *, uint64_t, _QWORD))(*v27 + 208))(v27, &v78[v134], v161, v127);
  if (v54)
    objc_msgSend((id)objc_msgSend(v54, "pluginData"), "getBytes:length:", &v78[v117], v125);
  if (v160 != v159)
    memmove(&v78[v128], v159, v160 - (_BYTE *)v159);
  serializeVisibleFunctions(v6->var12, &v159, (uint64_t)v78);
  if (v6->var14)
    objc_msgSend(v49, "getBytes:length:", &v78[v139], objc_msgSend(v49, "length"));
  if (v150 != __p)
    memmove(&v78[v130], __p, v150 - (_BYTE *)__p);
  serializeVisibleFunctions(v6->var13, &__p, (uint64_t)v78);
  if (v86 == 15 && *p_var15)
    strcpy(&v78[v113], (const char *)objc_msgSend(*p_var15, "UTF8String"));
  if (v75)
  {
    strncpy(&v78[v76], (const char *)objc_msgSend(v75, "UTF8String"), v74);

  }
  v6->var10 = dispatch_data_create(v78, size, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
  if (v6->var4 != v54)

  if (v6->var5 != var5)
  var10 = v6->var10;
  if (__p)
  {
    v150 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  return var10;
}

void sub_182678CE8(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_182678EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  *(_QWORD *)(v16 - 72) = &a16;
  std::vector<std::unique_ptr<LoaderContext::Image>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 72));
  _Unwind_Resume(a1);
}

id LoaderContext::finish(LoaderContext *this, uint64_t a2, id *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  if (!*((_BYTE *)this + 72))
    return MEMORY[0x1E0C9AA60];
  if (*((_QWORD *)this + 5))
  {
    v6 = 0;
    v7 = *((_QWORD *)this + 4);
    while (1)
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v6);
      if ((LoaderContext::loadRecursive((uint64_t)this, v8, v7, *(__CFString **)(v8 + 8), a2, a3) & 1) == 0)
        return 0;
      if ((unint64_t)++v6 >= *((_QWORD *)this + 5))
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v9 = (uint64_t *)*((_QWORD *)this + 6);
    v10 = (uint64_t *)*((_QWORD *)this + 7);
    v11 = 126 - 2 * __clz(v10 - v9);
    if (v10 == v9)
      v12 = 0;
    else
      v12 = v11;
    std::__introsort<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*,false>(v9, v10, (uint64_t)&v17, v12, 1);
    v13 = (void *)objc_opt_new();
    v15 = *((_QWORD *)this + 6);
    v14 = *((_QWORD *)this + 7);
    while (v15 != v14)
    {
      if (*(_QWORD *)(*(_QWORD *)v15 + 32))
        objc_msgSend(v13, "addObject:");
      v15 += 8;
    }
  }
  return v13;
}

uint64_t LoaderContext::getImage(LoaderContext *this, NSString *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!a2)
    return 0;
  v2 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  if (v2 == v3)
    return 0;
  while ((objc_msgSend(*(id *)(*(_QWORD *)v2 + 8), "isEqualToString:", a2) & 1) == 0)
  {
    v2 += 8;
    if (v2 == v3)
      return 0;
  }
  return *(_QWORD *)v2;
}

_QWORD *LoaderContext::addImage(LoaderContext *this, MTLLibraryData *a2, NSString *a3)
{
  void *v6;
  void *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  _QWORD v21[5];

  v6 = (void *)(*(uint64_t (**)(MTLLibraryData *))(*(_QWORD *)a2 + 72))(a2);
  v7 = (void *)(*(uint64_t (**)(MTLLibraryData *))(*(_QWORD *)a2 + 64))(a2);
  if (!objc_msgSend(v6, "count") && !objc_msgSend(v7, "count"))
    return 0;
  v8 = (_QWORD *)operator new();
  v9 = *((_QWORD *)this + 8);
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v10 + 1;
  *v8 = v10;
  v8[1] = a3;
  v8[3] = 0;
  v8[4] = 0;
  v8[2] = v6;
  v11 = (_QWORD *)*((_QWORD *)this + 7);
  if ((unint64_t)v11 >= v9)
  {
    v13 = *((_QWORD *)this + 6);
    v14 = ((uint64_t)v11 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v15 = v9 - v13;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v21[4] = (char *)this + 64;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 64, v17);
    else
      v18 = 0;
    v19 = &v18[8 * v14];
    v21[0] = v18;
    v21[1] = v19;
    v21[3] = &v18[8 * v17];
    *(_QWORD *)v19 = v8;
    v21[2] = v19 + 8;
    std::vector<std::unique_ptr<LoaderContext::Image>>::__swap_out_circular_buffer((uint64_t *)this + 6, v21);
    v12 = (_QWORD *)*((_QWORD *)this + 7);
    std::__split_buffer<std::unique_ptr<LoaderContext::Image>>::~__split_buffer((uint64_t)v21);
  }
  else
  {
    *v11 = v8;
    v12 = v11 + 1;
    *((_QWORD *)this + 7) = v12;
  }
  *((_QWORD *)this + 7) = v12;
  *((_BYTE *)this + 72) = 1;
  return v8;
}

void sub_1826791C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<LoaderContext::Image>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MTLCachedLibraryData::importedLibraries(MTLCachedLibraryData *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t MTLCachedLibraryData::importedSymbols(MTLCachedLibraryData *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t LoaderContext::setInsertLibraries(_QWORD *a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(a2);
        LoaderContext::addImage(a1, *(id *)(*((_QWORD *)&v8 + 1) + 8 * v7), objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v7), "libraryPath"));
        ++v7;
      }
      while (v5 != v7);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v5 = result;
    }
    while (result);
  }
  a1[5] = (uint64_t)(a1[7] - a1[6]) >> 3;
  return result;
}

uint64_t MTLLibraryData::libraryPath(MTLLibraryData *this)
{
  return 0;
}

_QWORD *std::vector<MTLBuildBinaryRequest>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTLBuildBinaryRequest>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1826793A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t serializeVisibleFunctions(void *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  result = objc_msgSend(a1, "count");
  if (result)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      v9 = (unsigned int *)(*a2 + 56 * v7);
      v10 = (void *)objc_msgSend(a1, "objectAtIndexedSubscript:", v7);
      v15 = 0;
      v16 = 0;
      v11 = objc_msgSend(v10, "libraryData");
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 200))(v11, objc_msgSend(v10, "bitCodeOffset"), objc_msgSend(v10, "bitCodeFileSize"), &v15, &v16);
      v12 = a3 + v9[2];
      v13 = objc_msgSend(v10, "libraryData");
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v13 + 208))(v13, v12, v15, v9[3]);
      strcpy((char *)(a3 + *v9), (const char *)objc_msgSend((id)objc_msgSend(v10, "name"), "UTF8String"));
      objc_msgSend((id)objc_msgSend(v10, "pluginData"), "getBytes:length:", a3 + v9[4], v9[5]);
      v7 = v8;
      result = objc_msgSend(a1, "count");
    }
    while (result > v8++);
  }
  return result;
}

void _getForcedAIRVersion(_DWORD *a1, _DWORD *a2)
{
  if (_getForcedAIRVersion::onceToken != -1)
    dispatch_once(&_getForcedAIRVersion::onceToken, &__block_literal_global_45);
  *a1 = _getForcedAIRVersion::major;
  *a2 = _getForcedAIRVersion::minor;
}

BOOL MTLLibraryDataWithArchive::parseBitCodeHeader(os_unfair_lock_s *this, unint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  os_unfair_lock_s *v10;
  _BOOL8 v12;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v10 = this + 21;
  os_unfair_lock_lock(this + 21);
  if ((*(unsigned int (**)(os_unfair_lock_s *, unint64_t))(*(_QWORD *)&this->_os_unfair_lock_opaque
                                                                            + 312))(this, a2))
  {
    v12 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t *, uint64_t))(*(_QWORD *)&this->_os_unfair_lock_opaque
                                                                            + 320))(this, &v14, 20) == 20&& (_DWORD)v14 == 186106078;
  }
  else
  {
    v12 = 0;
  }
  os_unfair_lock_unlock(v10);
  *a4 = a2;
  if (!a3)
    a3 = (HIDWORD(v15) + (_DWORD)v15 + 15) & 0xFFFFFFF0;
  *a5 = a3;
  return v12;
}

void sub_182679630(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLLibraryData::copyBitCode(MTLLibraryData *this, void *a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_s *v8;

  v8 = (os_unfair_lock_s *)((char *)this + 84);
  os_unfair_lock_lock((os_unfair_lock_t)this + 21);
  (*(void (**)(MTLLibraryData *, uint64_t))(*(_QWORD *)this + 312))(this, a3);
  (*(void (**)(MTLLibraryData *, void *, uint64_t))(*(_QWORD *)this + 320))(this, a2, a4);
  os_unfair_lock_unlock(v8);
}

void sub_1826796BC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *deserializeCompilerOutputData(_QWORD *result, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v10;
  uint64_t v11;
  size_t v12;
  dispatch_data_t v13;
  char v14;

  v5 = *a3 + 8;
  v6 = *(_QWORD *)((char *)result + *a3);
  *a3 = v5;
  if (v6)
  {
    v10 = result;
    do
    {
      v11 = *(_QWORD *)((char *)v10 + v5);
      *a3 = v5 + 8;
      v14 = v11;
      v12 = *(_QWORD *)((char *)v10 + v5 + 8);
      *a3 = v5 + 16;
      result = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::find<CompilerOutputType>(a4, &v14);
      if (!result || !result[3])
      {
        if (v12)
        {
          v13 = dispatch_data_create((char *)v10 + *a3, v12, 0, 0);
          result = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,NSObject  {objcproto16OS_dispatch_data}*>(a5, &v14, &v14, &v13);
        }
      }
      v5 = *a3 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      *a3 = v5;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t **std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::find<CompilerOutputType>(_QWORD *a1, char *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,NSObject  {objcproto16OS_dispatch_data}*>(uint64_t a1, char *a2, _BYTE *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((unsigned __int8 *)v12 + 16) == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_BYTE *)v12 + 16) = *a3;
  v12[3] = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_182679AAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_182679C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType const&>,std::tuple<>>(uint64_t a1, char *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_182679E94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType const&>,std::tuple<>>(uint64_t a1, char *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_18267A0B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLRangeAllocatorInit(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;

  if (a4 <= 1)
    v6 = 1;
  else
    v6 = a4;
  if (a3 <= 1)
    v7 = 1;
  else
    v7 = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 32) = v7 - 1;
  result = allocElement(a1, 0);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD **)a1;
    *v9 = 0;
    v9[1] = a2;
  }
  return result;
}

uint64_t MTLGetGPUFamilyFromFeatureSet(unint64_t a1)
{
  uint64_t *v1;

  v1 = (uint64_t *)((char *)&unk_1828198B8 + 8 * a1);
  if (a1 >= 0x13)
    v1 = &MTLGPUFamilyNA;
  return *v1;
}

void *getModuleCacheMainFolder(unint64_t *a1)
{
  return copyCacheMainFolder("com.apple.metalfe", a1, (const char *)1);
}

void *copyCacheMainFolder(const char *a1, unint64_t *a2, const char *a3)
{
  size_t v4;
  void *v5;
  char __s[1025];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (getCacheMainFolder(__s, a1, a3))
  {
    v4 = strlen(__s);
    *a2 = v4;
    v5 = malloc_type_malloc(v4 + 1, 0xBBA082FFuLL);
    memcpy(v5, __s, *a2 + 1);
  }
  else
  {
    v5 = 0;
    *a2 = 0;
  }
  return v5;
}

uint64_t MTLCompilerFSCache::openSync(MTLCompilerFSCache *this)
{
  _QWORD *v1;
  uint64_t v2;
  const char *v4;
  size_t v5;
  size_t v6;
  unsigned int v7;
  const char **v8;
  __int16 v9;
  const char *v10;
  const char *v11;
  int v12;
  unsigned __int8 v13;
  uint64_t v14;
  _DWORD *cache_keys;
  unsigned int *v16;
  unint64_t v17;
  unint64_t *v18;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  stat v28;
  char __s[1025];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)((char *)this + 48);
  if (*((_QWORD *)this + 6))
    return 1;
  if (*((_BYTE *)this + 24))
    return 0;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  if (!*((_DWORD *)this + 5))
    goto LABEL_12;
  v4 = (char *)this + 56;
  if (*((char *)this + 79) < 0)
    v4 = *(const char **)v4;
  if (!getCacheMainFolder(__s, "com.apple.metal", (const char *)1)
    || v4
    && (v5 = strlen(__s), strncat(__s, "/", 1024 - v5), v6 = strlen(__s), strncat(__s, v4, 1024 - v6), stat(__s, &v28))
    && mkdir(__s, 0x1FFu))
  {
LABEL_12:
    v2 = 0;
    goto LABEL_30;
  }
  v7 = 0;
  *(_QWORD *)&v28.st_dev = 0;
  v8 = (const char **)((char *)this + 80);
  do
  {
    *((_QWORD *)this + 4) = *((unsigned int *)this + 5);
    *((_DWORD *)this + 10) = 2097153;
    v9 = gShaderCachePermissions;
    if (gShaderCachePermissions)
    {
      *((_WORD *)this + 20) = 2;
      *((_WORD *)this + 22) |= 1u;
      *((_WORD *)this + 23) = v9;
    }
    if (v7)
    {
      free(*(void **)&v28.st_dev);
      v10 = (char *)this + 80;
      if (*((char *)this + 103) < 0)
        v10 = *v8;
      asprintf((char **)&v28, "%s/%s%u", __s, v10, v7);
    }
    else
    {
      v11 = (char *)this + 80;
      if (*((char *)this + 103) < 0)
        v11 = *v8;
      asprintf((char **)&v28, "%s/%s", __s, v11);
    }
    v12 = fscache_open_with_key();
    if (v7 > 0xFE)
      break;
    ++v7;
  }
  while (v12 == 206);
  if (!v12)
  {
    if (*v1)
    {
      v2 = 1;
      goto LABEL_29;
    }
    v20 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v20)
      MTLCompilerFSCache::openSync(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  v2 = 0;
LABEL_29:
  free(*(void **)&v28.st_dev);
LABEL_30:
  if (*v1)
  {
    {
      deleteFSCache(void)::resetFSCache = MTLGetEnvDefault("FS_CACHE_RESET", 0) != 0;
    }
    if (deleteFSCache(void)::resetFSCache)
      fscache_remove_all();
    os_unfair_lock_lock((os_unfair_lock_t)this + 34);
    if (!*((_QWORD *)this + 18))
    {
      v14 = operator new();
      *(_OWORD *)v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_DWORD *)(v14 + 32) = 1065353216;
      *((_QWORD *)this + 18) = v14;
      cache_keys = (_DWORD *)fscache_get_cache_keys();
      v16 = cache_keys;
      if (cache_keys)
      {
        if (*cache_keys)
        {
          v17 = 0;
          v18 = (unint64_t *)(cache_keys + 1);
          do
          {
            std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::__emplace_unique_key_args<HashKey,HashKey const&>(*((_QWORD *)this + 18), v18, v18);
            ++v17;
            v18 += 4;
          }
          while (v17 < *v16);
        }
        free(v16);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 34);
  }
  return v2;
}

void sub_18267BEB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL getCacheMainFolder(char *a1, const char *a2, const char *a3)
{
  size_t v4;
  _BOOL8 result;
  int v6;
  const __CFArray *v8;
  CFIndex Count;
  uint64_t v10;
  const __CFURL *ValueAtIndex;
  const __CFString *v12;
  int v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  __CFBundle *MainBundle;
  CFStringRef Identifier;
  const __CFString *v33;
  size_t v34;
  int v35;
  size_t v36;
  char *v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  stat v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  didPreviouslyGetCacheMainFolder = 1;
  if (gOverridePath)
  {
    v4 = strlen((const char *)gOverridePath) + 1;
    if (v4 <= 0x400)
    {
      memcpy(a1, (const void *)gOverridePath, v4);
      return 1;
    }
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
    if (result)
    {
      getCacheMainFolder();
      return 0;
    }
  }
  else
  {
    v6 = (int)a3;
    *a1 = 0;
    v8 = (const __CFArray *)CFCopySearchPathForDirectoriesInDomains();
    Count = CFArrayGetCount(v8);
    if (!Count)
    {
      CFRelease(v8);
      v14 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
      if (v14)
        getCacheMainFolder(v14, v15, v16, v17, v18, v19, v20, v21);
      return 0;
    }
    v10 = Count;
    ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v8, Count - 1);
    if (!ValueAtIndex)
    {
      v22 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
      if (v22)
        getCacheMainFolder(v22, v23, v24, v25, v26, v27, v28, v29);
      CFRelease(v8);
      return 0;
    }
    v12 = CFURLCopyFileSystemPath(ValueAtIndex, kCFURLPOSIXPathStyle);
    v13 = strlen(a1);
    CFStringGetCString(v12, &a1[v13], 1024 - v13, 0x8000100u);
    CFRelease(v12);
    CFRelease(v8);
    if (stat(a1, &v43))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        getCacheMainFolder(v10, a1);
      return 0;
    }
    v30 = strlen(a1);
    MainBundle = CFBundleGetMainBundle();
    if (v6)
    {
      if (MainBundle)
      {
        Identifier = CFBundleGetIdentifier(MainBundle);
        if (Identifier)
        {
          v33 = Identifier;
          v34 = strlen(a1);
          if (v34 && a1[v34] != 47)
            *(_WORD *)&a1[v34] = 47;
          v35 = strlen(a1);
          CFStringGetCString(v33, &a1[v35], 1024 - v35, 0x8000100u);
        }
      }
    }
    if (a2)
    {
      v36 = strlen(a1);
      if (v36 && a1[v36] != 47)
        *(_WORD *)&a1[v36++] = 47;
      strncat(a1, a2, 1024 - v36);
    }
    if (stat(a1, &v43))
    {
      v37 = &a1[v30];
      v38 = strchr(v37, 47);
      if (v38)
      {
        while (1)
        {
          v39 = v38;
          *v38 = 0;
          if (mkdir(a1, 0x1FFu))
          {
            if (*__error() != 17)
              break;
          }
          *v39 = 47;
          v38 = strchr(v39 + 1, 47);
          v37 = v39;
          if (!v38)
            goto LABEL_36;
        }
        v41 = *v37;
        *v39 = 47;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        {
          if (v41 == 47)
            ++v37;
          v42 = *__error();
          *(_DWORD *)buf = 67109890;
          v45 = v42;
          v46 = 2080;
          v47 = a1;
          v48 = 1040;
          v49 = (_DWORD)v39 - (_DWORD)v37;
          v50 = 2080;
          v51 = v37;
          _os_log_fault_impl(&dword_182636000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Failed to get cache main folder: mkdir failed to create cache path (errno = %u, path = %s, attempting to create intermediate subdir '%.*s', possible sandbox issue?)", buf, 0x22u);
        }
        return 0;
      }
LABEL_36:
      if (mkdir(a1, 0x1FFu) && *__error() != 17)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
          getCacheMainFolder();
        return 0;
      }
    }
    v40 = stat(a1, &v43);
    result = 1;
    if (!v40 && gShaderCachePermissions)
    {
      chmod(a1, 0x1FFu);
      return 1;
    }
  }
  return result;
}

id MTLCreateSystemDefaultDevice(void)
{
  void *v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  MTLDeviceArrayInitialize();
  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__6;
  v7 = __Block_byref_object_dispose__6;
  v8 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MTLCreateSystemDefaultDevice_block_invoke;
  block[3] = &unk_1E0FE3468;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)_deviceArrayQueue, block);
  v0 = (void *)v4[5];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void *MTLPipelineDescriptions::newRenderPipelineDescriptor(MTLPipelineDescriptions *this, char *a2, _MTLPipelineCache *a3, NSError **a4)
{
  char *v8;
  _QWORD *v9;
  NSObject *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSError *v20;
  __int128 v22;
  void (**block)(SpecialPipelineDescriptorDeserializer *__hidden);
  uint64_t v24;
  void (*v25)(uint64_t);
  void *v26;
  MTLPipelineDescriptions *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;

  v8 = (char *)this + 26;
  v9 = (_QWORD *)((char *)this + 112);
  v10 = *((_QWORD *)this + 2);
  block = (void (**)(SpecialPipelineDescriptorDeserializer *__hidden))MEMORY[0x1E0C809B0];
  v24 = 3221225472;
  v25 = ___ZNK23MTLPipelineDescriptions24initializeDescriptorHashEPbRNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN13MTLSerializer29SerializedCompactPropertyListENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SA_EEEEEEjj_block_invoke;
  v26 = &__block_descriptor_64_e5_v8__0l;
  v27 = this;
  v28 = v8;
  v30 = 0x700000003;
  v29 = v9;
  dispatch_sync(v10, &block);
  std::string::basic_string[abi:ne180100]<0>(&block, a2);
  v11 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(v9, (unsigned __int8 *)&block);
  v12 = v11;
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    if (v11)
      goto LABEL_3;
LABEL_6:
    v18 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("render pipeline %s not found in pipelineLibrary."), a2);
    if (!a4)
      return 0;
    v19 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v18, *MEMORY[0x1E0CB2D50]);
    v20 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 3, v19);
    v17 = 0;
    *a4 = v20;
    return v17;
  }
  operator delete(block);
  if (!v12)
    goto LABEL_6;
LABEL_3:
  v22 = *(_OWORD *)(v12 + 40);
  block = &off_1E0FE1588;
  v24 = (uint64_t)this;
  v25 = (void (*)(uint64_t))a3;
  v17 = MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newRenderPipelineDescriptor((uint64_t)&block, (unsigned __int8 **)&v22);
  if (!v17)
    MTLReportFailure(0, "newRenderPipelineDescriptor", 568, (uint64_t)CFSTR("invalid render pipeline descriptor %s in pipeline library"), v13, v14, v15, v16, (uint64_t)a2);
  return v17;
}

void sub_18267C9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newRenderPipelineDescriptor(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t PropertyAsObject;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unsigned __int8 *v9;
  void *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  void *v16;
  _DWORD *v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned __int8 *Object;
  unsigned __int8 *v22;
  _DWORD *v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  _DWORD *v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  double v35;
  size_t v36;
  _DWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  size_t v46;
  uint64_t v47;

  if (!*a2)
    return 0;
  v4 = (void *)objc_opt_new();
  MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v40, a2);
  if (v43 < v42)
  {
    while (1)
    {
      switch(v45)
      {
        case 0:
          PropertyAsObject = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v40);
          v7 = v6;
          v8 = objc_alloc(MEMORY[0x1E0CB3940]);
          if (!PropertyAsObject)
            goto LABEL_106;
          if (!v7)
            goto LABEL_114;
          v9 = (unsigned __int8 *)PropertyAsObject;
          break;
        case 1:
          v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v40);
          objc_msgSend(v4, "setVertexFunction:", v11);
          goto LABEL_107;
        case 2:
          v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v40);
          objc_msgSend(v4, "setFragmentFunction:", v11);
          goto LABEL_107;
        case 3:
          v12 = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v40);
          if (v12)
          {
            v14 = (unsigned __int8 *)v12;
            v15 = v13;
            v16 = (void *)objc_msgSend(v4, "vertexDescriptor");
            MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::deserializeVertexDescriptor((uint64_t)v16, v16, v14, v15);
          }
          else
          {
            objc_msgSend(v4, "setVertexDescriptor:", 0);
          }
          goto LABEL_108;
        case 4:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setRasterSampleCount:", v38);
          goto LABEL_108;
        case 5:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setAlphaToCoverageEnabled:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 6:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setAlphaToOneEnabled:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 7:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setRasterizationEnabled:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 8:
          v17 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v40);
          v38 = v17;
          v39 = v18;
          if (!v17)
            goto LABEL_108;
          if (v18 <= 3)
            goto LABEL_114;
          v19 = *v17;
          if (*v17)
          {
            v20 = 0;
            do
            {
              Object = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v38, v20);
              if (Object)
                MTLPipelineLibrarySerializer::deserializeColorAttachments((void *)objc_msgSend(v4, "colorAttachments", v38, v39), Object, v22);
              ++v20;
            }
            while (v19 != v20);
          }
          goto LABEL_108;
        case 9:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setDepthAttachmentPixelFormat:", v38);
          goto LABEL_108;
        case 10:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setStencilAttachmentPixelFormat:", v38);
          goto LABEL_108;
        case 11:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setInputPrimitiveTopology:", v38);
          goto LABEL_108;
        case 12:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setTessellationPartitionMode:", v38);
          goto LABEL_108;
        case 13:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setMaxTessellationFactor:", v38);
          goto LABEL_108;
        case 14:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setTessellationFactorScaleEnabled:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 15:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setTessellationFactorFormat:", v38);
          goto LABEL_108;
        case 16:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setTessellationControlPointIndexType:", v38);
          goto LABEL_108;
        case 17:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setTessellationFactorStepFunction:", v38);
          goto LABEL_108;
        case 18:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setTessellationOutputWindingOrder:", v38);
          goto LABEL_108;
        case 21:
          v23 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v40);
          v38 = v23;
          v39 = v24;
          if (!v23)
            goto LABEL_108;
          if (v24 <= 3)
            goto LABEL_114;
          v25 = *v23;
          if (*v23)
          {
            v26 = 0;
            do
            {
              v27 = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v38, v26);
              if (v27)
                MTLPipelineLibrarySerializer::deserializeBuffers((void *)objc_msgSend(v4, "vertexBuffers", v38, v39), v27, v28);
              ++v26;
            }
            while (v25 != v26);
          }
          goto LABEL_108;
        case 22:
          v29 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v40);
          v38 = v29;
          v39 = v30;
          if (!v29)
            goto LABEL_108;
          if (v30 <= 3)
            goto LABEL_114;
          v31 = *v29;
          if (*v29)
          {
            v32 = 0;
            do
            {
              v33 = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v38, v32);
              if (v33)
                MTLPipelineLibrarySerializer::deserializeBuffers((void *)objc_msgSend(v4, "fragmentBuffers", v38, v39), v33, v34);
              ++v32;
            }
            while (v31 != v32);
          }
          goto LABEL_108;
        case 24:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setVertexAmplificationMode:", v38);
          goto LABEL_108;
        case 25:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setSupportIndirectCommandBuffers:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 26:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setMaxVertexAmplificationCount:", v38);
          goto LABEL_108;
        case 27:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          LODWORD(v35) = (_DWORD)v38;
          objc_msgSend(v4, "setSampleCoverage:", v35);
          goto LABEL_108;
        case 28:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setSampleMask:", v38);
          goto LABEL_108;
        case 30:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setTextureWriteRoundingMode:", v38);
          goto LABEL_108;
        case 45:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setAlphaTestEnabled:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 46:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setAlphaTestFunction:", v38);
          goto LABEL_108;
        case 47:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setLogicOperationEnabled:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 48:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setClipDistanceEnableMask:", v38);
          goto LABEL_108;
        case 49:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setPointSmoothEnabled:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 50:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setPointCoordLowerLeft:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 51:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setPointSizeOutputVS:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 52:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setTwoSideEnabled:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 53:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setVertexDepthCompareClampMask:", v38);
          goto LABEL_108;
        case 54:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setFragmentDepthCompareClampMask:", v38);
          goto LABEL_108;
        case 55:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setLogicOperation:", v38);
          goto LABEL_108;
        case 56:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setDepthStencilWriteDisabled:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 57:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setNeedsCustomBorderColorSamplers:", (_DWORD)v38 != 0);
          goto LABEL_108;
        case 58:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41)
            goto LABEL_114;
          memcpy(&v38, (const void *)(v40 + v47), v46);
          objc_msgSend(v4, "setExplicitVisibilityGroupID:", v38);
          goto LABEL_108;
        default:
          goto LABEL_108;
      }
      while (*v9++)
      {
        if (!--v7)
          goto LABEL_114;
      }
LABEL_106:
      v11 = (void *)objc_msgSend(v8, "initWithUTF8String:", PropertyAsObject, v38);
      objc_msgSend(v4, "setLabel:", v11);
LABEL_107:

LABEL_108:
      if (++v43 >= v42)
        break;
      if (v44 + 2 > v41)
LABEL_114:
        abort();
      v36 = *(unsigned __int8 *)(v40 + v44 + 1);
      v45 = *(unsigned __int8 *)(v40 + v44);
      v46 = v36;
      v47 = v44 + 2;
      v44 += 2 + v36;
    }
  }
  return v4;
}

uint64_t MTLPipelineDescriptions::deserializeFunction(MTLPipelineDescriptions *a1, uint64_t a2, uint64_t a3)
{
  int Small;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *Object;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  char *v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  unsigned __int8 *v41;
  uint64_t v43;
  uint64_t PropertyAsObject;
  uint64_t v45;
  uint64_t ElementCount;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  size_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v82;
  unsigned __int8 *Value;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 *v101;
  uint64_t LibraryByIndex;
  _QWORD v104[2];
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  _QWORD v112[2];
  _QWORD v113[2];
  char *block;
  unint64_t v115;
  void (*v116)(uint64_t);
  void (*v117)(uint64_t);
  MTLPipelineDescriptions *v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned __int8 *v122[2];
  _QWORD v123[2];
  unsigned int __dst;
  _BYTE v125[16];
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v113[0] = a2;
  v113[1] = a3;
  if (!a2)
    return 0;
  Small = MTLSerializer::PropertyList::getSmallValue<unsigned int>((MTLSerializer::SerializedObjectList *)v113, 1u, 0);
  Object = (char *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v113, 0);
  v12 = v11;
  v112[0] = Object;
  v112[1] = v11;
  if (!Object)
    MTLReportFailure(0, "deserializeFunction", 443, (uint64_t)CFSTR("Function with no name in pipeline library"), v6, v7, v8, v9, v99);
  if (!Small)
  {
    v23 = *((_QWORD *)a1 + 2);
    block = (char *)MEMORY[0x1E0C809B0];
    v115 = 3221225472;
    v116 = ___ZNK23MTLPipelineDescriptions24initializeDescriptorHashEPbRNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN13MTLSerializer29SerializedCompactPropertyListENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SA_EEEEEEjj_block_invoke;
    v117 = (void (*)(uint64_t))&__block_descriptor_64_e5_v8__0l;
    v118 = a1;
    v119 = (_QWORD *)((char *)a1 + 24);
    v121 = 0x500000001;
    v120 = (_QWORD *)((char *)a1 + 32);
    dispatch_sync(v23, &block);
    if (Object)
    {
      if (!v12)
LABEL_19:
        abort();
      v24 = Object;
      v25 = v12;
      while (*v24++)
      {
        if (!--v25)
          goto LABEL_19;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&block, Object);
    v101 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((_QWORD *)a1 + 4, (unsigned __int8 *)&block);
    if (SHIBYTE(v116) < 0)
      operator delete(block);
    if (!v101)
    {
      if (Object)
      {
        if (!v12)
LABEL_72:
          abort();
        v71 = Object;
        while (*v71++)
        {
          if (!--v12)
            goto LABEL_72;
        }
      }
      MTLReportFailure(0, "deserializeFunction", 457, (uint64_t)CFSTR("Specialized function %s not found in pipelineLibrary."), v27, v28, v29, v30, (uint64_t)Object);
      v22 = 0;
LABEL_82:
      if (v101)
        return v22;
      return 0;
    }
    v111 = *(_OWORD *)(v101 + 40);
    MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)v104, (unsigned __int8 **)&v111);
    if (v106 >= v105)
    {
      v31 = 0;
      LibraryByIndex = 0;
      goto LABEL_75;
    }
    v31 = 0;
    LibraryByIndex = 0;
    v100 = 0;
    while (v108 != 1)
    {
      if (!v108)
      {
        block = (char *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)v104);
        v115 = v32;
        if (block)
        {
          v38 = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&block, 0);
          if (v38)
          {
            v39 = v33;
            v40 = objc_alloc(MEMORY[0x1E0CB3940]);
            if (!v39)
LABEL_92:
              abort();
            v41 = (unsigned __int8 *)v38;
            while (*v41++)
            {
              if (!--v39)
                goto LABEL_92;
            }
          }
          else
          {
            MTLReportFailure(0, "deserializeFunction", 479, (uint64_t)CFSTR("Base function with no name in pipeline library"), v34, v35, v36, v37, v99);
            v40 = objc_alloc(MEMORY[0x1E0CB3940]);
          }
          v100 = objc_msgSend(v40, "initWithUTF8String:", v38);
          v63 = MTLSerializer::PropertyList::getSmallValue<unsigned int>((MTLSerializer::SerializedObjectList *)&block, 1u, 0);
          LibraryByIndex = MTLPipelineDescriptions::getLibraryByIndex(a1, v63 - 1, v64, v65, v66, v67, v68, v69);
        }
      }
LABEL_64:
      if (++v106 >= v105)
      {
        v78 = (void *)v100;
        if (v100)
        {
LABEL_77:
          v79 = (void *)LibraryByIndex;
          if (LibraryByIndex)
          {
            if (v31)
            {
LABEL_79:
              block = 0;
              v80 = v78;
              v22 = objc_msgSend(v79, "newFunctionWithName:constantValues:functionCache:error:");
              if (!v22)
              {
                v94 = objc_msgSend(block, "description");
                MTLReportFailure(0, "deserializeFunction", 519, (uint64_t)CFSTR("%@"), v95, v96, v97, v98, v94);
              }

              goto LABEL_82;
            }
          }
          else
          {
            v82 = v78;
            Value = MTLSerializer::SerializedString::getValue((MTLSerializer::SerializedString *)v112);
            MTLReportFailure(0, "deserializeFunction", 511, (uint64_t)CFSTR("Invalid library index in pipeline library for function %s"), v84, v85, v86, v87, (uint64_t)Value);
            v78 = v82;
            v79 = 0;
            if (v31)
              goto LABEL_79;
          }
          v88 = v78;
          v89 = MTLSerializer::SerializedString::getValue((MTLSerializer::SerializedString *)v112);
          MTLReportFailure(0, "deserializeFunction", 513, (uint64_t)CFSTR("No constant values specified for specialized function %s"), v90, v91, v92, v93, (uint64_t)v89);
          v78 = v88;
          v79 = (void *)LibraryByIndex;
          goto LABEL_79;
        }
LABEL_75:
        v73 = MTLSerializer::SerializedString::getValue((MTLSerializer::SerializedString *)v112);
        MTLReportFailure(0, "deserializeFunction", 509, (uint64_t)CFSTR("Specialized Function %s has no 'base function' in pipeline library"), v74, v75, v76, v77, (uint64_t)v73);
        v78 = 0;
        goto LABEL_77;
      }
      if ((unint64_t)(v107 + 2) > v104[1])
        abort();
      v70 = *(unsigned __int8 *)(v104[0] + v107 + 1);
      v108 = *(unsigned __int8 *)(v104[0] + v107);
      v109 = v70;
      v110 = v107 + 2;
      v107 += 2 + v70;
    }
    PropertyAsObject = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)v104);
    if (!PropertyAsObject)
      goto LABEL_64;
    v45 = v43;
    v31 = (void *)objc_opt_new();
    v123[0] = PropertyAsObject;
    v123[1] = v45;
    ElementCount = MTLSerializer::SerializedObjectList::getElementCount((MTLSerializer::SerializedObjectList *)v123);
    if (!ElementCount)
      goto LABEL_64;
    v47 = 0;
    while (1)
    {
      v122[0] = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v123, v47);
      v122[1] = v48;
      MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&block, v122);
      if ((unint64_t)v117 >= (unint64_t)v116)
      {
        v53 = 0;
        v54 = 0;
      }
      else
      {
        v53 = 0;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = (int)v119;
        while (1)
        {
          switch(v57)
          {
            case 0:
              __dst = 0;
              if ((unint64_t)v120 + v121 > v115)
                abort();
              memcpy(&__dst, &block[v121], (size_t)v120);
              v53 = __dst;
              break;
            case 1:
              v56 = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&block);
              v55 = v58;
              break;
            case 2:
              __dst = 0;
              if ((unint64_t)v120 + v121 > v115)
                abort();
              memcpy(&__dst, &block[v121], (size_t)v120);
              v54 = __dst;
              break;
            case 3:
              _MTLConstantDataSize(v54);
              if ((unint64_t)v120 + v121 > v115)
                abort();
              memcpy(v125, &block[v121], (size_t)v120);
              break;
            default:
              MTLReportFailure(0, "deserializeFunctionConstants", 414, (uint64_t)CFSTR("Unknown property in descriptor"), v49, v50, v51, v52, v99);
              break;
          }
          v117 = (void (*)(uint64_t))((char *)v117 + 1);
          if ((unint64_t)v117 >= (unint64_t)v116)
            break;
          if ((unint64_t)v118 + 2 > v115)
            abort();
          v57 = *((unsigned __int8 *)v118 + (_QWORD)block);
          v59 = *((unsigned __int8 *)v118 + (_QWORD)block + 1);
          LODWORD(v119) = v57;
          v120 = (_QWORD *)v59;
          v121 = (uint64_t)v118 + 2;
          v118 = (MTLPipelineDescriptions *)((char *)v118 + v59 + 2);
        }
        if (v56)
        {
          v60 = objc_alloc(MEMORY[0x1E0CB3940]);
          if (!v55)
LABEL_86:
            abort();
          v61 = 0;
          while (*(_BYTE *)(v56 + v61))
          {
            if (v55 == ++v61)
              goto LABEL_86;
          }
          v62 = (void *)objc_msgSend(v60, "initWithUTF8String:", v56);
          objc_msgSend(v31, "setConstantValue:type:withName:", v125, v54, v62);

          goto LABEL_60;
        }
      }
      objc_msgSend(v31, "setConstantValue:type:atIndex:", v125, v54, v53);
LABEL_60:
      if (++v47 == ElementCount)
        goto LABEL_64;
    }
  }
  v13 = (void *)MTLPipelineDescriptions::getLibraryByIndex(a1, Small - 1, v4, v5, v6, v7, v8, v9);
  v14 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (Object)
  {
    if (!v12)
LABEL_10:
      abort();
    v15 = Object;
    while (*v15++)
    {
      if (!--v12)
        goto LABEL_10;
    }
  }
  v17 = (void *)objc_msgSend(v14, "initWithUTF8String:", Object);
  v22 = objc_msgSend(v13, "newFunctionWithName:", v17);
  if (!v22)
    MTLReportFailure(0, "deserializeFunction", 531, (uint64_t)CFSTR("Function %@ could not be found in library"), v18, v19, v20, v21, (uint64_t)v17);

  return v22;
}

void sub_18267DDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineDescriptions::getLibraryByIndex(MTLPipelineDescriptions *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15[6];

  v9 = a2;
  v10 = *((_QWORD *)this + 25);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 26) - v10) >> 5))
  {
    MTLReportFailure(0, "getLibraryByIndex", 273, (uint64_t)CFSTR("Invalid library index in pipeline library file"), a5, a6, a7, a8, v15[0]);
    v10 = *((_QWORD *)this + 25);
  }
  v11 = v10 + 32 * v9;
  v13 = v11 + 24;
  result = *(_QWORD *)(v11 + 24);
  if (!result)
  {
    v14 = *((_QWORD *)this + 2);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = (uint64_t)___ZNK23MTLPipelineDescriptions17getLibraryByIndexEj_block_invoke;
    v15[3] = (uint64_t)&__block_descriptor_48_e5_v8__0l;
    v15[4] = (uint64_t)this;
    v15[5] = v11;
    dispatch_sync(v14, v15);
    return *(_QWORD *)v13;
  }
  return result;
}

uint64_t SpecialPipelineDescriptorDeserializer::newFunctionWithFunctionProperty(SpecialPipelineDescriptorDeserializer *this, MTLSerializer::SerializedCompactPropertyList::Iterator *a2)
{
  MTLPipelineDescriptions *v2;
  uint64_t PropertyAsObject;
  uint64_t v4;

  v2 = (MTLPipelineDescriptions *)*((_QWORD *)this + 1);
  PropertyAsObject = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject(a2);
  return MTLPipelineDescriptions::deserializeFunction(v2, PropertyAsObject, v4);
}

uint64_t MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject(MTLSerializer::SerializedCompactPropertyList::Iterator *this)
{
  size_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int __dst;

  __dst = 0;
  v1 = *((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)this + 1);
  if (v1 + v2 > v3)
    goto LABEL_7;
  v4 = *(_QWORD *)this;
  memcpy(&__dst, (const void *)(*(_QWORD *)this + v2), v1);
  if (__dst)
  {
    if (v3 >= __dst)
      return v4 + __dst;
LABEL_7:
    abort();
  }
  return 0;
}

void sub_18267E0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFA4](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_18267E1F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFA4](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[16] = **a4;
    *((_BYTE *)v11 + 40) = 0;
    *((_QWORD *)v11 + 6) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_MTLPipelineLibrary *MTLPipelineLibraryBuilder::newLibraryWithFile(uint64_t *a1, _MTLPipelineLibrary *a2, void *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  stat *v36;
  void *v37;
  _MTLPipelineCache *v38;
  void *v39;
  _MTLPipelineCache *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  const __CFString *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  MTLPipelineDescriptions *v55[2];
  stat v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (a4)
    *a4 = 0;
  if (a3)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (a2)
        goto LABEL_6;
LABEL_62:
      MTLReportFailure(0, "newLibraryWithFile", 766, (uint64_t)CFSTR("device must not be nil."), a5, a6, a7, a8, v53);
      return a2;
    }
    v50 = CFSTR("filePath is not a NSString.");
    v51 = 1;
    v52 = 764;
  }
  else
  {
    v50 = CFSTR("filePath must not be nil.");
    v51 = 0;
    v52 = 761;
  }
  MTLReportFailure(v51, "newLibraryWithFile", v52, (uint64_t)v50, a5, a6, a7, a8, v53);
  if (!a2)
    goto LABEL_62;
LABEL_6:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    MTLReportFailure(1uLL, "newLibraryWithFile", 771, (uint64_t)CFSTR("device is not a MTLDevice."), v12, v13, v14, v15, v53);
  v16 = objc_alloc_init(MEMORY[0x1E0CB3620]);
  if ((objc_msgSend(v16, "fileExistsAtPath:", a3) & 1) == 0)
  {
    if (!a4)
      return 0;
    v23 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("pipeline library not found"), *MEMORY[0x1E0CB2D50]);
    a2 = 0;
    *a4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 6, v23);
    return a2;
  }
  v17 = (const char *)objc_msgSend(a3, "UTF8String");
  v55[0] = 0;
  v55[1] = 0;
  *(_QWORD *)&v56.st_dev = 0;
  asprintf((char **)&v56, "%s/pipelines.desc", v17);
  v18 = *(char **)&v56.st_dev;
  if (stat(*(const char **)&v56.st_dev, &v56))
  {
    v19 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("file not found: %s"), v18);
    if (a4)
    {
      v20 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v19, *MEMORY[0x1E0CB2D50]);
      v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 6, v20);
LABEL_12:
      v22 = 0;
      *a4 = v21;
      goto LABEL_35;
    }
  }
  else
  {
    v24 = open(v18, 0);
    if (v24 < 0)
    {
      v32 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("could not open file: %s"), v18);
      if (a4)
      {
        v33 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v32, *MEMORY[0x1E0CB2D50]);
        v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v33);
        goto LABEL_12;
      }
    }
    else
    {
      std::allocate_shared[abi:ne180100]<MTLPipelineDescriptions,std::allocator<MTLPipelineDescriptions>,objc_object  {objcproto9MTLDevice}*&,void>(a1, &v54);
      v25 = v54;
      v54 = 0uLL;
      v26 = (std::__shared_weak_count *)v55[1];
      *(_OWORD *)v55 = v25;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
      if (*((_QWORD *)&v54 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (MTLPipelineDescriptions::initWithFileDescriptor(v55[0], v24, v17))
      {
        close(v24);
        v22 = 1;
        goto LABEL_35;
      }
      v34 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("could not open file: %s"), v18);
      if (a4)
      {
        v35 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v34, *MEMORY[0x1E0CB2D50]);
        *a4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v35);
      }
      close(v24);
    }
  }
  v22 = 0;
LABEL_35:
  if (v18)
    free(v18);
  if (!v22)
    goto LABEL_52;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v36 = (stat *)-[_MTLPipelineLibrary targetDeviceInfo](a2, "targetDeviceInfo");
  }
  else
  {
    *(_QWORD *)&v56.st_dev = 0;
    LODWORD(v56.st_ino) = 0;
    *(_QWORD *)&v56.st_uid = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)*a1, "name"), "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_1E0FE5DC8), "UTF8String");
    v36 = &v56;
  }
  v37 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%s/pipelines.%s"), v17, *(_QWORD *)&v36->st_uid);
  v38 = -[_MTLPipelineCache initWithFilePath:readOnly:deviceInfo:]([_MTLPipelineCache alloc], "initWithFilePath:readOnly:deviceInfo:", v37, 1, v36);
  if (!v38)
  {
    v42 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Could not open pipeline cache file: %s"), objc_msgSend(v37, "UTF8String"));
    if (a4)
    {
      v43 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v42, *MEMORY[0x1E0CB2D50]);
      *a4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 6, v43);
    }

    goto LABEL_52;
  }

  *(_QWORD *)&v56.st_dev = 0;
  LODWORD(v56.st_ino) = 0;
  *(_QWORD *)&v56.st_uid = "";
  v39 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%s/functions"), v17);
  if ((objc_msgSend(v16, "fileExistsAtPath:", v39) & 1) == 0)
  {

    v39 = 0;
  }
  v40 = -[_MTLPipelineCache initWithFilePath:readOnly:deviceInfo:]([_MTLPipelineCache alloc], "initWithFilePath:readOnly:deviceInfo:", v39, 1, &v56);
  if (!v40)
  {
    v44 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Could not open function cache file: %s"), objc_msgSend(v39, "UTF8String"));
    if (a4)
    {
      v45 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v44, *MEMORY[0x1E0CB2D50]);
      *a4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 6, v45);
    }

LABEL_52:
    a2 = 0;
    goto LABEL_53;
  }

  v41 = (_QWORD *)operator new();
  PipelineLibraryData::PipelineLibraryData(v41, v55, v38, v40);

  a2 = -[_MTLPipelineLibrary initWithDevice:pipelineLibraryData:]([_MTLPipelineLibrary alloc], "initWithDevice:pipelineLibraryData:", a2, v41);
LABEL_53:
  v46 = (std::__shared_weak_count *)v55[1];
  if (v55[1])
  {
    v47 = (unint64_t *)((char *)v55[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  return a2;
}

void sub_18267EC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x186DABFBC](v5, 0xA0C40D4F6A234);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_MTLLibrary *MTLLibraryBuilder::newLibraryWithFile(_MTLDevice **a1, _MTLDevice *a2, void *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v12;
  char *v13;
  uint64_t v14;
  CC_LONG v15;
  _MTLLibrary *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  const __CFString *v21;
  unint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  unint64_t v25;
  uint64_t v26;
  CC_SHA256_CTX v27;
  _QWORD v28[9];
  __int128 v29;
  __int128 v30;
  unsigned __int8 md[16];
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a4)
    *a4 = 0;
  if (!a3)
  {
    v21 = CFSTR("filepath must not be nil.");
    v22 = 0;
    v23 = 6166;
    goto LABEL_22;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v21 = CFSTR("filepath is not a NSString.");
    v22 = 1;
    v23 = 6169;
LABEL_22:
    MTLReportFailure(v22, "newLibraryWithFile", v23, (uint64_t)v21, a5, a6, a7, a8, *(uint64_t *)v27.count);
    if (a2)
      goto LABEL_6;
LABEL_23:
    v24 = CFSTR("device must not be nil.");
    v25 = 0;
    v26 = 6173;
    goto LABEL_25;
  }
  if (!a2)
    goto LABEL_23;
LABEL_6:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    goto LABEL_7;
  v24 = CFSTR("device is not a MTLDevice.");
  v25 = 1;
  v26 = 6176;
LABEL_25:
  MTLReportFailure(v25, "newLibraryWithFile", v26, (uint64_t)v24, a5, a6, a7, a8, *(uint64_t *)v27.count);
LABEL_7:
  if ((objc_msgSend(objc_alloc_init(MEMORY[0x1E0CB3620]), "fileExistsAtPath:", a3) & 1) != 0)
  {
    v12 = objc_msgSend(a3, "lengthOfBytesUsingEncoding:", 4) + 1;
    v13 = (char *)malloc_type_malloc(v12, 0x1D079C43uLL);
    if ((objc_msgSend(a3, "getCString:maxLength:encoding:", v13, v12, 4) & 1) != 0)
    {
      v14 = _MTLGetLibrariesCache(a2);
      v15 = strlen(v13);
      *(_OWORD *)md = 0u;
      v32 = 0u;
      CC_SHA256_Init(&v27);
      CC_SHA256_Update(&v27, v13, v15);
      CC_SHA256_Final(md, &v27);
      v28[1] = 3221225472;
      v29 = *(_OWORD *)md;
      v28[0] = MEMORY[0x1E0C809B0];
      v28[2] = ___ZN17MTLLibraryBuilder18newLibraryWithFileEPU19objcproto9MTLDevice11objc_objectP8NSStringPP7NSError_block_invoke;
      v28[3] = &unk_1E0FE4260;
      v28[6] = a1;
      v28[7] = v13;
      v28[8] = v14;
      v30 = v32;
      v28[4] = a3;
      v28[5] = a2;
      v16 = MTLLibraryBuilder::newLibraryWithArchive(a1, (__int128 *)md, a4, (uint64_t)v28);
      if (!v13)
        return v16;
      goto LABEL_18;
    }
    if (a4)
    {
      v18 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("error while opening the library"), *MEMORY[0x1E0CB2D50]);
      v19 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v18);
      v16 = 0;
      *a4 = v19;
      if (!v13)
        return v16;
      goto LABEL_18;
    }
    v16 = 0;
    if (v13)
LABEL_18:
      free(v13);
  }
  else if (a4)
  {
    v17 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("library not found"), *MEMORY[0x1E0CB2D50]);
    v16 = 0;
    *a4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 6, v17);
  }
  else
  {
    return 0;
  }
  return v16;
}

void sub_18267F034(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineDataCache::open(MTLPipelineDataCache *this)
{
  os_unfair_lock_s *v2;
  const char *v3;
  FILE *v4;
  int v5;
  const char *v6;
  int v7;
  int v8;
  NSObject *v9;
  int *v10;
  int v11;
  off_t st_size;
  NSObject *v14;
  int *v15;
  stat v16;
  _BYTE v17[8];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)((char *)this + 8);
  os_unfair_lock_lock((os_unfair_lock_t)this + 2);
  if (*((_BYTE *)this + 48))
  {
    v3 = (char *)this + 24;
    if (*((char *)this + 47) < 0)
      v3 = *(const char **)v3;
    asprintf((char **)this + 7, "%s", v3);
    v4 = fopen(*((const char **)this + 7), "wb");
    if (!v4)
    {
      v5 = 0;
      goto LABEL_16;
    }
    fclose(v4);
LABEL_6:
    v5 = 1;
LABEL_16:
    *((_BYTE *)this + 49) = v5;
    v11 = 1;
    goto LABEL_17;
  }
  v6 = (char *)this + 24;
  if (*((char *)this + 47) < 0)
    v6 = *(const char **)v6;
  v7 = open(v6, 0);
  v8 = v7;
  if ((v7 & 0x80000000) == 0)
  {
    if (fstat(v7, &v16))
    {
      v9 = MTLPipelineLibraryDebugLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = __error();
        MTLPipelineDataCache::open(v10, (uint64_t)v17, v9);
      }
      close(v8);
    }
    else
    {
      st_size = v16.st_size;
      *((_QWORD *)this + 18) = v16.st_size;
      *((_QWORD *)this + 17) = mmap(0, st_size, 1, 1, v8, 0);
      close(v8);
      if (*((_QWORD *)this + 17) == -1)
      {
        v14 = MTLPipelineLibraryDebugLog();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v15 = __error();
          MTLPipelineDataCache::open(v15, (uint64_t)v17, v14);
        }
      }
      else if (MTLPipelineDataCache::parseDataFileHeader(this))
      {
        goto LABEL_6;
      }
    }
  }
  v5 = 0;
  v11 = 0;
LABEL_17:
  os_unfair_lock_unlock(v2);
  return v5 & v11;
}

void sub_18267F1F8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerCache::createPipelineDataCache(char a1, char *a2, _QWORD *a3)
{
  uint64_t v6;

  v6 = operator new();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E0FE0868;
  *(_QWORD *)(v6 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v6 + 24), a2);
  *(_BYTE *)(v6 + 49) = 0;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_QWORD *)(v6 + 88) = 0;
  *(_DWORD *)(v6 + 96) = 1065353216;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_QWORD *)(v6 + 152) = *a3;
  *(_BYTE *)(v6 + 48) = a1;
  return v6;
}

void sub_18267F2C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10B3C40AB0C916ALL);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineDataCache::MTLPipelineDataCache(uint64_t a1, char a2, char *__s, _QWORD *a4)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E0FE0868;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 24), __s);
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = *a4;
  *(_BYTE *)(a1 + 48) = a2;
  return a1;
}

BOOL MTLPipelineDescriptions::initWithFileDescriptor(MTLPipelineDescriptions *this, int a2, const char *a3)
{
  int v6;
  off_t st_size;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t ElementCount;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Object;
  void *v36;
  unsigned __int8 *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  void *__p[2];
  char v53;
  uint64_t v54;
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  stat v58;

  v6 = fstat(a2, &v58);
  if (!v6)
  {
    st_size = v58.st_size;
    v8 = mmap(0, v58.st_size, 1, 1, a2, 0);
    *(_QWORD *)this = v8;
    *((_QWORD *)this + 1) = st_size;
    v57[0] = v8;
    v57[1] = st_size;
    v56[0] = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v57, 0);
    v56[1] = v9;
    v10 = (void *)MEMORY[0x186DAC640]();
    v15 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a3);
    if (!v15)
      MTLReportFailure(0, "initWithFileDescriptor", 228, (uint64_t)CFSTR("stringWithUTF8String returned nil!"), v11, v12, v13, v14, (uint64_t)__p[0]);
    v20 = (void *)objc_msgSend(v15, "stringByStandardizingPath");
    if (!v20)
      MTLReportFailure(0, "initWithFileDescriptor", 231, (uint64_t)CFSTR("stringByStandardizingPath returned nil!"), v16, v17, v18, v19, (uint64_t)__p[0]);
    v25 = (void *)objc_msgSend(v20, "stringByDeletingLastPathComponent");
    if (!v25)
      MTLReportFailure(0, "initWithFileDescriptor", 234, (uint64_t)CFSTR("stringByDeletingLastPathComponent returned nil!"), v21, v22, v23, v24, (uint64_t)__p[0]);
    ElementCount = MTLSerializer::SerializedObjectList::getElementCount((MTLSerializer::SerializedObjectList *)v56);
    if (ElementCount)
    {
      v27 = ElementCount;
      for (i = 0; i != v27; ++i)
      {
        v55[0] = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v56, i);
        v55[1] = v29;
        Object = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v55, 0);
        if (Object)
        {
          if (!v30)
LABEL_29:
            abort();
          v36 = (void *)MEMORY[0x1E0CB3940];
          v37 = (unsigned __int8 *)Object;
          while (*v37++)
          {
            if (!--v30)
              goto LABEL_29;
          }
        }
        else
        {
          MTLReportFailure(0, "initWithFileDescriptor", 251, (uint64_t)CFSTR("Library has no fileName property !"), v31, v32, v33, v34, (uint64_t)__p[0]);
          v36 = (void *)MEMORY[0x1E0CB3940];
        }
        v43 = objc_msgSend(v36, "stringWithUTF8String:", Object);
        if (!v43)
          MTLReportFailure(0, "initWithFileDescriptor", 255, (uint64_t)CFSTR("stringWithUTF8String return nil !"), v39, v40, v41, v42, (uint64_t)__p[0]);
        v48 = (void *)objc_msgSend(v25, "stringByAppendingPathComponent:", v43);
        if (!v48)
          MTLReportFailure(0, "initWithFileDescriptor", 258, (uint64_t)CFSTR("stringByAppendingPathComponent returned nil !"), v44, v45, v46, v47, (uint64_t)__p[0]);
        MEMORY[0x186DABE30](__p, objc_msgSend(v48, "UTF8String", 0, 0, 0, 0));
        v54 = 0;
        v49 = *((_QWORD *)this + 26);
        if (v49 >= *((_QWORD *)this + 27))
        {
          v50 = std::vector<MTLPipelineDescriptions::LibraryReference>::__push_back_slow_path<MTLPipelineDescriptions::LibraryReference const&>((uint64_t *)this + 25, (__int128 *)__p);
        }
        else
        {
          std::vector<MTLPipelineDescriptions::LibraryReference>::__construct_one_at_end[abi:ne180100]<MTLPipelineDescriptions::LibraryReference const&>((uint64_t)this + 200, (__int128 *)__p);
          v50 = v49 + 32;
        }
        *((_QWORD *)this + 26) = v50;
        if (v53 < 0)
          operator delete(__p[0]);
      }
    }
    objc_autoreleasePoolPop(v10);
  }
  return v6 == 0;
}

void sub_18267F5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<MTLPipelineDescriptions::LibraryReference>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLPipelineDescriptions::LibraryReference>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *PipelineLibraryData::PipelineLibraryData(_QWORD *a1, _QWORD *a2, void *a3, void *a4)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[2] = a3;
  a1[3] = a4;
  return a1;
}

void sub_18267F710(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZNK23MTLPipelineDescriptions24initializeDescriptorHashEPbRNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN13MTLSerializer29SerializedCompactPropertyListENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SA_EEEEEEjj_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int ElementCount;
  unsigned int i;
  uint64_t v9;
  uint64_t Object;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int Small;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  void **v29;
  uint64_t v30;
  void *__p[2];
  char v32;
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  void **v37;

  if (!**(_BYTE **)(a1 + 40))
  {
    v2 = *(uint64_t **)(a1 + 32);
    v4 = *v2;
    v3 = v2[1];
    v36[0] = v4;
    v36[1] = v3;
    v35[0] = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v36, *(_DWORD *)(a1 + 56));
    v35[1] = v5;
    v34[0] = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v36, *(_DWORD *)(a1 + 60));
    v34[1] = v6;
    ElementCount = MTLSerializer::SerializedObjectList::getElementCount((MTLSerializer::SerializedObjectList *)v35);
    if (ElementCount)
    {
      for (i = 0; i != ElementCount; ++i)
      {
        v33[0] = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v35, i);
        v33[1] = v9;
        Object = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v33, 1u);
        v16 = (char *)Object;
        if (Object)
        {
          if (!v11)
LABEL_22:
            abort();
          v17 = (unsigned __int8 *)Object;
          while (*v17++)
          {
            if (!--v11)
              goto LABEL_22;
          }
        }
        else
        {
          MTLReportFailure(0, "initializeDescriptorHash_block_invoke", 320, (uint64_t)CFSTR("pipeline descriptor has no name in file"), v12, v13, v14, v15, v30);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v16);
        if (std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(*(_QWORD **)(a1 + 48), (unsigned __int8 *)__p))
        {
          if (v32 >= 0)
            v29 = __p;
          else
            v29 = (void **)__p[0];
          MTLReportFailure(0, "initializeDescriptorHash_block_invoke", 323, (uint64_t)CFSTR("pipeline descriptor %s duplicated"), v19, v20, v21, v22, (uint64_t)v29);
        }
        Small = MTLSerializer::PropertyList::getSmallValue<unsigned int>((MTLSerializer::SerializedObjectList *)v33, 0, 0);
        v24 = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v34, Small);
        v26 = v25;
        v27 = *(_QWORD *)(a1 + 48);
        v37 = __p;
        v28 = std::__hash_table<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v37);
        *((_QWORD *)v28 + 5) = v24;
        *((_QWORD *)v28 + 6) = v26;
        if (v32 < 0)
          operator delete(__p[0]);
      }
    }
    **(_BYTE **)(a1 + 40) = 1;
  }
}

void sub_18267F964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLSerializer::SerializedObjectList::getObject(MTLSerializer::SerializedObjectList *this, unsigned int a2)
{
  unsigned int *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(unsigned int **)this;
  if (*(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    if (v3 <= 3)
      goto LABEL_10;
    if (*v2 > a2)
    {
      if (v3 < 4 * (unint64_t)(a2 + 2))
        goto LABEL_10;
      v4 = v2[a2 + 1];
      if ((_DWORD)v4)
      {
        if (v3 >= v4)
          return (uint64_t)v2 + v4;
LABEL_10:
        abort();
      }
    }
  }
  return 0;
}

uint64_t MTLSerializer::PropertyList::getSmallValue<unsigned int>(MTLSerializer::SerializedObjectList *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)a1 && MTLSerializer::SerializedObjectList::getElementCount(a1) > (unint64_t)a2)
  {
    v6 = *((_QWORD *)a1 + 1);
    if (v6 < 4 * (unint64_t)(a2 + 2))
      goto LABEL_8;
    v7 = *(unsigned int *)(*(_QWORD *)a1 + 4 * (a2 + 1));
    if ((_DWORD)v7)
    {
      if (v7 + 4 <= v6)
        return *(unsigned int *)(*(_QWORD *)a1 + v7);
LABEL_8:
      abort();
    }
  }
  return a3;
}

uint64_t MTLSerializer::SerializedObjectList::getElementCount(MTLSerializer::SerializedObjectList *this)
{
  if (!*(_QWORD *)this)
    return 0;
  if (*((_QWORD *)this + 1) <= 3uLL)
    abort();
  return **(unsigned int **)this;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_18267FD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_18267FDB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

BOOL MTLReportFailureTypeEnabled(unint64_t a1)
{
  return MTLFailureTypeGetErrorModeType(a1) != 4;
}

uint64_t (*MTLPackColor(uint64_t a1, float64x2_t *a2, uint64_t a3))(float32x4_t *, uint64_t)
{
  uint64_t (*v5)(float32x4_t *, uint64_t);
  uint64_t (*v6)(float32x4_t *, uint64_t);
  float32x4_t v7;
  uint64_t (*v8)(float32x4_t *, uint64_t);
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  uint64_t (*result)(float32x4_t *, uint64_t);
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float32x4_t v22;

  v20 = *a2;
  v21 = a2[1];
  v5 = (uint64_t (*)(float32x4_t *, uint64_t))MTLGetPackFloatFunction(a1);
  if (v5)
  {
    v6 = v5;
    v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v20), v21);
  }
  else
  {
    v8 = (uint64_t (*)(float32x4_t *, uint64_t))MTLGetPackUintFunction(a1);
    if (v8)
    {
      v6 = v8;
      v9 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
      v10 = vminnmq_f64(vmaxnmq_f64(v20, (float64x2_t)0), v9);
      v11 = (float64x2_t)vdupq_n_s64(0x41DFFFFFFFC00000uLL);
      v12 = vminnmq_f64(vmaxnmq_f64(v21, (float64x2_t)0), v9);
      v13 = (int32x4_t)vcgtq_f64(v10, v11);
      v14 = (int32x4_t)vcgtq_f64(v12, v11);
      v15 = (int8x16_t)vdupq_n_s64(0x41E0000000000000uLL);
      v16 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(v10, (float64x2_t)vandq_s8(v15, (int8x16_t)v13))), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v12, (float64x2_t)vandq_s8(v15, (int8x16_t)v14))));
      *(_QWORD *)&v10.f64[0] = 0x8000000080000000;
      *(_QWORD *)&v10.f64[1] = 0x8000000080000000;
      v7 = (float32x4_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32(v13, v14), (int8x16_t)v10), v16);
    }
    else
    {
      result = (uint64_t (*)(float32x4_t *, uint64_t))MTLGetPackSintFunction(a1);
      if (!result)
        return result;
      v6 = result;
      v18 = (float64x2_t)vdupq_n_s64(0xC1E0000000000000);
      v19 = (float64x2_t)vdupq_n_s64(0x41DFFFFFFFC00000uLL);
      v7 = (float32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vminnmq_f64(vmaxnmq_f64(v20, v18), v19)), (int32x4_t)vcvtq_s64_f64(vminnmq_f64(vmaxnmq_f64(v21, v18), v19)));
    }
  }
  v22 = v7;
  return (uint64_t (*)(float32x4_t *, uint64_t))v6(&v22, a3);
}

void *MTLGetPackFloatFunction(uint64_t a1)
{
  void *result;
  void *v3;
  void *v4;
  uint64_t (*v5)(uint32x4_t *, float *, void *);
  BOOL v6;
  uint64_t (*v7)(MTLGetPackFloatFunction::$_31 *, float *, void *);

  result = 0;
  if (a1 <= 104)
  {
    switch(a1)
    {
      case '7':
        result = MTLGetPackFloatFunction::$_9::__invoke;
        break;
      case '8':
      case '9':
      case ':':
      case ';':
      case '=':
      case '?':
      case '@':
      case 'C':
      case 'D':
      case 'E':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'R':
      case 'S':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case '[':
        return result;
      case '<':
        result = MTLGetPackFloatFunction::$_10::__invoke;
        break;
      case '>':
        result = MTLGetPackFloatFunction::$_11::__invoke;
        break;
      case 'A':
        result = MTLGetPackFloatFunction::$_12::__invoke;
        break;
      case 'B':
        result = MTLGetPackFloatFunction::$_46::__invoke;
        break;
      case 'F':
        result = MTLGetPackFloatFunction::$_13::__invoke;
        break;
      case 'G':
        result = MTLGetPackFloatFunction::$_14::__invoke;
        break;
      case 'H':
        result = MTLGetPackFloatFunction::$_15::__invoke;
        break;
      case 'P':
        result = MTLGetPackFloatFunction::$_16::__invoke;
        break;
      case 'Q':
        result = MTLGetPackFloatFunction::$_17::__invoke;
        break;
      case 'T':
        result = MTLGetPackFloatFunction::$_43::__invoke;
        break;
      case 'U':
        result = MTLGetPackFloatFunction::$_44::__invoke;
        break;
      case 'Z':
        result = MTLGetPackFloatFunction::$_18::__invoke;
        break;
      case '\\':
        result = MTLGetPackFloatFunction::$_19::__invoke;
        break;
      case ']':
        result = MTLGetPackFloatFunction::$_20::__invoke;
        break;
      case '^':
        result = MTLGetPackFloatFunction::$_21::__invoke;
        break;
      default:
        switch(a1)
        {
          case 10:
            result = MTLGetPackFloatFunction::$_1::__invoke;
            break;
          case 11:
            result = MTLGetPackFloatFunction::$_33::__invoke;
            break;
          case 12:
            result = MTLGetPackFloatFunction::$_2::__invoke;
            break;
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 21:
          case 23:
          case 24:
          case 27:
          case 28:
          case 29:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
            return result;
          case 20:
            result = MTLGetPackFloatFunction::$_3::__invoke;
            break;
          case 22:
            result = MTLGetPackFloatFunction::$_4::__invoke;
            break;
          case 25:
            result = MTLGetPackFloatFunction::$_5::__invoke;
            break;
          case 26:
            result = MTLGetPackFloatFunction::$_45::__invoke;
            break;
          case 30:
            result = MTLGetPackFloatFunction::$_6::__invoke;
            break;
          case 31:
            result = MTLGetPackFloatFunction::$_34::__invoke;
            break;
          case 32:
            result = MTLGetPackFloatFunction::$_7::__invoke;
            break;
          case 40:
            result = MTLGetPackFloatFunction::$_35::__invoke;
            break;
          case 41:
            result = MTLGetPackFloatFunction::$_36::__invoke;
            break;
          case 42:
            result = MTLGetPackFloatFunction::$_37::__invoke;
            break;
          case 43:
            result = MTLGetPackFloatFunction::$_8::__invoke;
            break;
          case 44:
            result = MTLGetPackFloatFunction::$_42::__invoke;
            break;
          default:
            if (a1 == 1)
              result = MTLGetPackFloatFunction::$_0::__invoke;
            else
              result = 0;
            break;
        }
        break;
    }
  }
  else
  {
    if (a1 <= 301)
    {
      if (a1 <= 124)
      {
        switch(a1)
        {
          case 'i':
            result = MTLGetPackFloatFunction::$_22::__invoke;
            break;
          case 'n':
            result = MTLGetPackFloatFunction::$_23::__invoke;
            break;
          case 'p':
            result = MTLGetPackFloatFunction::$_24::__invoke;
            break;
          case 's':
            result = MTLGetPackFloatFunction::$_25::__invoke;
            break;
          case 't':
            result = MTLGetPackFloatFunction::$_47::__invoke;
            break;
          default:
            return result;
        }
        return result;
      }
      v3 = MTLGetPackFloatFunction::$_26::__invoke;
      v4 = MTLGetPackFloatFunction::$_27::__invoke;
      v5 = MTLGetPackFloatFunction::$_28::__invoke;
      if (a1 != 301)
        v5 = 0;
      if (a1 != 300)
        v4 = v5;
      v6 = a1 == 125;
      goto LABEL_24;
    }
    if (a1 <= 551)
    {
      v3 = MTLGetPackFloatFunction::$_29::__invoke;
      v4 = MTLGetPackFloatFunction::$_30::__invoke;
      v7 = MTLGetPackFloatFunction::$_31::__invoke;
      if (a1 != 325)
        v7 = 0;
      if (a1 != 315)
        v4 = v7;
      v6 = a1 == 302;
LABEL_24:
      if (v6)
        return v3;
      else
        return v4;
    }
    switch(a1)
    {
      case 552:
        result = MTLGetPackFloatFunction::$_40::__invoke;
        break;
      case 553:
        result = MTLGetPackFloatFunction::$_41::__invoke;
        break;
      case 554:
        result = MTLGetPackFloatFunction::$_38::__invoke;
        break;
      case 555:
        result = MTLGetPackFloatFunction::$_39::__invoke;
        break;
      case 556:
        result = MTLGetPackFloatFunction::$_32::__invoke;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t MTLGetPackFloatFunction::$_40::__invoke(float32x4_t *this, int16x4_t *a2, void *a3)
{
  int8x16_t v3;
  uint32x4_t v4;

  v3 = (int8x16_t)vrev64q_s32((int32x4_t)vaddq_f32(*this, (float32x4_t)xmmword_1827FE190));
  v4 = (uint32x4_t)vextq_s8(v3, v3, 0xCuLL);
  *a2 = vshl_n_s16(vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, (uint32x4_t)xmmword_1827FE1A0), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4)), (float32x4_t)xmmword_1827FE140), (float32x4_t)vdupq_n_s32(0x43FF0000u))))), 6uLL);
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_16::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3;
  uint32x4_t v4;
  float32x4_t v10;
  int16x8_t v11;

  v3 = (int8x16_t)vrev64q_s32(*this);
  v4 = (uint32x4_t)vextq_s8(v3, v3, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  v10 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  v11 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v10, _Q1), (int8x16_t)vdupq_n_s32(0x437EFFFFu), (int8x16_t)vdupq_n_s32(0x437F0000u)), v10)));
  *(int16x4_t *)v11.i8 = vmovn_s32((int32x4_t)v11);
  *(_DWORD *)a2 = vmovn_s16(v11).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_14::__invoke(uint32x4_t *this, float *a2, void *a3)
{
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v15;
  int8x16_t v16;

  __asm { FMOV            V1.4S, #1.0 }
  v9 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(*this, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), *this));
  v10 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1827FDFB0, v9);
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  v12 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v9, v11), (int8x16_t)xmmword_1827FDFD0, (int8x16_t)xmmword_1827FDFC0), v9)));
  if ((vminvq_u32((uint32x4_t)v10) & 0x80000000) == 0)
  {
    v15 = v10;
    v16 = (int8x16_t)v12;
    *(double *)v13.i64 = GammaConstants<8u,false>::Pack(v9, v10);
    v9 = (float32x4_t)vbicq_s8(v13, v15);
    v12 = (int32x4_t)vorrq_s8((int8x16_t)v9, vandq_s8(v16, v15));
  }
  *(int16x4_t *)v9.f32 = vmovn_s32(v12);
  *(_DWORD *)a2 = vmovn_s16((int16x8_t)v9).u32[0];
  return 4;
}

void *MTLGetPackUintFunction(uint64_t a1)
{
  void *v1;
  uint64_t (*v2)(uint32x4_t *, uint32x4_t *, void *);
  uint64_t (*v3)(MTLGetPackUintFunction::$_11 *, unsigned int *, void *);
  uint64_t (*v4)(uint32x4_t *, unsigned int *, void *);
  void *v5;
  uint64_t (*v6)(MTLGetPackUintFunction::$_9 *, unsigned int *, void *);
  uint64_t (*v7)(uint32x4_t *, uint16x4_t *, void *);
  BOOL v8;
  uint64_t (*v9)(MTLGetPackUintFunction::$_5 *, unsigned int *, void *, uint32x4_t);
  uint64_t (*v10)(uint32x4_t *, unsigned int *, void *);
  uint64_t (*v11)(MTLGetPackUintFunction::$_4 *, unsigned int *, void *, uint32x4_t);
  uint64_t (*v12)(MTLGetPackUintFunction::$_1 *, unsigned int *, void *, uint32x4_t);

  if (a1 <= 90)
  {
    v1 = MTLGetPackUintFunction::$_8::__invoke;
    v9 = MTLGetPackUintFunction::$_5::__invoke;
    v10 = MTLGetPackUintFunction::$_3::__invoke;
    if (a1 != 73)
      v10 = 0;
    if (a1 != 63)
      v9 = (uint64_t (*)(MTLGetPackUintFunction::$_5 *, unsigned int *, void *, uint32x4_t))v10;
    if (a1 != 53)
      v1 = v9;
    v5 = MTLGetPackUintFunction::$_0::__invoke;
    v11 = MTLGetPackUintFunction::$_4::__invoke;
    v12 = MTLGetPackUintFunction::$_1::__invoke;
    if (a1 != 33)
      v12 = 0;
    if (a1 != 23)
      v11 = v12;
    if (a1 != 13)
      v5 = v11;
    v8 = a1 <= 52;
  }
  else
  {
    v1 = MTLGetPackUintFunction::$_6::__invoke;
    v2 = MTLGetPackUintFunction::$_10::__invoke;
    if (a1 != 323)
      v2 = 0;
    if (a1 != 313)
      v1 = v2;
    v3 = MTLGetPackUintFunction::$_11::__invoke;
    v4 = MTLGetPackUintFunction::$_2::__invoke;
    if (a1 != 303)
      v4 = 0;
    if (a1 != 123)
      v3 = (uint64_t (*)(MTLGetPackUintFunction::$_11 *, unsigned int *, void *))v4;
    if (a1 <= 312)
      v1 = v3;
    v5 = MTLGetPackUintFunction::$_12::__invoke;
    v6 = MTLGetPackUintFunction::$_9::__invoke;
    v7 = MTLGetPackUintFunction::$_7::__invoke;
    if (a1 != 113)
      v7 = 0;
    if (a1 != 103)
      v6 = (uint64_t (*)(MTLGetPackUintFunction::$_9 *, unsigned int *, void *))v7;
    if (a1 != 91)
      v5 = v6;
    v8 = a1 <= 122;
  }
  if (v8)
    return v5;
  else
    return v1;
}

void *MTLGetPackSintFunction(uint64_t a1)
{
  void *v1;
  uint64_t (*v2)(MTLGetPackSintFunction::$_5 *, int *, void *, int32x4_t);
  uint64_t (*v3)(int32x4_t *, int *, void *);
  void *v4;
  uint64_t (*v5)(MTLGetPackSintFunction::$_4 *, int *, void *, int32x4_t);
  uint64_t (*v6)(MTLGetPackSintFunction::$_1 *, int *, void *, int32x4_t);
  BOOL v7;
  uint64_t (*v8)(int32x4_t *, int16x4_t *, void *);
  uint64_t (*v9)(int32x4_t *, int32x4_t *, void *);
  uint64_t (*v10)(int32x4_t *, int16x4_t *, void *);
  uint64_t (*v11)(MTLGetPackSintFunction::$_11 *, int *, void *);

  if (a1 > 103)
  {
    v1 = MTLGetPackSintFunction::$_2::__invoke;
    v8 = MTLGetPackSintFunction::$_6::__invoke;
    v9 = MTLGetPackSintFunction::$_10::__invoke;
    if (a1 != 324)
      v9 = 0;
    if (a1 != 314)
      v8 = (uint64_t (*)(int32x4_t *, int16x4_t *, void *))v9;
    if (a1 != 304)
      v1 = v8;
    v4 = MTLGetPackSintFunction::$_9::__invoke;
    v10 = MTLGetPackSintFunction::$_7::__invoke;
    v11 = MTLGetPackSintFunction::$_11::__invoke;
    if (a1 != 124)
      v11 = 0;
    if (a1 != 114)
      v10 = (uint64_t (*)(int32x4_t *, int16x4_t *, void *))v11;
    if (a1 != 104)
      v4 = v10;
    v7 = a1 <= 303;
  }
  else
  {
    v1 = MTLGetPackSintFunction::$_8::__invoke;
    v2 = MTLGetPackSintFunction::$_5::__invoke;
    v3 = MTLGetPackSintFunction::$_3::__invoke;
    if (a1 != 74)
      v3 = 0;
    if (a1 != 64)
      v2 = (uint64_t (*)(MTLGetPackSintFunction::$_5 *, int *, void *, int32x4_t))v3;
    if (a1 != 54)
      v1 = v2;
    v4 = MTLGetPackSintFunction::$_0::__invoke;
    v5 = MTLGetPackSintFunction::$_4::__invoke;
    v6 = MTLGetPackSintFunction::$_1::__invoke;
    if (a1 != 34)
      v6 = 0;
    if (a1 != 24)
      v5 = v6;
    if (a1 != 14)
      v4 = v5;
    v7 = a1 <= 53;
  }
  if (v7)
    return v4;
  else
    return v1;
}

uint64_t MTLGetPackFloatFunction::$_13::__invoke(uint32x4_t *this, float *a2, void *a3)
{
  float32x4_t v8;
  int16x8_t v9;

  __asm { FMOV            V1.4S, #1.0 }
  v8 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(*this, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), *this));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  v9 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v8, _Q1), (int8x16_t)vdupq_n_s32(0x437EFFFFu), (int8x16_t)vdupq_n_s32(0x437F0000u)), v8)));
  *(int16x4_t *)v9.i8 = vmovn_s32((int32x4_t)v9);
  *(_DWORD *)a2 = vmovn_s16(v9).u32[0];
  return 4;
}

uint64_t *std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TextureTokenData> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__construct_node<std::pair<std::string const,TextureTokenData> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__construct_node<std::pair<std::string const,TextureTokenData> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1826813F0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t MTLGetOverridenDeviceCreationFlags(_QWORD *a1)
{
  uint64_t v1;

  v1 = _are_device_creation_flags_overriden;
  if (a1 && _are_device_creation_flags_overriden)
    *a1 = _overriden_device_creation_flags;
  return v1;
}

NSObject *_MTLNewReflectionBlock(NSObject *a1, dispatch_data_t data, NSObject *a3)
{
  NSObject *concat;
  size_t size;
  size_t v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  NSObject *v11;
  dispatch_data_t v12;
  dispatch_data_t v13;
  __int128 v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;

  concat = data;
  v15 = xmmword_182819720;
  v22 = 0;
  if (data)
    size = dispatch_data_get_size(data);
  else
    size = 0;
  v19 = size;
  if (a1)
    v7 = dispatch_data_get_size(a1);
  else
    v7 = 0;
  v17 = v7;
  if (a3)
    v8 = dispatch_data_get_size(a3);
  else
    v8 = 0;
  v9 = size + 80;
  if (concat == a3)
    v9 = 80;
  v20 = v9;
  v21 = v8;
  v10 = v8 + v9;
  if (!a1)
    v10 = 0;
  v18 = 80;
  v16 = v10;
  v11 = dispatch_data_create(&v15, 0x50uLL, 0, 0);
  if ((unint64_t)concat | (unint64_t)a3)
  {
    if (concat != a3)
    {
      if (concat && a3)
      {
        concat = dispatch_data_create_concat(concat, a3);
        if (!concat)
          goto LABEL_24;
LABEL_23:
        v12 = dispatch_data_create_concat(v11, concat);
        dispatch_release(concat);
        dispatch_release(v11);
        v11 = v12;
        goto LABEL_24;
      }
      if (!concat)
        concat = a3;
    }
    dispatch_retain(concat);
    if (!concat)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_24:
  if (a1)
  {
    v13 = dispatch_data_create_concat(v11, a1);
    dispatch_release(v11);
    return v13;
  }
  return v11;
}

uint64_t MTLGetReflectionFlags(NSObject *a1)
{
  NSObject *v1;
  int v2;
  uint64_t v3;
  size_t v5;
  void *buffer_ptr;

  if (!a1)
    return 0;
  v5 = 0;
  buffer_ptr = 0;
  v1 = dispatch_data_create_map(a1, (const void **)&buffer_ptr, &v5);
  if (*(_QWORD *)buffer_ptr == 0x8EF13C710)
  {
    if (*((_QWORD *)buffer_ptr + 7))
      v2 = (2 * (*((_QWORD *)buffer_ptr + 5) != 0)) | 4;
    else
      v2 = 2 * (*((_QWORD *)buffer_ptr + 5) != 0);
    v3 = v2 | (*((_QWORD *)buffer_ptr + 3) != 0);
  }
  else
  {
    v3 = 0;
  }
  dispatch_release(v1);
  return v3;
}

uint64_t MTLRangeAllocatorAllocateRange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v16;
  _QWORD *v17;

  if (!a3)
    return 0;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    v6 = 0;
    v7 = ((*(_QWORD *)(a1 + 32) + a3) & ~*(_QWORD *)(a1 + 32)) + a2;
    v8 = v7 - 1;
    v9 = a2 - 1;
    v10 = 1;
    do
    {
      v11 = *(_QWORD *)a1;
      v12 = (unint64_t *)(*(_QWORD *)a1 + v6);
      if (*v12 > a2)
        return 0;
      v13 = v12[1];
      if (v8 <= v13)
      {
        if (*v12 == a2)
        {
          v16 = (unint64_t *)(v11 + v6);
          if (v8 == v13)
          {
            *(_DWORD *)(a1 + 8) = v4 - 1;
            memmove(v16, v16 + 2, 16 * (v4 - v10));
          }
          else
          {
            *v16 = v7;
          }
          return 1;
        }
        if (v8 == v13)
        {
          *(_QWORD *)(v11 + v6 + 8) = v9;
          return 1;
        }
        if (allocElement(a1, v10))
        {
          v17 = (_QWORD *)(*(_QWORD *)a1 + v6);
          v17[1] = v9;
          v17[2] = v7;
          v17[3] = v13;
          return 1;
        }
      }
      v4 = *(_DWORD *)(a1 + 8);
      v6 += 16;
    }
    while (v10++ < v4);
  }
  return 0;
}

void sub_182682428(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10A0C405C0B448ELL);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryBuilder::MTLLibraryBuilder(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  if (MTLGetModulesCachePath::onceToken != -1)
    dispatch_once(&MTLGetModulesCachePath::onceToken, &__block_literal_global_4);
  *(_QWORD *)(a1 + 48) = (id)MTLGetModulesCachePath::result;
  return a1;
}

void sub_182682520(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void MTLPipelineDescriptions::~MTLPipelineDescriptions(MTLPipelineDescriptions *this)
{
  void *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD v5[5];
  void **v6;

  v2 = *(void **)this;
  if (v2)
    munmap(v2, *((_QWORD *)this + 1));
  v3 = *((_QWORD *)this + 2);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN23MTLPipelineDescriptionsD2Ev_block_invoke;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  v5[4] = this;
  dispatch_sync(v3, v5);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    dispatch_release(v4);
  v6 = (void **)((char *)this + 200);
  std::vector<std::tuple<std::string,unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 160);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 72);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 32);
}

void ___ZN23MTLPipelineDescriptionsD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 200);
  v3 = *(_QWORD *)(v1 + 208);
  while (v2 != v3)
  {

    v2 += 32;
  }
}

uint64_t getCompileStatsJSONPath(void)
{
  if (os_variant_has_internal_diagnostics() && getCompileStatsJSONPath(void)::onceToken != -1)
    dispatch_once(&getCompileStatsJSONPath(void)::onceToken, &__block_literal_global_1907);
  return getCompileStatsJSONPath(void)::compileStatsPath;
}

uint64_t ___Z23logCompileTimeStatsModev_block_invoke()
{
  char *v0;
  uint64_t result;

  v0 = getenv("MTL_LOG_COMPILE_STATS");
  if (!v0)
    v0 = "0";
  result = strtol(v0, 0, 0);
  logCompileTimeStatsMode(void)::shouldLogStats = result;
  if ((int)result >= 1)
    _collectCompilePerformanceStats = 1;
  return result;
}

uint64_t ___ZN19FunctionHashFactory17shouldLogHashKeysEv_block_invoke()
{
  uint64_t result;
  char *v1;
  BOOL v2;

  result = _MTLIsInternalBuild();
  if ((_DWORD)result)
  {
    v1 = getenv("MTL_DEBUG_LOG_CACHE_KEYS");
    if (!v1)
      v1 = "0";
    result = strtol(v1, 0, 0);
    v2 = result != 0;
  }
  else
  {
    v2 = 0;
  }
  FunctionHashFactory::shouldLogHashKeys(void)::shouldLogHashKeys = v2;
  return result;
}

void ___ZN35MTLCompilerConnectionManagerPrivate22registerCompilerPluginEPKcPU27objcproto16OS_dispatch_data8NSObject_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  char **v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v2 = *(_QWORD **)(a1 + 48);
  v3 = (char **)(v2 + 4);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = ((v2[5] - v2[4]) >> 4) + 1;
  v4 = strlen(*(const char **)(a1 + 56)) + 1;
  v5 = malloc_type_malloc(v4, 0xC23B3CC4uLL);
  memcpy(v5, *(const void **)(a1 + 56), v4);
  dispatch_retain(*(dispatch_object_t *)(a1 + 32));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = (_QWORD *)v2[5];
  v8 = v2[6];
  if ((unint64_t)v7 >= v8)
  {
    v10 = ((char *)v7 - *v3) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)*v3;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)(v2 + 6), v13);
    else
      v14 = 0;
    v15 = &v14[16 * v10];
    v16 = &v14[16 * v13];
    *(_QWORD *)v15 = v5;
    *((_QWORD *)v15 + 1) = v6;
    v9 = v15 + 16;
    v18 = (char *)v2[4];
    v17 = (char *)v2[5];
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = *v3;
    }
    v2[4] = v15;
    v2[5] = v9;
    v2[6] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v7[1] = v6;
    v9 = v7 + 2;
  }
  v2[5] = v9;
}

uint64_t MTLLibraryDataWithArchive::externFunctionNames(os_unfair_lock_s *this)
{
  MTLLibraryDataWithArchive::allocateFunctionNames(this);
  return *(_QWORD *)&this[62]._os_unfair_lock_opaque;
}

uint64_t newArchitectureNameString(int a1, int a2)
{
  uint64_t v3;
  const char *v4;
  int v5;
  int v7;
  int v8;
  int v9;
  const char *v10;
  BOOL v11;
  const char *v12;

  if ((a1 - 16777235) > 2 || a2 == 0)
  {
    if (a1 != 16777239 || !a2)
      return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown"));
    v3 = (*(_QWORD *)&a2 & 0xFFFFFFLL) - 1;
    if (v3 > 0xA)
      goto LABEL_142;
    v4 = off_1E0FE35B0[v3];
    return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
  }
  if (a1 == 16777237)
  {
    v7 = a2 & 0xFFFFFF;
    v4 = "unknown";
    if ((a2 & 0xFFFFFFu) > 0x9501FF)
    {
      if ((a2 & 0xFFFFFFu) > 0x950203)
      {
        switch(v7)
        {
          case 9765380:
            v4 = "intelgpu_kbl_gt2r4";
            break;
          case 9765633:
            v4 = "intelgpu_kbl_gt3r1";
            break;
          case 9765638:
            v4 = "intelgpu_kbl_gt3r6";
            break;
        }
        return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
      }
      v9 = 9765376;
      v10 = "intelgpu_kbl_gt2r0";
      v11 = v7 == 9765378;
      v12 = "intelgpu_kbl_gt2r2";
    }
    else
    {
      if ((a2 & 0xFFFFFFu) > 0x90309)
      {
        switch(v7)
        {
          case 590602:
            v4 = "intelgpu_skl_gt3r10";
            break;
          case 1115655:
            v4 = "intelgpu_icl_1x6x8r7";
            break;
          case 1116167:
            v4 = "intelgpu_icl_1x8x8r7";
            break;
        }
        return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
      }
      v9 = 590342;
      v10 = "intelgpu_skl_gt2r6";
      v11 = v7 == 590343;
      v12 = "intelgpu_skl_gt2r7";
    }
    if (!v11)
      v12 = "unknown";
    if (v7 == v9)
      v4 = v10;
    else
      v4 = v12;
    return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
  }
  if (a1 == 16777236)
  {
    v8 = a2 & 0xFFFFFF;
    v4 = "unknown";
    if ((a2 & 0xFFFFFFu) <= 0x1388)
    {
      switch(v8)
      {
        case 4000:
          v4 = "amdgpu_gfx600";
          break;
        case 4001:
          v4 = "amdgpu_gfx600_nwh";
          break;
        case 4002:
          v4 = "amdgpu_gfx701";
          break;
        case 4003:
          v4 = "amdgpu_gfx704";
          break;
        case 4004:
          v4 = "amdgpu_gfx803";
          break;
        case 4005:
          v4 = "amdgpu_gfx802";
          break;
        default:
          if (v8 == 5000)
            v4 = "amdgpu_gfx900";
          break;
      }
    }
    else
    {
      switch(v8)
      {
        case 6000:
          v4 = "amdgpu_gfx1010_nsgc";
          break;
        case 6001:
          v4 = "amdgpu_gfx1010";
          break;
        case 6002:
          v4 = "amdgpu_gfx1011";
          break;
        case 6003:
          v4 = "amdgpu_gfx1012";
          break;
        case 6004:
          v4 = "amdgpu_gfx1030";
          break;
        case 6005:
          v4 = "amdgpu_gfx1032";
          break;
        default:
          if (v8 == 5001)
          {
            v4 = "amdgpu_gfx904";
          }
          else if (v8 == 5002)
          {
            v4 = "amdgpu_gfx906";
          }
          break;
      }
    }
    return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
  }
  if (a1 != 16777235)
    goto LABEL_142;
  v5 = a2 & 0xFFFFFF;
  if ((a2 & 0xFFFFFFu) > 0x111)
  {
    if ((a2 & 0xFFFFFFu) > 0x1A2)
    {
      if ((a2 & 0xFFFFFFu) > 0x211)
      {
        if ((a2 & 0xFFFFFFu) > 0x241)
        {
          if ((a2 & 0xFFFFFFu) > 0x261)
          {
            if (v5 == 610)
            {
              v4 = "applegpu_g15p";
              return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
            }
            if (v5 == 1602)
            {
              v4 = "applegpu_g11g_8fstp";
              return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
            }
          }
          else if (v5 == 578 || v5 == 594)
          {
            v4 = "applegpu_g13d";
            return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
          }
LABEL_142:
          v4 = "unknown";
          return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
        }
        if (v5 != 530)
        {
          if (v5 == 546 || v5 == 562)
          {
            v4 = "applegpu_g13c";
            return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
          }
          goto LABEL_142;
        }
LABEL_124:
        v4 = "applegpu_g13s";
        return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
      }
      if ((a2 & 0xFFFFFFu) > 0x1E1)
      {
        if (v5 == 482 || v5 == 498)
        {
          v4 = "applegpu_g14d";
          return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
        }
        if (v5 != 514)
          goto LABEL_142;
        goto LABEL_124;
      }
      if (v5 != 419)
      {
        if (v5 != 434)
        {
          if (v5 != 435)
            goto LABEL_142;
LABEL_138:
          v4 = "applegpu_g16p";
          return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
        }
LABEL_132:
        v4 = "applegpu_g14s";
        return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
      }
LABEL_137:
      v4 = "applegpu_g15s";
      return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
    }
    if ((a2 & 0xFFFFFFu) <= 0x161)
    {
      if ((a2 & 0xFFFFFFu) > 0x131)
      {
        if (v5 == 306 || v5 == 322)
        {
          v4 = "applegpu_g13g";
          return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
        }
        if (v5 == 323)
        {
          v4 = "applegpu_g17p";
          return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
        }
        goto LABEL_142;
      }
      if (v5 == 274)
      {
LABEL_50:
        v4 = "applegpu_g13p";
        return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
      }
      if (v5 != 275)
      {
        if (v5 != 290)
          goto LABEL_142;
        goto LABEL_50;
      }
LABEL_128:
      v4 = "applegpu_g15g";
      return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
    }
    if ((a2 & 0xFFFFFFu) <= 0x191)
    {
      if (v5 == 354 || v5 == 370)
      {
        v4 = "applegpu_g14p";
        return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
      }
      if (v5 != 386)
        goto LABEL_142;
LABEL_149:
      v4 = "applegpu_g14g";
      return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
    }
    if (v5 == 402)
      goto LABEL_149;
    if (v5 != 403)
    {
      if (v5 != 418)
        goto LABEL_142;
      goto LABEL_132;
    }
LABEL_136:
    v4 = "applegpu_g16g";
    return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
  }
  if ((a2 & 0xFFFFFFu) > 0x60)
  {
    if ((a2 & 0xFFFFFFu) > 0x91)
    {
      if ((a2 & 0xFFFFFFu) > 0xE2)
      {
        if (v5 == 227 || v5 == 243)
          goto LABEL_138;
        if (v5 != 259)
          goto LABEL_142;
        goto LABEL_136;
      }
      if (v5 != 146)
      {
        if (v5 == 194 || v5 == 210)
        {
          v4 = "applegpu_g12p";
          return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
        }
        goto LABEL_142;
      }
    }
    else
    {
      if ((a2 & 0xFFFFFFu) <= 0x71)
      {
        if (v5 == 97)
        {
          v4 = "applegpu_g9g";
          return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
        }
        if (v5 != 98)
        {
          if (v5 != 99)
            goto LABEL_142;
          goto LABEL_137;
        }
LABEL_146:
        v4 = "applegpu_g11p";
        return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
      }
      if (v5 == 114)
        goto LABEL_146;
      if (v5 == 115)
        goto LABEL_137;
      if (v5 != 130)
        goto LABEL_142;
    }
    v4 = "applegpu_g11g";
    return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
  }
  if ((a2 & 0xFFFFFFu) > 0x40)
  {
    if ((a2 & 0xFFFFFFu) > 0x50)
    {
      if (v5 == 81)
      {
        v4 = "applegpu_g9p";
        return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
      }
      if (v5 != 82)
      {
        if (v5 != 83)
          goto LABEL_142;
        goto LABEL_128;
      }
    }
    else
    {
      if (v5 == 65)
      {
        v4 = "applegpu_g5p";
        return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
      }
      if (v5 != 66)
      {
        if (v5 != 67)
          goto LABEL_142;
        goto LABEL_128;
      }
    }
    v4 = "applegpu_g11m";
    return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
  }
  if ((a2 & 0xFFFFFFu) > 0x20)
  {
    switch(v5)
    {
      case '!':
        goto LABEL_106;
      case '"':
        v4 = "applegpu_g10p";
        return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
      case '1':
LABEL_106:
        v4 = "applegpu_g4g";
        return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
    }
    goto LABEL_142;
  }
  v4 = "applegpu_gx2";
  if (v5 != 16)
  {
    if (v5 == 17)
    {
      v4 = "applegpu_g4p";
      return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
    }
    if (v5 != 32)
      goto LABEL_142;
  }
  return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v4, 1);
}

MTLCompilerConnectionManagerPrivate *MTLCreateCompilerConnectionManager(int a1)
{
  MTLCompilerConnectionManagerPrivate *v2;

  v2 = (MTLCompilerConnectionManagerPrivate *)operator new();
  MTLCompilerConnectionManagerPrivate::MTLCompilerConnectionManagerPrivate(v2, a1);
  return v2;
}

void sub_182683D90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10A1C403E9A69ECLL);
  _Unwind_Resume(a1);
}

void MTLCompilerConnectionManagerPrivate::MTLCompilerConnectionManagerPrivate(MTLCompilerConnectionManagerPrivate *this, int a2)
{
  char *v4;
  BOOL v5;
  char *v6;
  BOOL v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  __int128 v18;

  *((_DWORD *)this + 2) = a2;
  *(_QWORD *)this = &off_1E0FE1478;
  bzero((char *)this + 32, 0x818uLL);
  *((_DWORD *)this + 4) = 2;
  *((_BYTE *)this + 12) = 0;
  if (_MTLIsInternalBuild())
  {
    v4 = getenv("MTL_MONOLITHIC_COMPILER");
    if (v4)
    {
      v5 = *v4 == 49;
      *((_BYTE *)this + 12) = v5;
      if (v5)
        goto LABEL_11;
    }
    else
    {
      *((_BYTE *)this + 12) = 0;
    }
    v6 = getenv("USE_MONOLITHIC_COMPILER");
    if (v6)
      v7 = *v6 == 49;
    else
      v7 = 0;
    *((_BYTE *)this + 12) = v7;
  }
LABEL_11:
  v8 = getenv("MTL_MONOLITHIC_COMPILER_LLVM_VERSION");
  if (v8 && atoi(v8) != a2)
  {
    *((_BYTE *)this + 12) = 0;
  }
  else if (*((_BYTE *)this + 12))
  {
    v9 = operator new(0x50uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1E0FE2160;
    v10 = CompilerConnection::CompilerConnection((uint64_t)(v9 + 3), 4, a2);
    v9[3] = &off_1E0FE1348;
    v9[8] = 0;
    v9[9] = 0;
    *(_QWORD *)&v18 = v10;
    *((_QWORD *)&v18 + 1) = v9;
    std::shared_ptr<std::unordered_map<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*>>>>::operator=[abi:ne180100]((uint64_t)this + 56, &v18);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *((_DWORD *)this + 4) = 1;
    goto LABEL_29;
  }
  *((_DWORD *)this + 4) = 2;
  if ((_MTLIsInternalBuild() & 1) != 0)
  {
    v14 = (*(uint64_t (**)(MTLCompilerConnectionManagerPrivate *))(*(_QWORD *)this + 40))(this);
    *((_DWORD *)this + 4) = v14;
  }
  else
  {
    v14 = *((_DWORD *)this + 4);
  }
  if (v14 >= 1)
  {
    v15 = 0;
    v16 = (_QWORD *)((char *)this + 1080);
    do
    {
      std::shared_ptr<CompilerConnection>::reset[abi:ne180100](v16 - 128);
      v17 = (std::__shared_weak_count *)v16[1];
      *v16 = 0;
      v16[1] = 0;
      if (v17)
        std::__shared_weak_count::__release_weak(v17);
      ++v15;
      v16 += 2;
    }
    while (v15 < *((int *)this + 4));
  }
LABEL_29:
  *((_QWORD *)this + 3) = dispatch_queue_create("CompilerConnectionSerialQueue", 0);
}

void sub_182683FA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t i;
  void *v7;

  v4 = 2096;
  while (1)
  {
    v5 = *(std::__shared_weak_count **)(v1 + v4);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    v4 -= 16;
    if (v4 == 1072)
    {
      for (i = 1064; i != 40; i -= 16)
        std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v1 + i);
      v7 = *v2;
      if (*v2)
      {
        *(_QWORD *)(v1 + 40) = v7;
        operator delete(v7);
      }
      _Unwind_Resume(a1);
    }
  }
}

_BYTE *__isMemoryLessStorageDisabled_block_invoke()
{
  _BYTE *result;

  result = (_BYTE *)_MTLIsInternalBuild();
  if ((_DWORD)result)
  {
    result = getenv("MTL_DISABLE_MEMORYLESS_STORAGE_MODE");
    if (result)
    {
      if (*result == 49)
        isMemoryLessStorageDisabled_result = 1;
    }
  }
  return result;
}

uint64_t MTLLibraryCache::MTLLibraryCache(uint64_t a1, uint64_t a2, __int128 *a3)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 32) = MTLCompilerCache::createFSCache(a2, "libraries", a3);
  return a1;
}

void sub_1826840D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void ___Z29_MTLDebugIgnoreFailOnMissFlagv_block_invoke()
{
  uint64_t v0;
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (_MTLIsInternalBuild())
  {
    v0 = MTLGetEnvDefault("MTL_DEBUG_IGNORE_PSO_FAIL_ON_MISS", 0);
    _MTLDebugIgnoreFailOnMissFlag(void)::ignoreFailOnMiss = v0 != 0;
    if (v0)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v1 = 136315138;
        v2 = "MTL_DEBUG_IGNORE_PSO_FAIL_ON_MISS";
        _os_log_impl(&dword_182636000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s was set, ignoring MTLPipelineOptionFailOnBinaryArchiveMiss and MTLPipelineLibrary.disableRunTimeCompilation", (uint8_t *)&v1, 0xCu);
      }
    }
  }
  else
  {
    _MTLDebugIgnoreFailOnMissFlag(void)::ignoreFailOnMiss = 0;
  }
}

void ___ZNK23MTLPipelineDescriptions17getLibraryByIndexEj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = objc_alloc(MEMORY[0x1E0CB3940]);
    v4 = *(uint64_t **)(a1 + 40);
    if (*((char *)v4 + 23) < 0)
      v4 = (uint64_t *)*v4;
    v5 = (void *)objc_msgSend(v3, "initWithUTF8String:", v4);
    v12 = 0;
    v6 = objc_msgSend(*(id *)(v2 + 224), "newLibraryWithFile:error:", v5, &v12);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) = v6;

    if (!v6)
    {
      v7 = objc_msgSend(v12, "description");
      MTLReportFailure(0, "getLibraryByIndex_block_invoke", 291, (uint64_t)CFSTR("Error: %@"), v8, v9, v10, v11, v7);
    }
  }
}

void MTLRangeAllocatorDestroy(void **a1)
{
  void *v1;

  v1 = *a1;
  if (v1)
    free(v1);
}

void MTLCompilerFSCache::flushElement()
{
  int v0;
  int v1;

  v0 = fscache_sync_element();
  if (v0)
  {
    v1 = v0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      MTLCompilerFSCache::flushElement(v1);
  }
}

void ___Z34_MTLDebugIgnorePrecompiledBinariesv_block_invoke()
{
  uint64_t v0;
  const char *v1;
  NSObject *v2;
  const char *v3;
  uint32_t v4;
  int v5;
  const char *v6;
  __int16 v7;
  _BOOL4 v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (_MTLIsInternalBuild())
  {
    if (getenv("MTL_DEBUG_IGNORE_PRECOMPILED_BINARIES"))
    {
      v0 = MTLGetEnvDefault("MTL_DEBUG_IGNORE_PRECOMPILED_BINARIES", 0);
      _MTLDebugIgnorePrecompiledBinaries(void)::ignorePrecompiledBinaries = v0 != 0;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        return;
      v1 = "used if set";
      v5 = 136315650;
      v6 = "MTL_DEBUG_IGNORE_PRECOMPILED_BINARIES";
      if (v0)
        v1 = "ignored";
      v7 = 1024;
      v8 = v0 != 0;
      v9 = 2080;
      v10 = v1;
      v2 = MEMORY[0x1E0C81028];
      v3 = "'%s' was set to '%d', binary archives and pipeline libraries will be %s.";
      v4 = 28;
      goto LABEL_10;
    }
    if (_os_feature_enabled_impl())
    {
      _MTLDebugIgnorePrecompiledBinaries(void)::ignorePrecompiledBinaries = 1;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v5) = 0;
        v2 = MEMORY[0x1E0C81028];
        v3 = "ignore_precompiled_binaries feature flag enabled, binary archives and pipeline libraries will be ignored.";
        v4 = 2;
LABEL_10:
        _os_log_impl(&dword_182636000, v2, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)&v5, v4);
      }
    }
  }
}

void sub_182685274(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void MTLMetalScriptBuilder::MTLMetalScriptBuilder(MTLMetalScriptBuilder *this)
{
  MTLMetalScriptBuilderImpl *v2;
  uint64_t v3;

  v2 = (MTLMetalScriptBuilderImpl *)operator new();
  MTLMetalScriptBuilderImpl::MTLMetalScriptBuilderImpl(v2);
  *(_QWORD *)this = v3;
}

void MTLMetalScriptBuilderImpl::MTLMetalScriptBuilderImpl(MTLMetalScriptBuilderImpl *this)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *((_QWORD *)this + 31) = 0;
  *((_BYTE *)this + 256) = 0;
  *((_QWORD *)this + 33) = 1024;
  *((_QWORD *)this + 34) = 8;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 1;
  *((_WORD *)this + 164) = 256;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_QWORD *)this + 72) = 0;
  *(_QWORD *)this = dispatch_queue_create("mtlScriptSerializerQueue", 0);
}

BOOL _MTLUseAIRNTBinaryArchive(void *a1)
{
  if (_MTLUseAIRNTBinaryArchive::onceToken != -1)
    dispatch_once(&_MTLUseAIRNTBinaryArchive::onceToken, &__block_literal_global_578);
  if (_MTLUseAIRNTBinaryArchive::envVarSet == 1)
    return _MTLUseAIRNTBinaryArchive::useAIRNTArchive != 0;
  if ((MTLGPUDebugEnabled() & 1) != 0)
    return 0;
  return objc_msgSend((id)objc_msgSend(a1, "targetDeviceArchitecture"), "cpuType") - 16777235 < 3;
}

uint64_t MTLGPUDebugEnabled()
{
  return _gpuDebugEnabled;
}

void MTLMetalScriptBuilder::~MTLMetalScriptBuilder(MTLMetalScriptBuilder *this)
{
  MTLMetalScriptBuilderImpl *v1;

  v1 = *(MTLMetalScriptBuilderImpl **)this;
  if (v1)
  {
    MTLMetalScriptBuilderImpl::~MTLMetalScriptBuilderImpl(v1);
    MEMORY[0x186DABFBC]();
  }
}

void MTLMetalScriptBuilderImpl::~MTLMetalScriptBuilderImpl(MTLMetalScriptBuilderImpl *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  MTLMetalScriptBuilderImpl::resetInternal(this, 1);
  if (*(_QWORD *)this)
    dispatch_release(*(dispatch_object_t *)this);
  v2 = (void *)*((_QWORD *)this + 70);
  if (v2)
  {
    *((_QWORD *)this + 71) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 67);
  if (v3)
  {
    *((_QWORD *)this + 68) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 64);
  if (v4)
  {
    *((_QWORD *)this + 65) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 61);
  if (v5)
  {
    *((_QWORD *)this + 62) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 58);
  if (v6)
  {
    *((_QWORD *)this + 59) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 55);
  if (v7)
  {
    *((_QWORD *)this + 56) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 52);
  if (v8)
  {
    *((_QWORD *)this + 53) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 49);
  if (v9)
  {
    *((_QWORD *)this + 50) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 46);
  if (v10)
  {
    *((_QWORD *)this + 47) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 43);
  if (v11)
  {
    *((_QWORD *)this + 44) = v11;
    operator delete(v11);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((MTLMetalScriptBuilderImpl *)((char *)this + 248));
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 208);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<MTLUINT256_t const,std::pair<std::string,std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void MTLMetalScriptBuilderImpl::resetInternal(MTLMetalScriptBuilderImpl *this, int a2)
{
  uint64_t **i;

  *((_QWORD *)this + 53) = *((_QWORD *)this + 52);
  *((_QWORD *)this + 56) = *((_QWORD *)this + 55);
  *((_QWORD *)this + 71) = *((_QWORD *)this + 70);
  *((_QWORD *)this + 59) = *((_QWORD *)this + 58);
  *((_QWORD *)this + 50) = *((_QWORD *)this + 49);
  *((_QWORD *)this + 47) = *((_QWORD *)this + 46);
  *((_QWORD *)this + 44) = *((_QWORD *)this + 43);
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear((uint64_t)this + 48);
    std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::clear((uint64_t)this + 88);
  }
  std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::clear((uint64_t)this + 128);
  for (i = (uint64_t **)*((_QWORD *)this + 3); i; i = (uint64_t **)*i)
  {
    dispatch_release((dispatch_object_t)*i[2]);
    free(i[2]);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear((_QWORD *)this + 1);
  std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::clear((uint64_t)this + 168);
  std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::clear((uint64_t)this + 208);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

id newErrorWithMessage(NSString *a1, MTLBinaryArchiveError a2)
{
  uint64_t v3;

  v3 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", a1, *MEMORY[0x1E0CB2D50]);
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLBinaryArchiveDomain"), a2, v3);
}

void sub_182686210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLCompilerConnectionManagerPrivate::buildRequest(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[6];
  _QWORD block[10];
  int v21;
  _QWORD v22[7];
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 (*v27)(__n128 *, __n128 *);
  uint64_t (*v28)(uint64_t);
  void *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[4];

  v42[0] = 0;
  v42[1] = v42;
  v42[2] = 0x2020000000;
  v42[3] = -1;
  v38 = 0;
  v39 = &v38;
  v40 = 0x2020000000;
  v41 = 0;
  v32 = 0;
  v33 = &v32;
  v34 = 0x3052000000;
  v35 = __Block_byref_object_copy__4;
  v36 = __Block_byref_object_dispose__4;
  v37 = 0;
  v24 = 0;
  v25 = &v24;
  v26 = 0x4012000000;
  v27 = __Block_byref_object_copy__53;
  v28 = __Block_byref_object_dispose__54;
  v30 = 0;
  v31 = 0;
  v29 = &unk_182827312;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x4012000000;
  v22[3] = __Block_byref_object_copy__53;
  v22[4] = __Block_byref_object_dispose__54;
  v22[6] = 0;
  v23 = 0;
  v22[5] = &unk_182827312;
  v8 = MEMORY[0x1E0C809B0];
  v9 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN35MTLCompilerConnectionManagerPrivate12buildRequestEjP18MTLCompilerRequestbU13block_pointerFv16MTLCompilerErrorPU27objcproto16OS_dispatch_data8NSObjectPKcE_block_invoke;
  block[3] = &unk_1E0FE37C0;
  block[4] = v42;
  block[5] = v22;
  v21 = a2;
  block[6] = &v38;
  block[7] = &v32;
  block[8] = &v24;
  block[9] = a1;
  dispatch_sync(v9, block);
  v10 = v25[6];
  v11 = v39[3];
  v12 = v33[5];
  v19[0] = v8;
  v19[1] = 3221225472;
  v19[2] = ___ZN35MTLCompilerConnectionManagerPrivate12buildRequestEjP18MTLCompilerRequestbU13block_pointerFv16MTLCompilerErrorPU27objcproto16OS_dispatch_data8NSObjectPKcE_block_invoke_2;
  v19[3] = &unk_1E0FE37E8;
  v19[4] = a5;
  v19[5] = &v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD *))(*(_QWORD *)v10 + 16))(v10, a3, v11, v12, 0, a4, v19);
  _Block_object_dispose(v22, 8);
  v13 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Block_object_dispose(&v24, 8);
  v16 = v31;
  if (v31)
  {
    v17 = (unint64_t *)&v31->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(v42, 8);
}

void sub_18268647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  _Block_object_dispose(&a27, 8);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v36);
  _Block_object_dispose(&a35, 8);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v35);
  _Block_object_dispose((const void *)(v37 - 192), 8);
  _Block_object_dispose((const void *)(v37 - 144), 8);
  _Block_object_dispose((const void *)(v37 - 112), 8);
  _Unwind_Resume(a1);
}

void XPCCompilerConnection::BuildRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  unsigned int *v8;
  unsigned int v9;
  NSObject *v10;
  _QWORD v11[9];
  int v12;
  char v13;
  _QWORD block[9];
  int v15;
  char v16;

  v8 = (unsigned int *)(a1 + 28);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(NSObject **)(a1 + 8);
  if (a6)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN21XPCCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke;
    block[3] = &unk_1E0FE3700;
    v15 = a5;
    block[6] = a1;
    block[7] = a2;
    block[8] = a3;
    v16 = a6;
    block[4] = a4;
    block[5] = a7;
    dispatch_sync(v10, block);
  }
  else
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = ___ZN21XPCCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_2;
    v11[3] = &unk_1E0FE3700;
    v11[6] = a1;
    v11[7] = a2;
    v11[8] = a3;
    v12 = a5;
    v13 = 0;
    v11[4] = a4;
    v11[5] = a7;
    dispatch_async(v10, v11);
  }
}

uint64_t ___ZN17MTLLibraryBuilder20newLibraryWithSourceEPU19objcproto9MTLDevice11objc_objectP8NSStringP17MTLCompileOptionsbU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorE_block_invoke(uint64_t a1, int a2, int a3, void *__src, size_t __n)
{
  memcpy(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), __src, __n);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += __n;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) -= __n;
  return 1;
}

void ___ZN35MTLCompilerConnectionManagerPrivate12buildRequestEjP18MTLCompilerRequestbU13block_pointerFv16MTLCompilerErrorPU27objcproto16OS_dispatch_data8NSObjectPKcE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  int v30;
  signed int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  signed int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  __int128 v42;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = (uint64_t *)(v2 + 56);
  v4 = *(int *)(v2 + 16);
  if (!(_DWORD)v4)
    goto LABEL_14;
  v5 = 0;
  v6 = &v3[2 * v4];
  v7 = (uint64_t *)(v2 + 56);
  do
  {
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v9)
      ++v5;
    v7 += 2;
  }
  while (v7 != v6);
  if (!v5 || *(_BYTE *)(v2 + 12))
    goto LABEL_14;
  LODWORD(v26) = *(_DWORD *)(v2 + 16);
  if (!(_DWORD)v26)
  {
    v30 = 0x7FFFFFFF;
LABEL_43:
    v33 = v26;
    while (v3[2 * v33])
    {
LABEL_45:
      if (++v33 == 64)
        goto LABEL_14;
    }
    v34 = (uint64_t *)(v2 + 1080 + 16 * v33);
    v42 = 0uLL;
    v35 = (std::__shared_weak_count *)v34[1];
    if (v35)
    {
      *((_QWORD *)&v42 + 1) = std::__shared_weak_count::lock(v35);
      if (*((_QWORD *)&v42 + 1))
      {
        v36 = *v34;
        *(_QWORD *)&v42 = v36;
        if (!v36)
          goto LABEL_54;
LABEL_52:
        v37 = atomic_load((unsigned int *)(v36 + 28));
        if (v37 < v30)
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v33;
          std::shared_ptr<CompilerConnection>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), (uint64_t *)&v42);
          v30 = v37;
        }
        goto LABEL_54;
      }
      v36 = v42;
      if ((_QWORD)v42)
        goto LABEL_52;
    }
LABEL_54:
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    goto LABEL_45;
  }
  v27 = *v3;
  if (*v3)
  {
    v28 = 0;
    v29 = (uint64_t *)(v2 + 72);
    v30 = 0x7FFFFFFF;
    while (1)
    {
      v31 = atomic_load((unsigned int *)(v27 + 28));
      if (!v31)
        break;
      if (v31 < v30)
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v28;
        v30 = v31;
      }
      ++v28;
      v26 = *(int *)(v2 + 16);
      if (v28 >= v26)
        goto LABEL_42;
      v32 = *v29;
      v29 += 2;
      v27 = v32;
      if (!v32)
        goto LABEL_40;
    }
    v30 = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v28;
    LODWORD(v26) = *(_DWORD *)(v2 + 16);
  }
  else
  {
    v28 = 0;
    v30 = 0x7FFFFFFF;
LABEL_40:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v28;
  }
LABEL_42:
  if (v26 <= 0x3F)
    goto LABEL_43;
LABEL_14:
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v14 = *(_QWORD *)(v13 + 24);
  if (v14 == -1)
  {
    *(_QWORD *)(v13 + 24) = 0;
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  if (!v3[2 * v14])
  {
    v41 = *(_DWORD *)(v2 + 8);
    std::allocate_shared[abi:ne180100]<XPCCompilerConnection,std::allocator<XPCCompilerConnection>,int,void>(&v41, &v42);
    std::shared_ptr<std::unordered_map<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*>>>>::operator=[abi:ne180100]((uint64_t)&v3[2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)], &v42);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v15 = *(_DWORD *)(a1 + 80);
  if (v15)
  {
    v16 = (_QWORD *)(*(_QWORD *)(v2 + 32) + 16 * (v15 - 1));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *v16;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = v16[1];
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v19 = *(_QWORD *)(v17 + 48);
  v18 = (uint64_t *)(v17 + 48);
  if (!v19)
    v18 = &v3[2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)];
  std::shared_ptr<CompilerConnection>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48), v18);
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v22 = *(_QWORD *)(v20 + 48);
  v21 = (_QWORD *)(v20 + 48);
  if (v22)
    std::shared_ptr<CompilerConnection>::reset[abi:ne180100](v21);
}

char *___getForcedLanguageVersion_block_invoke()
{
  char *result;
  const char *v1;

  result = getenv("MTL_FORCE_LANGUAGE_VERSION");
  if (result)
  {
    v1 = result;
    sscanf(result, "%d_%d", &_getForcedLanguageVersion::major, &_getForcedLanguageVersion::minor);
    return (char *)fprintf((FILE *)*MEMORY[0x1E0C80C10], "Using MTLLanguageVersion%d_%d (set with MTL_FORCE_LANGUAGE_VERSION=%s)\n", _getForcedLanguageVersion::major, _getForcedLanguageVersion::minor, v1);
  }
  return result;
}

uint64_t ___ZL25getDefaultLanguageVersioni_block_invoke()
{
  int v0;
  int v1;
  unint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (_getForcedLanguageVersion::onceToken != -1)
    dispatch_once(&_getForcedLanguageVersion::onceToken, &__block_literal_global_49);
  v0 = _getForcedLanguageVersion::major;
  v1 = _getForcedLanguageVersion::minor;
  getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 65537;
  if (dyld_program_sdk_at_least())
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 65538;
  if (dyld_program_sdk_at_least())
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 0x20000;
  if (dyld_program_sdk_at_least())
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 131073;
  if (dyld_program_sdk_at_least())
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 131074;
  if (dyld_program_sdk_at_least())
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 131075;
  if (dyld_program_sdk_at_least())
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 131076;
  v2 = v1 | (v0 << 16);
  if (dyld_program_sdk_at_least())
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 196608;
  if (dyld_program_sdk_at_least())
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 196609;
  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 196610;
  if ((_DWORD)v2)
  {
    v4 = getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion;
    if (getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion >= v2)
      v4 = v2;
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = v4;
  }
  return result;
}

void bufferTypeMap(void)::$_0::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::string __p;
  std::string v4;
  std::string v5;
  std::string v6;
  std::string v7;
  std::string __s;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;
  std::string v113;
  std::string v114;
  std::string v115;
  std::string v116;
  std::string v117;
  std::string v118;
  std::string v119;
  std::string v120;
  std::string v121;
  std::string v122;
  std::string v123;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string v127;
  std::string v128;
  std::string v129;
  std::string v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string v135;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string v157;
  std::string v158;
  std::string v159;
  std::string v160;
  std::string v161;
  std::string v162;
  std::string v163;
  std::string v164;
  std::string v165;
  std::string v166;
  std::string v167;
  std::string v168;
  std::string v169;
  std::string v170;
  std::string v171;
  std::string v172;
  std::string v173;
  std::string v174;
  std::string v175;
  __int128 v176;
  std::string v177;
  __int128 v178;
  std::string v179;
  __int128 v180;
  std::string v181;
  __int128 v182;
  std::string v183;
  __int128 v184;
  std::string v185;
  __int128 v186;
  std::string v187;
  __int128 v188;
  std::string v189;
  __int128 v190;
  std::string v191;
  __int128 v192;
  std::string v193;
  __int128 v194;
  std::string v195;
  __int128 v196;
  std::string v197;
  __int128 v198;
  std::string v199;
  __int128 v200;
  std::string v201;
  __int128 v202;
  std::string v203;
  __int128 v204;
  std::string v205;
  __int128 v206;
  std::string v207;
  __int128 v208;
  std::string v209;
  __int128 v210;
  std::string v211;
  __int128 v212;
  std::string v213;
  __int128 v214;
  std::string v215;
  __int128 v216;
  std::string v217;
  __int128 v218;
  std::string v219;
  __int128 v220;
  std::string v221;
  __int128 v222;
  std::string v223;
  __int128 v224;
  std::string v225;
  __int128 v226;
  std::string v227;
  __int128 v228;
  std::string v229;
  __int128 v230;
  std::string v231;
  __int128 v232;
  std::string v233;
  __int128 v234;
  std::string v235;
  __int128 v236;
  std::string v237;
  __int128 v238;
  std::string v239;
  __int128 v240;
  std::string v241;
  __int128 v242;
  std::string v243;
  __int128 v244;
  std::string v245;
  __int128 v246;
  std::string v247;
  __int128 v248;
  std::string v249;
  __int128 v250;
  std::string v251;
  __int128 v252;
  std::string v253;
  __int128 v254;
  std::string v255;
  __int128 v256;
  std::string v257;
  __int128 v258;
  std::string v259;
  __int128 v260;
  std::string v261;
  __int128 v262;
  std::string v263;
  __int128 v264;
  std::string v265;
  __int128 v266;
  std::string v267;
  __int128 v268;
  std::string v269;
  __int128 v270;
  std::string v271;
  __int128 v272;
  std::string v273;
  __int128 v274;
  std::string v275;
  __int128 v276;
  std::string v277;
  __int128 v278;
  std::string v279;
  __int128 v280;
  std::string v281;
  __int128 v282;
  std::string v283;
  __int128 v284;
  std::string v285;
  __int128 v286;
  std::string v287;
  __int128 v288;
  std::string v289;
  __int128 v290;
  std::string v291;
  __int128 v292;
  std::string v293;
  __int128 v294;
  std::string v295;
  __int128 v296;
  std::string v297;
  __int128 v298;
  std::string v299;
  __int128 v300;
  std::string v301;
  __int128 v302;
  std::string v303;
  __int128 v304;
  std::string v305;
  __int128 v306;
  std::string v307;
  __int128 v308;
  std::string v309;
  __int128 v310;
  std::string v311;
  __int128 v312;
  std::string v313;
  __int128 v314;
  std::string v315;
  __int128 v316;
  std::string v317;
  __int128 v318;
  std::string v319;
  __int128 v320;
  std::string v321;
  __int128 v322;
  std::string v323;
  __int128 v324;
  std::string v325;
  __int128 v326;
  std::string v327;
  __int128 v328;
  std::string v329;
  __int128 v330;
  std::string v331;
  __int128 v332;
  std::string v333;
  __int128 v334;
  std::string v335;
  __int128 v336;
  std::string v337;
  __int128 v338;
  std::string v339;
  __int128 v340;
  std::string v341;
  __int128 v342;
  std::string v343;
  __int128 v344;
  std::string v345;
  __int128 v346;
  std::string v347;
  __int128 v348;
  std::string v349;
  __int128 v350;
  std::string v351;
  __int128 v352;
  std::string v353;
  __int128 v354;
  std::string v355;
  __int128 v356;
  std::string v357;
  __int128 v358;
  std::string v359;
  __int128 v360;
  std::string v361;
  __int128 v362;
  std::string v363;
  __int128 v364;
  std::string v365;
  __int128 v366;
  std::string v367;
  __int128 v368;
  std::string v369;
  __int128 v370;
  std::string v371;
  __int128 v372;
  std::string v373;
  __int128 v374;
  std::string v375;
  __int128 v376;
  std::string v377;
  __int128 v378;
  std::string v379;
  __int128 v380;
  std::string v381;
  __int128 v382;
  std::string v383;
  __int128 v384;
  std::string v385;
  __int128 v386;
  std::string v387;
  __int128 v388;
  std::string v389;
  __int128 v390;
  std::string v391;
  __int128 v392;
  std::string v393;
  __int128 v394;
  std::string v395;
  __int128 v396;
  std::string v397;
  __int128 v398;
  std::string v399;
  __int128 v400;
  std::string v401;
  __int128 v402;
  std::string v403;
  __int128 v404;
  std::string v405;
  __int128 v406;
  std::string v407;
  __int128 v408;
  std::string v409;
  __int128 v410;
  std::string v411;
  __int128 v412;
  std::string v413;
  __int128 v414;
  std::string v415;
  __int128 v416;
  std::string v417;
  __int128 v418;
  std::string v419;
  __int128 v420;
  std::string v421;
  __int128 v422;
  std::string v423;
  __int128 v424;
  std::string v425;
  __int128 v426;
  std::string v427;
  __int128 v428;
  std::string v429;
  __int128 v430;
  std::string v431;
  uint64_t v432;
  uint64_t v433;
  std::string v434;
  __int128 v435;
  std::string v436;
  __int128 v437;
  std::string v438;
  __int128 v439;
  std::string v440;
  __int128 v441;
  std::string v442;
  __int128 v443;
  std::string v444;
  __int128 v445;
  std::string v446;
  __int128 v447;
  std::string v448;
  __int128 v449;
  std::string v450;
  __int128 v451;
  std::string v452;
  __int128 v453;
  std::string v454;
  __int128 v455;
  std::string v456;
  __int128 v457;
  std::string v458;
  __int128 v459;
  std::string v460;
  __int128 v461;
  std::string v462;
  __int128 v463;
  std::string v464;
  __int128 v465;
  std::string v466;
  __int128 v467;
  std::string v468;
  __int128 v469;
  std::string v470;
  __int128 v471;
  std::string v472;
  __int128 v473;
  std::string v474;
  __int128 v475;
  std::string v476;
  __int128 v477;
  std::string v478;
  __int128 v479;
  std::string v480;
  __int128 v481;
  std::string v482;
  __int128 v483;
  std::string v484;
  __int128 v485;
  std::string v486;
  __int128 v487;
  std::string v488;
  __int128 v489;
  std::string v490;
  __int128 v491;
  std::string v492;
  __int128 v493;
  std::string v494;
  __int128 v495;
  std::string v496;
  __int128 v497;
  std::string v498;
  __int128 v499;
  std::string v500;
  __int128 v501;
  std::string v502;
  __int128 v503;
  std::string v504;
  uint64_t v505;
  uint64_t v506;
  std::string v507;
  __int128 v508;
  std::string v509;
  __int128 v510;
  std::string v511;
  __int128 v512;
  std::string v513;
  __int128 v514;
  std::string v515;
  __int128 v516;
  std::string v517;
  __int128 v518;
  std::string v519;
  __int128 v520;
  uint64_t v521;

  MEMORY[0x1E0C80A78](a1);
  v521 = *MEMORY[0x1E0C80C00];
  v1 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v174, "const");
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v175, v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  else
    v175 = v174;
  v176 = xmmword_18281A700;
  std::string::basic_string[abi:ne180100]<0>(&v173, "global");
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v177, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  else
    v177 = v173;
  v178 = xmmword_18281A700;
  std::string::basic_string[abi:ne180100]<0>(&v172, "local");
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v179, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
  else
    v179 = v172;
  v180 = xmmword_18281A700;
  std::string::basic_string[abi:ne180100]<0>(&v171, "constant");
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v181, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  else
    v181 = v171;
  v182 = xmmword_18281A700;
  std::string::basic_string[abi:ne180100]<0>(&v170, "__global");
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v183, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  else
    v183 = v170;
  v184 = xmmword_18281A700;
  std::string::basic_string[abi:ne180100]<0>(&v169, "__constant");
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v185, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  else
    v185 = v169;
  v186 = xmmword_18281A700;
  std::string::basic_string[abi:ne180100]<0>(&v168, "float");
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v187, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  else
    v187 = v168;
  v188 = xmmword_18281A710;
  std::string::basic_string[abi:ne180100]<0>(&v167, "float2");
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v189, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  else
    v189 = v167;
  v190 = xmmword_18281A720;
  std::string::basic_string[abi:ne180100]<0>(&v166, "float3");
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v191, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
  else
    v191 = v166;
  v192 = xmmword_18281A730;
  std::string::basic_string[abi:ne180100]<0>(&v165, "float4");
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v193, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  else
    v193 = v165;
  v194 = xmmword_18281A740;
  std::string::basic_string[abi:ne180100]<0>(&v164, "packed_float");
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v195, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
  else
    v195 = v164;
  v196 = xmmword_18281A710;
  std::string::basic_string[abi:ne180100]<0>(&v163, "packed_float2");
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v197, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  else
    v197 = v163;
  v198 = xmmword_18281A750;
  std::string::basic_string[abi:ne180100]<0>(&v162, "packed_float3");
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v199, v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
  else
    v199 = v162;
  v200 = xmmword_18281A760;
  std::string::basic_string[abi:ne180100]<0>(&v161, "packed_float4");
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v201, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  else
    v201 = v161;
  v202 = xmmword_18281A770;
  std::string::basic_string[abi:ne180100]<0>(&v160, "half");
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v203, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  else
    v203 = v160;
  v204 = xmmword_18281A780;
  std::string::basic_string[abi:ne180100]<0>(&v159, "half2");
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v205, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  else
    v205 = v159;
  v206 = xmmword_18281A790;
  std::string::basic_string[abi:ne180100]<0>(&v158, "half3");
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v207, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
  else
    v207 = v158;
  v208 = xmmword_18281A7A0;
  std::string::basic_string[abi:ne180100]<0>(&v157, "half4");
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v209, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    v209 = v157;
  v210 = xmmword_18281A7B0;
  std::string::basic_string[abi:ne180100]<0>(&v156, "packed_half");
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v211, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
  else
    v211 = v156;
  v212 = xmmword_18281A780;
  std::string::basic_string[abi:ne180100]<0>(&v155, "packed_half2");
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v213, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
  else
    v213 = v155;
  v214 = xmmword_18281A7C0;
  std::string::basic_string[abi:ne180100]<0>(&v154, "packed_half3");
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v215, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
  else
    v215 = v154;
  v216 = xmmword_18281A7D0;
  std::string::basic_string[abi:ne180100]<0>(&v153, "packed_half4");
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v217, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  else
    v217 = v153;
  v218 = xmmword_18281A7E0;
  std::string::basic_string[abi:ne180100]<0>(&v152, "bfloat");
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v219, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  else
    v219 = v152;
  v220 = xmmword_18281A7F0;
  std::string::basic_string[abi:ne180100]<0>(&v151, "bfloat2");
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v221, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
  else
    v221 = v151;
  v222 = xmmword_18281A800;
  std::string::basic_string[abi:ne180100]<0>(&v150, "bfloat3");
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v223, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  else
    v223 = v150;
  v224 = xmmword_18281A810;
  std::string::basic_string[abi:ne180100]<0>(&v149, "bfloat4");
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v225, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
  else
    v225 = v149;
  v226 = xmmword_18281A820;
  std::string::basic_string[abi:ne180100]<0>(&v148, "packed_bfloat");
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v227, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  else
    v227 = v148;
  v228 = xmmword_18281A7F0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "packed_bfloat2");
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v229, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
  else
    v229 = v147;
  v230 = xmmword_18281A830;
  std::string::basic_string[abi:ne180100]<0>(&v146, "packed_bfloat3");
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v231, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    v231 = v146;
  v232 = xmmword_18281A840;
  std::string::basic_string[abi:ne180100]<0>(&v145, "packed_bfloat4");
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v233, v145.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__size_);
  else
    v233 = v145;
  v234 = xmmword_18281A850;
  std::string::basic_string[abi:ne180100]<0>(&v144, "int");
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v235, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
  else
    v235 = v144;
  v236 = xmmword_18281A860;
  std::string::basic_string[abi:ne180100]<0>(&v143, "int2");
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v237, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
  else
    v237 = v143;
  v238 = xmmword_18281A870;
  std::string::basic_string[abi:ne180100]<0>(&v142, "int3");
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v239, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  else
    v239 = v142;
  v240 = xmmword_18281A880;
  std::string::basic_string[abi:ne180100]<0>(&v141, "int4");
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v241, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  else
    v241 = v141;
  v242 = xmmword_18281A890;
  std::string::basic_string[abi:ne180100]<0>(&v140, "packed_int");
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v243, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
  else
    v243 = v140;
  v244 = xmmword_18281A860;
  std::string::basic_string[abi:ne180100]<0>(&v139, "packed_int2");
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v245, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    v245 = v139;
  v246 = xmmword_18281A8A0;
  std::string::basic_string[abi:ne180100]<0>(&v138, "packed_int3");
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v247, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  else
    v247 = v138;
  v248 = xmmword_18281A8B0;
  std::string::basic_string[abi:ne180100]<0>(&v137, "packed_int4");
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v249, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
  else
    v249 = v137;
  v250 = xmmword_18281A8C0;
  std::string::basic_string[abi:ne180100]<0>(&v136, "uint");
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v251, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  else
    v251 = v136;
  v252 = xmmword_18281A8D0;
  std::string::basic_string[abi:ne180100]<0>(&v135, "uint2");
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v253, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
  else
    v253 = v135;
  v254 = xmmword_18281A8E0;
  std::string::basic_string[abi:ne180100]<0>(&v134, "uint3");
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v255, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  else
    v255 = v134;
  v256 = xmmword_18281A8F0;
  std::string::basic_string[abi:ne180100]<0>(&v133, "uint4");
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v257, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  else
    v257 = v133;
  v258 = xmmword_18281A900;
  std::string::basic_string[abi:ne180100]<0>(&v132, "packed_uint");
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v259, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  else
    v259 = v132;
  v260 = xmmword_18281A8D0;
  std::string::basic_string[abi:ne180100]<0>(&v131, "packed_uint2");
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v261, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  else
    v261 = v131;
  v262 = xmmword_18281A910;
  std::string::basic_string[abi:ne180100]<0>(&v130, "packed_uint3");
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v263, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  else
    v263 = v130;
  v264 = xmmword_18281A920;
  std::string::basic_string[abi:ne180100]<0>(&v129, "packed_uint4");
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v265, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
  else
    v265 = v129;
  v266 = xmmword_18281A930;
  std::string::basic_string[abi:ne180100]<0>(&v128, "short");
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v267, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  else
    v267 = v128;
  v268 = xmmword_18281A940;
  std::string::basic_string[abi:ne180100]<0>(&v127, "short2");
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v269, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
  else
    v269 = v127;
  v270 = xmmword_18281A950;
  std::string::basic_string[abi:ne180100]<0>(&v126, "short3");
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v271, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
  else
    v271 = v126;
  v272 = xmmword_18281A960;
  std::string::basic_string[abi:ne180100]<0>(&v125, "short4");
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v273, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
  else
    v273 = v125;
  v274 = xmmword_18281A970;
  std::string::basic_string[abi:ne180100]<0>(&v124, "packed_short");
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v275, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  else
    v275 = v124;
  v276 = xmmword_18281A940;
  std::string::basic_string[abi:ne180100]<0>(&v123, "packed_short2");
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v277, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  else
    v277 = v123;
  v278 = xmmword_18281A980;
  std::string::basic_string[abi:ne180100]<0>(&v122, "packed_short3");
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v279, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  else
    v279 = v122;
  v280 = xmmword_18281A990;
  std::string::basic_string[abi:ne180100]<0>(&v121, "packed_short4");
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v281, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    v281 = v121;
  v282 = xmmword_18281A9A0;
  std::string::basic_string[abi:ne180100]<0>(&v120, "ushort");
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v283, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  else
    v283 = v120;
  v284 = xmmword_18281A9B0;
  std::string::basic_string[abi:ne180100]<0>(&v119, "ushort2");
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v285, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
  else
    v285 = v119;
  v286 = xmmword_18281A9C0;
  std::string::basic_string[abi:ne180100]<0>(&v118, "ushort3");
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v287, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  else
    v287 = v118;
  v288 = xmmword_18281A9D0;
  std::string::basic_string[abi:ne180100]<0>(&v117, "ushort4");
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v289, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
  else
    v289 = v117;
  v290 = xmmword_18281A9E0;
  std::string::basic_string[abi:ne180100]<0>(&v116, "packed_ushort");
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v291, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  else
    v291 = v116;
  v292 = xmmword_18281A9B0;
  std::string::basic_string[abi:ne180100]<0>(&v115, "packed_ushort2");
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v293, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  else
    v293 = v115;
  v294 = xmmword_18281A9F0;
  std::string::basic_string[abi:ne180100]<0>(&v114, "packed_ushort3");
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v295, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  else
    v295 = v114;
  v296 = xmmword_18281AA00;
  std::string::basic_string[abi:ne180100]<0>(&v113, "packed_ushort4");
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v297, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  else
    v297 = v113;
  v298 = xmmword_18281AA10;
  std::string::basic_string[abi:ne180100]<0>(&v112, "char");
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v299, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  else
    v299 = v112;
  v300 = xmmword_18281AA20;
  std::string::basic_string[abi:ne180100]<0>(&v111, "char2");
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v301, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  else
    v301 = v111;
  v302 = xmmword_18281AA30;
  std::string::basic_string[abi:ne180100]<0>(&v110, "char3");
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v303, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
  else
    v303 = v110;
  v304 = xmmword_18281AA40;
  std::string::basic_string[abi:ne180100]<0>(&v109, "char4");
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v305, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  else
    v305 = v109;
  v306 = xmmword_18281AA50;
  std::string::basic_string[abi:ne180100]<0>(&v108, "packed_char");
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v307, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  else
    v307 = v108;
  v308 = xmmword_18281AA20;
  std::string::basic_string[abi:ne180100]<0>(&v107, "packed_char2");
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v309, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  else
    v309 = v107;
  v310 = xmmword_18281AA60;
  std::string::basic_string[abi:ne180100]<0>(&v106, "packed_char3");
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  else
    v311 = v106;
  v312 = xmmword_18281AA70;
  std::string::basic_string[abi:ne180100]<0>(&v105, "packed_char4");
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v313, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
  else
    v313 = v105;
  v314 = xmmword_18281AA80;
  std::string::basic_string[abi:ne180100]<0>(&v104, "uchar");
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v315, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  else
    v315 = v104;
  v316 = xmmword_18281AA90;
  std::string::basic_string[abi:ne180100]<0>(&v103, "uchar2");
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v317, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v317 = v103;
  v318 = xmmword_18281AAA0;
  std::string::basic_string[abi:ne180100]<0>(&v102, "uchar3");
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v319, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
  else
    v319 = v102;
  v320 = xmmword_18281AAB0;
  std::string::basic_string[abi:ne180100]<0>(&v101, "uchar4");
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v321, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
  else
    v321 = v101;
  v322 = xmmword_18281AAC0;
  std::string::basic_string[abi:ne180100]<0>(&v100, "packed_uchar");
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v323, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  else
    v323 = v100;
  v324 = xmmword_18281AA90;
  std::string::basic_string[abi:ne180100]<0>(&v99, "packed_uchar2");
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v325, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    v325 = v99;
  v326 = xmmword_18281AAD0;
  std::string::basic_string[abi:ne180100]<0>(&v98, "packed_uchar3");
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v327, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  else
    v327 = v98;
  v328 = xmmword_18281AAE0;
  std::string::basic_string[abi:ne180100]<0>(&v97, "packed_uchar4");
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v329, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  else
    v329 = v97;
  v330 = xmmword_18281AAF0;
  std::string::basic_string[abi:ne180100]<0>(&v96, "long");
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v331, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
  else
    v331 = v96;
  v332 = xmmword_18281AB00;
  std::string::basic_string[abi:ne180100]<0>(&v95, "long2");
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v333, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v333 = v95;
  v334 = xmmword_18281AB10;
  std::string::basic_string[abi:ne180100]<0>(&v94, "long3");
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v335, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  else
    v335 = v94;
  v336 = xmmword_18281AB20;
  std::string::basic_string[abi:ne180100]<0>(&v93, "long4");
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v337, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  else
    v337 = v93;
  v338 = xmmword_18281AB30;
  std::string::basic_string[abi:ne180100]<0>(&v92, "packed_long");
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v339, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v339 = v92;
  v340 = xmmword_18281AB00;
  std::string::basic_string[abi:ne180100]<0>(&v91, "packed_long2");
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v341, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  else
    v341 = v91;
  v342 = xmmword_18281AB40;
  std::string::basic_string[abi:ne180100]<0>(&v90, "packed_long3");
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v343, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  else
    v343 = v90;
  v344 = xmmword_18281AB50;
  std::string::basic_string[abi:ne180100]<0>(&v89, "packed_long4");
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v345, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  else
    v345 = v89;
  v346 = xmmword_18281AB60;
  std::string::basic_string[abi:ne180100]<0>(&v88, "ulong");
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v347, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  else
    v347 = v88;
  v348 = xmmword_18281AB70;
  std::string::basic_string[abi:ne180100]<0>(&v87, "ulong2");
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v349, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  else
    v349 = v87;
  v350 = xmmword_18281AB80;
  std::string::basic_string[abi:ne180100]<0>(&v86, "ulong3");
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v351, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
  else
    v351 = v86;
  v352 = xmmword_18281AB90;
  std::string::basic_string[abi:ne180100]<0>(&v85, "ulong4");
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v353, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  else
    v353 = v85;
  v354 = xmmword_18281ABA0;
  std::string::basic_string[abi:ne180100]<0>(&v84, "packed_ulong");
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v355, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  else
    v355 = v84;
  v356 = xmmword_18281AB70;
  std::string::basic_string[abi:ne180100]<0>(&v83, "packed_ulong2");
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  else
    v357 = v83;
  v358 = xmmword_18281ABB0;
  std::string::basic_string[abi:ne180100]<0>(&v82, "packed_ulong3");
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v359, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  else
    v359 = v82;
  v360 = xmmword_18281ABC0;
  std::string::basic_string[abi:ne180100]<0>(&v81, "packed_ulong4");
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v361, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  else
    v361 = v81;
  v362 = xmmword_18281ABD0;
  std::string::basic_string[abi:ne180100]<0>(&v80, "double");
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v363, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
  else
    v363 = v80;
  v364 = xmmword_18281ABE0;
  std::string::basic_string[abi:ne180100]<0>(&v79, "double2");
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v365, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
  else
    v365 = v79;
  v366 = xmmword_18281ABF0;
  std::string::basic_string[abi:ne180100]<0>(&v78, "double3");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v367, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    v367 = v78;
  v368 = xmmword_18281AC00;
  std::string::basic_string[abi:ne180100]<0>(&v77, "double4");
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v369, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  else
    v369 = v77;
  v370 = xmmword_18281AC10;
  std::string::basic_string[abi:ne180100]<0>(&v76, "packed_double");
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v371, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    v371 = v76;
  v372 = xmmword_18281ABE0;
  std::string::basic_string[abi:ne180100]<0>(&v75, "packed_double2");
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v373, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  else
    v373 = v75;
  v374 = xmmword_18281AC20;
  std::string::basic_string[abi:ne180100]<0>(&v74, "packed_double3");
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v375, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  else
    v375 = v74;
  v376 = xmmword_18281AC30;
  std::string::basic_string[abi:ne180100]<0>(&v73, "packed_double4");
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v377, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  else
    v377 = v73;
  v378 = xmmword_18281AC40;
  std::string::basic_string[abi:ne180100]<0>(&v72, "float8");
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
  else
    v379 = v72;
  v380 = xmmword_18281AC50;
  std::string::basic_string[abi:ne180100]<0>(&v71, "float16");
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v381, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  else
    v381 = v71;
  v382 = xmmword_18281AC60;
  std::string::basic_string[abi:ne180100]<0>(&v70, "half8");
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v383, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  else
    v383 = v70;
  v384 = xmmword_18281AC70;
  std::string::basic_string[abi:ne180100]<0>(&v69, "half16");
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v385, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  else
    v385 = v69;
  v386 = xmmword_18281AC80;
  std::string::basic_string[abi:ne180100]<0>(&v68, "bfloat8");
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v387, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  else
    v387 = v68;
  v388 = xmmword_18281AC90;
  std::string::basic_string[abi:ne180100]<0>(&v67, "bfloat16");
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v389, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  else
    v389 = v67;
  v390 = xmmword_18281ACA0;
  std::string::basic_string[abi:ne180100]<0>(&v66, "int8");
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v391, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v391 = v66;
  v392 = xmmword_18281ACB0;
  std::string::basic_string[abi:ne180100]<0>(&v65, "int16");
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v393, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
  else
    v393 = v65;
  v394 = xmmword_18281ACC0;
  std::string::basic_string[abi:ne180100]<0>(&v64, "uint8");
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v395, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  else
    v395 = v64;
  v396 = xmmword_18281ACD0;
  std::string::basic_string[abi:ne180100]<0>(&v63, "uint16");
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v397, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  else
    v397 = v63;
  v398 = xmmword_18281ACE0;
  std::string::basic_string[abi:ne180100]<0>(&v62, "short8");
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v399, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v399 = v62;
  v400 = xmmword_18281ACF0;
  std::string::basic_string[abi:ne180100]<0>(&v61, "short16");
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v401, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  else
    v401 = v61;
  v402 = xmmword_18281AD00;
  std::string::basic_string[abi:ne180100]<0>(&v60, "ushort8");
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v403, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  else
    v403 = v60;
  v404 = xmmword_18281AD10;
  std::string::basic_string[abi:ne180100]<0>(&v59, "ushort16");
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v405, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    v405 = v59;
  v406 = xmmword_18281AD20;
  std::string::basic_string[abi:ne180100]<0>(&v58, "char8");
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v407, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  else
    v407 = v58;
  v408 = xmmword_18281AD30;
  std::string::basic_string[abi:ne180100]<0>(&v57, "char16");
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v409, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v409 = v57;
  v410 = xmmword_18281AD40;
  std::string::basic_string[abi:ne180100]<0>(&v56, "uchar8");
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v411, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  else
    v411 = v56;
  v412 = xmmword_18281AD50;
  std::string::basic_string[abi:ne180100]<0>(&v55, "uchar16");
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v413, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  else
    v413 = v55;
  v414 = xmmword_18281AD60;
  std::string::basic_string[abi:ne180100]<0>(&v54, "long8");
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v415, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  else
    v415 = v54;
  v416 = xmmword_18281AD70;
  std::string::basic_string[abi:ne180100]<0>(&v53, "long16");
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v417, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    v417 = v53;
  v418 = xmmword_18281AD80;
  std::string::basic_string[abi:ne180100]<0>(&v52, "ulong8");
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v419, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  else
    v419 = v52;
  v420 = xmmword_18281AD90;
  std::string::basic_string[abi:ne180100]<0>(&v51, "ulong16");
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v421, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    v421 = v51;
  v422 = xmmword_18281ADA0;
  std::string::basic_string[abi:ne180100]<0>(&v50, "double8");
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v423, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    v423 = v50;
  v424 = xmmword_18281ADB0;
  std::string::basic_string[abi:ne180100]<0>(&v49, "double16");
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v425, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v425 = v49;
  v426 = xmmword_18281ADC0;
  std::string::basic_string[abi:ne180100]<0>(&v48, "BOOL8");
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v427, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    v427 = v48;
  v428 = xmmword_18281ADD0;
  std::string::basic_string[abi:ne180100]<0>(&v47, "BOOL16");
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v429, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  else
    v429 = v47;
  v430 = xmmword_18281ADE0;
  std::string::basic_string[abi:ne180100]<0>(&v46, "unknown");
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v431, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    v431 = v46;
  v433 = 0;
  v432 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v45, "BOOL");
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v434, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    v434 = v45;
  v435 = xmmword_18281ADF0;
  std::string::basic_string[abi:ne180100]<0>(&v44, "BOOL2");
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v436, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  else
    v436 = v44;
  v437 = xmmword_18281AE00;
  std::string::basic_string[abi:ne180100]<0>(&v43, "BOOL3");
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v438, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v438 = v43;
  v439 = xmmword_18281AE10;
  std::string::basic_string[abi:ne180100]<0>(&v42, "BOOL4");
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v440, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v440 = v42;
  v441 = xmmword_18281AE20;
  std::string::basic_string[abi:ne180100]<0>(&v41, "packed_BOOL");
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v442, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  else
    v442 = v41;
  v443 = xmmword_18281ADF0;
  std::string::basic_string[abi:ne180100]<0>(&v40, "packed_BOOL2");
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v444, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    v444 = v40;
  v445 = xmmword_18281AE30;
  std::string::basic_string[abi:ne180100]<0>(&v39, "packed_BOOL3");
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v446, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    v446 = v39;
  v447 = xmmword_18281AE40;
  std::string::basic_string[abi:ne180100]<0>(&v38, "packed_BOOL4");
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v448, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v448 = v38;
  v449 = xmmword_18281AE50;
  std::string::basic_string[abi:ne180100]<0>(&v37, "float2x2");
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v450, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v450 = v37;
  v451 = xmmword_18281AE60;
  std::string::basic_string[abi:ne180100]<0>(&v36, "float2x3");
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v452, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    v452 = v36;
  v453 = xmmword_18281AE70;
  std::string::basic_string[abi:ne180100]<0>(&v35, "float2x4");
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v454, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  else
    v454 = v35;
  v455 = xmmword_18281AE80;
  std::string::basic_string[abi:ne180100]<0>(&v34, "float3x2");
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v456, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    v456 = v34;
  v457 = xmmword_18281AE90;
  std::string::basic_string[abi:ne180100]<0>(&v33, "float3x3");
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v458, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    v458 = v33;
  v459 = xmmword_18281AEA0;
  std::string::basic_string[abi:ne180100]<0>(&v32, "float3x4");
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v460, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    v460 = v32;
  v461 = xmmword_18281AEB0;
  std::string::basic_string[abi:ne180100]<0>(&v31, "float4x2");
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v462, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  else
    v462 = v31;
  v463 = xmmword_18281AEC0;
  std::string::basic_string[abi:ne180100]<0>(&v30, "float4x3");
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v464, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    v464 = v30;
  v465 = xmmword_18281AED0;
  std::string::basic_string[abi:ne180100]<0>(&v29, "float4x4");
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v466, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v466 = v29;
  v467 = xmmword_18281AEE0;
  std::string::basic_string[abi:ne180100]<0>(&v28, "half2x2");
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v468, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v468 = v28;
  v469 = xmmword_18281AEF0;
  std::string::basic_string[abi:ne180100]<0>(&v27, "half2x3");
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v470, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  else
    v470 = v27;
  v471 = xmmword_18281AF00;
  std::string::basic_string[abi:ne180100]<0>(&v26, "half2x4");
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v472, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    v472 = v26;
  v473 = xmmword_18281AF10;
  std::string::basic_string[abi:ne180100]<0>(&v25, "half3x2");
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v474, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    v474 = v25;
  v475 = xmmword_18281AF20;
  std::string::basic_string[abi:ne180100]<0>(&v24, "half3x3");
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v476, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    v476 = v24;
  v477 = xmmword_18281AF30;
  std::string::basic_string[abi:ne180100]<0>(&v23, "half3x4");
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v478, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  else
    v478 = v23;
  v479 = xmmword_18281AF40;
  std::string::basic_string[abi:ne180100]<0>(&v22, "half4x2");
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v480, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    v480 = v22;
  v481 = xmmword_18281AF50;
  std::string::basic_string[abi:ne180100]<0>(&v21, "half4x3");
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v482, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  else
    v482 = v21;
  v483 = xmmword_18281AF60;
  std::string::basic_string[abi:ne180100]<0>(&v20, "half4x4");
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v484, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    v484 = v20;
  v485 = xmmword_18281AF70;
  std::string::basic_string[abi:ne180100]<0>(&v19, "bfloat2x2");
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v486, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    v486 = v19;
  v487 = xmmword_18281AF80;
  std::string::basic_string[abi:ne180100]<0>(&v18, "bfloat2x3");
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v488, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    v488 = v18;
  v489 = xmmword_18281AF90;
  std::string::basic_string[abi:ne180100]<0>(&v17, "bfloat2x4");
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v490, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  else
    v490 = v17;
  v491 = xmmword_18281AFA0;
  std::string::basic_string[abi:ne180100]<0>(&v16, "bfloat3x2");
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v492, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    v492 = v16;
  v493 = xmmword_18281AFB0;
  std::string::basic_string[abi:ne180100]<0>(&v15, "bfloat3x3");
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v494, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v494 = v15;
  v495 = xmmword_18281AFC0;
  std::string::basic_string[abi:ne180100]<0>(&v14, "bfloat3x4");
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v496, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    v496 = v14;
  v497 = xmmword_18281AFD0;
  std::string::basic_string[abi:ne180100]<0>(&v13, "bfloat4x2");
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v498, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  else
    v498 = v13;
  v499 = xmmword_18281AFE0;
  std::string::basic_string[abi:ne180100]<0>(&v12, "bfloat4x3");
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v500, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v500 = v12;
  v501 = xmmword_18281AFF0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "bfloat4x4");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v502, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v502 = v11;
  v503 = xmmword_18281B000;
  std::string::basic_string[abi:ne180100]<0>(&v10, "void");
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v504, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    v504 = v10;
  v506 = 0;
  v505 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v9, "indirect_command_buffer");
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v507, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    v507 = v9;
  v508 = xmmword_18281B010;
  std::string::basic_string[abi:ne180100]<0>(&__s, "visible_function_table");
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v509, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v509 = __s;
  v510 = xmmword_18281B020;
  std::string::basic_string[abi:ne180100]<0>(&v7, "intersection_function_table");
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v511, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  else
    v511 = v7;
  v512 = xmmword_18281B030;
  std::string::basic_string[abi:ne180100]<0>(&v6, "primitive_acceleration_structure");
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v513, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    v513 = v6;
  v514 = xmmword_18281B040;
  std::string::basic_string[abi:ne180100]<0>(&v5, "instance_acceleration_structure");
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v515, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
  else
    v515 = v5;
  v516 = xmmword_18281B050;
  std::string::basic_string[abi:ne180100]<0>(&v4, "mesh_grid_properties");
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v517, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
  else
    v517 = v4;
  v518 = xmmword_18281B060;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mesh");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v519, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v519 = __p;
  v520 = xmmword_18281B070;
  v2 = 0;
  bufferTypeMap(void)::nonGlobalBufferTypeMap = std::map<std::string,TokenData>::map[abi:ne180100](v1, (const void **)&v175.__r_.__value_.__l.__data_, 172);
  do
  {
    if (SHIBYTE(v519.__r_.__value_.__r.__words[v2 + 2]) < 0)
      operator delete(*(void **)((char *)&v519.__r_.__value_.__l.__data_ + v2 * 8));
    v2 -= 5;
  }
  while (v2 != -860);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
}

void sub_18268B0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  char a68;
  char a72;
  char a73;
  char a74;
  char a75;
  char a76;
  char a77;
  char a78;
  char a79;
  char a80;
  char a81;
  void **v81;
  unint64_t *v82;
  uint64_t v83;
  void **v84;
  void **v85;
  void **v86;
  void **v87;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  if (a50 < 0)
    operator delete(a45);
  if (a56 < 0)
    operator delete(v81[3]);
  if (a62 < 0)
    operator delete(v81[6]);
  if (a68 < 0)
    operator delete(v81[9]);
  if (a72 < 0)
    operator delete(v81[12]);
  if (a73 < 0)
    operator delete(v81[15]);
  if (a74 < 0)
    operator delete(v81[18]);
  if (a75 < 0)
    operator delete(v81[21]);
  if (a76 < 0)
    operator delete(v81[24]);
  if (a77 < 0)
    operator delete(v81[27]);
  if (a78 < 0)
    operator delete(v81[30]);
  if (a79 < 0)
    operator delete(*v87);
  if (a80 < 0)
    operator delete(v87[3]);
  if (a81 < 0)
    operator delete(v87[6]);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(v87[9]);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete(v87[12]);
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete(v87[15]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete(v87[18]);
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete(v87[21]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete(v87[24]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete(v87[27]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete(v87[30]);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete(*v86);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete(v86[3]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete(v86[6]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete(v86[9]);
  if (SLOBYTE(STACK[0x32F]) < 0)
    operator delete(v86[12]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete(v86[15]);
  if (SLOBYTE(STACK[0x35F]) < 0)
    operator delete(v86[18]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete(v86[21]);
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete(v86[24]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete(v86[27]);
  if (SLOBYTE(STACK[0x3BF]) < 0)
    operator delete(v86[30]);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete(*v84);
  if (SLOBYTE(STACK[0x3EF]) < 0)
    operator delete(v84[3]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete(v84[6]);
  if (SLOBYTE(STACK[0x41F]) < 0)
    operator delete(v84[9]);
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete(v84[12]);
  if (SLOBYTE(STACK[0x44F]) < 0)
    operator delete(v84[15]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete(v84[18]);
  if (SLOBYTE(STACK[0x47F]) < 0)
    operator delete(v84[21]);
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete(v84[24]);
  if (SLOBYTE(STACK[0x4AF]) < 0)
    operator delete(v84[27]);
  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete(v84[30]);
  if (SLOBYTE(STACK[0x4DF]) < 0)
    operator delete(*v85);
  if (SLOBYTE(STACK[0x4F7]) < 0)
    operator delete(v85[3]);
  if (SLOBYTE(STACK[0x50F]) < 0)
    operator delete(v85[6]);
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete(v85[9]);
  if (SLOBYTE(STACK[0x53F]) < 0)
    operator delete(v85[12]);
  if (SLOBYTE(STACK[0x557]) < 0)
    operator delete(v85[15]);
  if (SLOBYTE(STACK[0x56F]) < 0)
    operator delete(v85[18]);
  if (SLOBYTE(STACK[0x587]) < 0)
    operator delete(v85[21]);
  if (SLOBYTE(STACK[0x59F]) < 0)
    operator delete(v85[24]);
  if (SLOBYTE(STACK[0x5B7]) < 0)
    operator delete(v85[27]);
  if (SLOBYTE(STACK[0x5CF]) < 0)
    operator delete(v85[30]);
  if (SLOBYTE(STACK[0x5E7]) < 0)
    operator delete((void *)STACK[0x5D0]);
  if (SLOBYTE(STACK[0x5FF]) < 0)
    operator delete((void *)STACK[0x5E8]);
  if (SLOBYTE(STACK[0x617]) < 0)
    operator delete((void *)STACK[0x600]);
  if (SLOBYTE(STACK[0x62F]) < 0)
    operator delete((void *)STACK[0x618]);
  if (SLOBYTE(STACK[0x647]) < 0)
    operator delete((void *)STACK[0x630]);
  if (SLOBYTE(STACK[0x65F]) < 0)
    operator delete((void *)STACK[0x648]);
  if (SLOBYTE(STACK[0x677]) < 0)
    operator delete((void *)STACK[0x660]);
  if (SLOBYTE(STACK[0x68F]) < 0)
    operator delete((void *)STACK[0x678]);
  if (SLOBYTE(STACK[0x6A7]) < 0)
    operator delete((void *)STACK[0x690]);
  if (SLOBYTE(STACK[0x6BF]) < 0)
    operator delete((void *)STACK[0x6A8]);
  if (SLOBYTE(STACK[0x6D7]) < 0)
    operator delete((void *)STACK[0x6C0]);
  if (SLOBYTE(STACK[0x6EF]) < 0)
    operator delete((void *)STACK[0x6D8]);
  if (SLOBYTE(STACK[0x707]) < 0)
    operator delete((void *)STACK[0x6F0]);
  if (SLOBYTE(STACK[0x71F]) < 0)
    operator delete((void *)STACK[0x708]);
  if (SLOBYTE(STACK[0x737]) < 0)
    operator delete((void *)STACK[0x720]);
  if (SLOBYTE(STACK[0x74F]) < 0)
    operator delete((void *)STACK[0x738]);
  if (SLOBYTE(STACK[0x767]) < 0)
    operator delete((void *)STACK[0x750]);
  if (SLOBYTE(STACK[0x77F]) < 0)
    operator delete((void *)STACK[0x768]);
  if (SLOBYTE(STACK[0x797]) < 0)
    operator delete((void *)STACK[0x780]);
  if (SLOBYTE(STACK[0x7AF]) < 0)
    operator delete((void *)STACK[0x798]);
  if (SLOBYTE(STACK[0x7C7]) < 0)
    operator delete((void *)STACK[0x7B0]);
  if (SLOBYTE(STACK[0x7DF]) < 0)
    operator delete((void *)STACK[0x7C8]);
  if (SLOBYTE(STACK[0x7F7]) < 0)
    operator delete((void *)STACK[0x7E0]);
  if (SLOBYTE(STACK[0x80F]) < 0)
    operator delete((void *)STACK[0x7F8]);
  if (SLOBYTE(STACK[0x827]) < 0)
    operator delete((void *)STACK[0x810]);
  if (SLOBYTE(STACK[0x83F]) < 0)
    operator delete((void *)STACK[0x828]);
  if (SLOBYTE(STACK[0x857]) < 0)
    operator delete((void *)STACK[0x840]);
  if (SLOBYTE(STACK[0x86F]) < 0)
    operator delete((void *)STACK[0x858]);
  if (SLOBYTE(STACK[0x887]) < 0)
    operator delete((void *)STACK[0x870]);
  if (SLOBYTE(STACK[0x89F]) < 0)
    operator delete((void *)STACK[0x888]);
  if (SLOBYTE(STACK[0x8B7]) < 0)
    operator delete((void *)STACK[0x8A0]);
  if (SLOBYTE(STACK[0x8CF]) < 0)
    operator delete((void *)STACK[0x8B8]);
  if (SLOBYTE(STACK[0x8E7]) < 0)
    operator delete((void *)STACK[0x8D0]);
  if (SLOBYTE(STACK[0x8FF]) < 0)
    operator delete((void *)STACK[0x8E8]);
  if (SLOBYTE(STACK[0x917]) < 0)
    operator delete((void *)STACK[0x900]);
  if (SLOBYTE(STACK[0x92F]) < 0)
    operator delete((void *)STACK[0x918]);
  if (SLOBYTE(STACK[0x947]) < 0)
    operator delete((void *)STACK[0x930]);
  if (SLOBYTE(STACK[0x95F]) < 0)
    operator delete((void *)STACK[0x948]);
  if (SLOBYTE(STACK[0x977]) < 0)
    operator delete((void *)STACK[0x960]);
  if (SLOBYTE(STACK[0x98F]) < 0)
    operator delete((void *)STACK[0x978]);
  if (SLOBYTE(STACK[0x9A7]) < 0)
    operator delete((void *)STACK[0x990]);
  if (SLOBYTE(STACK[0x9BF]) < 0)
    operator delete((void *)STACK[0x9A8]);
  if (SLOBYTE(STACK[0x9D7]) < 0)
    operator delete((void *)STACK[0x9C0]);
  if (SLOBYTE(STACK[0x9EF]) < 0)
    operator delete((void *)STACK[0x9D8]);
  if (SLOBYTE(STACK[0xA07]) < 0)
    operator delete((void *)STACK[0x9F0]);
  if (SLOBYTE(STACK[0xA1F]) < 0)
    operator delete((void *)STACK[0xA08]);
  if (SLOBYTE(STACK[0xA37]) < 0)
    operator delete((void *)STACK[0xA20]);
  if (SLOBYTE(STACK[0xA4F]) < 0)
    operator delete((void *)STACK[0xA38]);
  if (SLOBYTE(STACK[0xA67]) < 0)
    operator delete((void *)STACK[0xA50]);
  if (SLOBYTE(STACK[0xA7F]) < 0)
    operator delete((void *)STACK[0xA68]);
  if (SLOBYTE(STACK[0xA97]) < 0)
    operator delete((void *)STACK[0xA80]);
  if (SLOBYTE(STACK[0xAAF]) < 0)
    operator delete((void *)STACK[0xA98]);
  if (SLOBYTE(STACK[0xAC7]) < 0)
    operator delete((void *)STACK[0xAB0]);
  if (SLOBYTE(STACK[0xADF]) < 0)
    operator delete((void *)STACK[0xAC8]);
  if (SLOBYTE(STACK[0xAF7]) < 0)
    operator delete((void *)STACK[0xAE0]);
  if (SLOBYTE(STACK[0xB0F]) < 0)
    operator delete((void *)STACK[0xAF8]);
  if (SLOBYTE(STACK[0xB27]) < 0)
    operator delete((void *)STACK[0xB10]);
  if (SLOBYTE(STACK[0xB3F]) < 0)
    operator delete((void *)STACK[0xB28]);
  if (SLOBYTE(STACK[0xB57]) < 0)
    operator delete((void *)STACK[0xB40]);
  if (SLOBYTE(STACK[0xB6F]) < 0)
    operator delete((void *)STACK[0xB58]);
  if (SLOBYTE(STACK[0xB87]) < 0)
    operator delete((void *)STACK[0xB70]);
  if (SLOBYTE(STACK[0xB9F]) < 0)
    operator delete((void *)STACK[0xB88]);
  if (SLOBYTE(STACK[0xBB7]) < 0)
    operator delete((void *)STACK[0xBA0]);
  if (SLOBYTE(STACK[0xBCF]) < 0)
    operator delete((void *)STACK[0xBB8]);
  if (SLOBYTE(STACK[0xBE7]) < 0)
    operator delete((void *)STACK[0xBD0]);
  if (SLOBYTE(STACK[0xBFF]) < 0)
    operator delete((void *)STACK[0xBE8]);
  if (SLOBYTE(STACK[0xC17]) < 0)
    operator delete((void *)STACK[0xC00]);
  if (SLOBYTE(STACK[0xC2F]) < 0)
    operator delete((void *)STACK[0xC18]);
  if (SLOBYTE(STACK[0xC47]) < 0)
    operator delete((void *)STACK[0xC30]);
  if (SLOBYTE(STACK[0xC5F]) < 0)
    operator delete((void *)STACK[0xC48]);
  if (SLOBYTE(STACK[0xC77]) < 0)
    operator delete((void *)STACK[0xC60]);
  if (SLOBYTE(STACK[0xC8F]) < 0)
    operator delete((void *)STACK[0xC78]);
  if (SLOBYTE(STACK[0xCA7]) < 0)
    operator delete((void *)STACK[0xC90]);
  if (SLOBYTE(STACK[0xCBF]) < 0)
    operator delete((void *)STACK[0xCA8]);
  if (SLOBYTE(STACK[0xCD7]) < 0)
    operator delete((void *)STACK[0xCC0]);
  if (SLOBYTE(STACK[0xCEF]) < 0)
    operator delete((void *)STACK[0xCD8]);
  if (SLOBYTE(STACK[0xD07]) < 0)
    operator delete((void *)STACK[0xCF0]);
  if (SLOBYTE(STACK[0xD1F]) < 0)
    operator delete((void *)STACK[0xD08]);
  if (SLOBYTE(STACK[0xD37]) < 0)
    operator delete((void *)STACK[0xD20]);
  if (SLOBYTE(STACK[0xD4F]) < 0)
    operator delete((void *)STACK[0xD38]);
  if (SLOBYTE(STACK[0xD67]) < 0)
    operator delete((void *)STACK[0xD50]);
  if (SLOBYTE(STACK[0xD7F]) < 0)
    operator delete((void *)STACK[0xD68]);
  if (SLOBYTE(STACK[0xD97]) < 0)
    operator delete((void *)STACK[0xD80]);
  if (SLOBYTE(STACK[0xDAF]) < 0)
    operator delete((void *)STACK[0xD98]);
  if (SLOBYTE(STACK[0xDC7]) < 0)
    operator delete((void *)STACK[0xDB0]);
  if (SLOBYTE(STACK[0xDDF]) < 0)
    operator delete((void *)STACK[0xDC8]);
  if (SLOBYTE(STACK[0xDF7]) < 0)
    operator delete((void *)STACK[0xDE0]);
  if (SLOBYTE(STACK[0xE0F]) < 0)
    operator delete((void *)STACK[0xDF8]);
  if (SLOBYTE(STACK[0xE27]) < 0)
    operator delete((void *)STACK[0xE10]);
  if (SLOBYTE(STACK[0xE3F]) < 0)
    operator delete((void *)STACK[0xE28]);
  if (SLOBYTE(STACK[0xE57]) < 0)
    operator delete((void *)STACK[0xE40]);
  if (SLOBYTE(STACK[0xE6F]) < 0)
    operator delete((void *)STACK[0xE58]);
  if (SLOBYTE(STACK[0xE87]) < 0)
    operator delete((void *)STACK[0xE70]);
  if (SLOBYTE(STACK[0xE9F]) < 0)
    operator delete((void *)STACK[0xE88]);
  if (SLOBYTE(STACK[0xEB7]) < 0)
    operator delete((void *)STACK[0xEA0]);
  if (SLOBYTE(STACK[0xECF]) < 0)
    operator delete((void *)STACK[0xEB8]);
  if (SLOBYTE(STACK[0xEE7]) < 0)
    operator delete((void *)STACK[0xED0]);
  if (SLOBYTE(STACK[0xEFF]) < 0)
    operator delete((void *)STACK[0xEE8]);
  if (SLOBYTE(STACK[0xF17]) < 0)
    operator delete((void *)STACK[0xF00]);
  if (SLOBYTE(STACK[0xF2F]) < 0)
    operator delete((void *)STACK[0xF18]);
  if (SLOBYTE(STACK[0xF47]) < 0)
    operator delete((void *)STACK[0xF30]);
  if (SLOBYTE(STACK[0xF5F]) < 0)
    operator delete((void *)STACK[0xF48]);
  if (SLOBYTE(STACK[0xF77]) < 0)
    operator delete((void *)STACK[0xF60]);
  if (SLOBYTE(STACK[0xF8F]) < 0)
    operator delete((void *)STACK[0xF78]);
  if (SLOBYTE(STACK[0xFA7]) < 0)
    operator delete((void *)STACK[0xF90]);
  if (SLOBYTE(STACK[0xFBF]) < 0)
    operator delete((void *)STACK[0xFA8]);
  if (SLOBYTE(STACK[0xFD7]) < 0)
    operator delete((void *)STACK[0xFC0]);
  if (SLOBYTE(STACK[0xFEF]) < 0)
    operator delete((void *)STACK[0xFD8]);
  if (SLOBYTE(STACK[0x1007]) < 0)
    operator delete((void *)STACK[0xFF0]);
  if (SLOBYTE(STACK[0x101F]) < 0)
    operator delete((void *)STACK[0x1008]);
  if (*(char *)(v83 + 23) < 0)
    operator delete(*(void **)v83);
  if (*(char *)(v83 + 47) < 0)
    operator delete(*(void **)(v83 + 24));
  for (; v82 != &STACK[0x1050]; v82 -= 5)
  {
    if (*((char *)v82 - 17) < 0)
      operator delete((void *)*(v82 - 5));
  }
  MEMORY[0x186DABFBC](a10, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_18268C890()
{
  JUMPOUT(0x18268C090);
}

void sub_18268C89C()
{
  JUMPOUT(0x18268C0D8);
}

uint64_t AirReflection::Node::node_as_ThreadPositionInThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266244) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadsPerThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266245) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ImageblockArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 278531) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

void sub_18268CE8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C408329ED7BLL);
  _Unwind_Resume(a1);
}

dispatch_data_t newMeshSerializedObjectOrMeshData<MTLRenderPipelineDescriptorPrivate>(int a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v5;
  int v6;
  id *v7;
  MTLLinkedFunctions *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  const void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  size_t __n;
  size_t v30;
  void *v31;
  uint64_t __src;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v35 = 0;
  v33 = 0;
  v34 = 0;
  __src = 0;
  if (a1)
    v5 = 0;
  else
    v5 = 4;
  v6 = (a3 >> 23) & 2 | v5 | (*(_DWORD *)(a4 + 224) >> 4) & 8;
  LODWORD(v33) = v6;
  v7 = (id *)(a4 + 512);
  if (!a1)
    v7 = (id *)(a4 + 504);
  v8 = (MTLLinkedFunctions *)*v7;
  if (*v7)
  {
    v9 = objc_msgSend(*v7, "functions")
      && -[NSArray count](-[MTLLinkedFunctions functions](v8, "functions"), "count") != 0;
    v10 = -[MTLLinkedFunctions privateFunctions](v8, "privateFunctions")
       && -[NSArray count](-[MTLLinkedFunctions privateFunctions](v8, "privateFunctions"), "count") != 0;
    if (v10 || v9)
    {
      v6 |= 0x10u;
      LODWORD(v33) = v6;
    }
  }
  if (objc_msgSend(*(id *)(a4 + 432), "count"))
  {
    v6 |= 0x10u;
    LODWORD(v33) = v6;
  }
  v11 = (void *)objc_msgSend(*(id *)(a4 + 288), "device");
  v12 = MTLSerializePluginDataDictionary((void *)objc_msgSend(v11, "pluginData"), 0);
  v13 = v12;
  v14 = 12;
  v31 = v11;
  if (v12)
  {
    LODWORD(__src) = 12;
    v14 = v12 + 12;
    v28 = 12;
  }
  else
  {
    v28 = 0;
  }
  v15 = MTLSerializePluginDataDictionary(*(void **)(a4 + 464), 0);
  v16 = v15;
  if (v15)
  {
    HIDWORD(__src) = v14;
    v27 = v14;
    v14 += v15;
    if ((v6 & 0x10) == 0)
    {
LABEL_22:
      __n = 0;
      v30 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 12;
      goto LABEL_25;
    }
  }
  else
  {
    v27 = 0;
    if ((v6 & 0x10) == 0)
      goto LABEL_22;
  }
  v22 = v14 + 16;
  v19 = (const void **)_MTLPopulateLinkedFunctionExtraData(v8);
  v23 = v19[2];
  __n = v23;
  HIDWORD(v33) = v22;
  LODWORD(v34) = (_DWORD)v23;
  v20 = _MTLPopulateGPUCompilerSPIOptionsExtraData(*(void **)(a4 + 432));
  v17 = ((_DWORD)v23 + v22);
  v24 = *(_QWORD *)(v20 + 16);
  v30 = v24;
  HIDWORD(v34) = (_DWORD)v23 + v22;
  v35 = v24;
  v14 = v22 + v23 + v24;
  v18 = v22;
  v21 = 28;
LABEL_25:
  v25 = (char *)malloc_type_malloc(v14, 0x5538FFA8uLL);
  memcpy(v25, &__src, v21);
  if (v19)
  {
    memcpy(&v25[v18], *v19, __n);
    free((void *)*v19);
    MEMORY[0x186DABFBC](v19, 0x1010C40113C0ABBLL);
  }
  if (v20)
  {
    memcpy(&v25[v17], *(const void **)v20, v30);
    free(*(void **)v20);
    MEMORY[0x186DABFBC](v20, 0x1010C40113C0ABBLL);
  }
  if (v13)
    MTLSerializePluginDataDictionary((void *)objc_msgSend(v31, "pluginData"), &v25[v28]);
  if (v16)
    MTLSerializePluginDataDictionary(*(void **)(a4 + 464), &v25[v27]);
  return dispatch_data_create(v25, v14, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
}

dispatch_data_t newMeshSerializedObjectOrMeshData<MTLMeshRenderPipelineDescriptorPrivate>(int a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v5;
  int v6;
  id *v7;
  MTLLinkedFunctions *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  const void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  size_t __n;
  size_t v30;
  void *v31;
  uint64_t __src;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v35 = 0;
  v33 = 0;
  v34 = 0;
  __src = 0;
  if (a1)
    v5 = 0;
  else
    v5 = 4;
  v6 = (a3 >> 23) & 2 | v5 | (*(_DWORD *)(a4 + 60) >> 1) & 8;
  LODWORD(v33) = v6;
  v7 = (id *)(a4 + 216);
  if (!a1)
    v7 = (id *)(a4 + 208);
  v8 = (MTLLinkedFunctions *)*v7;
  if (*v7)
  {
    v9 = objc_msgSend(*v7, "functions")
      && -[NSArray count](-[MTLLinkedFunctions functions](v8, "functions"), "count") != 0;
    v10 = -[MTLLinkedFunctions privateFunctions](v8, "privateFunctions")
       && -[NSArray count](-[MTLLinkedFunctions privateFunctions](v8, "privateFunctions"), "count") != 0;
    if (v10 || v9)
    {
      v6 |= 0x10u;
      LODWORD(v33) = v6;
    }
  }
  if (objc_msgSend(*(id *)(a4 + 176), "count"))
  {
    v6 |= 0x10u;
    LODWORD(v33) = v6;
  }
  v11 = (void *)objc_msgSend(*(id *)(a4 + 96), "device");
  v12 = MTLSerializePluginDataDictionary((void *)objc_msgSend(v11, "pluginData"), 0);
  v13 = v12;
  v14 = 12;
  v31 = v11;
  if (v12)
  {
    LODWORD(__src) = 12;
    v14 = v12 + 12;
    v28 = 12;
  }
  else
  {
    v28 = 0;
  }
  v15 = MTLSerializePluginDataDictionary(*(void **)(a4 + 184), 0);
  v16 = v15;
  if (v15)
  {
    HIDWORD(__src) = v14;
    v27 = v14;
    v14 += v15;
    if ((v6 & 0x10) == 0)
    {
LABEL_22:
      __n = 0;
      v30 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 12;
      goto LABEL_25;
    }
  }
  else
  {
    v27 = 0;
    if ((v6 & 0x10) == 0)
      goto LABEL_22;
  }
  v22 = v14 + 16;
  v19 = (const void **)_MTLPopulateLinkedFunctionExtraData(v8);
  v23 = v19[2];
  __n = v23;
  HIDWORD(v33) = v22;
  LODWORD(v34) = (_DWORD)v23;
  v20 = _MTLPopulateGPUCompilerSPIOptionsExtraData(*(void **)(a4 + 176));
  v17 = ((_DWORD)v23 + v22);
  v24 = *(_QWORD *)(v20 + 16);
  v30 = v24;
  HIDWORD(v34) = (_DWORD)v23 + v22;
  v35 = v24;
  v14 = v22 + v23 + v24;
  v18 = v22;
  v21 = 28;
LABEL_25:
  v25 = (char *)malloc_type_malloc(v14, 0x5538FFA8uLL);
  memcpy(v25, &__src, v21);
  if (v19)
  {
    memcpy(&v25[v18], *v19, __n);
    free((void *)*v19);
    MEMORY[0x186DABFBC](v19, 0x1010C40113C0ABBLL);
  }
  if (v20)
  {
    memcpy(&v25[v17], *(const void **)v20, v30);
    free(*(void **)v20);
    MEMORY[0x186DABFBC](v20, 0x1010C40113C0ABBLL);
  }
  if (v13)
    MTLSerializePluginDataDictionary((void *)objc_msgSend(v31, "pluginData"), &v25[v28]);
  if (v16)
    MTLSerializePluginDataDictionary(*(void **)(a4 + 184), &v25[v27]);
  return dispatch_data_create(v25, v14, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
}

uint64_t _MTLPopulateGPUCompilerSPIOptionsExtraData(void *a1)
{
  uint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  size_t v5;
  uint64_t i;
  void *v7;
  const void *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  __CFString *v13;
  __CFString *v14;
  const void *v15;
  size_t v16;
  size_t v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  v3 = malloc_type_malloc(0x400uLL, 0xFA8FEB0CuLL);
  *(_QWORD *)v2 = v3;
  *v3 = 1668247668;
  *(_OWORD *)(v2 + 8) = xmmword_1827FBB30;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v20 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v20)
  {
    v19 = *(_QWORD *)v22;
    v4 = 4;
    v5 = 1024;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v22 != v19)
          objc_enumerationMutation(a1);
        v7 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        v8 = (const void *)objc_msgSend(v7, "UTF8String", v19);
        v9 = objc_msgSend(v7, "lengthOfBytesUsingEncoding:", 4);
        v10 = v9 + 1;
        if (__CFADD__(v4, v9 + 1))
          abort();
        if (v5 < v4 + v10)
        {
          if (!v5)
          {
            *(_QWORD *)(v2 + 8) = 128;
            v5 = 128;
          }
          while (v5 < v4 + v10)
          {
            if (v5 >> 1 >= ~v5)
              v5 = v4 + v10;
            else
              v5 += v5 >> 1;
          }
          v3 = malloc_type_realloc(v3, v5, 0x227314A4uLL);
          *(_QWORD *)v2 = v3;
          if (!v3)
            abort();
          *(_QWORD *)(v2 + 8) = v5;
          v4 = *(_QWORD *)(v2 + 16);
        }
        memcpy((char *)v3 + v4, v8, v9);
        v3 = *(_DWORD **)v2;
        v11 = *(_QWORD *)(v2 + 16);
        *(_BYTE *)(*(_QWORD *)v2 + v11 + v9) = 0;
        v12 = v11 + v10;
        *(_QWORD *)(v2 + 16) = v11 + v10;
        v13 = (__CFString *)objc_msgSend(a1, "objectForKeyedSubscript:", v7);
        if (v13 == (__CFString *)objc_msgSend(MEMORY[0x1E0C99E38], "null"))
        {
          v4 = v12;
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v14 = v13;
          }
          else
          {
            objc_opt_class();
            v14 = &stru_1E0FE5DC8;
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v14 = (__CFString *)-[__CFString stringValue](v13, "stringValue");
          }
          v15 = (const void *)-[__CFString UTF8String](v14, "UTF8String");
          v16 = -[__CFString lengthOfBytesUsingEncoding:](v14, "lengthOfBytesUsingEncoding:", 4);
          v17 = v16 + 1;
          if (__CFADD__(v12, v16 + 1))
            abort();
          v4 = v12 + v17;
          if (v5 < v12 + v17)
          {
            if (!v5)
            {
              *(_QWORD *)(v2 + 8) = 128;
              v5 = 128;
            }
            while (v5 < v4)
            {
              if (v5 >> 1 >= ~v5)
                v5 = v12 + v17;
              else
                v5 += v5 >> 1;
            }
            v3 = malloc_type_realloc(v3, v5, 0x227314A4uLL);
            *(_QWORD *)v2 = v3;
            if (!v3)
              abort();
            *(_QWORD *)(v2 + 8) = v5;
          }
          memcpy((char *)v3 + v12, v15, v16);
          *((_BYTE *)v3 + v12 + v16) = 0;
          *(_QWORD *)(v2 + 16) = v4;
        }
      }
      v20 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v20);
    if (v4 >= 0xFFFFFFFFFFFFFFFCLL)
      abort();
    if (v5 < v4 + 4)
    {
      if (!v5)
      {
        v5 = 128;
        *(_QWORD *)(v2 + 8) = 128;
      }
      while (v5 < v4 + 4)
      {
        if (v5 >> 1 >= ~v5)
          v5 = v4 + 4;
        else
          v5 += v5 >> 1;
      }
      v3 = malloc_type_realloc(v3, v5, 0x227314A4uLL);
      *(_QWORD *)v2 = v3;
      if (!v3)
        abort();
      *(_QWORD *)(v2 + 8) = v5;
      v4 = *(_QWORD *)(v2 + 16);
    }
  }
  else
  {
    v4 = 4;
  }
  *(_DWORD *)((char *)v3 + v4) = 1701733460;
  *(_QWORD *)(v2 + 16) += 4;
  return v2;
}

void sub_18269029C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x1010C40113C0ABBLL);
  _Unwind_Resume(a1);
}

void UsagePayload::UsagePayload(uint64_t a1, UsagePayload *this, int a3, int a4)
{
  std::string::size_type v6;
  uint64_t v7;
  char v8;

  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 4) = a4;
  *(_QWORD *)(a1 + 1032) = 0;
  if (*((char *)this + 23) < 0)
  {
    v6 = *((_QWORD *)this + 1);
    if (v6 >= 0x401)
    {
      v8 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    v6 = *((unsigned __int8 *)this + 23);
  }
  std::string::copy((const std::string *)this, (std::string::value_type *)(a1 + 8), v6, 0);
  v7 = *((unsigned __int8 *)this + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)this + 1);
  *(_QWORD *)(a1 + 1032) = v7;
  v8 = 1;
LABEL_8:
  *(_BYTE *)(a1 + 1040) = v8;
}

_QWORD *UsagePayload::UsagePayload(_QWORD *__dst, size_t __n, void *__src)
{
  __dst[129] = 0;
  *((_BYTE *)__dst + 1040) = 0;
  if (__n - 1033 >= 0xFFFFFFFFFFFFFBFFLL)
  {
    memcpy(__dst, __src, __n);
    __dst[129] = __n - 8;
    *((_BYTE *)__dst + 1040) = 1;
  }
  return __dst;
}

_QWORD *UsagePayload::serialization@<X0>(UsagePayload *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *a2 = result;
  *result = *((_QWORD *)this + 129) + 8;
  result[1] = this;
  return result;
}

double UsagePayload::getArchiveArch@<D0>(UsagePayload *this@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 __dst;
  uint64_t v6;

  std::string::basic_string[abi:ne180100](&__dst, (char *)this + 8, *((_QWORD *)this + 129));
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v6;
  result = *(double *)this;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)this;
  return result;
}

_QWORD **MTLArchiveUsageDB::MTLArchiveUsageDB(_QWORD **a1, uint64_t *a2)
{
  return MTLVersionedDB::MTLVersionedDB(a1, a2, 4u, 1, 1);
}

void MTLArchiveUsageDB::store(MTLVersionedDB *a1, UsagePayload *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10;
  unsigned int v11;
  size_t *v12;
  _QWORD *v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __darwin_time_t v18;
  timeval v19;
  _BYTE v20[16];
  _BYTE v21[1032];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  gettimeofday(&v19, 0);
  v18 = v19.tv_sec - a5;
  UsagePayload::UsagePayload((uint64_t)v21, a2, a3, a4);
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v17, a1);
  v10 = v17;
  if (v17)
  {
    v11 = *((_DWORD *)a1 + 2);
    v12 = (size_t *)operator new();
    *v12 = 8;
    v12[1] = (size_t)&v18;
    v13 = (_QWORD *)operator new();
    *v13 = v22 + 8;
    v13[1] = v21;
    v14 = mdb_put(v10, v11, v12, (uint64_t)v13, 0);
    MEMORY[0x186DABFBC](v13, 0x1080C4057E67DB5);
    MEMORY[0x186DABFBC](v12, 0x1080C4057E67DB5);
    if (v14)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v15 = mdb_strerror(v14);
        MTLArchiveUsageDB::store((uint64_t)v15, (uint64_t)v20, v16);
      }
    }
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v17);
}

void sub_182690650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&a9);
  _Unwind_Resume(a1);
}

void MTLArchiveUsageDB::prune(MTLArchiveUsageDB *this, uint64_t a2)
{
  __darwin_time_t tv_sec;
  int v5;
  char *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  timeval v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  gettimeofday(&v13, 0);
  tv_sec = v13.tv_sec;
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v12, (MTLVersionedDB *)this);
  if (v12)
  {
    v11 = 0;
    v5 = mdb_cursor_open(v12, this->var1, &v11);
    if (v5)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v6 = mdb_strerror(v5);
        MTLArchiveUsageDB::prune((uint64_t)v6, (uint64_t)v14, v7);
      }
    }
    else
    {
      v8 = mdb_cursor_get(v11, v14, v10, 0);
      v9 = tv_sec - a2;
      while (v8 != -30798)
      {
        if (*(_QWORD *)v14[1] < v9)
          mdb_cursor_del(v11, 32);
        v8 = mdb_cursor_get(v11, v14, v10, 11);
      }
    }
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v12);
}

void sub_1826907CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)va);
  _Unwind_Resume(a1);
}

uint64_t MTLArchiveUsageDB::getPrioritizedList@<X0>(MTLArchiveUsageDB *this@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  char *v5;
  uint64_t v6;
  int i;
  size_t v8;
  size_t v9;
  _DWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *j;
  std::string::size_type size;
  std::string __p;
  std::string::size_type v19;
  size_t v20[2];
  uint64_t v21[2];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  std::string v27;
  std::string __dst[43];
  size_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v25 = 0u;
  v26 = 1065353216;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v23, (MTLVersionedDB *)this);
  if (v23)
  {
    v22 = 0;
    v4 = mdb_cursor_open(v23, this->var1, &v22);
    if (v4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v5 = mdb_strerror(v4);
        MTLArchiveUsageDB::prune((uint64_t)v5, (uint64_t)__dst, v6);
      }
    }
    else
    {
      for (i = mdb_cursor_get(v22, v21, v20, 0); i != -30798; i = mdb_cursor_get(v22, v21, v20, 8))
      {
        if (!MTLVersionedDB::isVersionEntry((uint64_t)this, v21[0], (char *)v21[1]))
        {
          v8 = 0;
          v9 = v20[0];
          v29 = 0;
          v30 = 0;
          if (v20[0] - 1033 >= 0xFFFFFFFFFFFFFBFFLL)
          {
            memcpy(__dst, (const void *)v20[1], v20[0]);
            v8 = v9 - 8;
            v29 = v9 - 8;
            v30 = 1;
          }
          std::string::basic_string[abi:ne180100](&v27, &__dst[0].__r_.__value_.__r.__words[1], v8);
          __p = v27;
          v19 = __dst[0].__r_.__value_.__r.__words[0];
          v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          v10 = std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::tuple<std::string,unsigned int,unsigned int>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,unsigned int,unsigned int>&&>,std::tuple<>>((uint64_t)&v24, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v27);
          ++v10[12];
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      memset(&__p, 0, sizeof(__p));
      v11 = 0;
      if ((_QWORD)v25)
      {
        v12 = (_QWORD *)v25;
        do
        {
          ++v11;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__init_with_size[abi:ne180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>>(&__p, (uint64_t *)v25, 0, v11);
      v13 = 126
          - 2
          * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
      if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
        v14 = 0;
      else
        v14 = v13;
      std::__introsort<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *,false>((uint64_t)__p.__r_.__value_.__l.__data_, (_QWORD *)__p.__r_.__value_.__l.__size_, v14, 1);
      size = __p.__r_.__value_.__l.__size_;
      for (j = (__int128 *)__p.__r_.__value_.__r.__words[0]; j != (__int128 *)size; j = (__int128 *)((char *)j + 40))
      {
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,unsigned int,unsigned int>::__tuple_impl(__dst, j);
        std::vector<std::tuple<std::string,unsigned int,unsigned int>>::push_back[abi:ne180100](a2, (__int128 *)__dst);
        if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst[0].__r_.__value_.__l.__data_);
      }
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
    }
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v23);
  return std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)&v24);
}

void sub_182690A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E0FDDE70, MEMORY[0x1E0DE42D0]);
}

void sub_182690C20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::vector<std::tuple<std::string,unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<std::string,unsigned int,unsigned int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::tuple<std::string,unsigned int,unsigned int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void *std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::tuple<std::string,unsigned int,unsigned int>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,unsigned int,unsigned int>&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  _QWORD *v18;
  __int128 *v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _BYTE v31[8];
  uint64_t v32;
  char v33;

  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v31, a2);
  v9 = *(unsigned int *)(a2 + 28);
  v10 = v8 ^ (2 * *(unsigned int *)(a2 + 24));
  v11 = v10 ^ (4 * v9);
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10 ^ (4 * v9);
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>((uint64_t)v31, (unsigned __int8 *)i + 16, (unsigned __int8 *)a2)&& *((_DWORD *)i + 10) == *(_DWORD *)(a2 + 24)&& *((_DWORD *)i + 11) == *(_DWORD *)(a2 + 28))
          {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  v18 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  v32 = a1 + 16;
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v11;
  v19 = *a4;
  v20 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v20;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = 0;
  *((_DWORD *)i + 10) = *((_DWORD *)v19 + 6);
  *((_DWORD *)i + 11) = *((_DWORD *)v19 + 7);
  *((_DWORD *)i + 12) = 0;
  v33 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v12 || (float)(v22 * (float)v12) < v21)
  {
    v23 = 1;
    if (v12 >= 3)
      v23 = (v12 & (v12 - 1)) != 0;
    v24 = v23 | (2 * v12);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v26);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *(_QWORD *)i = *v28;
LABEL_40:
    *v28 = i;
    goto LABEL_41;
  }
  *(_QWORD *)i = *v18;
  *v18 = i;
  *(_QWORD *)(v27 + 8 * v4) = v18;
  if (*(_QWORD *)i)
  {
    v29 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_182690F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

std::string *std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__init_with_size[abi:ne180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>>(std::string *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1826915B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)a2;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,unsigned int,unsigned int>::__tuple_impl(v4, v6 + 1);
      LODWORD(v4[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)v6 + 12);
      v6 = *(__int128 **)v6;
      v4 = (std::string *)((char *)v11 + 40);
      v11 = (std::string *)((char *)v11 + 40);
    }
    while (v6 != (__int128 *)a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_182691710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,unsigned int,unsigned int>::__tuple_impl(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  HIDWORD(this[1].__r_.__value_.__r.__words[0]) = *((_DWORD *)a2 + 7);
  return this;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 17) < 0)
      operator delete(*(void **)(v1 - 40));
    v1 -= 40;
  }
}

void std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

void std::__introsort<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *,false>(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  __int128 v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  __int128 v52;
  int v53;
  int v54;
  int v55;
  _QWORD *v56;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  __n128 *v73;
  unsigned __int32 v74;
  unsigned __int32 v75;
  unsigned __int32 v76;
  __n128 *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int32 v81;
  unsigned __int32 v82;
  int64_t v83;
  void **v84;
  uint64_t v85;
  void **v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v103;
  _QWORD *v104;
  unsigned int v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  __int128 *v112;
  __int128 *v113;
  __int128 *v114;
  unsigned __int8 v115;
  int v116;
  unint64_t v118;
  void *v119;
  unint64_t v120;
  char v121;
  char v122;
  _BYTE v123[15];
  _BYTE v124[15];
  _BYTE v125[15];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _BYTE v130[15];
  _BYTE v131[15];
  _BYTE v132[15];
  _BYTE v133[15];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

LABEL_1:
  v113 = (__int128 *)(a2 - 10);
  v114 = (__int128 *)(a2 - 5);
  v112 = (__int128 *)(a2 - 15);
  v7 = a1;
  v120 = (unint64_t)a2;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((_DWORD *)a2 - 2) > *(_DWORD *)(a1 + 32))
        {
          v137 = *(_QWORD *)(a1 + 16);
          v129 = *(_OWORD *)a1;
          v52 = *(_OWORD *)(a2 - 5);
          *(_QWORD *)(a1 + 16) = *(a2 - 3);
          *(_OWORD *)a1 = v52;
          *(a2 - 3) = v137;
          *(_OWORD *)(a2 - 5) = v129;
          v53 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 - 4);
          *((_DWORD *)a2 - 4) = v53;
          v54 = *(_DWORD *)(a1 + 28);
          *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 - 3);
          *((_DWORD *)a2 - 3) = v54;
          v55 = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v55;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((__int128 *)a1, (__int128 *)(a1 + 40), v114);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(a1, a1 + 40, a1 + 80, (uint64_t)v114);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *,0>((__n128 *)a1, (__n128 *)(a1 + 40), (__n128 *)(a1 + 80), (__n128 *)(a1 + 120), (__n128 *)v114);
        return;
      default:
        if (v8 <= 959)
        {
          v56 = (_QWORD *)(a1 + 40);
          v58 = (_QWORD *)a1 == a2 || v56 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = a1;
              do
              {
                v61 = v56;
                v62 = *(_DWORD *)(v60 + 72);
                if (v62 > *(_DWORD *)(v60 + 32))
                {
                  v63 = *v56;
                  *(_QWORD *)v130 = *(_QWORD *)(v60 + 48);
                  *(_QWORD *)&v130[7] = *(_QWORD *)(v60 + 55);
                  v64 = *(_BYTE *)(v60 + 63);
                  v56[1] = 0;
                  v56[2] = 0;
                  *v56 = 0;
                  v65 = *(_QWORD *)(v60 + 64);
                  v66 = v59;
                  while (1)
                  {
                    v67 = a1 + v66;
                    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1 + v66 + 40, (__n128 *)(a1 + v66));
                    *(_DWORD *)(a1 + v66 + 72) = *(_DWORD *)(a1 + v66 + 32);
                    if (!v66)
                      break;
                    v66 -= 40;
                    if (v62 <= *(_DWORD *)(v67 - 8))
                    {
                      v68 = a1 + v66 + 40;
                      goto LABEL_79;
                    }
                  }
                  v68 = a1;
LABEL_79:
                  if (*(char *)(v68 + 23) < 0)
                    operator delete(*(void **)v68);
                  *(_QWORD *)v68 = v63;
                  *(_QWORD *)(v68 + 8) = *(_QWORD *)v130;
                  *(_QWORD *)(v68 + 15) = *(_QWORD *)&v130[7];
                  *(_BYTE *)(v68 + 23) = v64;
                  *(_QWORD *)(v68 + 24) = v65;
                  *(_DWORD *)(v68 + 32) = v62;
                }
                v56 = v61 + 5;
                v59 += 40;
                v60 = (uint64_t)v61;
              }
              while (v61 + 5 != (_QWORD *)v120);
            }
          }
          else if (!v58)
          {
            v103 = (unsigned int *)(a1 + 72);
            do
            {
              v104 = v56;
              v105 = *(_DWORD *)(a1 + 72);
              if (v105 > *(_DWORD *)(a1 + 32))
              {
                v106 = *v56;
                *(_QWORD *)v133 = *(_QWORD *)(a1 + 48);
                *(_QWORD *)&v133[7] = *(_QWORD *)(a1 + 55);
                v107 = *(_BYTE *)(a1 + 63);
                v56[1] = 0;
                v56[2] = 0;
                *v56 = 0;
                v108 = *(_QWORD *)(a1 + 64);
                v109 = v103;
                do
                {
                  v110 = v109;
                  std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>((uint64_t)(v109 - 8), (__n128 *)(v109 - 18));
                  v111 = *(v109 - 10);
                  v109 -= 10;
                  *v110 = v111;
                }
                while (v105 > *(v110 - 20));
                if (*((char *)v109 - 9) < 0)
                  operator delete(*((void **)v109 - 4));
                *((_QWORD *)v109 - 4) = v106;
                *(_QWORD *)((char *)v109 - 17) = *(_QWORD *)&v133[7];
                *((_QWORD *)v109 - 3) = *(_QWORD *)v133;
                *((_BYTE *)v109 - 9) = v107;
                *((_QWORD *)v109 - 1) = v108;
                *v109 = v105;
              }
              v56 = v104 + 5;
              v103 += 10;
              a1 = (uint64_t)v104;
            }
            while (v104 + 5 != (_QWORD *)v120);
          }
          return;
        }
        if (!a3)
        {
          if ((_QWORD *)a1 != a2)
          {
            v69 = (unint64_t)(v9 - 2) >> 1;
            v70 = v69;
            do
            {
              v71 = v70;
              if (v69 >= v70)
              {
                v72 = (2 * v70) | 1;
                v73 = (__n128 *)(a1 + 40 * v72);
                if (2 * v71 + 2 < v9)
                {
                  v74 = *(_DWORD *)(a1 + 40 * v72 + 32);
                  v75 = v73[4].n128_u32[2];
                  v73 = (__n128 *)((char *)v73 + 40 * (v74 > v75));
                  if (v74 > v75)
                    v72 = 2 * v71 + 2;
                }
                v76 = *(_DWORD *)(a1 + 40 * v71 + 32);
                if (v73[2].n128_u32[0] <= v76)
                {
                  v77 = (__n128 *)(a1 + 40 * v71);
                  v118 = v77->n128_u64[0];
                  *(_QWORD *)&v131[7] = *(unint64_t *)((char *)&v77->n128_u64[1] + 7);
                  *(_QWORD *)v131 = v77->n128_u64[1];
                  v115 = v77[1].n128_u8[7];
                  v77->n128_u64[0] = 0;
                  v77->n128_u64[1] = 0;
                  v77[1].n128_u64[0] = 0;
                  v78 = v77[1].n128_u64[1];
                  do
                  {
                    v79 = (uint64_t)v77;
                    v77 = v73;
                    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v79, v73);
                    *(_DWORD *)(v79 + 32) = v77[2].n128_u32[0];
                    if (v69 < v72)
                      break;
                    v80 = (2 * v72) | 1;
                    v73 = (__n128 *)(a1 + 40 * v80);
                    if (2 * v72 + 2 < v9)
                    {
                      v81 = *(_DWORD *)(a1 + 40 * v80 + 32);
                      v82 = v73[4].n128_u32[2];
                      v73 = (__n128 *)((char *)v73 + 40 * (v81 > v82));
                      if (v81 > v82)
                        v80 = 2 * v72 + 2;
                    }
                    v72 = v80;
                  }
                  while (v73[2].n128_u32[0] <= v76);
                  if (v77[1].n128_i8[7] < 0)
                    operator delete((void *)v77->n128_u64[0]);
                  v77->n128_u64[0] = v118;
                  v77->n128_u64[1] = *(_QWORD *)v131;
                  *(unint64_t *)((char *)&v77->n128_u64[1] + 7) = *(_QWORD *)&v131[7];
                  v77[1].n128_u8[7] = v115;
                  v77[1].n128_u64[1] = v78;
                  v77[2].n128_u32[0] = v76;
                }
              }
              v70 = v71 - 1;
            }
            while (v71);
            v83 = v8 / 0x28uLL;
            v84 = (void **)v120;
            do
            {
              v85 = 0;
              v119 = *(void **)a1;
              v86 = v84;
              *(_QWORD *)v125 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)&v125[7] = *(_QWORD *)(a1 + 15);
              v121 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v87 = *(_DWORD *)(a1 + 24);
              v116 = *(_DWORD *)(a1 + 28);
              v88 = a1;
              v89 = *(_DWORD *)(a1 + 32);
              do
              {
                v90 = v85 + 1;
                v91 = v88 + 40 * (v85 + 1);
                v92 = (2 * v85) | 1;
                v93 = 2 * v85 + 2;
                if (v93 < v83)
                {
                  v94 = *(_DWORD *)(v88 + 40 * v90 + 32);
                  v95 = *(_DWORD *)(v91 + 72);
                  v91 += 40 * (v94 > v95);
                  if (v94 > v95)
                    v92 = v93;
                }
                std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v88, (__n128 *)v91);
                *(_DWORD *)(v88 + 32) = *(_DWORD *)(v91 + 32);
                v88 = v91;
                v85 = v92;
              }
              while (v92 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
              v84 -= 5;
              if ((void **)v91 == v86 - 5)
              {
                if (*(char *)(v91 + 23) < 0)
                  operator delete(*(void **)v91);
                *(_QWORD *)v91 = v119;
                *(_QWORD *)(v91 + 8) = *(_QWORD *)v125;
                *(_QWORD *)(v91 + 15) = *(_QWORD *)&v125[7];
                *(_BYTE *)(v91 + 23) = v121;
                *(_DWORD *)(v91 + 24) = v87;
                *(_DWORD *)(v91 + 28) = v116;
                *(_DWORD *)(v91 + 32) = v89;
              }
              else
              {
                std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v91, (__n128 *)(v86 - 5));
                *(_DWORD *)(v91 + 32) = *((_DWORD *)v86 - 2);
                if (*((char *)v86 - 17) < 0)
                  operator delete(*v84);
                *(v86 - 5) = v119;
                *(void **)((char *)v86 - 25) = *(void **)&v125[7];
                *(v86 - 4) = *(void **)v125;
                *((_BYTE *)v86 - 17) = v121;
                *((_DWORD *)v86 - 4) = v87;
                *((_DWORD *)v86 - 3) = v116;
                *((_DWORD *)v86 - 2) = v89;
                v96 = v91 + 40 - a1;
                if (v96 >= 41)
                {
                  v97 = (v96 / 0x28uLL - 2) >> 1;
                  v98 = *(_DWORD *)(v91 + 32);
                  if (*(_DWORD *)(a1 + 40 * v97 + 32) > v98)
                  {
                    v99 = *(void **)v91;
                    *(_QWORD *)v132 = *(_QWORD *)(v91 + 8);
                    *(_QWORD *)&v132[7] = *(_QWORD *)(v91 + 15);
                    v122 = *(_BYTE *)(v91 + 23);
                    *(_QWORD *)(v91 + 8) = 0;
                    *(_QWORD *)(v91 + 16) = 0;
                    *(_QWORD *)v91 = 0;
                    v100 = *(_QWORD *)(v91 + 24);
                    do
                    {
                      v101 = v91;
                      v91 = a1 + 40 * v97;
                      std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v101, (__n128 *)v91);
                      *(_DWORD *)(v101 + 32) = *(_DWORD *)(v91 + 32);
                      if (!v97)
                        break;
                      v97 = (v97 - 1) >> 1;
                    }
                    while (*(_DWORD *)(a1 + 40 * v97 + 32) > v98);
                    if (*(char *)(v91 + 23) < 0)
                      operator delete(*(void **)v91);
                    *(_QWORD *)v91 = v99;
                    *(_QWORD *)(v91 + 15) = *(_QWORD *)&v132[7];
                    *(_QWORD *)(v91 + 8) = *(_QWORD *)v132;
                    *(_BYTE *)(v91 + 23) = v122;
                    *(_QWORD *)(v91 + 24) = v100;
                    *(_DWORD *)(v91 + 32) = v98;
                  }
                }
              }
            }
            while (v83-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = a1 + 40 * ((unint64_t)v9 >> 1);
        if ((unint64_t)v8 < 0x1401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((__int128 *)v11, (__int128 *)a1, v114);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((__int128 *)a1, (__int128 *)v11, v114);
          v12 = 5 * v10;
          v13 = a1 + 8 * v12;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((__int128 *)(a1 + 40), (__int128 *)(v13 - 40), v113);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((__int128 *)(a1 + 80), (__int128 *)(a1 + 40 + 8 * v12), v112);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((__int128 *)(v13 - 40), (__int128 *)v11, (__int128 *)(a1 + 40 + 8 * v12));
          v134 = *(_QWORD *)(a1 + 16);
          v126 = *(_OWORD *)a1;
          v14 = *(_QWORD *)(v11 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v11;
          *(_QWORD *)(a1 + 16) = v14;
          *(_QWORD *)(v11 + 16) = v134;
          *(_OWORD *)v11 = v126;
          v15 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(v11 + 24);
          *(_QWORD *)(v11 + 24) = v15;
          LODWORD(v14) = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(v13 + 32);
          *(_DWORD *)(v13 + 32) = v14;
        }
        --a3;
        a2 = (_QWORD *)v120;
        if ((a4 & 1) == 0)
        {
          v16 = *(_DWORD *)(a1 + 32);
          if (*(_DWORD *)(a1 - 8) > v16)
            goto LABEL_11;
          v36 = *(_QWORD *)a1;
          *(_QWORD *)v124 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v124[7] = *(_QWORD *)(a1 + 15);
          v37 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v16 <= *(_DWORD *)(v120 - 8))
          {
            v40 = a1 + 40;
            do
            {
              v7 = v40;
              if (v40 >= v120)
                break;
              v41 = *(_DWORD *)(v40 + 32);
              v40 += 40;
            }
            while (v16 <= v41);
          }
          else
          {
            v38 = a1;
            do
            {
              v7 = v38 + 40;
              v39 = *(_DWORD *)(v38 + 72);
              v38 += 40;
            }
            while (v16 <= v39);
          }
          v42 = v120;
          if (v7 < v120)
          {
            v43 = v120;
            do
            {
              v42 = v43 - 40;
              v44 = *(_DWORD *)(v43 - 8);
              v43 -= 40;
            }
            while (v16 > v44);
          }
          v45 = *(_QWORD *)(a1 + 24);
          while (v7 < v42)
          {
            v136 = *(_QWORD *)(v7 + 16);
            v128 = *(_OWORD *)v7;
            v46 = *(_OWORD *)v42;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v42 + 16);
            *(_OWORD *)v7 = v46;
            *(_QWORD *)(v42 + 16) = v136;
            *(_OWORD *)v42 = v128;
            v47 = *(_DWORD *)(v7 + 24);
            *(_DWORD *)(v7 + 24) = *(_DWORD *)(v42 + 24);
            *(_DWORD *)(v42 + 24) = v47;
            v48 = *(_DWORD *)(v7 + 28);
            *(_DWORD *)(v7 + 28) = *(_DWORD *)(v42 + 28);
            *(_DWORD *)(v42 + 28) = v48;
            v49 = *(_DWORD *)(v7 + 32);
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(v42 + 32);
            *(_DWORD *)(v42 + 32) = v49;
            do
            {
              v50 = *(_DWORD *)(v7 + 72);
              v7 += 40;
            }
            while (v16 <= v50);
            do
            {
              v51 = *(_DWORD *)(v42 - 8);
              v42 -= 40;
            }
            while (v16 > v51);
          }
          if (v7 - 40 != a1)
          {
            std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1, (__n128 *)(v7 - 40));
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v7 - 8);
          }
          if (*(char *)(v7 - 17) < 0)
            operator delete(*(void **)(v7 - 40));
          a4 = 0;
          *(_QWORD *)(v7 - 40) = v36;
          *(_QWORD *)(v7 - 25) = *(_QWORD *)&v124[7];
          *(_QWORD *)(v7 - 32) = *(_QWORD *)v124;
          *(_BYTE *)(v7 - 17) = v37;
          *(_QWORD *)(v7 - 16) = v45;
          *(_DWORD *)(v7 - 8) = v16;
          continue;
        }
        v16 = *(_DWORD *)(a1 + 32);
LABEL_11:
        v17 = 0;
        v18 = *(_QWORD *)a1;
        *(_QWORD *)v123 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v123[7] = *(_QWORD *)(a1 + 15);
        v19 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v20 = *(_QWORD *)(a1 + 24);
        do
        {
          v21 = *(_DWORD *)(a1 + v17 + 72);
          v17 += 40;
        }
        while (v21 > v16);
        v22 = a1 + v17;
        v23 = v120;
        if (v17 == 40)
        {
          v26 = v120;
          while (v22 < v26)
          {
            v24 = v26 - 40;
            v27 = *(_DWORD *)(v26 - 8);
            v26 -= 40;
            if (v27 > v16)
              goto LABEL_21;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = v23 - 40;
            v25 = *(_DWORD *)(v23 - 8);
            v23 -= 40;
          }
          while (v25 <= v16);
        }
LABEL_21:
        v7 = v22;
        if (v22 < v24)
        {
          v28 = v24;
          do
          {
            v135 = *(_QWORD *)(v7 + 16);
            v127 = *(_OWORD *)v7;
            v29 = *(_OWORD *)v28;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v28 + 16);
            *(_OWORD *)v7 = v29;
            *(_QWORD *)(v28 + 16) = v135;
            *(_OWORD *)v28 = v127;
            v30 = *(_DWORD *)(v7 + 24);
            *(_DWORD *)(v7 + 24) = *(_DWORD *)(v28 + 24);
            *(_DWORD *)(v28 + 24) = v30;
            v31 = *(_DWORD *)(v7 + 28);
            *(_DWORD *)(v7 + 28) = *(_DWORD *)(v28 + 28);
            *(_DWORD *)(v28 + 28) = v31;
            v32 = *(_DWORD *)(v7 + 32);
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(v28 + 32);
            *(_DWORD *)(v28 + 32) = v32;
            do
            {
              v33 = *(_DWORD *)(v7 + 72);
              v7 += 40;
            }
            while (v33 > v16);
            do
            {
              v34 = *(_DWORD *)(v28 - 8);
              v28 -= 40;
            }
            while (v34 <= v16);
          }
          while (v7 < v28);
        }
        if (v7 - 40 != a1)
        {
          std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1, (__n128 *)(v7 - 40));
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(v7 - 8);
        }
        if (*(char *)(v7 - 17) < 0)
          operator delete(*(void **)(v7 - 40));
        *(_QWORD *)(v7 - 40) = v18;
        *(_QWORD *)(v7 - 25) = *(_QWORD *)&v123[7];
        *(_QWORD *)(v7 - 32) = *(_QWORD *)v123;
        *(_BYTE *)(v7 - 17) = v19;
        *(_QWORD *)(v7 - 16) = v20;
        *(_DWORD *)(v7 - 8) = v16;
        if (v22 < v24)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *,false>(a1, v7 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(a1, v7 - 40);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(v7, v120))
        {
          if (v35)
            continue;
          goto LABEL_34;
        }
        a2 = (_QWORD *)(v7 - 40);
        if (!v35)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - (_QWORD)v8;
    v10 = (uint64_t)(a2 - (_QWORD)v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v81 = *(_QWORD *)(a2 - 32);
        v80 = a2 - 32;
        v82 = bswap64(v81);
        v83 = bswap64(*v8);
        if (v82 == v83
          && (v82 = bswap64(*(_QWORD *)(v80 + 8)), v83 = bswap64(v8[1]), v82 == v83)
          && (v82 = bswap64(*(_QWORD *)(v80 + 16)), v83 = bswap64(v8[2]), v82 == v83)
          && (v82 = bswap64(*(_QWORD *)(v80 + 24)), v83 = bswap64(v8[3]), v82 == v83))
        {
          v84 = 0;
        }
        else if (v82 < v83)
        {
          v84 = -1;
        }
        else
        {
          v84 = 1;
        }
        if (v84 < 0)
        {
          v191 = *(__n128 *)v8;
          v200 = *((_OWORD *)v8 + 1);
          v153 = *(_OWORD *)(v80 + 16);
          *(_OWORD *)v8 = *(_OWORD *)v80;
          *((_OWORD *)v8 + 1) = v153;
          result = v191;
          *(__n128 *)v80 = v191;
          *(_OWORD *)(v80 + 16) = v200;
        }
        return result;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, (unint64_t *)(a2 - 32));
        return result;
      case 4uLL:
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, v8 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
        return result;
      case 5uLL:
        v85 = v8 + 4;
        v86 = v8 + 8;
        v87 = v8 + 12;
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, v8 + 8, v8 + 12).n128_u64[0];
        v89 = *(_QWORD *)(a2 - 32);
        v88 = a2 - 32;
        v90 = bswap64(v89);
        v91 = bswap64(v8[12]);
        if (v90 == v91
          && (v90 = bswap64(*(_QWORD *)(v88 + 8)), v91 = bswap64(v8[13]), v90 == v91)
          && (v90 = bswap64(*(_QWORD *)(v88 + 16)), v91 = bswap64(v8[14]), v90 == v91)
          && (v90 = bswap64(*(_QWORD *)(v88 + 24)), v91 = bswap64(v8[15]), v90 == v91))
        {
          v92 = 0;
        }
        else if (v90 < v91)
        {
          v92 = -1;
        }
        else
        {
          v92 = 1;
        }
        if (v92 < 0)
        {
          result = *(__n128 *)v87;
          v201 = *((_OWORD *)v8 + 7);
          v154 = *(_OWORD *)(v88 + 16);
          *(_OWORD *)v87 = *(_OWORD *)v88;
          *((_OWORD *)v8 + 7) = v154;
          *(__n128 *)v88 = result;
          *(_OWORD *)(v88 + 16) = v201;
          v155 = bswap64(*v87);
          v156 = bswap64(*v86);
          if (v155 != v156)
            goto LABEL_324;
          v155 = bswap64(v8[13]);
          v156 = bswap64(v8[9]);
          if (v155 == v156
            && (v155 = bswap64(v8[14]), v156 = bswap64(v8[10]), v155 == v156)
            && (v155 = bswap64(v8[15]), v156 = bswap64(v8[11]), v155 == v156))
          {
            v157 = 0;
          }
          else
          {
LABEL_324:
            v157 = v155 < v156 ? -1 : 1;
          }
          if (v157 < 0)
          {
            v168 = *(_OWORD *)v86;
            result = *((__n128 *)v8 + 5);
            v169 = *((_OWORD *)v8 + 7);
            *(_OWORD *)v86 = *(_OWORD *)v87;
            *((_OWORD *)v8 + 5) = v169;
            *(_OWORD *)v87 = v168;
            *((__n128 *)v8 + 7) = result;
            v170 = bswap64(*v86);
            v171 = bswap64(*v85);
            if (v170 != v171)
              goto LABEL_333;
            v170 = bswap64(v8[9]);
            v171 = bswap64(v8[5]);
            if (v170 == v171
              && (v170 = bswap64(v8[10]), v171 = bswap64(v8[6]), v170 == v171)
              && (v170 = bswap64(v8[11]), v171 = bswap64(v8[7]), v170 == v171))
            {
              v172 = 0;
            }
            else
            {
LABEL_333:
              v172 = v170 < v171 ? -1 : 1;
            }
            if (v172 < 0)
            {
              v173 = *(_OWORD *)v85;
              result = *((__n128 *)v8 + 3);
              v174 = *((_OWORD *)v8 + 5);
              *(_OWORD *)v85 = *(_OWORD *)v86;
              *((_OWORD *)v8 + 3) = v174;
              *(_OWORD *)v86 = v173;
              *((__n128 *)v8 + 5) = result;
              v175 = bswap64(v8[4]);
              v176 = bswap64(*v8);
              if (v175 != v176)
                goto LABEL_342;
              v175 = bswap64(v8[5]);
              v176 = bswap64(v8[1]);
              if (v175 == v176
                && (v175 = bswap64(v8[6]), v176 = bswap64(v8[2]), v175 == v176)
                && (v175 = bswap64(v8[7]), v176 = bswap64(v8[3]), v175 == v176))
              {
                v177 = 0;
              }
              else
              {
LABEL_342:
                v177 = v175 < v176 ? -1 : 1;
              }
              if (v177 < 0)
              {
                v193 = *(__n128 *)v8;
                v203 = *((_OWORD *)v8 + 1);
                v178 = *((_OWORD *)v8 + 3);
                *(_OWORD *)v8 = *(_OWORD *)v85;
                *((_OWORD *)v8 + 1) = v178;
                result = v193;
                *(__n128 *)v85 = v193;
                *((_OWORD *)v8 + 3) = v203;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 767)
        {
          n128_u64 = v8 + 4;
          v95 = v8 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v95)
            {
              v96 = 0;
              v97 = v8;
              do
              {
                v98 = (__n128 *)n128_u64;
                v99 = bswap64(v97[4]);
                v100 = bswap64(*v97);
                if (v99 != v100
                  || (v99 = bswap64(v98->n128_u64[1]), v100 = bswap64(v97[1]), v99 != v100)
                  || (v99 = bswap64(v98[1].n128_u64[0]), v100 = bswap64(v97[2]), v99 != v100)
                  || (v99 = bswap64(v98[1].n128_u64[1]), v100 = bswap64(v97[3]), v99 != v100))
                {
                  v101 = v99 < v100 ? -1 : 1;
                  if (v101 < 0)
                  {
                    v188 = *v98;
                    v197 = v98[1];
                    v102 = v96;
                    while (1)
                    {
                      v103 = (char *)v8 + v102;
                      v104 = *(_OWORD *)((char *)v8 + v102 + 16);
                      *((_OWORD *)v103 + 2) = *(_OWORD *)((char *)v8 + v102);
                      *((_OWORD *)v103 + 3) = v104;
                      if (!v102)
                        break;
                      v105 = bswap64(v188.n128_u64[0]);
                      v106 = bswap64(*((_QWORD *)v103 - 4));
                      if (v105 == v106
                        && (v105 = bswap64(v188.n128_u64[1]), v106 = bswap64(*((_QWORD *)v103 - 3)), v105 == v106)
                        && (v105 = bswap64(v197.n128_u64[0]), v106 = bswap64(*((_QWORD *)v103 - 2)), v105 == v106)
                        && (v105 = bswap64(v197.n128_u64[1]), v106 = bswap64(*((_QWORD *)v103 - 1)), v105 == v106))
                      {
                        v107 = 0;
                      }
                      else if (v105 < v106)
                      {
                        v107 = -1;
                      }
                      else
                      {
                        v107 = 1;
                      }
                      v102 -= 32;
                      if ((v107 & 0x80000000) == 0)
                      {
                        v108 = (__n128 *)((char *)v8 + v102 + 32);
                        goto LABEL_195;
                      }
                    }
                    v108 = (__n128 *)v8;
LABEL_195:
                    result = v188;
                    *v108 = v188;
                    v108[1] = v197;
                  }
                }
                n128_u64 = v98[2].n128_u64;
                v96 += 32;
                v97 = (unint64_t *)v98;
              }
              while (&v98[2] != (__n128 *)a2);
            }
          }
          else if (!v95)
          {
            v158 = v8 - 4;
            do
            {
              v159 = (__n128 *)n128_u64;
              v160 = bswap64(a1[4]);
              v161 = bswap64(*a1);
              if (v160 != v161
                || (v160 = bswap64(v159->n128_u64[1]), v161 = bswap64(a1[1]), v160 != v161)
                || (v160 = bswap64(v159[1].n128_u64[0]), v161 = bswap64(a1[2]), v160 != v161)
                || (v160 = bswap64(v159[1].n128_u64[1]), v161 = bswap64(a1[3]), v160 != v161))
              {
                v162 = v160 < v161 ? -1 : 1;
                if (v162 < 0)
                {
                  v192 = *v159;
                  v202 = v159[1];
                  v163 = v158;
                  do
                  {
                    v164 = *((_OWORD *)v163 + 3);
                    *((_OWORD *)v163 + 4) = *((_OWORD *)v163 + 2);
                    *((_OWORD *)v163 + 5) = v164;
                    v165 = bswap64(v192.n128_u64[0]);
                    v166 = bswap64(*v163);
                    if (v165 == v166
                      && (v165 = bswap64(v192.n128_u64[1]), v166 = bswap64(v163[1]), v165 == v166)
                      && (v165 = bswap64(v202.n128_u64[0]), v166 = bswap64(v163[2]), v165 == v166)
                      && (v165 = bswap64(v202.n128_u64[1]), v166 = bswap64(v163[3]), v165 == v166))
                    {
                      v167 = 0;
                    }
                    else if (v165 < v166)
                    {
                      v167 = -1;
                    }
                    else
                    {
                      v167 = 1;
                    }
                    v163 -= 4;
                  }
                  while (v167 < 0);
                  result = v192;
                  *((__n128 *)v163 + 4) = v192;
                  *((__n128 *)v163 + 5) = v202;
                }
              }
              n128_u64 = v159[2].n128_u64;
              v158 += 4;
              a1 = (unint64_t *)v159;
            }
            while (&v159[2] != (__n128 *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != (unint64_t *)a2)
          {
            v109 = (v10 - 2) >> 1;
            v110 = v109;
            do
            {
              v111 = v110;
              if (v109 >= v110)
              {
                v112 = (2 * v110) | 1;
                v113 = &v8[4 * v112];
                if (2 * v111 + 2 < (uint64_t)v10)
                {
                  v114 = bswap64(*v113);
                  v115 = bswap64(v113[4]);
                  if (v114 != v115)
                    goto LABEL_207;
                  v114 = bswap64(v113[1]);
                  v115 = bswap64(v113[5]);
                  if (v114 == v115
                    && (v114 = bswap64(v113[2]), v115 = bswap64(v113[6]), v114 == v115)
                    && (v114 = bswap64(v113[3]), v115 = bswap64(v113[7]), v114 == v115))
                  {
                    v116 = 0;
                  }
                  else
                  {
LABEL_207:
                    v116 = v114 < v115 ? -1 : 1;
                  }
                  if (v116 < 0)
                  {
                    v113 += 4;
                    v112 = 2 * v111 + 2;
                  }
                }
                v117 = &v8[4 * v111];
                v118 = bswap64(*v113);
                v119 = bswap64(*v117);
                if (v118 == v119
                  && (v118 = bswap64(v113[1]), v119 = bswap64(v117[1]), v118 == v119)
                  && (v118 = bswap64(v113[2]), v119 = bswap64(v117[2]), v118 == v119)
                  && (v118 = bswap64(v113[3]), v119 = bswap64(v117[3]), v118 == v119)
                  || (v118 < v119 ? (v120 = -1) : (v120 = 1), (v120 & 0x80000000) == 0))
                {
                  v189 = *(_OWORD *)v117;
                  v198 = *((_OWORD *)v117 + 1);
                  do
                  {
                    v121 = v113;
                    v122 = *((_OWORD *)v113 + 1);
                    *(_OWORD *)v117 = *(_OWORD *)v113;
                    *((_OWORD *)v117 + 1) = v122;
                    if (v109 < v112)
                      break;
                    v123 = (2 * v112) | 1;
                    v113 = &v8[4 * v123];
                    v112 = 2 * v112 + 2;
                    if (v112 >= (uint64_t)v10)
                    {
                      v112 = v123;
                    }
                    else
                    {
                      v124 = bswap64(*v113);
                      v125 = bswap64(v113[4]);
                      if (v124 != v125)
                        goto LABEL_229;
                      v124 = bswap64(v113[1]);
                      v125 = bswap64(v113[5]);
                      if (v124 == v125
                        && (v124 = bswap64(v113[2]), v125 = bswap64(v113[6]), v124 == v125)
                        && (v124 = bswap64(v113[3]), v125 = bswap64(v113[7]), v124 == v125))
                      {
                        v126 = 0;
                      }
                      else
                      {
LABEL_229:
                        v126 = v124 < v125 ? -1 : 1;
                      }
                      if (v126 >= 0)
                        v112 = v123;
                      else
                        v113 += 4;
                    }
                    v127 = bswap64(*v113);
                    v128 = bswap64(v189);
                    if (v127 != v128)
                      goto LABEL_240;
                    v127 = bswap64(v113[1]);
                    v128 = bswap64(*((unint64_t *)&v189 + 1));
                    if (v127 == v128
                      && (v127 = bswap64(v113[2]), v128 = bswap64(v198), v127 == v128)
                      && (v127 = bswap64(v113[3]), v128 = bswap64(*((unint64_t *)&v198 + 1)), v127 == v128))
                    {
                      v129 = 0;
                    }
                    else
                    {
LABEL_240:
                      v129 = v127 < v128 ? -1 : 1;
                    }
                    v117 = v121;
                  }
                  while ((v129 & 0x80000000) == 0);
                  *(_OWORD *)v121 = v189;
                  *((_OWORD *)v121 + 1) = v198;
                }
              }
              v110 = v111 - 1;
            }
            while (v111);
            v130 = (unint64_t)v9 >> 5;
            do
            {
              v131 = 0;
              v181 = *(__n128 *)v8;
              v184 = *((_OWORD *)v8 + 1);
              v132 = v8;
              do
              {
                v133 = &v132[4 * v131 + 4];
                v134 = (2 * v131) | 1;
                v135 = 2 * v131 + 2;
                if (v135 < v130)
                {
                  v136 = bswap64(*v133);
                  v137 = bswap64(v133[4]);
                  if (v136 != v137)
                    goto LABEL_254;
                  v136 = bswap64(v133[1]);
                  v137 = bswap64(v133[5]);
                  if (v136 == v137
                    && (v136 = bswap64(v133[2]), v137 = bswap64(v133[6]), v136 == v137)
                    && (v136 = bswap64(v133[3]), v137 = bswap64(v133[7]), v136 == v137))
                  {
                    v138 = 0;
                  }
                  else
                  {
LABEL_254:
                    v138 = v136 < v137 ? -1 : 1;
                  }
                  if (v138 < 0)
                  {
                    v133 += 4;
                    v134 = v135;
                  }
                }
                v139 = *((_OWORD *)v133 + 1);
                *(_OWORD *)v132 = *(_OWORD *)v133;
                *((_OWORD *)v132 + 1) = v139;
                v132 = v133;
                v131 = v134;
              }
              while (v134 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
              a2 -= 32;
              if (v133 == (unint64_t *)a2)
              {
                result = v181;
                *(__n128 *)v133 = v181;
                *((_OWORD *)v133 + 1) = v184;
              }
              else
              {
                v140 = *(_OWORD *)(a2 + 16);
                *(_OWORD *)v133 = *(_OWORD *)a2;
                *((_OWORD *)v133 + 1) = v140;
                result = v181;
                *(__n128 *)a2 = v181;
                *(_OWORD *)(a2 + 16) = v184;
                v141 = (char *)v133 - (char *)v8 + 32;
                if (v141 >= 33)
                {
                  v142 = (((unint64_t)v141 >> 5) - 2) >> 1;
                  v143 = &v8[4 * v142];
                  v144 = bswap64(*v143);
                  v145 = bswap64(*v133);
                  if (v144 != v145
                    || (v144 = bswap64(v143[1]), v145 = bswap64(v133[1]), v144 != v145)
                    || (v144 = bswap64(v143[2]), v145 = bswap64(v133[2]), v144 != v145)
                    || (v144 = bswap64(v143[3]), v145 = bswap64(v133[3]), v144 != v145))
                  {
                    v146 = v144 < v145 ? -1 : 1;
                    if (v146 < 0)
                    {
                      v190 = *(__n128 *)v133;
                      v199 = *((__n128 *)v133 + 1);
                      do
                      {
                        v147 = (__n128 *)v143;
                        v148 = *((_OWORD *)v143 + 1);
                        *(_OWORD *)v133 = *(_OWORD *)v143;
                        *((_OWORD *)v133 + 1) = v148;
                        if (!v142)
                          break;
                        v142 = (v142 - 1) >> 1;
                        v143 = &v8[4 * v142];
                        v149 = bswap64(*v143);
                        v150 = bswap64(v190.n128_u64[0]);
                        if (v149 != v150)
                          goto LABEL_279;
                        v149 = bswap64(v143[1]);
                        v150 = bswap64(v190.n128_u64[1]);
                        if (v149 == v150
                          && (v149 = bswap64(v143[2]), v150 = bswap64(v199.n128_u64[0]), v149 == v150)
                          && (v149 = bswap64(v143[3]), v150 = bswap64(v199.n128_u64[1]), v149 == v150))
                        {
                          v151 = 0;
                        }
                        else
                        {
LABEL_279:
                          v151 = v149 < v150 ? -1 : 1;
                        }
                        v133 = (unint64_t *)v147;
                      }
                      while (v151 < 0);
                      result = v190;
                      *v147 = v190;
                      v147[1] = v199;
                    }
                  }
                }
              }
            }
            while (v130-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[4 * (v10 >> 1)];
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v10 >> 1)], a1, (unint64_t *)(a2 - 32));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v10 >> 1)], (unint64_t *)(a2 - 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v12 - 4, (unint64_t *)(a2 - 64));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v11 + 4], (unint64_t *)(a2 - 96));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v12 - 4, v12, &a1[4 * v11 + 4]);
          v185 = *(__n128 *)a1;
          v194 = *((_OWORD *)a1 + 1);
          v13 = *((_OWORD *)v12 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *((_OWORD *)a1 + 1) = v13;
          *(__n128 *)v12 = v185;
          *((_OWORD *)v12 + 1) = v194;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = bswap64(*(a1 - 4));
          v15 = bswap64(*a1);
          if (v14 != v15)
            goto LABEL_14;
          v14 = bswap64(*(a1 - 3));
          v15 = bswap64(a1[1]);
          if (v14 == v15
            && (v14 = bswap64(*(a1 - 2)), v15 = bswap64(a1[2]), v14 == v15)
            && (v14 = bswap64(*(a1 - 1)), v15 = bswap64(a1[3]), v14 == v15))
          {
            v16 = 0;
          }
          else
          {
LABEL_14:
            v16 = v14 < v15 ? -1 : 1;
          }
          if ((v16 & 0x80000000) == 0)
          {
            v180 = *(__n128 *)a1;
            v183 = *((_OWORD *)a1 + 1);
            v49 = bswap64(*a1);
            v50 = bswap64(*(_QWORD *)(a2 - 32));
            if (v49 == v50
              && (v49 = bswap64(v180.n128_u64[1]), v50 = bswap64(*(_QWORD *)(a2 - 24)), v49 == v50)
              && (v49 = bswap64(v183), v50 = bswap64(*(_QWORD *)(a2 - 16)), v49 == v50)
              && (v49 = bswap64(*((unint64_t *)&v183 + 1)), v50 = bswap64(*(_QWORD *)(a2 - 8)), v49 == v50))
            {
              v51 = 0;
            }
            else if (v49 < v50)
            {
              v51 = -1;
            }
            else
            {
              v51 = 1;
            }
            if (v51 < 0)
            {
              v56 = a1;
              v8 = a1;
              do
              {
                v57 = v8[4];
                v8 += 4;
                v58 = bswap64(v180.n128_u64[0]);
                v59 = bswap64(v57);
                if (v58 == v59
                  && (v58 = bswap64(v180.n128_u64[1]), v59 = bswap64(v56[5]), v58 == v59)
                  && (v58 = bswap64(v183), v59 = bswap64(v56[6]), v58 == v59)
                  && (v58 = bswap64(*((unint64_t *)&v183 + 1)), v59 = bswap64(v56[7]), v58 == v59))
                {
                  v60 = 0;
                }
                else if (v58 < v59)
                {
                  v60 = -1;
                }
                else
                {
                  v60 = 1;
                }
                v56 = v8;
              }
              while ((v60 & 0x80000000) == 0);
            }
            else
            {
              v52 = a1 + 4;
              do
              {
                v8 = v52;
                if ((unint64_t)v52 >= a2)
                  break;
                v53 = bswap64(v180.n128_u64[0]);
                v54 = bswap64(*v8);
                if (v53 != v54)
                  goto LABEL_99;
                v53 = bswap64(v180.n128_u64[1]);
                v54 = bswap64(v8[1]);
                if (v53 == v54
                  && (v53 = bswap64(v183), v54 = bswap64(v8[2]), v53 == v54)
                  && (v53 = bswap64(*((unint64_t *)&v183 + 1)), v54 = bswap64(v8[3]), v53 == v54))
                {
                  v55 = 0;
                }
                else
                {
LABEL_99:
                  v55 = v53 < v54 ? -1 : 1;
                }
                v52 = v8 + 4;
              }
              while ((v55 & 0x80000000) == 0);
            }
            v61 = (_OWORD *)a2;
            if ((unint64_t)v8 < a2)
            {
              v62 = (_OWORD *)a2;
              v61 = (_OWORD *)a2;
              do
              {
                v63 = *((_QWORD *)v61 - 4);
                v61 -= 2;
                v64 = bswap64(v180.n128_u64[0]);
                v65 = bswap64(v63);
                if (v64 == v65
                  && (v64 = bswap64(v180.n128_u64[1]), v65 = bswap64(*((_QWORD *)v62 - 3)), v64 == v65)
                  && (v64 = bswap64(v183), v65 = bswap64(*((_QWORD *)v62 - 2)), v64 == v65)
                  && (v64 = bswap64(*((unint64_t *)&v183 + 1)), v65 = bswap64(*((_QWORD *)v62 - 1)), v64 == v65))
                {
                  v66 = 0;
                }
                else if (v64 < v65)
                {
                  v66 = -1;
                }
                else
                {
                  v66 = 1;
                }
                v62 = v61;
              }
              while (v66 < 0);
            }
            while (v8 < (unint64_t *)v61)
            {
              v187 = *(__n128 *)v8;
              v196 = *((_OWORD *)v8 + 1);
              v67 = v61[1];
              *(_OWORD *)v8 = *v61;
              *((_OWORD *)v8 + 1) = v67;
              *v61 = v187;
              v61[1] = v196;
              v68 = v8;
              do
              {
                v69 = v8[4];
                v8 += 4;
                v70 = bswap64(v180.n128_u64[0]);
                v71 = bswap64(v69);
                if (v70 == v71
                  && (v70 = bswap64(v180.n128_u64[1]), v71 = bswap64(v68[5]), v70 == v71)
                  && (v70 = bswap64(v183), v71 = bswap64(v68[6]), v70 == v71)
                  && (v70 = bswap64(*((unint64_t *)&v183 + 1)), v71 = bswap64(v68[7]), v70 == v71))
                {
                  v72 = 0;
                }
                else if (v70 < v71)
                {
                  v72 = -1;
                }
                else
                {
                  v72 = 1;
                }
                v68 = v8;
              }
              while ((v72 & 0x80000000) == 0);
              v73 = v61;
              do
              {
                v74 = *((_QWORD *)v61 - 4);
                v61 -= 2;
                v75 = bswap64(v180.n128_u64[0]);
                v76 = bswap64(v74);
                if (v75 == v76
                  && (v75 = bswap64(v180.n128_u64[1]), v76 = bswap64(*((_QWORD *)v73 - 3)), v75 == v76)
                  && (v75 = bswap64(v183), v76 = bswap64(*((_QWORD *)v73 - 2)), v75 == v76)
                  && (v75 = bswap64(*((unint64_t *)&v183 + 1)), v76 = bswap64(*((_QWORD *)v73 - 1)), v75 == v76))
                {
                  v77 = 0;
                }
                else if (v75 < v76)
                {
                  v77 = -1;
                }
                else
                {
                  v77 = 1;
                }
                v73 = v61;
              }
              while (v77 < 0);
            }
            v78 = (__n128 *)(v8 - 4);
            if (v8 - 4 != a1)
            {
              v79 = *((_OWORD *)v8 - 1);
              *(__n128 *)a1 = *v78;
              *((_OWORD *)a1 + 1) = v79;
            }
            a4 = 0;
            result = v180;
            *v78 = v180;
            *((_OWORD *)v8 - 1) = v183;
            continue;
          }
        }
        v17 = 0;
        v179 = *(__n128 *)a1;
        v182 = *((_OWORD *)a1 + 1);
        do
        {
          v18 = &a1[v17];
          v19 = bswap64(a1[v17 + 4]);
          v20 = bswap64(v179.n128_u64[0]);
          if (v19 == v20
            && (v19 = bswap64(v18[5]), v20 = bswap64(v179.n128_u64[1]), v19 == v20)
            && (v19 = bswap64(v18[6]), v20 = bswap64(v182), v19 == v20)
            && (v19 = bswap64(v18[7]), v20 = bswap64(*((unint64_t *)&v182 + 1)), v19 == v20))
          {
            v21 = 0;
          }
          else if (v19 < v20)
          {
            v21 = -1;
          }
          else
          {
            v21 = 1;
          }
          v17 += 4;
        }
        while (v21 < 0);
        v22 = &a1[v17];
        v23 = a2;
        if (v17 == 4)
        {
          v28 = (_OWORD *)a2;
          while (v22 < (unint64_t *)v28)
          {
            v24 = v28 - 2;
            v29 = bswap64(*((_QWORD *)v28 - 4));
            v30 = bswap64(v179.n128_u64[0]);
            if (v29 == v30
              && (v29 = bswap64(*((_QWORD *)v28 - 3)), v30 = bswap64(v179.n128_u64[1]), v29 == v30)
              && (v29 = bswap64(*((_QWORD *)v28 - 2)), v30 = bswap64(v182), v29 == v30)
              && (v29 = bswap64(*((_QWORD *)v28 - 1)), v30 = bswap64(*((unint64_t *)&v182 + 1)), v29 == v30))
            {
              v31 = 0;
            }
            else if (v29 < v30)
            {
              v31 = -1;
            }
            else
            {
              v31 = 1;
            }
            v28 -= 2;
            if (v31 < 0)
              goto LABEL_52;
          }
          v24 = v28;
        }
        else
        {
          do
          {
            v24 = (_OWORD *)(v23 - 32);
            v25 = bswap64(*(_QWORD *)(v23 - 32));
            v26 = bswap64(v179.n128_u64[0]);
            if (v25 == v26
              && (v25 = bswap64(*(_QWORD *)(v23 - 24)), v26 = bswap64(v179.n128_u64[1]), v25 == v26)
              && (v25 = bswap64(*(_QWORD *)(v23 - 16)), v26 = bswap64(v182), v25 == v26)
              && (v25 = bswap64(*(_QWORD *)(v23 - 8)), v26 = bswap64(*((unint64_t *)&v182 + 1)), v25 == v26))
            {
              v27 = 0;
            }
            else if (v25 < v26)
            {
              v27 = -1;
            }
            else
            {
              v27 = 1;
            }
            v23 -= 32;
          }
          while ((v27 & 0x80000000) == 0);
        }
LABEL_52:
        if (v22 >= (unint64_t *)v24)
        {
          v45 = v22 - 4;
        }
        else
        {
          v32 = (unint64_t)v22;
          v33 = v24;
          do
          {
            v186 = *(_OWORD *)v32;
            v195 = *(_OWORD *)(v32 + 16);
            v34 = v33[1];
            *(_OWORD *)v32 = *v33;
            *(_OWORD *)(v32 + 16) = v34;
            *v33 = v186;
            v33[1] = v195;
            v35 = (unint64_t *)v32;
            do
            {
              v36 = *(_QWORD *)(v32 + 32);
              v32 += 32;
              v37 = bswap64(v36);
              v38 = bswap64(v179.n128_u64[0]);
              if (v37 == v38
                && (v37 = bswap64(v35[5]), v38 = bswap64(v179.n128_u64[1]), v37 == v38)
                && (v37 = bswap64(v35[6]), v38 = bswap64(v182), v37 == v38)
                && (v37 = bswap64(v35[7]), v38 = bswap64(*((unint64_t *)&v182 + 1)), v37 == v38))
              {
                v39 = 0;
              }
              else if (v37 < v38)
              {
                v39 = -1;
              }
              else
              {
                v39 = 1;
              }
              v35 = (unint64_t *)v32;
            }
            while (v39 < 0);
            v40 = v33;
            do
            {
              v41 = *((_QWORD *)v33 - 4);
              v33 -= 2;
              v42 = bswap64(v41);
              v43 = bswap64(v179.n128_u64[0]);
              if (v42 == v43
                && (v42 = bswap64(*((_QWORD *)v40 - 3)), v43 = bswap64(v179.n128_u64[1]), v42 == v43)
                && (v42 = bswap64(*((_QWORD *)v40 - 2)), v43 = bswap64(v182), v42 == v43)
                && (v42 = bswap64(*((_QWORD *)v40 - 1)), v43 = bswap64(*((unint64_t *)&v182 + 1)), v42 == v43))
              {
                v44 = 0;
              }
              else if (v42 < v43)
              {
                v44 = -1;
              }
              else
              {
                v44 = 1;
              }
              v40 = v33;
            }
            while ((v44 & 0x80000000) == 0);
          }
          while (v32 < (unint64_t)v33);
          v45 = (unint64_t *)(v32 - 32);
        }
        if (v45 != a1)
        {
          v46 = *((_OWORD *)v45 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v45;
          *((_OWORD *)a1 + 1) = v46;
        }
        *(__n128 *)v45 = v179;
        *((_OWORD *)v45 + 1) = v182;
        if (v22 < (unint64_t *)v24)
        {
LABEL_82:
          std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *,false>(a1, v45, a3, a4 & 1);
          a4 = 0;
          v8 = v45 + 4;
          continue;
        }
        v47 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, v45);
        v8 = v45 + 4;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v45 + 4, (unint64_t *)a2))
        {
          if (v47)
            continue;
          goto LABEL_82;
        }
        a2 = (unint64_t)v45;
        if (!v47)
          goto LABEL_1;
        return result;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - (_QWORD)v8;
    v10 = (uint64_t)(a2 - (_QWORD)v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v81 = *(_QWORD *)(a2 - 32);
        v80 = a2 - 32;
        v82 = bswap64(v81);
        v83 = bswap64(*v8);
        if (v82 == v83
          && (v82 = bswap64(*(_QWORD *)(v80 + 8)), v83 = bswap64(v8[1]), v82 == v83)
          && (v82 = bswap64(*(_QWORD *)(v80 + 16)), v83 = bswap64(v8[2]), v82 == v83)
          && (v82 = bswap64(*(_QWORD *)(v80 + 24)), v83 = bswap64(v8[3]), v82 == v83))
        {
          v84 = 0;
        }
        else if (v82 < v83)
        {
          v84 = -1;
        }
        else
        {
          v84 = 1;
        }
        if (v84 < 0)
        {
          v191 = *(__n128 *)v8;
          v200 = *((_OWORD *)v8 + 1);
          v153 = *(_OWORD *)(v80 + 16);
          *(_OWORD *)v8 = *(_OWORD *)v80;
          *((_OWORD *)v8 + 1) = v153;
          result = v191;
          *(__n128 *)v80 = v191;
          *(_OWORD *)(v80 + 16) = v200;
        }
        return result;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, (unint64_t *)(a2 - 32));
        return result;
      case 4uLL:
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, v8 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
        return result;
      case 5uLL:
        v85 = v8 + 4;
        v86 = v8 + 8;
        v87 = v8 + 12;
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, v8 + 8, v8 + 12).n128_u64[0];
        v89 = *(_QWORD *)(a2 - 32);
        v88 = a2 - 32;
        v90 = bswap64(v89);
        v91 = bswap64(v8[12]);
        if (v90 == v91
          && (v90 = bswap64(*(_QWORD *)(v88 + 8)), v91 = bswap64(v8[13]), v90 == v91)
          && (v90 = bswap64(*(_QWORD *)(v88 + 16)), v91 = bswap64(v8[14]), v90 == v91)
          && (v90 = bswap64(*(_QWORD *)(v88 + 24)), v91 = bswap64(v8[15]), v90 == v91))
        {
          v92 = 0;
        }
        else if (v90 < v91)
        {
          v92 = -1;
        }
        else
        {
          v92 = 1;
        }
        if (v92 < 0)
        {
          result = *(__n128 *)v87;
          v201 = *((_OWORD *)v8 + 7);
          v154 = *(_OWORD *)(v88 + 16);
          *(_OWORD *)v87 = *(_OWORD *)v88;
          *((_OWORD *)v8 + 7) = v154;
          *(__n128 *)v88 = result;
          *(_OWORD *)(v88 + 16) = v201;
          v155 = bswap64(*v87);
          v156 = bswap64(*v86);
          if (v155 != v156)
            goto LABEL_324;
          v155 = bswap64(v8[13]);
          v156 = bswap64(v8[9]);
          if (v155 == v156
            && (v155 = bswap64(v8[14]), v156 = bswap64(v8[10]), v155 == v156)
            && (v155 = bswap64(v8[15]), v156 = bswap64(v8[11]), v155 == v156))
          {
            v157 = 0;
          }
          else
          {
LABEL_324:
            v157 = v155 < v156 ? -1 : 1;
          }
          if (v157 < 0)
          {
            v168 = *(_OWORD *)v86;
            result = *((__n128 *)v8 + 5);
            v169 = *((_OWORD *)v8 + 7);
            *(_OWORD *)v86 = *(_OWORD *)v87;
            *((_OWORD *)v8 + 5) = v169;
            *(_OWORD *)v87 = v168;
            *((__n128 *)v8 + 7) = result;
            v170 = bswap64(*v86);
            v171 = bswap64(*v85);
            if (v170 != v171)
              goto LABEL_333;
            v170 = bswap64(v8[9]);
            v171 = bswap64(v8[5]);
            if (v170 == v171
              && (v170 = bswap64(v8[10]), v171 = bswap64(v8[6]), v170 == v171)
              && (v170 = bswap64(v8[11]), v171 = bswap64(v8[7]), v170 == v171))
            {
              v172 = 0;
            }
            else
            {
LABEL_333:
              v172 = v170 < v171 ? -1 : 1;
            }
            if (v172 < 0)
            {
              v173 = *(_OWORD *)v85;
              result = *((__n128 *)v8 + 3);
              v174 = *((_OWORD *)v8 + 5);
              *(_OWORD *)v85 = *(_OWORD *)v86;
              *((_OWORD *)v8 + 3) = v174;
              *(_OWORD *)v86 = v173;
              *((__n128 *)v8 + 5) = result;
              v175 = bswap64(v8[4]);
              v176 = bswap64(*v8);
              if (v175 != v176)
                goto LABEL_342;
              v175 = bswap64(v8[5]);
              v176 = bswap64(v8[1]);
              if (v175 == v176
                && (v175 = bswap64(v8[6]), v176 = bswap64(v8[2]), v175 == v176)
                && (v175 = bswap64(v8[7]), v176 = bswap64(v8[3]), v175 == v176))
              {
                v177 = 0;
              }
              else
              {
LABEL_342:
                v177 = v175 < v176 ? -1 : 1;
              }
              if (v177 < 0)
              {
                v193 = *(__n128 *)v8;
                v203 = *((_OWORD *)v8 + 1);
                v178 = *((_OWORD *)v8 + 3);
                *(_OWORD *)v8 = *(_OWORD *)v85;
                *((_OWORD *)v8 + 1) = v178;
                result = v193;
                *(__n128 *)v85 = v193;
                *((_OWORD *)v8 + 3) = v203;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 767)
        {
          n128_u64 = v8 + 4;
          v95 = v8 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v95)
            {
              v96 = 0;
              v97 = v8;
              do
              {
                v98 = (__n128 *)n128_u64;
                v99 = bswap64(v97[4]);
                v100 = bswap64(*v97);
                if (v99 != v100
                  || (v99 = bswap64(v98->n128_u64[1]), v100 = bswap64(v97[1]), v99 != v100)
                  || (v99 = bswap64(v98[1].n128_u64[0]), v100 = bswap64(v97[2]), v99 != v100)
                  || (v99 = bswap64(v98[1].n128_u64[1]), v100 = bswap64(v97[3]), v99 != v100))
                {
                  v101 = v99 < v100 ? -1 : 1;
                  if (v101 < 0)
                  {
                    v188 = *v98;
                    v197 = v98[1];
                    v102 = v96;
                    while (1)
                    {
                      v103 = (char *)v8 + v102;
                      v104 = *(_OWORD *)((char *)v8 + v102 + 16);
                      *((_OWORD *)v103 + 2) = *(_OWORD *)((char *)v8 + v102);
                      *((_OWORD *)v103 + 3) = v104;
                      if (!v102)
                        break;
                      v105 = bswap64(v188.n128_u64[0]);
                      v106 = bswap64(*((_QWORD *)v103 - 4));
                      if (v105 == v106
                        && (v105 = bswap64(v188.n128_u64[1]), v106 = bswap64(*((_QWORD *)v103 - 3)), v105 == v106)
                        && (v105 = bswap64(v197.n128_u64[0]), v106 = bswap64(*((_QWORD *)v103 - 2)), v105 == v106)
                        && (v105 = bswap64(v197.n128_u64[1]), v106 = bswap64(*((_QWORD *)v103 - 1)), v105 == v106))
                      {
                        v107 = 0;
                      }
                      else if (v105 < v106)
                      {
                        v107 = -1;
                      }
                      else
                      {
                        v107 = 1;
                      }
                      v102 -= 32;
                      if ((v107 & 0x80000000) == 0)
                      {
                        v108 = (__n128 *)((char *)v8 + v102 + 32);
                        goto LABEL_195;
                      }
                    }
                    v108 = (__n128 *)v8;
LABEL_195:
                    result = v188;
                    *v108 = v188;
                    v108[1] = v197;
                  }
                }
                n128_u64 = v98[2].n128_u64;
                v96 += 32;
                v97 = (unint64_t *)v98;
              }
              while (&v98[2] != (__n128 *)a2);
            }
          }
          else if (!v95)
          {
            v158 = v8 - 4;
            do
            {
              v159 = (__n128 *)n128_u64;
              v160 = bswap64(a1[4]);
              v161 = bswap64(*a1);
              if (v160 != v161
                || (v160 = bswap64(v159->n128_u64[1]), v161 = bswap64(a1[1]), v160 != v161)
                || (v160 = bswap64(v159[1].n128_u64[0]), v161 = bswap64(a1[2]), v160 != v161)
                || (v160 = bswap64(v159[1].n128_u64[1]), v161 = bswap64(a1[3]), v160 != v161))
              {
                v162 = v160 < v161 ? -1 : 1;
                if (v162 < 0)
                {
                  v192 = *v159;
                  v202 = v159[1];
                  v163 = v158;
                  do
                  {
                    v164 = *((_OWORD *)v163 + 3);
                    *((_OWORD *)v163 + 4) = *((_OWORD *)v163 + 2);
                    *((_OWORD *)v163 + 5) = v164;
                    v165 = bswap64(v192.n128_u64[0]);
                    v166 = bswap64(*v163);
                    if (v165 == v166
                      && (v165 = bswap64(v192.n128_u64[1]), v166 = bswap64(v163[1]), v165 == v166)
                      && (v165 = bswap64(v202.n128_u64[0]), v166 = bswap64(v163[2]), v165 == v166)
                      && (v165 = bswap64(v202.n128_u64[1]), v166 = bswap64(v163[3]), v165 == v166))
                    {
                      v167 = 0;
                    }
                    else if (v165 < v166)
                    {
                      v167 = -1;
                    }
                    else
                    {
                      v167 = 1;
                    }
                    v163 -= 4;
                  }
                  while (v167 < 0);
                  result = v192;
                  *((__n128 *)v163 + 4) = v192;
                  *((__n128 *)v163 + 5) = v202;
                }
              }
              n128_u64 = v159[2].n128_u64;
              v158 += 4;
              a1 = (unint64_t *)v159;
            }
            while (&v159[2] != (__n128 *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != (unint64_t *)a2)
          {
            v109 = (v10 - 2) >> 1;
            v110 = v109;
            do
            {
              v111 = v110;
              if (v109 >= v110)
              {
                v112 = (2 * v110) | 1;
                v113 = &v8[4 * v112];
                if (2 * v111 + 2 < (uint64_t)v10)
                {
                  v114 = bswap64(*v113);
                  v115 = bswap64(v113[4]);
                  if (v114 != v115)
                    goto LABEL_207;
                  v114 = bswap64(v113[1]);
                  v115 = bswap64(v113[5]);
                  if (v114 == v115
                    && (v114 = bswap64(v113[2]), v115 = bswap64(v113[6]), v114 == v115)
                    && (v114 = bswap64(v113[3]), v115 = bswap64(v113[7]), v114 == v115))
                  {
                    v116 = 0;
                  }
                  else
                  {
LABEL_207:
                    v116 = v114 < v115 ? -1 : 1;
                  }
                  if (v116 < 0)
                  {
                    v113 += 4;
                    v112 = 2 * v111 + 2;
                  }
                }
                v117 = &v8[4 * v111];
                v118 = bswap64(*v113);
                v119 = bswap64(*v117);
                if (v118 == v119
                  && (v118 = bswap64(v113[1]), v119 = bswap64(v117[1]), v118 == v119)
                  && (v118 = bswap64(v113[2]), v119 = bswap64(v117[2]), v118 == v119)
                  && (v118 = bswap64(v113[3]), v119 = bswap64(v117[3]), v118 == v119)
                  || (v118 < v119 ? (v120 = -1) : (v120 = 1), (v120 & 0x80000000) == 0))
                {
                  v189 = *(_OWORD *)v117;
                  v198 = *((_OWORD *)v117 + 1);
                  do
                  {
                    v121 = v113;
                    v122 = *((_OWORD *)v113 + 1);
                    *(_OWORD *)v117 = *(_OWORD *)v113;
                    *((_OWORD *)v117 + 1) = v122;
                    if (v109 < v112)
                      break;
                    v123 = (2 * v112) | 1;
                    v113 = &v8[4 * v123];
                    v112 = 2 * v112 + 2;
                    if (v112 >= (uint64_t)v10)
                    {
                      v112 = v123;
                    }
                    else
                    {
                      v124 = bswap64(*v113);
                      v125 = bswap64(v113[4]);
                      if (v124 != v125)
                        goto LABEL_229;
                      v124 = bswap64(v113[1]);
                      v125 = bswap64(v113[5]);
                      if (v124 == v125
                        && (v124 = bswap64(v113[2]), v125 = bswap64(v113[6]), v124 == v125)
                        && (v124 = bswap64(v113[3]), v125 = bswap64(v113[7]), v124 == v125))
                      {
                        v126 = 0;
                      }
                      else
                      {
LABEL_229:
                        v126 = v124 < v125 ? -1 : 1;
                      }
                      if (v126 >= 0)
                        v112 = v123;
                      else
                        v113 += 4;
                    }
                    v127 = bswap64(*v113);
                    v128 = bswap64(v189);
                    if (v127 != v128)
                      goto LABEL_240;
                    v127 = bswap64(v113[1]);
                    v128 = bswap64(*((unint64_t *)&v189 + 1));
                    if (v127 == v128
                      && (v127 = bswap64(v113[2]), v128 = bswap64(v198), v127 == v128)
                      && (v127 = bswap64(v113[3]), v128 = bswap64(*((unint64_t *)&v198 + 1)), v127 == v128))
                    {
                      v129 = 0;
                    }
                    else
                    {
LABEL_240:
                      v129 = v127 < v128 ? -1 : 1;
                    }
                    v117 = v121;
                  }
                  while ((v129 & 0x80000000) == 0);
                  *(_OWORD *)v121 = v189;
                  *((_OWORD *)v121 + 1) = v198;
                }
              }
              v110 = v111 - 1;
            }
            while (v111);
            v130 = (unint64_t)v9 >> 5;
            do
            {
              v131 = 0;
              v181 = *(__n128 *)v8;
              v184 = *((_OWORD *)v8 + 1);
              v132 = v8;
              do
              {
                v133 = &v132[4 * v131 + 4];
                v134 = (2 * v131) | 1;
                v135 = 2 * v131 + 2;
                if (v135 < v130)
                {
                  v136 = bswap64(*v133);
                  v137 = bswap64(v133[4]);
                  if (v136 != v137)
                    goto LABEL_254;
                  v136 = bswap64(v133[1]);
                  v137 = bswap64(v133[5]);
                  if (v136 == v137
                    && (v136 = bswap64(v133[2]), v137 = bswap64(v133[6]), v136 == v137)
                    && (v136 = bswap64(v133[3]), v137 = bswap64(v133[7]), v136 == v137))
                  {
                    v138 = 0;
                  }
                  else
                  {
LABEL_254:
                    v138 = v136 < v137 ? -1 : 1;
                  }
                  if (v138 < 0)
                  {
                    v133 += 4;
                    v134 = v135;
                  }
                }
                v139 = *((_OWORD *)v133 + 1);
                *(_OWORD *)v132 = *(_OWORD *)v133;
                *((_OWORD *)v132 + 1) = v139;
                v132 = v133;
                v131 = v134;
              }
              while (v134 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
              a2 -= 32;
              if (v133 == (unint64_t *)a2)
              {
                result = v181;
                *(__n128 *)v133 = v181;
                *((_OWORD *)v133 + 1) = v184;
              }
              else
              {
                v140 = *(_OWORD *)(a2 + 16);
                *(_OWORD *)v133 = *(_OWORD *)a2;
                *((_OWORD *)v133 + 1) = v140;
                result = v181;
                *(__n128 *)a2 = v181;
                *(_OWORD *)(a2 + 16) = v184;
                v141 = (char *)v133 - (char *)v8 + 32;
                if (v141 >= 33)
                {
                  v142 = (((unint64_t)v141 >> 5) - 2) >> 1;
                  v143 = &v8[4 * v142];
                  v144 = bswap64(*v143);
                  v145 = bswap64(*v133);
                  if (v144 != v145
                    || (v144 = bswap64(v143[1]), v145 = bswap64(v133[1]), v144 != v145)
                    || (v144 = bswap64(v143[2]), v145 = bswap64(v133[2]), v144 != v145)
                    || (v144 = bswap64(v143[3]), v145 = bswap64(v133[3]), v144 != v145))
                  {
                    v146 = v144 < v145 ? -1 : 1;
                    if (v146 < 0)
                    {
                      v190 = *(__n128 *)v133;
                      v199 = *((__n128 *)v133 + 1);
                      do
                      {
                        v147 = (__n128 *)v143;
                        v148 = *((_OWORD *)v143 + 1);
                        *(_OWORD *)v133 = *(_OWORD *)v143;
                        *((_OWORD *)v133 + 1) = v148;
                        if (!v142)
                          break;
                        v142 = (v142 - 1) >> 1;
                        v143 = &v8[4 * v142];
                        v149 = bswap64(*v143);
                        v150 = bswap64(v190.n128_u64[0]);
                        if (v149 != v150)
                          goto LABEL_279;
                        v149 = bswap64(v143[1]);
                        v150 = bswap64(v190.n128_u64[1]);
                        if (v149 == v150
                          && (v149 = bswap64(v143[2]), v150 = bswap64(v199.n128_u64[0]), v149 == v150)
                          && (v149 = bswap64(v143[3]), v150 = bswap64(v199.n128_u64[1]), v149 == v150))
                        {
                          v151 = 0;
                        }
                        else
                        {
LABEL_279:
                          v151 = v149 < v150 ? -1 : 1;
                        }
                        v133 = (unint64_t *)v147;
                      }
                      while (v151 < 0);
                      result = v190;
                      *v147 = v190;
                      v147[1] = v199;
                    }
                  }
                }
              }
            }
            while (v130-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[4 * (v10 >> 1)];
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v10 >> 1)], a1, (unint64_t *)(a2 - 32));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v10 >> 1)], (unint64_t *)(a2 - 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v12 - 4, (unint64_t *)(a2 - 64));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v11 + 4], (unint64_t *)(a2 - 96));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v12 - 4, v12, &a1[4 * v11 + 4]);
          v185 = *(__n128 *)a1;
          v194 = *((_OWORD *)a1 + 1);
          v13 = *((_OWORD *)v12 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *((_OWORD *)a1 + 1) = v13;
          *(__n128 *)v12 = v185;
          *((_OWORD *)v12 + 1) = v194;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = bswap64(*(a1 - 4));
          v15 = bswap64(*a1);
          if (v14 != v15)
            goto LABEL_14;
          v14 = bswap64(*(a1 - 3));
          v15 = bswap64(a1[1]);
          if (v14 == v15
            && (v14 = bswap64(*(a1 - 2)), v15 = bswap64(a1[2]), v14 == v15)
            && (v14 = bswap64(*(a1 - 1)), v15 = bswap64(a1[3]), v14 == v15))
          {
            v16 = 0;
          }
          else
          {
LABEL_14:
            v16 = v14 < v15 ? -1 : 1;
          }
          if ((v16 & 0x80000000) == 0)
          {
            v180 = *(__n128 *)a1;
            v183 = *((_OWORD *)a1 + 1);
            v49 = bswap64(*a1);
            v50 = bswap64(*(_QWORD *)(a2 - 32));
            if (v49 == v50
              && (v49 = bswap64(v180.n128_u64[1]), v50 = bswap64(*(_QWORD *)(a2 - 24)), v49 == v50)
              && (v49 = bswap64(v183), v50 = bswap64(*(_QWORD *)(a2 - 16)), v49 == v50)
              && (v49 = bswap64(*((unint64_t *)&v183 + 1)), v50 = bswap64(*(_QWORD *)(a2 - 8)), v49 == v50))
            {
              v51 = 0;
            }
            else if (v49 < v50)
            {
              v51 = -1;
            }
            else
            {
              v51 = 1;
            }
            if (v51 < 0)
            {
              v56 = a1;
              v8 = a1;
              do
              {
                v57 = v8[4];
                v8 += 4;
                v58 = bswap64(v180.n128_u64[0]);
                v59 = bswap64(v57);
                if (v58 == v59
                  && (v58 = bswap64(v180.n128_u64[1]), v59 = bswap64(v56[5]), v58 == v59)
                  && (v58 = bswap64(v183), v59 = bswap64(v56[6]), v58 == v59)
                  && (v58 = bswap64(*((unint64_t *)&v183 + 1)), v59 = bswap64(v56[7]), v58 == v59))
                {
                  v60 = 0;
                }
                else if (v58 < v59)
                {
                  v60 = -1;
                }
                else
                {
                  v60 = 1;
                }
                v56 = v8;
              }
              while ((v60 & 0x80000000) == 0);
            }
            else
            {
              v52 = a1 + 4;
              do
              {
                v8 = v52;
                if ((unint64_t)v52 >= a2)
                  break;
                v53 = bswap64(v180.n128_u64[0]);
                v54 = bswap64(*v8);
                if (v53 != v54)
                  goto LABEL_99;
                v53 = bswap64(v180.n128_u64[1]);
                v54 = bswap64(v8[1]);
                if (v53 == v54
                  && (v53 = bswap64(v183), v54 = bswap64(v8[2]), v53 == v54)
                  && (v53 = bswap64(*((unint64_t *)&v183 + 1)), v54 = bswap64(v8[3]), v53 == v54))
                {
                  v55 = 0;
                }
                else
                {
LABEL_99:
                  v55 = v53 < v54 ? -1 : 1;
                }
                v52 = v8 + 4;
              }
              while ((v55 & 0x80000000) == 0);
            }
            v61 = (_OWORD *)a2;
            if ((unint64_t)v8 < a2)
            {
              v62 = (_OWORD *)a2;
              v61 = (_OWORD *)a2;
              do
              {
                v63 = *((_QWORD *)v61 - 4);
                v61 -= 2;
                v64 = bswap64(v180.n128_u64[0]);
                v65 = bswap64(v63);
                if (v64 == v65
                  && (v64 = bswap64(v180.n128_u64[1]), v65 = bswap64(*((_QWORD *)v62 - 3)), v64 == v65)
                  && (v64 = bswap64(v183), v65 = bswap64(*((_QWORD *)v62 - 2)), v64 == v65)
                  && (v64 = bswap64(*((unint64_t *)&v183 + 1)), v65 = bswap64(*((_QWORD *)v62 - 1)), v64 == v65))
                {
                  v66 = 0;
                }
                else if (v64 < v65)
                {
                  v66 = -1;
                }
                else
                {
                  v66 = 1;
                }
                v62 = v61;
              }
              while (v66 < 0);
            }
            while (v8 < (unint64_t *)v61)
            {
              v187 = *(__n128 *)v8;
              v196 = *((_OWORD *)v8 + 1);
              v67 = v61[1];
              *(_OWORD *)v8 = *v61;
              *((_OWORD *)v8 + 1) = v67;
              *v61 = v187;
              v61[1] = v196;
              v68 = v8;
              do
              {
                v69 = v8[4];
                v8 += 4;
                v70 = bswap64(v180.n128_u64[0]);
                v71 = bswap64(v69);
                if (v70 == v71
                  && (v70 = bswap64(v180.n128_u64[1]), v71 = bswap64(v68[5]), v70 == v71)
                  && (v70 = bswap64(v183), v71 = bswap64(v68[6]), v70 == v71)
                  && (v70 = bswap64(*((unint64_t *)&v183 + 1)), v71 = bswap64(v68[7]), v70 == v71))
                {
                  v72 = 0;
                }
                else if (v70 < v71)
                {
                  v72 = -1;
                }
                else
                {
                  v72 = 1;
                }
                v68 = v8;
              }
              while ((v72 & 0x80000000) == 0);
              v73 = v61;
              do
              {
                v74 = *((_QWORD *)v61 - 4);
                v61 -= 2;
                v75 = bswap64(v180.n128_u64[0]);
                v76 = bswap64(v74);
                if (v75 == v76
                  && (v75 = bswap64(v180.n128_u64[1]), v76 = bswap64(*((_QWORD *)v73 - 3)), v75 == v76)
                  && (v75 = bswap64(v183), v76 = bswap64(*((_QWORD *)v73 - 2)), v75 == v76)
                  && (v75 = bswap64(*((unint64_t *)&v183 + 1)), v76 = bswap64(*((_QWORD *)v73 - 1)), v75 == v76))
                {
                  v77 = 0;
                }
                else if (v75 < v76)
                {
                  v77 = -1;
                }
                else
                {
                  v77 = 1;
                }
                v73 = v61;
              }
              while (v77 < 0);
            }
            v78 = (__n128 *)(v8 - 4);
            if (v8 - 4 != a1)
            {
              v79 = *((_OWORD *)v8 - 1);
              *(__n128 *)a1 = *v78;
              *((_OWORD *)a1 + 1) = v79;
            }
            a4 = 0;
            result = v180;
            *v78 = v180;
            *((_OWORD *)v8 - 1) = v183;
            continue;
          }
        }
        v17 = 0;
        v179 = *(__n128 *)a1;
        v182 = *((_OWORD *)a1 + 1);
        do
        {
          v18 = &a1[v17];
          v19 = bswap64(a1[v17 + 4]);
          v20 = bswap64(v179.n128_u64[0]);
          if (v19 == v20
            && (v19 = bswap64(v18[5]), v20 = bswap64(v179.n128_u64[1]), v19 == v20)
            && (v19 = bswap64(v18[6]), v20 = bswap64(v182), v19 == v20)
            && (v19 = bswap64(v18[7]), v20 = bswap64(*((unint64_t *)&v182 + 1)), v19 == v20))
          {
            v21 = 0;
          }
          else if (v19 < v20)
          {
            v21 = -1;
          }
          else
          {
            v21 = 1;
          }
          v17 += 4;
        }
        while (v21 < 0);
        v22 = &a1[v17];
        v23 = a2;
        if (v17 == 4)
        {
          v28 = (_OWORD *)a2;
          while (v22 < (unint64_t *)v28)
          {
            v24 = v28 - 2;
            v29 = bswap64(*((_QWORD *)v28 - 4));
            v30 = bswap64(v179.n128_u64[0]);
            if (v29 == v30
              && (v29 = bswap64(*((_QWORD *)v28 - 3)), v30 = bswap64(v179.n128_u64[1]), v29 == v30)
              && (v29 = bswap64(*((_QWORD *)v28 - 2)), v30 = bswap64(v182), v29 == v30)
              && (v29 = bswap64(*((_QWORD *)v28 - 1)), v30 = bswap64(*((unint64_t *)&v182 + 1)), v29 == v30))
            {
              v31 = 0;
            }
            else if (v29 < v30)
            {
              v31 = -1;
            }
            else
            {
              v31 = 1;
            }
            v28 -= 2;
            if (v31 < 0)
              goto LABEL_52;
          }
          v24 = v28;
        }
        else
        {
          do
          {
            v24 = (_OWORD *)(v23 - 32);
            v25 = bswap64(*(_QWORD *)(v23 - 32));
            v26 = bswap64(v179.n128_u64[0]);
            if (v25 == v26
              && (v25 = bswap64(*(_QWORD *)(v23 - 24)), v26 = bswap64(v179.n128_u64[1]), v25 == v26)
              && (v25 = bswap64(*(_QWORD *)(v23 - 16)), v26 = bswap64(v182), v25 == v26)
              && (v25 = bswap64(*(_QWORD *)(v23 - 8)), v26 = bswap64(*((unint64_t *)&v182 + 1)), v25 == v26))
            {
              v27 = 0;
            }
            else if (v25 < v26)
            {
              v27 = -1;
            }
            else
            {
              v27 = 1;
            }
            v23 -= 32;
          }
          while ((v27 & 0x80000000) == 0);
        }
LABEL_52:
        if (v22 >= (unint64_t *)v24)
        {
          v45 = v22 - 4;
        }
        else
        {
          v32 = (unint64_t)v22;
          v33 = v24;
          do
          {
            v186 = *(_OWORD *)v32;
            v195 = *(_OWORD *)(v32 + 16);
            v34 = v33[1];
            *(_OWORD *)v32 = *v33;
            *(_OWORD *)(v32 + 16) = v34;
            *v33 = v186;
            v33[1] = v195;
            v35 = (unint64_t *)v32;
            do
            {
              v36 = *(_QWORD *)(v32 + 32);
              v32 += 32;
              v37 = bswap64(v36);
              v38 = bswap64(v179.n128_u64[0]);
              if (v37 == v38
                && (v37 = bswap64(v35[5]), v38 = bswap64(v179.n128_u64[1]), v37 == v38)
                && (v37 = bswap64(v35[6]), v38 = bswap64(v182), v37 == v38)
                && (v37 = bswap64(v35[7]), v38 = bswap64(*((unint64_t *)&v182 + 1)), v37 == v38))
              {
                v39 = 0;
              }
              else if (v37 < v38)
              {
                v39 = -1;
              }
              else
              {
                v39 = 1;
              }
              v35 = (unint64_t *)v32;
            }
            while (v39 < 0);
            v40 = v33;
            do
            {
              v41 = *((_QWORD *)v33 - 4);
              v33 -= 2;
              v42 = bswap64(v41);
              v43 = bswap64(v179.n128_u64[0]);
              if (v42 == v43
                && (v42 = bswap64(*((_QWORD *)v40 - 3)), v43 = bswap64(v179.n128_u64[1]), v42 == v43)
                && (v42 = bswap64(*((_QWORD *)v40 - 2)), v43 = bswap64(v182), v42 == v43)
                && (v42 = bswap64(*((_QWORD *)v40 - 1)), v43 = bswap64(*((unint64_t *)&v182 + 1)), v42 == v43))
              {
                v44 = 0;
              }
              else if (v42 < v43)
              {
                v44 = -1;
              }
              else
              {
                v44 = 1;
              }
              v40 = v33;
            }
            while ((v44 & 0x80000000) == 0);
          }
          while (v32 < (unint64_t)v33);
          v45 = (unint64_t *)(v32 - 32);
        }
        if (v45 != a1)
        {
          v46 = *((_OWORD *)v45 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v45;
          *((_OWORD *)a1 + 1) = v46;
        }
        *(__n128 *)v45 = v179;
        *((_OWORD *)v45 + 1) = v182;
        if (v22 < (unint64_t *)v24)
        {
LABEL_82:
          std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLUINT256_t const*,unsigned int const*,unsigned long)::$_0 &,MTLUINT256_t*,false>(a1, v45, a3, a4 & 1);
          a4 = 0;
          v8 = v45 + 4;
          continue;
        }
        v47 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLUINT256_t const*,unsigned int const*,unsigned long)::$_0 &,MTLUINT256_t*>(a1, v45);
        v8 = v45 + 4;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLUINT256_t const*,unsigned int const*,unsigned long)::$_0 &,MTLUINT256_t*>(v45 + 4, (unint64_t *)a2))
        {
          if (v47)
            continue;
          goto LABEL_82;
        }
        a2 = (unint64_t)v45;
        if (!v47)
          goto LABEL_1;
        return result;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - (_QWORD)v8;
    v10 = (uint64_t)(a2 - (_QWORD)v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v81 = *(_QWORD *)(a2 - 32);
        v80 = a2 - 32;
        v82 = bswap64(v81);
        v83 = bswap64(*v8);
        if (v82 == v83
          && (v82 = bswap64(*(_QWORD *)(v80 + 8)), v83 = bswap64(v8[1]), v82 == v83)
          && (v82 = bswap64(*(_QWORD *)(v80 + 16)), v83 = bswap64(v8[2]), v82 == v83)
          && (v82 = bswap64(*(_QWORD *)(v80 + 24)), v83 = bswap64(v8[3]), v82 == v83))
        {
          v84 = 0;
        }
        else if (v82 < v83)
        {
          v84 = -1;
        }
        else
        {
          v84 = 1;
        }
        if (v84 < 0)
        {
          v191 = *(__n128 *)v8;
          v200 = *((_OWORD *)v8 + 1);
          v153 = *(_OWORD *)(v80 + 16);
          *(_OWORD *)v8 = *(_OWORD *)v80;
          *((_OWORD *)v8 + 1) = v153;
          result = v191;
          *(__n128 *)v80 = v191;
          *(_OWORD *)(v80 + 16) = v200;
        }
        return result;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, (unint64_t *)(a2 - 32));
        return result;
      case 4uLL:
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, v8 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
        return result;
      case 5uLL:
        v85 = v8 + 4;
        v86 = v8 + 8;
        v87 = v8 + 12;
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, v8 + 8, v8 + 12).n128_u64[0];
        v89 = *(_QWORD *)(a2 - 32);
        v88 = a2 - 32;
        v90 = bswap64(v89);
        v91 = bswap64(v8[12]);
        if (v90 == v91
          && (v90 = bswap64(*(_QWORD *)(v88 + 8)), v91 = bswap64(v8[13]), v90 == v91)
          && (v90 = bswap64(*(_QWORD *)(v88 + 16)), v91 = bswap64(v8[14]), v90 == v91)
          && (v90 = bswap64(*(_QWORD *)(v88 + 24)), v91 = bswap64(v8[15]), v90 == v91))
        {
          v92 = 0;
        }
        else if (v90 < v91)
        {
          v92 = -1;
        }
        else
        {
          v92 = 1;
        }
        if (v92 < 0)
        {
          result = *(__n128 *)v87;
          v201 = *((_OWORD *)v8 + 7);
          v154 = *(_OWORD *)(v88 + 16);
          *(_OWORD *)v87 = *(_OWORD *)v88;
          *((_OWORD *)v8 + 7) = v154;
          *(__n128 *)v88 = result;
          *(_OWORD *)(v88 + 16) = v201;
          v155 = bswap64(*v87);
          v156 = bswap64(*v86);
          if (v155 != v156)
            goto LABEL_324;
          v155 = bswap64(v8[13]);
          v156 = bswap64(v8[9]);
          if (v155 == v156
            && (v155 = bswap64(v8[14]), v156 = bswap64(v8[10]), v155 == v156)
            && (v155 = bswap64(v8[15]), v156 = bswap64(v8[11]), v155 == v156))
          {
            v157 = 0;
          }
          else
          {
LABEL_324:
            v157 = v155 < v156 ? -1 : 1;
          }
          if (v157 < 0)
          {
            v168 = *(_OWORD *)v86;
            result = *((__n128 *)v8 + 5);
            v169 = *((_OWORD *)v8 + 7);
            *(_OWORD *)v86 = *(_OWORD *)v87;
            *((_OWORD *)v8 + 5) = v169;
            *(_OWORD *)v87 = v168;
            *((__n128 *)v8 + 7) = result;
            v170 = bswap64(*v86);
            v171 = bswap64(*v85);
            if (v170 != v171)
              goto LABEL_333;
            v170 = bswap64(v8[9]);
            v171 = bswap64(v8[5]);
            if (v170 == v171
              && (v170 = bswap64(v8[10]), v171 = bswap64(v8[6]), v170 == v171)
              && (v170 = bswap64(v8[11]), v171 = bswap64(v8[7]), v170 == v171))
            {
              v172 = 0;
            }
            else
            {
LABEL_333:
              v172 = v170 < v171 ? -1 : 1;
            }
            if (v172 < 0)
            {
              v173 = *(_OWORD *)v85;
              result = *((__n128 *)v8 + 3);
              v174 = *((_OWORD *)v8 + 5);
              *(_OWORD *)v85 = *(_OWORD *)v86;
              *((_OWORD *)v8 + 3) = v174;
              *(_OWORD *)v86 = v173;
              *((__n128 *)v8 + 5) = result;
              v175 = bswap64(v8[4]);
              v176 = bswap64(*v8);
              if (v175 != v176)
                goto LABEL_342;
              v175 = bswap64(v8[5]);
              v176 = bswap64(v8[1]);
              if (v175 == v176
                && (v175 = bswap64(v8[6]), v176 = bswap64(v8[2]), v175 == v176)
                && (v175 = bswap64(v8[7]), v176 = bswap64(v8[3]), v175 == v176))
              {
                v177 = 0;
              }
              else
              {
LABEL_342:
                v177 = v175 < v176 ? -1 : 1;
              }
              if (v177 < 0)
              {
                v193 = *(__n128 *)v8;
                v203 = *((_OWORD *)v8 + 1);
                v178 = *((_OWORD *)v8 + 3);
                *(_OWORD *)v8 = *(_OWORD *)v85;
                *((_OWORD *)v8 + 1) = v178;
                result = v193;
                *(__n128 *)v85 = v193;
                *((_OWORD *)v8 + 3) = v203;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 767)
        {
          n128_u64 = v8 + 4;
          v95 = v8 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v95)
            {
              v96 = 0;
              v97 = v8;
              do
              {
                v98 = (__n128 *)n128_u64;
                v99 = bswap64(v97[4]);
                v100 = bswap64(*v97);
                if (v99 != v100
                  || (v99 = bswap64(v98->n128_u64[1]), v100 = bswap64(v97[1]), v99 != v100)
                  || (v99 = bswap64(v98[1].n128_u64[0]), v100 = bswap64(v97[2]), v99 != v100)
                  || (v99 = bswap64(v98[1].n128_u64[1]), v100 = bswap64(v97[3]), v99 != v100))
                {
                  v101 = v99 < v100 ? -1 : 1;
                  if (v101 < 0)
                  {
                    v188 = *v98;
                    v197 = v98[1];
                    v102 = v96;
                    while (1)
                    {
                      v103 = (char *)v8 + v102;
                      v104 = *(_OWORD *)((char *)v8 + v102 + 16);
                      *((_OWORD *)v103 + 2) = *(_OWORD *)((char *)v8 + v102);
                      *((_OWORD *)v103 + 3) = v104;
                      if (!v102)
                        break;
                      v105 = bswap64(v188.n128_u64[0]);
                      v106 = bswap64(*((_QWORD *)v103 - 4));
                      if (v105 == v106
                        && (v105 = bswap64(v188.n128_u64[1]), v106 = bswap64(*((_QWORD *)v103 - 3)), v105 == v106)
                        && (v105 = bswap64(v197.n128_u64[0]), v106 = bswap64(*((_QWORD *)v103 - 2)), v105 == v106)
                        && (v105 = bswap64(v197.n128_u64[1]), v106 = bswap64(*((_QWORD *)v103 - 1)), v105 == v106))
                      {
                        v107 = 0;
                      }
                      else if (v105 < v106)
                      {
                        v107 = -1;
                      }
                      else
                      {
                        v107 = 1;
                      }
                      v102 -= 32;
                      if ((v107 & 0x80000000) == 0)
                      {
                        v108 = (__n128 *)((char *)v8 + v102 + 32);
                        goto LABEL_195;
                      }
                    }
                    v108 = (__n128 *)v8;
LABEL_195:
                    result = v188;
                    *v108 = v188;
                    v108[1] = v197;
                  }
                }
                n128_u64 = v98[2].n128_u64;
                v96 += 32;
                v97 = (unint64_t *)v98;
              }
              while (&v98[2] != (__n128 *)a2);
            }
          }
          else if (!v95)
          {
            v158 = v8 - 4;
            do
            {
              v159 = (__n128 *)n128_u64;
              v160 = bswap64(a1[4]);
              v161 = bswap64(*a1);
              if (v160 != v161
                || (v160 = bswap64(v159->n128_u64[1]), v161 = bswap64(a1[1]), v160 != v161)
                || (v160 = bswap64(v159[1].n128_u64[0]), v161 = bswap64(a1[2]), v160 != v161)
                || (v160 = bswap64(v159[1].n128_u64[1]), v161 = bswap64(a1[3]), v160 != v161))
              {
                v162 = v160 < v161 ? -1 : 1;
                if (v162 < 0)
                {
                  v192 = *v159;
                  v202 = v159[1];
                  v163 = v158;
                  do
                  {
                    v164 = *((_OWORD *)v163 + 3);
                    *((_OWORD *)v163 + 4) = *((_OWORD *)v163 + 2);
                    *((_OWORD *)v163 + 5) = v164;
                    v165 = bswap64(v192.n128_u64[0]);
                    v166 = bswap64(*v163);
                    if (v165 == v166
                      && (v165 = bswap64(v192.n128_u64[1]), v166 = bswap64(v163[1]), v165 == v166)
                      && (v165 = bswap64(v202.n128_u64[0]), v166 = bswap64(v163[2]), v165 == v166)
                      && (v165 = bswap64(v202.n128_u64[1]), v166 = bswap64(v163[3]), v165 == v166))
                    {
                      v167 = 0;
                    }
                    else if (v165 < v166)
                    {
                      v167 = -1;
                    }
                    else
                    {
                      v167 = 1;
                    }
                    v163 -= 4;
                  }
                  while (v167 < 0);
                  result = v192;
                  *((__n128 *)v163 + 4) = v192;
                  *((__n128 *)v163 + 5) = v202;
                }
              }
              n128_u64 = v159[2].n128_u64;
              v158 += 4;
              a1 = (unint64_t *)v159;
            }
            while (&v159[2] != (__n128 *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != (unint64_t *)a2)
          {
            v109 = (v10 - 2) >> 1;
            v110 = v109;
            do
            {
              v111 = v110;
              if (v109 >= v110)
              {
                v112 = (2 * v110) | 1;
                v113 = &v8[4 * v112];
                if (2 * v111 + 2 < (uint64_t)v10)
                {
                  v114 = bswap64(*v113);
                  v115 = bswap64(v113[4]);
                  if (v114 != v115)
                    goto LABEL_207;
                  v114 = bswap64(v113[1]);
                  v115 = bswap64(v113[5]);
                  if (v114 == v115
                    && (v114 = bswap64(v113[2]), v115 = bswap64(v113[6]), v114 == v115)
                    && (v114 = bswap64(v113[3]), v115 = bswap64(v113[7]), v114 == v115))
                  {
                    v116 = 0;
                  }
                  else
                  {
LABEL_207:
                    v116 = v114 < v115 ? -1 : 1;
                  }
                  if (v116 < 0)
                  {
                    v113 += 4;
                    v112 = 2 * v111 + 2;
                  }
                }
                v117 = &v8[4 * v111];
                v118 = bswap64(*v113);
                v119 = bswap64(*v117);
                if (v118 == v119
                  && (v118 = bswap64(v113[1]), v119 = bswap64(v117[1]), v118 == v119)
                  && (v118 = bswap64(v113[2]), v119 = bswap64(v117[2]), v118 == v119)
                  && (v118 = bswap64(v113[3]), v119 = bswap64(v117[3]), v118 == v119)
                  || (v118 < v119 ? (v120 = -1) : (v120 = 1), (v120 & 0x80000000) == 0))
                {
                  v189 = *(_OWORD *)v117;
                  v198 = *((_OWORD *)v117 + 1);
                  do
                  {
                    v121 = v113;
                    v122 = *((_OWORD *)v113 + 1);
                    *(_OWORD *)v117 = *(_OWORD *)v113;
                    *((_OWORD *)v117 + 1) = v122;
                    if (v109 < v112)
                      break;
                    v123 = (2 * v112) | 1;
                    v113 = &v8[4 * v123];
                    v112 = 2 * v112 + 2;
                    if (v112 >= (uint64_t)v10)
                    {
                      v112 = v123;
                    }
                    else
                    {
                      v124 = bswap64(*v113);
                      v125 = bswap64(v113[4]);
                      if (v124 != v125)
                        goto LABEL_229;
                      v124 = bswap64(v113[1]);
                      v125 = bswap64(v113[5]);
                      if (v124 == v125
                        && (v124 = bswap64(v113[2]), v125 = bswap64(v113[6]), v124 == v125)
                        && (v124 = bswap64(v113[3]), v125 = bswap64(v113[7]), v124 == v125))
                      {
                        v126 = 0;
                      }
                      else
                      {
LABEL_229:
                        v126 = v124 < v125 ? -1 : 1;
                      }
                      if (v126 >= 0)
                        v112 = v123;
                      else
                        v113 += 4;
                    }
                    v127 = bswap64(*v113);
                    v128 = bswap64(v189);
                    if (v127 != v128)
                      goto LABEL_240;
                    v127 = bswap64(v113[1]);
                    v128 = bswap64(*((unint64_t *)&v189 + 1));
                    if (v127 == v128
                      && (v127 = bswap64(v113[2]), v128 = bswap64(v198), v127 == v128)
                      && (v127 = bswap64(v113[3]), v128 = bswap64(*((unint64_t *)&v198 + 1)), v127 == v128))
                    {
                      v129 = 0;
                    }
                    else
                    {
LABEL_240:
                      v129 = v127 < v128 ? -1 : 1;
                    }
                    v117 = v121;
                  }
                  while ((v129 & 0x80000000) == 0);
                  *(_OWORD *)v121 = v189;
                  *((_OWORD *)v121 + 1) = v198;
                }
              }
              v110 = v111 - 1;
            }
            while (v111);
            v130 = (unint64_t)v9 >> 5;
            do
            {
              v131 = 0;
              v181 = *(__n128 *)v8;
              v184 = *((_OWORD *)v8 + 1);
              v132 = v8;
              do
              {
                v133 = &v132[4 * v131 + 4];
                v134 = (2 * v131) | 1;
                v135 = 2 * v131 + 2;
                if (v135 < v130)
                {
                  v136 = bswap64(*v133);
                  v137 = bswap64(v133[4]);
                  if (v136 != v137)
                    goto LABEL_254;
                  v136 = bswap64(v133[1]);
                  v137 = bswap64(v133[5]);
                  if (v136 == v137
                    && (v136 = bswap64(v133[2]), v137 = bswap64(v133[6]), v136 == v137)
                    && (v136 = bswap64(v133[3]), v137 = bswap64(v133[7]), v136 == v137))
                  {
                    v138 = 0;
                  }
                  else
                  {
LABEL_254:
                    v138 = v136 < v137 ? -1 : 1;
                  }
                  if (v138 < 0)
                  {
                    v133 += 4;
                    v134 = v135;
                  }
                }
                v139 = *((_OWORD *)v133 + 1);
                *(_OWORD *)v132 = *(_OWORD *)v133;
                *((_OWORD *)v132 + 1) = v139;
                v132 = v133;
                v131 = v134;
              }
              while (v134 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
              a2 -= 32;
              if (v133 == (unint64_t *)a2)
              {
                result = v181;
                *(__n128 *)v133 = v181;
                *((_OWORD *)v133 + 1) = v184;
              }
              else
              {
                v140 = *(_OWORD *)(a2 + 16);
                *(_OWORD *)v133 = *(_OWORD *)a2;
                *((_OWORD *)v133 + 1) = v140;
                result = v181;
                *(__n128 *)a2 = v181;
                *(_OWORD *)(a2 + 16) = v184;
                v141 = (char *)v133 - (char *)v8 + 32;
                if (v141 >= 33)
                {
                  v142 = (((unint64_t)v141 >> 5) - 2) >> 1;
                  v143 = &v8[4 * v142];
                  v144 = bswap64(*v143);
                  v145 = bswap64(*v133);
                  if (v144 != v145
                    || (v144 = bswap64(v143[1]), v145 = bswap64(v133[1]), v144 != v145)
                    || (v144 = bswap64(v143[2]), v145 = bswap64(v133[2]), v144 != v145)
                    || (v144 = bswap64(v143[3]), v145 = bswap64(v133[3]), v144 != v145))
                  {
                    v146 = v144 < v145 ? -1 : 1;
                    if (v146 < 0)
                    {
                      v190 = *(__n128 *)v133;
                      v199 = *((__n128 *)v133 + 1);
                      do
                      {
                        v147 = (__n128 *)v143;
                        v148 = *((_OWORD *)v143 + 1);
                        *(_OWORD *)v133 = *(_OWORD *)v143;
                        *((_OWORD *)v133 + 1) = v148;
                        if (!v142)
                          break;
                        v142 = (v142 - 1) >> 1;
                        v143 = &v8[4 * v142];
                        v149 = bswap64(*v143);
                        v150 = bswap64(v190.n128_u64[0]);
                        if (v149 != v150)
                          goto LABEL_279;
                        v149 = bswap64(v143[1]);
                        v150 = bswap64(v190.n128_u64[1]);
                        if (v149 == v150
                          && (v149 = bswap64(v143[2]), v150 = bswap64(v199.n128_u64[0]), v149 == v150)
                          && (v149 = bswap64(v143[3]), v150 = bswap64(v199.n128_u64[1]), v149 == v150))
                        {
                          v151 = 0;
                        }
                        else
                        {
LABEL_279:
                          v151 = v149 < v150 ? -1 : 1;
                        }
                        v133 = (unint64_t *)v147;
                      }
                      while (v151 < 0);
                      result = v190;
                      *v147 = v190;
                      v147[1] = v199;
                    }
                  }
                }
              }
            }
            while (v130-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[4 * (v10 >> 1)];
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v10 >> 1)], a1, (unint64_t *)(a2 - 32));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v10 >> 1)], (unint64_t *)(a2 - 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v12 - 4, (unint64_t *)(a2 - 64));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v11 + 4], (unint64_t *)(a2 - 96));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v12 - 4, v12, &a1[4 * v11 + 4]);
          v185 = *(__n128 *)a1;
          v194 = *((_OWORD *)a1 + 1);
          v13 = *((_OWORD *)v12 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *((_OWORD *)a1 + 1) = v13;
          *(__n128 *)v12 = v185;
          *((_OWORD *)v12 + 1) = v194;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = bswap64(*(a1 - 4));
          v15 = bswap64(*a1);
          if (v14 != v15)
            goto LABEL_14;
          v14 = bswap64(*(a1 - 3));
          v15 = bswap64(a1[1]);
          if (v14 == v15
            && (v14 = bswap64(*(a1 - 2)), v15 = bswap64(a1[2]), v14 == v15)
            && (v14 = bswap64(*(a1 - 1)), v15 = bswap64(a1[3]), v14 == v15))
          {
            v16 = 0;
          }
          else
          {
LABEL_14:
            v16 = v14 < v15 ? -1 : 1;
          }
          if ((v16 & 0x80000000) == 0)
          {
            v180 = *(__n128 *)a1;
            v183 = *((_OWORD *)a1 + 1);
            v49 = bswap64(*a1);
            v50 = bswap64(*(_QWORD *)(a2 - 32));
            if (v49 == v50
              && (v49 = bswap64(v180.n128_u64[1]), v50 = bswap64(*(_QWORD *)(a2 - 24)), v49 == v50)
              && (v49 = bswap64(v183), v50 = bswap64(*(_QWORD *)(a2 - 16)), v49 == v50)
              && (v49 = bswap64(*((unint64_t *)&v183 + 1)), v50 = bswap64(*(_QWORD *)(a2 - 8)), v49 == v50))
            {
              v51 = 0;
            }
            else if (v49 < v50)
            {
              v51 = -1;
            }
            else
            {
              v51 = 1;
            }
            if (v51 < 0)
            {
              v56 = a1;
              v8 = a1;
              do
              {
                v57 = v8[4];
                v8 += 4;
                v58 = bswap64(v180.n128_u64[0]);
                v59 = bswap64(v57);
                if (v58 == v59
                  && (v58 = bswap64(v180.n128_u64[1]), v59 = bswap64(v56[5]), v58 == v59)
                  && (v58 = bswap64(v183), v59 = bswap64(v56[6]), v58 == v59)
                  && (v58 = bswap64(*((unint64_t *)&v183 + 1)), v59 = bswap64(v56[7]), v58 == v59))
                {
                  v60 = 0;
                }
                else if (v58 < v59)
                {
                  v60 = -1;
                }
                else
                {
                  v60 = 1;
                }
                v56 = v8;
              }
              while ((v60 & 0x80000000) == 0);
            }
            else
            {
              v52 = a1 + 4;
              do
              {
                v8 = v52;
                if ((unint64_t)v52 >= a2)
                  break;
                v53 = bswap64(v180.n128_u64[0]);
                v54 = bswap64(*v8);
                if (v53 != v54)
                  goto LABEL_99;
                v53 = bswap64(v180.n128_u64[1]);
                v54 = bswap64(v8[1]);
                if (v53 == v54
                  && (v53 = bswap64(v183), v54 = bswap64(v8[2]), v53 == v54)
                  && (v53 = bswap64(*((unint64_t *)&v183 + 1)), v54 = bswap64(v8[3]), v53 == v54))
                {
                  v55 = 0;
                }
                else
                {
LABEL_99:
                  v55 = v53 < v54 ? -1 : 1;
                }
                v52 = v8 + 4;
              }
              while ((v55 & 0x80000000) == 0);
            }
            v61 = (_OWORD *)a2;
            if ((unint64_t)v8 < a2)
            {
              v62 = (_OWORD *)a2;
              v61 = (_OWORD *)a2;
              do
              {
                v63 = *((_QWORD *)v61 - 4);
                v61 -= 2;
                v64 = bswap64(v180.n128_u64[0]);
                v65 = bswap64(v63);
                if (v64 == v65
                  && (v64 = bswap64(v180.n128_u64[1]), v65 = bswap64(*((_QWORD *)v62 - 3)), v64 == v65)
                  && (v64 = bswap64(v183), v65 = bswap64(*((_QWORD *)v62 - 2)), v64 == v65)
                  && (v64 = bswap64(*((unint64_t *)&v183 + 1)), v65 = bswap64(*((_QWORD *)v62 - 1)), v64 == v65))
                {
                  v66 = 0;
                }
                else if (v64 < v65)
                {
                  v66 = -1;
                }
                else
                {
                  v66 = 1;
                }
                v62 = v61;
              }
              while (v66 < 0);
            }
            while (v8 < (unint64_t *)v61)
            {
              v187 = *(__n128 *)v8;
              v196 = *((_OWORD *)v8 + 1);
              v67 = v61[1];
              *(_OWORD *)v8 = *v61;
              *((_OWORD *)v8 + 1) = v67;
              *v61 = v187;
              v61[1] = v196;
              v68 = v8;
              do
              {
                v69 = v8[4];
                v8 += 4;
                v70 = bswap64(v180.n128_u64[0]);
                v71 = bswap64(v69);
                if (v70 == v71
                  && (v70 = bswap64(v180.n128_u64[1]), v71 = bswap64(v68[5]), v70 == v71)
                  && (v70 = bswap64(v183), v71 = bswap64(v68[6]), v70 == v71)
                  && (v70 = bswap64(*((unint64_t *)&v183 + 1)), v71 = bswap64(v68[7]), v70 == v71))
                {
                  v72 = 0;
                }
                else if (v70 < v71)
                {
                  v72 = -1;
                }
                else
                {
                  v72 = 1;
                }
                v68 = v8;
              }
              while ((v72 & 0x80000000) == 0);
              v73 = v61;
              do
              {
                v74 = *((_QWORD *)v61 - 4);
                v61 -= 2;
                v75 = bswap64(v180.n128_u64[0]);
                v76 = bswap64(v74);
                if (v75 == v76
                  && (v75 = bswap64(v180.n128_u64[1]), v76 = bswap64(*((_QWORD *)v73 - 3)), v75 == v76)
                  && (v75 = bswap64(v183), v76 = bswap64(*((_QWORD *)v73 - 2)), v75 == v76)
                  && (v75 = bswap64(*((unint64_t *)&v183 + 1)), v76 = bswap64(*((_QWORD *)v73 - 1)), v75 == v76))
                {
                  v77 = 0;
                }
                else if (v75 < v76)
                {
                  v77 = -1;
                }
                else
                {
                  v77 = 1;
                }
                v73 = v61;
              }
              while (v77 < 0);
            }
            v78 = (__n128 *)(v8 - 4);
            if (v8 - 4 != a1)
            {
              v79 = *((_OWORD *)v8 - 1);
              *(__n128 *)a1 = *v78;
              *((_OWORD *)a1 + 1) = v79;
            }
            a4 = 0;
            result = v180;
            *v78 = v180;
            *((_OWORD *)v8 - 1) = v183;
            continue;
          }
        }
        v17 = 0;
        v179 = *(__n128 *)a1;
        v182 = *((_OWORD *)a1 + 1);
        do
        {
          v18 = &a1[v17];
          v19 = bswap64(a1[v17 + 4]);
          v20 = bswap64(v179.n128_u64[0]);
          if (v19 == v20
            && (v19 = bswap64(v18[5]), v20 = bswap64(v179.n128_u64[1]), v19 == v20)
            && (v19 = bswap64(v18[6]), v20 = bswap64(v182), v19 == v20)
            && (v19 = bswap64(v18[7]), v20 = bswap64(*((unint64_t *)&v182 + 1)), v19 == v20))
          {
            v21 = 0;
          }
          else if (v19 < v20)
          {
            v21 = -1;
          }
          else
          {
            v21 = 1;
          }
          v17 += 4;
        }
        while (v21 < 0);
        v22 = &a1[v17];
        v23 = a2;
        if (v17 == 4)
        {
          v28 = (_OWORD *)a2;
          while (v22 < (unint64_t *)v28)
          {
            v24 = v28 - 2;
            v29 = bswap64(*((_QWORD *)v28 - 4));
            v30 = bswap64(v179.n128_u64[0]);
            if (v29 == v30
              && (v29 = bswap64(*((_QWORD *)v28 - 3)), v30 = bswap64(v179.n128_u64[1]), v29 == v30)
              && (v29 = bswap64(*((_QWORD *)v28 - 2)), v30 = bswap64(v182), v29 == v30)
              && (v29 = bswap64(*((_QWORD *)v28 - 1)), v30 = bswap64(*((unint64_t *)&v182 + 1)), v29 == v30))
            {
              v31 = 0;
            }
            else if (v29 < v30)
            {
              v31 = -1;
            }
            else
            {
              v31 = 1;
            }
            v28 -= 2;
            if (v31 < 0)
              goto LABEL_52;
          }
          v24 = v28;
        }
        else
        {
          do
          {
            v24 = (_OWORD *)(v23 - 32);
            v25 = bswap64(*(_QWORD *)(v23 - 32));
            v26 = bswap64(v179.n128_u64[0]);
            if (v25 == v26
              && (v25 = bswap64(*(_QWORD *)(v23 - 24)), v26 = bswap64(v179.n128_u64[1]), v25 == v26)
              && (v25 = bswap64(*(_QWORD *)(v23 - 16)), v26 = bswap64(v182), v25 == v26)
              && (v25 = bswap64(*(_QWORD *)(v23 - 8)), v26 = bswap64(*((unint64_t *)&v182 + 1)), v25 == v26))
            {
              v27 = 0;
            }
            else if (v25 < v26)
            {
              v27 = -1;
            }
            else
            {
              v27 = 1;
            }
            v23 -= 32;
          }
          while ((v27 & 0x80000000) == 0);
        }
LABEL_52:
        if (v22 >= (unint64_t *)v24)
        {
          v45 = v22 - 4;
        }
        else
        {
          v32 = (unint64_t)v22;
          v33 = v24;
          do
          {
            v186 = *(_OWORD *)v32;
            v195 = *(_OWORD *)(v32 + 16);
            v34 = v33[1];
            *(_OWORD *)v32 = *v33;
            *(_OWORD *)(v32 + 16) = v34;
            *v33 = v186;
            v33[1] = v195;
            v35 = (unint64_t *)v32;
            do
            {
              v36 = *(_QWORD *)(v32 + 32);
              v32 += 32;
              v37 = bswap64(v36);
              v38 = bswap64(v179.n128_u64[0]);
              if (v37 == v38
                && (v37 = bswap64(v35[5]), v38 = bswap64(v179.n128_u64[1]), v37 == v38)
                && (v37 = bswap64(v35[6]), v38 = bswap64(v182), v37 == v38)
                && (v37 = bswap64(v35[7]), v38 = bswap64(*((unint64_t *)&v182 + 1)), v37 == v38))
              {
                v39 = 0;
              }
              else if (v37 < v38)
              {
                v39 = -1;
              }
              else
              {
                v39 = 1;
              }
              v35 = (unint64_t *)v32;
            }
            while (v39 < 0);
            v40 = v33;
            do
            {
              v41 = *((_QWORD *)v33 - 4);
              v33 -= 2;
              v42 = bswap64(v41);
              v43 = bswap64(v179.n128_u64[0]);
              if (v42 == v43
                && (v42 = bswap64(*((_QWORD *)v40 - 3)), v43 = bswap64(v179.n128_u64[1]), v42 == v43)
                && (v42 = bswap64(*((_QWORD *)v40 - 2)), v43 = bswap64(v182), v42 == v43)
                && (v42 = bswap64(*((_QWORD *)v40 - 1)), v43 = bswap64(*((unint64_t *)&v182 + 1)), v42 == v43))
              {
                v44 = 0;
              }
              else if (v42 < v43)
              {
                v44 = -1;
              }
              else
              {
                v44 = 1;
              }
              v40 = v33;
            }
            while ((v44 & 0x80000000) == 0);
          }
          while (v32 < (unint64_t)v33);
          v45 = (unint64_t *)(v32 - 32);
        }
        if (v45 != a1)
        {
          v46 = *((_OWORD *)v45 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v45;
          *((_OWORD *)a1 + 1) = v46;
        }
        *(__n128 *)v45 = v179;
        *((_OWORD *)v45 + 1) = v182;
        if (v22 < (unint64_t *)v24)
        {
LABEL_82:
          std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::areBitcodesEqual(MTLUINT256_t const*,std::vector<MTLUINT256_t>)::$_0 &,MTLUINT256_t*,false>(a1, v45, a3, a4 & 1);
          a4 = 0;
          v8 = v45 + 4;
          continue;
        }
        v47 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::areBitcodesEqual(MTLUINT256_t const*,std::vector<MTLUINT256_t>)::$_0 &,MTLUINT256_t*>(a1, v45);
        v8 = v45 + 4;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::areBitcodesEqual(MTLUINT256_t const*,std::vector<MTLUINT256_t>)::$_0 &,MTLUINT256_t*>(v45 + 4, (unint64_t *)a2))
        {
          if (v47)
            continue;
          goto LABEL_82;
        }
        a2 = (unint64_t)v45;
        if (!v47)
          goto LABEL_1;
        return result;
    }
  }
}

  v9 = a2 - 3;
  v10 = (const void **)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (std::less<std::string>::operator()[abi:ne180100](a3, a2 - 3, v10))
        {
          v29 = v10[2];
          v27 = *(_OWORD *)v10;
          v25 = *(_OWORD *)v9;
          v10[2] = *(a2 - 1);
          *(_OWORD *)v10 = v25;
          *(_OWORD *)v9 = v27;
          *(a2 - 1) = v29;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, v10 + 3, a2 - 3, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(a2 - 3), a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(v10 + 9), (__int128 *)(a2 - 3), a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v10, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&v10[3 * v15], v10, a2 - 3, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, &v10[3 * v15], a2 - 3, a3);
            v17 = 3 * v15;
            v18 = &v10[3 * v15 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10 + 3, v18, a2 - 6, a3);
            v19 = v10 + 6;
            v20 = &v10[v17 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v19, v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v18, v16, v20, a3);
            v28 = *(const void **)(a1 + 16);
            v26 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            v16[2] = v28;
            *(_OWORD *)v16 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 - 24), (const void **)a1))
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((const void **)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((__int128 *)a1, a2, a3);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v22, a3);
          v10 = (const void **)(v22 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v22 + 24, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v22, a3, -v12, a5 & 1);
            v10 = (const void **)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (const void **)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v24 = *(a2 - 4);
        v23 = a2 - 4;
        v25 = bswap64(v24);
        v26 = bswap64(*v9);
        if (v25 == v26
          && (v25 = bswap64(v23[1]), v26 = bswap64(v9[1]), v25 == v26)
          && (v25 = bswap64(v23[2]), v26 = bswap64(v9[2]), v25 == v26)
          && (v25 = bswap64(v23[3]), v26 = bswap64(v9[3]), v25 == v26))
        {
          v27 = 0;
        }
        else if (v25 < v26)
        {
          v27 = -1;
        }
        else
        {
          v27 = 1;
        }
        if (v27 < 0)
        {
          v30 = *(_OWORD *)v9;
          v32 = *((_OWORD *)v9 + 1);
          v28 = *((_OWORD *)v23 + 1);
          *(_OWORD *)v9 = *(_OWORD *)v23;
          *((_OWORD *)v9 + 1) = v28;
          *(_OWORD *)v23 = v30;
          *((_OWORD *)v23 + 1) = v32;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, v9 + 4, a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, v9 + 4, v9 + 8, a2 - 4);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, v9 + 4, v9 + 8, v9 + 12, a2 - 4);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(&v9[4 * (v13 >> 1)], v9, a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, &v9[4 * (v13 >> 1)], a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9 + 4, v15 - 4, a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9 + 8, &v9[4 * v14 + 4], a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v15 - 4, v15, &v9[4 * v14 + 4]);
            v29 = *(_OWORD *)v9;
            v31 = *((_OWORD *)v9 + 1);
            v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)v15 = v29;
            *((_OWORD *)v15 + 1) = v31;
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          v17 = bswap64(*(v9 - 4));
          v18 = bswap64(*v9);
          if (v17 == v18
            && (v17 = bswap64(*(v9 - 3)), v18 = bswap64(v9[1]), v17 == v18)
            && (v17 = bswap64(*(v9 - 2)), v18 = bswap64(v9[2]), v17 == v18)
            && (v17 = bswap64(*(v9 - 1)), v18 = bswap64(v9[3]), v17 == v18))
          {
            v19 = 0;
          }
          else if (v17 < v18)
          {
            v19 = -1;
          }
          else
          {
            v19 = 1;
          }
          if ((v19 & 0x80000000) == 0)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MTLUINT256_t *,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &>(v9, a2);
            goto LABEL_24;
          }
LABEL_19:
          v20 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MTLUINT256_t *,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &>((__int128 *)v9, (__int128 *)a2);
          if ((v21 & 1) == 0)
            goto LABEL_22;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, v20);
          v9 = v20 + 4;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v20 + 4, a2))
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_22:
            std::__introsort<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*,false>(a1, v20, a3, -v11, a5 & 1);
            v9 = v20 + 4;
LABEL_24:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v20;
          if (v22)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*,MTLUINT256_t*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - (_QWORD)v8;
    v10 = (uint64_t)(a2 - (_QWORD)v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v81 = *(_QWORD *)(a2 - 32);
        v80 = a2 - 32;
        v82 = bswap64(v81);
        v83 = bswap64(*v8);
        if (v82 == v83
          && (v82 = bswap64(*(_QWORD *)(v80 + 8)), v83 = bswap64(v8[1]), v82 == v83)
          && (v82 = bswap64(*(_QWORD *)(v80 + 16)), v83 = bswap64(v8[2]), v82 == v83)
          && (v82 = bswap64(*(_QWORD *)(v80 + 24)), v83 = bswap64(v8[3]), v82 == v83))
        {
          v84 = 0;
        }
        else if (v82 < v83)
        {
          v84 = -1;
        }
        else
        {
          v84 = 1;
        }
        if (v84 < 0)
        {
          v191 = *(__n128 *)v8;
          v200 = *((_OWORD *)v8 + 1);
          v153 = *(_OWORD *)(v80 + 16);
          *(_OWORD *)v8 = *(_OWORD *)v80;
          *((_OWORD *)v8 + 1) = v153;
          result = v191;
          *(__n128 *)v80 = v191;
          *(_OWORD *)(v80 + 16) = v200;
        }
        return result;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, (unint64_t *)(a2 - 32));
        return result;
      case 4uLL:
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, v8 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
        return result;
      case 5uLL:
        v85 = v8 + 4;
        v86 = v8 + 8;
        v87 = v8 + 12;
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, v8 + 8, v8 + 12).n128_u64[0];
        v89 = *(_QWORD *)(a2 - 32);
        v88 = a2 - 32;
        v90 = bswap64(v89);
        v91 = bswap64(v8[12]);
        if (v90 == v91
          && (v90 = bswap64(*(_QWORD *)(v88 + 8)), v91 = bswap64(v8[13]), v90 == v91)
          && (v90 = bswap64(*(_QWORD *)(v88 + 16)), v91 = bswap64(v8[14]), v90 == v91)
          && (v90 = bswap64(*(_QWORD *)(v88 + 24)), v91 = bswap64(v8[15]), v90 == v91))
        {
          v92 = 0;
        }
        else if (v90 < v91)
        {
          v92 = -1;
        }
        else
        {
          v92 = 1;
        }
        if (v92 < 0)
        {
          result = *(__n128 *)v87;
          v201 = *((_OWORD *)v8 + 7);
          v154 = *(_OWORD *)(v88 + 16);
          *(_OWORD *)v87 = *(_OWORD *)v88;
          *((_OWORD *)v8 + 7) = v154;
          *(__n128 *)v88 = result;
          *(_OWORD *)(v88 + 16) = v201;
          v155 = bswap64(*v87);
          v156 = bswap64(*v86);
          if (v155 != v156)
            goto LABEL_324;
          v155 = bswap64(v8[13]);
          v156 = bswap64(v8[9]);
          if (v155 == v156
            && (v155 = bswap64(v8[14]), v156 = bswap64(v8[10]), v155 == v156)
            && (v155 = bswap64(v8[15]), v156 = bswap64(v8[11]), v155 == v156))
          {
            v157 = 0;
          }
          else
          {
LABEL_324:
            v157 = v155 < v156 ? -1 : 1;
          }
          if (v157 < 0)
          {
            v168 = *(_OWORD *)v86;
            result = *((__n128 *)v8 + 5);
            v169 = *((_OWORD *)v8 + 7);
            *(_OWORD *)v86 = *(_OWORD *)v87;
            *((_OWORD *)v8 + 5) = v169;
            *(_OWORD *)v87 = v168;
            *((__n128 *)v8 + 7) = result;
            v170 = bswap64(*v86);
            v171 = bswap64(*v85);
            if (v170 != v171)
              goto LABEL_333;
            v170 = bswap64(v8[9]);
            v171 = bswap64(v8[5]);
            if (v170 == v171
              && (v170 = bswap64(v8[10]), v171 = bswap64(v8[6]), v170 == v171)
              && (v170 = bswap64(v8[11]), v171 = bswap64(v8[7]), v170 == v171))
            {
              v172 = 0;
            }
            else
            {
LABEL_333:
              v172 = v170 < v171 ? -1 : 1;
            }
            if (v172 < 0)
            {
              v173 = *(_OWORD *)v85;
              result = *((__n128 *)v8 + 3);
              v174 = *((_OWORD *)v8 + 5);
              *(_OWORD *)v85 = *(_OWORD *)v86;
              *((_OWORD *)v8 + 3) = v174;
              *(_OWORD *)v86 = v173;
              *((__n128 *)v8 + 5) = result;
              v175 = bswap64(v8[4]);
              v176 = bswap64(*v8);
              if (v175 != v176)
                goto LABEL_342;
              v175 = bswap64(v8[5]);
              v176 = bswap64(v8[1]);
              if (v175 == v176
                && (v175 = bswap64(v8[6]), v176 = bswap64(v8[2]), v175 == v176)
                && (v175 = bswap64(v8[7]), v176 = bswap64(v8[3]), v175 == v176))
              {
                v177 = 0;
              }
              else
              {
LABEL_342:
                v177 = v175 < v176 ? -1 : 1;
              }
              if (v177 < 0)
              {
                v193 = *(__n128 *)v8;
                v203 = *((_OWORD *)v8 + 1);
                v178 = *((_OWORD *)v8 + 3);
                *(_OWORD *)v8 = *(_OWORD *)v85;
                *((_OWORD *)v8 + 1) = v178;
                result = v193;
                *(__n128 *)v85 = v193;
                *((_OWORD *)v8 + 3) = v203;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 767)
        {
          n128_u64 = v8 + 4;
          v95 = v8 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v95)
            {
              v96 = 0;
              v97 = v8;
              do
              {
                v98 = (__n128 *)n128_u64;
                v99 = bswap64(v97[4]);
                v100 = bswap64(*v97);
                if (v99 != v100
                  || (v99 = bswap64(v98->n128_u64[1]), v100 = bswap64(v97[1]), v99 != v100)
                  || (v99 = bswap64(v98[1].n128_u64[0]), v100 = bswap64(v97[2]), v99 != v100)
                  || (v99 = bswap64(v98[1].n128_u64[1]), v100 = bswap64(v97[3]), v99 != v100))
                {
                  v101 = v99 < v100 ? -1 : 1;
                  if (v101 < 0)
                  {
                    v188 = *v98;
                    v197 = v98[1];
                    v102 = v96;
                    while (1)
                    {
                      v103 = (char *)v8 + v102;
                      v104 = *(_OWORD *)((char *)v8 + v102 + 16);
                      *((_OWORD *)v103 + 2) = *(_OWORD *)((char *)v8 + v102);
                      *((_OWORD *)v103 + 3) = v104;
                      if (!v102)
                        break;
                      v105 = bswap64(v188.n128_u64[0]);
                      v106 = bswap64(*((_QWORD *)v103 - 4));
                      if (v105 == v106
                        && (v105 = bswap64(v188.n128_u64[1]), v106 = bswap64(*((_QWORD *)v103 - 3)), v105 == v106)
                        && (v105 = bswap64(v197.n128_u64[0]), v106 = bswap64(*((_QWORD *)v103 - 2)), v105 == v106)
                        && (v105 = bswap64(v197.n128_u64[1]), v106 = bswap64(*((_QWORD *)v103 - 1)), v105 == v106))
                      {
                        v107 = 0;
                      }
                      else if (v105 < v106)
                      {
                        v107 = -1;
                      }
                      else
                      {
                        v107 = 1;
                      }
                      v102 -= 32;
                      if ((v107 & 0x80000000) == 0)
                      {
                        v108 = (__n128 *)((char *)v8 + v102 + 32);
                        goto LABEL_195;
                      }
                    }
                    v108 = (__n128 *)v8;
LABEL_195:
                    result = v188;
                    *v108 = v188;
                    v108[1] = v197;
                  }
                }
                n128_u64 = v98[2].n128_u64;
                v96 += 32;
                v97 = (unint64_t *)v98;
              }
              while (&v98[2] != (__n128 *)a2);
            }
          }
          else if (!v95)
          {
            v158 = v8 - 4;
            do
            {
              v159 = (__n128 *)n128_u64;
              v160 = bswap64(a1[4]);
              v161 = bswap64(*a1);
              if (v160 != v161
                || (v160 = bswap64(v159->n128_u64[1]), v161 = bswap64(a1[1]), v160 != v161)
                || (v160 = bswap64(v159[1].n128_u64[0]), v161 = bswap64(a1[2]), v160 != v161)
                || (v160 = bswap64(v159[1].n128_u64[1]), v161 = bswap64(a1[3]), v160 != v161))
              {
                v162 = v160 < v161 ? -1 : 1;
                if (v162 < 0)
                {
                  v192 = *v159;
                  v202 = v159[1];
                  v163 = v158;
                  do
                  {
                    v164 = *((_OWORD *)v163 + 3);
                    *((_OWORD *)v163 + 4) = *((_OWORD *)v163 + 2);
                    *((_OWORD *)v163 + 5) = v164;
                    v165 = bswap64(v192.n128_u64[0]);
                    v166 = bswap64(*v163);
                    if (v165 == v166
                      && (v165 = bswap64(v192.n128_u64[1]), v166 = bswap64(v163[1]), v165 == v166)
                      && (v165 = bswap64(v202.n128_u64[0]), v166 = bswap64(v163[2]), v165 == v166)
                      && (v165 = bswap64(v202.n128_u64[1]), v166 = bswap64(v163[3]), v165 == v166))
                    {
                      v167 = 0;
                    }
                    else if (v165 < v166)
                    {
                      v167 = -1;
                    }
                    else
                    {
                      v167 = 1;
                    }
                    v163 -= 4;
                  }
                  while (v167 < 0);
                  result = v192;
                  *((__n128 *)v163 + 4) = v192;
                  *((__n128 *)v163 + 5) = v202;
                }
              }
              n128_u64 = v159[2].n128_u64;
              v158 += 4;
              a1 = (unint64_t *)v159;
            }
            while (&v159[2] != (__n128 *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != (unint64_t *)a2)
          {
            v109 = (v10 - 2) >> 1;
            v110 = v109;
            do
            {
              v111 = v110;
              if (v109 >= v110)
              {
                v112 = (2 * v110) | 1;
                v113 = &v8[4 * v112];
                if (2 * v111 + 2 < (uint64_t)v10)
                {
                  v114 = bswap64(*v113);
                  v115 = bswap64(v113[4]);
                  if (v114 != v115)
                    goto LABEL_207;
                  v114 = bswap64(v113[1]);
                  v115 = bswap64(v113[5]);
                  if (v114 == v115
                    && (v114 = bswap64(v113[2]), v115 = bswap64(v113[6]), v114 == v115)
                    && (v114 = bswap64(v113[3]), v115 = bswap64(v113[7]), v114 == v115))
                  {
                    v116 = 0;
                  }
                  else
                  {
LABEL_207:
                    v116 = v114 < v115 ? -1 : 1;
                  }
                  if (v116 < 0)
                  {
                    v113 += 4;
                    v112 = 2 * v111 + 2;
                  }
                }
                v117 = &v8[4 * v111];
                v118 = bswap64(*v113);
                v119 = bswap64(*v117);
                if (v118 == v119
                  && (v118 = bswap64(v113[1]), v119 = bswap64(v117[1]), v118 == v119)
                  && (v118 = bswap64(v113[2]), v119 = bswap64(v117[2]), v118 == v119)
                  && (v118 = bswap64(v113[3]), v119 = bswap64(v117[3]), v118 == v119)
                  || (v118 < v119 ? (v120 = -1) : (v120 = 1), (v120 & 0x80000000) == 0))
                {
                  v189 = *(_OWORD *)v117;
                  v198 = *((_OWORD *)v117 + 1);
                  do
                  {
                    v121 = v113;
                    v122 = *((_OWORD *)v113 + 1);
                    *(_OWORD *)v117 = *(_OWORD *)v113;
                    *((_OWORD *)v117 + 1) = v122;
                    if (v109 < v112)
                      break;
                    v123 = (2 * v112) | 1;
                    v113 = &v8[4 * v123];
                    v112 = 2 * v112 + 2;
                    if (v112 >= (uint64_t)v10)
                    {
                      v112 = v123;
                    }
                    else
                    {
                      v124 = bswap64(*v113);
                      v125 = bswap64(v113[4]);
                      if (v124 != v125)
                        goto LABEL_229;
                      v124 = bswap64(v113[1]);
                      v125 = bswap64(v113[5]);
                      if (v124 == v125
                        && (v124 = bswap64(v113[2]), v125 = bswap64(v113[6]), v124 == v125)
                        && (v124 = bswap64(v113[3]), v125 = bswap64(v113[7]), v124 == v125))
                      {
                        v126 = 0;
                      }
                      else
                      {
LABEL_229:
                        v126 = v124 < v125 ? -1 : 1;
                      }
                      if (v126 >= 0)
                        v112 = v123;
                      else
                        v113 += 4;
                    }
                    v127 = bswap64(*v113);
                    v128 = bswap64(v189);
                    if (v127 != v128)
                      goto LABEL_240;
                    v127 = bswap64(v113[1]);
                    v128 = bswap64(*((unint64_t *)&v189 + 1));
                    if (v127 == v128
                      && (v127 = bswap64(v113[2]), v128 = bswap64(v198), v127 == v128)
                      && (v127 = bswap64(v113[3]), v128 = bswap64(*((unint64_t *)&v198 + 1)), v127 == v128))
                    {
                      v129 = 0;
                    }
                    else
                    {
LABEL_240:
                      v129 = v127 < v128 ? -1 : 1;
                    }
                    v117 = v121;
                  }
                  while ((v129 & 0x80000000) == 0);
                  *(_OWORD *)v121 = v189;
                  *((_OWORD *)v121 + 1) = v198;
                }
              }
              v110 = v111 - 1;
            }
            while (v111);
            v130 = (unint64_t)v9 >> 5;
            do
            {
              v131 = 0;
              v181 = *(__n128 *)v8;
              v184 = *((_OWORD *)v8 + 1);
              v132 = v8;
              do
              {
                v133 = &v132[4 * v131 + 4];
                v134 = (2 * v131) | 1;
                v135 = 2 * v131 + 2;
                if (v135 < v130)
                {
                  v136 = bswap64(*v133);
                  v137 = bswap64(v133[4]);
                  if (v136 != v137)
                    goto LABEL_254;
                  v136 = bswap64(v133[1]);
                  v137 = bswap64(v133[5]);
                  if (v136 == v137
                    && (v136 = bswap64(v133[2]), v137 = bswap64(v133[6]), v136 == v137)
                    && (v136 = bswap64(v133[3]), v137 = bswap64(v133[7]), v136 == v137))
                  {
                    v138 = 0;
                  }
                  else
                  {
LABEL_254:
                    v138 = v136 < v137 ? -1 : 1;
                  }
                  if (v138 < 0)
                  {
                    v133 += 4;
                    v134 = v135;
                  }
                }
                v139 = *((_OWORD *)v133 + 1);
                *(_OWORD *)v132 = *(_OWORD *)v133;
                *((_OWORD *)v132 + 1) = v139;
                v132 = v133;
                v131 = v134;
              }
              while (v134 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
              a2 -= 32;
              if (v133 == (unint64_t *)a2)
              {
                result = v181;
                *(__n128 *)v133 = v181;
                *((_OWORD *)v133 + 1) = v184;
              }
              else
              {
                v140 = *(_OWORD *)(a2 + 16);
                *(_OWORD *)v133 = *(_OWORD *)a2;
                *((_OWORD *)v133 + 1) = v140;
                result = v181;
                *(__n128 *)a2 = v181;
                *(_OWORD *)(a2 + 16) = v184;
                v141 = (char *)v133 - (char *)v8 + 32;
                if (v141 >= 33)
                {
                  v142 = (((unint64_t)v141 >> 5) - 2) >> 1;
                  v143 = &v8[4 * v142];
                  v144 = bswap64(*v143);
                  v145 = bswap64(*v133);
                  if (v144 != v145
                    || (v144 = bswap64(v143[1]), v145 = bswap64(v133[1]), v144 != v145)
                    || (v144 = bswap64(v143[2]), v145 = bswap64(v133[2]), v144 != v145)
                    || (v144 = bswap64(v143[3]), v145 = bswap64(v133[3]), v144 != v145))
                  {
                    v146 = v144 < v145 ? -1 : 1;
                    if (v146 < 0)
                    {
                      v190 = *(__n128 *)v133;
                      v199 = *((__n128 *)v133 + 1);
                      do
                      {
                        v147 = (__n128 *)v143;
                        v148 = *((_OWORD *)v143 + 1);
                        *(_OWORD *)v133 = *(_OWORD *)v143;
                        *((_OWORD *)v133 + 1) = v148;
                        if (!v142)
                          break;
                        v142 = (v142 - 1) >> 1;
                        v143 = &v8[4 * v142];
                        v149 = bswap64(*v143);
                        v150 = bswap64(v190.n128_u64[0]);
                        if (v149 != v150)
                          goto LABEL_279;
                        v149 = bswap64(v143[1]);
                        v150 = bswap64(v190.n128_u64[1]);
                        if (v149 == v150
                          && (v149 = bswap64(v143[2]), v150 = bswap64(v199.n128_u64[0]), v149 == v150)
                          && (v149 = bswap64(v143[3]), v150 = bswap64(v199.n128_u64[1]), v149 == v150))
                        {
                          v151 = 0;
                        }
                        else
                        {
LABEL_279:
                          v151 = v149 < v150 ? -1 : 1;
                        }
                        v133 = (unint64_t *)v147;
                      }
                      while (v151 < 0);
                      result = v190;
                      *v147 = v190;
                      v147[1] = v199;
                    }
                  }
                }
              }
            }
            while (v130-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[4 * (v10 >> 1)];
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v10 >> 1)], a1, (unint64_t *)(a2 - 32));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v10 >> 1)], (unint64_t *)(a2 - 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v12 - 4, (unint64_t *)(a2 - 64));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v11 + 4], (unint64_t *)(a2 - 96));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v12 - 4, v12, &a1[4 * v11 + 4]);
          v185 = *(__n128 *)a1;
          v194 = *((_OWORD *)a1 + 1);
          v13 = *((_OWORD *)v12 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *((_OWORD *)a1 + 1) = v13;
          *(__n128 *)v12 = v185;
          *((_OWORD *)v12 + 1) = v194;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = bswap64(*(a1 - 4));
          v15 = bswap64(*a1);
          if (v14 != v15)
            goto LABEL_14;
          v14 = bswap64(*(a1 - 3));
          v15 = bswap64(a1[1]);
          if (v14 == v15
            && (v14 = bswap64(*(a1 - 2)), v15 = bswap64(a1[2]), v14 == v15)
            && (v14 = bswap64(*(a1 - 1)), v15 = bswap64(a1[3]), v14 == v15))
          {
            v16 = 0;
          }
          else
          {
LABEL_14:
            v16 = v14 < v15 ? -1 : 1;
          }
          if ((v16 & 0x80000000) == 0)
          {
            v180 = *(__n128 *)a1;
            v183 = *((_OWORD *)a1 + 1);
            v49 = bswap64(*a1);
            v50 = bswap64(*(_QWORD *)(a2 - 32));
            if (v49 == v50
              && (v49 = bswap64(v180.n128_u64[1]), v50 = bswap64(*(_QWORD *)(a2 - 24)), v49 == v50)
              && (v49 = bswap64(v183), v50 = bswap64(*(_QWORD *)(a2 - 16)), v49 == v50)
              && (v49 = bswap64(*((unint64_t *)&v183 + 1)), v50 = bswap64(*(_QWORD *)(a2 - 8)), v49 == v50))
            {
              v51 = 0;
            }
            else if (v49 < v50)
            {
              v51 = -1;
            }
            else
            {
              v51 = 1;
            }
            if (v51 < 0)
            {
              v56 = a1;
              v8 = a1;
              do
              {
                v57 = v8[4];
                v8 += 4;
                v58 = bswap64(v180.n128_u64[0]);
                v59 = bswap64(v57);
                if (v58 == v59
                  && (v58 = bswap64(v180.n128_u64[1]), v59 = bswap64(v56[5]), v58 == v59)
                  && (v58 = bswap64(v183), v59 = bswap64(v56[6]), v58 == v59)
                  && (v58 = bswap64(*((unint64_t *)&v183 + 1)), v59 = bswap64(v56[7]), v58 == v59))
                {
                  v60 = 0;
                }
                else if (v58 < v59)
                {
                  v60 = -1;
                }
                else
                {
                  v60 = 1;
                }
                v56 = v8;
              }
              while ((v60 & 0x80000000) == 0);
            }
            else
            {
              v52 = a1 + 4;
              do
              {
                v8 = v52;
                if ((unint64_t)v52 >= a2)
                  break;
                v53 = bswap64(v180.n128_u64[0]);
                v54 = bswap64(*v8);
                if (v53 != v54)
                  goto LABEL_99;
                v53 = bswap64(v180.n128_u64[1]);
                v54 = bswap64(v8[1]);
                if (v53 == v54
                  && (v53 = bswap64(v183), v54 = bswap64(v8[2]), v53 == v54)
                  && (v53 = bswap64(*((unint64_t *)&v183 + 1)), v54 = bswap64(v8[3]), v53 == v54))
                {
                  v55 = 0;
                }
                else
                {
LABEL_99:
                  v55 = v53 < v54 ? -1 : 1;
                }
                v52 = v8 + 4;
              }
              while ((v55 & 0x80000000) == 0);
            }
            v61 = (_OWORD *)a2;
            if ((unint64_t)v8 < a2)
            {
              v62 = (_OWORD *)a2;
              v61 = (_OWORD *)a2;
              do
              {
                v63 = *((_QWORD *)v61 - 4);
                v61 -= 2;
                v64 = bswap64(v180.n128_u64[0]);
                v65 = bswap64(v63);
                if (v64 == v65
                  && (v64 = bswap64(v180.n128_u64[1]), v65 = bswap64(*((_QWORD *)v62 - 3)), v64 == v65)
                  && (v64 = bswap64(v183), v65 = bswap64(*((_QWORD *)v62 - 2)), v64 == v65)
                  && (v64 = bswap64(*((unint64_t *)&v183 + 1)), v65 = bswap64(*((_QWORD *)v62 - 1)), v64 == v65))
                {
                  v66 = 0;
                }
                else if (v64 < v65)
                {
                  v66 = -1;
                }
                else
                {
                  v66 = 1;
                }
                v62 = v61;
              }
              while (v66 < 0);
            }
            while (v8 < (unint64_t *)v61)
            {
              v187 = *(__n128 *)v8;
              v196 = *((_OWORD *)v8 + 1);
              v67 = v61[1];
              *(_OWORD *)v8 = *v61;
              *((_OWORD *)v8 + 1) = v67;
              *v61 = v187;
              v61[1] = v196;
              v68 = v8;
              do
              {
                v69 = v8[4];
                v8 += 4;
                v70 = bswap64(v180.n128_u64[0]);
                v71 = bswap64(v69);
                if (v70 == v71
                  && (v70 = bswap64(v180.n128_u64[1]), v71 = bswap64(v68[5]), v70 == v71)
                  && (v70 = bswap64(v183), v71 = bswap64(v68[6]), v70 == v71)
                  && (v70 = bswap64(*((unint64_t *)&v183 + 1)), v71 = bswap64(v68[7]), v70 == v71))
                {
                  v72 = 0;
                }
                else if (v70 < v71)
                {
                  v72 = -1;
                }
                else
                {
                  v72 = 1;
                }
                v68 = v8;
              }
              while ((v72 & 0x80000000) == 0);
              v73 = v61;
              do
              {
                v74 = *((_QWORD *)v61 - 4);
                v61 -= 2;
                v75 = bswap64(v180.n128_u64[0]);
                v76 = bswap64(v74);
                if (v75 == v76
                  && (v75 = bswap64(v180.n128_u64[1]), v76 = bswap64(*((_QWORD *)v73 - 3)), v75 == v76)
                  && (v75 = bswap64(v183), v76 = bswap64(*((_QWORD *)v73 - 2)), v75 == v76)
                  && (v75 = bswap64(*((unint64_t *)&v183 + 1)), v76 = bswap64(*((_QWORD *)v73 - 1)), v75 == v76))
                {
                  v77 = 0;
                }
                else if (v75 < v76)
                {
                  v77 = -1;
                }
                else
                {
                  v77 = 1;
                }
                v73 = v61;
              }
              while (v77 < 0);
            }
            v78 = (__n128 *)(v8 - 4);
            if (v8 - 4 != a1)
            {
              v79 = *((_OWORD *)v8 - 1);
              *(__n128 *)a1 = *v78;
              *((_OWORD *)a1 + 1) = v79;
            }
            a4 = 0;
            result = v180;
            *v78 = v180;
            *((_OWORD *)v8 - 1) = v183;
            continue;
          }
        }
        v17 = 0;
        v179 = *(__n128 *)a1;
        v182 = *((_OWORD *)a1 + 1);
        do
        {
          v18 = &a1[v17];
          v19 = bswap64(a1[v17 + 4]);
          v20 = bswap64(v179.n128_u64[0]);
          if (v19 == v20
            && (v19 = bswap64(v18[5]), v20 = bswap64(v179.n128_u64[1]), v19 == v20)
            && (v19 = bswap64(v18[6]), v20 = bswap64(v182), v19 == v20)
            && (v19 = bswap64(v18[7]), v20 = bswap64(*((unint64_t *)&v182 + 1)), v19 == v20))
          {
            v21 = 0;
          }
          else if (v19 < v20)
          {
            v21 = -1;
          }
          else
          {
            v21 = 1;
          }
          v17 += 4;
        }
        while (v21 < 0);
        v22 = &a1[v17];
        v23 = a2;
        if (v17 == 4)
        {
          v28 = (_OWORD *)a2;
          while (v22 < (unint64_t *)v28)
          {
            v24 = v28 - 2;
            v29 = bswap64(*((_QWORD *)v28 - 4));
            v30 = bswap64(v179.n128_u64[0]);
            if (v29 == v30
              && (v29 = bswap64(*((_QWORD *)v28 - 3)), v30 = bswap64(v179.n128_u64[1]), v29 == v30)
              && (v29 = bswap64(*((_QWORD *)v28 - 2)), v30 = bswap64(v182), v29 == v30)
              && (v29 = bswap64(*((_QWORD *)v28 - 1)), v30 = bswap64(*((unint64_t *)&v182 + 1)), v29 == v30))
            {
              v31 = 0;
            }
            else if (v29 < v30)
            {
              v31 = -1;
            }
            else
            {
              v31 = 1;
            }
            v28 -= 2;
            if (v31 < 0)
              goto LABEL_52;
          }
          v24 = v28;
        }
        else
        {
          do
          {
            v24 = (_OWORD *)(v23 - 32);
            v25 = bswap64(*(_QWORD *)(v23 - 32));
            v26 = bswap64(v179.n128_u64[0]);
            if (v25 == v26
              && (v25 = bswap64(*(_QWORD *)(v23 - 24)), v26 = bswap64(v179.n128_u64[1]), v25 == v26)
              && (v25 = bswap64(*(_QWORD *)(v23 - 16)), v26 = bswap64(v182), v25 == v26)
              && (v25 = bswap64(*(_QWORD *)(v23 - 8)), v26 = bswap64(*((unint64_t *)&v182 + 1)), v25 == v26))
            {
              v27 = 0;
            }
            else if (v25 < v26)
            {
              v27 = -1;
            }
            else
            {
              v27 = 1;
            }
            v23 -= 32;
          }
          while ((v27 & 0x80000000) == 0);
        }
LABEL_52:
        if (v22 >= (unint64_t *)v24)
        {
          v45 = v22 - 4;
        }
        else
        {
          v32 = (unint64_t)v22;
          v33 = v24;
          do
          {
            v186 = *(_OWORD *)v32;
            v195 = *(_OWORD *)(v32 + 16);
            v34 = v33[1];
            *(_OWORD *)v32 = *v33;
            *(_OWORD *)(v32 + 16) = v34;
            *v33 = v186;
            v33[1] = v195;
            v35 = (unint64_t *)v32;
            do
            {
              v36 = *(_QWORD *)(v32 + 32);
              v32 += 32;
              v37 = bswap64(v36);
              v38 = bswap64(v179.n128_u64[0]);
              if (v37 == v38
                && (v37 = bswap64(v35[5]), v38 = bswap64(v179.n128_u64[1]), v37 == v38)
                && (v37 = bswap64(v35[6]), v38 = bswap64(v182), v37 == v38)
                && (v37 = bswap64(v35[7]), v38 = bswap64(*((unint64_t *)&v182 + 1)), v37 == v38))
              {
                v39 = 0;
              }
              else if (v37 < v38)
              {
                v39 = -1;
              }
              else
              {
                v39 = 1;
              }
              v35 = (unint64_t *)v32;
            }
            while (v39 < 0);
            v40 = v33;
            do
            {
              v41 = *((_QWORD *)v33 - 4);
              v33 -= 2;
              v42 = bswap64(v41);
              v43 = bswap64(v179.n128_u64[0]);
              if (v42 == v43
                && (v42 = bswap64(*((_QWORD *)v40 - 3)), v43 = bswap64(v179.n128_u64[1]), v42 == v43)
                && (v42 = bswap64(*((_QWORD *)v40 - 2)), v43 = bswap64(v182), v42 == v43)
                && (v42 = bswap64(*((_QWORD *)v40 - 1)), v43 = bswap64(*((unint64_t *)&v182 + 1)), v42 == v43))
              {
                v44 = 0;
              }
              else if (v42 < v43)
              {
                v44 = -1;
              }
              else
              {
                v44 = 1;
              }
              v40 = v33;
            }
            while ((v44 & 0x80000000) == 0);
          }
          while (v32 < (unint64_t)v33);
          v45 = (unint64_t *)(v32 - 32);
        }
        if (v45 != a1)
        {
          v46 = *((_OWORD *)v45 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v45;
          *((_OWORD *)a1 + 1) = v46;
        }
        *(__n128 *)v45 = v179;
        *((_OWORD *)v45 + 1) = v182;
        if (v22 < (unint64_t *)v24)
        {
LABEL_82:
          std::__introsort<std::_ClassicAlgPolicy,createStitchingScriptHashImpl(std::vector<MTLUINT256_t>,Air::StitchingScript const*)::$_0 &,MTLUINT256_t*,false>(a1, v45, a3, a4 & 1);
          a4 = 0;
          v8 = v45 + 4;
          continue;
        }
        v47 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,createStitchingScriptHashImpl(std::vector<MTLUINT256_t>,Air::StitchingScript const*)::$_0 &,MTLUINT256_t*>(a1, v45);
        v8 = v45 + 4;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,createStitchingScriptHashImpl(std::vector<MTLUINT256_t>,Air::StitchingScript const*)::$_0 &,MTLUINT256_t*>(v45 + 4, (unint64_t *)a2))
        {
          if (v47)
            continue;
          goto LABEL_82;
        }
        a2 = (unint64_t)v45;
        if (!v47)
          goto LABEL_1;
        return result;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v23 = (_QWORD *)*(a2 - 1);
        v24 = (_QWORD *)*v9;
        v25 = v23[3];
        v26 = *(_QWORD *)(*v9 + 24);
        if (v25 < v26 || v26 >= v25 && *v23 < *v24)
        {
          *v9 = (uint64_t)v23;
          *(a2 - 1) = (uint64_t)v24;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)v9, (uint64_t)(v9 + 1), (uint64_t)(a2 - 1));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)v9, (uint64_t)(v9 + 1), (uint64_t)(v9 + 2), (uint64_t)(a2 - 1));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)v9, (uint64_t)(v9 + 1), (uint64_t)(v9 + 2), (uint64_t)(v9 + 3), (uint64_t)(a2 - 1));
        return;
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)&v9[v13 >> 1], (uint64_t)v9, (uint64_t)(a2 - 1));
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)v9, (uint64_t)&v9[v13 >> 1], (uint64_t)(a2 - 1));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)(v9 + 1), (uint64_t)(v15 - 1), (uint64_t)(a2 - 2));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)(v9 + 2), (uint64_t)&v9[v14 + 1], (uint64_t)(a2 - 3));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)(v15 - 1), (uint64_t)v15, (uint64_t)&v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v17 = (_QWORD *)*(v9 - 1);
          v18 = v17[3];
          v19 = *(_QWORD *)(*v9 + 24);
          if (v18 >= v19 && (v19 < v18 || *v17 >= *(_QWORD *)*v9))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::unique_ptr<LoaderContext::Image> *,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &>(v9, a2);
            goto LABEL_18;
          }
LABEL_13:
          v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::unique_ptr<LoaderContext::Image> *,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &>(v9, (_QWORD **)a2);
          if ((v21 & 1) == 0)
            goto LABEL_16;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)v9, (uint64_t)v20);
          v9 = v20 + 1;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)(v20 + 1), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_16:
            std::__introsort<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*,false>(a1, v20, a3, -v11, a5 & 1);
            v9 = v20 + 1;
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v20;
          if (v22)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*,std::unique_ptr<LoaderContext::Image>*>(v9, a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - (_QWORD)v8;
    v10 = (uint64_t)(a2 - (_QWORD)v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v81 = *(_QWORD *)(a2 - 32);
        v80 = a2 - 32;
        v82 = bswap64(v81);
        v83 = bswap64(*v8);
        if (v82 == v83
          && (v82 = bswap64(*(_QWORD *)(v80 + 8)), v83 = bswap64(v8[1]), v82 == v83)
          && (v82 = bswap64(*(_QWORD *)(v80 + 16)), v83 = bswap64(v8[2]), v82 == v83)
          && (v82 = bswap64(*(_QWORD *)(v80 + 24)), v83 = bswap64(v8[3]), v82 == v83))
        {
          v84 = 0;
        }
        else if (v82 < v83)
        {
          v84 = -1;
        }
        else
        {
          v84 = 1;
        }
        if (v84 < 0)
        {
          v191 = *(__n128 *)v8;
          v200 = *((_OWORD *)v8 + 1);
          v153 = *(_OWORD *)(v80 + 16);
          *(_OWORD *)v8 = *(_OWORD *)v80;
          *((_OWORD *)v8 + 1) = v153;
          result = v191;
          *(__n128 *)v80 = v191;
          *(_OWORD *)(v80 + 16) = v200;
        }
        return result;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, (unint64_t *)(a2 - 32));
        return result;
      case 4uLL:
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, v8 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
        return result;
      case 5uLL:
        v85 = v8 + 4;
        v86 = v8 + 8;
        v87 = v8 + 12;
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, v8 + 8, v8 + 12).n128_u64[0];
        v89 = *(_QWORD *)(a2 - 32);
        v88 = a2 - 32;
        v90 = bswap64(v89);
        v91 = bswap64(v8[12]);
        if (v90 == v91
          && (v90 = bswap64(*(_QWORD *)(v88 + 8)), v91 = bswap64(v8[13]), v90 == v91)
          && (v90 = bswap64(*(_QWORD *)(v88 + 16)), v91 = bswap64(v8[14]), v90 == v91)
          && (v90 = bswap64(*(_QWORD *)(v88 + 24)), v91 = bswap64(v8[15]), v90 == v91))
        {
          v92 = 0;
        }
        else if (v90 < v91)
        {
          v92 = -1;
        }
        else
        {
          v92 = 1;
        }
        if (v92 < 0)
        {
          result = *(__n128 *)v87;
          v201 = *((_OWORD *)v8 + 7);
          v154 = *(_OWORD *)(v88 + 16);
          *(_OWORD *)v87 = *(_OWORD *)v88;
          *((_OWORD *)v8 + 7) = v154;
          *(__n128 *)v88 = result;
          *(_OWORD *)(v88 + 16) = v201;
          v155 = bswap64(*v87);
          v156 = bswap64(*v86);
          if (v155 != v156)
            goto LABEL_324;
          v155 = bswap64(v8[13]);
          v156 = bswap64(v8[9]);
          if (v155 == v156
            && (v155 = bswap64(v8[14]), v156 = bswap64(v8[10]), v155 == v156)
            && (v155 = bswap64(v8[15]), v156 = bswap64(v8[11]), v155 == v156))
          {
            v157 = 0;
          }
          else
          {
LABEL_324:
            v157 = v155 < v156 ? -1 : 1;
          }
          if (v157 < 0)
          {
            v168 = *(_OWORD *)v86;
            result = *((__n128 *)v8 + 5);
            v169 = *((_OWORD *)v8 + 7);
            *(_OWORD *)v86 = *(_OWORD *)v87;
            *((_OWORD *)v8 + 5) = v169;
            *(_OWORD *)v87 = v168;
            *((__n128 *)v8 + 7) = result;
            v170 = bswap64(*v86);
            v171 = bswap64(*v85);
            if (v170 != v171)
              goto LABEL_333;
            v170 = bswap64(v8[9]);
            v171 = bswap64(v8[5]);
            if (v170 == v171
              && (v170 = bswap64(v8[10]), v171 = bswap64(v8[6]), v170 == v171)
              && (v170 = bswap64(v8[11]), v171 = bswap64(v8[7]), v170 == v171))
            {
              v172 = 0;
            }
            else
            {
LABEL_333:
              v172 = v170 < v171 ? -1 : 1;
            }
            if (v172 < 0)
            {
              v173 = *(_OWORD *)v85;
              result = *((__n128 *)v8 + 3);
              v174 = *((_OWORD *)v8 + 5);
              *(_OWORD *)v85 = *(_OWORD *)v86;
              *((_OWORD *)v8 + 3) = v174;
              *(_OWORD *)v86 = v173;
              *((__n128 *)v8 + 5) = result;
              v175 = bswap64(v8[4]);
              v176 = bswap64(*v8);
              if (v175 != v176)
                goto LABEL_342;
              v175 = bswap64(v8[5]);
              v176 = bswap64(v8[1]);
              if (v175 == v176
                && (v175 = bswap64(v8[6]), v176 = bswap64(v8[2]), v175 == v176)
                && (v175 = bswap64(v8[7]), v176 = bswap64(v8[3]), v175 == v176))
              {
                v177 = 0;
              }
              else
              {
LABEL_342:
                v177 = v175 < v176 ? -1 : 1;
              }
              if (v177 < 0)
              {
                v193 = *(__n128 *)v8;
                v203 = *((_OWORD *)v8 + 1);
                v178 = *((_OWORD *)v8 + 3);
                *(_OWORD *)v8 = *(_OWORD *)v85;
                *((_OWORD *)v8 + 1) = v178;
                result = v193;
                *(__n128 *)v85 = v193;
                *((_OWORD *)v8 + 3) = v203;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 767)
        {
          n128_u64 = v8 + 4;
          v95 = v8 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v95)
            {
              v96 = 0;
              v97 = v8;
              do
              {
                v98 = (__n128 *)n128_u64;
                v99 = bswap64(v97[4]);
                v100 = bswap64(*v97);
                if (v99 != v100
                  || (v99 = bswap64(v98->n128_u64[1]), v100 = bswap64(v97[1]), v99 != v100)
                  || (v99 = bswap64(v98[1].n128_u64[0]), v100 = bswap64(v97[2]), v99 != v100)
                  || (v99 = bswap64(v98[1].n128_u64[1]), v100 = bswap64(v97[3]), v99 != v100))
                {
                  v101 = v99 < v100 ? -1 : 1;
                  if (v101 < 0)
                  {
                    v188 = *v98;
                    v197 = v98[1];
                    v102 = v96;
                    while (1)
                    {
                      v103 = (char *)v8 + v102;
                      v104 = *(_OWORD *)((char *)v8 + v102 + 16);
                      *((_OWORD *)v103 + 2) = *(_OWORD *)((char *)v8 + v102);
                      *((_OWORD *)v103 + 3) = v104;
                      if (!v102)
                        break;
                      v105 = bswap64(v188.n128_u64[0]);
                      v106 = bswap64(*((_QWORD *)v103 - 4));
                      if (v105 == v106
                        && (v105 = bswap64(v188.n128_u64[1]), v106 = bswap64(*((_QWORD *)v103 - 3)), v105 == v106)
                        && (v105 = bswap64(v197.n128_u64[0]), v106 = bswap64(*((_QWORD *)v103 - 2)), v105 == v106)
                        && (v105 = bswap64(v197.n128_u64[1]), v106 = bswap64(*((_QWORD *)v103 - 1)), v105 == v106))
                      {
                        v107 = 0;
                      }
                      else if (v105 < v106)
                      {
                        v107 = -1;
                      }
                      else
                      {
                        v107 = 1;
                      }
                      v102 -= 32;
                      if ((v107 & 0x80000000) == 0)
                      {
                        v108 = (__n128 *)((char *)v8 + v102 + 32);
                        goto LABEL_195;
                      }
                    }
                    v108 = (__n128 *)v8;
LABEL_195:
                    result = v188;
                    *v108 = v188;
                    v108[1] = v197;
                  }
                }
                n128_u64 = v98[2].n128_u64;
                v96 += 32;
                v97 = (unint64_t *)v98;
              }
              while (&v98[2] != (__n128 *)a2);
            }
          }
          else if (!v95)
          {
            v158 = v8 - 4;
            do
            {
              v159 = (__n128 *)n128_u64;
              v160 = bswap64(a1[4]);
              v161 = bswap64(*a1);
              if (v160 != v161
                || (v160 = bswap64(v159->n128_u64[1]), v161 = bswap64(a1[1]), v160 != v161)
                || (v160 = bswap64(v159[1].n128_u64[0]), v161 = bswap64(a1[2]), v160 != v161)
                || (v160 = bswap64(v159[1].n128_u64[1]), v161 = bswap64(a1[3]), v160 != v161))
              {
                v162 = v160 < v161 ? -1 : 1;
                if (v162 < 0)
                {
                  v192 = *v159;
                  v202 = v159[1];
                  v163 = v158;
                  do
                  {
                    v164 = *((_OWORD *)v163 + 3);
                    *((_OWORD *)v163 + 4) = *((_OWORD *)v163 + 2);
                    *((_OWORD *)v163 + 5) = v164;
                    v165 = bswap64(v192.n128_u64[0]);
                    v166 = bswap64(*v163);
                    if (v165 == v166
                      && (v165 = bswap64(v192.n128_u64[1]), v166 = bswap64(v163[1]), v165 == v166)
                      && (v165 = bswap64(v202.n128_u64[0]), v166 = bswap64(v163[2]), v165 == v166)
                      && (v165 = bswap64(v202.n128_u64[1]), v166 = bswap64(v163[3]), v165 == v166))
                    {
                      v167 = 0;
                    }
                    else if (v165 < v166)
                    {
                      v167 = -1;
                    }
                    else
                    {
                      v167 = 1;
                    }
                    v163 -= 4;
                  }
                  while (v167 < 0);
                  result = v192;
                  *((__n128 *)v163 + 4) = v192;
                  *((__n128 *)v163 + 5) = v202;
                }
              }
              n128_u64 = v159[2].n128_u64;
              v158 += 4;
              a1 = (unint64_t *)v159;
            }
            while (&v159[2] != (__n128 *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != (unint64_t *)a2)
          {
            v109 = (v10 - 2) >> 1;
            v110 = v109;
            do
            {
              v111 = v110;
              if (v109 >= v110)
              {
                v112 = (2 * v110) | 1;
                v113 = &v8[4 * v112];
                if (2 * v111 + 2 < (uint64_t)v10)
                {
                  v114 = bswap64(*v113);
                  v115 = bswap64(v113[4]);
                  if (v114 != v115)
                    goto LABEL_207;
                  v114 = bswap64(v113[1]);
                  v115 = bswap64(v113[5]);
                  if (v114 == v115
                    && (v114 = bswap64(v113[2]), v115 = bswap64(v113[6]), v114 == v115)
                    && (v114 = bswap64(v113[3]), v115 = bswap64(v113[7]), v114 == v115))
                  {
                    v116 = 0;
                  }
                  else
                  {
LABEL_207:
                    v116 = v114 < v115 ? -1 : 1;
                  }
                  if (v116 < 0)
                  {
                    v113 += 4;
                    v112 = 2 * v111 + 2;
                  }
                }
                v117 = &v8[4 * v111];
                v118 = bswap64(*v113);
                v119 = bswap64(*v117);
                if (v118 == v119
                  && (v118 = bswap64(v113[1]), v119 = bswap64(v117[1]), v118 == v119)
                  && (v118 = bswap64(v113[2]), v119 = bswap64(v117[2]), v118 == v119)
                  && (v118 = bswap64(v113[3]), v119 = bswap64(v117[3]), v118 == v119)
                  || (v118 < v119 ? (v120 = -1) : (v120 = 1), (v120 & 0x80000000) == 0))
                {
                  v189 = *(_OWORD *)v117;
                  v198 = *((_OWORD *)v117 + 1);
                  do
                  {
                    v121 = v113;
                    v122 = *((_OWORD *)v113 + 1);
                    *(_OWORD *)v117 = *(_OWORD *)v113;
                    *((_OWORD *)v117 + 1) = v122;
                    if (v109 < v112)
                      break;
                    v123 = (2 * v112) | 1;
                    v113 = &v8[4 * v123];
                    v112 = 2 * v112 + 2;
                    if (v112 >= (uint64_t)v10)
                    {
                      v112 = v123;
                    }
                    else
                    {
                      v124 = bswap64(*v113);
                      v125 = bswap64(v113[4]);
                      if (v124 != v125)
                        goto LABEL_229;
                      v124 = bswap64(v113[1]);
                      v125 = bswap64(v113[5]);
                      if (v124 == v125
                        && (v124 = bswap64(v113[2]), v125 = bswap64(v113[6]), v124 == v125)
                        && (v124 = bswap64(v113[3]), v125 = bswap64(v113[7]), v124 == v125))
                      {
                        v126 = 0;
                      }
                      else
                      {
LABEL_229:
                        v126 = v124 < v125 ? -1 : 1;
                      }
                      if (v126 >= 0)
                        v112 = v123;
                      else
                        v113 += 4;
                    }
                    v127 = bswap64(*v113);
                    v128 = bswap64(v189);
                    if (v127 != v128)
                      goto LABEL_240;
                    v127 = bswap64(v113[1]);
                    v128 = bswap64(*((unint64_t *)&v189 + 1));
                    if (v127 == v128
                      && (v127 = bswap64(v113[2]), v128 = bswap64(v198), v127 == v128)
                      && (v127 = bswap64(v113[3]), v128 = bswap64(*((unint64_t *)&v198 + 1)), v127 == v128))
                    {
                      v129 = 0;
                    }
                    else
                    {
LABEL_240:
                      v129 = v127 < v128 ? -1 : 1;
                    }
                    v117 = v121;
                  }
                  while ((v129 & 0x80000000) == 0);
                  *(_OWORD *)v121 = v189;
                  *((_OWORD *)v121 + 1) = v198;
                }
              }
              v110 = v111 - 1;
            }
            while (v111);
            v130 = (unint64_t)v9 >> 5;
            do
            {
              v131 = 0;
              v181 = *(__n128 *)v8;
              v184 = *((_OWORD *)v8 + 1);
              v132 = v8;
              do
              {
                v133 = &v132[4 * v131 + 4];
                v134 = (2 * v131) | 1;
                v135 = 2 * v131 + 2;
                if (v135 < v130)
                {
                  v136 = bswap64(*v133);
                  v137 = bswap64(v133[4]);
                  if (v136 != v137)
                    goto LABEL_254;
                  v136 = bswap64(v133[1]);
                  v137 = bswap64(v133[5]);
                  if (v136 == v137
                    && (v136 = bswap64(v133[2]), v137 = bswap64(v133[6]), v136 == v137)
                    && (v136 = bswap64(v133[3]), v137 = bswap64(v133[7]), v136 == v137))
                  {
                    v138 = 0;
                  }
                  else
                  {
LABEL_254:
                    v138 = v136 < v137 ? -1 : 1;
                  }
                  if (v138 < 0)
                  {
                    v133 += 4;
                    v134 = v135;
                  }
                }
                v139 = *((_OWORD *)v133 + 1);
                *(_OWORD *)v132 = *(_OWORD *)v133;
                *((_OWORD *)v132 + 1) = v139;
                v132 = v133;
                v131 = v134;
              }
              while (v134 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
              a2 -= 32;
              if (v133 == (unint64_t *)a2)
              {
                result = v181;
                *(__n128 *)v133 = v181;
                *((_OWORD *)v133 + 1) = v184;
              }
              else
              {
                v140 = *(_OWORD *)(a2 + 16);
                *(_OWORD *)v133 = *(_OWORD *)a2;
                *((_OWORD *)v133 + 1) = v140;
                result = v181;
                *(__n128 *)a2 = v181;
                *(_OWORD *)(a2 + 16) = v184;
                v141 = (char *)v133 - (char *)v8 + 32;
                if (v141 >= 33)
                {
                  v142 = (((unint64_t)v141 >> 5) - 2) >> 1;
                  v143 = &v8[4 * v142];
                  v144 = bswap64(*v143);
                  v145 = bswap64(*v133);
                  if (v144 != v145
                    || (v144 = bswap64(v143[1]), v145 = bswap64(v133[1]), v144 != v145)
                    || (v144 = bswap64(v143[2]), v145 = bswap64(v133[2]), v144 != v145)
                    || (v144 = bswap64(v143[3]), v145 = bswap64(v133[3]), v144 != v145))
                  {
                    v146 = v144 < v145 ? -1 : 1;
                    if (v146 < 0)
                    {
                      v190 = *(__n128 *)v133;
                      v199 = *((__n128 *)v133 + 1);
                      do
                      {
                        v147 = (__n128 *)v143;
                        v148 = *((_OWORD *)v143 + 1);
                        *(_OWORD *)v133 = *(_OWORD *)v143;
                        *((_OWORD *)v133 + 1) = v148;
                        if (!v142)
                          break;
                        v142 = (v142 - 1) >> 1;
                        v143 = &v8[4 * v142];
                        v149 = bswap64(*v143);
                        v150 = bswap64(v190.n128_u64[0]);
                        if (v149 != v150)
                          goto LABEL_279;
                        v149 = bswap64(v143[1]);
                        v150 = bswap64(v190.n128_u64[1]);
                        if (v149 == v150
                          && (v149 = bswap64(v143[2]), v150 = bswap64(v199.n128_u64[0]), v149 == v150)
                          && (v149 = bswap64(v143[3]), v150 = bswap64(v199.n128_u64[1]), v149 == v150))
                        {
                          v151 = 0;
                        }
                        else
                        {
LABEL_279:
                          v151 = v149 < v150 ? -1 : 1;
                        }
                        v133 = (unint64_t *)v147;
                      }
                      while (v151 < 0);
                      result = v190;
                      *v147 = v190;
                      v147[1] = v199;
                    }
                  }
                }
              }
            }
            while (v130-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[4 * (v10 >> 1)];
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v10 >> 1)], a1, (unint64_t *)(a2 - 32));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v10 >> 1)], (unint64_t *)(a2 - 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v12 - 4, (unint64_t *)(a2 - 64));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v11 + 4], (unint64_t *)(a2 - 96));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v12 - 4, v12, &a1[4 * v11 + 4]);
          v185 = *(__n128 *)a1;
          v194 = *((_OWORD *)a1 + 1);
          v13 = *((_OWORD *)v12 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *((_OWORD *)a1 + 1) = v13;
          *(__n128 *)v12 = v185;
          *((_OWORD *)v12 + 1) = v194;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = bswap64(*(a1 - 4));
          v15 = bswap64(*a1);
          if (v14 != v15)
            goto LABEL_14;
          v14 = bswap64(*(a1 - 3));
          v15 = bswap64(a1[1]);
          if (v14 == v15
            && (v14 = bswap64(*(a1 - 2)), v15 = bswap64(a1[2]), v14 == v15)
            && (v14 = bswap64(*(a1 - 1)), v15 = bswap64(a1[3]), v14 == v15))
          {
            v16 = 0;
          }
          else
          {
LABEL_14:
            v16 = v14 < v15 ? -1 : 1;
          }
          if ((v16 & 0x80000000) == 0)
          {
            v180 = *(__n128 *)a1;
            v183 = *((_OWORD *)a1 + 1);
            v49 = bswap64(*a1);
            v50 = bswap64(*(_QWORD *)(a2 - 32));
            if (v49 == v50
              && (v49 = bswap64(v180.n128_u64[1]), v50 = bswap64(*(_QWORD *)(a2 - 24)), v49 == v50)
              && (v49 = bswap64(v183), v50 = bswap64(*(_QWORD *)(a2 - 16)), v49 == v50)
              && (v49 = bswap64(*((unint64_t *)&v183 + 1)), v50 = bswap64(*(_QWORD *)(a2 - 8)), v49 == v50))
            {
              v51 = 0;
            }
            else if (v49 < v50)
            {
              v51 = -1;
            }
            else
            {
              v51 = 1;
            }
            if (v51 < 0)
            {
              v56 = a1;
              v8 = a1;
              do
              {
                v57 = v8[4];
                v8 += 4;
                v58 = bswap64(v180.n128_u64[0]);
                v59 = bswap64(v57);
                if (v58 == v59
                  && (v58 = bswap64(v180.n128_u64[1]), v59 = bswap64(v56[5]), v58 == v59)
                  && (v58 = bswap64(v183), v59 = bswap64(v56[6]), v58 == v59)
                  && (v58 = bswap64(*((unint64_t *)&v183 + 1)), v59 = bswap64(v56[7]), v58 == v59))
                {
                  v60 = 0;
                }
                else if (v58 < v59)
                {
                  v60 = -1;
                }
                else
                {
                  v60 = 1;
                }
                v56 = v8;
              }
              while ((v60 & 0x80000000) == 0);
            }
            else
            {
              v52 = a1 + 4;
              do
              {
                v8 = v52;
                if ((unint64_t)v52 >= a2)
                  break;
                v53 = bswap64(v180.n128_u64[0]);
                v54 = bswap64(*v8);
                if (v53 != v54)
                  goto LABEL_99;
                v53 = bswap64(v180.n128_u64[1]);
                v54 = bswap64(v8[1]);
                if (v53 == v54
                  && (v53 = bswap64(v183), v54 = bswap64(v8[2]), v53 == v54)
                  && (v53 = bswap64(*((unint64_t *)&v183 + 1)), v54 = bswap64(v8[3]), v53 == v54))
                {
                  v55 = 0;
                }
                else
                {
LABEL_99:
                  v55 = v53 < v54 ? -1 : 1;
                }
                v52 = v8 + 4;
              }
              while ((v55 & 0x80000000) == 0);
            }
            v61 = (_OWORD *)a2;
            if ((unint64_t)v8 < a2)
            {
              v62 = (_OWORD *)a2;
              v61 = (_OWORD *)a2;
              do
              {
                v63 = *((_QWORD *)v61 - 4);
                v61 -= 2;
                v64 = bswap64(v180.n128_u64[0]);
                v65 = bswap64(v63);
                if (v64 == v65
                  && (v64 = bswap64(v180.n128_u64[1]), v65 = bswap64(*((_QWORD *)v62 - 3)), v64 == v65)
                  && (v64 = bswap64(v183), v65 = bswap64(*((_QWORD *)v62 - 2)), v64 == v65)
                  && (v64 = bswap64(*((unint64_t *)&v183 + 1)), v65 = bswap64(*((_QWORD *)v62 - 1)), v64 == v65))
                {
                  v66 = 0;
                }
                else if (v64 < v65)
                {
                  v66 = -1;
                }
                else
                {
                  v66 = 1;
                }
                v62 = v61;
              }
              while (v66 < 0);
            }
            while (v8 < (unint64_t *)v61)
            {
              v187 = *(__n128 *)v8;
              v196 = *((_OWORD *)v8 + 1);
              v67 = v61[1];
              *(_OWORD *)v8 = *v61;
              *((_OWORD *)v8 + 1) = v67;
              *v61 = v187;
              v61[1] = v196;
              v68 = v8;
              do
              {
                v69 = v8[4];
                v8 += 4;
                v70 = bswap64(v180.n128_u64[0]);
                v71 = bswap64(v69);
                if (v70 == v71
                  && (v70 = bswap64(v180.n128_u64[1]), v71 = bswap64(v68[5]), v70 == v71)
                  && (v70 = bswap64(v183), v71 = bswap64(v68[6]), v70 == v71)
                  && (v70 = bswap64(*((unint64_t *)&v183 + 1)), v71 = bswap64(v68[7]), v70 == v71))
                {
                  v72 = 0;
                }
                else if (v70 < v71)
                {
                  v72 = -1;
                }
                else
                {
                  v72 = 1;
                }
                v68 = v8;
              }
              while ((v72 & 0x80000000) == 0);
              v73 = v61;
              do
              {
                v74 = *((_QWORD *)v61 - 4);
                v61 -= 2;
                v75 = bswap64(v180.n128_u64[0]);
                v76 = bswap64(v74);
                if (v75 == v76
                  && (v75 = bswap64(v180.n128_u64[1]), v76 = bswap64(*((_QWORD *)v73 - 3)), v75 == v76)
                  && (v75 = bswap64(v183), v76 = bswap64(*((_QWORD *)v73 - 2)), v75 == v76)
                  && (v75 = bswap64(*((unint64_t *)&v183 + 1)), v76 = bswap64(*((_QWORD *)v73 - 1)), v75 == v76))
                {
                  v77 = 0;
                }
                else if (v75 < v76)
                {
                  v77 = -1;
                }
                else
                {
                  v77 = 1;
                }
                v73 = v61;
              }
              while (v77 < 0);
            }
            v78 = (__n128 *)(v8 - 4);
            if (v8 - 4 != a1)
            {
              v79 = *((_OWORD *)v8 - 1);
              *(__n128 *)a1 = *v78;
              *((_OWORD *)a1 + 1) = v79;
            }
            a4 = 0;
            result = v180;
            *v78 = v180;
            *((_OWORD *)v8 - 1) = v183;
            continue;
          }
        }
        v17 = 0;
        v179 = *(__n128 *)a1;
        v182 = *((_OWORD *)a1 + 1);
        do
        {
          v18 = &a1[v17];
          v19 = bswap64(a1[v17 + 4]);
          v20 = bswap64(v179.n128_u64[0]);
          if (v19 == v20
            && (v19 = bswap64(v18[5]), v20 = bswap64(v179.n128_u64[1]), v19 == v20)
            && (v19 = bswap64(v18[6]), v20 = bswap64(v182), v19 == v20)
            && (v19 = bswap64(v18[7]), v20 = bswap64(*((unint64_t *)&v182 + 1)), v19 == v20))
          {
            v21 = 0;
          }
          else if (v19 < v20)
          {
            v21 = -1;
          }
          else
          {
            v21 = 1;
          }
          v17 += 4;
        }
        while (v21 < 0);
        v22 = &a1[v17];
        v23 = a2;
        if (v17 == 4)
        {
          v28 = (_OWORD *)a2;
          while (v22 < (unint64_t *)v28)
          {
            v24 = v28 - 2;
            v29 = bswap64(*((_QWORD *)v28 - 4));
            v30 = bswap64(v179.n128_u64[0]);
            if (v29 == v30
              && (v29 = bswap64(*((_QWORD *)v28 - 3)), v30 = bswap64(v179.n128_u64[1]), v29 == v30)
              && (v29 = bswap64(*((_QWORD *)v28 - 2)), v30 = bswap64(v182), v29 == v30)
              && (v29 = bswap64(*((_QWORD *)v28 - 1)), v30 = bswap64(*((unint64_t *)&v182 + 1)), v29 == v30))
            {
              v31 = 0;
            }
            else if (v29 < v30)
            {
              v31 = -1;
            }
            else
            {
              v31 = 1;
            }
            v28 -= 2;
            if (v31 < 0)
              goto LABEL_52;
          }
          v24 = v28;
        }
        else
        {
          do
          {
            v24 = (_OWORD *)(v23 - 32);
            v25 = bswap64(*(_QWORD *)(v23 - 32));
            v26 = bswap64(v179.n128_u64[0]);
            if (v25 == v26
              && (v25 = bswap64(*(_QWORD *)(v23 - 24)), v26 = bswap64(v179.n128_u64[1]), v25 == v26)
              && (v25 = bswap64(*(_QWORD *)(v23 - 16)), v26 = bswap64(v182), v25 == v26)
              && (v25 = bswap64(*(_QWORD *)(v23 - 8)), v26 = bswap64(*((unint64_t *)&v182 + 1)), v25 == v26))
            {
              v27 = 0;
            }
            else if (v25 < v26)
            {
              v27 = -1;
            }
            else
            {
              v27 = 1;
            }
            v23 -= 32;
          }
          while ((v27 & 0x80000000) == 0);
        }
LABEL_52:
        if (v22 >= (unint64_t *)v24)
        {
          v45 = v22 - 4;
        }
        else
        {
          v32 = (unint64_t)v22;
          v33 = v24;
          do
          {
            v186 = *(_OWORD *)v32;
            v195 = *(_OWORD *)(v32 + 16);
            v34 = v33[1];
            *(_OWORD *)v32 = *v33;
            *(_OWORD *)(v32 + 16) = v34;
            *v33 = v186;
            v33[1] = v195;
            v35 = (unint64_t *)v32;
            do
            {
              v36 = *(_QWORD *)(v32 + 32);
              v32 += 32;
              v37 = bswap64(v36);
              v38 = bswap64(v179.n128_u64[0]);
              if (v37 == v38
                && (v37 = bswap64(v35[5]), v38 = bswap64(v179.n128_u64[1]), v37 == v38)
                && (v37 = bswap64(v35[6]), v38 = bswap64(v182), v37 == v38)
                && (v37 = bswap64(v35[7]), v38 = bswap64(*((unint64_t *)&v182 + 1)), v37 == v38))
              {
                v39 = 0;
              }
              else if (v37 < v38)
              {
                v39 = -1;
              }
              else
              {
                v39 = 1;
              }
              v35 = (unint64_t *)v32;
            }
            while (v39 < 0);
            v40 = v33;
            do
            {
              v41 = *((_QWORD *)v33 - 4);
              v33 -= 2;
              v42 = bswap64(v41);
              v43 = bswap64(v179.n128_u64[0]);
              if (v42 == v43
                && (v42 = bswap64(*((_QWORD *)v40 - 3)), v43 = bswap64(v179.n128_u64[1]), v42 == v43)
                && (v42 = bswap64(*((_QWORD *)v40 - 2)), v43 = bswap64(v182), v42 == v43)
                && (v42 = bswap64(*((_QWORD *)v40 - 1)), v43 = bswap64(*((unint64_t *)&v182 + 1)), v42 == v43))
              {
                v44 = 0;
              }
              else if (v42 < v43)
              {
                v44 = -1;
              }
              else
              {
                v44 = 1;
              }
              v40 = v33;
            }
            while ((v44 & 0x80000000) == 0);
          }
          while (v32 < (unint64_t)v33);
          v45 = (unint64_t *)(v32 - 32);
        }
        if (v45 != a1)
        {
          v46 = *((_OWORD *)v45 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v45;
          *((_OWORD *)a1 + 1) = v46;
        }
        *(__n128 *)v45 = v179;
        *((_OWORD *)v45 + 1) = v182;
        if (v22 < (unint64_t *)v24)
        {
LABEL_82:
          std::__introsort<std::_ClassicAlgPolicy,createHashForStitchingLibraryRequest(NSString *,NSArray<objc_object  {objcproto11MTLFunction}*> *)::$_0 &,MTLUINT256_t *,false>(a1, v45, a3, a4 & 1);
          a4 = 0;
          v8 = v45 + 4;
          continue;
        }
        v47 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,createHashForStitchingLibraryRequest(NSString *,NSArray<objc_object  {objcproto11MTLFunction}*> *)::$_0 &,MTLUINT256_t *>(a1, v45);
        v8 = v45 + 4;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,createHashForStitchingLibraryRequest(NSString *,NSArray<objc_object  {objcproto11MTLFunction}*> *)::$_0 &,MTLUINT256_t *>(v45 + 4, (unint64_t *)a2))
        {
          if (v47)
            continue;
          goto LABEL_82;
        }
        a2 = (unint64_t)v45;
        if (!v47)
          goto LABEL_1;
        return result;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v24 = *(a2 - 4);
        v23 = a2 - 4;
        v25 = bswap64(v24);
        v26 = bswap64(*v9);
        if (v25 == v26
          && (v25 = bswap64(v23[1]), v26 = bswap64(v9[1]), v25 == v26)
          && (v25 = bswap64(v23[2]), v26 = bswap64(v9[2]), v25 == v26)
          && (v25 = bswap64(v23[3]), v26 = bswap64(v9[3]), v25 == v26))
        {
          v27 = 0;
        }
        else if (v25 < v26)
        {
          v27 = -1;
        }
        else
        {
          v27 = 1;
        }
        if (v27 < 0)
        {
          v30 = *(_OWORD *)v9;
          v32 = *((_OWORD *)v9 + 1);
          v28 = *((_OWORD *)v23 + 1);
          *(_OWORD *)v9 = *(_OWORD *)v23;
          *((_OWORD *)v9 + 1) = v28;
          *(_OWORD *)v23 = v30;
          *((_OWORD *)v23 + 1) = v32;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, v9 + 4, a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, v9 + 4, v9 + 8, a2 - 4);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, v9 + 4, v9 + 8, v9 + 12, a2 - 4);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(&v9[4 * (v13 >> 1)], v9, a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9, &v9[4 * (v13 >> 1)], a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9 + 4, v15 - 4, a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v9 + 8, &v9[4 * v14 + 4], a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(v15 - 4, v15, &v9[4 * v14 + 4]);
            v29 = *(_OWORD *)v9;
            v31 = *((_OWORD *)v9 + 1);
            v16 = *((_OWORD *)v15 + 1);
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *((_OWORD *)v9 + 1) = v16;
            *(_OWORD *)v15 = v29;
            *((_OWORD *)v15 + 1) = v31;
            if ((a5 & 1) != 0)
              goto LABEL_19;
          }
          v17 = bswap64(*(v9 - 4));
          v18 = bswap64(*v9);
          if (v17 == v18
            && (v17 = bswap64(*(v9 - 3)), v18 = bswap64(v9[1]), v17 == v18)
            && (v17 = bswap64(*(v9 - 2)), v18 = bswap64(v9[2]), v17 == v18)
            && (v17 = bswap64(*(v9 - 1)), v18 = bswap64(v9[3]), v17 == v18))
          {
            v19 = 0;
          }
          else if (v17 < v18)
          {
            v19 = -1;
          }
          else
          {
            v19 = 1;
          }
          if ((v19 & 0x80000000) == 0)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MTLUINT256_t *,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &>(v9, a2);
            goto LABEL_24;
          }
LABEL_19:
          v20 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MTLUINT256_t *,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &>((__int128 *)v9, (__int128 *)a2);
          if ((v21 & 1) == 0)
            goto LABEL_22;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v9, v20);
          v9 = v20 + 4;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v20 + 4, a2))
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_22:
            std::__introsort<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **,false>(a1, v20, a3, -v11, a5 & 1);
            v9 = v20 + 4;
LABEL_24:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v20;
          if (v22)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*,MTLUINT256_t*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - (_QWORD)v8;
    v10 = (uint64_t)(a2 - (_QWORD)v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v81 = *(_QWORD *)(a2 - 32);
        v80 = a2 - 32;
        v82 = bswap64(v81);
        v83 = bswap64(*v8);
        if (v82 == v83
          && (v82 = bswap64(*(_QWORD *)(v80 + 8)), v83 = bswap64(v8[1]), v82 == v83)
          && (v82 = bswap64(*(_QWORD *)(v80 + 16)), v83 = bswap64(v8[2]), v82 == v83)
          && (v82 = bswap64(*(_QWORD *)(v80 + 24)), v83 = bswap64(v8[3]), v82 == v83))
        {
          v84 = 0;
        }
        else if (v82 < v83)
        {
          v84 = -1;
        }
        else
        {
          v84 = 1;
        }
        if (v84 < 0)
        {
          v191 = *(__n128 *)v8;
          v200 = *((_OWORD *)v8 + 1);
          v153 = *(_OWORD *)(v80 + 16);
          *(_OWORD *)v8 = *(_OWORD *)v80;
          *((_OWORD *)v8 + 1) = v153;
          result = v191;
          *(__n128 *)v80 = v191;
          *(_OWORD *)(v80 + 16) = v200;
        }
        return result;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, (unint64_t *)(a2 - 32));
        return result;
      case 4uLL:
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, v8 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
        return result;
      case 5uLL:
        v85 = v8 + 4;
        v86 = v8 + 8;
        v87 = v8 + 12;
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v8, v8 + 4, v8 + 8, v8 + 12).n128_u64[0];
        v89 = *(_QWORD *)(a2 - 32);
        v88 = a2 - 32;
        v90 = bswap64(v89);
        v91 = bswap64(v8[12]);
        if (v90 == v91
          && (v90 = bswap64(*(_QWORD *)(v88 + 8)), v91 = bswap64(v8[13]), v90 == v91)
          && (v90 = bswap64(*(_QWORD *)(v88 + 16)), v91 = bswap64(v8[14]), v90 == v91)
          && (v90 = bswap64(*(_QWORD *)(v88 + 24)), v91 = bswap64(v8[15]), v90 == v91))
        {
          v92 = 0;
        }
        else if (v90 < v91)
        {
          v92 = -1;
        }
        else
        {
          v92 = 1;
        }
        if (v92 < 0)
        {
          result = *(__n128 *)v87;
          v201 = *((_OWORD *)v8 + 7);
          v154 = *(_OWORD *)(v88 + 16);
          *(_OWORD *)v87 = *(_OWORD *)v88;
          *((_OWORD *)v8 + 7) = v154;
          *(__n128 *)v88 = result;
          *(_OWORD *)(v88 + 16) = v201;
          v155 = bswap64(*v87);
          v156 = bswap64(*v86);
          if (v155 != v156)
            goto LABEL_324;
          v155 = bswap64(v8[13]);
          v156 = bswap64(v8[9]);
          if (v155 == v156
            && (v155 = bswap64(v8[14]), v156 = bswap64(v8[10]), v155 == v156)
            && (v155 = bswap64(v8[15]), v156 = bswap64(v8[11]), v155 == v156))
          {
            v157 = 0;
          }
          else
          {
LABEL_324:
            v157 = v155 < v156 ? -1 : 1;
          }
          if (v157 < 0)
          {
            v168 = *(_OWORD *)v86;
            result = *((__n128 *)v8 + 5);
            v169 = *((_OWORD *)v8 + 7);
            *(_OWORD *)v86 = *(_OWORD *)v87;
            *((_OWORD *)v8 + 5) = v169;
            *(_OWORD *)v87 = v168;
            *((__n128 *)v8 + 7) = result;
            v170 = bswap64(*v86);
            v171 = bswap64(*v85);
            if (v170 != v171)
              goto LABEL_333;
            v170 = bswap64(v8[9]);
            v171 = bswap64(v8[5]);
            if (v170 == v171
              && (v170 = bswap64(v8[10]), v171 = bswap64(v8[6]), v170 == v171)
              && (v170 = bswap64(v8[11]), v171 = bswap64(v8[7]), v170 == v171))
            {
              v172 = 0;
            }
            else
            {
LABEL_333:
              v172 = v170 < v171 ? -1 : 1;
            }
            if (v172 < 0)
            {
              v173 = *(_OWORD *)v85;
              result = *((__n128 *)v8 + 3);
              v174 = *((_OWORD *)v8 + 5);
              *(_OWORD *)v85 = *(_OWORD *)v86;
              *((_OWORD *)v8 + 3) = v174;
              *(_OWORD *)v86 = v173;
              *((__n128 *)v8 + 5) = result;
              v175 = bswap64(v8[4]);
              v176 = bswap64(*v8);
              if (v175 != v176)
                goto LABEL_342;
              v175 = bswap64(v8[5]);
              v176 = bswap64(v8[1]);
              if (v175 == v176
                && (v175 = bswap64(v8[6]), v176 = bswap64(v8[2]), v175 == v176)
                && (v175 = bswap64(v8[7]), v176 = bswap64(v8[3]), v175 == v176))
              {
                v177 = 0;
              }
              else
              {
LABEL_342:
                v177 = v175 < v176 ? -1 : 1;
              }
              if (v177 < 0)
              {
                v193 = *(__n128 *)v8;
                v203 = *((_OWORD *)v8 + 1);
                v178 = *((_OWORD *)v8 + 3);
                *(_OWORD *)v8 = *(_OWORD *)v85;
                *((_OWORD *)v8 + 1) = v178;
                result = v193;
                *(__n128 *)v85 = v193;
                *((_OWORD *)v8 + 3) = v203;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 767)
        {
          n128_u64 = v8 + 4;
          v95 = v8 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v95)
            {
              v96 = 0;
              v97 = v8;
              do
              {
                v98 = (__n128 *)n128_u64;
                v99 = bswap64(v97[4]);
                v100 = bswap64(*v97);
                if (v99 != v100
                  || (v99 = bswap64(v98->n128_u64[1]), v100 = bswap64(v97[1]), v99 != v100)
                  || (v99 = bswap64(v98[1].n128_u64[0]), v100 = bswap64(v97[2]), v99 != v100)
                  || (v99 = bswap64(v98[1].n128_u64[1]), v100 = bswap64(v97[3]), v99 != v100))
                {
                  v101 = v99 < v100 ? -1 : 1;
                  if (v101 < 0)
                  {
                    v188 = *v98;
                    v197 = v98[1];
                    v102 = v96;
                    while (1)
                    {
                      v103 = (char *)v8 + v102;
                      v104 = *(_OWORD *)((char *)v8 + v102 + 16);
                      *((_OWORD *)v103 + 2) = *(_OWORD *)((char *)v8 + v102);
                      *((_OWORD *)v103 + 3) = v104;
                      if (!v102)
                        break;
                      v105 = bswap64(v188.n128_u64[0]);
                      v106 = bswap64(*((_QWORD *)v103 - 4));
                      if (v105 == v106
                        && (v105 = bswap64(v188.n128_u64[1]), v106 = bswap64(*((_QWORD *)v103 - 3)), v105 == v106)
                        && (v105 = bswap64(v197.n128_u64[0]), v106 = bswap64(*((_QWORD *)v103 - 2)), v105 == v106)
                        && (v105 = bswap64(v197.n128_u64[1]), v106 = bswap64(*((_QWORD *)v103 - 1)), v105 == v106))
                      {
                        v107 = 0;
                      }
                      else if (v105 < v106)
                      {
                        v107 = -1;
                      }
                      else
                      {
                        v107 = 1;
                      }
                      v102 -= 32;
                      if ((v107 & 0x80000000) == 0)
                      {
                        v108 = (__n128 *)((char *)v8 + v102 + 32);
                        goto LABEL_195;
                      }
                    }
                    v108 = (__n128 *)v8;
LABEL_195:
                    result = v188;
                    *v108 = v188;
                    v108[1] = v197;
                  }
                }
                n128_u64 = v98[2].n128_u64;
                v96 += 32;
                v97 = (unint64_t *)v98;
              }
              while (&v98[2] != (__n128 *)a2);
            }
          }
          else if (!v95)
          {
            v158 = v8 - 4;
            do
            {
              v159 = (__n128 *)n128_u64;
              v160 = bswap64(a1[4]);
              v161 = bswap64(*a1);
              if (v160 != v161
                || (v160 = bswap64(v159->n128_u64[1]), v161 = bswap64(a1[1]), v160 != v161)
                || (v160 = bswap64(v159[1].n128_u64[0]), v161 = bswap64(a1[2]), v160 != v161)
                || (v160 = bswap64(v159[1].n128_u64[1]), v161 = bswap64(a1[3]), v160 != v161))
              {
                v162 = v160 < v161 ? -1 : 1;
                if (v162 < 0)
                {
                  v192 = *v159;
                  v202 = v159[1];
                  v163 = v158;
                  do
                  {
                    v164 = *((_OWORD *)v163 + 3);
                    *((_OWORD *)v163 + 4) = *((_OWORD *)v163 + 2);
                    *((_OWORD *)v163 + 5) = v164;
                    v165 = bswap64(v192.n128_u64[0]);
                    v166 = bswap64(*v163);
                    if (v165 == v166
                      && (v165 = bswap64(v192.n128_u64[1]), v166 = bswap64(v163[1]), v165 == v166)
                      && (v165 = bswap64(v202.n128_u64[0]), v166 = bswap64(v163[2]), v165 == v166)
                      && (v165 = bswap64(v202.n128_u64[1]), v166 = bswap64(v163[3]), v165 == v166))
                    {
                      v167 = 0;
                    }
                    else if (v165 < v166)
                    {
                      v167 = -1;
                    }
                    else
                    {
                      v167 = 1;
                    }
                    v163 -= 4;
                  }
                  while (v167 < 0);
                  result = v192;
                  *((__n128 *)v163 + 4) = v192;
                  *((__n128 *)v163 + 5) = v202;
                }
              }
              n128_u64 = v159[2].n128_u64;
              v158 += 4;
              a1 = (unint64_t *)v159;
            }
            while (&v159[2] != (__n128 *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != (unint64_t *)a2)
          {
            v109 = (v10 - 2) >> 1;
            v110 = v109;
            do
            {
              v111 = v110;
              if (v109 >= v110)
              {
                v112 = (2 * v110) | 1;
                v113 = &v8[4 * v112];
                if (2 * v111 + 2 < (uint64_t)v10)
                {
                  v114 = bswap64(*v113);
                  v115 = bswap64(v113[4]);
                  if (v114 != v115)
                    goto LABEL_207;
                  v114 = bswap64(v113[1]);
                  v115 = bswap64(v113[5]);
                  if (v114 == v115
                    && (v114 = bswap64(v113[2]), v115 = bswap64(v113[6]), v114 == v115)
                    && (v114 = bswap64(v113[3]), v115 = bswap64(v113[7]), v114 == v115))
                  {
                    v116 = 0;
                  }
                  else
                  {
LABEL_207:
                    v116 = v114 < v115 ? -1 : 1;
                  }
                  if (v116 < 0)
                  {
                    v113 += 4;
                    v112 = 2 * v111 + 2;
                  }
                }
                v117 = &v8[4 * v111];
                v118 = bswap64(*v113);
                v119 = bswap64(*v117);
                if (v118 == v119
                  && (v118 = bswap64(v113[1]), v119 = bswap64(v117[1]), v118 == v119)
                  && (v118 = bswap64(v113[2]), v119 = bswap64(v117[2]), v118 == v119)
                  && (v118 = bswap64(v113[3]), v119 = bswap64(v117[3]), v118 == v119)
                  || (v118 < v119 ? (v120 = -1) : (v120 = 1), (v120 & 0x80000000) == 0))
                {
                  v189 = *(_OWORD *)v117;
                  v198 = *((_OWORD *)v117 + 1);
                  do
                  {
                    v121 = v113;
                    v122 = *((_OWORD *)v113 + 1);
                    *(_OWORD *)v117 = *(_OWORD *)v113;
                    *((_OWORD *)v117 + 1) = v122;
                    if (v109 < v112)
                      break;
                    v123 = (2 * v112) | 1;
                    v113 = &v8[4 * v123];
                    v112 = 2 * v112 + 2;
                    if (v112 >= (uint64_t)v10)
                    {
                      v112 = v123;
                    }
                    else
                    {
                      v124 = bswap64(*v113);
                      v125 = bswap64(v113[4]);
                      if (v124 != v125)
                        goto LABEL_229;
                      v124 = bswap64(v113[1]);
                      v125 = bswap64(v113[5]);
                      if (v124 == v125
                        && (v124 = bswap64(v113[2]), v125 = bswap64(v113[6]), v124 == v125)
                        && (v124 = bswap64(v113[3]), v125 = bswap64(v113[7]), v124 == v125))
                      {
                        v126 = 0;
                      }
                      else
                      {
LABEL_229:
                        v126 = v124 < v125 ? -1 : 1;
                      }
                      if (v126 >= 0)
                        v112 = v123;
                      else
                        v113 += 4;
                    }
                    v127 = bswap64(*v113);
                    v128 = bswap64(v189);
                    if (v127 != v128)
                      goto LABEL_240;
                    v127 = bswap64(v113[1]);
                    v128 = bswap64(*((unint64_t *)&v189 + 1));
                    if (v127 == v128
                      && (v127 = bswap64(v113[2]), v128 = bswap64(v198), v127 == v128)
                      && (v127 = bswap64(v113[3]), v128 = bswap64(*((unint64_t *)&v198 + 1)), v127 == v128))
                    {
                      v129 = 0;
                    }
                    else
                    {
LABEL_240:
                      v129 = v127 < v128 ? -1 : 1;
                    }
                    v117 = v121;
                  }
                  while ((v129 & 0x80000000) == 0);
                  *(_OWORD *)v121 = v189;
                  *((_OWORD *)v121 + 1) = v198;
                }
              }
              v110 = v111 - 1;
            }
            while (v111);
            v130 = (unint64_t)v9 >> 5;
            do
            {
              v131 = 0;
              v181 = *(__n128 *)v8;
              v184 = *((_OWORD *)v8 + 1);
              v132 = v8;
              do
              {
                v133 = &v132[4 * v131 + 4];
                v134 = (2 * v131) | 1;
                v135 = 2 * v131 + 2;
                if (v135 < v130)
                {
                  v136 = bswap64(*v133);
                  v137 = bswap64(v133[4]);
                  if (v136 != v137)
                    goto LABEL_254;
                  v136 = bswap64(v133[1]);
                  v137 = bswap64(v133[5]);
                  if (v136 == v137
                    && (v136 = bswap64(v133[2]), v137 = bswap64(v133[6]), v136 == v137)
                    && (v136 = bswap64(v133[3]), v137 = bswap64(v133[7]), v136 == v137))
                  {
                    v138 = 0;
                  }
                  else
                  {
LABEL_254:
                    v138 = v136 < v137 ? -1 : 1;
                  }
                  if (v138 < 0)
                  {
                    v133 += 4;
                    v134 = v135;
                  }
                }
                v139 = *((_OWORD *)v133 + 1);
                *(_OWORD *)v132 = *(_OWORD *)v133;
                *((_OWORD *)v132 + 1) = v139;
                v132 = v133;
                v131 = v134;
              }
              while (v134 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
              a2 -= 32;
              if (v133 == (unint64_t *)a2)
              {
                result = v181;
                *(__n128 *)v133 = v181;
                *((_OWORD *)v133 + 1) = v184;
              }
              else
              {
                v140 = *(_OWORD *)(a2 + 16);
                *(_OWORD *)v133 = *(_OWORD *)a2;
                *((_OWORD *)v133 + 1) = v140;
                result = v181;
                *(__n128 *)a2 = v181;
                *(_OWORD *)(a2 + 16) = v184;
                v141 = (char *)v133 - (char *)v8 + 32;
                if (v141 >= 33)
                {
                  v142 = (((unint64_t)v141 >> 5) - 2) >> 1;
                  v143 = &v8[4 * v142];
                  v144 = bswap64(*v143);
                  v145 = bswap64(*v133);
                  if (v144 != v145
                    || (v144 = bswap64(v143[1]), v145 = bswap64(v133[1]), v144 != v145)
                    || (v144 = bswap64(v143[2]), v145 = bswap64(v133[2]), v144 != v145)
                    || (v144 = bswap64(v143[3]), v145 = bswap64(v133[3]), v144 != v145))
                  {
                    v146 = v144 < v145 ? -1 : 1;
                    if (v146 < 0)
                    {
                      v190 = *(__n128 *)v133;
                      v199 = *((__n128 *)v133 + 1);
                      do
                      {
                        v147 = (__n128 *)v143;
                        v148 = *((_OWORD *)v143 + 1);
                        *(_OWORD *)v133 = *(_OWORD *)v143;
                        *((_OWORD *)v133 + 1) = v148;
                        if (!v142)
                          break;
                        v142 = (v142 - 1) >> 1;
                        v143 = &v8[4 * v142];
                        v149 = bswap64(*v143);
                        v150 = bswap64(v190.n128_u64[0]);
                        if (v149 != v150)
                          goto LABEL_279;
                        v149 = bswap64(v143[1]);
                        v150 = bswap64(v190.n128_u64[1]);
                        if (v149 == v150
                          && (v149 = bswap64(v143[2]), v150 = bswap64(v199.n128_u64[0]), v149 == v150)
                          && (v149 = bswap64(v143[3]), v150 = bswap64(v199.n128_u64[1]), v149 == v150))
                        {
                          v151 = 0;
                        }
                        else
                        {
LABEL_279:
                          v151 = v149 < v150 ? -1 : 1;
                        }
                        v133 = (unint64_t *)v147;
                      }
                      while (v151 < 0);
                      result = v190;
                      *v147 = v190;
                      v147[1] = v199;
                    }
                  }
                }
              }
            }
            while (v130-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[4 * (v10 >> 1)];
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v10 >> 1)], a1, (unint64_t *)(a2 - 32));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v10 >> 1)], (unint64_t *)(a2 - 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v12 - 4, (unint64_t *)(a2 - 64));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v11 + 4], (unint64_t *)(a2 - 96));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v12 - 4, v12, &a1[4 * v11 + 4]);
          v185 = *(__n128 *)a1;
          v194 = *((_OWORD *)a1 + 1);
          v13 = *((_OWORD *)v12 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *((_OWORD *)a1 + 1) = v13;
          *(__n128 *)v12 = v185;
          *((_OWORD *)v12 + 1) = v194;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = bswap64(*(a1 - 4));
          v15 = bswap64(*a1);
          if (v14 != v15)
            goto LABEL_14;
          v14 = bswap64(*(a1 - 3));
          v15 = bswap64(a1[1]);
          if (v14 == v15
            && (v14 = bswap64(*(a1 - 2)), v15 = bswap64(a1[2]), v14 == v15)
            && (v14 = bswap64(*(a1 - 1)), v15 = bswap64(a1[3]), v14 == v15))
          {
            v16 = 0;
          }
          else
          {
LABEL_14:
            v16 = v14 < v15 ? -1 : 1;
          }
          if ((v16 & 0x80000000) == 0)
          {
            v180 = *(__n128 *)a1;
            v183 = *((_OWORD *)a1 + 1);
            v49 = bswap64(*a1);
            v50 = bswap64(*(_QWORD *)(a2 - 32));
            if (v49 == v50
              && (v49 = bswap64(v180.n128_u64[1]), v50 = bswap64(*(_QWORD *)(a2 - 24)), v49 == v50)
              && (v49 = bswap64(v183), v50 = bswap64(*(_QWORD *)(a2 - 16)), v49 == v50)
              && (v49 = bswap64(*((unint64_t *)&v183 + 1)), v50 = bswap64(*(_QWORD *)(a2 - 8)), v49 == v50))
            {
              v51 = 0;
            }
            else if (v49 < v50)
            {
              v51 = -1;
            }
            else
            {
              v51 = 1;
            }
            if (v51 < 0)
            {
              v56 = a1;
              v8 = a1;
              do
              {
                v57 = v8[4];
                v8 += 4;
                v58 = bswap64(v180.n128_u64[0]);
                v59 = bswap64(v57);
                if (v58 == v59
                  && (v58 = bswap64(v180.n128_u64[1]), v59 = bswap64(v56[5]), v58 == v59)
                  && (v58 = bswap64(v183), v59 = bswap64(v56[6]), v58 == v59)
                  && (v58 = bswap64(*((unint64_t *)&v183 + 1)), v59 = bswap64(v56[7]), v58 == v59))
                {
                  v60 = 0;
                }
                else if (v58 < v59)
                {
                  v60 = -1;
                }
                else
                {
                  v60 = 1;
                }
                v56 = v8;
              }
              while ((v60 & 0x80000000) == 0);
            }
            else
            {
              v52 = a1 + 4;
              do
              {
                v8 = v52;
                if ((unint64_t)v52 >= a2)
                  break;
                v53 = bswap64(v180.n128_u64[0]);
                v54 = bswap64(*v8);
                if (v53 != v54)
                  goto LABEL_99;
                v53 = bswap64(v180.n128_u64[1]);
                v54 = bswap64(v8[1]);
                if (v53 == v54
                  && (v53 = bswap64(v183), v54 = bswap64(v8[2]), v53 == v54)
                  && (v53 = bswap64(*((unint64_t *)&v183 + 1)), v54 = bswap64(v8[3]), v53 == v54))
                {
                  v55 = 0;
                }
                else
                {
LABEL_99:
                  v55 = v53 < v54 ? -1 : 1;
                }
                v52 = v8 + 4;
              }
              while ((v55 & 0x80000000) == 0);
            }
            v61 = (_OWORD *)a2;
            if ((unint64_t)v8 < a2)
            {
              v62 = (_OWORD *)a2;
              v61 = (_OWORD *)a2;
              do
              {
                v63 = *((_QWORD *)v61 - 4);
                v61 -= 2;
                v64 = bswap64(v180.n128_u64[0]);
                v65 = bswap64(v63);
                if (v64 == v65
                  && (v64 = bswap64(v180.n128_u64[1]), v65 = bswap64(*((_QWORD *)v62 - 3)), v64 == v65)
                  && (v64 = bswap64(v183), v65 = bswap64(*((_QWORD *)v62 - 2)), v64 == v65)
                  && (v64 = bswap64(*((unint64_t *)&v183 + 1)), v65 = bswap64(*((_QWORD *)v62 - 1)), v64 == v65))
                {
                  v66 = 0;
                }
                else if (v64 < v65)
                {
                  v66 = -1;
                }
                else
                {
                  v66 = 1;
                }
                v62 = v61;
              }
              while (v66 < 0);
            }
            while (v8 < (unint64_t *)v61)
            {
              v187 = *(__n128 *)v8;
              v196 = *((_OWORD *)v8 + 1);
              v67 = v61[1];
              *(_OWORD *)v8 = *v61;
              *((_OWORD *)v8 + 1) = v67;
              *v61 = v187;
              v61[1] = v196;
              v68 = v8;
              do
              {
                v69 = v8[4];
                v8 += 4;
                v70 = bswap64(v180.n128_u64[0]);
                v71 = bswap64(v69);
                if (v70 == v71
                  && (v70 = bswap64(v180.n128_u64[1]), v71 = bswap64(v68[5]), v70 == v71)
                  && (v70 = bswap64(v183), v71 = bswap64(v68[6]), v70 == v71)
                  && (v70 = bswap64(*((unint64_t *)&v183 + 1)), v71 = bswap64(v68[7]), v70 == v71))
                {
                  v72 = 0;
                }
                else if (v70 < v71)
                {
                  v72 = -1;
                }
                else
                {
                  v72 = 1;
                }
                v68 = v8;
              }
              while ((v72 & 0x80000000) == 0);
              v73 = v61;
              do
              {
                v74 = *((_QWORD *)v61 - 4);
                v61 -= 2;
                v75 = bswap64(v180.n128_u64[0]);
                v76 = bswap64(v74);
                if (v75 == v76
                  && (v75 = bswap64(v180.n128_u64[1]), v76 = bswap64(*((_QWORD *)v73 - 3)), v75 == v76)
                  && (v75 = bswap64(v183), v76 = bswap64(*((_QWORD *)v73 - 2)), v75 == v76)
                  && (v75 = bswap64(*((unint64_t *)&v183 + 1)), v76 = bswap64(*((_QWORD *)v73 - 1)), v75 == v76))
                {
                  v77 = 0;
                }
                else if (v75 < v76)
                {
                  v77 = -1;
                }
                else
                {
                  v77 = 1;
                }
                v73 = v61;
              }
              while (v77 < 0);
            }
            v78 = (__n128 *)(v8 - 4);
            if (v8 - 4 != a1)
            {
              v79 = *((_OWORD *)v8 - 1);
              *(__n128 *)a1 = *v78;
              *((_OWORD *)a1 + 1) = v79;
            }
            a4 = 0;
            result = v180;
            *v78 = v180;
            *((_OWORD *)v8 - 1) = v183;
            continue;
          }
        }
        v17 = 0;
        v179 = *(__n128 *)a1;
        v182 = *((_OWORD *)a1 + 1);
        do
        {
          v18 = &a1[v17];
          v19 = bswap64(a1[v17 + 4]);
          v20 = bswap64(v179.n128_u64[0]);
          if (v19 == v20
            && (v19 = bswap64(v18[5]), v20 = bswap64(v179.n128_u64[1]), v19 == v20)
            && (v19 = bswap64(v18[6]), v20 = bswap64(v182), v19 == v20)
            && (v19 = bswap64(v18[7]), v20 = bswap64(*((unint64_t *)&v182 + 1)), v19 == v20))
          {
            v21 = 0;
          }
          else if (v19 < v20)
          {
            v21 = -1;
          }
          else
          {
            v21 = 1;
          }
          v17 += 4;
        }
        while (v21 < 0);
        v22 = &a1[v17];
        v23 = a2;
        if (v17 == 4)
        {
          v28 = (_OWORD *)a2;
          while (v22 < (unint64_t *)v28)
          {
            v24 = v28 - 2;
            v29 = bswap64(*((_QWORD *)v28 - 4));
            v30 = bswap64(v179.n128_u64[0]);
            if (v29 == v30
              && (v29 = bswap64(*((_QWORD *)v28 - 3)), v30 = bswap64(v179.n128_u64[1]), v29 == v30)
              && (v29 = bswap64(*((_QWORD *)v28 - 2)), v30 = bswap64(v182), v29 == v30)
              && (v29 = bswap64(*((_QWORD *)v28 - 1)), v30 = bswap64(*((unint64_t *)&v182 + 1)), v29 == v30))
            {
              v31 = 0;
            }
            else if (v29 < v30)
            {
              v31 = -1;
            }
            else
            {
              v31 = 1;
            }
            v28 -= 2;
            if (v31 < 0)
              goto LABEL_52;
          }
          v24 = v28;
        }
        else
        {
          do
          {
            v24 = (_OWORD *)(v23 - 32);
            v25 = bswap64(*(_QWORD *)(v23 - 32));
            v26 = bswap64(v179.n128_u64[0]);
            if (v25 == v26
              && (v25 = bswap64(*(_QWORD *)(v23 - 24)), v26 = bswap64(v179.n128_u64[1]), v25 == v26)
              && (v25 = bswap64(*(_QWORD *)(v23 - 16)), v26 = bswap64(v182), v25 == v26)
              && (v25 = bswap64(*(_QWORD *)(v23 - 8)), v26 = bswap64(*((unint64_t *)&v182 + 1)), v25 == v26))
            {
              v27 = 0;
            }
            else if (v25 < v26)
            {
              v27 = -1;
            }
            else
            {
              v27 = 1;
            }
            v23 -= 32;
          }
          while ((v27 & 0x80000000) == 0);
        }
LABEL_52:
        if (v22 >= (unint64_t *)v24)
        {
          v45 = v22 - 4;
        }
        else
        {
          v32 = (unint64_t)v22;
          v33 = v24;
          do
          {
            v186 = *(_OWORD *)v32;
            v195 = *(_OWORD *)(v32 + 16);
            v34 = v33[1];
            *(_OWORD *)v32 = *v33;
            *(_OWORD *)(v32 + 16) = v34;
            *v33 = v186;
            v33[1] = v195;
            v35 = (unint64_t *)v32;
            do
            {
              v36 = *(_QWORD *)(v32 + 32);
              v32 += 32;
              v37 = bswap64(v36);
              v38 = bswap64(v179.n128_u64[0]);
              if (v37 == v38
                && (v37 = bswap64(v35[5]), v38 = bswap64(v179.n128_u64[1]), v37 == v38)
                && (v37 = bswap64(v35[6]), v38 = bswap64(v182), v37 == v38)
                && (v37 = bswap64(v35[7]), v38 = bswap64(*((unint64_t *)&v182 + 1)), v37 == v38))
              {
                v39 = 0;
              }
              else if (v37 < v38)
              {
                v39 = -1;
              }
              else
              {
                v39 = 1;
              }
              v35 = (unint64_t *)v32;
            }
            while (v39 < 0);
            v40 = v33;
            do
            {
              v41 = *((_QWORD *)v33 - 4);
              v33 -= 2;
              v42 = bswap64(v41);
              v43 = bswap64(v179.n128_u64[0]);
              if (v42 == v43
                && (v42 = bswap64(*((_QWORD *)v40 - 3)), v43 = bswap64(v179.n128_u64[1]), v42 == v43)
                && (v42 = bswap64(*((_QWORD *)v40 - 2)), v43 = bswap64(v182), v42 == v43)
                && (v42 = bswap64(*((_QWORD *)v40 - 1)), v43 = bswap64(*((unint64_t *)&v182 + 1)), v42 == v43))
              {
                v44 = 0;
              }
              else if (v42 < v43)
              {
                v44 = -1;
              }
              else
              {
                v44 = 1;
              }
              v40 = v33;
            }
            while ((v44 & 0x80000000) == 0);
          }
          while (v32 < (unint64_t)v33);
          v45 = (unint64_t *)(v32 - 32);
        }
        if (v45 != a1)
        {
          v46 = *((_OWORD *)v45 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v45;
          *((_OWORD *)a1 + 1) = v46;
        }
        *(__n128 *)v45 = v179;
        *((_OWORD *)v45 + 1) = v182;
        if (v22 < (unint64_t *)v24)
        {
LABEL_82:
          std::__introsort<std::_ClassicAlgPolicy,MTLLibraryBuilder::newLibraryWithFunctionArray(objc_object  {objcproto9MTLDevice}*,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSError **)::$_0 &,MTLUINT256_t *,false>(a1, v45, a3, a4 & 1);
          a4 = 0;
          v8 = v45 + 4;
          continue;
        }
        v47 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLLibraryBuilder::newLibraryWithFunctionArray(objc_object  {objcproto9MTLDevice}*,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSError **)::$_0 &,MTLUINT256_t *>(a1, v45);
        v8 = v45 + 4;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLLibraryBuilder::newLibraryWithFunctionArray(objc_object  {objcproto9MTLDevice}*,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSError **)::$_0 &,MTLUINT256_t *>(v45 + 4, (unint64_t *)a2))
        {
          if (v47)
            continue;
          goto LABEL_82;
        }
        a2 = (unint64_t)v45;
        if (!v47)
          goto LABEL_1;
        return result;
    }
  }
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *,0>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if (a5[2].n128_u32[0] > a4[2].n128_u32[0])
  {
    v11 = a4[1].n128_u64[0];
    result = *a4;
    v12 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v12;
    *a5 = result;
    a5[1].n128_u64[0] = v11;
    LODWORD(v11) = a4[1].n128_u32[2];
    a4[1].n128_u32[2] = a5[1].n128_u32[2];
    a5[1].n128_u32[2] = v11;
    LODWORD(v11) = a4[1].n128_u32[3];
    a4[1].n128_u32[3] = a5[1].n128_u32[3];
    a5[1].n128_u32[3] = v11;
    LODWORD(v11) = a4[2].n128_u32[0];
    a4[2].n128_u32[0] = a5[2].n128_u32[0];
    a5[2].n128_u32[0] = v11;
    if (a4[2].n128_u32[0] > a3[2].n128_u32[0])
    {
      v13 = a3[1].n128_u64[0];
      result = *a3;
      v14 = a4[1].n128_u64[0];
      *a3 = *a4;
      a3[1].n128_u64[0] = v14;
      *a4 = result;
      a4[1].n128_u64[0] = v13;
      LODWORD(v13) = a3[1].n128_u32[2];
      a3[1].n128_u32[2] = a4[1].n128_u32[2];
      a4[1].n128_u32[2] = v13;
      LODWORD(v13) = a3[1].n128_u32[3];
      a3[1].n128_u32[3] = a4[1].n128_u32[3];
      a4[1].n128_u32[3] = v13;
      LODWORD(v13) = a3[2].n128_u32[0];
      a3[2].n128_u32[0] = a4[2].n128_u32[0];
      a4[2].n128_u32[0] = v13;
      if (a3[2].n128_u32[0] > a2[2].n128_u32[0])
      {
        v15 = a2[1].n128_u64[0];
        result = *a2;
        v16 = a3[1].n128_u64[0];
        *a2 = *a3;
        a2[1].n128_u64[0] = v16;
        *a3 = result;
        a3[1].n128_u64[0] = v15;
        LODWORD(v15) = a2[1].n128_u32[2];
        a2[1].n128_u32[2] = a3[1].n128_u32[2];
        a3[1].n128_u32[2] = v15;
        LODWORD(v15) = a2[1].n128_u32[3];
        a2[1].n128_u32[3] = a3[1].n128_u32[3];
        a3[1].n128_u32[3] = v15;
        LODWORD(v15) = a2[2].n128_u32[0];
        a2[2].n128_u32[0] = a3[2].n128_u32[0];
        a3[2].n128_u32[0] = v15;
        if (a2[2].n128_u32[0] > a1[2].n128_u32[0])
        {
          v17 = a1[1].n128_u64[0];
          result = *a1;
          v18 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v18;
          *a2 = result;
          a2[1].n128_u64[0] = v17;
          LODWORD(v17) = a1[1].n128_u32[2];
          a1[1].n128_u32[2] = a2[1].n128_u32[2];
          a2[1].n128_u32[2] = v17;
          LODWORD(v17) = a1[1].n128_u32[3];
          a1[1].n128_u32[3] = a2[1].n128_u32[3];
          a2[1].n128_u32[3] = v17;
          LODWORD(v17) = a1[2].n128_u32[0];
          a1[2].n128_u32[0] = a2[2].n128_u32[0];
          a2[2].n128_u32[0] = v17;
        }
      }
    }
  }
  return result;
}

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(__int128 *result, __int128 *a2, __int128 *a3)
{
  int *v3;
  unsigned int v4;
  int *v5;
  unsigned int v6;
  int *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  int v26;

  v3 = (int *)(a2 + 2);
  v4 = *((_DWORD *)a2 + 8);
  v5 = (int *)(result + 2);
  v6 = *((_DWORD *)a3 + 8);
  if (v4 > *((_DWORD *)result + 8))
  {
    if (v6 <= v4)
    {
      v18 = *((_QWORD *)result + 2);
      v19 = *result;
      v20 = *((_QWORD *)a2 + 2);
      *result = *a2;
      *((_QWORD *)result + 2) = v20;
      *a2 = v19;
      *((_QWORD *)a2 + 2) = v18;
      LODWORD(v18) = *((_DWORD *)result + 6);
      *((_DWORD *)result + 6) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v18;
      v7 = (int *)a2 + 7;
      v21 = *((_DWORD *)result + 7);
      *((_DWORD *)result + 7) = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + 7) = v21;
      LODWORD(v18) = *((_DWORD *)result + 8);
      *((_DWORD *)result + 8) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + 8) = v18;
      if (*((_DWORD *)a3 + 8) <= v18)
        return result;
      v22 = *((_QWORD *)a2 + 2);
      v23 = *a2;
      v24 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v24;
      *a3 = v23;
      *((_QWORD *)a3 + 2) = v22;
      LODWORD(v22) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = v22;
      v11 = (int *)a3 + 7;
      v5 = (int *)(a2 + 2);
    }
    else
    {
      v7 = (int *)result + 7;
      v8 = *((_QWORD *)result + 2);
      v9 = *result;
      v10 = *((_QWORD *)a3 + 2);
      *result = *a3;
      *((_QWORD *)result + 2) = v10;
      *a3 = v9;
      *((_QWORD *)a3 + 2) = v8;
      LODWORD(v8) = *((_DWORD *)result + 6);
      *((_DWORD *)result + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = v8;
      v11 = (int *)a3 + 7;
    }
    v3 = (int *)(a3 + 2);
    goto LABEL_10;
  }
  if (v6 > v4)
  {
    v12 = *((_QWORD *)a2 + 2);
    v13 = *a2;
    v14 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v14;
    *a3 = v13;
    *((_QWORD *)a3 + 2) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = v12;
    v11 = (int *)a2 + 7;
    LODWORD(v12) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = *((_DWORD *)a3 + 7);
    *((_DWORD *)a3 + 7) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
    *((_DWORD *)a3 + 8) = v12;
    if (*((_DWORD *)a2 + 8) > *v5)
    {
      v15 = *((_QWORD *)result + 2);
      v16 = *result;
      v17 = *((_QWORD *)a2 + 2);
      *result = *a2;
      *((_QWORD *)result + 2) = v17;
      *a2 = v16;
      *((_QWORD *)a2 + 2) = v15;
      LODWORD(v15) = *((_DWORD *)result + 6);
      *((_DWORD *)result + 6) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v15;
      v7 = (int *)result + 7;
LABEL_10:
      v25 = *v7;
      *v7 = *v11;
      *v11 = v25;
      v26 = *v5;
      *v5 = *v3;
      *v3 = v26;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[15];

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 32))
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_QWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_QWORD *)(a2 - 24) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *,0>((__n128 *)a1, (__n128 *)(a1 + 40), (__n128 *)(a1 + 80), (__n128 *)(a1 + 120), (__n128 *)(a2 - 40));
      return 1;
    default:
      v9 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80));
      v10 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)(v10 + 32);
    if (v13 > *(_DWORD *)(v9 + 32))
    {
      v14 = *(_QWORD *)v10;
      *(_QWORD *)v20 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)&v20[7] = *(_QWORD *)(v10 + 15);
      v15 = *(_BYTE *)(v10 + 23);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)v10 = 0;
      v16 = *(_QWORD *)(v10 + 24);
      v17 = v11;
      while (1)
      {
        v18 = a1 + v17;
        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1 + v17 + 120, (__n128 *)(a1 + v17 + 80));
        *(_DWORD *)(a1 + v17 + 152) = *(_DWORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v13 <= *(_DWORD *)(v18 + 72))
        {
          v19 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
      *(_QWORD *)v19 = v14;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 15) = *(_QWORD *)&v20[7];
      *(_BYTE *)(v19 + 23) = v15;
      *(_QWORD *)(v19 + 24) = v16;
      *(_DWORD *)(v19 + 32) = v13;
      if (++v12 == 8)
        return v10 + 40 == a2;
    }
    v9 = v10;
    v11 += 40;
    v10 += 40;
    if (v10 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_DWORD *)(a4 + 32) > *(_DWORD *)(a3 + 32))
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 28);
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(a4 + 28);
    *(_DWORD *)(a4 + 28) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
    *(_DWORD *)(a4 + 32) = v9;
    if (*(_DWORD *)(a3 + 32) > *(_DWORD *)(a2 + 32))
    {
      v11 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v12 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
      *(_DWORD *)(a3 + 28) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      *(_DWORD *)(a3 + 32) = v11;
      if (*(_DWORD *)(a2 + 32) > *(_DWORD *)(a1 + 32))
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
        *(_DWORD *)(a2 + 28) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a2 + 32) = v13;
      }
    }
  }
  return result;
}

__n128 std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  result = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  *(__n128 *)a1 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  *(_DWORD *)(a1 + 24) = a2[1].n128_u32[2];
  *(_DWORD *)(a1 + 28) = a2[1].n128_u32[3];
  return result;
}

uint64_t std::vector<std::tuple<std::string,unsigned int,unsigned int>>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v12 = v5 - *a1;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[32 * v13];
    v16 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = v16;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *((_DWORD *)v15 + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)v15 + 7) = *((_DWORD *)a2 + 7);
    v17[2] = v15 + 32;
    std::vector<std::tuple<std::string,unsigned int,unsigned int>>::__swap_out_circular_buffer(a1, v17);
    v9 = a1[1];
    result = std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(v7 + 24) = *((_DWORD *)a2 + 6);
    *(_DWORD *)(v7 + 28) = *((_DWORD *)a2 + 7);
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_182692CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::string,unsigned int,unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      *(_DWORD *)(v8 - 4) = *(_DWORD *)(a3 - 4);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

void std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void *_MTLEncodeLinkingInfo(const void *a1, size_t a2, const void *a3, size_t a4, uint64_t a5, size_t *a6)
{
  uint64_t v12;
  size_t v13;
  _QWORD *v14;
  void *result;

  v12 = a2 + (((_BYTE)a2 - 1) & 7) + 40;
  v13 = v12 + a4;
  v14 = malloc_type_malloc(v12 + a4, 0xD0CBB0BAuLL);
  *(_QWORD *)a5 = v14;
  *v14 = 0x1464E4958;
  v14[1] = 40;
  v14[2] = a2;
  v14[3] = v12;
  v14[4] = a4;
  memcpy((void *)(*(_QWORD *)a5 + 40), a1, a2);
  result = memcpy((void *)(*(_QWORD *)a5 + v12), a3, a4);
  *a6 = v13;
  return result;
}

BOOL _MTLDecodeLinkingInfo(int *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a1;
  if (*a1 == 1179535704)
  {
    v6 = *((_QWORD *)a1 + 2);
    *a2 = *((_QWORD *)a1 + 1);
    *a3 = v6;
    v7 = *((_QWORD *)a1 + 4);
    *a4 = *((_QWORD *)a1 + 3);
    *a5 = v7;
  }
  return v5 == 1179535704;
}

BOOL MTLIOCommandList::isEmpty(MTLIOCommandList *this)
{
  return this->var3 == this->var2;
}

BOOL MTLIOCommandList::isComplete(MTLIOCommandList *this)
{
  _BOOL4 v1;

  v1 = this->var3 == this->var2 && this->var4 == 0;
  return this->var7 && v1;
}

BOOL MTLIOCommandList::isCommitted(MTLIOCommandList *this)
{
  return this->var7;
}

BOOL MTLIOCommandList::isBlocked(MTLIOCommandList *this)
{
  unint64_t var3;
  int v2;

  if (!this->var7)
    return 1;
  var3 = this->var3;
  v2 = *((_DWORD *)this->var0 + 38 * var3);
  if (v2 == 2)
    return !*((_BYTE *)this->var0 + 152 * var3 + 8);
  return (v2 == 3 || v2 == 4) && this->var4;
}

BOOL MTLIOCommandList::isCancelled(MTLIOCommandList *this)
{
  return this->var6 && this->var4 == 0;
}

BOOL MTLIOCommandList::isFailed(MTLIOCommandList *this)
{
  return this->var8 && this->var4 == 0;
}

void MTLIOCommandList::~MTLIOCommandList(MTLIOCommandList *this)
{
  id var12;

  var12 = this->var12;
  if (var12)
  {
    objc_msgSend(var12, "releaseAllObjectsAndReset");
    MTLResourceListRelease((_QWORD *)this->var12);
    this->var12 = 0;
  }
  free(this->var0);
}

__n128 MTLIOCommandList::addCommand(MTLIOCommandList *this, MTLIOCommand *a2)
{
  unint64_t var2;
  unint64_t var1;
  MTLIOCommand *var0;
  unint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  var1 = this->var1;
  var2 = this->var2;
  var0 = this->var0;
  if (var2 >= var1)
  {
    var0 = (MTLIOCommand *)malloc_type_realloc(var0, 2 * var1, 0xCD678FBCuLL);
    var2 = this->var2;
    v7 = 2 * this->var1;
    this->var0 = var0;
    this->var1 = v7;
  }
  this->var2 = var2 + 1;
  v8 = (char *)var0 + 152 * var2;
  v9 = *((_OWORD *)a2 + 1);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v9;
  v10 = *((_OWORD *)a2 + 2);
  v11 = *((_OWORD *)a2 + 3);
  v12 = *((_OWORD *)a2 + 5);
  *((_OWORD *)v8 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)v8 + 5) = v12;
  *((_OWORD *)v8 + 2) = v10;
  *((_OWORD *)v8 + 3) = v11;
  result = *((__n128 *)a2 + 6);
  v14 = *((_OWORD *)a2 + 7);
  v15 = *((_OWORD *)a2 + 8);
  *((_QWORD *)v8 + 18) = *((_QWORD *)a2 + 18);
  *((_OWORD *)v8 + 7) = v14;
  *((_OWORD *)v8 + 8) = v15;
  *((__n128 *)v8 + 6) = result;
  return result;
}

void MTLIOCommandList::cancel(MTLIOCommandList *this)
{
  os_unfair_lock_s *p_var5;

  p_var5 = &this->var5;
  os_unfair_lock_lock(&this->var5);
  this->var6 = 1;
  os_unfair_lock_unlock(p_var5);
}

void MTLIOCommandList::commit(MTLIOCommandList *this, _opaque_pthread_cond_t *a2)
{
  os_unfair_lock_s *p_var5;

  p_var5 = &this->var5;
  os_unfair_lock_lock(&this->var5);
  this->var7 = 1;
  os_unfair_lock_unlock(p_var5);
  if (a2)
    pthread_cond_broadcast(a2);
}

_DWORD *MTLIOCommandList::popCommand(MTLIOCommandList *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, void *a7)
{
  unint64_t var3;
  MTLIOCommand *var0;
  _DWORD *v15;
  BOOL v16;
  void *v17;
  os_unfair_lock_s *lock;

  *a4 = 0;
  *a3 = 0;
  *a2 = 0;
  *a5 = 0;
  *a6 = 0;
  lock = &a1->var5;
  os_unfair_lock_lock(&a1->var5);
  while (2)
  {
    if (a1->var6 && !a1->var4)
    {
      v15 = 0;
      *a6 = 1;
    }
    else
    {
      var3 = a1->var3;
      if (var3 == a1->var2)
      {
        v15 = 0;
        if (a1->var4)
          v16 = 1;
        else
          v16 = !a1->var7;
        if (!v16)
          *a3 = 1;
        *a4 = 1;
      }
      else if (MTLIOCommandList::isBlocked(a1))
      {
        v15 = 0;
        *a2 = 1;
      }
      else
      {
        if (!a1->var8 || a1->var4)
        {
          var0 = a1->var0;
          v15 = (_DWORD *)((char *)a1->var0 + 152 * var3);
          switch(*v15)
          {
            case 0:
              if (!*((_BYTE *)var0 + 152 * var3 + 89))
                goto LABEL_23;
              goto LABEL_21;
            case 1:
LABEL_21:
              if (!a1->var9)
              {
                v17 = (void *)objc_msgSend(a7, "commandBuffer");
                a1->var9 = v17;
                a1->var10 = (id)objc_msgSend(v17, "blitCommandEncoder");
                var3 = a1->var3;
              }
              goto LABEL_23;
            case 2:
            case 4:
              goto LABEL_10;
            case 3:
              objc_msgSend(*((id *)var0 + 19 * var3 + 1), "setSignaledValue:", *((_QWORD *)var0 + 19 * var3 + 2));
              var3 = a1->var3;
LABEL_10:
              a1->var3 = var3 + 1;
              continue;
            default:
LABEL_23:
              ++a1->var4;
              a1->var3 = var3 + 1;
              goto LABEL_24;
          }
        }
        v15 = 0;
        *a5 = 1;
      }
    }
    break;
  }
LABEL_24:
  os_unfair_lock_unlock(lock);
  return v15;
}

void MTLIOCommandList::completeIOCommand(MTLIOCommandList *this, MTLIOCommand *a2, _opaque_pthread_cond_t *a3, _opaque_pthread_mutex_t *a4, char a5)
{
  os_unfair_lock_s *p_var5;
  _BOOL4 isBlocked;
  unsigned int v11;
  int v14;
  BOOL v15;
  id var9;
  id var12;
  id v18;

  p_var5 = &this->var5;
  os_unfair_lock_lock(&this->var5);
  if ((a5 & 1) == 0)
    this->var8 = 1;
  isBlocked = MTLIOCommandList::isBlocked(this);
  v11 = this->var4 - 1;
  this->var4 = v11;
  v14 = this->var3 == this->var2 && this->var7 && v11 == 0 || isBlocked;
  if (v11)
    v15 = 1;
  else
    v15 = v14 == 0;
  if (v15)
    goto LABEL_27;
  var9 = this->var9;
  if (!var9)
    goto LABEL_27;
  objc_msgSend(var9, "globalTraceObjectID");
  var12 = this->var12;
  if (var12)
  {
    objc_msgSend(var12, "releaseAllObjectsAndReset");
    MTLResourceListRelease((_QWORD *)this->var12);
    this->var12 = 0;
  }
  objc_msgSend(this->var10, "endEncoding");
  if (MTLTraceEnabled())
    kdebug_trace();
  objc_msgSend(this->var9, "commit");
  this->var4 = 1;
  v18 = this->var9;
  this->var9 = 0;
  this->var10 = 0;
  os_unfair_lock_unlock(p_var5);
  if (v18)
  {
    objc_msgSend(v18, "waitUntilCompleted");
    os_unfair_lock_lock(p_var5);
    if (objc_msgSend(v18, "status") != 4)
      this->var8 = 1;
    if (MTLTraceEnabled())
      kdebug_trace();
    this->var4 = 0;
LABEL_27:
    os_unfair_lock_unlock(p_var5);
  }
  if (!v11)
  {
    pthread_mutex_lock(a4);
    pthread_cond_broadcast(a3);
    pthread_mutex_unlock(a4);
  }
}

uint64_t MTLIOCommandList::completeEventWait(MTLIOCommandList *this, MTLIOCommand *a2, _opaque_pthread_cond_t *a3, _opaque_pthread_mutex_t *a4)
{
  *((_BYTE *)a2 + 8) = 1;
  pthread_mutex_lock(a4);
  pthread_cond_broadcast(a3);
  return pthread_mutex_unlock(a4);
}

id MTLIOCommandList::getBlitCommandEncoder(MTLIOCommandList *this)
{
  return this->var10;
}

void MTLIOCommandList::MTLIOCommandList(MTLIOCommandList *this, MTLResourceListPool *a2)
{
  this->var0 = (MTLIOCommand *)malloc_type_malloc(0x980000uLL, 0x1082040126CB6D8uLL);
  this->var1 = 0x10000;
  this->var3 = 0;
  *(_QWORD *)&this->var4 = 0;
  this->var2 = 0;
  *(uint32_t *)((char *)&this->var5._os_unfair_lock_opaque + 3) = 0;
  this->var9 = 0;
  this->var10 = 0;
  this->var11 = a2;
  this->var12 = 0;
}

void sub_182693C54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10A0C402173A0FFLL);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

char *std::vector<objc_object  {objcproto18MTLIOScratchBuffer}*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<objc_object  {objcproto18MTLIOScratchBuffer}*>,objc_object  {objcproto18MTLIOScratchBuffer}*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<objc_object  {objcproto18MTLIOScratchBuffer}*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1826952C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<objc_object  {objcproto18MTLIOScratchBuffer}*>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t tileColorAttachmentFormattedDescription(uint64_t a1, MTLTileRenderPipelineColorAttachmentDescriptor *a2)
{
  MTLTileRenderPipelineColorAttachmentDescriptor *v2;
  _QWORD v4[4];

  v4[3] = *MEMORY[0x1E0C80C00];
  if (a2)
    v2 = a2 + 1;
  else
    v2 = 0;
  v4[0] = objc_msgSend(CFSTR("\n"), "stringByPaddingToLength:withString:startingAtIndex:", a1 + 4, CFSTR(" "), 0);
  v4[1] = CFSTR("pixelFormat =");
  v4[2] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", MTLPixelFormatGetName(LODWORD(v2->super.isa)), v4[0], CFSTR("pixelFormat ="));
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 3), "componentsJoinedByString:", CFSTR(" "));
}

uint64_t _MTLDebugIgnorePrecompiledBinaries(void)
{
  if (_MTLDebugIgnorePrecompiledBinaries(void)::onceToken != -1)
    dispatch_once(&_MTLDebugIgnorePrecompiledBinaries(void)::onceToken, &__block_literal_global);
  return _MTLDebugIgnorePrecompiledBinaries(void)::ignorePrecompiledBinaries;
}

uint64_t _MTLDebugShouldLogKeys(void)
{
  if (_MTLDebugShouldLogKeys(void)::onceToken != -1)
    dispatch_once(&_MTLDebugShouldLogKeys(void)::onceToken, &__block_literal_global_9);
  return _MTLDebugShouldLogKeys(void)::shouldLogHashKeys;
}

uint64_t ___Z22_MTLDebugShouldLogKeysv_block_invoke()
{
  uint64_t result;
  char *v1;
  BOOL v2;

  result = _MTLIsInternalBuild();
  if ((_DWORD)result)
  {
    v1 = getenv("MTL_DEBUG_LOG_FUNCTIONID_KEYS");
    if (!v1)
      v1 = "0";
    result = strtol(v1, 0, 0);
    v2 = result != 0;
  }
  else
  {
    v2 = 0;
  }
  _MTLDebugShouldLogKeys(void)::shouldLogHashKeys = v2;
  return result;
}

BOOL MultiLevelCacheBase::failOnCacheMiss(MultiLevelCacheBase *this)
{
  return (*((_BYTE *)this + 32) & 5) != 0;
}

uint64_t MultiLevelCacheBase::addElement(MultiLevelCacheBase *this, const MTLHashKey *a2, const void *a3)
{
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 3);
  v4 = *(_OWORD *)&a2->var1.var0[16];
  v6[0] = *(_OWORD *)a2->var1.var0;
  v6[1] = v4;
  return (*(uint64_t (**)(uint64_t, _OWORD *, const void *))(*(_QWORD *)v3 + 40))(v3, v6, a3);
}

uint64_t MultiLevelCacheBase::addElement(MultiLevelCacheBase *this, MTLBinaryKey *a2, const void *a3, uint64_t a4)
{
  uint64_t v6;
  const $2772B1D07D29A72E8557B2574C0AE5C1 *v7;
  __int128 v8;
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 3);
  v7 = -[MTLBinaryKey value](a2, "value");
  v8 = *(_OWORD *)&v7->var0[16];
  v10[0] = *(_OWORD *)v7->var0;
  v10[1] = v8;
  return (*(uint64_t (**)(uint64_t, _OWORD *, const void *, uint64_t))(*(_QWORD *)v6 + 40))(v6, v10, a3, a4);
}

uint64_t MultiLevelCacheBase::addElement(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 24);
  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 40))(v2, v5);
}

BOOL MultiLevelBinaryCache::initialize(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v10;

  if (_MTLDebugIgnorePrecompiledBinaries(void)::onceToken != -1)
    dispatch_once(&_MTLDebugIgnorePrecompiledBinaries(void)::onceToken, &__block_literal_global);
  if (_MTLDebugIgnorePrecompiledBinaries(void)::ignorePrecompiledBinaries)
    v10 = 0;
  else
    v10 = a2;
  *(_QWORD *)(a1 + 40) = v10;
  if (_MTLDebugShouldLogKeys(void)::onceToken != -1)
    dispatch_once(&_MTLDebugShouldLogKeys(void)::onceToken, &__block_literal_global_9);
  *(_BYTE *)(a1 + 48) = _MTLDebugShouldLogKeys(void)::shouldLogHashKeys;
  return MultiLevelCacheBase::initialize(a1, a3, a4, a5);
}

uint64_t MultiLevelBinaryCache::failOnBinaryArchiveMiss(MultiLevelBinaryCache *this)
{
  return (*((unsigned __int8 *)this + 32) >> 1) & 1;
}

BOOL MultiLevelBinaryCache::failOnCacheMiss(MultiLevelBinaryCache *this)
{
  return (*((_BYTE *)this + 32) & 7) != 0;
}

BOOL MultiLevelBinaryCache::getElement(uint64_t a1, void *a2, dispatch_object_t *a3, dispatch_object_t *a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;

  if (*(_BYTE *)(a1 + 48))
    NSLog(CFSTR("Looking for functionId: %@"), objc_msgSend(a2, "description"));
  v10 = 0;
  while (1)
  {
    v11 = v10;
    v12 = objc_msgSend(*(id *)(a1 + 40), "count");
    if (v11 >= v12)
      break;
    if (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", v11), "supportsAIRNT"))v13 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", v11), "getBinaryDataForKey:reflectionType:", a2, a5);
    else
      v13 = 0;
    v10 = v11 + 1;
    if (v13)
    {
      *a3 = (dispatch_object_t)objc_msgSend(v13, "data");
      *a4 = (dispatch_object_t)objc_msgSend(v13, "reflectionBlock");
      dispatch_retain(*a3);
      dispatch_retain(*a4);
      return v11 < v12;
    }
  }
  return v11 < v12;
}

uint64_t MultiLevelBinaryCache::getElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MTLBinaryKey *v9;
  uint64_t v10;

  v9 = -[MTLBinaryKey initWithHash:]([MTLBinaryKey alloc], "initWithHash:", a2);
  v10 = (*(uint64_t (**)(uint64_t, MTLBinaryKey *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, v9, a3, a4, a5);

  return v10;
}

uint64_t MultiLevelBinaryCache::getElement(uint64_t a1, void *a2, dispatch_data_t *a3)
{
  unint64_t i;
  void *v7;
  NSObject *v8;

  if (*(_BYTE *)(a1 + 48))
    NSLog(CFSTR("Looking for functionId: %@"), objc_msgSend(a2, "description"));
  for (i = 0; i < objc_msgSend(*(id *)(a1 + 40), "count"); ++i)
  {
    if ((objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", i), "supportsAIRNT") & 1) != 0)
      v7 = 0;
    else
      v7 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", i), "getBinaryDataForKey:reflectionType:", a2, 0);
    if (v7)
    {
      v8 = objc_msgSend(v7, "data");
      *a3 = v8;
      dispatch_retain(v8);
      return 1;
    }
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) & 1) != 0)
    return 0;
  else
    return MultiLevelCacheBase::getElement((_QWORD *)a1, (_OWORD *)objc_msgSend(a2, "value"), a3);
}

uint64_t MultiLevelBinaryCache::getElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MTLBinaryKey *v5;
  uint64_t v6;

  v5 = -[MTLBinaryKey initWithHash:]([MTLBinaryKey alloc], "initWithHash:", a2);
  v6 = (*(uint64_t (**)(uint64_t, MTLBinaryKey *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v5, a3);

  return v6;
}

BOOL MultiLevelAirntBinaryCache::initialize(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  *(_QWORD *)(a1 + 56) = a3;
  return MultiLevelBinaryCache::initialize(a1, a2, a4, a5, a6);
}

BOOL MultiLevelAirntBinaryCache::getElementAtDestination(uint64_t a1, uint64_t a2, dispatch_object_t *a3, dispatch_object_t *a4, uint64_t a5)
{
  void *v7;
  void *v8;

  v7 = (void *)objc_msgSend(*(id *)(a1 + 56), "getBinaryDataForKey:reflectionType:", a2, a5);
  v8 = v7;
  if (v7)
  {
    *a3 = (dispatch_object_t)objc_msgSend(v7, "data");
    *a4 = (dispatch_object_t)objc_msgSend(v8, "reflectionBlock");
    dispatch_retain(*a3);
    dispatch_retain(*a4);
  }
  return v8 != 0;
}

uint64_t MultiLevelAirntBinaryCache::getElementAtDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MTLBinaryKey *v9;
  uint64_t v10;

  v9 = -[MTLBinaryKey initWithHash:]([MTLBinaryKey alloc], "initWithHash:", a2);
  v10 = (*(uint64_t (**)(uint64_t, MTLBinaryKey *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, v9, a3, a4, a5);

  return v10;
}

uint64_t MultiLevelAirntBinaryCache::addElement(id *this, MTLBinaryKey *a2, MTLBinaryEntry *a3)
{
  return objc_msgSend(this[7], "addBinaryEntryInternal:forKey:", a3, a2);
}

void MultiLevelAirntBinaryCache::addElement(MultiLevelAirntBinaryCache *this, const MTLHashKey *a2, MTLBinaryEntry *a3)
{
  MTLBinaryKey *v5;

  v5 = -[MTLBinaryKey initWithHash:]([MTLBinaryKey alloc], "initWithHash:", a2);
  (*(void (**)(MultiLevelAirntBinaryCache *, MTLBinaryKey *, MTLBinaryEntry *))(*(_QWORD *)this + 144))(this, v5, a3);

}

uint64_t MultiLevelAirntBinaryCache::newArchiverIdWithInsertion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(*(id *)(a1 + 56), "newArchiverIdWithBinaryKey:entry:srcArchiverId:functionType:", a2, a3, a4, a5);
}

uint64_t MultiLevelAirntBinaryCache::updateArchiverId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 56), "updatePipelineWithPipelineArchiverId:key:functionType:", a2, a3, a4);
}

BOOL MultiLevelBinaryFSCache::initialize(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  *(_QWORD *)(a1 + 40) = a2;
  if (_MTLDebugShouldLogKeys(void)::onceToken != -1)
    dispatch_once(&_MTLDebugShouldLogKeys(void)::onceToken, &__block_literal_global_9);
  *(_BYTE *)(a1 + 48) = _MTLDebugShouldLogKeys(void)::shouldLogHashKeys;
  return MultiLevelCacheBase::initialize(a1, a3, a4, a5);
}

void MultiLevelBinaryFSCache::addElement(MultiLevelBinaryFSCache *this, MTLBinaryKey *a2, MTLBinaryEntry *a3)
{
  NSObject *v5;
  const $2772B1D07D29A72E8557B2574C0AE5C1 *v6;
  uint64_t v7;
  __int128 v8;
  size_t v9;
  void *buffer_ptr;
  _OWORD v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  buffer_ptr = 0;
  v5 = dispatch_data_create_map((dispatch_data_t)-[MTLBinaryEntry data](a3, "data"), (const void **)&buffer_ptr, &v9);
  v6 = -[MTLBinaryKey value](a2, "value");
  v7 = *((_QWORD *)this + 3);
  v8 = *(_OWORD *)&v6->var0[16];
  v11[0] = *(_OWORD *)v6->var0;
  v11[1] = v8;
  (*(void (**)(uint64_t, _OWORD *, void *, size_t))(*(_QWORD *)v7 + 40))(v7, v11, buffer_ptr, v9);
  dispatch_release(v5);
}

void MultiLevelBinaryFSCache::addElement(MultiLevelBinaryFSCache *this, const MTLHashKey *a2, MTLBinaryEntry *a3)
{
  MTLBinaryKey *v5;

  v5 = -[MTLBinaryKey initWithHash:]([MTLBinaryKey alloc], "initWithHash:", a2);
  (*(void (**)(MultiLevelBinaryFSCache *, MTLBinaryKey *, MTLBinaryEntry *))(*(_QWORD *)this + 144))(this, v5, a3);

}

BOOL MultiLevelLegacyBinaryCache::initialize(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  *(_QWORD *)(a1 + 56) = a3;
  return MultiLevelBinaryCache::initialize(a1, a2, a4, a5, a6);
}

BOOL MultiLevelLegacyBinaryCache::getElementAtDestination(uint64_t a1, uint64_t a2, NSObject **a3)
{
  void *v4;
  void *v5;
  NSObject *v6;

  v4 = (void *)objc_msgSend(*(id *)(a1 + 56), "getBinaryDataForKey:reflectionType:", a2, 0);
  v5 = v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, "data");
    *a3 = v6;
    dispatch_retain(v6);
  }
  return v5 != 0;
}

uint64_t MultiLevelLegacyBinaryCache::getElementAtDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MTLBinaryKey *v5;
  uint64_t v6;

  v5 = -[MTLBinaryKey initWithHash:]([MTLBinaryKey alloc], "initWithHash:", a2);
  v6 = (*(uint64_t (**)(uint64_t, MTLBinaryKey *, uint64_t))(*(_QWORD *)a1 + 176))(a1, v5, a3);

  return v6;
}

void *MultiLevelLegacyBinaryCache::addElement(MultiLevelLegacyBinaryCache *this, MTLBinaryKey *a2, MTLBinaryEntry *a3)
{
  void *result;

  result = (void *)*((_QWORD *)this + 7);
  if (result)
    return (void *)objc_msgSend(result, "addBinaryEntryInternal:forKey:", a3, a2);
  return result;
}

void MultiLevelLegacyBinaryCache::addElement(MultiLevelLegacyBinaryCache *this, const MTLHashKey *a2, MTLBinaryEntry *a3)
{
  MTLBinaryKey *v5;

  v5 = -[MTLBinaryKey initWithHash:]([MTLBinaryKey alloc], "initWithHash:", a2);
  (*(void (**)(MultiLevelLegacyBinaryCache *, MTLBinaryKey *, MTLBinaryEntry *))(*(_QWORD *)this + 144))(this, v5, a3);

}

void MultiLevelLegacyBinaryCache::addElement(uint64_t a1, uint64_t a2, void *buffer, size_t size)
{
  NSObject *v6;
  MTLBinaryEntry *v7;
  __n128 v8;
  MTLHashKey v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = dispatch_data_create(buffer, size, 0, 0);
  v7 = -[MTLBinaryEntry initWithData:]([MTLBinaryEntry alloc], "initWithData:", v6);
  v8 = MTLHashKey::MTLHashKey((uint64_t)&v9, a2);
  (*(void (**)(uint64_t, MTLHashKey *, MTLBinaryEntry *, __n128))(*(_QWORD *)a1 + 152))(a1, &v9, v7, v8);
  MTLHashKey::~MTLHashKey(&v9);
  dispatch_release(v6);

}

void sub_182698D78(_Unwind_Exception *a1, MTLHashKey *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a10);
  _Unwind_Resume(a1);
}

uint64_t MultiLevelLegacyBinaryCache::addElement(MultiLevelLegacyBinaryCache *this, const MTLHashKey *a2, const void *a3)
{
  return (*(uint64_t (**)(MultiLevelLegacyBinaryCache *, $2772B1D07D29A72E8557B2574C0AE5C1 *, const void *))(*(_QWORD *)this + 72))(this, &a2->var1, a3);
}

BOOL MultiLevelAirCache::initialize(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  return MultiLevelCacheBase::initialize(a1, a4, a5, a6);
}

uint64_t MultiLevelAirCache::getElement(uint64_t a1, void *a2, uint64_t a3)
{
  __n128 v5;
  uint64_t v6;
  MTLHashKey v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = MTLHashKey::MTLHashKey((uint64_t)&v8, objc_msgSend(a2, "value"));
  v6 = (*(uint64_t (**)(uint64_t, MTLHashKey *, uint64_t, __n128))(*(_QWORD *)a1 + 96))(a1, &v8, a3, v5);
  MTLHashKey::~MTLHashKey(&v8);
  return v6;
}

void sub_182698E48(_Unwind_Exception *a1, MTLHashKey *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a10);
  _Unwind_Resume(a1);
}

uint64_t MultiLevelAirCache::getElement(uint64_t a1, uint64_t a2, dispatch_data_t *a3)
{
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;

  v5 = 0;
  v6 = (_OWORD *)(a2 + 24);
  while (v5 < objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    if ((objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", v5), "supportsAIRNT") & 1) != 0)
      v7 = 0;
    else
      v7 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", v5), "newArchiveDataForKeyInternal:", v6);
    ++v5;
    if (v7)
    {
      *a3 = (dispatch_data_t)v7;
      return 1;
    }
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) & 1) != 0)
    return 0;
  else
    return MultiLevelCacheBase::getElement((_QWORD *)a1, v6, a3);
}

void MultiLevelAirCache::addElement(MultiLevelAirCache *this, MTLBinaryKey *a2, MTLAirEntry *a3)
{
  void *v4;
  NSObject *v6;
  const $2772B1D07D29A72E8557B2574C0AE5C1 *v7;
  uint64_t v8;
  __int128 v9;
  size_t v10;
  void *buffer_ptr;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    objc_msgSend(v4, "addArchiveEntryInternal:forKey:", a3, -[MTLBinaryKey value](a2, "value"));
  }
  else
  {
    v10 = 0;
    buffer_ptr = 0;
    v6 = dispatch_data_create_map((dispatch_data_t)-[MTLAirEntry data](a3, "data"), (const void **)&buffer_ptr, &v10);
    v7 = -[MTLBinaryKey value](a2, "value");
    v8 = *((_QWORD *)this + 3);
    v9 = *(_OWORD *)&v7->var0[16];
    v12[0] = *(_OWORD *)v7->var0;
    v12[1] = v9;
    (*(void (**)(uint64_t, _OWORD *, void *, size_t))(*(_QWORD *)v8 + 40))(v8, v12, buffer_ptr, v10);
    dispatch_release(v6);
  }
}

void MultiLevelAirCache::addElement(MultiLevelAirCache *this, const MTLHashKey *a2, MTLAirEntry *a3)
{
  MTLBinaryKey *v5;

  v5 = -[MTLBinaryKey initWithHash:]([MTLBinaryKey alloc], "initWithHash:", a2);
  (*(void (**)(MultiLevelAirCache *, MTLBinaryKey *, MTLAirEntry *))(*(_QWORD *)this + 104))(this, v5, a3);

}

uint64_t MultiLevelAirCache::failOnBinaryArchiveMiss(MultiLevelAirCache *this)
{
  return (*((unsigned __int8 *)this + 32) >> 1) & 1;
}

BOOL MultiLevelAirCache::failOnCacheMiss(MultiLevelAirCache *this)
{
  return (*((_BYTE *)this + 32) & 7) != 0;
}

BOOL MultiLevelFunctionCache::initialize(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  a1[6] = a4;
  a1[7] = a2;
  a1[5] = a3;
  return MultiLevelCacheBase::initialize((uint64_t)a1, a5, a6, a7);
}

uint64_t MultiLevelFunctionCache::newFunctionWithKey(MultiLevelFunctionCache *this, MTLBinaryKey *a2)
{
  __n128 v3;
  uint64_t v4;
  MTLHashKey v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = MTLHashKey::MTLHashKey((uint64_t)&v6, (uint64_t)-[MTLBinaryKey value](a2, "value"));
  v4 = (*(uint64_t (**)(MultiLevelFunctionCache *, MTLHashKey *, _QWORD, __n128))(*(_QWORD *)this + 144))(this, &v6, 0, v3);
  MTLHashKey::~MTLHashKey(&v6);
  return v4;
}

void sub_18269913C(_Unwind_Exception *a1, MTLHashKey *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a10);
  _Unwind_Resume(a1);
}

uint64_t MultiLevelFunctionCache::newFunctionWithKey(MultiLevelFunctionCache *this, const MTLHashKey *a2, NSString *a3)
{
  $2772B1D07D29A72E8557B2574C0AE5C1 *p_var1;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _MTLLibrary *v12;
  uint64_t v13;
  dispatch_data_t v14;

  v14 = 0;
  p_var1 = &a2->var1;
  result = objc_msgSend(*((id *)this + 6), "newSpecializedFunctionWithHash:libraryPath:", &a2->var1, a3);
  if (!result)
  {
    if (objc_msgSend(*((id *)this + 5), "count"))
    {
      v7 = 0;
      while (1)
      {
        result = objc_msgSend((id)objc_msgSend(*((id *)this + 5), "objectAtIndexedSubscript:", v7), "newSpecializedFunctionWithHash:libraryPath:", p_var1, a3);
        if (result)
          break;
        if (++v7 >= (unint64_t)objc_msgSend(*((id *)this + 5), "count"))
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      if (((*(uint64_t (**)(MultiLevelFunctionCache *))(*(_QWORD *)this + 120))(this) & 1) != 0)
        return 0;
      MultiLevelCacheBase::getElement(this, p_var1, &v14);
      v11 = v14;
      if (!v14)
      {
        return 0;
      }
      else
      {
        v12 = MTLLibraryBuilder::newLibraryWithData(*(_MTLDevice ***)(*((_QWORD *)this + 7) + 424), *((_MTLDevice **)this + 7), v14, (uint64_t)a3, 0, v8, v9, v10);
        v13 = -[_MTLLibrary newFunctionWithName:](v12, "newFunctionWithName:", -[NSArray objectAtIndex:](-[_MTLLibrary functionNames](v12, "functionNames"), "objectAtIndex:", 0));

        dispatch_release(v11);
        return v13;
      }
    }
  }
  return result;
}

BOOL MultiLevelLibraryCache::initialize(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  a1[6] = a4;
  a1[7] = a2;
  a1[5] = a3;
  return MultiLevelCacheBase::initialize((uint64_t)a1, 0, a5, a6);
}

_MTLLibrary *MultiLevelLibraryCache::newStitchedLibraryWithKey(_QWORD *a1, uint64_t a2, uint64_t a3, MTLLibraryContainer **a4, char *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _MTLLibrary *v14;
  MTLLibraryBuilder *v15;
  __int128 *v16;
  uint64_t LibraryContainer;
  NSObject *v18;
  uint64_t v19;
  MTLLibraryData *v20;
  NSMutableDictionary *v21;
  dispatch_data_t v23;

  if (!objc_msgSend((id)a1[5], "count"))
  {
LABEL_5:
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1) & 1) != 0)
      return 0;
    v15 = *(MTLLibraryBuilder **)(a1[7] + 424);
    *a5 = 0;
    v16 = (__int128 *)(a2 + 24);
    LibraryContainer = MTLLibraryBuilder::findOrCreateLibraryContainer((uint64_t)v15, v16, a5);
    *a4 = (MTLLibraryContainer *)LibraryContainer;
    if (*a5)
    {
      v23 = 0;
      MultiLevelCacheBase::getElement(a1, v16, &v23);
      v18 = v23;
      if (!v23)
        return 0;
      v19 = (*(uint64_t (**)(uint64_t, dispatch_data_t))(a6 + 16))(a6, v23);
      if (!v19)
        return 0;
      v20 = (MTLLibraryData *)v19;
      if (a3)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 240))(v19, a3);
      v21 = (NSMutableDictionary *)objc_opt_new();
      MTLLibraryContainer::init(*a4, v20, v21, 0, 0);
      v14 = MTLLibraryContainer::newLibrary((uint64_t)*a4, a1[7]);

      (*(void (**)(MTLLibraryData *))(*(_QWORD *)v20 + 24))(v20);
      dispatch_release(v18);
    }
    else
    {
      dispatch_group_wait(*(dispatch_group_t *)(LibraryContainer + 80), 0xFFFFFFFFFFFFFFFFLL);
      v14 = MTLLibraryContainer::newLibrary((uint64_t)*a4, a1[7]);
      if (!v14)
        return v14;
    }
    MTLLibraryBuilder::releaseCacheEntry(v15, *a4);
    *a4 = 0;
    return v14;
  }
  v12 = 0;
  while (1)
  {
    v13 = objc_msgSend((id)objc_msgSend((id)a1[5], "objectAtIndexedSubscript:", v12), "newStitchedLibraryWithKey:descriptors:", a2 + 24, a3);
    if (v13)
      return (_MTLLibrary *)v13;
    if (++v12 >= (unint64_t)objc_msgSend((id)a1[5], "count"))
      goto LABEL_5;
  }
}

void MultiLevelLibraryCache::addStitchedLibraryWithKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  size_t v12;
  void *buffer_ptr;
  MTLHashKey v14;
  $2772B1D07D29A72E8557B2574C0AE5C1 var1;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = *(void **)(a1 + 48);
  if (v7)
  {
    objc_msgSend(v7, "addStitchedLibraryWithKey:descriptors:inputFunctions:library:", a2 + 24, a3, a4, a5);
  }
  else
  {
    v8 = objc_msgSend(a5, "libraryData");
    v12 = 0;
    buffer_ptr = 0;
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 128))(v8);
    v10 = dispatch_data_create_map(v9, (const void **)&buffer_ptr, &v12);
    MTLHashKey::MTLHashKey((uint64_t)&v14, a2 + 24);
    v11 = *(_QWORD *)(a1 + 24);
    var1 = v14.var1;
    (*(void (**)(uint64_t, $2772B1D07D29A72E8557B2574C0AE5C1 *, void *, size_t))(*(_QWORD *)v11 + 40))(v11, &var1, buffer_ptr, v12);
    MTLHashKey::~MTLHashKey(&v14);
    dispatch_release(v10);
  }
}

void sub_18269955C(_Unwind_Exception *a1, uint64_t a2, MTLHashKey *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a11);
  _Unwind_Resume(a1);
}

void MultiLevelCacheFactory::createBinaryCache(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, std::__shared_weak_count **a6@<X8>)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;

  if (a2)
  {
    if (objc_msgSend(a2, "supportsAIRNT"))
    {
      v12 = (std::__shared_weak_count *)operator new(0x58uLL);
      v12->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      v12->__shared_weak_owners_ = 0;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE20F0;
      v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE1158;
      v14 = v12 + 1;
      v12[1].__shared_weak_owners_ = 0;
      v12[2].__vftable = 0;
      v12[1].__shared_owners_ = 0;
      LODWORD(v12[2].__shared_owners_) = 0;
      v12[3].__shared_owners_ = (uint64_t)a2;
      if (!MultiLevelBinaryCache::initialize((uint64_t)&v12[1], a1, a3, a4, a5))
      {
        *a6 = 0;
        a6[1] = 0;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
LABEL_18:
        if (v15)
          return;
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        v19 = v12;
        goto LABEL_20;
      }
      goto LABEL_15;
    }
    if ((objc_msgSend(a2, "supportsAIRNT") & 1) == 0)
    {
      v12 = (std::__shared_weak_count *)operator new(0x58uLL);
      v12->__shared_owners_ = 0;
      v20 = (unint64_t *)&v12->__shared_owners_;
      v12->__shared_weak_owners_ = 0;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2128;
      v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE1250;
      v14 = v12 + 1;
      v12[1].__shared_weak_owners_ = 0;
      v12[2].__vftable = 0;
      v12[1].__shared_owners_ = 0;
      LODWORD(v12[2].__shared_owners_) = 0;
      v12[3].__shared_owners_ = (uint64_t)a2;
      if (!MultiLevelBinaryCache::initialize((uint64_t)&v12[1], a1, a3, a4, a5))
      {
        *a6 = 0;
        a6[1] = 0;
        do
          v15 = __ldaxr(v20);
        while (__stlxr(v15 - 1, v20));
        goto LABEL_18;
      }
LABEL_15:
      *a6 = v14;
      a6[1] = v12;
      return;
    }
  }
  v16 = (std::__shared_weak_count *)operator new(0x50uLL);
  v16->__shared_owners_ = 0;
  v17 = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2080;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE0C40;
  v16[1].__shared_weak_owners_ = 0;
  v16[2].__vftable = 0;
  v16[1].__shared_owners_ = 0;
  LODWORD(v16[2].__shared_owners_) = 0;
  if (MultiLevelBinaryFSCache::initialize((uint64_t)&v16[1], a1, a3, a4, a5))
  {
    *a6 = v16 + 1;
    a6[1] = v16;
    return;
  }
  *a6 = 0;
  a6[1] = 0;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    v19 = v16;
LABEL_20:
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_18269979C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MultiLevelCacheFactory::createAirCache(uint64_t a1@<X0>, std::__shared_weak_count_vtbl *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v12 = (std::__shared_weak_count *)operator new(0x50uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE1FD8;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE0618;
  v12[1].__shared_weak_owners_ = 0;
  v12[2].__vftable = 0;
  v12[1].__shared_owners_ = 0;
  LODWORD(v12[2].__shared_owners_) = 0;
  v12[2].__shared_weak_owners_ = a1;
  v12[3].__vftable = a2;
  if (MultiLevelCacheBase::initialize((uint64_t)&v12[1], a3, a4, a5))
  {
    *a6 = v12 + 1;
    a6[1] = v12;
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1826998DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MultiLevelCacheFactory::createFunctionCache(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__shared_weak_count_vtbl *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, _QWORD *a7@<X8>)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v14 = (std::__shared_weak_count *)operator new(0x58uLL);
  v14->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE20B8;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE0D10;
  v14[1].__shared_weak_owners_ = 0;
  v14[2].__vftable = 0;
  v14[1].__shared_owners_ = 0;
  LODWORD(v14[2].__shared_owners_) = 0;
  v14[3].__vftable = a3;
  v14[3].__shared_owners_ = a1;
  v14[2].__shared_weak_owners_ = a2;
  if (MultiLevelCacheBase::initialize((uint64_t)&v14[1], a4, a5, a6))
  {
    *a7 = v14 + 1;
    a7[1] = v14;
  }
  else
  {
    *a7 = 0;
    a7[1] = 0;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_182699A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MultiLevelCacheFactory::createLibraryCache(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__shared_weak_count_vtbl *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v12 = (std::__shared_weak_count *)operator new(0x58uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF380;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDEEB8;
  v12[1].__shared_weak_owners_ = 0;
  v12[2].__vftable = 0;
  v12[1].__shared_owners_ = 0;
  LODWORD(v12[2].__shared_owners_) = 0;
  v12[3].__vftable = a3;
  v12[3].__shared_owners_ = a1;
  v12[2].__shared_weak_owners_ = a2;
  if (MultiLevelCacheBase::initialize((uint64_t)&v12[1], 0, a4, a5))
  {
    *a6 = v12 + 1;
    a6[1] = v12;
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_182699B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MultiLevelCacheBase::~MultiLevelCacheBase(MultiLevelCacheBase *this)
{
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MultiLevelBinaryCache::newArchiverIdWithInsertion()
{
  return 0;
}

void MultiLevelBinaryFSCache::~MultiLevelBinaryFSCache(MultiLevelBinaryFSCache *this)
{
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MultiLevelBinaryFSCache::getElementAtDestination(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  *a3 = 0;
  *a4 = 0;
  return 0;
}

{
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t MultiLevelBinaryFSCache::getElementAtDestination(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  return 0;
}

{
  *a3 = 0;
  return 0;
}

void MultiLevelAirntBinaryCache::~MultiLevelAirntBinaryCache(MultiLevelAirntBinaryCache *this)
{
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MultiLevelAirntBinaryCache::getElementAtDestination(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  return 0;
}

{
  *a3 = 0;
  return 0;
}

void MultiLevelLegacyBinaryCache::~MultiLevelLegacyBinaryCache(MultiLevelLegacyBinaryCache *this)
{
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MultiLevelLegacyBinaryCache::getElementAtDestination(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  *a3 = 0;
  *a4 = 0;
  return 0;
}

{
  *a3 = 0;
  *a4 = 0;
  return 0;
}

void MultiLevelAirCache::~MultiLevelAirCache(MultiLevelAirCache *this)
{
  JUMPOUT(0x186DABFBCLL);
}

void MultiLevelFunctionCache::~MultiLevelFunctionCache(MultiLevelFunctionCache *this)
{
  JUMPOUT(0x186DABFBCLL);
}

void MultiLevelLibraryCache::~MultiLevelLibraryCache(MultiLevelLibraryCache *this)
{
  JUMPOUT(0x186DABFBCLL);
}

void std::__shared_ptr_emplace<MultiLevelAirntBinaryCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE20F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MultiLevelAirntBinaryCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE20F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__shared_ptr_emplace<MultiLevelAirntBinaryCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<MultiLevelLegacyBinaryCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MultiLevelLegacyBinaryCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__shared_ptr_emplace<MultiLevelLegacyBinaryCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<MultiLevelBinaryFSCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MultiLevelBinaryFSCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__shared_ptr_emplace<MultiLevelBinaryFSCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<MultiLevelAirCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE1FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MultiLevelAirCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE1FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__shared_ptr_emplace<MultiLevelAirCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<MultiLevelFunctionCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE20B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MultiLevelFunctionCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE20B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

void std::__shared_ptr_emplace<MultiLevelLibraryCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MultiLevelLibraryCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__shared_ptr_emplace<MultiLevelLibraryCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL MTLTraceEnabledSPI()
{
  IOAccelInitCommPage();
  return *(_DWORD *)*MEMORY[0x1E0D39EE0] != 0;
}

uint64_t MTLTraceEventSPI()
{
  uint64_t result;

  result = IOAccelInitCommPage();
  if (*(_DWORD *)*MEMORY[0x1E0D39EE0])
    return kdebug_trace();
  return result;
}

const __CFString *MTLGPUOperationString(unsigned int a1)
{
  if (a1 > 0xD)
    return CFSTR("<unknown>");
  else
    return off_1E0FE2778[a1];
}

uint64_t MTLStageInputOutputDescriptorDescription(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  _QWORD *v14;
  unint64_t v15;
  const __CFString *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t j;
  void *v21;
  uint64_t v22;
  const __CFString *v23;
  const __CFString *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[4];
  _QWORD v29[8];
  _QWORD v30[6];
  _QWORD v31[3];
  _QWORD v32[2];
  _QWORD v33[3];
  _QWORD v34[3];
  _QWORD v35[2];
  _QWORD v36[30];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = (_QWORD *)result;
    v27 = objc_msgSend(CFSTR("\n"), "stringByPaddingToLength:withString:startingAtIndex:", a2 + 4, CFSTR(" "), 0);
    v4 = objc_msgSend(CFSTR("\n"), "stringByPaddingToLength:withString:startingAtIndex:", a2 + 8, CFSTR(" "), 0);
    v5 = objc_msgSend(CFSTR("\n"), "stringByPaddingToLength:withString:startingAtIndex:", a2 + 12, CFSTR(" "), 0);
    v37 = 0;
    memset(v36, 0, sizeof(v36));
    v26 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 31);
    for (i = 0; i != 31; ++i)
    {
      v11 = *(_QWORD *)(v3[2] + 8 + 8 * i);
      if (v11 && *(_QWORD *)(v11 + 8))
      {
        v12 = *(_QWORD *)(v11 + 24);
        if (v12 >= 0x1F)
          MTLReleaseAssertionFailure((uint64_t)"MTLStageInputOutputDescriptorDescription", 1085, (uint64_t)"bufferIndex < MTL_MAX_VERTEX_BUFFERS", 0, v6, v7, v8, v9, v25);
        v13 = (void *)v36[v12];
        if (!v13)
        {
          v13 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 128);
          v36[v12] = v13;
          v35[0] = v27;
          v35[1] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Buffer %lu:"), v12);
          objc_msgSend(v13, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v35, 2));
          v14 = *(_QWORD **)(v3[1] + 8 + 8 * v12);
          if (v14)
          {
            v34[0] = v4;
            v34[1] = CFSTR("stepFunction =");
            v15 = v14[2];
            v16 = CFSTR("Unknown");
            if (v15 <= 8)
              v16 = off_1E0FE27E8[v15];
            v34[2] = v16;
            objc_msgSend(v13, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v34, 3));
            if (v14[2])
            {
              v33[0] = v4;
              v33[1] = CFSTR("stepRate =");
              v33[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v14[3]);
              objc_msgSend(v13, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 3));
            }
            if (objc_msgSend(v14, "isStrideDynamic"))
            {
              v32[0] = v4;
              v32[1] = CFSTR("stride = dynamic");
              v17 = (void *)MEMORY[0x1E0C99D20];
              v18 = v32;
              v19 = 2;
            }
            else
            {
              v31[0] = v4;
              v31[1] = CFSTR("stride =");
              v31[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v14[1]);
              v17 = (void *)MEMORY[0x1E0C99D20];
              v18 = v31;
              v19 = 3;
            }
          }
          else
          {
            v30[0] = v4;
            v30[1] = CFSTR("stepFunction =");
            v30[2] = CFSTR("MTLStepFunctionPerVertex");
            v30[3] = v4;
            v30[4] = CFSTR("stride =");
            v30[5] = &unk_1E103B210;
            v17 = (void *)MEMORY[0x1E0C99D20];
            v18 = v30;
            v19 = 6;
          }
          objc_msgSend(v13, "addObjectsFromArray:", objc_msgSend(v17, "arrayWithObjects:count:", v18, v19));
        }
        v29[0] = v4;
        v29[1] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Attribute %u:"), i);
        v29[2] = v5;
        v29[3] = CFSTR("offset =");
        v29[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(v11 + 16));
        v29[5] = v5;
        v29[6] = CFSTR("format =");
        v29[7] = MTLAttributeFormatString(*(MTLAttributeFormat *)(v11 + 8));
        objc_msgSend(v13, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 8));
      }
    }
    for (j = 0; j != 31; ++j)
    {
      v21 = (void *)v36[j];
      if (v21)
        objc_msgSend(v26, "addObject:", objc_msgSend(v21, "componentsJoinedByString:", CFSTR(" ")));
    }
    v28[0] = v27;
    v22 = v3[4];
    v23 = CFSTR("MTLIndexTypeUInt32");
    if (v22 != 1)
      v23 = CFSTR("Unknown");
    if (v22)
      v24 = v23;
    else
      v24 = CFSTR("MTLIndexTypeUInt16");
    v28[1] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("IndexType: %@"), v24);
    v28[2] = v27;
    v28[3] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("IndexBufferIndex: %lu"), v3[3]);
    objc_msgSend(v26, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v28, 4));
    return objc_msgSend(v26, "componentsJoinedByString:", CFSTR(" "));
  }
  return result;
}

void validateFunctionStepRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((unint64_t)(a1 - 5) >= 4)
  {
    if (a1)
    {
      _MTLMessageContextPush_(a3, 4, (uint64_t)CFSTR("invalid stepFunction value"), a4, a5, a6, a7, a8, a9);
    }
    else if (a2)
    {
      _MTLMessageContextPush_(a3, 4, (uint64_t)CFSTR("stepRate(%lu) must be zero if stepFunction is MTLStepFunctionConstant."), a4, a5, a6, a7, a8, a2);
    }
  }
  else if (!a2)
  {
    _MTLMessageContextPush_(a3, 4, (uint64_t)CFSTR("stepRate(%lu) cannot be zero if stepFunction is %@."), a4, a5, a6, a7, a8, 0);
  }
}

uint64_t compilerErrorWithMessage(NSString *a1, ...)
{
  id v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  v1 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", a1, va);
  v2 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v1, *MEMORY[0x1E0CB2D50]);
  return objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CompilerError"), 2, v2);
}

const __CFString *MTLIndexTypeString(MTLIndexType a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unknown");
  if (a1 == MTLIndexTypeUInt32)
    v1 = CFSTR("MTLIndexTypeUInt32");
  if (a1)
    return v1;
  else
    return CFSTR("MTLIndexTypeUInt16");
}

MTLSerializer::ObjectListSerializer *MTLSerializer::ObjectListSerializer::ObjectListSerializer(MTLSerializer::ObjectListSerializer *this, unsigned int a2)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 5) = 8;
  *(_QWORD *)this = off_1E0FE1718;
  std::vector<MTLSerializer::ObjectSerializer *>::vector((_QWORD *)this + 6, a2);
  *((_QWORD *)this + 5) = 4;
  return this;
}

void sub_18269C574(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = &off_1E0FE16C8;
  v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLSerializer::ObjectListSerializer::writeToMemory(const void **this, char *__dst, uint64_t a3)
{
  uint64_t result;
  _BYTE *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  memcpy(__dst, this[1], (_BYTE *)this[2] - (_BYTE *)this[1]);
  result = (_BYTE *)this[2] - (_BYTE *)this[1];
  v8 = this[6];
  v7 = this[7];
  if (v7 != (_BYTE *)v8)
  {
    v9 = 0;
    do
    {
      v10 = (_QWORD *)v8[v9];
      if (v10)
      {
        v11 = v10[5];
        v12 = (v11 - 1) & result;
        v13 = v11 + result - v12;
        if (v12)
          v14 = v13;
        else
          v14 = result;
        bzero(&__dst[result], v14 - result);
        result = v14 + (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*v10 + 16))(v10, &__dst[v14], a3 - v14);
        v8 = this[6];
        v7 = this[7];
      }
      ++v9;
    }
    while (v9 < (v7 - (_BYTE *)v8) >> 3);
  }
  return result;
}

uint64_t MTLSerializer::ObjectSerializer::writeToMemory(const void **this, char *__dst)
{
  memcpy(__dst, this[1], (_BYTE *)this[2] - (_BYTE *)this[1]);
  return (_BYTE *)this[2] - (_BYTE *)this[1];
}

MTLSerializer::ObjectListSerializer *MTLSerializer::ObjectListSerializer::FinalizeInternal(MTLSerializer::ObjectListSerializer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  if (v3 != v4)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v4 + 8 * v5);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 40);
        if (((v7 - 1) & v2) != 0)
          v8 = v7 + v2 - ((v7 - 1) & v2);
        else
          v8 = v2;
        (*(void (**)(MTLSerializer::ObjectListSerializer *, unint64_t, uint64_t))(*(_QWORD *)this + 24))(this, v5, v8);
        v9 = *(_QWORD *)(v6 + 32);
        if (v7 > *((_QWORD *)this + 5))
          *((_QWORD *)this + 5) = v7;
        v2 = v8 + v9;
        v4 = *((_QWORD *)this + 6);
        v3 = *((_QWORD *)this + 7);
      }
      ++v5;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  *((_QWORD *)this + 4) = v2;
  return this;
}

MTLSerializer::DirectObjectListSerializer *MTLSerializer::DirectObjectListSerializer::DirectObjectListSerializer(MTLSerializer::DirectObjectListSerializer *this, unsigned int a2)
{
  MTLSerializer::ObjectListSerializer *v4;
  std::vector<char> *v5;
  unint64_t v6;
  _DWORD *begin;
  unint64_t v8;

  v4 = MTLSerializer::ObjectListSerializer::ObjectListSerializer(this, a2);
  *(_QWORD *)v4 = &off_1E0FE17A8;
  v5 = (std::vector<char> *)((char *)v4 + 8);
  std::vector<unsigned char>::reserve((std::vector<char> *)((char *)v4 + 8), 8 * a2 + 4 * (a2 + 1));
  v6 = 4 * (a2 + 1);
  begin = (_DWORD *)*((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 2) - (_QWORD)begin;
  if (v6 <= v8)
  {
    if (v6 < v8)
      *((_QWORD *)this + 2) = &begin[v6 / 4];
  }
  else
  {
    std::vector<unsigned char>::__append(v5, v6 - v8);
    begin = v5->__begin_;
  }
  *begin = a2;
  bzero(begin + 1, 4 * a2);
  return this;
}

void sub_18269C7D8(_Unwind_Exception *a1)
{
  MTLSerializer::ObjectListSerializer *v1;

  MTLSerializer::ObjectListSerializer::~ObjectListSerializer(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::reserve(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer begin;
  std::vector<char>::pointer end;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;

  begin = this->__begin_;
  if (this->__end_cap_.__value_ - this->__begin_ < __n)
  {
    if ((__n & 0x8000000000000000) != 0)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    end = this->__end_;
    v6 = (char *)operator new(__n);
    v7 = &v6[end - begin];
    v8 = v7;
    if (end != begin)
    {
      v9 = &end[~(unint64_t)begin];
      do
      {
        v10 = *--end;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (end != begin);
      v8 = v6;
    }
    this->__begin_ = v8;
    this->__end_ = v7;
    this->__end_cap_.__value_ = &v6[__n];
    if (begin)
      operator delete(begin);
  }
}

void MTLSerializer::ObjectListSerializer::~ObjectListSerializer(MTLSerializer::ObjectListSerializer *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E0FE1718;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E0FE16C8;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

MTLPipelineLibrarySerializer::FunctionDescriptor *MTLPipelineLibrarySerializer::FunctionDescriptor::FunctionDescriptor(MTLPipelineLibrarySerializer::FunctionDescriptor *this, MTLLibraryData *a2, NSString *a3, MTLFunctionType a4, uint64_t a5)
{
  uint64_t v9;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = a2;
  if (a2)
    (*(void (**)(MTLLibraryData *))(*(_QWORD *)a2 + 16))(a2);
  v9 = -[NSString copy](a3, "copy");
  *((_QWORD *)this + 2) = a5;
  *((_QWORD *)this + 3) = a4;
  *((_QWORD *)this + 1) = v9;
  return this;
}

void MTLPipelineLibrarySerializer::FunctionDescriptor::~FunctionDescriptor(id *this)
{

  if (*this)
    (*(void (**)(id))(*(_QWORD *)*this + 24))(*this);
}

MTLPipelineLibrarySerializer::PipelineLibrarySerializer *MTLPipelineLibrarySerializer::PipelineLibrarySerializer::PipelineLibrarySerializer(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this)
{
  *(_QWORD *)this = &off_1E0FE1948;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 2) = 0;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;

  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;

  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;

  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;

  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;

  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  return this;
}

void MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer(id *this)
{
  *this = &off_1E0FE1948;

}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::addLibrary(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::addSpecializedFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  id obj;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *__p;
  uint64_t *v60;
  char *v61;
  _BYTE v62[128];
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v49 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, const char *))(*(_QWORD *)v49 + 64))(v49, "MTLFunction");
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 72))(v49, *(_QWORD *)(a2 + 48));
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v49 + 24))(v49, 0, v4);
  v5 = *(void **)(a2 + 32);
  if (v5)
  {
    v48 = a2;
    __p = 0;
    v60 = 0;
    v61 = 0;
    v6 = (void *)objc_msgSend(v5, "newNamedConstantArray");
    obj = (id)objc_msgSend(v5, "newIndexedConstantArray");
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v55, v63, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v56;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v56 != v8)
            objc_enumerationMutation(v6);
          v10 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
          v11 = *(void **)(a1 + 80);
          if (!v11)
          {
            v11 = (void *)objc_opt_new();
            *(_QWORD *)(a1 + 80) = v11;
          }
          v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
          if (objc_msgSend(v10, "name"))
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 1, objc_msgSend(v10, "name"));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, 2, objc_msgSend(v10, "dataType"), objc_msgSend(v11, "dataType"));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, 3, objc_msgSend(v10, "dataType"), objc_msgSend(v10, "data"));
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
          v14 = v13;
          v15 = v60;
          if (v60 >= (uint64_t *)v61)
          {
            v17 = ((char *)v60 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v17 + 1) >> 61)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v18 = (v61 - (_BYTE *)__p) >> 2;
            if (v18 <= v17 + 1)
              v18 = v17 + 1;
            if ((unint64_t)(v61 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v61, v19);
            else
              v20 = 0;
            v21 = (uint64_t *)&v20[8 * v17];
            *v21 = v14;
            v16 = v21 + 1;
            v23 = (char *)__p;
            v22 = (char *)v60;
            if (v60 != __p)
            {
              do
              {
                v24 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *--v21 = v24;
              }
              while (v22 != v23);
              v22 = (char *)__p;
            }
            __p = v21;
            v60 = v16;
            v61 = &v20[8 * v19];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v60 = v13;
            v16 = v15 + 1;
          }
          v60 = v16;
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v55, v63, 16);
      }
      while (v7);
    }

    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v62, 16);
    if (v25)
    {
      v26 = *(_QWORD *)v52;
      do
      {
        for (j = 0; j != v25; ++j)
        {
          if (*(_QWORD *)v52 != v26)
            objc_enumerationMutation(obj);
          v28 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * j);
          v29 = *(void **)(a1 + 88);
          if (!v29)
          {
            v29 = (void *)objc_opt_new();
            *(_QWORD *)(a1 + 88) = v29;
          }
          v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v30 + 32))(v30, 0, objc_msgSend(v28, "index"), objc_msgSend(v29, "index"));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 32))(v30, 2, objc_msgSend(v28, "dataType"), objc_msgSend(v29, "dataType"));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 48))(v30, 3, objc_msgSend(v28, "dataType"), objc_msgSend(v28, "data"));
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 56))(v30);
          v32 = v31;
          v33 = v60;
          if (v60 >= (uint64_t *)v61)
          {
            v35 = ((char *)v60 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v35 + 1) >> 61)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v36 = (v61 - (_BYTE *)__p) >> 2;
            if (v36 <= v35 + 1)
              v36 = v35 + 1;
            if ((unint64_t)(v61 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v37 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v37 = v36;
            if (v37)
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v61, v37);
            else
              v38 = 0;
            v39 = (uint64_t *)&v38[8 * v35];
            *v39 = v32;
            v34 = v39 + 1;
            v41 = (char *)__p;
            v40 = (char *)v60;
            if (v60 != __p)
            {
              do
              {
                v42 = *((_QWORD *)v40 - 1);
                v40 -= 8;
                *--v39 = v42;
              }
              while (v40 != v41);
              v40 = (char *)__p;
            }
            __p = v39;
            v60 = v34;
            v61 = &v38[8 * v37];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *v60 = v31;
            v34 = v33 + 1;
          }
          v60 = v34;
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
        v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v62, 16);
      }
      while (v25);
    }

    v43 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8), &__p);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 24))(v49, 1, v43);
    a2 = v48;
    if (__p)
    {
      v60 = (uint64_t *)__p;
      operator delete(__p);
    }
  }
  v44 = *(_QWORD *)(a1 + 8);
  v45 = objc_msgSend(*(id *)(a2 + 48), "UTF8String");
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 56))(v49);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 168))(v44, v45, v46);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
}

void sub_18269D0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeStageInputOuputDescriptor(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, MTLStageInputOutputDescriptor *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  MTLBufferLayoutDescriptor *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t *v59;
  uint64_t *v60;
  void *__p;
  char *v62;
  char *v63;
  void *v64;
  uint64_t *v65;
  uint64_t *v66;

  v4 = *((_QWORD *)this + 4);
  if (!v4)
  {
    v4 = objc_opt_new();
    *((_QWORD *)this + 4) = v4;
  }
  v56 = (void *)v4;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  v6 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v57 = v5;
  __p = 0;
  v62 = 0;
  v63 = 0;
  do
  {
    v7 = (void *)*((_QWORD *)this + 5);
    if (!v7)
    {
      v7 = (void *)objc_opt_new();
      *((_QWORD *)this + 5) = v7;
    }
    v8 = (void *)*((_QWORD *)a2[2].super.isa + v6 + 1);
    if (objc_msgSend(v8, "format"))
    {
      v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 0, v6, 31);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 1, objc_msgSend(v8, "format"), objc_msgSend(v7, "format"));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 2, objc_msgSend(v8, "offset"), objc_msgSend(v7, "offset"));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 3, objc_msgSend(v8, "bufferIndex"), objc_msgSend(v7, "bufferIndex"));
      v10 = objc_msgSend(v8, "bufferIndex");
      v11 = v10;
      v12 = v62;
      if (v62 >= v63)
      {
        v14 = (char *)__p;
        v15 = (v62 - (_BYTE *)__p) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v17 = v63 - (_BYTE *)__p;
        if ((v63 - (_BYTE *)__p) >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v63, v18);
          v14 = (char *)__p;
          v12 = v62;
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[4 * v15];
        *(_DWORD *)v20 = v11;
        v13 = v20 + 4;
        while (v12 != v14)
        {
          v21 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        __p = v20;
        v62 = v13;
        v63 = &v19[4 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_DWORD *)v62 = v10;
        v13 = v12 + 4;
      }
      v62 = v13;
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
      v23 = v22;
      v24 = v65;
      if (v65 >= v66)
      {
        v26 = ((char *)v65 - (_BYTE *)v64) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v27 = ((char *)v66 - (_BYTE *)v64) >> 2;
        if (v27 <= v26 + 1)
          v27 = v26 + 1;
        if ((unint64_t)((char *)v66 - (_BYTE *)v64) >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v66, v28);
        else
          v29 = 0;
        v30 = (uint64_t *)&v29[8 * v26];
        *v30 = v23;
        v25 = v30 + 1;
        v32 = (char *)v64;
        v31 = (char *)v65;
        if (v65 != v64)
        {
          do
          {
            v33 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v30 = v33;
          }
          while (v31 != v32);
          v31 = (char *)v64;
        }
        v64 = v30;
        v65 = v25;
        v66 = (uint64_t *)&v29[8 * v28];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *v65 = v22;
        v25 = v24 + 1;
      }
      v65 = v25;
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    ++v6;
  }
  while (v6 != 31);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v34 = (unsigned int *)__p;
  v35 = (unsigned int *)v62;
  if (__p != v62)
  {
    do
    {
      v36 = *v34;
      v37 = -[MTLBufferLayoutDescriptorArray objectAtIndexedSubscript:](-[MTLStageInputOutputDescriptor layouts](a2, "layouts"), "objectAtIndexedSubscript:", v36);
      v38 = (void *)*((_QWORD *)this + 6);
      if (!v38)
      {
        v38 = (void *)objc_opt_new();
        *((_QWORD *)this + 6) = v38;
      }
      v39 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v39 + 32))(v39, 0, v36, 31);
      (*(void (**)(uint64_t, uint64_t, MTLStepFunction, uint64_t))(*(_QWORD *)v39 + 32))(v39, 1, -[MTLBufferLayoutDescriptor stepFunction](v37, "stepFunction"), objc_msgSend(v38, "stepFunction"));
      (*(void (**)(uint64_t, uint64_t, NSUInteger, uint64_t))(*(_QWORD *)v39 + 32))(v39, 2, -[MTLBufferLayoutDescriptor stepRate](v37, "stepRate"), objc_msgSend(v38, "stepRate"));
      (*(void (**)(uint64_t, uint64_t, NSUInteger, uint64_t))(*(_QWORD *)v39 + 32))(v39, 3, -[MTLBufferLayoutDescriptor stride](v37, "stride"), objc_msgSend(v38, "stride"));
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 56))(v39);
      v41 = v40;
      v42 = v59;
      if (v59 >= v60)
      {
        v44 = ((char *)v59 - (_BYTE *)v58) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v45 = ((char *)v60 - (_BYTE *)v58) >> 2;
        if (v45 <= v44 + 1)
          v45 = v44 + 1;
        if ((unint64_t)((char *)v60 - (_BYTE *)v58) >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
          v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v60, v46);
        else
          v47 = 0;
        v48 = (uint64_t *)&v47[8 * v44];
        *v48 = v41;
        v43 = v48 + 1;
        v50 = (char *)v58;
        v49 = (char *)v59;
        if (v59 != v58)
        {
          do
          {
            v51 = *((_QWORD *)v49 - 1);
            v49 -= 8;
            *--v48 = v51;
          }
          while (v49 != v50);
          v49 = (char *)v58;
        }
        v58 = v48;
        v59 = v43;
        v60 = (uint64_t *)&v47[8 * v46];
        if (v49)
          operator delete(v49);
      }
      else
      {
        *v59 = v40;
        v43 = v42 + 1;
      }
      v59 = v43;
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      ++v34;
    }
    while (v34 != v35);
  }
  v52 = (*(uint64_t (**)(_QWORD, void **))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), &v64);
  v53 = (*(uint64_t (**)(_QWORD, void **))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), &v58);
  (*(void (**)(uint64_t, uint64_t, MTLIndexType, uint64_t))(*(_QWORD *)v57 + 32))(v57, 2, -[MTLStageInputOutputDescriptor indexType](a2, "indexType"), objc_msgSend(v56, "indexType"));
  (*(void (**)(uint64_t, uint64_t, NSUInteger, uint64_t))(*(_QWORD *)v57 + 32))(v57, 3, -[MTLStageInputOutputDescriptor indexBufferIndex](a2, "indexBufferIndex"), objc_msgSend(v56, "indexBufferIndex"));
  if (-[MTLStageInputOutputDescriptor attributes](a2, "attributes"))
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v57 + 24))(v57, 0, v52);
  if (-[MTLStageInputOutputDescriptor layouts](a2, "layouts"))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 24))(v57, 1, v53);
  v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 56))(v57);
  if (v58)
  {
    v59 = (uint64_t *)v58;
    operator delete(v58);
  }
  if (__p)
  {
    v62 = (char *)__p;
    operator delete(__p);
  }
  if (v64)
  {
    v65 = (uint64_t *)v64;
    operator delete(v64);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  return v54;
}

void sub_18269D814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeVertexDescriptor(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, MTLVertexDescriptor *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  MTLVertexBufferLayoutDescriptor *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  uint64_t *v58;
  void *__p;
  char *v60;
  char *v61;
  void *v62;
  uint64_t *v63;
  uint64_t *v64;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  v5 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v55 = v4;
  __p = 0;
  v60 = 0;
  v61 = 0;
  do
  {
    v6 = (void *)*((_QWORD *)this + 7);
    if (!v6)
    {
      v6 = (void *)objc_opt_new();
      *((_QWORD *)this + 7) = v6;
    }
    v7 = (void *)*((_QWORD *)a2[2].super.isa + v5 + 1);
    if (objc_msgSend(v7, "format"))
    {
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, 0, v5, 31);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, 1, objc_msgSend(v7, "format"), objc_msgSend(v6, "format"));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, 2, objc_msgSend(v7, "offset"), objc_msgSend(v6, "offset"));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, 3, objc_msgSend(v7, "bufferIndex"), objc_msgSend(v6, "bufferIndex"));
      v9 = objc_msgSend(v7, "bufferIndex");
      v10 = v9;
      v11 = v60;
      if (v60 >= v61)
      {
        v13 = (char *)__p;
        v14 = (v60 - (_BYTE *)__p) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v16 = v61 - (_BYTE *)__p;
        if ((v61 - (_BYTE *)__p) >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v61, v17);
          v13 = (char *)__p;
          v11 = v60;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = v10;
        v12 = v19 + 4;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        __p = v19;
        v60 = v12;
        v61 = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v60 = v9;
        v12 = v11 + 4;
      }
      v60 = v12;
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
      v22 = v21;
      v23 = v63;
      if (v63 >= v64)
      {
        v25 = ((char *)v63 - (_BYTE *)v62) >> 3;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v26 = ((char *)v64 - (_BYTE *)v62) >> 2;
        if (v26 <= v25 + 1)
          v26 = v25 + 1;
        if ((unint64_t)((char *)v64 - (_BYTE *)v62) >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v64, v27);
        else
          v28 = 0;
        v29 = (uint64_t *)&v28[8 * v25];
        *v29 = v22;
        v24 = v29 + 1;
        v31 = (char *)v62;
        v30 = (char *)v63;
        if (v63 != v62)
        {
          do
          {
            v32 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *--v29 = v32;
          }
          while (v30 != v31);
          v30 = (char *)v62;
        }
        v62 = v29;
        v63 = v24;
        v64 = (uint64_t *)&v28[8 * v27];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v63 = v21;
        v24 = v23 + 1;
      }
      v63 = v24;
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    ++v5;
  }
  while (v5 != 31);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v33 = (unsigned int *)__p;
  v34 = (unsigned int *)v60;
  if (__p != v60)
  {
    do
    {
      v35 = *v33;
      v36 = -[MTLVertexBufferLayoutDescriptorArray objectAtIndexedSubscript:](-[MTLVertexDescriptor layouts](a2, "layouts"), "objectAtIndexedSubscript:", v35);
      v37 = (void *)*((_QWORD *)this + 8);
      if (!v37)
      {
        v37 = (void *)objc_opt_new();
        *((_QWORD *)this + 8) = v37;
      }
      v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v38 + 32))(v38, 0, v35, 31);
      (*(void (**)(uint64_t, uint64_t, MTLVertexStepFunction, uint64_t))(*(_QWORD *)v38 + 32))(v38, 1, -[MTLVertexBufferLayoutDescriptor stepFunction](v36, "stepFunction"), objc_msgSend(v37, "stepFunction"));
      (*(void (**)(uint64_t, uint64_t, NSUInteger, uint64_t))(*(_QWORD *)v38 + 32))(v38, 2, -[MTLVertexBufferLayoutDescriptor stepRate](v36, "stepRate"), objc_msgSend(v37, "stepRate"));
      (*(void (**)(uint64_t, uint64_t, NSUInteger, uint64_t))(*(_QWORD *)v38 + 32))(v38, 3, -[MTLVertexBufferLayoutDescriptor stride](v36, "stride"), objc_msgSend(v37, "stride"));
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 56))(v38);
      v40 = v39;
      v41 = v57;
      if (v57 >= v58)
      {
        v43 = ((char *)v57 - (_BYTE *)v56) >> 3;
        if ((unint64_t)(v43 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v44 = ((char *)v58 - (_BYTE *)v56) >> 2;
        if (v44 <= v43 + 1)
          v44 = v43 + 1;
        if ((unint64_t)((char *)v58 - (_BYTE *)v56) >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v44;
        if (v45)
          v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v58, v45);
        else
          v46 = 0;
        v47 = (uint64_t *)&v46[8 * v43];
        *v47 = v40;
        v42 = v47 + 1;
        v49 = (char *)v56;
        v48 = (char *)v57;
        if (v57 != v56)
        {
          do
          {
            v50 = *((_QWORD *)v48 - 1);
            v48 -= 8;
            *--v47 = v50;
          }
          while (v48 != v49);
          v48 = (char *)v56;
        }
        v56 = v47;
        v57 = v42;
        v58 = (uint64_t *)&v46[8 * v45];
        if (v48)
          operator delete(v48);
      }
      else
      {
        *v57 = v39;
        v42 = v41 + 1;
      }
      v57 = v42;
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      ++v33;
    }
    while (v33 != v34);
  }
  v51 = (*(uint64_t (**)(_QWORD, void **))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), &v62);
  v52 = (*(uint64_t (**)(_QWORD, void **))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), &v56);
  if (-[MTLVertexDescriptor attributes](a2, "attributes"))
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v55 + 24))(v55, 0, v51);
  if (-[MTLVertexDescriptor layouts](a2, "layouts"))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55 + 24))(v55, 1, v52);
  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 56))(v55);
  if (v56)
  {
    v57 = (uint64_t *)v56;
    operator delete(v56);
  }
  if (__p)
  {
    v60 = (char *)__p;
    operator delete(__p);
  }
  if (v62)
  {
    v63 = (uint64_t *)v62;
    operator delete(v62);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  return v53;
}

void sub_18269DEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedAttachments(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, MTLRenderPipelineColorAttachmentDescriptorArrayInternal *a2)
{
  uint64_t v4;
  MTLRenderPipelineColorAttachmentDescriptorInternal *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *__p;
  uint64_t *v24;
  uint64_t *v25;

  v4 = 0;
  __p = 0;
  v24 = 0;
  v25 = 0;
  do
  {
    v5 = a2->_descriptors[v4];
    if (v5)
    {
      v6 = (void *)*((_QWORD *)this + 9);
      if (!v6)
      {
        v6 = (void *)objc_opt_new();
        *((_QWORD *)this + 9) = v6;
      }
      v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 0, v4, 8);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 1, -[MTLRenderPipelineColorAttachmentDescriptorInternal pixelFormat](v5, "pixelFormat"), objc_msgSend(v6, "pixelFormat"));
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 2, -[MTLRenderPipelineColorAttachmentDescriptorInternal isBlendingEnabled](v5, "isBlendingEnabled"), objc_msgSend(v6, "isBlendingEnabled"));
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 3, -[MTLRenderPipelineColorAttachmentDescriptorInternal sourceRGBBlendFactor](v5, "sourceRGBBlendFactor"), objc_msgSend(v6, "sourceRGBBlendFactor"));
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 4, -[MTLRenderPipelineColorAttachmentDescriptorInternal destinationRGBBlendFactor](v5, "destinationRGBBlendFactor"), objc_msgSend(v6, "destinationRGBBlendFactor"));
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 5, -[MTLRenderPipelineColorAttachmentDescriptorInternal rgbBlendOperation](v5, "rgbBlendOperation"), objc_msgSend(v6, "rgbBlendOperation"));
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 6, -[MTLRenderPipelineColorAttachmentDescriptorInternal sourceAlphaBlendFactor](v5, "sourceAlphaBlendFactor"), objc_msgSend(v6, "sourceAlphaBlendFactor"));
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 7, -[MTLRenderPipelineColorAttachmentDescriptorInternal destinationAlphaBlendFactor](v5, "destinationAlphaBlendFactor"), objc_msgSend(v6, "destinationAlphaBlendFactor"));
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 8, -[MTLRenderPipelineColorAttachmentDescriptorInternal alphaBlendOperation](v5, "alphaBlendOperation"), objc_msgSend(v6, "alphaBlendOperation"));
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 9, -[MTLRenderPipelineColorAttachmentDescriptorInternal writeMask](v5, "writeMask"), objc_msgSend(v6, "writeMask"));
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
      v9 = v8;
      v10 = v24;
      if (v24 >= v25)
      {
        v12 = ((char *)v24 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v13 = ((char *)v25 - (_BYTE *)__p) >> 2;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)((char *)v25 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v25, v14);
        else
          v15 = 0;
        v16 = (uint64_t *)&v15[8 * v12];
        *v16 = v9;
        v11 = v16 + 1;
        v18 = (char *)__p;
        v17 = (char *)v24;
        if (v24 != __p)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v16 = v19;
          }
          while (v17 != v18);
          v17 = (char *)__p;
        }
        __p = v16;
        v24 = v11;
        v25 = (uint64_t *)&v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v24 = v8;
        v11 = v10 + 1;
      }
      v24 = v11;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    ++v4;
  }
  while (v4 != 8);
  v20 = v24;
  if (v24 == __p)
  {
    v21 = 0;
    if (!v24)
      return v21;
    goto LABEL_25;
  }
  v21 = (*(uint64_t (**)(_QWORD, void **))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), &__p);
  v20 = (uint64_t *)__p;
  if (__p)
  {
LABEL_25:
    v24 = v20;
    operator delete(v20);
  }
  return v21;
}

void sub_18269E304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, MTLPipelineBufferDescriptorArrayInternal *a2)
{
  uint64_t v4;
  MTLPipelineBufferDescriptorInternal *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *__p;
  uint64_t *v24;
  uint64_t *v25;

  v4 = 0;
  __p = 0;
  v24 = 0;
  v25 = 0;
  do
  {
    v5 = a2->_descriptors[v4];
    if (v5)
    {
      v6 = (id)*((_QWORD *)this + 15);
      if (!v6)
      {
        v6 = (id)objc_opt_new();
        *((_QWORD *)this + 15) = v6;
      }
      if (!-[MTLPipelineBufferDescriptorInternal isEqual:](v5, "isEqual:", v6))
      {
        v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1));
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 0, v4, 31);
        (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 1, -[MTLPipelineBufferDescriptorInternal mutability](v5, "mutability"), objc_msgSend(v6, "mutability"));
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
        v9 = v8;
        v10 = v24;
        if (v24 >= v25)
        {
          v12 = ((char *)v24 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v13 = ((char *)v25 - (_BYTE *)__p) >> 2;
          if (v13 <= v12 + 1)
            v13 = v12 + 1;
          if ((unint64_t)((char *)v25 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v25, v14);
          else
            v15 = 0;
          v16 = (uint64_t *)&v15[8 * v12];
          *v16 = v9;
          v11 = v16 + 1;
          v18 = (char *)__p;
          v17 = (char *)v24;
          if (v24 != __p)
          {
            do
            {
              v19 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              *--v16 = v19;
            }
            while (v17 != v18);
            v17 = (char *)__p;
          }
          __p = v16;
          v24 = v11;
          v25 = (uint64_t *)&v15[8 * v14];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v24 = v8;
          v11 = v10 + 1;
        }
        v24 = v11;
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
    ++v4;
  }
  while (v4 != 31);
  v20 = v24;
  if (v24 == __p)
  {
    v21 = 0;
    if (!v24)
      return v21;
    goto LABEL_26;
  }
  v21 = (*(uint64_t (**)(_QWORD, void **))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), &__p);
  v20 = (uint64_t *)__p;
  if (__p)
  {
LABEL_26:
    v24 = v20;
    operator delete(v20);
  }
  return v21;
}

void sub_18269E570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeComputePipelineDescriptorInternal(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v6 = *((_QWORD *)a1 + 2);
  if (!v6)
  {
    v6 = objc_opt_new();
    *((_QWORD *)a1 + 2) = v6;
  }
  v7 = v6 + 16;
  v8 = a3 + 16;
  if (*(_QWORD *)v8)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
  v9 = *(void **)(v8 + 24);
  if (v9 && (objc_msgSend(v9, "isEqual:", *(_QWORD *)(v7 + 24)) & 1) == 0)
  {
    v10 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeStageInputOuputDescriptor(a1, *(MTLStageInputOutputDescriptor **)(v8 + 24));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 3, v10);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 1, *(unsigned __int8 *)(v8 + 16), *(unsigned __int8 *)(v7 + 16));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 8, *(unsigned __int16 *)(v8 + 18), *(unsigned __int16 *)(v7 + 18));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 7, *(unsigned __int8 *)(v8 + 80), *(unsigned __int8 *)(v7 + 80));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 10, *(_QWORD *)(v8 + 104), *(_QWORD *)(v7 + 104));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 12, *(unsigned __int8 *)(v8 + 136), *(unsigned __int8 *)(v7 + 136));
  result = *(_QWORD *)(v8 + 48);
  if (result)
  {
    result = objc_msgSend((id)result, "isEqual:", *(_QWORD *)(v7 + 48));
    if ((result & 1) == 0)
    {
      v12 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 48));
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 6, v12);
    }
  }
  return result;
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, const MTLPipelineLibrarySerializer::ComputePipelineDescriptor *a2)
{
  uint64_t v4;
  uint64_t v5;
  const MTLPipelineLibrarySerializer::ComputePipelineDescriptor *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const MTLPipelineLibrarySerializer::ComputePipelineDescriptor *v17;
  uint64_t v18;
  const MTLPipelineLibrarySerializer::ComputePipelineDescriptor *v19;
  _QWORD v21[2];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 9);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  (*(void (**)(uint64_t, const char *))(*(_QWORD *)v5 + 64))(v5, "MTLComputePipelineDescriptor");
  if (*((char *)a2 + 23) < 0)
  {
    if (!*((_QWORD *)a2 + 1))
      goto LABEL_7;
    v6 = *(const MTLPipelineLibrarySerializer::ComputePipelineDescriptor **)a2;
    goto LABEL_6;
  }
  v6 = a2;
  if (*((_BYTE *)a2 + 23))
LABEL_6:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6));
LABEL_7:
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeComputePipelineDescriptorInternal(this, v5, *((_QWORD *)a2 + 9));
  if (*(_QWORD *)(v4 + 24))
  {
    v7 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), (char *)a2 + 80);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 24))(v5, 0, v7);
  }
  if (*((_QWORD *)a2 + 15) != *((_QWORD *)a2 + 14))
  {
    v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v9 = *((_QWORD *)a2 + 14);
    if (*((_QWORD *)a2 + 15) != v9)
    {
      v10 = 0;
      do
      {
        v11 = *(uint64_t **)(v9 + 8 * v10);
        v21[0] = CFSTR("library");
        v12 = *v11;
        v21[1] = CFSTR("index");
        v22[0] = v12;
        v22[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v10);
        objc_msgSend(v8, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 2));
        ++v10;
        v9 = *((_QWORD *)a2 + 14);
      }
      while (v10 < (*((_QWORD *)a2 + 15) - v9) >> 3);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v5 + 24))(v5, 11, v8);
  }
  v13 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), (char *)a2 + 24);
  v14 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), (char *)a2 + 48);
  if (v13)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, 4, v13);
  if (v14)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, 5, v14);
  v15 = *((_QWORD *)this + 1);
  v16 = *((char *)a2 + 23);
  v17 = *(const MTLPipelineLibrarySerializer::ComputePipelineDescriptor **)a2;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  if (v16 >= 0)
    v19 = a2;
  else
    v19 = v17;
  (*(void (**)(uint64_t, const MTLPipelineLibrarySerializer::ComputePipelineDescriptor *, uint64_t))(*(_QWORD *)v15 + 176))(v15, v19, v18);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_18269E9C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeRenderPipelineDescriptorInternal(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v6 = *((_QWORD *)a1 + 3);
  if (!v6)
  {
    v6 = objc_opt_new();
    *((_QWORD *)a1 + 3) = v6;
  }
  v7 = v6 + 48;
  v8 = a3 + 48;
  if (*(_QWORD *)(v8 + 248))
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0);
  v9 = *(void **)(v8 + 272);
  if (v9 && (objc_msgSend(v9, "isEqual:", *(_QWORD *)(v7 + 272)) & 1) == 0)
  {
    v10 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeVertexDescriptor(a1, *(MTLVertexDescriptor **)(v8 + 272));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 3, v10);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 4, *(_QWORD *)(v8 + 184), *(_QWORD *)(v7 + 184));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 5, *(_QWORD *)(v8 + 224) & 1, *(_QWORD *)(v7 + 224) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 6, (*(_QWORD *)(v8 + 224) >> 1) & 1, (*(_QWORD *)(v7 + 224) >> 1) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 7, (*(_QWORD *)(v8 + 224) >> 2) & 1, (*(_QWORD *)(v7 + 224) >> 2) & 1);
  (*(void (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)a2 + 40))(a2, 27, *(float *)(v8 + 200), *(float *)(v7 + 200));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 28, *(_QWORD *)(v8 + 192), *(_QWORD *)(v7 + 192));
  if (*(_QWORD *)v8)
  {
    if ((objc_msgSend(*(id *)v8, "isEqual:", *(_QWORD *)v7) & 1) == 0)
    {
      v11 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedAttachments(a1, *(MTLRenderPipelineColorAttachmentDescriptorArrayInternal **)v8);
      if (v11)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 8, v11);
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 24, (*(_QWORD *)(v8 + 224) >> 10) & 1, (*(_QWORD *)(v7 + 224) >> 10) & 1);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 26, *(unsigned int *)(v8 + 476), *(unsigned int *)(v7 + 476));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 9, *(_QWORD *)(v8 + 72), *(_QWORD *)(v7 + 72));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 10, *(_QWORD *)(v8 + 80), *(_QWORD *)(v7 + 80));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 11, (*(_QWORD *)(v8 + 224) >> 3) & 3, (*(_QWORD *)(v7 + 224) >> 3) & 3);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 12, *(_QWORD *)(v8 + 88), *(_QWORD *)(v7 + 88));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 13, *(_QWORD *)(v8 + 96), *(_QWORD *)(v7 + 96));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 14, *(unsigned __int8 *)(v8 + 104), *(unsigned __int8 *)(v7 + 104));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 15, *(_QWORD *)(v8 + 112), *(_QWORD *)(v7 + 112));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 16, *(_QWORD *)(v8 + 120), *(_QWORD *)(v7 + 120));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 17, *(_QWORD *)(v8 + 128), *(_QWORD *)(v7 + 128));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 18, *(_QWORD *)(v8 + 136), *(_QWORD *)(v7 + 136));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 25, *(unsigned __int8 *)(v8 + 152), *(unsigned __int8 *)(v7 + 152));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 30, *(_QWORD *)(v8 + 176), *(_QWORD *)(v7 + 176));
  v12 = *(void **)(v8 + 408);
  if (v12 && (objc_msgSend(v12, "isEqual:", *(_QWORD *)(v7 + 408)) & 1) == 0)
  {
    v13 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 408));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 21, v13);
  }
  v14 = *(void **)(v8 + 416);
  if (v14 && (objc_msgSend(v14, "isEqual:", *(_QWORD *)(v7 + 416)) & 1) == 0)
  {
    v15 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 416));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 22, v15);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 45, (*(_QWORD *)(v8 + 224) >> 26) & 1, (*(_QWORD *)(v7 + 224) >> 26) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 46, (*(_QWORD *)(v8 + 224) >> 23) & 7, (*(_QWORD *)(v7 + 224) >> 23) & 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 47, (*(_QWORD *)(v8 + 224) >> 31) & 1, (*(_QWORD *)(v7 + 224) >> 31) & 1);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 48, (*(_QWORD *)(v8 + 224) >> 15), (*(_QWORD *)(v7 + 224) >> 15));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 49, (*(_QWORD *)(v8 + 224) >> 14) & 1, (*(_QWORD *)(v7 + 224) >> 14) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 50, (*(_QWORD *)(v8 + 224) >> 13) & 1, (*(_QWORD *)(v7 + 224) >> 13) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 51, (*(_QWORD *)(v8 + 224) >> 12) & 1, (*(_QWORD *)(v7 + 224) >> 12) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 52, (*(_QWORD *)(v8 + 224) >> 11) & 1, (*(_QWORD *)(v7 + 224) >> 11) & 1);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 53, *(unsigned int *)(v8 + 232), *(unsigned int *)(v7 + 232));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 54, *(unsigned int *)(v8 + 236), *(unsigned int *)(v7 + 236));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 55, (*(_QWORD *)(v8 + 224) >> 27) & 0xFLL, (*(_QWORD *)(v7 + 224) >> 27) & 0xFLL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 56, (*(_QWORD *)(v8 + 224) >> 6) & 1, (*(_QWORD *)(v7 + 224) >> 6) & 1);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 57, *(unsigned __int8 *)(v8 + 472), *(unsigned __int8 *)(v7 + 472));
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 58, *(unsigned int *)(v8 + 608), *(unsigned int *)(v7 + 608));
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, const MTLPipelineLibrarySerializer::RenderPipelineDescriptor *a2)
{
  uint64_t v4;
  const MTLPipelineLibrarySerializer::RenderPipelineDescriptor *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const MTLPipelineLibrarySerializer::RenderPipelineDescriptor *v23;
  uint64_t v24;
  const MTLPipelineLibrarySerializer::RenderPipelineDescriptor *v25;
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  (*(void (**)(uint64_t, const char *))(*(_QWORD *)v4 + 64))(v4, "MTLRenderPipelineDescriptor");
  if (*((char *)a2 + 23) < 0)
  {
    if (!*((_QWORD *)a2 + 1))
      goto LABEL_7;
    v5 = *(const MTLPipelineLibrarySerializer::RenderPipelineDescriptor **)a2;
    goto LABEL_6;
  }
  v5 = a2;
  if (*((_BYTE *)a2 + 23))
LABEL_6:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 72))(v4, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5));
LABEL_7:
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeRenderPipelineDescriptorInternal(this, v4, *((_QWORD *)a2 + 9));
  v6 = *((_QWORD *)a2 + 9) + 48;
  if (*(_QWORD *)(*((_QWORD *)a2 + 9) + 304))
  {
    v7 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), (char *)a2 + 80);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, 1, v7);
  }
  if (*(_QWORD *)(v6 + 264))
  {
    v8 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), (char *)a2 + 112);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, 2, v8);
  }
  if (*((_QWORD *)a2 + 19) != *((_QWORD *)a2 + 18))
  {
    v9 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v10 = *((_QWORD *)a2 + 18);
    if (*((_QWORD *)a2 + 19) != v10)
    {
      v11 = 0;
      do
      {
        v12 = *(uint64_t **)(v10 + 8 * v11);
        v29[0] = CFSTR("library");
        v13 = *v12;
        v29[1] = CFSTR("index");
        v30[0] = v13;
        v30[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v11);
        objc_msgSend(v9, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, v29, 2));
        ++v11;
        v10 = *((_QWORD *)a2 + 18);
      }
      while (v11 < (*((_QWORD *)a2 + 19) - v10) >> 3);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v4 + 24))(v4, 31, v9);
  }
  if (*((_QWORD *)a2 + 22) != *((_QWORD *)a2 + 21))
  {
    v14 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v15 = *((_QWORD *)a2 + 21);
    if (*((_QWORD *)a2 + 22) != v15)
    {
      v16 = 0;
      do
      {
        v17 = *(uint64_t **)(v15 + 8 * v16);
        v27[0] = CFSTR("library");
        v18 = *v17;
        v27[1] = CFSTR("index");
        v28[0] = v18;
        v28[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v16);
        objc_msgSend(v14, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 2));
        ++v16;
        v15 = *((_QWORD *)a2 + 21);
      }
      while (v16 < (*((_QWORD *)a2 + 22) - v15) >> 3);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v4 + 24))(v4, 32, v14);
  }
  v19 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), (char *)a2 + 24);
  v20 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), (char *)a2 + 48);
  if (v19)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, 19, v19);
  if (v20)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, 20, v20);
  v21 = *((_QWORD *)this + 1);
  v22 = *((char *)a2 + 23);
  v23 = *(const MTLPipelineLibrarySerializer::RenderPipelineDescriptor **)a2;
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  if (v22 >= 0)
    v25 = a2;
  else
    v25 = v23;
  (*(void (**)(uint64_t, const MTLPipelineLibrarySerializer::RenderPipelineDescriptor *, uint64_t))(*(_QWORD *)v21 + 184))(v21, v25, v24);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_18269F2F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedTileAttachments(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, MTLTileRenderPipelineColorAttachmentDescriptorArrayInternal *a2)
{
  uint64_t v4;
  MTLTileRenderPipelineColorAttachmentDescriptorInternal *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *__p;
  uint64_t *v24;
  uint64_t *v25;

  v4 = 0;
  __p = 0;
  v24 = 0;
  v25 = 0;
  do
  {
    v5 = a2->_descriptors[v4];
    if (v5)
    {
      v6 = (void *)*((_QWORD *)this + 12);
      if (!v6)
      {
        v6 = (void *)objc_opt_new();
        *((_QWORD *)this + 12) = v6;
      }
      v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 0, v4, 8);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 1, -[MTLTileRenderPipelineColorAttachmentDescriptorInternal pixelFormat](v5, "pixelFormat"), objc_msgSend(v6, "pixelFormat"));
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
      v9 = v8;
      v10 = v24;
      if (v24 >= v25)
      {
        v12 = ((char *)v24 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v13 = ((char *)v25 - (_BYTE *)__p) >> 2;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)((char *)v25 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v25, v14);
        else
          v15 = 0;
        v16 = (uint64_t *)&v15[8 * v12];
        *v16 = v9;
        v11 = v16 + 1;
        v18 = (char *)__p;
        v17 = (char *)v24;
        if (v24 != __p)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v16 = v19;
          }
          while (v17 != v18);
          v17 = (char *)__p;
        }
        __p = v16;
        v24 = v11;
        v25 = (uint64_t *)&v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v24 = v8;
        v11 = v10 + 1;
      }
      v24 = v11;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    ++v4;
  }
  while (v4 != 8);
  v20 = v24;
  if (v24 == __p)
  {
    v21 = 0;
    if (!v24)
      return v21;
    goto LABEL_25;
  }
  v21 = (*(uint64_t (**)(_QWORD, void **))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), &__p);
  v20 = (uint64_t *)__p;
  if (__p)
  {
LABEL_25:
    v24 = v20;
    operator delete(v20);
  }
  return v21;
}

void sub_18269F54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeTileRenderPipelineDescriptorInternal(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = *((_QWORD *)a1 + 13);
  if (!v6)
  {
    v6 = objc_opt_new();
    *((_QWORD *)a1 + 13) = v6;
  }
  v7 = v6 + 32;
  v8 = a3 + 32;
  if (*(_QWORD *)(v8 + 16))
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 4, *(unsigned __int8 *)(v8 + 32), *(unsigned __int8 *)(v7 + 32));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 6, *(unsigned __int16 *)(v8 + 64), *(unsigned __int16 *)(v7 + 64));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 2, *(_QWORD *)(v8 + 8), *(_QWORD *)(v7 + 8));
  if (*(_QWORD *)v8)
  {
    if ((objc_msgSend(*(id *)v8, "isEqual:", *(_QWORD *)v7) & 1) == 0)
    {
      v9 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedTileAttachments(a1, *(MTLTileRenderPipelineColorAttachmentDescriptorArrayInternal **)v8);
      if (v9)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 3, v9);
    }
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 8, *(_QWORD *)(v8 + 72), *(_QWORD *)(v7 + 72));
  result = *(_QWORD *)(v8 + 56);
  if (result)
  {
    result = objc_msgSend((id)result, "isEqual:", *(_QWORD *)(v7 + 56));
    if ((result & 1) == 0)
    {
      v11 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 56));
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 5, v11);
    }
  }
  return result;
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD v20[2];
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 120))(*((_QWORD **)a1 + 1));
  (*(void (**)(uint64_t, const char *))(*(_QWORD *)v4 + 64))(v4, "MTLTileRenderPipelineDescriptor");
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1])
      goto LABEL_7;
    v5 = *a2;
    goto LABEL_6;
  }
  v5 = (uint64_t *)a2;
  if (*((_BYTE *)a2 + 23))
LABEL_6:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 72))(v4, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5));
LABEL_7:
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeTileRenderPipelineDescriptorInternal(a1, v4, (uint64_t)a2[9]);
  if (a2[9][7])
  {
    v6 = (*(uint64_t (**)(_QWORD *, uint64_t *))(**((_QWORD **)a1 + 1) + 24))(*((_QWORD **)a1 + 1), (uint64_t *)a2 + 10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, 1, v6);
  }
  if (a2[15] != a2[14])
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v8 = a2[14];
    if (a2[15] != v8)
    {
      v9 = 0;
      do
      {
        v10 = (uint64_t *)v8[v9];
        v20[0] = CFSTR("library");
        v11 = *v10;
        v20[1] = CFSTR("index");
        v21[0] = v11;
        v21[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v9);
        objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 2));
        ++v9;
        v8 = a2[14];
      }
      while (v9 < a2[15] - v8);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v4 + 24))(v4, 7, v7);
  }
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t *))(**((_QWORD **)a1 + 1) + 160))(*((_QWORD **)a1 + 1), (uint64_t *)a2 + 3);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t *))(**((_QWORD **)a1 + 1) + 160))(*((_QWORD **)a1 + 1), (uint64_t *)a2 + 6);
  if (v12)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, 9, v12);
  if (v13)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, 10, v13);
  v14 = (_QWORD *)*((_QWORD *)a1 + 1);
  v15 = *((char *)a2 + 23);
  v16 = *a2;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  if (v15 >= 0)
    v18 = (uint64_t *)a2;
  else
    v18 = v16;
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*v14 + 192))(v14, v18, v17);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_18269F988(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeMeshRenderPipelineDescriptorInternal(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *a1, uint64_t a2, void *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v6 = (void *)*((_QWORD *)a1 + 14);
  if (!v6)
  {
    v6 = (void *)objc_opt_new();
    *((_QWORD *)a1 + 14) = v6;
  }
  v7 = objc_msgSend(v6, "_descriptorPrivate");
  v8 = objc_msgSend(a3, "_descriptorPrivate");
  if (*(_QWORD *)(v8 + 80))
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 4, *(_QWORD *)(v8 + 112), *(_QWORD *)(v7 + 112));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 5, *(_QWORD *)(v8 + 120), *(_QWORD *)(v7 + 120));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 6, (*(_QWORD *)(v8 + 60) >> 39) & 1, (*(_QWORD *)(v7 + 60) >> 39) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 7, (*(_QWORD *)(v8 + 60) >> 40) & 1, (*(_QWORD *)(v7 + 60) >> 40) & 1);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 8, *(_QWORD *)(v8 + 136), *(_QWORD *)(v7 + 136));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 9, *(_QWORD *)(v8 + 128), *(_QWORD *)(v7 + 128));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 13, *(_QWORD *)(v8 + 32), *(_QWORD *)(v7 + 32));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 14, *(_QWORD *)(v8 + 60) & 1, *(_QWORD *)(v7 + 60) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 15, (*(_QWORD *)(v8 + 60) >> 1) & 1, (*(_QWORD *)(v7 + 60) >> 1) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, (*(_QWORD *)(v8 + 60) >> 2) & 1, (*(_QWORD *)(v7 + 60) >> 2) & 1);
  (*(void (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)a2 + 40))(a2, 28, *(float *)(v8 + 56), *(float *)(v7 + 56));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 27, *(_QWORD *)(v8 + 48), *(_QWORD *)(v7 + 48));
  if (*(_QWORD *)v8)
  {
    if ((objc_msgSend(*(id *)v8, "isEqual:", *(_QWORD *)v7) & 1) == 0)
    {
      v9 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedAttachments(a1, *(MTLRenderPipelineColorAttachmentDescriptorArrayInternal **)v8);
      if (v9)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 20, v9);
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 19, (*(_QWORD *)(v8 + 60) >> 7) & 1, (*(_QWORD *)(v7 + 60) >> 7) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 18, (*(_QWORD *)(v8 + 60) >> 35) & 0xFLL, (*(_QWORD *)(v7 + 60) >> 35) & 0xFLL);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 21, *(_QWORD *)(v8 + 8), *(_QWORD *)(v7 + 8));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 22, *(_QWORD *)(v8 + 16), *(_QWORD *)(v7 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 23, (*(_QWORD *)(v8 + 60) >> 31) & 1, (*(_QWORD *)(v7 + 60) >> 31) & 1);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 29, *(_QWORD *)(v8 + 24), *(_QWORD *)(v7 + 24));
  v10 = *(void **)(v8 + 144);
  if (v10 && (objc_msgSend(v10, "isEqual:", *(_QWORD *)(v7 + 144)) & 1) == 0)
  {
    v11 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 144));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 10, v11);
  }
  v12 = *(void **)(v8 + 152);
  if (v12 && (objc_msgSend(v12, "isEqual:", *(_QWORD *)(v7 + 152)) & 1) == 0)
  {
    v13 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 152));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 11, v13);
  }
  v14 = *(void **)(v8 + 160);
  if (v14 && (objc_msgSend(v14, "isEqual:", *(_QWORD *)(v7 + 160)) & 1) == 0)
  {
    v15 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 160));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 12, v15);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 30, (*(_QWORD *)(v8 + 60) >> 23) & 1, (*(_QWORD *)(v7 + 60) >> 23) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 31, (*(_QWORD *)(v8 + 60) >> 20) & 7, (*(_QWORD *)(v7 + 60) >> 20) & 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 32, (*(_QWORD *)(v8 + 60) >> 28) & 1, (*(_QWORD *)(v7 + 60) >> 28) & 1);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 33, (*(_QWORD *)(v8 + 60) >> 12), (*(_QWORD *)(v7 + 60) >> 12));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 34, (*(_QWORD *)(v8 + 60) >> 11) & 1, (*(_QWORD *)(v7 + 60) >> 11) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 35, (*(_QWORD *)(v8 + 60) >> 10) & 1, (*(_QWORD *)(v7 + 60) >> 10) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 36, (*(_QWORD *)(v8 + 60) >> 9) & 1, (*(_QWORD *)(v7 + 60) >> 9) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 37, (*(_QWORD *)(v8 + 60) >> 8) & 1, (*(_QWORD *)(v7 + 60) >> 8) & 1);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 38, *(unsigned int *)(v8 + 68), *(unsigned int *)(v7 + 68));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 39, (*(_QWORD *)(v8 + 60) >> 24) & 0xFLL, (*(_QWORD *)(v7 + 60) >> 24) & 0xFLL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, (*(_QWORD *)(v8 + 60) >> 3) & 1, (*(_QWORD *)(v7 + 60) >> 3) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 41, (*(_QWORD *)(v8 + 60) >> 30) & 1, (*(_QWORD *)(v7 + 60) >> 30) & 1);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 44, *(unsigned int *)(v8 + 288), *(unsigned int *)(v7 + 288));
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, const MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor *a2)
{
  uint64_t v4;
  const MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor *v29;
  uint64_t v30;
  const MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor *v31;
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[3];

  v38[2] = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1));
  (*(void (**)(uint64_t, const char *))(*(_QWORD *)v4 + 64))(v4, "MTLMeshRenderPipelineDescriptor");
  if (*((char *)a2 + 23) < 0)
  {
    if (!*((_QWORD *)a2 + 1))
      goto LABEL_7;
    v5 = *(const MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor **)a2;
    goto LABEL_6;
  }
  v5 = a2;
  if (*((_BYTE *)a2 + 23))
LABEL_6:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 72))(v4, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5));
LABEL_7:
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeMeshRenderPipelineDescriptorInternal(this, v4, *((void **)a2 + 9));
  v6 = (_QWORD *)objc_msgSend(*((id *)a2 + 9), "_descriptorPrivate");
  if (v6[11])
  {
    v7 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), (char *)a2 + 80);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, 1, v7);
  }
  if (v6[12])
  {
    v8 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), (char *)a2 + 112);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, 2, v8);
  }
  if (v6[13])
  {
    v9 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), (char *)a2 + 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, 3, v9);
  }
  if (*((_QWORD *)a2 + 23) != *((_QWORD *)a2 + 22))
  {
    v10 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v11 = *((_QWORD *)a2 + 22);
    if (*((_QWORD *)a2 + 23) != v11)
    {
      v12 = 0;
      do
      {
        v13 = *(uint64_t **)(v11 + 8 * v12);
        v37[0] = CFSTR("library");
        v14 = *v13;
        v37[1] = CFSTR("index");
        v38[0] = v14;
        v38[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v12);
        objc_msgSend(v10, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, v37, 2));
        ++v12;
        v11 = *((_QWORD *)a2 + 22);
      }
      while (v12 < (*((_QWORD *)a2 + 23) - v11) >> 3);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v4 + 24))(v4, 24, v10);
  }
  if (*((_QWORD *)a2 + 26) != *((_QWORD *)a2 + 25))
  {
    v15 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v16 = *((_QWORD *)a2 + 25);
    if (*((_QWORD *)a2 + 26) != v16)
    {
      v17 = 0;
      do
      {
        v18 = *(uint64_t **)(v16 + 8 * v17);
        v35[0] = CFSTR("library");
        v19 = *v18;
        v35[1] = CFSTR("index");
        v36[0] = v19;
        v36[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v17);
        objc_msgSend(v15, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, v35, 2));
        ++v17;
        v16 = *((_QWORD *)a2 + 25);
      }
      while (v17 < (*((_QWORD *)a2 + 26) - v16) >> 3);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v4 + 24))(v4, 25, v15);
  }
  if (*((_QWORD *)a2 + 29) != *((_QWORD *)a2 + 28))
  {
    v20 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v21 = *((_QWORD *)a2 + 28);
    if (*((_QWORD *)a2 + 29) != v21)
    {
      v22 = 0;
      do
      {
        v23 = *(uint64_t **)(v21 + 8 * v22);
        v33[0] = CFSTR("library");
        v24 = *v23;
        v33[1] = CFSTR("index");
        v34[0] = v24;
        v34[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v22);
        objc_msgSend(v20, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, v33, 2));
        ++v22;
        v21 = *((_QWORD *)a2 + 28);
      }
      while (v22 < (*((_QWORD *)a2 + 29) - v21) >> 3);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v4 + 24))(v4, 26, v20);
  }
  v25 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), (char *)a2 + 24);
  v26 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), (char *)a2 + 48);
  if (v25)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, 42, v25);
  if (v26)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, 43, v26);
  v27 = *((_QWORD *)this + 1);
  v28 = *((char *)a2 + 23);
  v29 = *(const MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor **)a2;
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  if (v28 >= 0)
    v31 = a2;
  else
    v31 = v29;
  (*(void (**)(uint64_t, const MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor *, uint64_t))(*(_QWORD *)v27 + 200))(v27, v31, v30);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_1826A0354(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineLibrarySerializer::valueFromConstantData(MTLPipelineLibrarySerializer *this, unsigned int *a2, const char *a3, double _D0)
{
  void *v6;

  if ((int)this <= 36)
  {
    if ((int)this > 28)
    {
      if ((_DWORD)this == 29)
      {
        return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *a2);
      }
      else
      {
        if ((_DWORD)this != 33)
          goto LABEL_22;
        return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *a2);
      }
    }
    else
    {
      if ((_DWORD)this == 3)
      {
        LODWORD(_D0) = *a2;
        v6 = (void *)MEMORY[0x1E0CB37E8];
      }
      else
      {
        if ((_DWORD)this != 16)
          goto LABEL_22;
        _H0 = *(_WORD *)a2;
        v6 = (void *)MEMORY[0x1E0CB37E8];
        __asm { FCVT            S0, H0 }
      }
      return objc_msgSend(v6, "numberWithFloat:", a3, _D0);
    }
  }
  else if ((int)this <= 44)
  {
    if ((_DWORD)this == 37)
    {
      return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *(__int16 *)a2);
    }
    else
    {
      if ((_DWORD)this != 41)
        goto LABEL_22;
      return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", *(unsigned __int16 *)a2);
    }
  }
  else
  {
    if ((_DWORD)this != 45)
    {
      if ((_DWORD)this == 49 || (_DWORD)this == 53)
        return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", *(unsigned __int8 *)a2);
LABEL_22:
      abort();
    }
    return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithChar:", *(char *)a2);
  }
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setVector(id *this, unsigned int a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  MTLPipelineLibrarySerializer *ComponentType;
  const char *v10;
  double v11;
  MTLPipelineLibrarySerializer *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  double v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  LODWORD(v8) = MTLDataTypeGetComponentCount(a3);
  ComponentType = (MTLPipelineLibrarySerializer *)MTLDataTypeGetComponentType(a3);
  v12 = ComponentType;
  if ((_DWORD)v8 == 1)
  {
    v13 = MTLPipelineLibrarySerializer::valueFromConstantData(ComponentType, (unsigned int *)a4, v10, v11);
  }
  else
  {
    v14 = v8;
    MEMORY[0x1E0C80A78](ComponentType);
    v16 = (char *)v23 - v15;
    v17 = _MTLConstantDataSize((uint64_t)v12);
    if ((_DWORD)v8)
    {
      v20 = v17;
      v8 = v8;
      v21 = (uint64_t *)v16;
      do
      {
        *v21++ = MTLPipelineLibrarySerializer::valueFromConstantData(v12, (unsigned int *)a4, v18, v19);
        a4 += v20;
        --v8;
      }
      while (v8);
    }
    v13 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v16, v14);
  }
  return objc_msgSend(this[1], "setObject:forKeyedSubscript:", v13, *((_QWORD *)this[2] + a2));
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::addLibrary(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v4 = (char **)(a1 + 16);
  v7 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithObjectsAndKeys:", CFSTR("MTLLibrary"), CFSTR("type"), *(_QWORD *)a2, CFSTR("name"), *(_QWORD *)(a2 + 8), CFSTR("fileName"), 0);
  if (*((_BYTE *)v4 + 24))
    objc_msgSend(v7, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a2 + 16)), CFSTR("isFromSource"));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD **)(a1 + 24);
  if ((unint64_t)v9 >= v8)
  {
    v11 = ((char *)v9 - *v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)*v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(a1 + 32, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v7;
    v10 = v16 + 8;
    v19 = *(char **)(a1 + 16);
    v18 = *(char **)(a1 + 24);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = *v4;
    }
    *(_QWORD *)(a1 + 16) = v16;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v9 = v7;
    v10 = v9 + 1;
  }
  *(_QWORD *)(a1 + 24) = v10;
  objc_msgSend(*(id *)(a1 + 8), "addObject:", v7);
  return (v6 - v5) >> 3;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::serializeFunctionRef(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if ((v2 & 0x80000000) != 0)
  {
    v7 = *((_QWORD *)a2 + 1);
    v9[0] = CFSTR("name");
    v9[1] = CFSTR("library");
    v10[0] = v7;
    v10[1] = CFSTR("specialized");
    v4 = (void *)MEMORY[0x1E0C99D80];
    v5 = v10;
    v6 = v9;
  }
  else
  {
    v3 = *(void **)(*(_QWORD *)(a1 + 16) + 8 * v2);
    v12[0] = *((_QWORD *)a2 + 1);
    v11[0] = CFSTR("name");
    v11[1] = CFSTR("library");
    v12[1] = objc_msgSend(v3, "objectForKeyedSubscript:");
    v4 = (void *)MEMORY[0x1E0C99D80];
    v5 = v12;
    v6 = v11;
  }
  return objc_msgSend(v4, "dictionaryWithObjects:forKeys:count:", v5, v6, 2);
}

MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer *MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer::PipelineLibraryJSONSerializer(MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer *this, char a2)
{
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer *v4;
  MTLPipelineLibrarySerializer::JSONSerializationContext *v5;

  v4 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::PipelineLibrarySerializer(this);
  *(_QWORD *)v4 = &off_1E0FE1AF8;
  *((_BYTE *)v4 + 128) = (a2 & 4) != 0;
  v5 = (MTLPipelineLibrarySerializer::JSONSerializationContext *)operator new();
  MTLPipelineLibrarySerializer::JSONSerializationContext::JSONSerializationContext(v5, a2 & 1);
  *((_QWORD *)this + 1) = v5;
  return this;
}

void sub_1826A0894(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  MEMORY[0x186DABFBC](v2, 0x1081C40A1D151D1);
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer(v1);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer::~PipelineLibraryJSONSerializer(MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE1AF8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer((id *)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE1AF8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer((id *)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE1AF8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer((id *)this);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer::getSerializedArray(MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8);
}

id MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer::finalize(MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer *this)
{
  id v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v1 = *(id *)(*((_QWORD *)this + 1) + 8);
  if (v1)
  {
    if (!*((_BYTE *)this + 128))
    {
      v2 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%u.%u"), 1, 0);
      v1 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("Offline Compilation"), CFSTR("type"), v2, CFSTR("version"), v1, CFSTR("contents"), 0);
    }
    v9 = 0;
    v1 = (id)objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v1, 1, &v9);
    if (!v1)
    {
      v4 = objc_msgSend(v9, "description");
      MTLReportFailure(0, "finalize", 1950, (uint64_t)CFSTR("serialization failed with error: %@"), v5, v6, v7, v8, v4);
    }
  }
  return v1;
}

uint64_t MTLPipelineLibrarySerializer::BinarySerializationContext::addLibrary(MTLPipelineLibrarySerializer::BinarySerializationContext *this, id *a2)
{
  MTLSerializer::Context *v4;
  MTLSerializer::DirectObjectListSerializer *PropertyListSerializer;
  uint64_t v6;
  uint64_t v7;
  MTLSerializer::ObjectListSerializer *v8;
  MTLSerializer::ObjectListSerializer *v9;
  unint64_t v10;
  MTLSerializer::ObjectListSerializer **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  MTLSerializer::ObjectListSerializer **v19;
  char *v20;
  char *v21;
  char *v22;
  MTLSerializer::ObjectListSerializer *v23;
  uint64_t result;

  v4 = (MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312);
  PropertyListSerializer = MTLSerializer::Context::CreatePropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 1u);
  **((_QWORD **)PropertyListSerializer + 6) = MTLSerializer::Context::CreateString(v4, (const char *)objc_msgSend(a2[1], "UTF8String"));
  v7 = *((_QWORD *)this + 36);
  v6 = *((_QWORD *)this + 37);
  v8 = MTLSerializer::ObjectListSerializer::FinalizeInternal(PropertyListSerializer);
  v9 = v8;
  v11 = (MTLSerializer::ObjectListSerializer **)*((_QWORD *)this + 37);
  v10 = *((_QWORD *)this + 38);
  if ((unint64_t)v11 >= v10)
  {
    v13 = *((_QWORD *)this + 36);
    v14 = ((uint64_t)v11 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v15 = v10 - v13;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 304, v17);
    else
      v18 = 0;
    v19 = (MTLSerializer::ObjectListSerializer **)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v9;
    v12 = v19 + 1;
    v22 = (char *)*((_QWORD *)this + 36);
    v21 = (char *)*((_QWORD *)this + 37);
    if (v21 != v22)
    {
      do
      {
        v23 = (MTLSerializer::ObjectListSerializer *)*((_QWORD *)v21 - 1);
        v21 -= 8;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = (char *)*((_QWORD *)this + 36);
    }
    *((_QWORD *)this + 36) = v19;
    *((_QWORD *)this + 37) = v12;
    *((_QWORD *)this + 38) = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v11 = v8;
    v12 = v11 + 1;
  }
  result = (v6 - v7) >> 3;
  *((_QWORD *)this + 37) = v12;
  return result;
}

MTLSerializer::DirectObjectListSerializer *MTLSerializer::Context::CreatePropertyListSerializer(MTLSerializer::Context *this, unsigned int a2)
{
  MTLSerializer::DirectObjectListSerializer *v4;
  unint64_t v5;
  MTLSerializer::DirectObjectListSerializer **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  MTLSerializer::DirectObjectListSerializer **v13;
  char *v14;
  char *v15;
  char *v16;
  MTLSerializer::DirectObjectListSerializer *v17;

  v4 = (MTLSerializer::DirectObjectListSerializer *)operator new();
  MTLSerializer::DirectObjectListSerializer::DirectObjectListSerializer(v4, a2);
  *(_QWORD *)v4 = &off_1E0FE1778;
  v5 = *((_QWORD *)this + 2);
  v6 = (MTLSerializer::DirectObjectListSerializer **)*((_QWORD *)this + 1);
  if ((unint64_t)v6 >= v5)
  {
    v8 = ((uint64_t)v6 - *(_QWORD *)this) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *(_QWORD *)this;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 16, v11);
    else
      v12 = 0;
    v13 = (MTLSerializer::DirectObjectListSerializer **)&v12[8 * v8];
    v14 = &v12[8 * v11];
    *v13 = v4;
    v7 = v13 + 1;
    v16 = *(char **)this;
    v15 = (char *)*((_QWORD *)this + 1);
    if (v15 != *(char **)this)
    {
      do
      {
        v17 = (MTLSerializer::DirectObjectListSerializer *)*((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = *(char **)this;
    }
    *(_QWORD *)this = v13;
    *((_QWORD *)this + 1) = v7;
    *((_QWORD *)this + 2) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 1) = v7;
  return v4;
}

void sub_1826A0CC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x1091C401AA4FD07);
  _Unwind_Resume(a1);
}

MTLSerializer::StringSerializer *MTLSerializer::Context::CreateString(MTLSerializer::Context *this, const char *a2)
{
  MTLSerializer::StringSerializer *v4;
  unint64_t v5;
  MTLSerializer::StringSerializer **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  MTLSerializer::StringSerializer **v13;
  char *v14;
  char *v15;
  char *v16;
  MTLSerializer::StringSerializer *v17;

  if (!a2)
    return 0;
  v4 = (MTLSerializer::StringSerializer *)operator new();
  MTLSerializer::StringSerializer::StringSerializer(v4, a2);
  v5 = *((_QWORD *)this + 2);
  v6 = (MTLSerializer::StringSerializer **)*((_QWORD *)this + 1);
  if ((unint64_t)v6 >= v5)
  {
    v8 = ((uint64_t)v6 - *(_QWORD *)this) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *(_QWORD *)this;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 16, v11);
    else
      v12 = 0;
    v13 = (MTLSerializer::StringSerializer **)&v12[8 * v8];
    v14 = &v12[8 * v11];
    *v13 = v4;
    v7 = v13 + 1;
    v16 = *(char **)this;
    v15 = (char *)*((_QWORD *)this + 1);
    if (v15 != *(char **)this)
    {
      do
      {
        v17 = (MTLSerializer::StringSerializer *)*((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = *(char **)this;
    }
    *(_QWORD *)this = v13;
    *((_QWORD *)this + 1) = v7;
    *((_QWORD *)this + 2) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 1) = v7;
  *((_QWORD *)v4 + 4) = *((_QWORD *)v4 + 2) - *((_QWORD *)v4 + 1);
  return v4;
}

void sub_1826A0E04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x1091C40510CC53ALL);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineLibrarySerializer::BinarySerializationContext::serializePipelineLibrary(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  uint64_t v1;
  void **v3;
  MTLSerializer::ObjectListSerializer *v4;
  MTLSerializer::ObjectListSerializer *v5;
  MTLSerializer::ObjectListSerializer *v6;
  MTLSerializer::ObjectListSerializer *v7;
  MTLSerializer::ObjectListSerializer *v8;
  MTLSerializer::ObjectListSerializer *v9;
  MTLSerializer::ObjectListSerializer *v10;
  MTLSerializer::ObjectListSerializer *v11;
  MTLSerializer::ObjectListSerializer *v12;
  MTLSerializer::ObjectListSerializer *v13;

  v1 = *((_QWORD *)this + 42);
  if (!v1)
  {
    v3 = (void **)((char *)this + 312);
    *((_QWORD *)this + 42) = MTLSerializer::Context::CreatePropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 0xBu);
    v4 = MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>(v3, (_QWORD *)this + 2);
    v5 = MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>(v3, (_QWORD *)this + 5);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 48) + 8) = v4;
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 48) + 40) = v5;
    v6 = MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>(v3, (_QWORD *)this + 9);
    v7 = MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>(v3, (_QWORD *)this + 12);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 48) + 16) = v6;
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 48) + 48) = v7;
    v8 = MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>(v3, (_QWORD *)this + 16);
    v9 = MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>(v3, (_QWORD *)this + 19);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 48) + 24) = v8;
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 48) + 56) = v9;
    v10 = MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>(v3, (_QWORD *)this + 23);
    v11 = MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>(v3, (_QWORD *)this + 26);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 48) + 32) = v10;
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 48) + 64) = v11;
    v12 = MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>(v3, (_QWORD *)this + 30);
    v13 = MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>(v3, (_QWORD *)this + 33);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 48) + 72) = v12;
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 48) + 80) = v13;
    **(_QWORD **)(*((_QWORD *)this + 42) + 48) = MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>(v3, (_QWORD *)this + 36);
    MTLSerializer::ObjectListSerializer::FinalizeInternal(*((MTLSerializer::ObjectListSerializer **)this + 42));
    v1 = *((_QWORD *)this + 42);
  }
  return *(_QWORD *)(v1 + 32);
}

MTLSerializer::ObjectListSerializer *MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>(void **a1, _QWORD *a2)
{
  MTLSerializer::DirectObjectListSerializer *v4;
  unint64_t v5;
  MTLSerializer::DirectObjectListSerializer **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  MTLSerializer::DirectObjectListSerializer **v13;
  char *v14;
  char *v15;
  char *v16;
  MTLSerializer::DirectObjectListSerializer *v17;

  v4 = (MTLSerializer::DirectObjectListSerializer *)operator new();
  MTLSerializer::ObjectArraySerializer<MTLSerializer::ObjectRef>::ObjectArraySerializer(v4, a2);
  v5 = (unint64_t)a1[2];
  v6 = (MTLSerializer::DirectObjectListSerializer **)a1[1];
  if ((unint64_t)v6 >= v5)
  {
    v8 = ((char *)v6 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v9 = v5 - (_QWORD)*a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v13 = (MTLSerializer::DirectObjectListSerializer **)&v12[8 * v8];
    v14 = &v12[8 * v11];
    *v13 = v4;
    v7 = v13 + 1;
    v16 = (char *)*a1;
    v15 = (char *)a1[1];
    if (v15 != *a1)
    {
      do
      {
        v17 = (MTLSerializer::DirectObjectListSerializer *)*((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v7;
    a1[2] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[1] = v7;
  return MTLSerializer::ObjectListSerializer::FinalizeInternal(v4);
}

void sub_1826A1094(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x1091C401AA4FD07);
  _Unwind_Resume(a1);
}

MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::PipelineLibraryBinarySerializer(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this)
{
  uint64_t v2;

  *(_QWORD *)MTLPipelineLibrarySerializer::PipelineLibrarySerializer::PipelineLibrarySerializer(this) = &off_1E0FE1B90;
  v2 = operator new();
  *(_QWORD *)v2 = &off_1E0FE19B8;
  *(_DWORD *)(v2 + 8) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_DWORD *)(v2 + 64) = 0;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_DWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_DWORD *)(v2 + 176) = 0;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_DWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 336) = 0;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *((_QWORD *)this + 1) = v2;
  return this;
}

void sub_1826A1160(_Unwind_Exception *a1)
{
  id *v1;

  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer(v1);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::~PipelineLibraryBinarySerializer(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE1B90;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer((id *)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE1B90;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer((id *)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE1B90;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer((id *)this);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::getTotalSize(MTLPipelineLibrarySerializer::BinarySerializationContext **this)
{
  return MTLPipelineLibrarySerializer::BinarySerializationContext::serializePipelineLibrary(this[1]);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::writeToMemory(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this, char *a2, unint64_t a3)
{
  MTLPipelineLibrarySerializer::BinarySerializationContext *v5;

  v5 = (MTLPipelineLibrarySerializer::BinarySerializationContext *)*((_QWORD *)this + 1);
  if (MTLPipelineLibrarySerializer::BinarySerializationContext::serializePipelineLibrary(v5) <= a3)
    return (*(uint64_t (**)(_QWORD *, char *, unint64_t))(**((_QWORD **)v5 + 42) + 16))(*((_QWORD **)v5 + 42), a2, a3);
  else
    return 0;
}

void *MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::finalize(MTLPipelineLibrarySerializer::BinarySerializationContext **this)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  MTLPipelineLibrarySerializer::BinarySerializationContext *v5;
  uint64_t v6;

  v2 = MTLPipelineLibrarySerializer::BinarySerializationContext::serializePipelineLibrary(this[1]);
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", v2);
  v4 = objc_msgSend(v3, "bytes");
  v5 = this[1];
  if (MTLPipelineLibrarySerializer::BinarySerializationContext::serializePipelineLibrary(v5) <= v2)
    v6 = (*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(**((_QWORD **)v5 + 42) + 16))(*((_QWORD **)v5 + 42), v4, v2);
  else
    v6 = 0;
  if (v6 != v2)
  {

    return 0;
  }
  return v3;
}

dispatch_data_t MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeWithNameObjectSerializer(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *a1, _QWORD *a2)
{
  _QWORD *v4;
  size_t v5;
  void *v6;

  (*(void (**)(_QWORD *))(*a2 + 56))(a2);
  v4 = (_QWORD *)a2[2];
  v5 = v4[4];
  v6 = malloc_type_malloc(v5, 0xEC489865uLL);
  (*(void (**)(_QWORD *, void *, size_t))(*v4 + 16))(v4, v6, v5);
  MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::resetContext(a1);
  return dispatch_data_create(v6, v5, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
}

double MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::resetContext(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = operator new();
  *(_QWORD *)v3 = &off_1E0FE19B8;
  *(_DWORD *)(v3 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 0;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_DWORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_DWORD *)(v3 + 176) = 0;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 336) = 0;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *((_QWORD *)this + 1) = v3;
  return result;
}

dispatch_data_t MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this, MTLRenderPipelineDescriptor *a2)
{
  _QWORD *v4;
  MTLRenderPipelineDescriptor *v5;
  NSArray *vertexPreloadedLibraries;
  NSArray *fragmentPreloadedLibraries;
  dispatch_data_t v8;

  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeRenderPipelineDescriptorInternal(this, (uint64_t)v4, (uint64_t)a2);
  v5 = a2 + 1;
  vertexPreloadedLibraries = v5[5]._vertexPreloadedLibraries;
  if (vertexPreloadedLibraries)
    (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v4 + 32))(v4, 1, -[NSArray functionRef](vertexPreloadedLibraries, "functionRef"), -1);
  fragmentPreloadedLibraries = v5[5]._fragmentPreloadedLibraries;
  if (fragmentPreloadedLibraries)
    (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v4 + 32))(v4, 2, -[NSArray functionRef](fragmentPreloadedLibraries, "functionRef"), -1);
  v8 = MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeWithNameObjectSerializer(this, v4);
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  return v8;
}

void sub_1826A1558(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

dispatch_data_t MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeComputePipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this, MTLComputePipelineDescriptor *a2)
{
  _QWORD *v4;
  NSArray *insertLibraries;
  dispatch_data_t v6;

  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeComputePipelineDescriptorInternal(this, (uint64_t)v4, (uint64_t)a2);
  insertLibraries = a2[1]._insertLibraries;
  if (insertLibraries)
    (*(void (**)(_QWORD *, _QWORD, _QWORD, uint64_t))(*v4 + 32))(v4, 0, -[NSArray functionRef](insertLibraries, "functionRef"), -1);
  v6 = MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeWithNameObjectSerializer(this, v4);
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  return v6;
}

void sub_1826A1630(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

dispatch_data_t MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this, MTLTileRenderPipelineDescriptor *a2)
{
  _QWORD *v4;
  void *maxCallStackDepth;
  dispatch_data_t v6;

  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1));
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeTileRenderPipelineDescriptorInternal(this, (uint64_t)v4, (uint64_t)a2);
  maxCallStackDepth = (void *)a2[1]._maxCallStackDepth;
  if (maxCallStackDepth)
    (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v4 + 32))(v4, 1, objc_msgSend(maxCallStackDepth, "functionRef"), -1);
  v6 = MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeWithNameObjectSerializer(this, v4);
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  return v6;
}

void sub_1826A1704(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

dispatch_data_t MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this, MTLMeshRenderPipelineDescriptor *a2)
{
  _QWORD *v4;
  const MTLMeshRenderPipelineDescriptorPrivate *v5;
  MTLFunction *objectFunction;
  MTLFunction *meshFunction;
  MTLFunction *fragmentFunction;
  dispatch_data_t v9;

  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1));
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeMeshRenderPipelineDescriptorInternal(this, (uint64_t)v4, a2);
  v5 = -[MTLMeshRenderPipelineDescriptor _descriptorPrivate](a2, "_descriptorPrivate");
  objectFunction = v5->objectFunction;
  if (objectFunction)
    (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v4 + 32))(v4, 1, -[MTLFunction functionRef](objectFunction, "functionRef"), -1);
  meshFunction = v5->meshFunction;
  if (meshFunction)
    (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v4 + 32))(v4, 2, -[MTLFunction functionRef](meshFunction, "functionRef"), -1);
  fragmentFunction = v5->fragmentFunction;
  if (fragmentFunction)
    (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v4 + 32))(v4, 3, -[MTLFunction functionRef](fragmentFunction, "functionRef"), -1);
  v9 = MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeWithNameObjectSerializer(this, v4);
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  return v9;
}

void sub_1826A1824(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::deserializeStageInputDescriptor(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *result;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 *v13;
  int v14;
  size_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  void *v22;
  unsigned __int8 *v23;
  int v24;
  size_t v25;
  size_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  size_t v35;
  uint64_t v36;
  unsigned __int8 *v37[2];
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  size_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int __dst;

  v37[0] = a3;
  v37[1] = a4;
  result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v29, v37);
  if (v32 < v31)
  {
    while (1)
    {
      switch(v34)
      {
        case 0:
          result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v29);
          v27 = result;
          v28 = v6;
          if (!result)
            goto LABEL_49;
          if (v6 <= 3)
            goto LABEL_53;
          v7 = *(_DWORD *)result;
          if (!*(_DWORD *)result)
            goto LABEL_49;
          v8 = 0;
          do
          {
            result = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v27, v8);
            if (result)
            {
              v10 = result;
              v11 = v9;
              v12 = (void *)objc_msgSend(a2, "attributes");
              v46 = v10;
              v47 = v11;
              result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v38, &v46);
              if (v41 < v40)
              {
                v13 = 0;
                v14 = v43;
                while (1)
                {
                  switch(v14)
                  {
                    case 0:
                      __dst = 0;
                      if (v44 + v45 > v39)
                        goto LABEL_53;
                      memcpy(&__dst, (const void *)(v38 + v45), v44);
                      result = (unsigned __int8 *)objc_msgSend(v12, "objectAtIndexedSubscript:", __dst);
                      v13 = result;
                      break;
                    case 1:
                      __dst = 0;
                      if (v44 + v45 > v39)
                        goto LABEL_53;
                      memcpy(&__dst, (const void *)(v38 + v45), v44);
                      result = (unsigned __int8 *)objc_msgSend(v13, "setFormat:", __dst);
                      break;
                    case 2:
                      __dst = 0;
                      if (v44 + v45 > v39)
                        goto LABEL_53;
                      memcpy(&__dst, (const void *)(v38 + v45), v44);
                      result = (unsigned __int8 *)objc_msgSend(v13, "setOffset:", __dst);
                      break;
                    case 3:
                      __dst = 0;
                      if (v44 + v45 > v39)
                        goto LABEL_53;
                      memcpy(&__dst, (const void *)(v38 + v45), v44);
                      result = (unsigned __int8 *)objc_msgSend(v13, "setBufferIndex:", __dst);
                      break;
                    default:
                      break;
                  }
                  if (++v41 >= v40)
                    break;
                  if (v42 + 2 > v39)
                    goto LABEL_53;
                  v14 = *(unsigned __int8 *)(v38 + v42);
                  v15 = *(unsigned __int8 *)(v38 + v42 + 1);
                  v43 = v14;
                  v44 = v15;
                  v45 = v42 + 2;
                  v42 += 2 + v15;
                }
              }
            }
            ++v8;
          }
          while (v8 != v7);
          goto LABEL_49;
        case 1:
          result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v29);
          v27 = result;
          v28 = v16;
          if (!result)
            goto LABEL_49;
          if (v16 <= 3)
            goto LABEL_53;
          v17 = *(_DWORD *)result;
          if (!*(_DWORD *)result)
            goto LABEL_49;
          v18 = 0;
          break;
        case 2:
          LODWORD(v38) = 0;
          if (v35 + v36 > v30)
            goto LABEL_53;
          memcpy(&v38, (const void *)(v29 + v36), v35);
          result = (unsigned __int8 *)objc_msgSend(a2, "setIndexType:", v38);
          goto LABEL_49;
        case 3:
          LODWORD(v38) = 0;
          if (v35 + v36 > v30)
            goto LABEL_53;
          memcpy(&v38, (const void *)(v29 + v36), v35);
          result = (unsigned __int8 *)objc_msgSend(a2, "setIndexBufferIndex:", v38);
          goto LABEL_49;
        default:
          goto LABEL_49;
      }
      do
      {
        result = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v27, v18);
        if (result)
        {
          v20 = result;
          v21 = v19;
          v22 = (void *)objc_msgSend(a2, "layouts");
          v46 = v20;
          v47 = v21;
          result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v38, &v46);
          if (v41 < v40)
          {
            v23 = 0;
            v24 = v43;
            while (1)
            {
              switch(v24)
              {
                case 0:
                  __dst = 0;
                  if (v44 + v45 > v39)
                    goto LABEL_53;
                  memcpy(&__dst, (const void *)(v38 + v45), v44);
                  result = (unsigned __int8 *)objc_msgSend(v22, "objectAtIndexedSubscript:", __dst);
                  v23 = result;
                  break;
                case 1:
                  __dst = 0;
                  if (v44 + v45 > v39)
                    goto LABEL_53;
                  memcpy(&__dst, (const void *)(v38 + v45), v44);
                  result = (unsigned __int8 *)objc_msgSend(v23, "setStepFunction:", __dst);
                  break;
                case 2:
                  __dst = 0;
                  if (v44 + v45 > v39)
                    goto LABEL_53;
                  memcpy(&__dst, (const void *)(v38 + v45), v44);
                  result = (unsigned __int8 *)objc_msgSend(v23, "setStepRate:", __dst);
                  break;
                case 3:
                  __dst = 0;
                  if (v44 + v45 > v39)
                    goto LABEL_53;
                  memcpy(&__dst, (const void *)(v38 + v45), v44);
                  result = (unsigned __int8 *)objc_msgSend(v23, "setStride:", __dst);
                  break;
                default:
                  break;
              }
              if (++v41 >= v40)
                break;
              if (v42 + 2 > v39)
                goto LABEL_53;
              v24 = *(unsigned __int8 *)(v38 + v42);
              v25 = *(unsigned __int8 *)(v38 + v42 + 1);
              v43 = v24;
              v44 = v25;
              v45 = v42 + 2;
              v42 += 2 + v25;
            }
          }
        }
        ++v18;
      }
      while (v18 != v17);
LABEL_49:
      if (++v32 >= v31)
        break;
      if (v33 + 2 > v30)
LABEL_53:
        abort();
      v26 = *(unsigned __int8 *)(v29 + v33 + 1);
      v34 = *(unsigned __int8 *)(v29 + v33);
      v35 = v26;
      v36 = v33 + 2;
      v33 += 2 + v26;
    }
  }
  return result;
}

unsigned __int8 *MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::deserializeVertexDescriptor(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *result;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 *v13;
  int v14;
  size_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  void *v22;
  unsigned __int8 *v23;
  int v24;
  size_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  _QWORD v29[2];
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36[2];
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  size_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned int __dst;

  v36[0] = a3;
  v36[1] = a4;
  result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)v29, v36);
  if (v31 < v30)
  {
    while (1)
    {
      if (v33 == 1)
      {
        result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)v29);
        v27 = result;
        v28 = v16;
        if (result)
        {
          if (v16 <= 3)
            goto LABEL_49;
          v17 = *(_DWORD *)result;
          if (*(_DWORD *)result)
          {
            v18 = 0;
            do
            {
              result = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v27, v18);
              if (result)
              {
                v20 = result;
                v21 = v19;
                v22 = (void *)objc_msgSend(a2, "layouts");
                v45 = v20;
                v46 = v21;
                result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v37, &v45);
                if (v40 < v39)
                {
                  v23 = 0;
                  v24 = v42;
                  while (1)
                  {
                    switch(v24)
                    {
                      case 0:
                        __dst = 0;
                        if (v43 + v44 > v38)
                          goto LABEL_49;
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        result = (unsigned __int8 *)objc_msgSend(v22, "objectAtIndexedSubscript:", __dst);
                        v23 = result;
                        break;
                      case 1:
                        __dst = 0;
                        if (v43 + v44 > v38)
                          goto LABEL_49;
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        result = (unsigned __int8 *)objc_msgSend(v23, "setStepFunction:", __dst);
                        break;
                      case 2:
                        __dst = 0;
                        if (v43 + v44 > v38)
                          goto LABEL_49;
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        result = (unsigned __int8 *)objc_msgSend(v23, "setStepRate:", __dst);
                        break;
                      case 3:
                        __dst = 0;
                        if (v43 + v44 > v38)
                          goto LABEL_49;
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        result = (unsigned __int8 *)objc_msgSend(v23, "setStride:", __dst);
                        break;
                      default:
                        break;
                    }
                    if (++v40 >= v39)
                      break;
                    if (v41 + 2 > v38)
                      goto LABEL_49;
                    v24 = *(unsigned __int8 *)(v37 + v41);
                    v25 = *(unsigned __int8 *)(v37 + v41 + 1);
                    v42 = v24;
                    v43 = v25;
                    v44 = v41 + 2;
                    v41 += 2 + v25;
                  }
                }
              }
              ++v18;
            }
            while (v18 != v17);
          }
        }
      }
      else if (!v33)
      {
        result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)v29);
        v27 = result;
        v28 = v6;
        if (result)
        {
          if (v6 <= 3)
            goto LABEL_49;
          v7 = *(_DWORD *)result;
          if (*(_DWORD *)result)
          {
            v8 = 0;
            do
            {
              result = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v27, v8);
              if (result)
              {
                v10 = result;
                v11 = v9;
                v12 = (void *)objc_msgSend(a2, "attributes");
                v45 = v10;
                v46 = v11;
                result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v37, &v45);
                if (v40 < v39)
                {
                  v13 = 0;
                  v14 = v42;
                  while (1)
                  {
                    switch(v14)
                    {
                      case 0:
                        __dst = 0;
                        if (v43 + v44 > v38)
                          goto LABEL_49;
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        result = (unsigned __int8 *)objc_msgSend(v12, "objectAtIndexedSubscript:", __dst);
                        v13 = result;
                        break;
                      case 1:
                        __dst = 0;
                        if (v43 + v44 > v38)
                          goto LABEL_49;
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        result = (unsigned __int8 *)objc_msgSend(v13, "setFormat:", __dst);
                        break;
                      case 2:
                        __dst = 0;
                        if (v43 + v44 > v38)
                          goto LABEL_49;
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        result = (unsigned __int8 *)objc_msgSend(v13, "setOffset:", __dst);
                        break;
                      case 3:
                        __dst = 0;
                        if (v43 + v44 > v38)
                          goto LABEL_49;
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        result = (unsigned __int8 *)objc_msgSend(v13, "setBufferIndex:", __dst);
                        break;
                      default:
                        break;
                    }
                    if (++v40 >= v39)
                      break;
                    if (v41 + 2 > v38)
                      goto LABEL_49;
                    v14 = *(unsigned __int8 *)(v37 + v41);
                    v15 = *(unsigned __int8 *)(v37 + v41 + 1);
                    v42 = v14;
                    v43 = v15;
                    v44 = v41 + 2;
                    v41 += 2 + v15;
                  }
                }
              }
              ++v8;
            }
            while (v8 != v7);
          }
        }
      }
      if (++v31 >= v30)
        break;
      if ((unint64_t)(v32 + 2) > v29[1])
LABEL_49:
        abort();
      v26 = *(unsigned __int8 *)(v29[0] + v32 + 1);
      v33 = *(unsigned __int8 *)(v29[0] + v32);
      v34 = v26;
      v35 = v32 + 2;
      v32 += 2 + v26;
    }
  }
  return result;
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newComputePipelineDescriptor(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  void *v5;
  uint64_t PropertyAsObject;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unsigned __int8 *v10;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  void *v16;
  _DWORD *v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned __int8 *Object;
  unsigned __int8 *v22;
  size_t v23;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  size_t v33;
  uint64_t v34;

  if (!*a2)
    return 0;
  v4 = (void *)objc_opt_new();
  MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v27, a2);
  if (v30 < v29)
  {
    while (1)
    {
      switch(v32)
      {
        case 0:
          v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v27);
          objc_msgSend(v4, "setComputeFunction:", v5);
          goto LABEL_32;
        case 1:
          LODWORD(v25) = 0;
          if (v33 + v34 > v28)
            goto LABEL_39;
          memcpy(&v25, (const void *)(v27 + v34), v33);
          objc_msgSend(v4, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", (_DWORD)v25 != 0);
          goto LABEL_33;
        case 2:
          PropertyAsObject = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v27);
          v8 = v7;
          v9 = objc_alloc(MEMORY[0x1E0CB3940]);
          if (!PropertyAsObject)
            goto LABEL_31;
          if (!v8)
            goto LABEL_39;
          v10 = (unsigned __int8 *)PropertyAsObject;
          break;
        case 3:
          v12 = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v27);
          if (v12)
          {
            v14 = (unsigned __int8 *)v12;
            v15 = v13;
            v16 = (void *)objc_msgSend(v4, "stageInputDescriptor");
            MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::deserializeStageInputDescriptor((uint64_t)v16, v16, v14, v15);
          }
          else
          {
            objc_msgSend(v4, "setStageInputDescriptor:", 0);
          }
          goto LABEL_33;
        case 6:
          v17 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v27);
          v25 = v17;
          v26 = v18;
          if (!v17)
            goto LABEL_33;
          if (v18 <= 3)
            goto LABEL_39;
          v19 = *v17;
          if (*v17)
          {
            v20 = 0;
            do
            {
              Object = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v25, v20);
              if (Object)
                MTLPipelineLibrarySerializer::deserializeBuffers((void *)objc_msgSend(v4, "buffers", v25, v26), Object, v22);
              ++v20;
            }
            while (v19 != v20);
          }
          goto LABEL_33;
        case 7:
          LODWORD(v25) = 0;
          if (v33 + v34 > v28)
            goto LABEL_39;
          memcpy(&v25, (const void *)(v27 + v34), v33);
          objc_msgSend(v4, "setSupportIndirectCommandBuffers:", (_DWORD)v25 != 0);
          goto LABEL_33;
        case 8:
          LODWORD(v25) = 0;
          if (v33 + v34 > v28)
            goto LABEL_39;
          memcpy(&v25, (const void *)(v27 + v34), v33);
          objc_msgSend(v4, "setMaxTotalThreadsPerThreadgroup:", v25);
          goto LABEL_33;
        case 10:
          LODWORD(v25) = 0;
          if (v33 + v34 > v28)
            goto LABEL_39;
          memcpy(&v25, (const void *)(v27 + v34), v33);
          objc_msgSend(v4, "setTextureWriteRoundingMode:", v25);
          goto LABEL_33;
        case 12:
          LODWORD(v25) = 0;
          if (v33 + v34 > v28)
            goto LABEL_39;
          memcpy(&v25, (const void *)(v27 + v34), v33);
          objc_msgSend(v4, "setNeedsCustomBorderColorSamplers:", (_DWORD)v25 != 0);
          goto LABEL_33;
        default:
          goto LABEL_33;
      }
      while (*v10++)
      {
        if (!--v8)
          goto LABEL_39;
      }
LABEL_31:
      v5 = (void *)objc_msgSend(v9, "initWithUTF8String:", PropertyAsObject, v25);
      objc_msgSend(v4, "setLabel:", v5);
LABEL_32:

LABEL_33:
      if (++v30 >= v29)
        break;
      if (v31 + 2 > v28)
LABEL_39:
        abort();
      v23 = *(unsigned __int8 *)(v27 + v31 + 1);
      v32 = *(unsigned __int8 *)(v27 + v31);
      v33 = v23;
      v34 = v31 + 2;
      v31 += 2 + v23;
    }
  }
  return v4;
}

uint64_t MTLPipelineLibrarySerializer::deserializeBuffers(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result;
  void *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  uint64_t v14;
  unsigned __int8 *v15[2];
  unsigned int __dst;

  v15[0] = a2;
  v15[1] = a3;
  result = MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v7, v15);
  if (v10 < v9)
  {
    v5 = 0;
    while (1)
    {
      if (v12 == 1)
      {
        __dst = 0;
        if (v13 + v14 > v8)
          goto LABEL_13;
        memcpy(&__dst, (const void *)(v7 + v14), v13);
        result = objc_msgSend(v5, "setMutability:", __dst);
      }
      else if (!v12)
      {
        __dst = 0;
        if (v13 + v14 > v8)
          goto LABEL_13;
        memcpy(&__dst, (const void *)(v7 + v14), v13);
        result = objc_msgSend(a1, "objectAtIndexedSubscript:", __dst);
        v5 = (void *)result;
      }
      if (++v10 >= v9)
        break;
      if (v11 + 2 > v8)
LABEL_13:
        abort();
      v6 = *(unsigned __int8 *)(v7 + v11 + 1);
      v12 = *(unsigned __int8 *)(v7 + v11);
      v13 = v6;
      v14 = v11 + 2;
      v11 += 2 + v6;
    }
  }
  return result;
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newTileRenderPipelineDescriptor(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t PropertyAsObject;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unsigned __int8 *v9;
  void *v11;
  int *v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  void *v20;
  void *v21;
  int v22;
  size_t v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unsigned __int8 *Object;
  unsigned __int8 *v29;
  size_t v30;
  _QWORD v32[2];
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  size_t v39;
  uint64_t v40;
  _DWORD *__dst;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  size_t v47;
  uint64_t v48;
  unsigned __int8 *v49[2];
  unsigned int v50;

  if (!*a2)
    return 0;
  v4 = (void *)objc_opt_new();
  MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v33, a2);
  if (v36 < v35)
  {
    while (1)
    {
      switch(v38)
      {
        case 0:
          PropertyAsObject = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v33);
          v7 = v6;
          v8 = objc_alloc(MEMORY[0x1E0CB3940]);
          if (!PropertyAsObject)
            goto LABEL_45;
          if (!v7)
            goto LABEL_52;
          v9 = (unsigned __int8 *)PropertyAsObject;
          while (*v9++)
          {
            if (!--v7)
              goto LABEL_52;
          }
LABEL_45:
          v11 = (void *)objc_msgSend(v8, "initWithUTF8String:", PropertyAsObject);
          objc_msgSend(v4, "setLabel:", v11);
LABEL_46:

          goto LABEL_47;
        case 1:
          v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v33);
          objc_msgSend(v4, "setTileFunction:", v11);
          goto LABEL_46;
        case 2:
          LODWORD(__dst) = 0;
          if (v39 + v40 > v34)
            goto LABEL_52;
          memcpy(&__dst, (const void *)(v33 + v40), v39);
          objc_msgSend(v4, "setRasterSampleCount:", __dst);
          goto LABEL_47;
        case 3:
          v12 = (int *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v33);
          v32[0] = v12;
          v32[1] = v13;
          if (!v12)
            goto LABEL_47;
          if (v13 <= 3)
            goto LABEL_52;
          v14 = *v12;
          if (!*v12)
            goto LABEL_47;
          v15 = 0;
          break;
        case 4:
          LODWORD(__dst) = 0;
          if (v39 + v40 > v34)
            goto LABEL_52;
          memcpy(&__dst, (const void *)(v33 + v40), v39);
          objc_msgSend(v4, "setThreadgroupSizeMatchesTileSize:", (_DWORD)__dst != 0);
          goto LABEL_47;
        case 5:
          v24 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v33);
          __dst = v24;
          v42 = v25;
          if (!v24)
            goto LABEL_47;
          if (v25 <= 3)
            goto LABEL_52;
          v26 = *v24;
          if (*v24)
          {
            v27 = 0;
            do
            {
              Object = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&__dst, v27);
              if (Object)
                MTLPipelineLibrarySerializer::deserializeBuffers((void *)objc_msgSend(v4, "tileBuffers"), Object, v29);
              ++v27;
            }
            while (v26 != v27);
          }
          goto LABEL_47;
        case 6:
          LODWORD(__dst) = 0;
          if (v39 + v40 > v34)
            goto LABEL_52;
          memcpy(&__dst, (const void *)(v33 + v40), v39);
          objc_msgSend(v4, "setMaxTotalThreadsPerThreadgroup:", __dst);
          goto LABEL_47;
        case 8:
          LODWORD(__dst) = 0;
          if (v39 + v40 > v34)
            goto LABEL_52;
          memcpy(&__dst, (const void *)(v33 + v40), v39);
          objc_msgSend(v4, "setTextureWriteRoundingMode:", __dst);
          goto LABEL_47;
        default:
          goto LABEL_47;
      }
      do
      {
        v16 = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v32, v15);
        if (v16)
        {
          v18 = (unsigned __int8 *)v16;
          v19 = v17;
          v20 = (void *)objc_msgSend(v4, "colorAttachments");
          v49[0] = v18;
          v49[1] = v19;
          MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&__dst, v49);
          if (v44 < v43)
          {
            v21 = 0;
            v22 = v46;
            while (1)
            {
              if (v22 == 1)
              {
                v50 = 0;
                if (v47 + v48 > v42)
                  goto LABEL_52;
                memcpy(&v50, (char *)__dst + v48, v47);
                objc_msgSend(v21, "setPixelFormat:", v50);
              }
              else if (!v22)
              {
                v50 = 0;
                if (v47 + v48 > v42)
                  goto LABEL_52;
                memcpy(&v50, (char *)__dst + v48, v47);
                v21 = (void *)objc_msgSend(v20, "objectAtIndexedSubscript:", v50);
              }
              if (++v44 >= v43)
                break;
              if (v45 + 2 > v42)
                goto LABEL_52;
              v22 = *((unsigned __int8 *)__dst + v45);
              v23 = *((unsigned __int8 *)__dst + v45 + 1);
              v46 = v22;
              v47 = v23;
              v48 = v45 + 2;
              v45 += 2 + v23;
            }
          }
        }
        ++v15;
      }
      while (v15 != v14);
LABEL_47:
      if (++v36 >= v35)
        break;
      if (v37 + 2 > v34)
LABEL_52:
        abort();
      v30 = *(unsigned __int8 *)(v33 + v37 + 1);
      v38 = *(unsigned __int8 *)(v33 + v37);
      v39 = v30;
      v40 = v37 + 2;
      v37 += 2 + v30;
    }
  }
  return v4;
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newMeshRenderPipelineDescriptor(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  uint64_t PropertyAsObject;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unsigned __int8 *v9;
  void *v11;
  _DWORD *v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned __int8 *Object;
  unsigned __int8 *v17;
  _DWORD *v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  _DWORD *v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  double v36;
  size_t v37;
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  size_t v47;
  uint64_t v48;

  if (!*a2)
    return 0;
  v4 = (void *)objc_opt_new();
  MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v41, a2);
  if (v44 < v43)
  {
    while (1)
    {
      switch(v46)
      {
        case 0:
          PropertyAsObject = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v41);
          v7 = v6;
          v8 = objc_alloc(MEMORY[0x1E0CB3940]);
          if (!PropertyAsObject)
            goto LABEL_107;
          if (!v7)
            goto LABEL_114;
          v9 = (unsigned __int8 *)PropertyAsObject;
          break;
        case 1:
          v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v41);
          objc_msgSend(v4, "setObjectFunction:", v11);
          goto LABEL_108;
        case 2:
          v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v41);
          objc_msgSend(v4, "setMeshFunction:", v11);
          goto LABEL_108;
        case 3:
          v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v41);
          objc_msgSend(v4, "setFragmentFunction:", v11);
          goto LABEL_108;
        case 4:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setMaxTotalThreadsPerObjectThreadgroup:", v39);
          goto LABEL_109;
        case 5:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setMaxTotalThreadsPerMeshThreadgroup:", v39);
          goto LABEL_109;
        case 6:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 7:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 8:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setPayloadMemoryLength:", v39);
          goto LABEL_109;
        case 9:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setMaxTotalThreadgroupsPerMeshGrid:", v39);
          goto LABEL_109;
        case 10:
          v12 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v41);
          v39 = v12;
          v40 = v13;
          if (!v12)
            goto LABEL_109;
          if (v13 <= 3)
            goto LABEL_114;
          v14 = *v12;
          if (*v12)
          {
            v15 = 0;
            do
            {
              Object = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v39, v15);
              if (Object)
                MTLPipelineLibrarySerializer::deserializeBuffers((void *)objc_msgSend(v4, "objectBuffers", v39, v40), Object, v17);
              ++v15;
            }
            while (v14 != v15);
          }
          goto LABEL_109;
        case 11:
          v18 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v41);
          v39 = v18;
          v40 = v19;
          if (!v18)
            goto LABEL_109;
          if (v19 <= 3)
            goto LABEL_114;
          v20 = *v18;
          if (*v18)
          {
            v21 = 0;
            do
            {
              v22 = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v39, v21);
              if (v22)
                MTLPipelineLibrarySerializer::deserializeBuffers((void *)objc_msgSend(v4, "meshBuffers", v39, v40), v22, v23);
              ++v21;
            }
            while (v20 != v21);
          }
          goto LABEL_109;
        case 12:
          v24 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v41);
          v39 = v24;
          v40 = v25;
          if (!v24)
            goto LABEL_109;
          if (v25 <= 3)
            goto LABEL_114;
          v26 = *v24;
          if (*v24)
          {
            v27 = 0;
            do
            {
              v28 = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v39, v27);
              if (v28)
                MTLPipelineLibrarySerializer::deserializeBuffers((void *)objc_msgSend(v4, "fragmentBuffers", v39, v40), v28, v29);
              ++v27;
            }
            while (v26 != v27);
          }
          goto LABEL_109;
        case 13:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setRasterSampleCount:", v39);
          goto LABEL_109;
        case 14:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setAlphaToCoverageEnabled:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 15:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setAlphaToOneEnabled:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 16:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setRasterizationEnabled:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 18:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setMaxVertexAmplificationCount:", v39);
          goto LABEL_109;
        case 19:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setVertexAmplificationMode:", v39);
          goto LABEL_109;
        case 20:
          v30 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v41);
          v39 = v30;
          v40 = v31;
          if (!v30)
            goto LABEL_109;
          if (v31 <= 3)
            goto LABEL_114;
          v32 = *v30;
          if (*v30)
          {
            v33 = 0;
            do
            {
              v34 = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v39, v33);
              if (v34)
                MTLPipelineLibrarySerializer::deserializeColorAttachments((void *)objc_msgSend(v4, "colorAttachments", v39, v40), v34, v35);
              ++v33;
            }
            while (v32 != v33);
          }
          goto LABEL_109;
        case 21:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setDepthAttachmentPixelFormat:", v39);
          goto LABEL_109;
        case 22:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setStencilAttachmentPixelFormat:", v39);
          goto LABEL_109;
        case 23:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setSupportIndirectCommandBuffers:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 27:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setSampleMask:", v39);
          goto LABEL_109;
        case 28:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          LODWORD(v36) = (_DWORD)v39;
          objc_msgSend(v4, "setSampleCoverage:", v36);
          goto LABEL_109;
        case 29:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setTextureWriteRoundingMode:", v39);
          goto LABEL_109;
        case 30:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setAlphaTestEnabled:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 31:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setAlphaTestFunction:", v39);
          goto LABEL_109;
        case 32:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setLogicOperationEnabled:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 33:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setClipDistanceEnableMask:", v39);
          goto LABEL_109;
        case 34:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setPointSmoothEnabled:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 35:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setPointCoordLowerLeft:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 36:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setPointSizeOutputVS:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 37:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setTwoSideEnabled:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 38:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setFragmentDepthCompareClampMask:", v39);
          goto LABEL_109;
        case 39:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setLogicOperation:", v39);
          goto LABEL_109;
        case 40:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setDepthStencilWriteDisabled:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 41:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setNeedsCustomBorderColorSamplers:", (_DWORD)v39 != 0);
          goto LABEL_109;
        case 58:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42)
            goto LABEL_114;
          memcpy(&v39, (const void *)(v41 + v48), v47);
          objc_msgSend(v4, "setExplicitVisibilityGroupID:", v39);
          goto LABEL_109;
        default:
          goto LABEL_109;
      }
      while (*v9++)
      {
        if (!--v7)
          goto LABEL_114;
      }
LABEL_107:
      v11 = (void *)objc_msgSend(v8, "initWithUTF8String:", PropertyAsObject, v39);
      objc_msgSend(v4, "setLabel:", v11);
LABEL_108:

LABEL_109:
      if (++v44 >= v43)
        break;
      if (v45 + 2 > v42)
LABEL_114:
        abort();
      v37 = *(unsigned __int8 *)(v41 + v45 + 1);
      v46 = *(unsigned __int8 *)(v41 + v45);
      v47 = v37;
      v48 = v45 + 2;
      v45 += 2 + v37;
    }
  }
  return v4;
}

dispatch_data_t MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate::serializeComputePipelineDescriptor(MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *this, MTLComputePipelineDescriptor *a2)
{
  return MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeComputePipelineDescriptor((MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *)((char *)this + 8), a2);
}

dispatch_data_t MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate::serializeRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *this, MTLRenderPipelineDescriptor *a2)
{
  return MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeRenderPipelineDescriptor((MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *)((char *)this + 8), a2);
}

dispatch_data_t MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate::serializeTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *this, MTLTileRenderPipelineDescriptor *a2)
{
  return MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeTileRenderPipelineDescriptor((MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *)((char *)this + 8), a2);
}

dispatch_data_t MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate::serializeMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *this, MTLMeshRenderPipelineDescriptor *a2)
{
  return MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeMeshRenderPipelineDescriptor((MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *)((char *)this + 8), a2);
}

_QWORD *MTLPipelineLibrarySerializer::PipelineDescriptorSerializer::create(MTLPipelineLibrarySerializer::PipelineDescriptorSerializer *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE1C00;
  MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::PipelineLibraryBinarySerializer((MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *)(v1 + 1));
  return v1;
}

void sub_1826A34AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C402102F06BLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::PipelineDescriptorDeserializer(_QWORD *a1, void *a2)
{
  *a1 = &off_1E0FE1B68;
  a1[1] = a2;
  return a1;
}

void MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::~PipelineDescriptorDeserializer(id *this)
{
  *this = &off_1E0FE1B68;

}

{
  MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::~PipelineDescriptorDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::newComputePipelineDescriptor(uint64_t a1, dispatch_data_t data)
{
  NSObject *v3;
  void *v4;
  unsigned __int8 *v6[2];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v6[0] = (unsigned __int8 *)buffer_ptr;
  v6[1] = (unsigned __int8 *)size_ptr;
  v4 = MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newComputePipelineDescriptor(a1, v6);
  dispatch_release(v3);
  return v4;
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::newRenderPipelineDescriptor(uint64_t a1, dispatch_data_t data)
{
  NSObject *v3;
  void *v4;
  unsigned __int8 *v6[2];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v6[0] = (unsigned __int8 *)buffer_ptr;
  v6[1] = (unsigned __int8 *)size_ptr;
  v4 = MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newRenderPipelineDescriptor(a1, v6);
  dispatch_release(v3);
  return v4;
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::newTileRenderPipelineDescriptor(uint64_t a1, dispatch_data_t data)
{
  NSObject *v3;
  void *v4;
  unsigned __int8 *v6[2];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v6[0] = (unsigned __int8 *)buffer_ptr;
  v6[1] = (unsigned __int8 *)size_ptr;
  v4 = MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newTileRenderPipelineDescriptor(a1, v6);
  dispatch_release(v3);
  return v4;
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::newMeshRenderPipelineDescriptor(uint64_t a1, dispatch_data_t data)
{
  NSObject *v3;
  void *v4;
  unsigned __int8 *v6[2];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v6[0] = (unsigned __int8 *)buffer_ptr;
  v6[1] = (unsigned __int8 *)size_ptr;
  v4 = MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newMeshRenderPipelineDescriptor(a1, v6);
  dispatch_release(v3);
  return v4;
}

id MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::newFunctionWithFunctionProperty(id *this, MTLSerializer::SerializedCompactPropertyList::Iterator *a2)
{
  size_t v2;
  uint64_t v3;
  unsigned int __dst;

  __dst = 0;
  v2 = *((_QWORD *)a2 + 6);
  v3 = *((_QWORD *)a2 + 7);
  if (v2 + v3 > *((_QWORD *)a2 + 1))
    abort();
  memcpy(&__dst, (const void *)(*(_QWORD *)a2 + v3), v2);
  return (id)objc_msgSend(this[1], "functionWithFunctionRef:", __dst);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::nextStitchedLibraryIndex(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this)
{
  return 0;
}

void MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::~NamedObjectJSONSerializer(MTLPipelineLibrarySerializer::NamedObjectJSONSerializer *this)
{
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setString(id *this, unsigned int a2, NSString *a3)
{
  return objc_msgSend(this[1], "setObject:forKeyedSubscript:", a3, *((_QWORD *)this[2] + a2));
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setObject(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 8), "setObject:forKeyedSubscript:", a3, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2));
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setUIntValue(uint64_t this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
    return objc_msgSend(*(id *)(this + 8), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:"), *(_QWORD *)(*(_QWORD *)(this + 16) + 8 * a2));
  return this;
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setFloatValue(uint64_t this, unsigned int a2, float a3, float a4)
{
  if (a3 != a4)
    return objc_msgSend(*(id *)(this + 8), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:"), *(_QWORD *)(*(_QWORD *)(this + 16) + 8 * a2));
  return this;
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::Finalize(MTLPipelineLibrarySerializer::NamedObjectJSONSerializer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  return v1;
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setType(id *this, const char *a2)
{
  return objc_msgSend(this[1], "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2), CFSTR("type"));
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setName(id *this, NSString *a2)
{
  return objc_msgSend(this[1], "setObject:forKeyedSubscript:", a2, CFSTR("name"));
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::~JSONSerializationContext(id *this)
{
  MTLPipelineLibrarySerializer::JSONSerializationContext::~JSONSerializationContext(this);
  JUMPOUT(0x186DABFBCLL);
}

{
  id v2;

  *this = &off_1E0FE1808;

  v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    operator delete(v2);
  }
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getSpecializedFunctionSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gSpecializedFunctionProperties;
  v1[3] = 2;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A390C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getComputePipelineSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gComputePipelineProperties;
  v1[3] = 13;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A3998(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getRenderPipelineSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gRenderPipelineProperties;
  v1[3] = 59;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A3A24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getStageInputOutputSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gStageInputOutputProperties;
  v1[3] = 4;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A3AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getVertexDescriptorSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gVertexDescriptorProperties;
  v1[3] = 2;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A3B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getVertexAttributeSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gVertexAttributeProperties;
  v1[3] = 4;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A3BC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getVertexBufferLayoutSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gVertexBufferLayoutProperties;
  v1[3] = 4;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A3C54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getFunctionSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gFunctionProperties;
  v1[3] = 2;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A3CE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getColorAttachmentSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gColorAttachmentProperties;
  v1[3] = 10;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A3D6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getFunctionConstantSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gFunctionConstantProperties;
  v1[3] = 4;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A3DF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getSizeSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gSizeProperties;
  v1[3] = 3;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A3E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getTileRenderPipelineSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gTileRenderPipelineProperties;
  v1[3] = 11;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A3F10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getTileColorAttachmentSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gTileColorAttachmentProperties;
  v1[3] = 2;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A3F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getMeshRenderPipelineSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gMeshRenderPipelineProperties;
  v1[3] = 45;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A4028(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::JSONSerializationContext::getBufferSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)operator new();
  *v1 = &off_1E0FE18E8;
  v1[1] = 0;
  v1[2] = &MTLPipelineLibrarySerializer::gBufferProperties;
  v1[3] = 2;
  v1[1] = (id)objc_opt_new();
  return v1;
}

void sub_1826A40B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void *MTLPipelineLibrarySerializer::JSONSerializationContext::createObjectArray(uint64_t a1, uint64_t **a2)
{
  void *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = *a2;
  v4 = a2[1];
  while (v5 != v4)
  {
    v6 = *v5++;
    objc_msgSend(v3, "addObject:", v6);
  }
  return v3;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::createUint32Array()
{
  return 0;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::addSerializedSpecializedFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 8), "containsObject:");
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 8), "addObject:", a3);
  return result;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::addSerializedComputePipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 8), "containsObject:");
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 8), "addObject:", a3);
  return result;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::addSerializedRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 8), "containsObject:");
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 8), "addObject:", a3);
  return result;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::addSerializedTileRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 8), "containsObject:");
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 8), "addObject:", a3);
  return result;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::addSerializedMeshRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 8), "containsObject:");
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 8), "addObject:", a3);
  return result;
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::~BinarySerializationContext(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  MTLPipelineLibrarySerializer::BinarySerializationContext::~BinarySerializationContext(this);
  JUMPOUT(0x186DABFBCLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  *(_QWORD *)this = &off_1E0FE19B8;
  MTLSerializer::Context::~Context((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312));
  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    *((_QWORD *)this + 37) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 33);
  if (v3)
  {
    *((_QWORD *)this + 34) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 30);
  if (v4)
  {
    *((_QWORD *)this + 31) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 26);
  if (v5)
  {
    *((_QWORD *)this + 27) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 24) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 19);
  if (v7)
  {
    *((_QWORD *)this + 20) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 16);
  if (v8)
  {
    *((_QWORD *)this + 17) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 12);
  if (v9)
  {
    *((_QWORD *)this + 13) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 9);
  if (v10)
  {
    *((_QWORD *)this + 10) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 5);
  if (v11)
  {
    *((_QWORD *)this + 6) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 2);
  if (v12)
  {
    *((_QWORD *)this + 3) = v12;
    operator delete(v12);
  }
}

MTLSerializer::ObjectListSerializer *MTLPipelineLibrarySerializer::BinarySerializationContext::serializeFunctionRef(uint64_t a1, uint64_t a2)
{
  MTLSerializer::Context *v3;
  MTLSerializer::DirectObjectListSerializer *PropertyListSerializer;
  char v6[4];

  v3 = (MTLSerializer::Context *)(a1 + 312);
  PropertyListSerializer = MTLSerializer::Context::CreatePropertyListSerializer((MTLSerializer::Context *)(a1 + 312), 2u);
  **((_QWORD **)PropertyListSerializer + 6) = MTLSerializer::Context::CreateString(v3, (const char *)objc_msgSend(*(id *)(a2 + 8), "UTF8String"));
  *(_DWORD *)v6 = *(_DWORD *)a2 + 1;
  MTLSerializer::PropertyListSerializer::setBigVector(PropertyListSerializer, 1, v6, 4uLL, 4);
  return MTLSerializer::ObjectListSerializer::FinalizeInternal(PropertyListSerializer);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getSpecializedFunctionSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 2u);
  return v2;
}

void sub_1826A4380(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getComputePipelineSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 0xDu);
  return v2;
}

void sub_1826A4400(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getRenderPipelineSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 0x3Bu);
  return v2;
}

void sub_1826A4480(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getStageInputOutputSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 4u);
  return v2;
}

void sub_1826A4500(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getVertexDescriptorSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 2u);
  return v2;
}

void sub_1826A4580(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getVertexAttributeSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 4u);
  return v2;
}

void sub_1826A4600(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getVertexBufferLayoutSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 4u);
  return v2;
}

void sub_1826A4680(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getFunctionSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 2u);
  return v2;
}

void sub_1826A4700(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getColorAttachmentSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 0xAu);
  return v2;
}

void sub_1826A4780(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getFunctionConstantSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 4u);
  return v2;
}

void sub_1826A4800(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getSizeSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 3u);
  return v2;
}

void sub_1826A4880(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getTileRenderPipelineSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 0xBu);
  return v2;
}

void sub_1826A4900(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getTileColorAttachmentSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 2u);
  return v2;
}

void sub_1826A4980(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getMeshRenderPipelineSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 0x2Du);
  return v2;
}

void sub_1826A4A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::getBufferSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E0FE1A98;
  v2[1] = (char *)this + 312;
  v2[2] = 0;
  v2[2] = MTLSerializer::Context::CreateCompactPropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312), 2u);
  return v2;
}

void sub_1826A4A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

MTLSerializer::ObjectListSerializer *MTLPipelineLibrarySerializer::BinarySerializationContext::createObjectArray(uint64_t a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  MTLSerializer::ObjectListSerializer *v16;
  void *__p;
  char *v19;
  char *v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  std::vector<MTLSerializer::ObjectRef>::reserve(&__p, a2[1] - *a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = v19;
    do
    {
      v7 = *v4;
      if (v6 >= v20)
      {
        v8 = (v6 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v9 = (v20 - (_BYTE *)__p) >> 2;
        if (v9 <= v8 + 1)
          v9 = v8 + 1;
        if ((unint64_t)(v20 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v20, v10);
        else
          v11 = 0;
        v12 = &v11[8 * v8];
        *(_QWORD *)v12 = v7;
        v6 = v12 + 8;
        v14 = (char *)__p;
        v13 = v19;
        if (v19 != __p)
        {
          do
          {
            v15 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          v13 = (char *)__p;
        }
        __p = v12;
        v19 = v6;
        v20 = &v11[8 * v10];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v6 = v7;
        v6 += 8;
      }
      v19 = v6;
      ++v4;
    }
    while (v4 != v5);
  }
  v16 = MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>((void **)(a1 + 312), &__p);
  if (__p)
  {
    v19 = (char *)__p;
    operator delete(__p);
  }
  return v16;
}

void sub_1826A4C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *MTLPipelineLibrarySerializer::BinarySerializationContext::createUint32Array(uint64_t a1, _QWORD *a2)
{
  if (a2[1] == *a2)
    return 0;
  else
    return MTLSerializer::Context::CreateArray<unsigned int>((void **)(a1 + 312), (uint64_t)a2);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::addSerializedSpecializedFunction(uint64_t a1, char *a2, uint64_t a3)
{
  char **v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *__p[2];
  char v20;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v5 = (char **)(a1 + 40);
  MTLPipelineLibrarySerializer::BinarySerializationContext::addNamedDescriptor(a1, (uint64_t)__p, (void **)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
  if (v20 < 0)
    operator delete(__p[0]);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD **)(a1 + 48);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - *v5) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*v5;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(a1 + 56, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a3;
    v8 = v14 + 8;
    v17 = *(char **)(a1 + 40);
    v16 = *(char **)(a1 + 48);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *v5;
    }
    *(_QWORD *)(a1 + 40) = v14;
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = a3;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a1 + 48) = v8;
}

void sub_1826A4D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::addSerializedComputePipeline(uint64_t a1, char *a2, uint64_t a3)
{
  char **v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *__p[2];
  char v20;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v5 = (char **)(a1 + 96);
  MTLPipelineLibrarySerializer::BinarySerializationContext::addNamedDescriptor(a1, (uint64_t)__p, (void **)(a1 + 72), (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3);
  if (v20 < 0)
    operator delete(__p[0]);
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD **)(a1 + 104);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - *v5) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*v5;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(a1 + 112, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a3;
    v8 = v14 + 8;
    v17 = *(char **)(a1 + 96);
    v16 = *(char **)(a1 + 104);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *v5;
    }
    *(_QWORD *)(a1 + 96) = v14;
    *(_QWORD *)(a1 + 104) = v8;
    *(_QWORD *)(a1 + 112) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = a3;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a1 + 104) = v8;
}

void sub_1826A4E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::addSerializedRenderPipeline(uint64_t a1, char *a2, uint64_t a3)
{
  char **v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *__p[2];
  char v20;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v5 = (char **)(a1 + 152);
  MTLPipelineLibrarySerializer::BinarySerializationContext::addNamedDescriptor(a1, (uint64_t)__p, (void **)(a1 + 128), (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3);
  if (v20 < 0)
    operator delete(__p[0]);
  v6 = *(_QWORD *)(a1 + 168);
  v7 = *(_QWORD **)(a1 + 160);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - *v5) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*v5;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(a1 + 168, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a3;
    v8 = v14 + 8;
    v17 = *(char **)(a1 + 152);
    v16 = *(char **)(a1 + 160);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *v5;
    }
    *(_QWORD *)(a1 + 152) = v14;
    *(_QWORD *)(a1 + 160) = v8;
    *(_QWORD *)(a1 + 168) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = a3;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a1 + 160) = v8;
}

void sub_1826A4FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::addSerializedTileRenderPipeline(uint64_t a1, char *a2, uint64_t a3)
{
  char **v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *__p[2];
  char v20;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v5 = (char **)(a1 + 208);
  MTLPipelineLibrarySerializer::BinarySerializationContext::addNamedDescriptor(a1, (uint64_t)__p, (void **)(a1 + 184), (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  if (v20 < 0)
    operator delete(__p[0]);
  v6 = *(_QWORD *)(a1 + 224);
  v7 = *(_QWORD **)(a1 + 216);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - *v5) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*v5;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(a1 + 224, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a3;
    v8 = v14 + 8;
    v17 = *(char **)(a1 + 208);
    v16 = *(char **)(a1 + 216);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *v5;
    }
    *(_QWORD *)(a1 + 208) = v14;
    *(_QWORD *)(a1 + 216) = v8;
    *(_QWORD *)(a1 + 224) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = a3;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a1 + 216) = v8;
}

void sub_1826A5108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::addSerializedMeshRenderPipeline(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *__p[2];
  char v20;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  MTLPipelineLibrarySerializer::BinarySerializationContext::addNamedDescriptor(a1, (uint64_t)__p, (void **)(a1 + 240), (uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3);
  if (v20 < 0)
    operator delete(__p[0]);
  v6 = *(_QWORD **)(a1 + 272);
  v5 = *(_QWORD *)(a1 + 280);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD *)(a1 + 264);
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(a1 + 280, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a3;
    v7 = v14 + 8;
    v17 = *(char **)(a1 + 264);
    v16 = *(char **)(a1 + 272);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *(char **)(a1 + 264);
    }
    *(_QWORD *)(a1 + 264) = v14;
    *(_QWORD *)(a1 + 272) = v7;
    *(_QWORD *)(a1 + 280) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = a3;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 272) = v7;
}

void sub_1826A5238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate::~PipelineDescriptorSerializerPrivate(MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *this)
{
  id *v1;
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE1C00;
  *((_QWORD *)this + 1) = &off_1E0FE1B90;
  v1 = (id *)((char *)this + 8);
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer(v1);
}

{
  id *v1;
  uint64_t v2;

  *(_QWORD *)this = &off_1E0FE1C00;
  *((_QWORD *)this + 1) = &off_1E0FE1B90;
  v1 = (id *)((char *)this + 8);
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer(v1);
  JUMPOUT(0x186DABFBCLL);
}

void MTLSerializer::DirectObjectListSerializer::~DirectObjectListSerializer(MTLSerializer::DirectObjectListSerializer *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E0FE1718;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E0FE16C8;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E0FE1718;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E0FE16C8;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MTLSerializer::DirectObjectListSerializer::setOffset(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(this + 8) + 4 * (a2 + 1)) = a3;
  return this;
}

void MTLSerializer::ObjectSerializer::~ObjectSerializer(MTLSerializer::ObjectSerializer *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E0FE16C8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E0FE16C8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x186DABFBCLL);
}

MTLPipelineLibrarySerializer::JSONSerializationContext *MTLPipelineLibrarySerializer::JSONSerializationContext::JSONSerializationContext(MTLPipelineLibrarySerializer::JSONSerializationContext *this, char a2)
{
  *(_QWORD *)this = &off_1E0FE1808;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 1) = objc_opt_new();
  *((_BYTE *)this + 40) = a2;
  return this;
}

void sub_1826A54BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(_QWORD *)(v1 + 24) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MTLSerializer::PropertyListSerializer::~PropertyListSerializer(MTLSerializer::PropertyListSerializer *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E0FE1718;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E0FE16C8;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E0FE1718;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E0FE16C8;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x186DABFBCLL);
}

MTLSerializer::StringSerializer *MTLSerializer::StringSerializer::StringSerializer(MTLSerializer::StringSerializer *this, const char *__s)
{
  std::vector<char> *v4;
  size_t v5;
  std::vector<char>::size_type v6;
  std::vector<char>::pointer begin;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (std::vector<char> *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 8;
  *(_QWORD *)this = &off_1E0FE16F0;
  v5 = strlen(__s);
  v6 = v5 + 1;
  if (v5 == -1)
  {
    begin = 0;
  }
  else
  {
    std::vector<unsigned char>::__append(v4, v6);
    begin = v4->__begin_;
  }
  memcpy(begin, __s, v6);
  *((_QWORD *)this + 5) = 1;
  return this;
}

void sub_1826A5624(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = &off_1E0FE16C8;
  v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MTLSerializer::StringSerializer::~StringSerializer(MTLSerializer::StringSerializer *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E0FE16C8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E0FE16C8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x186DABFBCLL);
}

void MTLSerializer::Context::~Context(MTLSerializer::Context *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_QWORD **)this != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = *(_QWORD **)this;
  }
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t MTLSerializer::PropertyListSerializer::setBigVector(MTLSerializer::PropertyListSerializer *this, uint64_t a2, const char *a3, std::vector<char>::size_type __n, uint64_t a5)
{
  std::vector<char>::pointer begin;
  std::vector<char> *v10;
  std::vector<char>::size_type v11;
  uint64_t v12;
  std::vector<char>::size_type v13;
  std::vector<char>::size_type v14;

  begin = (std::vector<char>::pointer)*((_QWORD *)this + 1);
  v10 = (std::vector<char> *)((char *)this + 8);
  v11 = *((_QWORD *)this + 2) - (_QWORD)begin;
  v12 = v11 & (a5 - 1);
  if (v12)
  {
    v13 = a5 - v12;
    v14 = a5 - v12 + v11;
    if (v11 >= v14)
    {
      if (v11 > v14)
        *((_QWORD *)this + 2) = &begin[v14];
    }
    else
    {
      std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 8), v13);
      begin = v10->__begin_;
    }
    bzero(&begin[v11], v13);
    begin = (std::vector<char>::pointer)*((_QWORD *)this + 1);
    v11 = *((_QWORD *)this + 2) - (_QWORD)begin;
  }
  if (v11 >= v11 + __n)
  {
    if (v11 > v11 + __n)
      *((_QWORD *)this + 2) = &begin[v11 + __n];
  }
  else
  {
    std::vector<unsigned char>::__append(v10, __n);
    begin = v10->__begin_;
  }
  memcpy(&begin[v11], a3, __n);
  return (*(uint64_t (**)(MTLSerializer::PropertyListSerializer *, uint64_t, std::vector<char>::size_type))(*(_QWORD *)this + 24))(this, a2, v11);
}

MTLSerializer::CompactPropertyListSerializer *MTLSerializer::Context::CreateCompactPropertyListSerializer(MTLSerializer::Context *this, unsigned int a2)
{
  MTLSerializer::CompactPropertyListSerializer *v4;
  unint64_t v5;
  MTLSerializer::CompactPropertyListSerializer **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  MTLSerializer::CompactPropertyListSerializer **v13;
  char *v14;
  char *v15;
  char *v16;
  MTLSerializer::CompactPropertyListSerializer *v17;

  v4 = (MTLSerializer::CompactPropertyListSerializer *)operator new();
  MTLSerializer::CompactPropertyListSerializer::CompactPropertyListSerializer(v4, a2);
  v5 = *((_QWORD *)this + 2);
  v6 = (MTLSerializer::CompactPropertyListSerializer **)*((_QWORD *)this + 1);
  if ((unint64_t)v6 >= v5)
  {
    v8 = ((uint64_t)v6 - *(_QWORD *)this) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *(_QWORD *)this;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 16, v11);
    else
      v12 = 0;
    v13 = (MTLSerializer::CompactPropertyListSerializer **)&v12[8 * v8];
    v14 = &v12[8 * v11];
    *v13 = v4;
    v7 = v13 + 1;
    v16 = *(char **)this;
    v15 = (char *)*((_QWORD *)this + 1);
    if (v15 != *(char **)this)
    {
      do
      {
        v17 = (MTLSerializer::CompactPropertyListSerializer *)*((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = *(char **)this;
    }
    *(_QWORD *)this = v13;
    *((_QWORD *)this + 1) = v7;
    *((_QWORD *)this + 2) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 1) = v7;
  return v4;
}

void sub_1826A5A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x1091C40658F5F37);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::~NamedObjectBinarySerializer(MTLPipelineLibrarySerializer::NamedObjectBinarySerializer *this)
{
  JUMPOUT(0x186DABFBCLL);
}

void *MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::setString(MTLPipelineLibrarySerializer::NamedObjectBinarySerializer *this, unsigned int a2, NSString *a3)
{
  uint64_t v4;
  char v6[4];

  v4 = *((_QWORD *)this + 2);
  *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * a2) = MTLSerializer::Context::CreateString(*((MTLSerializer::Context **)this + 1), -[NSString UTF8String](a3, "UTF8String"));
  *(_DWORD *)(*(_QWORD *)(v4 + 72) + 4 * a2) = *(_DWORD *)(v4 + 16) - *(_DWORD *)(v4 + 8) + 2;
  *(_DWORD *)v6 = 0;
  return MTLSerializer::CompactPropertyListSerializer::setPropertyData((MTLSerializer::CompactPropertyListSerializer *)v4, a2, v6, 4uLL);
}

_QWORD *MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::setObject(_QWORD *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  char v4[4];

  if (a3)
  {
    v3 = result[2];
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * a2) = a3;
    *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * a2) = *(_DWORD *)(v3 + 16) - *(_DWORD *)(v3 + 8) + 2;
    *(_DWORD *)v4 = 0;
    return MTLSerializer::CompactPropertyListSerializer::setPropertyData((MTLSerializer::CompactPropertyListSerializer *)v3, a2, v4, 4uLL);
  }
  return result;
}

void *MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::setUIntValue(void *this, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  MTLSerializer::CompactPropertyListSerializer *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != a4)
  {
    v8 = v4;
    v9 = v5;
    v6 = (MTLSerializer::CompactPropertyListSerializer *)*((_QWORD *)this + 2);
    v7 = a3;
    return MTLSerializer::CompactPropertyListSerializer::setPropertyData(v6, a2, (const char *)&v7, 4uLL);
  }
  return this;
}

void *MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::setFloatValue(void *this, char a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  MTLSerializer::CompactPropertyListSerializer *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != a4)
  {
    v8 = v4;
    v9 = v5;
    v6 = (MTLSerializer::CompactPropertyListSerializer *)*((_QWORD *)this + 2);
    v7 = a3;
    return MTLSerializer::CompactPropertyListSerializer::setPropertyData(v6, a2, (const char *)&v7, 4uLL);
  }
  return this;
}

void *MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::setVector(MTLSerializer::CompactPropertyListSerializer **this, char a2, uint64_t a3, const char *a4)
{
  std::vector<char>::size_type v7;

  v7 = _MTLConstantDataSize(a3);
  return MTLSerializer::CompactPropertyListSerializer::setPropertyData(this[2], a2, a4, v7);
}

MTLSerializer::ObjectListSerializer *MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::Finalize(MTLPipelineLibrarySerializer::NamedObjectBinarySerializer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  **(_BYTE **)(v1 + 8) = *(_DWORD *)(v1 + 96);
  return MTLSerializer::ObjectListSerializer::FinalizeInternal((MTLSerializer::ObjectListSerializer *)v1);
}

MTLSerializer::CompactPropertyListSerializer *MTLSerializer::CompactPropertyListSerializer::CompactPropertyListSerializer(MTLSerializer::CompactPropertyListSerializer *this, unsigned int a2)
{
  std::vector<unsigned int> *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (std::vector<unsigned int> *)MTLSerializer::ObjectListSerializer::ObjectListSerializer(this, a2);
  v4->__begin_ = (std::vector<unsigned int>::pointer)&off_1E0FE17D8;
  std::vector<unsigned int>::vector(v4 + 3, a2);
  *((_DWORD *)this + 24) = 0;
  std::vector<unsigned char>::reserve((std::vector<char> *)((char *)this + 8), a2);
  v5 = (void *)*((_QWORD *)this + 9);
  v6 = *((_QWORD *)this + 10) - (_QWORD)v5;
  if (v6 >= 1)
    bzero(v5, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
  v7 = *((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 2) - v7;
  if (v8 == -1)
  {
    *((_QWORD *)this + 2) = v7;
  }
  else
  {
    std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 8), 1uLL);
    v7 = *((_QWORD *)this + 1);
  }
  *(_BYTE *)(v7 + v8) = 0;
  *((_QWORD *)this + 5) = 1;
  return this;
}

void sub_1826A5CE8(_Unwind_Exception *a1)
{
  MTLSerializer::ObjectListSerializer *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 10) = v4;
    operator delete(v4);
  }
  MTLSerializer::ObjectListSerializer::~ObjectListSerializer(v1);
  _Unwind_Resume(a1);
}

void MTLSerializer::CompactPropertyListSerializer::~CompactPropertyListSerializer(MTLSerializer::CompactPropertyListSerializer *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E0FE17D8;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E0FE1718;
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = &off_1E0FE16C8;
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E0FE17D8;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E0FE1718;
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = &off_1E0FE16C8;
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MTLSerializer::CompactPropertyListSerializer::setOffset(uint64_t this, unsigned int a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(this + 8) + *(unsigned int *)(*(_QWORD *)(this + 72) + 4 * a2)) = a3;
  return this;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1826A5E7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void *MTLSerializer::CompactPropertyListSerializer::setPropertyData(MTLSerializer::CompactPropertyListSerializer *this, char a2, const char *a3, std::vector<char>::size_type a4)
{
  std::vector<char>::pointer begin;
  std::vector<char> *v9;
  uint64_t v10;
  std::vector<char>::pointer v11;
  uint64_t v12;
  std::vector<char>::pointer v13;
  std::vector<char>::size_type v14;
  void *result;

  begin = (std::vector<char>::pointer)*((_QWORD *)this + 1);
  v9 = (std::vector<char> *)((char *)this + 8);
  v10 = *((_QWORD *)this + 2) - (_QWORD)begin;
  if (v10 == -1)
  {
    *((_QWORD *)this + 2) = begin;
  }
  else
  {
    std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 8), 1uLL);
    begin = v9->__begin_;
  }
  begin[v10] = a2;
  v11 = (std::vector<char>::pointer)*((_QWORD *)this + 1);
  v12 = *((_QWORD *)this + 2) - (_QWORD)v11;
  if (v12 == -1)
  {
    *((_QWORD *)this + 2) = v11;
  }
  else
  {
    std::vector<unsigned char>::__append(v9, 1uLL);
    v11 = v9->__begin_;
  }
  v11[v12] = a4;
  v13 = (std::vector<char>::pointer)*((_QWORD *)this + 1);
  v14 = *((_QWORD *)this + 2) - (_QWORD)v13;
  if (v14 >= v14 + a4)
  {
    if (v14 > v14 + a4)
      *((_QWORD *)this + 2) += a4;
  }
  else
  {
    std::vector<unsigned char>::__append(v9, a4);
    v13 = v9->__begin_;
  }
  result = memcpy(&v13[v14], a3, a4);
  ++*((_DWORD *)this + 24);
  return result;
}

_QWORD *MTLSerializer::Context::CreateArray<unsigned int>(void **a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
    return 0;
  v4 = (_QWORD *)operator new();
  MTLSerializer::ArraySerializer<unsigned int>::ArraySerializer((uint64_t)v4, (int **)a2);
  v5 = (unint64_t)a1[2];
  v6 = a1[1];
  if ((unint64_t)v6 >= v5)
  {
    v8 = ((char *)v6 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v9 = v5 - (_QWORD)*a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = v4;
    v7 = v13 + 8;
    v16 = (char *)*a1;
    v15 = (char *)a1[1];
    if (v15 != *a1)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v7;
    a1[2] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[1] = v7;
  v18 = v4[2] - v4[1];
  if (!v18)
    return 0;
  v4[4] = v18;
  return v4;
}

void sub_1826A6114(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x1091C40510CC53ALL);
  _Unwind_Resume(a1);
}

uint64_t MTLSerializer::ArraySerializer<unsigned int>::ArraySerializer(uint64_t a1, int **a2)
{
  std::vector<char> *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  int v9;
  std::vector<char>::pointer begin;
  unint64_t v11;
  unint64_t v12;
  std::vector<char>::size_type v13;
  unint64_t v14;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (std::vector<char> *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &off_1E0FE16A0;
  *(_QWORD *)(a1 + 40) = 4;
  v6 = *a2;
  v5 = a2[1];
  std::vector<unsigned char>::__append((std::vector<char> *)(a1 + 8), 4uLL);
  *(_DWORD *)v4->__begin_ = (unint64_t)((char *)v5 - (char *)v6) >> 2;
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v9 = *v7;
      begin = *(std::vector<char>::pointer *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16) - (_QWORD)begin;
      v12 = v11 & 3;
      if ((v11 & 3) != 0)
      {
        v13 = 4 - v12;
        v14 = 4 - v12 + v11;
        if (v11 >= v14)
        {
          if (v11 > v14)
            *(_QWORD *)(a1 + 16) = &begin[v14];
        }
        else
        {
          std::vector<unsigned char>::__append(v4, v13);
          begin = v4->__begin_;
        }
        bzero(&begin[v11], v13);
        begin = *(std::vector<char>::pointer *)(a1 + 8);
        v11 = *(_QWORD *)(a1 + 16) - (_QWORD)begin;
      }
      if (v11 > 0xFFFFFFFFFFFFFFFBLL)
      {
        *(_QWORD *)(a1 + 16) = &begin[v11 + 4];
      }
      else
      {
        std::vector<unsigned char>::__append(v4, 4uLL);
        begin = v4->__begin_;
      }
      *(_DWORD *)&begin[v11] = v9;
      ++v7;
    }
    while (v7 != v8);
  }
  return a1;
}

void sub_1826A6258(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = &off_1E0FE16C8;
  v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MTLSerializer::ArraySerializer<unsigned int>::~ArraySerializer(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E0FE16C8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void MTLSerializer::ArraySerializer<unsigned int>::~ArraySerializer(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E0FE16C8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x186DABFBCLL);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::addNamedDescriptor(uint64_t a1, uint64_t a2, void **a3, int a4)
{
  uint64_t v4;
  MTLSerializer::Context *v8;
  MTLSerializer::DirectObjectListSerializer *PropertyListSerializer;
  const char *v10;
  MTLSerializer::ObjectListSerializer *v11;
  unint64_t v12;
  MTLSerializer::ObjectListSerializer **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  MTLSerializer::ObjectListSerializer **v20;
  char *v21;
  char *v22;
  char *v23;
  MTLSerializer::ObjectListSerializer *v24;
  char v25[4];

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v8 = (MTLSerializer::Context *)(a1 + 312);
    PropertyListSerializer = MTLSerializer::Context::CreatePropertyListSerializer((MTLSerializer::Context *)(a1 + 312), 2u);
    if (*(char *)(a2 + 23) >= 0)
      v10 = (const char *)a2;
    else
      v10 = *(const char **)a2;
    *(_QWORD *)(*((_QWORD *)PropertyListSerializer + 6) + 8) = MTLSerializer::Context::CreateString(v8, v10);
    *(_DWORD *)v25 = a4;
    MTLSerializer::PropertyListSerializer::setBigVector(PropertyListSerializer, 0, v25, 4uLL, 4);
    v11 = MTLSerializer::ObjectListSerializer::FinalizeInternal(PropertyListSerializer);
    v12 = (unint64_t)a3[2];
    v13 = (MTLSerializer::ObjectListSerializer **)a3[1];
    if ((unint64_t)v13 >= v12)
    {
      v15 = ((char *)v13 - (_BYTE *)*a3) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v16 = v12 - (_QWORD)*a3;
      v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1))
        v17 = v15 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a3 + 2), v18);
      else
        v19 = 0;
      v20 = (MTLSerializer::ObjectListSerializer **)&v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v11;
      v14 = v20 + 1;
      v23 = (char *)*a3;
      v22 = (char *)a3[1];
      if (v22 != *a3)
      {
        do
        {
          v24 = (MTLSerializer::ObjectListSerializer *)*((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v20 = v24;
        }
        while (v22 != v23);
        v22 = (char *)*a3;
      }
      *a3 = v20;
      a3[1] = v14;
      a3[2] = v21;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v13 = v11;
      v14 = v13 + 1;
    }
    a3[1] = v14;
  }
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::vector<unsigned char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

_QWORD *std::vector<MTLSerializer::ObjectSerializer *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1826A669C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

MTLSerializer::DirectObjectListSerializer *MTLSerializer::ObjectArraySerializer<MTLSerializer::ObjectRef>::ObjectArraySerializer(MTLSerializer::DirectObjectListSerializer *a1, _QWORD *a2)
{
  MTLSerializer::DirectObjectListSerializer *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = MTLSerializer::DirectObjectListSerializer::DirectObjectListSerializer(a1, (a2[1] - *a2) >> 3);
  *(_QWORD *)result = &off_1E0FE1748;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0;
    v7 = v5 >> 3;
    if (v7 <= 1)
      v7 = 1;
    do
    {
      *(_QWORD *)(*((_QWORD *)result + 6) + 8 * v6) = *(_QWORD *)(*a2 + 8 * v6);
      ++v6;
    }
    while (v7 != v6);
  }
  return result;
}

_QWORD *MTLSerializer::ObjectArraySerializer<MTLSerializer::ObjectRef>::~ObjectArraySerializer(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_1E0FE1718;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  *a1 = &off_1E0FE16C8;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MTLSerializer::ObjectArraySerializer<MTLSerializer::ObjectRef>::~ObjectArraySerializer(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_1E0FE1718;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  *a1 = &off_1E0FE16C8;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x186DABFBCLL);
}

uint64_t AirReflection::Node::node_as_PatchFnAttr(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4100) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_RenderTargetArrayIndexRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131075) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ViewportArrayIndexRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131077) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_RenderTargetRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 135168)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_DepthRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135169) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_StencilRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135170) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_SampleMaskRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135171) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_AcceptIntersectionRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 139264)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_ContinueSearchRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 139265) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_DistanceRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 139266) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_MeshPrimitiveDataRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 143360)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_MeshVertexDataRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 143361) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PrimitiveCulledRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 143362) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PrimitiveIDRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 143363) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

const char *AirReflection::EnumNameNodeType(int a1)
{
  const char *result;

  if (a1 >= 286720)
  {
    if (a1 < 532480)
    {
      if (a1 < 528384)
      {
        switch(a1)
        {
          case 524288:
            result = "FunctionConstant";
            break;
          case 524289:
            result = "StructTypeInfo";
            break;
          case 524290:
            result = "StitchingArgument";
            break;
          case 524291:
            result = "MeshTypeInfo";
            break;
          case 524292:
            result = "GlobalBinding";
            break;
          case 524293:
            result = "InlineTypeInfo";
            break;
          default:
            if (a1 == 286720)
            {
              result = "MeshArg";
            }
            else
            {
              if (a1 != 290816)
                return "";
              result = "MeshGridPropertiesArg";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 528384:
            result = "OpaqueType";
            break;
          case 528385:
            result = "VoidType";
            break;
          case 528386:
            result = "BoolType";
            break;
          case 528387:
            result = "CharType";
            break;
          case 528388:
            result = "UCharType";
            break;
          case 528389:
            result = "ShortType";
            break;
          case 528390:
            result = "UShortType";
            break;
          case 528391:
            result = "IntType";
            break;
          case 528392:
            result = "UIntType";
            break;
          case 528393:
            result = "LongType";
            break;
          case 528394:
            result = "ULongType";
            break;
          case 528395:
            result = "LLongType";
            break;
          case 528396:
            result = "ULLongType";
            break;
          case 528397:
            result = "HalfType";
            break;
          case 528398:
            result = "FloatType";
            break;
          case 528399:
            result = "DoubleType";
            break;
          case 528400:
            result = "BFloatType";
            break;
          case 528401:
            result = "VectorType";
            break;
          case 528402:
            result = "PackedVectorType";
            break;
          case 528403:
            result = "MatrixType";
            break;
          case 528404:
            result = "FunctionType";
            break;
          case 528405:
            result = "PointerType";
            break;
          case 528406:
            result = "LValueReferenceType";
            break;
          case 528407:
            result = "RValueReferenceType";
            break;
          case 528408:
            result = "ArrayType";
            break;
          case 528409:
            result = "EnumType";
            break;
          case 528410:
            result = "RecordBase";
            break;
          case 528411:
            result = "RecordField";
            break;
          case 528412:
            result = "StructType";
            break;
          case 528413:
            result = "UnionType";
            break;
          default:
            return "";
        }
      }
    }
    else if (a1 >= 536576)
    {
      switch(a1)
      {
        case 540672:
          result = "ClipDistanceAttr";
          break;
        case 540673:
          result = "FunctionConstantPredicateAttr";
          break;
        case 540674:
          result = "LocationIndexAttr";
          break;
        case 540675:
          result = "PointSizeAttr";
          break;
        case 540676:
          result = "PositionAttr";
          break;
        case 540677:
          result = "PrimitiveCulledAttr";
          break;
        case 540678:
          result = "PrimitiveIDAttr";
          break;
        case 540679:
          result = "RenderTargetAttr";
          break;
        case 540680:
          result = "RenderTargetArrayIndexAttr";
          break;
        case 540681:
          result = "ViewportArrayIndexAttr";
          break;
        case 540682:
          result = "UserAttr";
          break;
        case 540683:
          result = "InvariantAttr";
          break;
        case 540684:
          result = "SharedAttr";
          break;
        default:
          switch(a1)
          {
            case 544768:
              result = "MeshEmulationValueGroup";
              break;
            case 544769:
              result = "MeshEmulationBlock";
              break;
            case 544770:
              result = "MeshEmulationMeshLayout";
              break;
            case 544771:
              result = "MeshEmulationMeshKernel";
              break;
            case 544772:
              result = "MeshEmulationMeshVertex";
              break;
            case 544773:
              result = "MeshEmulationObjectKernel";
              break;
            case 544774:
              result = "MeshEmulationFragmentAnalysisResult";
              break;
            default:
              if (a1 != 536576)
                return "";
              result = "AddressSpaceTypeQual";
              break;
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 532480:
          result = "ArrayOfType";
          break;
        case 532481:
          result = "ArrayRefOfType";
          break;
        case 532482:
          result = "Texture1dType";
          break;
        case 532483:
          result = "Texture1dArrayType";
          break;
        case 532484:
          result = "Texture2dType";
          break;
        case 532485:
          result = "Texture2dArrayType";
          break;
        case 532486:
          result = "Texture3dType";
          break;
        case 532487:
          result = "TextureCubeType";
          break;
        case 532488:
          result = "TextureCubeArrayType";
          break;
        case 532489:
          result = "Texture2dMsType";
          break;
        case 532490:
          result = "Texture2dMsArrayType";
          break;
        case 532491:
          result = "TextureBuffer1dType";
          break;
        case 532492:
          result = "Depth2dType";
          break;
        case 532493:
          result = "Depth2dArrayType";
          break;
        case 532494:
          result = "DepthCubeType";
          break;
        case 532495:
          result = "DepthCubeArrayType";
          break;
        case 532496:
          result = "Depth2dMsType";
          break;
        case 532497:
          result = "Depth2dMsArrayType";
          break;
        case 532498:
          result = "SamplerType";
          break;
        case 532499:
          result = "PatchControlPointType";
          break;
        case 532500:
          result = "ImageblockType";
          break;
        case 532501:
          result = "R8UNormType";
          break;
        case 532502:
          result = "R8SNormType";
          break;
        case 532503:
          result = "R16UNormType";
          break;
        case 532504:
          result = "R16SNormType";
          break;
        case 532505:
          result = "RG8UNormType";
          break;
        case 532506:
          result = "RG8SNormType";
          break;
        case 532507:
          result = "RG16UNormType";
          break;
        case 532508:
          result = "RG16SNormType";
          break;
        case 532509:
          result = "RGBA8UNormType";
          break;
        case 532510:
          result = "RGBA8SNormType";
          break;
        case 532511:
          result = "RGBA16UNormType";
          break;
        case 532512:
          result = "RGBA16SNormType";
          break;
        case 532513:
          result = "SRGBA8UNormType";
          break;
        case 532514:
          result = "RGB10A2Type";
          break;
        case 532515:
          result = "RG11B10FType";
          break;
        case 532516:
          result = "RGB9E5Type";
          break;
        case 532517:
          result = "CommandBufferType";
          break;
        case 532518:
          result = "ComputePipelineStateType";
          break;
        case 532519:
          result = "RenderPipelineStateType";
          break;
        case 532520:
          result = "InterpolantType";
          break;
        case 532521:
          result = "VisibleFunctionTableType";
          break;
        case 532522:
          result = "IntersectionFunctionTableType";
          break;
        case 532523:
          result = "AccelerationStructureType";
          break;
        case 532524:
          result = "MeshType";
          break;
        case 532525:
          result = "MeshGridPropertiesType";
          break;
        default:
          return "";
      }
    }
  }
  else if (a1 >= 270336)
  {
    if (a1 < 278528)
    {
      switch(a1)
      {
        case 270336:
          result = "BaseInstanceArg";
          break;
        case 270337:
          result = "BaseVertexArg";
          break;
        case 270338:
          result = "InstanceIDArg";
          break;
        case 270339:
          result = "VertexIDArg";
          break;
        case 270340:
          result = "VertexInputArg";
          break;
        case 270341:
          result = "ControlPointIndexBufferArg";
          break;
        case 270342:
          result = "PatchIDArg";
          break;
        case 270343:
          result = "PositionInPatchArg";
          break;
        case 270344:
          result = "PatchInputArg";
          break;
        case 270345:
          result = "ControlPointInputArg";
          break;
        case 270346:
          result = "ControlPointField";
          break;
        case 270347:
        case 270348:
        case 270349:
          return "";
        case 270350:
          result = "AmplificationCountArg";
          break;
        case 270351:
          result = "AmplificationIDArg";
          break;
        default:
          switch(a1)
          {
            case 274432:
              result = "FragmentInputArg";
              break;
            case 274433:
              result = "FrontFacingArg";
              break;
            case 274434:
              result = "PositionArg";
              break;
            case 274435:
              result = "PointCoordArg";
              break;
            case 274436:
              result = "RenderTargetArg";
              break;
            case 274437:
              result = "RenderTargetArrayIndexArg";
              break;
            case 274438:
              result = "SampleIDArg";
              break;
            case 274439:
              result = "SampleMaskArg";
              break;
            case 274440:
              result = "ViewportArrayIndexArg";
              break;
            case 274445:
              result = "BarycentricCoordArg";
              break;
            case 274446:
              result = "PrimitiveIDArg";
              break;
            default:
              return "";
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 282624:
          result = "PayloadArg";
          break;
        case 282625:
          result = "OriginArg";
          break;
        case 282626:
          result = "DirectionArg";
          break;
        case 282627:
          result = "MinDistanceArg";
          break;
        case 282628:
          result = "MaxDistanceArg";
          break;
        case 282629:
          result = "DistanceArg";
          break;
        case 282630:
          result = "WorldSpaceOriginArg";
          break;
        case 282631:
          result = "WorldSpaceDirectionArg";
          break;
        case 282632:
          result = "GeometryIDArg";
          break;
        case 282633:
          result = "UserInstanceIDArg";
          break;
        case 282634:
          result = "GeometryIntersectionFunctionTableOffsetArg";
          break;
        case 282635:
          result = "InstanceIntersectionFunctionTableOffsetArg";
          break;
        case 282636:
          result = "OpaquePrimitiveArg";
          break;
        case 282637:
          result = "ObjectToWorldTransformArg";
          break;
        case 282638:
          result = "WorldToObjectTransformArg";
          break;
        case 282639:
          result = "TimeArg";
          break;
        case 282640:
          result = "KeyFrameCountArg";
          break;
        case 282641:
          result = "MotionStartTimeArg";
          break;
        case 282642:
          result = "MotionEndTimeArg";
          break;
        case 282643:
          result = "PrimitiveDataArg";
          break;
        case 282644:
          result = "InstanceIDCountArg";
          break;
        case 282645:
          result = "UserInstanceIDCountArg";
          break;
        case 282646:
          result = "CurveParameterArg";
          break;
        default:
          switch(a1)
          {
            case 278528:
              result = "PixelPositionInTileArg";
              break;
            case 278529:
              result = "PixelsPerTileArg";
              break;
            case 278530:
              result = "TileIndexArg";
              break;
            case 278531:
              result = "ImageblockArg";
              break;
            case 278532:
              result = "ImageblockDataArg";
              break;
            default:
              return "";
          }
          break;
      }
    }
  }
  else if (a1 < 143360)
  {
    if (a1 >= 0x20000)
    {
      if (a1 < 135168)
      {
        switch(a1)
        {
          case 131072:
            result = "ClipDistanceRet";
            break;
          case 131073:
            result = "PointSizeRet";
            break;
          case 131074:
            result = "PositionRet";
            break;
          case 131075:
            result = "RenderTargetArrayIndexRet";
            break;
          case 131076:
            result = "VertexOutputRet";
            break;
          case 131077:
            result = "ViewportArrayIndexRet";
            break;
          default:
            return "";
        }
      }
      else if (a1 >= 139264)
      {
        switch(a1)
        {
          case 139264:
            return "AcceptIntersectionRet";
          case 139265:
            return "ContinueSearchRet";
          case 139266:
            return "DistanceRet";
          default:
            return "";
        }
      }
      else
      {
        switch(a1)
        {
          case 135168:
            result = "RenderTargetRet";
            break;
          case 135169:
            result = "DepthRet";
            break;
          case 135170:
            result = "StencilRet";
            break;
          case 135171:
            result = "SampleMaskRet";
            break;
          case 135172:
            result = "ImageblockDataRet";
            break;
          default:
            return "";
        }
      }
    }
    else
    {
      result = "NONE";
      switch(a1)
      {
        case 0:
          return result;
        case 1:
          result = "FragmentFunction";
          break;
        case 2:
          result = "KernelFunction";
          break;
        case 3:
          result = "VertexFunction";
          break;
        case 4:
          result = "VisibleFunction";
          break;
        case 5:
          result = "IntersectionFunction";
          break;
        case 6:
          result = "MeshFunction";
          break;
        case 7:
          result = "ObjectFunction";
          break;
        default:
          switch(a1)
          {
            case 4096:
              result = "VecTypeHintFnAttr";
              break;
            case 4097:
              result = "WorkgroupSizeFnAttr";
              break;
            case 4098:
              result = "WorkgroupSizeHintFnAttr";
              break;
            case 4099:
              result = "WorkgroupMaxSizeFnAttr";
              break;
            case 4100:
              result = "PatchFnAttr";
              break;
            case 4101:
              result = "MaxMeshWorkgroupsFnAttr";
              break;
            default:
              return "";
          }
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 266240:
        result = "ThreadPositionInGridArg";
        break;
      case 266241:
        result = "ThreadsPerGridArg";
        break;
      case 266242:
        result = "ThreadgroupPositionInGridArg";
        break;
      case 266243:
        result = "ThreadgroupsPerGridArg";
        break;
      case 266244:
        result = "ThreadPositionInThreadgroupArg";
        break;
      case 266245:
        result = "ThreadsPerThreadgroupArg";
        break;
      case 266246:
        result = "DispatchThreadsPerThreadgroupArg";
        break;
      case 266247:
        result = "ThreadIndexInThreadgroupArg";
        break;
      case 266248:
        result = "ThreadExecutionWidthArg";
        break;
      case 266249:
        result = "StageInArg";
        break;
      case 266250:
        result = "StageInGridOriginArg";
        break;
      case 266251:
        result = "StageInGridSizeArg";
        break;
      case 266252:
        result = "ThreadIndexInSimdgroupArg";
        break;
      case 266253:
        result = "ThreadsPerSimdgroupArg";
        break;
      case 266254:
        result = "SimdgroupIndexInThreadgroupArg";
        break;
      case 266255:
        result = "SimdgroupsPerThreadgroupArg";
        break;
      case 266256:
        result = "DispatchSimdgroupsPerThreadgroupArg";
        break;
      case 266257:
        result = "ThreadIndexInQuadgroupArg";
        break;
      case 266258:
        result = "QuadgroupIndexInThreadgroupArg";
        break;
      case 266259:
        result = "QuadgroupsPerThreadgroupArg";
        break;
      case 266260:
        result = "DispatchQuadgroupsPerThreadgroupArg";
        break;
      default:
        switch(a1)
        {
          case 262144:
            result = "BufferArg";
            break;
          case 262145:
            result = "SamplerArg";
            break;
          case 262146:
            result = "TextureArg";
            break;
          case 262147:
            result = "ConstantArg";
            break;
          case 262148:
            result = "IndirectBufferArg";
            break;
          case 262149:
            result = "IndirectConstantArg";
            break;
          case 262150:
            result = "CommandBufferArg";
            break;
          case 262151:
            result = "ComputePipelineStateArg";
            break;
          case 262152:
            result = "RenderPipelineStateArg";
            break;
          case 262153:
            result = "VisibleFunctionTableArg";
            break;
          case 262154:
            result = "IntersectionFunctionTableArg";
            break;
          case 262155:
            result = "InstanceAccelerationStructureArg";
            break;
          case 262156:
            result = "PrimitiveAccelerationStructureArg";
            break;
          case 262157:
            result = "BufferStrideArg";
            break;
          default:
            switch(a1)
            {
              case 143360:
                result = "MeshPrimitiveDataRet";
                break;
              case 143361:
                result = "MeshVertexDataRet";
                break;
              case 143362:
                result = "PrimitiveCulledRet";
                break;
              case 143363:
                result = "PrimitiveIDRet";
                break;
              default:
                return "";
            }
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t AirReflection::Node::node_as_ClipDistanceRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 0x20000)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

void MTLIntersectionReflectionDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  NSObject *v5;
  NSObject *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  unsigned __int16 *v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  int *v17;
  int *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  MTLTag *v102;
  unsigned __int16 *v103;
  uint64_t v104;
  void *__p;
  char *v106;
  _OWORD v107[2];
  int v108;
  _OWORD v109[3];
  size_t size_ptr;
  void *buffer_ptr;
  _OWORD v112[2];
  int v113;

  if (data)
  {
    size_ptr = 0;
    buffer_ptr = 0;
    v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    v6 = v5;
    v7 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
    v8 = *v7;
    v9 = -v8;
    v10 = (unsigned __int16 *)((char *)v7 - v8);
    if (*v10 >= 5u)
    {
      v11 = v10[2];
      if (v11)
      {
        *(_DWORD *)(a1 + 104) = *(int *)((char *)v7 + v11 + 4) | (*(int *)((char *)v7 + v11) << 16);
        v9 = -(uint64_t)*v7;
      }
    }
    v12 = (unsigned __int16 *)((char *)v7 + v9);
    v13 = *v12;
    if (v13 >= 7
      && (!v12[3] ? (v14 = 0) : (v14 = (int *)((char *)v7 + v12[3] + *(unsigned int *)((char *)v7 + v12[3]))),
          v13 >= 0xB && (v15 = v12[5]) != 0 && v14 && *v14))
    {
      v16 = &v14[*(int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15) + 4)];
      v17 = (int *)AirReflection::Node::node_as_IntersectionFunction((AirReflection::Node *)((char *)v16
                                                                                           + v16[1]
                                                                                           + 4));
      v18 = v17;
      v19 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v19 >= 9u && (v20 = v19[4]) != 0)
        v21 = (unsigned int *)((char *)v17 + v20 + *(unsigned int *)((char *)v17 + v20));
      else
        v21 = 0;
      memset(v109, 0, sizeof(v109));
      memset(v107, 0, sizeof(v107));
      v108 = 1065353216;
      __p = (void *)6;
      LOBYTE(v106) = 0;
      memset(v112, 0, sizeof(v112));
      v113 = 1065353216;
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v107, (uint64_t *)v112);
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v112);
      std::deque<ContextStack>::push_back(v109, (uint64_t *)&__p);
      ContextStack::~ContextStack((ContextStack *)&__p);
      v22 = deserializeArguments(a2, v21, (uint64_t)v14, (ReflectionDeserializeContext *)v109, (void **)(a1 + 8), (*(_QWORD *)(a1 + 96) & 0x200000) == 0, (_DWORD *)(a1 + 40));
      v23 = (unsigned __int16 *)((char *)v7 - *v7);
      if (*v23 >= 0x1Du && (v24 = v23[14]) != 0)
        v25 = (unsigned int *)((char *)v7 + v24 + *(unsigned int *)((char *)v7 + v24));
      else
        v25 = 0;
      v26 = deserializeGlobalBindings(a2, v25, (ReflectionDeserializeContext *)v109, (uint64_t)v14, (void **)(a1 + 24));
      __p = 0;
      v106 = 0;
      *(_QWORD *)&v107[0] = 0;
      v27 = *v18;
      v28 = -v27;
      v29 = (unsigned __int16 *)((char *)v18 - v27);
      if (*v29 >= 0xDu && (v30 = v29[6]) != 0 && *((_BYTE *)v18 + v30))
      {
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, 1uLL);
        v32 = (char *)__p;
        v33 = v106;
        v35 = &v31[8 * v34];
        *(_QWORD *)v31 = 1;
        v36 = v31 + 8;
        while (v33 != v32)
        {
          v37 = *((_QWORD *)v33 - 1);
          v33 -= 8;
          *((_QWORD *)v31 - 1) = v37;
          v31 -= 8;
        }
        __p = v31;
        v106 = v36;
        *(_QWORD *)&v107[0] = v35;
        if (v32)
          operator delete(v32);
        v106 = v36;
        v28 = -(uint64_t)*v18;
      }
      else
      {
        v36 = 0;
      }
      if (*(unsigned __int16 *)((char *)v18 + v28) >= 0xFu
        && *(_WORD *)((char *)v18 + v28 + 14)
        && *((_BYTE *)v18 + *(unsigned __int16 *)((char *)v18 + v28 + 14)))
      {
        if ((unint64_t)v36 >= *(_QWORD *)&v107[0])
        {
          v39 = (char *)__p;
          v40 = (v36 - (_BYTE *)__p) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v42 = *(_QWORD *)&v107[0] - (_QWORD)__p;
          if ((uint64_t)(*(_QWORD *)&v107[0] - (_QWORD)__p) >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, v43);
            v39 = (char *)__p;
            v36 = v106;
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[8 * v40];
          v46 = &v44[8 * v43];
          *(_QWORD *)v45 = 2;
          v38 = v45 + 8;
          while (v36 != v39)
          {
            v47 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v45 - 1) = v47;
            v45 -= 8;
          }
          __p = v45;
          v106 = v38;
          *(_QWORD *)&v107[0] = v46;
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v36 = 2;
          v38 = v36 + 8;
        }
        v106 = v38;
        v28 = -(uint64_t)*v18;
        v36 = v38;
      }
      if (*(unsigned __int16 *)((char *)v18 + v28) >= 0x11u
        && *(_WORD *)((char *)v18 + v28 + 16)
        && *((_BYTE *)v18 + *(unsigned __int16 *)((char *)v18 + v28 + 16)))
      {
        if ((unint64_t)v36 >= *(_QWORD *)&v107[0])
        {
          v49 = (char *)__p;
          v50 = (v36 - (_BYTE *)__p) >> 3;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v52 = *(_QWORD *)&v107[0] - (_QWORD)__p;
          if ((uint64_t)(*(_QWORD *)&v107[0] - (_QWORD)__p) >> 2 > v51)
            v51 = v52 >> 2;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, v53);
            v49 = (char *)__p;
            v36 = v106;
          }
          else
          {
            v54 = 0;
          }
          v55 = &v54[8 * v50];
          v56 = &v54[8 * v53];
          *(_QWORD *)v55 = 3;
          v48 = v55 + 8;
          while (v36 != v49)
          {
            v57 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v55 - 1) = v57;
            v55 -= 8;
          }
          __p = v55;
          v106 = v48;
          *(_QWORD *)&v107[0] = v56;
          if (v49)
            operator delete(v49);
        }
        else
        {
          *(_QWORD *)v36 = 3;
          v48 = v36 + 8;
        }
        v106 = v48;
        v28 = -(uint64_t)*v18;
        v36 = v48;
      }
      if (*(unsigned __int16 *)((char *)v18 + v28) >= 0x13u
        && *(_WORD *)((char *)v18 + v28 + 18)
        && *((_BYTE *)v18 + *(unsigned __int16 *)((char *)v18 + v28 + 18)))
      {
        if ((unint64_t)v36 >= *(_QWORD *)&v107[0])
        {
          v59 = (char *)__p;
          v60 = (v36 - (_BYTE *)__p) >> 3;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 61)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v62 = *(_QWORD *)&v107[0] - (_QWORD)__p;
          if ((uint64_t)(*(_QWORD *)&v107[0] - (_QWORD)__p) >> 2 > v61)
            v61 = v62 >> 2;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
            v63 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          if (v63)
          {
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, v63);
            v59 = (char *)__p;
            v36 = v106;
          }
          else
          {
            v64 = 0;
          }
          v65 = &v64[8 * v60];
          v66 = &v64[8 * v63];
          *(_QWORD *)v65 = 5;
          v58 = v65 + 8;
          while (v36 != v59)
          {
            v67 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v65 - 1) = v67;
            v65 -= 8;
          }
          __p = v65;
          v106 = v58;
          *(_QWORD *)&v107[0] = v66;
          if (v59)
            operator delete(v59);
        }
        else
        {
          *(_QWORD *)v36 = 5;
          v58 = v36 + 8;
        }
        v106 = v58;
        v28 = -(uint64_t)*v18;
        v36 = v58;
      }
      if (*(unsigned __int16 *)((char *)v18 + v28) >= 0x15u
        && *(_WORD *)((char *)v18 + v28 + 20)
        && *((_BYTE *)v18 + *(unsigned __int16 *)((char *)v18 + v28 + 20)))
      {
        if ((unint64_t)v36 >= *(_QWORD *)&v107[0])
        {
          v69 = (char *)__p;
          v70 = (v36 - (_BYTE *)__p) >> 3;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 61)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v72 = *(_QWORD *)&v107[0] - (_QWORD)__p;
          if ((uint64_t)(*(_QWORD *)&v107[0] - (_QWORD)__p) >> 2 > v71)
            v71 = v72 >> 2;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
            v73 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v73 = v71;
          if (v73)
          {
            v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, v73);
            v69 = (char *)__p;
            v36 = v106;
          }
          else
          {
            v74 = 0;
          }
          v75 = &v74[8 * v70];
          v76 = &v74[8 * v73];
          *(_QWORD *)v75 = 4;
          v68 = v75 + 8;
          while (v36 != v69)
          {
            v77 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v75 - 1) = v77;
            v75 -= 8;
          }
          __p = v75;
          v106 = v68;
          *(_QWORD *)&v107[0] = v76;
          if (v69)
            operator delete(v69);
        }
        else
        {
          *(_QWORD *)v36 = 4;
          v68 = v36 + 8;
        }
        v106 = v68;
        v28 = -(uint64_t)*v18;
        v36 = v68;
      }
      if (*(unsigned __int16 *)((char *)v18 + v28) >= 0x17u
        && *(_WORD *)((char *)v18 + v28 + 22)
        && *((_BYTE *)v18 + *(unsigned __int16 *)((char *)v18 + v28 + 22)))
      {
        if ((unint64_t)v36 >= *(_QWORD *)&v107[0])
        {
          v79 = (char *)__p;
          v80 = (v36 - (_BYTE *)__p) >> 3;
          v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 61)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v82 = *(_QWORD *)&v107[0] - (_QWORD)__p;
          if ((uint64_t)(*(_QWORD *)&v107[0] - (_QWORD)__p) >> 2 > v81)
            v81 = v82 >> 2;
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
            v83 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v83 = v81;
          if (v83)
          {
            v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, v83);
            v79 = (char *)__p;
            v36 = v106;
          }
          else
          {
            v84 = 0;
          }
          v85 = &v84[8 * v80];
          v86 = &v84[8 * v83];
          *(_QWORD *)v85 = 6;
          v78 = v85 + 8;
          while (v36 != v79)
          {
            v87 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v85 - 1) = v87;
            v85 -= 8;
          }
          __p = v85;
          v106 = v78;
          *(_QWORD *)&v107[0] = v86;
          if (v79)
            operator delete(v79);
        }
        else
        {
          *(_QWORD *)v36 = 6;
          v78 = v36 + 8;
        }
        v106 = v78;
        v28 = -(uint64_t)*v18;
        v36 = v78;
      }
      v88 = (unsigned __int16 *)((char *)v18 + v28);
      if (*v88 >= 0x19u)
      {
        v89 = v88[12];
        if (v89)
        {
          if (*((_BYTE *)v18 + v89))
          {
            if ((unint64_t)v36 >= *(_QWORD *)&v107[0])
            {
              v91 = (char *)__p;
              v92 = (v36 - (_BYTE *)__p) >> 3;
              v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 61)
                std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
              v94 = *(_QWORD *)&v107[0] - (_QWORD)__p;
              if ((uint64_t)(*(_QWORD *)&v107[0] - (_QWORD)__p) >> 2 > v93)
                v93 = v94 >> 2;
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
                v95 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v95 = v93;
              if (v95)
              {
                v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, v95);
                v91 = (char *)__p;
                v36 = v106;
              }
              else
              {
                v96 = 0;
              }
              v97 = &v96[8 * v92];
              v98 = &v96[8 * v95];
              *(_QWORD *)v97 = 7;
              v90 = v97 + 8;
              while (v36 != v91)
              {
                v99 = *((_QWORD *)v36 - 1);
                v36 -= 8;
                *((_QWORD *)v97 - 1) = v99;
                v97 -= 8;
              }
              __p = v97;
              v106 = v90;
              *(_QWORD *)&v107[0] = v98;
              if (v91)
                operator delete(v91);
            }
            else
            {
              *(_QWORD *)v36 = 7;
              v90 = v36 + 8;
            }
            v106 = v90;
            v36 = v90;
          }
        }
      }
      v100 = (v36 - (_BYTE *)__p) >> 3;
      *(_DWORD *)(a1 + 128) = v100;
      *(_QWORD *)(a1 + 120) = malloc_type_calloc(v100, 8uLL, 0x80040B8603338uLL);
      if (*(_DWORD *)(a1 + 128))
      {
        v101 = 0;
        do
        {
          v102 = [MTLTag alloc];
          *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v101) = -[MTLTag initWithTagType:](v102, "initWithTagType:", *((_QWORD *)__p + v101));
          ++v101;
        }
        while (v101 < *(unsigned int *)(a1 + 128));
      }
      v103 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v103 < 0xBu)
      {
        v104 = 0;
      }
      else
      {
        v104 = v103[5];
        if (v104)
          v104 = *((unsigned __int8 *)v18 + v104);
      }
      *(_QWORD *)(a1 + 112) = v104;
      *(_DWORD *)(a1 + 16) = HIDWORD(v22);
      *(_DWORD *)(a1 + 32) = HIDWORD(v26);
      *(_DWORD *)(a1 + 36) = v22;
      dispatch_release(v6);
      if (__p)
      {
        v106 = (char *)__p;
        operator delete(__p);
      }
      std::deque<ContextStack>::~deque[abi:ne180100](v109);
    }
    else
    {
      dispatch_release(v5);
    }
  }
}

void sub_1826A833C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  std::deque<ContextStack>::~deque[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t AirReflection::Node::node_as_IntersectionFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 5) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

void MTLObjectDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  NSObject *v5;
  NSObject *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  unsigned __int16 *v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _OWORD v28[2];
  int v29;
  _OWORD v30[3];
  size_t size_ptr;
  void *buffer_ptr;
  _OWORD v33[2];
  int v34;

  if (data)
  {
    buffer_ptr = 0;
    size_ptr = 0;
    v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    v6 = v5;
    v7 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
    v8 = *v7;
    v9 = -v8;
    v10 = (unsigned __int16 *)((char *)v7 - v8);
    if (*v10 >= 5u)
    {
      v11 = v10[2];
      if (v11)
      {
        *(_DWORD *)(a1 + 104) = *(int *)((char *)v7 + v11 + 4) | (*(int *)((char *)v7 + v11) << 16);
        v9 = -(uint64_t)*v7;
      }
    }
    v12 = (unsigned __int16 *)((char *)v7 + v9);
    v13 = *v12;
    if (v13 >= 7
      && (!v12[3] ? (v14 = 0) : (v14 = (int *)((char *)v7 + v12[3] + *(unsigned int *)((char *)v7 + v12[3]))),
          v13 >= 0x15 && (v15 = v12[10]) != 0 && v14 && *v14))
    {
      v16 = &v14[*(int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15) + 4)];
      v17 = (int *)AirReflection::Node::node_as_ObjectFunction((AirReflection::Node *)((char *)v16
                                                                                     + v16[1]
                                                                                     + 4));
      v18 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v18 >= 9u && (v19 = v18[4]) != 0)
        v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
      else
        v20 = 0;
      memset(v30, 0, sizeof(v30));
      memset(v28, 0, sizeof(v28));
      v29 = 1065353216;
      v26 = 8;
      v27 = 0;
      memset(v33, 0, sizeof(v33));
      v34 = 1065353216;
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v28, (uint64_t *)v33);
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v33);
      std::deque<ContextStack>::push_back(v30, &v26);
      ContextStack::~ContextStack((ContextStack *)&v26);
      v21 = deserializeArguments(a2, v20, (uint64_t)v14, (ReflectionDeserializeContext *)v30, (void **)(a1 + 8), (*(_QWORD *)(a1 + 96) & 0x200000) == 0, (_DWORD *)(a1 + 40));
      v22 = (unsigned __int16 *)((char *)v7 - *v7);
      if (*v22 >= 0x1Du && (v23 = v22[14]) != 0)
        v24 = (unsigned int *)((char *)v7 + v23 + *(unsigned int *)((char *)v7 + v23));
      else
        v24 = 0;
      v25 = deserializeGlobalBindings(a2, v24, (ReflectionDeserializeContext *)v30, (uint64_t)v14, (void **)(a1 + 24));
      *(_DWORD *)(a1 + 16) = HIDWORD(v21);
      *(_DWORD *)(a1 + 32) = HIDWORD(v25);
      *(_DWORD *)(a1 + 36) = v21;
      dispatch_release(v6);
      std::deque<ContextStack>::~deque[abi:ne180100](v30);
    }
    else
    {
      dispatch_release(v5);
    }
  }
}

void sub_1826A861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::deque<ContextStack>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t AirReflection::Node::node_as_ObjectFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 7) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

void MTLMeshDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  NSObject *v5;
  NSObject *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  unsigned __int16 *v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _OWORD v28[2];
  int v29;
  _OWORD v30[3];
  size_t size_ptr;
  void *buffer_ptr;
  _OWORD v33[2];
  int v34;

  if (data)
  {
    buffer_ptr = 0;
    size_ptr = 0;
    v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    v6 = v5;
    v7 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
    v8 = *v7;
    v9 = -v8;
    v10 = (unsigned __int16 *)((char *)v7 - v8);
    if (*v10 >= 5u)
    {
      v11 = v10[2];
      if (v11)
      {
        *(_DWORD *)(a1 + 104) = *(int *)((char *)v7 + v11 + 4) | (*(int *)((char *)v7 + v11) << 16);
        v9 = -(uint64_t)*v7;
      }
    }
    v12 = (unsigned __int16 *)((char *)v7 + v9);
    v13 = *v12;
    if (v13 >= 7
      && (!v12[3] ? (v14 = 0) : (v14 = (int *)((char *)v7 + v12[3] + *(unsigned int *)((char *)v7 + v12[3]))),
          v13 >= 0x13 && (v15 = v12[9]) != 0 && v14 && *v14))
    {
      v16 = &v14[*(int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15) + 4)];
      v17 = (int *)AirReflection::Node::node_as_MeshFunction((AirReflection::Node *)((char *)v16
                                                                                   + v16[1]
                                                                                   + 4));
      v18 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v18 >= 9u && (v19 = v18[4]) != 0)
        v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
      else
        v20 = 0;
      memset(v30, 0, sizeof(v30));
      memset(v28, 0, sizeof(v28));
      v29 = 1065353216;
      v26 = 7;
      v27 = 0;
      memset(v33, 0, sizeof(v33));
      v34 = 1065353216;
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v28, (uint64_t *)v33);
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v33);
      std::deque<ContextStack>::push_back(v30, &v26);
      ContextStack::~ContextStack((ContextStack *)&v26);
      v21 = deserializeArguments(a2, v20, (uint64_t)v14, (ReflectionDeserializeContext *)v30, (void **)(a1 + 8), (*(_QWORD *)(a1 + 96) & 0x200000) == 0, (_DWORD *)(a1 + 40));
      v22 = (unsigned __int16 *)((char *)v7 - *v7);
      if (*v22 >= 0x1Du && (v23 = v22[14]) != 0)
        v24 = (unsigned int *)((char *)v7 + v23 + *(unsigned int *)((char *)v7 + v23));
      else
        v24 = 0;
      v25 = deserializeGlobalBindings(a2, v24, (ReflectionDeserializeContext *)v30, (uint64_t)v14, (void **)(a1 + 24));
      *(_DWORD *)(a1 + 16) = HIDWORD(v21);
      *(_DWORD *)(a1 + 32) = HIDWORD(v25);
      *(_DWORD *)(a1 + 36) = v21;
      dispatch_release(v6);
      std::deque<ContextStack>::~deque[abi:ne180100](v30);
    }
    else
    {
      dispatch_release(v5);
    }
  }
}

void sub_1826A88C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::deque<ContextStack>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t AirReflection::Node::node_as_MeshFunction(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 6) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

void MTLDynamicLibraryReflectionDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  NSObject *v5;
  unsigned int *v6;
  int *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  char v17;
  _OWORD v18[2];
  int v19;
  _OWORD v20[3];
  size_t size_ptr;
  void *buffer_ptr;
  _OWORD v23[2];
  int v24;

  if (data)
  {
    buffer_ptr = 0;
    size_ptr = 0;
    v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    v6 = (unsigned int *)buffer_ptr;
    if (!strncmp((const char *)buffer_ptr + 4, "AIRR", 4uLL))
    {
      v7 = (int *)((char *)v6 + *v6);
      v8 = (unsigned __int16 *)((char *)v7 - *v7);
      if (*v8 >= 7u && (v9 = v8[3]) != 0)
      {
        v10 = (char *)v7 + v9;
        v11 = *(unsigned int *)((char *)v7 + v9);
        memset(v20, 0, sizeof(v20));
        memset(v18, 0, sizeof(v18));
        v19 = 1065353216;
        v16 = 0xFFFFLL;
        v17 = 0;
        memset(v23, 0, sizeof(v23));
        v24 = 1065353216;
        std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v18, (uint64_t *)v23);
        std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v23);
        std::deque<ContextStack>::push_back(v20, &v16);
        v12 = (uint64_t)&v10[v11];
        ContextStack::~ContextStack((ContextStack *)&v16);
        v13 = (unsigned __int16 *)((char *)v7 - *v7);
        if (*v13 >= 0x1Du && (v14 = v13[14]) != 0)
          v15 = (unsigned int *)((char *)v7 + v14 + *(unsigned int *)((char *)v7 + v14));
        else
          v15 = 0;
        *(_DWORD *)(a1 + 32) = (unint64_t)deserializeGlobalBindings(a2, v15, (ReflectionDeserializeContext *)v20, v12, (void **)(a1 + 24)) >> 32;
        std::deque<ContextStack>::~deque[abi:ne180100](v20);
      }
      else
      {
        *(_DWORD *)(a1 + 32) = 0;
      }
    }
    dispatch_release(v5);
  }
}

void sub_1826A8AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::deque<ContextStack>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

MTLArgumentReader *ReflectionReaderFactory<MTLIntersectionReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
  int AIRVersion;
  uint64_t v4;
  MTLArgumentReader *v5;

  AIRVersion = ShouldCreateAIRVersion(a2);
  v4 = operator new();
  MTLArgumentDeserializer::MTLArgumentDeserializer((MTLArgumentDeserializer *)v4, a1);
  if (AIRVersion)
  {
    *(_QWORD *)(v4 + 120) = 0;
    *(_DWORD *)(v4 + 128) = 0;
    *(_QWORD *)v4 = &off_1E0FE1610;
  }
  else
  {
    *(_QWORD *)v4 = &off_1E0FE1558;
    *(_QWORD *)(v4 + 120) = 0;
    *(_DWORD *)(v4 + 128) = 0;
  }
  v5 = (MTLArgumentReader *)operator new();
  MTLArgumentReader::MTLArgumentReader(v5, (MTLArgumentDeserializer *)v4);
  *(_QWORD *)v5 = &off_1E0FE13A0;
  *((_QWORD *)v5 + 2) = v4;
  return v5;
}

void sub_1826A8B94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10A1C4051C9475BLL);
  _Unwind_Resume(a1);
}

MTLArgumentReader *ReflectionReaderFactory<MTLStitchingReflectionReader>::Create(uint64_t a1)
{
  MTLArgumentDeserializer *v2;
  MTLArgumentReader *v3;

  v2 = (MTLArgumentDeserializer *)operator new();
  MTLArgumentDeserializer::MTLArgumentDeserializer(v2, a1);
  *(_QWORD *)v2 = &off_1E0FE1410;
  *((_QWORD *)v2 + 14) = 0;
  v3 = (MTLArgumentReader *)operator new();
  MTLArgumentReader::MTLArgumentReader(v3, v2);
  *(_QWORD *)v3 = &off_1E0FE1328;
  *((_QWORD *)v3 + 2) = v2;
  return v3;
}

void sub_1826A8C68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x186DABFBC](v2, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

MTLArgumentReader *ReflectionReaderFactory<MTLObjectReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
  int AIRVersion;
  MTLArgumentDeserializer *v4;
  void (**v5)(MTLObjectDeserializerAIR *__hidden);
  MTLArgumentReader *v6;

  AIRVersion = ShouldCreateAIRVersion(a2);
  v4 = (MTLArgumentDeserializer *)operator new();
  MTLArgumentDeserializer::MTLArgumentDeserializer(v4, a1);
  if (AIRVersion)
    v5 = &off_1E0FE0F18;
  else
    v5 = (void (**)(MTLObjectDeserializerAIR *__hidden))&unk_1E0FE1670;
  *(_QWORD *)v4 = v5;
  v6 = (MTLArgumentReader *)operator new();
  MTLArgumentReader::MTLArgumentReader(v6, v4);
  *((_QWORD *)v6 + 2) = v4;
  *(_QWORD *)v6 = &off_1E0FE10B0;
  return v6;
}

void sub_1826A8D68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10A1C4012993A1CLL);
  _Unwind_Resume(a1);
}

MTLArgumentReader *ReflectionReaderFactory<MTLMeshReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
  int AIRVersion;
  MTLArgumentDeserializer *v4;
  void (**v5)(MTLMeshDeserializerAIR *__hidden);
  MTLArgumentReader *v6;

  AIRVersion = ShouldCreateAIRVersion(a2);
  v4 = (MTLArgumentDeserializer *)operator new();
  MTLArgumentDeserializer::MTLArgumentDeserializer(v4, a1);
  if (AIRVersion)
    v5 = &off_1E0FE0B98;
  else
    v5 = (void (**)(MTLMeshDeserializerAIR *__hidden))&unk_1E0FE1670;
  *(_QWORD *)v4 = v5;
  v6 = (MTLArgumentReader *)operator new();
  MTLArgumentReader::MTLArgumentReader(v6, v4);
  *((_QWORD *)v6 + 2) = v4;
  *(_QWORD *)v6 = &off_1E0FE0C20;
  return v6;
}

void sub_1826A8E6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10A1C4012993A1CLL);
  _Unwind_Resume(a1);
}

MTLArgumentReader *ReflectionReaderFactory<MTLDynamicLibraryReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
  int AIRVersion;
  MTLArgumentDeserializer *v4;
  void (**v5)(MTLDynamicLibraryReflectionDeserializerAIR *__hidden);
  MTLArgumentReader *v6;

  AIRVersion = ShouldCreateAIRVersion(a2);
  v4 = (MTLArgumentDeserializer *)operator new();
  MTLArgumentDeserializer::MTLArgumentDeserializer(v4, a1);
  if (AIRVersion)
    v5 = &off_1E0FE1640;
  else
    v5 = &off_1E0FE15B0;
  *(_QWORD *)v4 = v5;
  v6 = (MTLArgumentReader *)operator new();
  MTLArgumentReader::MTLArgumentReader(v6, v4);
  *(_QWORD *)v6 = &off_1E0FE13C0;
  *((_QWORD *)v6 + 2) = v4;
  return v6;
}

void sub_1826A8F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10A1C4012993A1CLL);
  _Unwind_Resume(a1);
}

uint64_t MTLVertexReflectionDeserializerAIR::deserialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, a3, 0);
}

void MTLIntersectionReflectionDeserializerAIR::~MTLIntersectionReflectionDeserializerAIR(MTLIntersectionReflectionDeserializerAIR *this)
{
  MTLIntersectionReflectionDeserializer::~MTLIntersectionReflectionDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

void MTLObjectDeserializerAIR::~MTLObjectDeserializerAIR(MTLObjectDeserializerAIR *this)
{
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

void MTLMeshDeserializerAIR::~MTLMeshDeserializerAIR(MTLMeshDeserializerAIR *this)
{
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

void MTLDynamicLibraryReflectionDeserializerAIR::~MTLDynamicLibraryReflectionDeserializerAIR(MTLDynamicLibraryReflectionDeserializerAIR *this)
{
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t AirReflection::Node::node_as_ConstantArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262147) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_BaseVertexArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270337) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_BaseInstanceArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 270336)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_ThreadIndexInThreadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266247) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadgroupsPerGridArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266243) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadgroupPositionInGridArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266242) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadExecutionWidthArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266248) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PatchIDArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270342) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PositionInPatchArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270343) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_StageInGridOriginArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266250) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_StageInGridSizeArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266251) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadIndexInQuadgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266257) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadIndexInSimdgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266252) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadsPerSimdgroupArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266253) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_AmplificationCountArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270350) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_MeshGridPropertiesArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 290816)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_MeshArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 286720)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_MeshTypeInfo(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524291) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

MTLStructTypeInternal *deserializeMeshStructArgument(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  void **v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  AirReflection::Node *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int *v13;
  const __CFString *v14;
  unsigned int v15;
  int *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  unsigned __int16 *v50;
  const void *v51;
  size_t v52;
  char v53;
  MTLStructTypeInternal *v54;
  void **v55;
  void *v56;

  if (a1)
  {
    v3 = *a1;
    if ((_DWORD)v3)
    {
      v5 = (void **)malloc_type_calloc(*a1, 8uLL, 0x80040B8603338uLL);
      v6 = 0;
      v7 = a1 + 1;
      v8 = a2 + 4;
      while (1)
      {
        v9 = (unsigned int *)(v8 + 4 * v7[v6]);
        v10 = (AirReflection::Node *)((char *)v9 + *v9);
        v11 = (unsigned __int16 *)((char *)v10 - *(int *)v10);
        if (*v11 < 5u)
        {
          LODWORD(v12) = 0;
        }
        else
        {
          v12 = v11[2];
          if (v12)
          {
            LODWORD(v12) = *(_DWORD *)((char *)v10 + v12);
            if ((int)v12 < 139264)
            {
              switch((int)v12)
              {
                case 131072:
                  v13 = (int *)AirReflection::Node::node_as_ClipDistanceRet(v10);
                  goto LABEL_24;
                case 131073:
                  v23 = (int *)AirReflection::Node::node_as_PointSizeRet(v10);
                  goto LABEL_45;
                case 131074:
                  v13 = (int *)AirReflection::Node::node_as_PositionRet(v10);
LABEL_24:
                  v17 = v13;
                  v24 = *v13;
                  v25 = -v24;
                  v26 = (unsigned __int16 *)((char *)v13 - v24);
                  if (*v26 >= 0xDu && (v27 = v26[6]) != 0)
                  {
                    v14 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v13 + v27 + *(unsigned int *)((char *)v13 + v27) + 4);
                    v25 = -(uint64_t)*v17;
                  }
                  else
                  {
                    v14 = &stru_1E0FE5DC8;
                  }
                  v28 = (unsigned __int16 *)((char *)v17 + v25);
                  if (*v28 < 0xBu)
                    goto LABEL_74;
                  v29 = v28[5];
                  if (!v29)
                    goto LABEL_75;
                  goto LABEL_65;
                case 131075:
                  v23 = (int *)AirReflection::Node::node_as_RenderTargetArrayIndexRet(v10);
                  goto LABEL_45;
                case 131076:
                  v16 = (int *)AirReflection::Node::node_as_VertexOutputRet(v10);
                  goto LABEL_35;
                case 131077:
                  v23 = (int *)AirReflection::Node::node_as_ViewportArrayIndexRet(v10);
                  goto LABEL_45;
                default:
                  switch((int)v12)
                  {
                    case 135168:
                      v17 = (int *)AirReflection::Node::node_as_RenderTargetRet(v10);
                      v18 = *v17;
                      v19 = -v18;
                      v20 = (unsigned __int16 *)((char *)v17 - v18);
                      if (*v20 >= 0x11u && (v21 = v20[8]) != 0)
                      {
                        v14 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v17 + v21 + *(unsigned int *)((char *)v17 + v21) + 4);
                        v19 = -(uint64_t)*v17;
                      }
                      else
                      {
                        v14 = &stru_1E0FE5DC8;
                      }
                      v49 = (unsigned __int16 *)((char *)v17 + v19);
                      if (*v49 < 0xFu)
                        goto LABEL_74;
                      v29 = v49[7];
                      if (!v29)
                        goto LABEL_75;
                      goto LABEL_65;
                    case 135169:
                      v23 = (int *)AirReflection::Node::node_as_DepthRet(v10);
                      goto LABEL_45;
                    case 135170:
                      v22 = (int *)AirReflection::Node::node_as_StencilRet(v10);
                      goto LABEL_59;
                    case 135171:
                      v22 = (int *)AirReflection::Node::node_as_SampleMaskRet(v10);
                      goto LABEL_59;
                    case 135172:
                      v17 = (int *)AirReflection::Node::node_as_ImageblockDataRet(v10);
                      v40 = *v17;
                      v41 = -v40;
                      v42 = (unsigned __int16 *)((char *)v17 - v40);
                      if (*v42 >= 0x15u && (v43 = v42[10]) != 0)
                      {
                        v14 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v17 + v43 + *(unsigned int *)((char *)v17 + v43) + 4);
                        v41 = -(uint64_t)*v17;
                      }
                      else
                      {
                        v14 = &stru_1E0FE5DC8;
                      }
                      v50 = (unsigned __int16 *)((char *)v17 + v41);
                      if (*v50 < 0x13u)
                        goto LABEL_74;
                      v29 = v50[9];
                      if (!v29)
                        goto LABEL_75;
                      goto LABEL_65;
                    default:
                      goto LABEL_10;
                  }
              }
            }
            if ((int)v12 >= 143360)
            {
              switch((int)v12)
              {
                case 143360:
                  v16 = (int *)AirReflection::Node::node_as_MeshPrimitiveDataRet(v10);
                  goto LABEL_35;
                case 143361:
                  v16 = (int *)AirReflection::Node::node_as_MeshVertexDataRet(v10);
LABEL_35:
                  v17 = v16;
                  v30 = *v16;
                  v31 = -v30;
                  v32 = (unsigned __int16 *)((char *)v16 - v30);
                  if (*v32 >= 0xFu && (v33 = v32[7]) != 0)
                  {
                    v14 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v16 + v33 + *(unsigned int *)((char *)v16 + v33) + 4);
                    v31 = -(uint64_t)*v17;
                  }
                  else
                  {
                    v14 = &stru_1E0FE5DC8;
                  }
                  v34 = (unsigned __int16 *)((char *)v17 + v31);
                  if (*v34 < 0xDu)
                    goto LABEL_74;
                  v29 = v34[6];
                  if (!v29)
                    goto LABEL_75;
                  goto LABEL_65;
                case 143362:
                  v23 = (int *)AirReflection::Node::node_as_PrimitiveCulledRet(v10);
                  goto LABEL_45;
                case 143363:
                  v23 = (int *)AirReflection::Node::node_as_PrimitiveIDRet(v10);
LABEL_45:
                  v17 = v23;
                  v35 = *v23;
                  v36 = -v35;
                  v37 = (unsigned __int16 *)((char *)v23 - v35);
                  if (*v37 >= 0xBu && (v38 = v37[5]) != 0)
                  {
                    v14 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v23 + v38 + *(unsigned int *)((char *)v23 + v38) + 4);
                    v36 = -(uint64_t)*v17;
                  }
                  else
                  {
                    v14 = &stru_1E0FE5DC8;
                  }
                  v39 = (unsigned __int16 *)((char *)v17 + v36);
                  if (*v39 < 9u)
                    goto LABEL_74;
                  v29 = v39[4];
                  if (!v29)
                    goto LABEL_75;
                  goto LABEL_65;
                default:
                  goto LABEL_10;
              }
            }
            switch((_DWORD)v12)
            {
              case 0x22000:
                v22 = (int *)AirReflection::Node::node_as_AcceptIntersectionRet(v10);
                goto LABEL_59;
              case 0x22001:
                v22 = (int *)AirReflection::Node::node_as_ContinueSearchRet(v10);
LABEL_59:
                v17 = v22;
                v44 = *v22;
                v45 = -v44;
                v46 = (unsigned __int16 *)((char *)v22 - v44);
                if (*v46 >= 9u && (v47 = v46[4]) != 0)
                {
                  v14 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", (char *)v22 + v47 + *(unsigned int *)((char *)v22 + v47) + 4);
                  v45 = -(uint64_t)*v17;
                }
                else
                {
                  v14 = &stru_1E0FE5DC8;
                }
                v48 = (unsigned __int16 *)((char *)v17 + v45);
                if (*v48 < 7u)
                {
LABEL_74:
                  v29 = 0;
                }
                else
                {
                  v29 = v48[3];
                  if (v29)
LABEL_65:
                    v29 += (uint64_t)v17 + *(unsigned int *)((char *)v17 + v29);
                }
LABEL_75:
                v51 = (const void *)(v29 + 4);
                v52 = strlen((const char *)(v29 + 4));
                v15 = dataTypeFromString(v51, v52);
                goto LABEL_76;
              case 0x22002:
                v22 = (int *)AirReflection::Node::node_as_DistanceRet(v10);
                goto LABEL_59;
            }
          }
        }
LABEL_10:
        AirReflection::EnumNameNodeType(v12);
        v14 = 0;
        v15 = 0;
LABEL_76:
        v5[v6++] = -[MTLStructMemberInternal initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:]([MTLStructMemberInternal alloc], "initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:", v14, 0, v15, 0, 0, 0, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0);
        if (v3 == v6)
        {
          v53 = 0;
          goto LABEL_79;
        }
      }
    }
  }
  v5 = 0;
  v3 = 0;
  v53 = 1;
LABEL_79:
  v54 = -[MTLStructTypeInternal initWithMembers:count:]([MTLStructTypeInternal alloc], "initWithMembers:count:", v5, v3);
  if ((v53 & 1) != 0)
  {
    if (!v5)
      return v54;
  }
  else
  {
    v55 = v5;
    do
    {
      v56 = *v55++;

      --v3;
    }
    while (v3);
  }
  free(v5);
  return v54;
}

uint64_t AirReflection::Node::node_as_ImageblockDataArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 278532) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ComputePipelineStateArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262151) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_RenderPipelineStateArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262152) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_CommandBufferArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262150) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_VisibleFunctionTableArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262153) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_IntersectionFunctionTableArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262154) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PrimitiveAccelerationStructureArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262156) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_InstanceAccelerationStructureArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262155) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PayloadArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 5 || !v1[2])
    return 0;
  v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 282624)
  {
    v3 = v1[3];
    if (v1[3])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_BufferStrideArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262157) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t std::deque<ContextStack>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 73 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x49)
    a2 = 1;
  if (v5 < 0x92)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t AirReflection::Node::node_as_ImageblockDataRet(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135172) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_GlobalBinding(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524292) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_StageInArg(AirReflection::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266249) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t std::deque<ContextStack>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  ContextStack *v7;
  unint64_t v8;
  uint64_t v9;
  ContextStack *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x49];
    v7 = (ContextStack *)((char *)*v6 + 56 * (v5 % 0x49));
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x49] + 56 * ((a1[5] + v5) % 0x49);
    if (v7 != (ContextStack *)v8)
    {
      do
      {
        ContextStack::~ContextStack(v7);
        v7 = (ContextStack *)(v9 + 56);
        if (v7 - (ContextStack *)*v6 == 4088)
        {
          v10 = (ContextStack *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (ContextStack *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 36;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 73;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<ContextStack *>::~__split_buffer((uint64_t)a1);
}

void MTLIntersectionReflectionReader::~MTLIntersectionReflectionReader(MTLIntersectionReflectionReader *this)
{
  MTLArgumentReader::~MTLArgumentReader(this);
  JUMPOUT(0x186DABFBCLL);
}

void MTLStitchingReflectionReader::~MTLStitchingReflectionReader(MTLStitchingReflectionReader *this)
{
  MTLArgumentReader::~MTLArgumentReader(this);
  JUMPOUT(0x186DABFBCLL);
}

void MTLObjectReflectionReader::~MTLObjectReflectionReader(MTLObjectReflectionReader *this)
{
  MTLArgumentReader::~MTLArgumentReader(this);
  JUMPOUT(0x186DABFBCLL);
}

void MTLMeshReflectionReader::~MTLMeshReflectionReader(MTLMeshReflectionReader *this)
{
  MTLArgumentReader::~MTLArgumentReader(this);
  JUMPOUT(0x186DABFBCLL);
}

void MTLDynamicLibraryReflectionDeserializer::~MTLDynamicLibraryReflectionDeserializer(MTLDynamicLibraryReflectionDeserializer *this)
{
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

void MTLDynamicLibraryReflectionReader::~MTLDynamicLibraryReflectionReader(MTLDynamicLibraryReflectionReader *this)
{
  MTLArgumentReader::~MTLArgumentReader(this);
  JUMPOUT(0x186DABFBCLL);
}

void std::__split_buffer<ContextStack *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,MTLStructTypeInternal *> const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826AA7F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void MTLCompilerCache::MTLCompilerCache(MTLCompilerCache *this)
{
  this->var0 = (void **)off_1E0FE04D8;
  *(_QWORD *)&this->var1._os_unfair_lock_opaque = 0;
  this->var3 = 0;
}

void makeShaderCacheWritableByAllUsers()
{
  _BOOL8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (didPreviouslyGetCacheMainFolder == 1 && gShaderCachePermissions == 0)
  {
    if (_MTLIsInternalBuild())
    {
      v1 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
      if (v1)
        makeShaderCacheWritableByAllUsers_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
  }
  else
  {
    gShaderCachePermissions = 438;
  }
}

void setShaderCacheMainFolder(const char *a1)
{
  void *v2;
  size_t v3;

  os_unfair_lock_lock(&gCacheOverrideLock);
  v2 = (void *)gOverridePath;
  if ((const char *)gOverridePath != a1 && (!a1 || !gOverridePath || strcmp((const char *)gOverridePath, a1)))
  {
    if ((didPreviouslyGetCacheMainFolder & 1) != 0 || didPreviouslySetCacheMainFolder == 1)
    {
      if (_MTLIsInternalBuild() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        setShaderCacheMainFolder_cold_1();
    }
    else
    {
      if (v2)
        free(v2);
      if (a1)
      {
        v3 = strlen(a1) + 1;
        gOverridePath = (uint64_t)malloc_type_malloc(v3, 0x767BCCEEuLL);
        memcpy((void *)gOverridePath, a1, v3);
        didPreviouslySetCacheMainFolder = 1;
      }
      else
      {
        gOverridePath = 0;
      }
    }
  }
  os_unfair_lock_unlock(&gCacheOverrideLock);
}

void sub_1826AA984(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(&gCacheOverrideLock);
  _Unwind_Resume(a1);
}

void *getShaderCacheMainFolder(unint64_t *a1)
{
  return copyCacheMainFolder("com.apple.metal", a1, (const char *)1);
}

void *getGPUArchiverCacheMainFolder(unint64_t *a1)
{
  return copyCacheMainFolder("com.apple.gpuarchiver", a1, (const char *)1);
}

void *getBaseCacheFolder(unint64_t *a1)
{
  return copyCacheMainFolder(0, a1, 0);
}

uint64_t MTLCompilerFSCache::open(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = this + 2;
  os_unfair_lock_lock(this + 2);
  v3 = MTLCompilerFSCache::openSync((MTLCompilerFSCache *)this);
  os_unfair_lock_unlock(v2);
  return v3;
}

void sub_1826AAA18(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLCompilerFSCache::close(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this + 2;
  os_unfair_lock_lock(this + 2);
  if (*(_QWORD *)&this[12]._os_unfair_lock_opaque)
  {
    fscache_close();
    *(_QWORD *)&this[12]._os_unfair_lock_opaque = 0;
    os_unfair_lock_lock(this + 34);
    v3 = *(_QWORD *)&this[36]._os_unfair_lock_opaque;
    if (v3)
    {
      v4 = std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v3);
      MEMORY[0x186DABFBC](v4, 0x10A0C408EF24B1CLL);
    }
    *(_QWORD *)&this[36]._os_unfair_lock_opaque = 0;
    os_unfair_lock_unlock(this + 34);
  }
  this[3]._os_unfair_lock_opaque = 0;
  this[4]._os_unfair_lock_opaque = 0;
  os_unfair_lock_unlock(v2);
}

void sub_1826AAAAC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLCompilerFSCache::~MTLCompilerFSCache(MTLCompilerFSCache *this)
{
  *(_QWORD *)this = &off_1E0FE0588;
  MTLCompilerFSCache::close((os_unfair_lock_s *)this);
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
}

{
  MTLCompilerFSCache::~MTLCompilerFSCache(this);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MTLCompilerFSCache::copyShaderCache(os_unfair_lock_s *this, NSString *a2)
{
  os_unfair_lock_s *v4;
  void *v5;
  void *v6;
  const char *v7;
  os_unfair_lock_s *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  NSString *v16;
  int os_unfair_lock_opaque;
  size_t v18;
  size_t v19;
  void *v20;
  void *v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  void *v33;
  os_unfair_lock_s *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  stat v41;
  char v42[128];
  char __s[1040];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = this + 2;
  os_unfair_lock_lock(this + 2);
  v5 = (void *)MEMORY[0x186DAC640]();
  if (*(_QWORD *)&this[12]._os_unfair_lock_opaque)
  {
    fscache_close();
    *(_QWORD *)&this[12]._os_unfair_lock_opaque = 0;
  }
  v6 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v40 = 0;
  if ((objc_msgSend(v6, "fileExistsAtPath:isDirectory:", a2, &v40) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = -[NSString UTF8String](a2, "UTF8String");
      MTLCompilerFSCache::copyShaderCache((uint64_t)v9, (uint64_t)__s, v10);
    }
    goto LABEL_12;
  }
  if (!v40)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = -[NSString UTF8String](a2, "UTF8String");
      MTLCompilerFSCache::copyShaderCache((uint64_t)v11, (uint64_t)__s, v12);
    }
LABEL_12:
    LODWORD(v13) = 0;
    v14 = 1;
    goto LABEL_53;
  }
  v33 = v5;
  v34 = v4;
  v39 = 0;
  v7 = (const char *)&this[14];
  if (SHIBYTE(this[19]._os_unfair_lock_opaque) < 0)
  {
    if (!*(_QWORD *)&this[16]._os_unfair_lock_opaque)
    {
LABEL_18:
      v16 = a2;
      goto LABEL_19;
    }
    v8 = *(os_unfair_lock_s **)v7;
  }
  else
  {
    v8 = this + 14;
    if (!HIBYTE(this[19]._os_unfair_lock_opaque))
      goto LABEL_18;
  }
  v15 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  v16 = -[NSString stringByAppendingString:](a2, "stringByAppendingString:", v15);
  if ((objc_msgSend(v6, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v16, 0, 0, &v39) & 1) != 0)
  {
LABEL_19:
    os_unfair_lock_opaque = this[5]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque)
    {
      if (SHIBYTE(this[19]._os_unfair_lock_opaque) < 0)
        v7 = *(const char **)v7;
      if (getCacheMainFolder(__s, "com.apple.metal", (const char *)1))
      {
        if (!v7
          || (v18 = strlen(__s),
              strncat(__s, "/", 1024 - v18),
              v19 = strlen(__s),
              strncat(__s, v7, 1024 - v19),
              !stat(__s, &v41))
          || !mkdir(__s, 0x1FFu))
        {
          v20 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", __s);
          v21 = (void *)objc_msgSend(v6, "contentsOfDirectoryAtPath:error:", v20, &v39);
          v22 = this + 20;
          if (SHIBYTE(this[25]._os_unfair_lock_opaque) < 0)
            v22 = *(os_unfair_lock_s **)&v22->_os_unfair_lock_opaque;
          v23 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v22);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v24 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
          if (v24)
          {
            v25 = *(_QWORD *)v36;
            while (2)
            {
              for (i = 0; i != v24; ++i)
              {
                if (*(_QWORD *)v36 != v25)
                  objc_enumerationMutation(v21);
                v27 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
                if (objc_msgSend(v27, "hasPrefix:", v23))
                {
                  v28 = objc_msgSend(v20, "stringByAppendingPathComponent:", v27);
                  v29 = -[NSString stringByAppendingPathComponent:](v16, "stringByAppendingPathComponent:", v27);
                  v30 = objc_msgSend(v6, "fileExistsAtPath:isDirectory:", v28, &v40);
                  v31 = v40 ? 0 : v30;
                  if (v31 == 1)
                  {
                    if (objc_msgSend(v6, "fileExistsAtPath:isDirectory:", v29, &v40)
                      && (v40 || (objc_msgSend(v6, "removeItemAtPath:error:", v29, &v39) & 1) == 0))
                    {
                      NSLog(CFSTR("failed to remove file %@ from the shader cache destination path"), v29);
                      goto LABEL_50;
                    }
                    if ((objc_msgSend(v6, "copyItemAtPath:toPath:error:", v28, v29, &v39) & 1) == 0)
                    {
                      NSLog(CFSTR("failed to copy %@ to %@ which copy Metal shader cache"), v28, v29);
                      goto LABEL_50;
                    }
                  }
                }
              }
              v24 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
              v14 = 0;
              os_unfair_lock_opaque = 1;
              if (v24)
                continue;
              break;
            }
          }
          else
          {
            v14 = 0;
            os_unfair_lock_opaque = 1;
          }
          goto LABEL_51;
        }
      }
      os_unfair_lock_opaque = 0;
    }
    v14 = 0;
LABEL_51:
    v5 = v33;
    v4 = v34;
    goto LABEL_52;
  }
  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
LABEL_50:
    os_unfair_lock_opaque = 0;
    v14 = 1;
    goto LABEL_51;
  }
  v4 = v34;
  v5 = v33;
  MTLCompilerFSCache::copyShaderCache(objc_msgSend(v15, "UTF8String"), (uint64_t)-[NSString UTF8String](a2, "UTF8String"), (uint8_t *)__s);
  os_unfair_lock_opaque = 0;
  v14 = 1;
LABEL_52:
  LODWORD(v13) = os_unfair_lock_opaque != 0;
LABEL_53:
  objc_autoreleasePoolPop(v5);
  if (v14)
    v13 = 0;
  else
    v13 = v13;
  os_unfair_lock_unlock(v4);
  return v13;
}

void sub_1826AAF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

uint64_t getHash(const void *a1, CC_LONG a2, unsigned __int8 *a3)
{
  CC_SHA256_CTX c;

  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, a1, a2);
  return CC_SHA256_Final(a3, &c);
}

void MTLCompilerFSCache::getElementList(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t MTLCompilerFSCache::getShaderCacheKeys(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t cache_keys;

  v2 = this + 2;
  os_unfair_lock_lock(this + 2);
  if (*(_QWORD *)&this[12]._os_unfair_lock_opaque)
    cache_keys = fscache_get_cache_keys();
  else
    cache_keys = 0;
  os_unfair_lock_unlock(v2);
  return cache_keys;
}

void sub_1826AB084(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLPipelineDataCache::writeToDisc(MTLPipelineDataCache *this)
{
  os_unfair_lock_s *v2;
  FILE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t *j;
  __int128 v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  std::error_code *v13;
  int v14;
  __int128 v15;
  std::string v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD __ptr[5];
  char *v21;

  if (*((_BYTE *)this + 48))
  {
    v2 = (os_unfair_lock_s *)((char *)this + 8);
    os_unfair_lock_lock((os_unfair_lock_t)this + 2);
    v21 = 0;
    asprintf(&v21, "%s.tmp", *((const char **)this + 7));
    v3 = fopen(v21, "wb");
    if (!v3)
    {
      printf("Failed to open: %s\n", v21);
      exit(1);
    }
    v4 = *((_QWORD *)this + 11);
    __ptr[0] = 0x14D50504CLL;
    __ptr[1] = *((_QWORD *)this + 19);
    v5 = 48 * v4 + 48;
    __ptr[3] = 40;
    __ptr[4] = v5;
    for (i = (uint64_t *)*((_QWORD *)this + 14); i != *((uint64_t **)this + 15); i += 3)
    {
      v7 = *i;
      v5 += v7;
    }
    __ptr[2] = v5;
    v19 = v4;
    if (fwrite(__ptr, 1uLL, 0x28uLL, v3) != 40 || fwrite(&v19, 1uLL, 8uLL, v3) != 8)
    {
      printf("Failed to write to: %s\n", v21);
      exit(1);
    }
    for (j = (uint64_t *)*((_QWORD *)this + 10); j; j = (uint64_t *)*j)
    {
      if (*((char *)j + 39) < 0)
        std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)j[2], j[3]);
      else
        v16 = *(std::string *)(j + 2);
      v9 = *(_OWORD *)(j + 5);
      v18 = j[7];
      v17 = v9;
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v16;
      else
        v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
      v15 = v17;
      if (fwrite(v10, 1uLL, 0x20uLL, v3) != 32
        || fwrite((char *)&v15 + 8, 1uLL, 8uLL, v3) != 8
        || fwrite(&v15, 1uLL, 8uLL, v3) != 8)
      {
        printf("Failed to write to: %s\n", v21);
        exit(1);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
    }
    memset(&v16, 0, sizeof(v16));
    std::vector<unsigned long>::reserve((void **)&v16.__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 3));
    v11 = *((_QWORD *)this + 14);
    v12 = *((_QWORD *)this + 15);
    while (v11 != v12)
    {
      if (*(_QWORD *)v11 != (int)fwrite(*(const void **)(v11 + 16), 1uLL, *(_QWORD *)v11, v3))
      {
        printf("Failed to write to: %s\n", v21);
        exit(1);
      }
      v11 += 24;
    }
    if (fclose(v3))
    {
      printf("Failed to write to: %s\n", v21);
      exit(1);
    }
    rename((const std::__fs::filesystem::path *)v21, *((const std::__fs::filesystem::path **)this + 7), v13);
    if (v14)
      printf("Failed to write to: %s\n", *((const char **)this + 7));
    free(v21);
    if (v16.__r_.__value_.__r.__words[0])
    {
      v16.__r_.__value_.__l.__size_ = v16.__r_.__value_.__r.__words[0];
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    os_unfair_lock_unlock(v2);
  }
}

void sub_1826AB3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  os_unfair_lock_s *v18;

  os_unfair_lock_unlock(v18);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void MTLPipelineDataCache::addElement(uint64_t a1, _OWORD *a2, const void *a3, size_t a4)
{
  os_unfair_lock_s *v8;
  _OWORD *v9;
  __int128 v10;
  void *v11;
  size_t v12;
  unint64_t v13;
  size_t *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  size_t *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  unsigned __int8 *v27;
  void *__p;
  __int128 v29;
  void **p_p;

  if (*(_BYTE *)(a1 + 48))
  {
    v8 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    v9 = operator new(0x28uLL);
    __p = v9;
    v29 = xmmword_1827FC840;
    v10 = a2[1];
    *v9 = *a2;
    v9[1] = v10;
    *((_BYTE *)v9 + 32) = 0;
    v11 = malloc_type_malloc(a4, 0x6D54883DuLL);
    v12 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v12 + a4;
    memcpy(v11, a3, a4);
    v13 = *(_QWORD *)(a1 + 128);
    v14 = *(size_t **)(a1 + 120);
    if ((unint64_t)v14 >= v13)
    {
      v16 = *(_QWORD *)(a1 + 112);
      v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v16) >> 3);
      v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      else
        v20 = v18;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>(a1 + 128, v20);
      else
        v21 = 0;
      v22 = (size_t *)&v21[24 * v17];
      v23 = &v21[24 * v20];
      *v22 = a4;
      v22[1] = v12;
      v22[2] = (size_t)v11;
      v15 = v22 + 3;
      v25 = *(char **)(a1 + 112);
      v24 = *(char **)(a1 + 120);
      if (v24 != v25)
      {
        do
        {
          v26 = *(_OWORD *)(v24 - 24);
          *(v22 - 1) = *((_QWORD *)v24 - 1);
          *(_OWORD *)(v22 - 3) = v26;
          v22 -= 3;
          v24 -= 24;
        }
        while (v24 != v25);
        v24 = *(char **)(a1 + 112);
      }
      *(_QWORD *)(a1 + 112) = v22;
      *(_QWORD *)(a1 + 120) = v15;
      *(_QWORD *)(a1 + 128) = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v14 = a4;
      v14[1] = v12;
      v15 = v14 + 3;
      v14[2] = (size_t)v11;
    }
    *(_QWORD *)(a1 + 120) = v15;
    p_p = &__p;
    v27 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 64, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
    *((_QWORD *)v27 + 5) = a4;
    *((_QWORD *)v27 + 6) = v12;
    *((_QWORD *)v27 + 7) = v11;
    if (SHIBYTE(v29) < 0)
      operator delete(__p);
    os_unfair_lock_unlock(v8);
  }
}

void sub_1826AB690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  os_unfair_lock_s *v15;

  os_unfair_lock_unlock(v15);
  _Unwind_Resume(a1);
}

void MTLPipelineDataCache::getElementList(os_unfair_lock_s *this@<X0>, char **a2@<X8>)
{
  os_unfair_lock_s *v4;
  uint64_t *i;
  std::string *p_p;
  unint64_t v7;
  char *v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  std::string __p;
  __int128 v23;
  uint64_t v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = this + 2;
  os_unfair_lock_lock(this + 2);
  for (i = *(uint64_t **)&this[20]._os_unfair_lock_opaque; i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[2], i[3]);
    else
      __p = *(std::string *)(i + 2);
    v23 = *(_OWORD *)(i + 5);
    v24 = i[7];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v8 = a2[1];
    v7 = (unint64_t)a2[2];
    if ((unint64_t)v8 >= v7)
    {
      v11 = *a2;
      v12 = (v8 - *a2) >> 5;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 59)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v14 = v7 - (_QWORD)v11;
      if (v14 >> 4 > v13)
        v13 = v14 >> 4;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
        v15 = 0x7FFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)(a2 + 2), v15);
        v11 = *a2;
        v8 = a2[1];
      }
      else
      {
        v16 = 0;
      }
      v17 = *(_OWORD *)&p_p->__r_.__value_.__r.__words[2];
      v18 = &v16[32 * v12];
      *(_OWORD *)v18 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
      *((_OWORD *)v18 + 1) = v17;
      if (v8 == v11)
      {
        v21 = &v16[32 * v12];
      }
      else
      {
        v19 = &v16[32 * v12];
        do
        {
          v20 = *((_OWORD *)v8 - 1);
          v21 = v19 - 32;
          *((_OWORD *)v19 - 2) = *((_OWORD *)v8 - 2);
          *((_OWORD *)v19 - 1) = v20;
          v8 -= 32;
          v19 -= 32;
        }
        while (v8 != v11);
      }
      v10 = v18 + 32;
      *a2 = v21;
      a2[1] = v18 + 32;
      a2[2] = &v16[32 * v15];
      if (v11)
        operator delete(v11);
    }
    else
    {
      v9 = *(_OWORD *)&p_p->__r_.__value_.__r.__words[2];
      *(_OWORD *)v8 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
      *((_OWORD *)v8 + 1) = v9;
      v10 = v8 + 32;
    }
    a2[1] = v10;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  os_unfair_lock_unlock(v4);
}

void sub_1826AB870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  os_unfair_lock_s *v15;
  void *v17;

  if (a14 < 0)
    operator delete(__p);
  os_unfair_lock_unlock(v15);
  v17 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineDataCache::getShaderCacheKeys(MTLPipelineDataCache *this)
{
  return 0;
}

uint64_t MTLCompilerCache::copyShaderCache(MTLCompilerCache *this, NSString *a2)
{
  return 0;
}

uint64_t MTLCompilerFSCache::getVersion(MTLCompilerFSCache *this)
{
  return 0;
}

uint64_t MTLPipelineDataCache::getVersion(MTLPipelineDataCache *this)
{
  return (uint64_t)this + 152;
}

_QWORD *std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::__emplace_unique_key_args<HashKey,HashKey const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v6;
  v15 = a3[1];
  *((_OWORD *)i + 1) = *a3;
  *((_OWORD *)i + 2) = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_48:
    *v23 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826ABAF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_4(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

void initLogMode()
{
  if (initLogMode_pred != -1)
    dispatch_once(&initLogMode_pred, &__block_literal_global_0);
}

uint64_t __initLogMode_block_invoke()
{
  void *v0;
  char *v1;
  uint64_t result;
  const __CFString *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v3 = CFSTR("METAL_TELEMETRY_LOG_MODE");
  v4[0] = &unk_1E103B228;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, &v3, 1);
  _CFXPreferencesRegisterDefaultValues();
  v1 = getenv((const char *)objc_msgSend(CFSTR("METAL_TELEMETRY_LOG_MODE"), "UTF8String"));
  if (v1)
    result = strtol(v1, 0, 0);
  else
    result = objc_msgSend(v0, "integerForKey:", CFSTR("METAL_TELEMETRY_LOG_MODE"));
  logMode = result;
  return result;
}

void MTLHashKey::MTLHashKey(MTLHashKey *this, const MTLHashKey *a2)
{
  __int128 v2;

  this->var0.var2 = 4;
  this->var2.var0 = 0;
  *(_OWORD *)&this->var0.var0 = xmmword_1827FC8C0;
  this->var2.var1 = 0;
  this->var2.var2.var0 = 0;
  this->var0.var2 = a2->var0.var2;
  *(_OWORD *)&this->var0.var0 = *(_OWORD *)&a2->var0.var0;
  v2 = *(_OWORD *)a2->var1.var0;
  *(_OWORD *)&this->var1.var0[16] = *(_OWORD *)&a2->var1.var0[16];
  *(_OWORD *)this->var1.var0 = v2;
  if (this != a2)
    std::vector<MTLUINT256_t>::__assign_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)&this->var2, (char *)a2->var2.var0, (uint64_t)a2->var2.var1, (a2->var2.var1 - a2->var2.var0) >> 5);
}

void sub_1826ABD0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

__n128 MTLHashKey::MTLHashKey(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_BYTE *)(a1 + 16) = 4;
  *(_OWORD *)a1 = xmmword_1827FC8C0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 16);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

void MTLHashKey::MTLHashKey(MTLHashKey *this, const MTLFunctionToolList *a2)
{
  vector<MTLUINT256_t, std::allocator<MTLUINT256_t>> *p_var2;
  _OWORD *v5;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *var0;
  __compressed_pair<MTLUINT256_t *, std::allocator<MTLUINT256_t>> *v7;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *var1;
  __int128 v9;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v17;
  __int128 v18;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v19;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v20;
  __int128 v21;
  _OWORD **v22;
  _OWORD **i;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v33;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v34;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v35;
  __int128 v36;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  int *v41;
  int *v42;
  int v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v51;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v52;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *v53;
  __int128 v54;
  uint64_t v55;
  const MTLFunctionToolList *v56;
  __int128 v57;
  __int128 v58;

  this->var0.var2 = 4;
  *(_OWORD *)&this->var0.var0 = xmmword_1827FC8C0;
  this->var2.var0 = 0;
  p_var2 = &this->var2;
  this->var2.var1 = 0;
  this->var2.var2.var0 = 0;
  std::vector<MTLUINT256_t>::reserve((void **)&this->var2.var0, 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2)+ ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3)+ 1);
  v5 = *(_OWORD **)a2;
  v7 = &this->var2.var2;
  var0 = this->var2.var2.var0;
  var1 = this->var2.var1;
  if (var1 >= var0)
  {
    v11 = (var1 - p_var2->var0) >> 5;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v13 = var0 - p_var2->var0;
    if (v13 >> 4 > v12)
      v12 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&this->var2.var2, v14);
    else
      v15 = 0;
    v16 = &v15[32 * v11];
    v17 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)&v15[32 * v14];
    v18 = v5[1];
    *(_OWORD *)v16 = *v5;
    *((_OWORD *)v16 + 1) = v18;
    v10 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)(v16 + 32);
    v20 = this->var2.var0;
    v19 = this->var2.var1;
    if (v19 != v20)
    {
      do
      {
        v21 = *((_OWORD *)v19 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v19 - 2);
        *((_OWORD *)v16 - 1) = v21;
        v16 -= 32;
        v19 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v19 - 32);
      }
      while (v19 != v20);
      v19 = p_var2->var0;
    }
    this->var2.var0 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)v16;
    this->var2.var1 = v10;
    this->var2.var2.var0 = v17;
    if (v19)
      operator delete(v19);
  }
  else
  {
    v9 = v5[1];
    *(_OWORD *)var1 = *v5;
    *((_OWORD *)var1 + 1) = v9;
    v10 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)var1 + 32);
  }
  this->var2.var1 = v10;
  this->var0.var0 |= 1uLL;
  v56 = a2;
  v22 = (_OWORD **)*((_QWORD *)a2 + 1);
  for (i = (_OWORD **)*((_QWORD *)a2 + 2); v22 != i; ++v22)
  {
    v24 = *v22;
    if (v10 >= v7->var0)
    {
      v26 = (v10 - p_var2->var0) >> 5;
      if ((unint64_t)(v26 + 1) >> 59)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v27 = v7->var0 - p_var2->var0;
      v28 = v27 >> 4;
      if (v27 >> 4 <= (unint64_t)(v26 + 1))
        v28 = v26 + 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
        v29 = 0x7FFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      if (v29)
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&this->var2.var2, v29);
      else
        v30 = 0;
      v31 = &v30[32 * v26];
      v32 = v24[1];
      *(_OWORD *)v31 = *v24;
      *((_OWORD *)v31 + 1) = v32;
      v34 = this->var2.var0;
      v33 = this->var2.var1;
      v35 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)v31;
      if (v33 != v34)
      {
        do
        {
          v36 = *((_OWORD *)v33 - 1);
          *((_OWORD *)v35 - 2) = *((_OWORD *)v33 - 2);
          *((_OWORD *)v35 - 1) = v36;
          v35 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v35 - 32);
          v33 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v33 - 32);
        }
        while (v33 != v34);
        v33 = p_var2->var0;
      }
      v10 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)(v31 + 32);
      this->var2.var0 = v35;
      this->var2.var1 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)(v31 + 32);
      this->var2.var2.var0 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)&v30[32 * v29];
      if (v33)
        operator delete(v33);
    }
    else
    {
      v25 = v24[1];
      *(_OWORD *)v10 = *v24;
      *((_OWORD *)v10 + 1) = v25;
      v10 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v10 + 32);
    }
    this->var2.var1 = v10;
    this->var0.var0 += 1 << this->var0.var2;
  }
  v37 = p_var2->var0;
  if ((unint64_t)(v10 - p_var2->var0) > 0x20)
  {
    v38 = (unint64_t *)((char *)v37 + 32);
    v39 = 126 - 2 * __clz((v10 - ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v37 + 32)) >> 5);
    if (v10 == ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)v38)
      v40 = 0;
    else
      v40 = v39;
    std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *,false>(v38, (unint64_t)v10, v40, 1);
    v10 = this->var2.var1;
  }
  v42 = (int *)*((_QWORD *)v56 + 4);
  v41 = (int *)*((_QWORD *)v56 + 5);
  if (v42 != v41)
  {
    while (1)
    {
      v43 = *v42;
      v57 = *(_OWORD *)(v42 + 1);
      v58 = *(_OWORD *)(v42 + 5);
      if (v10 >= v7->var0)
      {
        v45 = (v10 - p_var2->var0) >> 5;
        if ((unint64_t)(v45 + 1) >> 59)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v46 = v7->var0 - p_var2->var0;
        v47 = v46 >> 4;
        if (v46 >> 4 <= (unint64_t)(v45 + 1))
          v47 = v45 + 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0)
          v48 = 0x7FFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        if (v48)
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&this->var2.var2, v48);
        else
          v49 = 0;
        v50 = &v49[32 * v45];
        *(_OWORD *)v50 = v57;
        *((_OWORD *)v50 + 1) = v58;
        v52 = this->var2.var0;
        v51 = this->var2.var1;
        v53 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)v50;
        if (v51 != v52)
        {
          do
          {
            v54 = *((_OWORD *)v51 - 1);
            *((_OWORD *)v53 - 2) = *((_OWORD *)v51 - 2);
            *((_OWORD *)v53 - 1) = v54;
            v53 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v53 - 32);
            v51 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v51 - 32);
          }
          while (v51 != v52);
          v51 = p_var2->var0;
        }
        v10 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)(v50 + 32);
        this->var2.var0 = v53;
        this->var2.var1 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)(v50 + 32);
        this->var2.var2.var0 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)&v49[32 * v48];
        if (v51)
          operator delete(v51);
      }
      else
      {
        v44 = *(_OWORD *)(v42 + 5);
        *(_OWORD *)v10 = *(_OWORD *)(v42 + 1);
        *((_OWORD *)v10 + 1) = v44;
        v10 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v10 + 32);
      }
      this->var2.var1 = v10;
      if (v43 == 1026)
      {
        v55 = 2;
        goto LABEL_63;
      }
      if (v43 == 1027)
        break;
      if (v43 == 1032)
      {
        v55 = 8;
LABEL_63:
        this->var0.var0 |= v55;
      }
      v42 += 9;
      if (v42 == v41)
        goto LABEL_65;
    }
    v55 = 4;
    goto LABEL_63;
  }
LABEL_65:
  CC_SHA256(this->var2.var0, ((_DWORD)v10 - (unint64_t)this->var2.var0) & 0xFFFFFFE0, this->var1.var0);
}

void sub_1826AC188(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MTLUINT256_t>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t MTLHashKey::MTLHashKey(uint64_t a1, _OWORD *a2, uint64_t a3, unint64_t a4)
{
  char **v8;
  unint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  __int128 v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  unint64_t v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  unint64_t v45;
  __int128 v46;
  _OWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  int v59;
  uint64_t v60;

  *(_BYTE *)(a1 + 16) = 4;
  *(_OWORD *)a1 = xmmword_1827FC8C0;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (char **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<MTLUINT256_t>::reserve((void **)(a1 + 56), a4);
  v10 = (_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  v11 = *(_OWORD **)(a1 + 64);
  if ((unint64_t)v11 >= v9)
  {
    v14 = ((char *)v11 - *v8) >> 5;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 59)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v16 = v9 - (_QWORD)*v8;
    if (v16 >> 4 > v15)
      v15 = v16 >> 4;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
      v17 = 0x7FFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(a1 + 72, v17);
    else
      v18 = 0;
    v19 = &v18[32 * v14];
    v20 = &v18[32 * v17];
    v21 = a2[1];
    *(_OWORD *)v19 = *a2;
    *((_OWORD *)v19 + 1) = v21;
    v13 = (unint64_t *)(v19 + 32);
    v23 = *(char **)(a1 + 56);
    v22 = *(char **)(a1 + 64);
    if (v22 != v23)
    {
      do
      {
        v24 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v19 - 1) = v24;
        v19 -= 32;
        v22 -= 32;
      }
      while (v22 != v23);
      v22 = *v8;
    }
    *(_QWORD *)(a1 + 56) = v19;
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v20;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v12 = a2[1];
    *v11 = *a2;
    v11[1] = v12;
    v13 = (unint64_t *)(v11 + 2);
  }
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)a1 |= 1uLL;
  v25 = 1;
  if (a4 >= 2 && !*(_DWORD *)(a3 + 4))
  {
    v25 = 1;
    do
    {
      v26 = &a2[2 * v25];
      if ((unint64_t)v13 >= *v10)
      {
        v28 = ((char *)v13 - *v8) >> 5;
        if ((unint64_t)(v28 + 1) >> 59)
LABEL_70:
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v29 = *v10 - (_QWORD)*v8;
        v30 = v29 >> 4;
        if (v29 >> 4 <= (unint64_t)(v28 + 1))
          v30 = v28 + 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
          v31 = 0x7FFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(a1 + 72, v31);
        else
          v32 = 0;
        v33 = &v32[32 * v28];
        v34 = v26[1];
        *(_OWORD *)v33 = *v26;
        *((_OWORD *)v33 + 1) = v34;
        v36 = *(char **)(a1 + 56);
        v35 = *(char **)(a1 + 64);
        v37 = v33;
        if (v35 != v36)
        {
          do
          {
            v38 = *((_OWORD *)v35 - 1);
            *((_OWORD *)v37 - 2) = *((_OWORD *)v35 - 2);
            *((_OWORD *)v37 - 1) = v38;
            v37 -= 32;
            v35 -= 32;
          }
          while (v35 != v36);
          v35 = *v8;
        }
        v13 = (unint64_t *)(v33 + 32);
        *(_QWORD *)(a1 + 56) = v37;
        *(_QWORD *)(a1 + 64) = v33 + 32;
        *(_QWORD *)(a1 + 72) = &v32[32 * v31];
        if (v35)
          operator delete(v35);
      }
      else
      {
        v27 = v26[1];
        *(_OWORD *)v13 = *v26;
        *((_OWORD *)v13 + 1) = v27;
        v13 += 4;
      }
      *(_QWORD *)(a1 + 64) = v13;
      *(_QWORD *)a1 += 1 << *(_BYTE *)(a1 + 16);
      ++v25;
    }
    while (v25 < a4 && !*(_DWORD *)(a3 + 4 * v25));
  }
  v39 = *v8;
  if ((unint64_t)((char *)v13 - *v8) >= 0x21)
  {
    v40 = (unint64_t *)(v39 + 32);
    v41 = 126 - 2 * __clz(((char *)v13 - (v39 + 32)) >> 5);
    if (v13 == v40)
      v42 = 0;
    else
      v42 = v41;
    std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLUINT256_t const*,unsigned int const*,unsigned long)::$_0 &,MTLUINT256_t*,false>(v40, (unint64_t)v13, v42, 1);
  }
  if (v25 < a4)
  {
    while (1)
    {
      if (!*(_DWORD *)(a3 + 4 * v25))
        goto LABEL_69;
      v43 = &a2[2 * v25];
      v44 = *(_OWORD **)(a1 + 64);
      v45 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v44 >= v45)
      {
        v48 = ((char *)v44 - *v8) >> 5;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 59)
          goto LABEL_70;
        v50 = v45 - (_QWORD)*v8;
        if (v50 >> 4 > v49)
          v49 = v50 >> 4;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0)
          v51 = 0x7FFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(a1 + 72, v51);
        else
          v52 = 0;
        v53 = &v52[32 * v48];
        v54 = v43[1];
        *(_OWORD *)v53 = *v43;
        *((_OWORD *)v53 + 1) = v54;
        v56 = *(char **)(a1 + 56);
        v55 = *(char **)(a1 + 64);
        v57 = v53;
        if (v55 != v56)
        {
          do
          {
            v58 = *((_OWORD *)v55 - 1);
            *((_OWORD *)v57 - 2) = *((_OWORD *)v55 - 2);
            *((_OWORD *)v57 - 1) = v58;
            v57 -= 32;
            v55 -= 32;
          }
          while (v55 != v56);
          v55 = *v8;
        }
        v47 = v53 + 32;
        *(_QWORD *)(a1 + 56) = v57;
        *(_QWORD *)(a1 + 64) = v53 + 32;
        *(_QWORD *)(a1 + 72) = &v52[32 * v51];
        if (v55)
          operator delete(v55);
      }
      else
      {
        v46 = v43[1];
        *v44 = *v43;
        v44[1] = v46;
        v47 = v44 + 2;
      }
      *(_QWORD *)(a1 + 64) = v47;
      v59 = *(_DWORD *)(a3 + 4 * v25);
      if (v59 == 1032)
      {
        v60 = 8;
        goto LABEL_67;
      }
      if (v59 == 1027)
        break;
      if (v59 == 1026)
      {
        v60 = 2;
LABEL_67:
        *(_QWORD *)a1 |= v60;
      }
      if (++v25 == a4)
        goto LABEL_69;
    }
    v60 = 4;
    goto LABEL_67;
  }
LABEL_69:
  CC_SHA256(*(const void **)(a1 + 56), (*(_DWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) & 0xFFFFFFE0, (unsigned __int8 *)(a1 + 24));
  return a1;
}

void sub_1826AC624(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void MTLHashKey::getHashTools(unint64_t *a1, void *__dst, void *a3)
{
  unint64_t v5;

  memcpy(__dst, (const void *)a1[7], a1[8] - a1[7]);
  bzero(a3, (uint64_t)(a1[8] - a1[7]) >> 3);
  v5 = *a1;
  if ((*a1 & 2) != 0)
  {
    *((_DWORD *)a3 + (v5 >> *((_BYTE *)a1 + 16)) + 1) = 1026;
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_4;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  *((_DWORD *)a3 + (v5 >> *((_BYTE *)a1 + 16)) + 2) = 1027;
  if ((v5 & 8) == 0)
    return;
LABEL_4:
  *((_DWORD *)a3 + (v5 >> *((_BYTE *)a1 + 16)) + 3) = 1032;
}

BOOL MTLHashKey::areBitcodesEqual(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;

  v5 = *(unint64_t **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v7 = (uint64_t)(v6 - *(_QWORD *)a3) >> 5;
  if (v7 != *(_QWORD *)a1 >> *(_BYTE *)(a1 + 16))
    return 0;
  v8 = *(uint64_t **)(a1 + 56);
  v9 = *v8;
  v10 = v8[1];
  v11 = *a2;
  v12 = a2[1];
  v14 = v8[2];
  v13 = v8[3];
  v16 = a2[2];
  v15 = a2[3];
  v17 = v9 == v11 && v10 == v12;
  v18 = v17 && v14 == v16;
  if (!v18 || v13 != v15)
    return 0;
  if ((unint64_t *)v6 == v5)
    return 1;
  std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::areBitcodesEqual(MTLUINT256_t const*,std::vector<MTLUINT256_t>)::$_0 &,MTLUINT256_t*,false>(v5, v6, 126 - 2 * __clz(v7), 1);
  return memcmp((const void *)(*(_QWORD *)(a1 + 56) + 32), *(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3) == 0;
}

void MTLHashKey::~MTLHashKey(MTLHashKey *this)
{
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *var0;

  var0 = this->var2.var0;
  if (var0)
  {
    this->var2.var1 = var0;
    operator delete(var0);
  }
}

BOOL MTLHashKey::operator==(_QWORD *a1, _QWORD *a2)
{
  if (*a2 != *a1)
    return 0;
  return a2[3] == a1[3] && a2[4] == a1[4] && a2[5] == a1[5] && a2[6] == a1[6];
}

uint64_t MTLHashKey::hash(MTLHashKey *this)
{
  return *(_QWORD *)this->var1.var0;
}

uint64_t MTLHashKey::getHash(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (!a2 || a3)
  {
    if (!(a3 | a2))
      return *(_QWORD *)(a1 + 56);
    if (*(_QWORD *)a1 >> *(_BYTE *)(a1 + 16) >= (unint64_t)a3)
    {
      v3 = a3;
      return *(_QWORD *)(a1 + 56) + 32 * v3;
    }
    return 0;
  }
  if ((*(_QWORD *)a1 & (1 << a2)) == 0)
    return 0;
  v3 = (*(_QWORD *)a1 >> *(_BYTE *)(a1 + 16)) + a2;
  return *(_QWORD *)(a1 + 56) + 32 * v3;
}

uint64_t MTLHashKey::description(MTLHashKey *this)
{
  const __CFString *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  $8EF4127CF77ECA3DDB612FCF233DC3A8 *var0;
  __int128 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  void *v13;
  unsigned int v14;
  __int128 v15;
  _OWORD *v17;
  __int128 v18;
  void *v19;
  _OWORD *v20;
  __int128 v21;
  _OWORD *v22;
  __int128 v23;
  _OWORD v24[2];
  _OWORD v25[2];
  _OWORD v26[2];
  _OWORD v27[2];
  _OWORD v28[2];
  _OWORD v29[2];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (this->var0.var0)
    v2 = CFSTR("Key: \n");
  else
    v2 = CFSTR("Legacy key:\n");
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", v2);
  if (this->var0.var0)
  {
    v4 = this->var0.var0 >> this->var0.var2;
    v5 = (v4 + 1);
    var0 = this->var2.var0;
    v7 = *((_OWORD *)var0 + 1);
    v29[0] = *(_OWORD *)var0;
    v29[1] = v7;
    v8 = (void *)objc_msgSend(v3, "stringByAppendingFormat:", CFSTR(" %@ Function hash\n "), _MTLRequestHashToString((uint64_t)v29));
    if (v5 >= 2)
    {
      v9 = 1;
      v10 = 32;
      do
      {
        v11 = (_OWORD *)((char *)this->var2.var0 + v10);
        v12 = v11[1];
        v28[0] = *v11;
        v28[1] = v12;
        v8 = (void *)objc_msgSend(v8, "stringByAppendingFormat:", CFSTR("%@ Linked bitcode(%i)\n "), _MTLRequestHashToString((uint64_t)v28), v9++);
        v10 += 32;
      }
      while (v5 != v9);
    }
    if ((this->var0.var0 & 2) != 0)
    {
      v14 = v4 + 2;
      v17 = (_OWORD *)((char *)this->var2.var0 + 32 * v5);
      v18 = v17[1];
      v27[0] = *v17;
      v27[1] = v18;
      v13 = (void *)objc_msgSend(v8, "stringByAppendingFormat:", CFSTR("%@ air-nt \n "), _MTLRequestHashToString((uint64_t)v27));
    }
    else
    {
      v13 = (void *)objc_msgSend(v8, "stringByAppendingString:", CFSTR("n/a \n"));
      v14 = v4 + 1;
    }
    if ((this->var0.var0 & 4) != 0)
    {
      v20 = (_OWORD *)((char *)this->var2.var0 + 32 * v14);
      v21 = v20[1];
      ++v14;
      v26[0] = *v20;
      v26[1] = v21;
      v19 = (void *)objc_msgSend(v13, "stringByAppendingFormat:", CFSTR("%@ air-nt plugin\n "), _MTLRequestHashToString((uint64_t)v26));
    }
    else
    {
      v19 = (void *)objc_msgSend(v13, "stringByAppendingString:", CFSTR("n/a \n"));
    }
    if ((this->var0.var0 & 8) != 0)
    {
      v22 = (_OWORD *)((char *)this->var2.var0 + 32 * v14);
      v23 = v22[1];
      v25[0] = *v22;
      v25[1] = v23;
      return objc_msgSend(v19, "stringByAppendingFormat:", CFSTR("%@ metal framework \n "), _MTLRequestHashToString((uint64_t)v25));
    }
    else
    {
      return objc_msgSend(v19, "stringByAppendingString:", CFSTR("n/a \n"));
    }
  }
  else
  {
    v15 = *(_OWORD *)&this->var1.var0[16];
    v24[0] = *(_OWORD *)this->var1.var0;
    v24[1] = v15;
    return objc_msgSend(v3, "stringByAppendingFormat:", CFSTR("%@ Single SHA256 \n "), _MTLRequestHashToString((uint64_t)v24));
  }
}

char *std::vector<MTLUINT256_t>::__assign_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<MTLUINT256_t>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<MTLUINT256_t>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _OWORD *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  _OWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t *v45;
  __int128 v46;
  BOOL v47;
  __n128 result;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  _OWORD *v61;
  _OWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  __int128 v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  _OWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  __n128 *v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t *n128_u64;
  BOOL v95;
  uint64_t v96;
  unint64_t *v97;
  __n128 *v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  char *v103;
  __int128 v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  __n128 *v108;
  int64_t v109;
  int64_t v110;
  int64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t *v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  __n128 *v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  __int128 v153;
  __int128 v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  unint64_t *v158;
  __n128 *v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t *v163;
  __int128 v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  __int128 v168;
  __int128 v169;
  unint64_t v170;
  unint64_t v171;
  int v172;
  __int128 v173;
  __int128 v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  __int128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __n128 v185;
  __int128 v186;
  __n128 v187;
  __n128 v188;
  __int128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __n128 v197;
  __int128 v198;
  __n128 v199;
  __int128 v200;
  __int128 v201;
  __n128 v202;
  __int128 v203;

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = bswap64(*a2);
  v4 = bswap64(*result);
  if (v3 == v4
    && (v3 = bswap64(a2[1]), v4 = bswap64(result[1]), v3 == v4)
    && (v3 = bswap64(a2[2]), v4 = bswap64(result[2]), v3 == v4)
    && (v3 = bswap64(a2[3]), v4 = bswap64(result[3]), v3 == v4))
  {
    v5 = 0;
  }
  else if (v3 < v4)
  {
    v5 = -1;
  }
  else
  {
    v5 = 1;
  }
  v6 = bswap64(*a3);
  v7 = bswap64(*a2);
  if (v6 != v7
    || (v6 = bswap64(a3[1]), v7 = bswap64(a2[1]), v6 != v7)
    || (v6 = bswap64(a3[2]), v7 = bswap64(a2[2]), v6 != v7)
    || (v6 = bswap64(a3[3]), v7 = bswap64(a2[3]), v6 != v7))
  {
    if (v6 < v7)
      v8 = -1;
    else
      v8 = 1;
    if (v5 < 0)
      goto LABEL_14;
LABEL_24:
    if (v8 < 0)
    {
      v16 = *(_OWORD *)a2;
      v15 = *((_OWORD *)a2 + 1);
      v17 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v17;
      *(_OWORD *)a3 = v16;
      *((_OWORD *)a3 + 1) = v15;
      v18 = bswap64(*a2);
      v19 = bswap64(*result);
      if (v18 != v19)
        goto LABEL_35;
      v18 = bswap64(a2[1]);
      v19 = bswap64(result[1]);
      if (v18 == v19
        && (v18 = bswap64(a2[2]), v19 = bswap64(result[2]), v18 == v19)
        && (v18 = bswap64(a2[3]), v19 = bswap64(result[3]), v18 == v19))
      {
        v20 = 0;
      }
      else
      {
LABEL_35:
        v20 = v18 < v19 ? -1 : 1;
      }
      if (v20 < 0)
      {
        v25 = *(_OWORD *)result;
        v24 = *((_OWORD *)result + 1);
        v26 = *((_OWORD *)a2 + 1);
        *(_OWORD *)result = *(_OWORD *)a2;
        *((_OWORD *)result + 1) = v26;
        *(_OWORD *)a2 = v25;
        *((_OWORD *)a2 + 1) = v24;
      }
    }
    return result;
  }
  v8 = 0;
  if ((v5 & 0x80000000) == 0)
    goto LABEL_24;
LABEL_14:
  if (v8 < 0)
  {
    v22 = *(_OWORD *)result;
    v21 = *((_OWORD *)result + 1);
    v27 = *((_OWORD *)a3 + 1);
    *(_OWORD *)result = *(_OWORD *)a3;
    *((_OWORD *)result + 1) = v27;
    goto LABEL_41;
  }
  v10 = *(_OWORD *)result;
  v9 = *((_OWORD *)result + 1);
  v11 = *((_OWORD *)a2 + 1);
  *(_OWORD *)result = *(_OWORD *)a2;
  *((_OWORD *)result + 1) = v11;
  *(_OWORD *)a2 = v10;
  *((_OWORD *)a2 + 1) = v9;
  v12 = bswap64(*a3);
  v13 = bswap64(*a2);
  if (v12 == v13
    && (v12 = bswap64(a3[1]), v13 = bswap64(a2[1]), v12 == v13)
    && (v12 = bswap64(a3[2]), v13 = bswap64(a2[2]), v12 == v13)
    && (v12 = bswap64(a3[3]), v13 = bswap64(a2[3]), v12 == v13))
  {
    v14 = 0;
  }
  else if (v12 < v13)
  {
    v14 = -1;
  }
  else
  {
    v14 = 1;
  }
  if (v14 < 0)
  {
    v22 = *(_OWORD *)a2;
    v21 = *((_OWORD *)a2 + 1);
    v23 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v23;
LABEL_41:
    *(_OWORD *)a3 = v22;
    *((_OWORD *)a3 + 1) = v21;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      v7 = bswap64(*(a2 - 4));
      v8 = bswap64(*a1);
      if (v7 == v8
        && (v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        v9 = 0;
      }
      else if (v7 < v8)
      {
        v9 = -1;
      }
      else
      {
        v9 = 1;
      }
      if (v9 < 0)
      {
        v33 = *(_OWORD *)a1;
        v32 = *((_OWORD *)a1 + 1);
        v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      v24 = a1 + 4;
      v25 = a1 + 8;
      v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      v28 = *(a2 - 4);
      v27 = a2 - 4;
      v29 = bswap64(v28);
      v30 = bswap64(a1[12]);
      if (v29 == v30
        && (v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        v31 = 0;
      }
      else if (v29 < v30)
      {
        v31 = -1;
      }
      else
      {
        v31 = 1;
      }
      if (v31 < 0)
      {
        v36 = *(_OWORD *)v26;
        v35 = *((_OWORD *)a1 + 7);
        v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        v38 = bswap64(*v26);
        v39 = bswap64(*v25);
        if (v38 != v39)
          goto LABEL_54;
        v38 = bswap64(a1[13]);
        v39 = bswap64(a1[9]);
        if (v38 == v39
          && (v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          v40 = 0;
        }
        else
        {
LABEL_54:
          v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          v42 = *(_OWORD *)v25;
          v41 = *((_OWORD *)a1 + 5);
          v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          v44 = bswap64(*v25);
          v45 = bswap64(*v24);
          if (v44 != v45)
            goto LABEL_64;
          v44 = bswap64(a1[9]);
          v45 = bswap64(a1[5]);
          if (v44 == v45
            && (v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            v46 = 0;
          }
          else
          {
LABEL_64:
            v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            v48 = *(_OWORD *)v24;
            v47 = *((_OWORD *)a1 + 3);
            v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            v50 = bswap64(a1[4]);
            v51 = bswap64(*a1);
            if (v50 != v51)
              goto LABEL_73;
            v50 = bswap64(a1[5]);
            v51 = bswap64(a1[1]);
            if (v50 == v51
              && (v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              v52 = 0;
            }
            else
            {
LABEL_73:
              v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              v54 = *(_OWORD *)a1;
              v53 = *((_OWORD *)a1 + 1);
              v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      v11 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  do
  {
    v14 = bswap64(*v11);
    v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), v15 = bswap64(v10[3]), v14 != v15))
    {
      v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        v56 = *(_OWORD *)v11;
        v57 = *((_OWORD *)v11 + 1);
        v17 = v12;
        while (1)
        {
          v18 = (char *)a1 + v17;
          v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64)
            break;
          v20 = bswap64(v56);
          v21 = bswap64(*((_QWORD *)v18 + 4));
          if (v20 == v21
            && (v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((_QWORD *)v18 + 5)), v20 == v21)
            && (v20 = bswap64(v57), v21 = bswap64(*((_QWORD *)v18 + 6)), v20 == v21)
            && (v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((_QWORD *)v18 + 7)), v20 == v21))
          {
            v22 = 0;
          }
          else if (v20 < v21)
          {
            v22 = -1;
          }
          else
          {
            v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        v23 = a1;
LABEL_30:
        *(_OWORD *)v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8)
          return v11 + 4 == a2;
      }
    }
    v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a2, a3);
  v9 = bswap64(*a4);
  v10 = bswap64(*a3);
  if (v9 != v10
    || (v9 = bswap64(a4[1]), v10 = bswap64(a3[1]), v9 != v10)
    || (v9 = bswap64(a4[2]), v10 = bswap64(a3[2]), v9 != v10)
    || (v9 = bswap64(a4[3]), v10 = bswap64(a3[3]), v9 != v10))
  {
    v11 = v9 < v10 ? -1 : 1;
    if (v11 < 0)
    {
      v12 = *(_OWORD *)a3;
      result = *((__n128 *)a3 + 1);
      v13 = *((_OWORD *)a4 + 1);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((_OWORD *)a3 + 1) = v13;
      *(_OWORD *)a4 = v12;
      *((__n128 *)a4 + 1) = result;
      v14 = bswap64(*a3);
      v15 = bswap64(*a2);
      if (v14 != v15)
        goto LABEL_14;
      v14 = bswap64(a3[1]);
      v15 = bswap64(a2[1]);
      if (v14 == v15
        && (v14 = bswap64(a3[2]), v15 = bswap64(a2[2]), v14 == v15)
        && (v14 = bswap64(a3[3]), v15 = bswap64(a2[3]), v14 == v15))
      {
        v16 = 0;
      }
      else
      {
LABEL_14:
        v16 = v14 < v15 ? -1 : 1;
      }
      if (v16 < 0)
      {
        v17 = *(_OWORD *)a2;
        result = *((__n128 *)a2 + 1);
        v18 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_OWORD *)a2 + 1) = v18;
        *(_OWORD *)a3 = v17;
        *((__n128 *)a3 + 1) = result;
        v19 = bswap64(*a2);
        v20 = bswap64(*a1);
        if (v19 == v20
          && (v19 = bswap64(a2[1]), v20 = bswap64(a1[1]), v19 == v20)
          && (v19 = bswap64(a2[2]), v20 = bswap64(a1[2]), v19 == v20)
          && (v19 = bswap64(a2[3]), v20 = bswap64(a1[3]), v19 == v20))
        {
          v21 = 0;
        }
        else if (v19 < v20)
        {
          v21 = -1;
        }
        else
        {
          v21 = 1;
        }
        if (v21 < 0)
        {
          v22 = *(_OWORD *)a1;
          result = *((__n128 *)a1 + 1);
          v23 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v23;
          *(_OWORD *)a2 = v22;
          *((__n128 *)a2 + 1) = result;
        }
      }
    }
  }
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLUINT256_t const*,unsigned int const*,unsigned long)::$_0 &,MTLUINT256_t*,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _OWORD *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  _OWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t *v45;
  __int128 v46;
  BOOL v47;
  __n128 result;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  _OWORD *v61;
  _OWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  __int128 v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  _OWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  __n128 *v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t *n128_u64;
  BOOL v95;
  uint64_t v96;
  unint64_t *v97;
  __n128 *v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  char *v103;
  __int128 v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  __n128 *v108;
  int64_t v109;
  int64_t v110;
  int64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t *v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  __n128 *v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  __int128 v153;
  __int128 v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  unint64_t *v158;
  __n128 *v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t *v163;
  __int128 v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  __int128 v168;
  __int128 v169;
  unint64_t v170;
  unint64_t v171;
  int v172;
  __int128 v173;
  __int128 v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  __int128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __n128 v185;
  __int128 v186;
  __n128 v187;
  __n128 v188;
  __int128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __n128 v197;
  __int128 v198;
  __n128 v199;
  __int128 v200;
  __int128 v201;
  __n128 v202;
  __int128 v203;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLUINT256_t const*,unsigned int const*,unsigned long)::$_0 &,MTLUINT256_t*>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      v7 = bswap64(*(a2 - 4));
      v8 = bswap64(*a1);
      if (v7 == v8
        && (v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        v9 = 0;
      }
      else if (v7 < v8)
      {
        v9 = -1;
      }
      else
      {
        v9 = 1;
      }
      if (v9 < 0)
      {
        v33 = *(_OWORD *)a1;
        v32 = *((_OWORD *)a1 + 1);
        v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      v24 = a1 + 4;
      v25 = a1 + 8;
      v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      v28 = *(a2 - 4);
      v27 = a2 - 4;
      v29 = bswap64(v28);
      v30 = bswap64(a1[12]);
      if (v29 == v30
        && (v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        v31 = 0;
      }
      else if (v29 < v30)
      {
        v31 = -1;
      }
      else
      {
        v31 = 1;
      }
      if (v31 < 0)
      {
        v36 = *(_OWORD *)v26;
        v35 = *((_OWORD *)a1 + 7);
        v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        v38 = bswap64(*v26);
        v39 = bswap64(*v25);
        if (v38 != v39)
          goto LABEL_54;
        v38 = bswap64(a1[13]);
        v39 = bswap64(a1[9]);
        if (v38 == v39
          && (v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          v40 = 0;
        }
        else
        {
LABEL_54:
          v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          v42 = *(_OWORD *)v25;
          v41 = *((_OWORD *)a1 + 5);
          v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          v44 = bswap64(*v25);
          v45 = bswap64(*v24);
          if (v44 != v45)
            goto LABEL_64;
          v44 = bswap64(a1[9]);
          v45 = bswap64(a1[5]);
          if (v44 == v45
            && (v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            v46 = 0;
          }
          else
          {
LABEL_64:
            v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            v48 = *(_OWORD *)v24;
            v47 = *((_OWORD *)a1 + 3);
            v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            v50 = bswap64(a1[4]);
            v51 = bswap64(*a1);
            if (v50 != v51)
              goto LABEL_73;
            v50 = bswap64(a1[5]);
            v51 = bswap64(a1[1]);
            if (v50 == v51
              && (v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              v52 = 0;
            }
            else
            {
LABEL_73:
              v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              v54 = *(_OWORD *)a1;
              v53 = *((_OWORD *)a1 + 1);
              v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      v11 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  do
  {
    v14 = bswap64(*v11);
    v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), v15 = bswap64(v10[3]), v14 != v15))
    {
      v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        v56 = *(_OWORD *)v11;
        v57 = *((_OWORD *)v11 + 1);
        v17 = v12;
        while (1)
        {
          v18 = (char *)a1 + v17;
          v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64)
            break;
          v20 = bswap64(v56);
          v21 = bswap64(*((_QWORD *)v18 + 4));
          if (v20 == v21
            && (v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((_QWORD *)v18 + 5)), v20 == v21)
            && (v20 = bswap64(v57), v21 = bswap64(*((_QWORD *)v18 + 6)), v20 == v21)
            && (v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((_QWORD *)v18 + 7)), v20 == v21))
          {
            v22 = 0;
          }
          else if (v20 < v21)
          {
            v22 = -1;
          }
          else
          {
            v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        v23 = a1;
LABEL_30:
        *(_OWORD *)v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8)
          return v11 + 4 == a2;
      }
    }
    v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::areBitcodesEqual(MTLUINT256_t const*,std::vector<MTLUINT256_t>)::$_0 &,MTLUINT256_t*,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _OWORD *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  _OWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t *v45;
  __int128 v46;
  BOOL v47;
  __n128 result;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  _OWORD *v61;
  _OWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  __int128 v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  _OWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  __n128 *v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t *n128_u64;
  BOOL v95;
  uint64_t v96;
  unint64_t *v97;
  __n128 *v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  char *v103;
  __int128 v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  __n128 *v108;
  int64_t v109;
  int64_t v110;
  int64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t *v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  __n128 *v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  __int128 v153;
  __int128 v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  unint64_t *v158;
  __n128 *v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t *v163;
  __int128 v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  __int128 v168;
  __int128 v169;
  unint64_t v170;
  unint64_t v171;
  int v172;
  __int128 v173;
  __int128 v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  __int128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __n128 v185;
  __int128 v186;
  __n128 v187;
  __n128 v188;
  __int128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __n128 v197;
  __int128 v198;
  __n128 v199;
  __int128 v200;
  __int128 v201;
  __n128 v202;
  __int128 v203;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::areBitcodesEqual(MTLUINT256_t const*,std::vector<MTLUINT256_t>)::$_0 &,MTLUINT256_t*>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      v7 = bswap64(*(a2 - 4));
      v8 = bswap64(*a1);
      if (v7 == v8
        && (v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        v9 = 0;
      }
      else if (v7 < v8)
      {
        v9 = -1;
      }
      else
      {
        v9 = 1;
      }
      if (v9 < 0)
      {
        v33 = *(_OWORD *)a1;
        v32 = *((_OWORD *)a1 + 1);
        v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      v24 = a1 + 4;
      v25 = a1 + 8;
      v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      v28 = *(a2 - 4);
      v27 = a2 - 4;
      v29 = bswap64(v28);
      v30 = bswap64(a1[12]);
      if (v29 == v30
        && (v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        v31 = 0;
      }
      else if (v29 < v30)
      {
        v31 = -1;
      }
      else
      {
        v31 = 1;
      }
      if (v31 < 0)
      {
        v36 = *(_OWORD *)v26;
        v35 = *((_OWORD *)a1 + 7);
        v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        v38 = bswap64(*v26);
        v39 = bswap64(*v25);
        if (v38 != v39)
          goto LABEL_54;
        v38 = bswap64(a1[13]);
        v39 = bswap64(a1[9]);
        if (v38 == v39
          && (v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          v40 = 0;
        }
        else
        {
LABEL_54:
          v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          v42 = *(_OWORD *)v25;
          v41 = *((_OWORD *)a1 + 5);
          v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          v44 = bswap64(*v25);
          v45 = bswap64(*v24);
          if (v44 != v45)
            goto LABEL_64;
          v44 = bswap64(a1[9]);
          v45 = bswap64(a1[5]);
          if (v44 == v45
            && (v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            v46 = 0;
          }
          else
          {
LABEL_64:
            v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            v48 = *(_OWORD *)v24;
            v47 = *((_OWORD *)a1 + 3);
            v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            v50 = bswap64(a1[4]);
            v51 = bswap64(*a1);
            if (v50 != v51)
              goto LABEL_73;
            v50 = bswap64(a1[5]);
            v51 = bswap64(a1[1]);
            if (v50 == v51
              && (v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              v52 = 0;
            }
            else
            {
LABEL_73:
              v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              v54 = *(_OWORD *)a1;
              v53 = *((_OWORD *)a1 + 1);
              v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      v11 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  do
  {
    v14 = bswap64(*v11);
    v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), v15 = bswap64(v10[3]), v14 != v15))
    {
      v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        v56 = *(_OWORD *)v11;
        v57 = *((_OWORD *)v11 + 1);
        v17 = v12;
        while (1)
        {
          v18 = (char *)a1 + v17;
          v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64)
            break;
          v20 = bswap64(v56);
          v21 = bswap64(*((_QWORD *)v18 + 4));
          if (v20 == v21
            && (v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((_QWORD *)v18 + 5)), v20 == v21)
            && (v20 = bswap64(v57), v21 = bswap64(*((_QWORD *)v18 + 6)), v20 == v21)
            && (v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((_QWORD *)v18 + 7)), v20 == v21))
          {
            v22 = 0;
          }
          else if (v20 < v21)
          {
            v22 = -1;
          }
          else
          {
            v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        v23 = a1;
LABEL_30:
        *(_OWORD *)v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8)
          return v11 + 4 == a2;
      }
    }
    v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

void MTLIOAccelDeviceShmemRelease(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;

  v1 = *(os_unfair_lock_s **)&a1[2]._os_unfair_lock_opaque;
  if (v1)
  {
    v2 = v1 + 2;
    *(_QWORD *)&a1[2]._os_unfair_lock_opaque = 0;
    v5 = a1;
    os_unfair_lock_lock(v1 + 6);
    if (v5[13]._os_unfair_lock_opaque >= v1[12]._os_unfair_lock_opaque)
    {
      v3 = *(os_unfair_lock_s **)&v2->_os_unfair_lock_opaque;
      *(_QWORD *)&v5[4]._os_unfair_lock_opaque = *(_QWORD *)&v2->_os_unfair_lock_opaque;
      if (v3)
        v4 = v3 + 6;
      else
        v4 = v1 + 4;
      *(_QWORD *)&v4->_os_unfair_lock_opaque = v5 + 4;
      *(_QWORD *)&v2->_os_unfair_lock_opaque = v5;
      *(_QWORD *)&v5[6]._os_unfair_lock_opaque = v2;
      ++v1[7]._os_unfair_lock_opaque;
    }
    else
    {

    }
    os_unfair_lock_unlock(v1 + 6);
    a1 = v1;
  }

}

void sub_1826B346C(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1826B374C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x186DABF50](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2)
{
  const std::ios_base *v4;
  const std::locale::facet *v5;
  std::ios_base::fmtflags v6;
  _BYTE v8[16];
  std::locale v9;

  MEMORY[0x186DABE84](v8, a1);
  if (v8[0])
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    std::locale::use_facet(&v9, MEMORY[0x1E0DE4CD0]);
    std::locale::~locale(&v9);
    v4 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    if (v4[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v4);
      v5 = std::locale::use_facet(&v9, MEMORY[0x1E0DE4A90]);
      v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
      std::locale::~locale(&v9);
      v4[1].__fmtflags_ = v6;
    }
    strlen(*(const char **)(a2 + 8));
    if (!std::time_put<char,std::ostreambuf_iterator<char>>::put())
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 1);
  }
  MEMORY[0x186DABE90](v8);
  return a1;
}

void sub_1826B38A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x186DABE90](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1826B3884);
}

void sub_1826B38F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x186DABF50](a1 + 128);
  return a1;
}

void `anonymous namespace'::MessageDecoder::~MessageDecoder(std::locale *this)
{
  std::locale *v2;

  v2 = this + 27;
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&this[32]);
  std::locale::~locale(v2);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&this[24]);
  std::locale::~locale(this + 19);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&this[16]);
  std::locale::~locale(this + 11);
  if (SHIBYTE(this[5].__locale_) < 0)
    operator delete(this[3].__locale_);
  if (SHIBYTE(this[2].__locale_) < 0)
    operator delete(this->__locale_);
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, char *a2, int a3)
{
  std::regex_traits<char> *v6;
  size_t v7;

  v6 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v6[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v6[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[1].__col_ + 4) = 0u;
  HIDWORD(v6[2].__ct_) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)&a2[v7]) != (std::basic_regex<char> *)&a2[v7])std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1826B3D64(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x186DABF14]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E0DE4C08]);
  return this;
}

void sub_1826B3DC8(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E0FDF080;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>((std::basic_regex<char> *)a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (char *)a3);
  }
}

void sub_1826B3F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826B3F84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 != (unsigned __int8 *)a3)
  {
    while (*v8 == 124)
    {
      v12 = a1->__end_;
      v13 = v8 + 1;
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v14, a3);
      }
      while (v14 != v8);
      if (v8 == v13)
      {
        v15 = (std::__node<char> *)operator new();
        v16 = a1->__end_;
        v17 = v16->__first_;
        v15[1].__vftable = (std::__node<char>_vtbl *)v17;
        v16->__first_ = v15;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
      if (v8 == (unsigned __int8 *)a3)
        return a3;
    }
    return (char *)v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_1E0FDF2F0;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, (char *)v3, v4);
    }
    while (v3 != v10);
    if (v10 != (unsigned __int8 *)v4)
    {
      if (v10 + 1 != (unsigned __int8 *)v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_1E0FDF350;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (std::basic_regex<char> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (unsigned __int8 *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::basic_regex<char> *v12;
  std::basic_regex<char> *v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
  while (v12 != a3)
  {
    v13 = (std::basic_regex<char> *)memchr(v12, 10, (char *)a3 - (char *)v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826B4624(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x186DABFBCLL);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

_QWORD *std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E0FDF4D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1826B46BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x186DABFBCLL);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x186DABFBCLL);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&unk_1E0FDF050;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&unk_1E0FDF508;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v18;
  int v20;
  BOOL v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            marked_count = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            v13 = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_31:
            v3 = v12 + 1;
            std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&v23.__start_);
            std::locale::~locale(&v23.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_21:
    *(_QWORD *)v14 = v18 + 16;
    *(_QWORD *)(v14 + 8) = first;
    *(_BYTE *)(v14 + 16) = v15;
    end->__first_ = (std::__node<char> *)v14;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_21;
  }
  if (a2 + 1 != a3)
  {
    v20 = a2[1];
    if (v20 == 66)
    {
      v21 = 1;
    }
    else
    {
      if (v20 != 98)
        return v3;
      v21 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v21);
    v3 += 2;
  }
  return v3;
}

void sub_1826B4CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  int *p_open_count;
  unsigned __int8 *v12;
  unsigned int marked_count;
  unsigned __int8 *v14;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = (char)*a2;
  if (v6 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, a2, a3);
      if (v6 != 123)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      if (v6 != 63)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
LABEL_29:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
  if (v6 == 40)
  {
    if (a2 + 1 == a3)
      goto LABEL_30;
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
      if (v12 == a3)
        goto LABEL_30;
      v3 = v12;
      if (*v12 != 41)
        goto LABEL_30;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v14 == a3 || (v3 = v14, *v14 != 41))
LABEL_30:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
    }
    --*p_open_count;
    return ++v3;
  }
  if (v6 == 46)
  {
    v7 = (std::__node<char> *)operator new();
    end = this->__end_;
    first = end->__first_;
    v7->__vftable = (std::__node<char>_vtbl *)&unk_1E0FDF538;
    v7[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v7;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if ((v6 - 42) < 2)
    goto LABEL_29;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &unk_1E0FDF170;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  std::__node<char> *v8;

  v8 = (std::__node<char> *)operator new();
  std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100]((uint64_t)v8, (uint64_t)a2, a3, (uint64_t)this->__end_->__first_, a4);
  this->__end_->__first_ = v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1826B5314(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826B5370(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E0FDF170;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E0FDF170;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &unk_1E0FDF0B0;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E0FDF0B0;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E0FDF0B0;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x186DABFBCLL);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::sub_match<const char *> *begin;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  std::vector<std::csub_match>::value_type v22;
  char v23;
  uint64_t v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(&v22, 0, 17);
  v23 = 0;
  v24 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  v19 = v5;
  v20 = v5;
  v21 = 0;
  v22 = v18;
  v24 = v5;
  v23 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1826B5A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  std::match_results<const char *>::value_type *p_unmatched;

  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos)
    this->__position_start_ = __f;
  this->__ready_ = 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  _OWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  const char *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v34;
  _BYTE v37[56];
  void *__p[2];
  _QWORD v39[4];
  std::vector<std::csub_match>::value_type __x;
  _OWORD *v41;
  _OWORD *v42;
  unint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v39, 0, 21);
    v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v37[32])
    {
      *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v34 = a4;
    v11 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    v12 = v42;
    *((_QWORD *)v42 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    v13 = 1;
    while (2)
    {
      if ((v13 & 0xFFF) == 0 && (int)(v13 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v15 = v12 - 1;
      v14 = *((_QWORD *)v12 - 2);
      v16 = v12 - 6;
      if (v14)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v12 - 6);
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          v17 = (const char *)*((_QWORD *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3)
            goto LABEL_16;
          v25 = *v34;
          *(_QWORD *)v25 = a2;
          *(_QWORD *)(v25 + 8) = v17;
          *(_BYTE *)(v25 + 16) = 1;
          v26 = *((_QWORD *)v12 - 8);
          v27 = *((_QWORD *)v12 - 7) - v26;
          if (v27)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
            v29 = (_BYTE *)(v26 + 16);
            v30 = 1;
            do
            {
              v31 = v25 + 24 * v30;
              *(_OWORD *)v31 = *((_OWORD *)v29 - 1);
              v32 = *v29;
              v29 += 24;
              *(_BYTE *)(v31 + 16) = v32;
            }
            while (v28 > v30++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v18 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (_QWORD *)v42 - 12);
          v42 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          v19 = *(v12 - 5);
          *(_OWORD *)v37 = *v16;
          *(_OWORD *)&v37[16] = v19;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((__int128 **)v12 - 8), *((__int128 **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v12 - 5), *((__int128 **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          v20 = *v15;
          *(_QWORD *)((char *)&v39[1] + 5) = *(_QWORD *)((char *)v12 - 11);
          v39[1] = v20;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v15 + 24))(*v15, 1, v12 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v39[1] + 24))(v39[1], 0, v37);
          v21 = v42;
          if ((unint64_t)v42 >= v43)
          {
            v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v22 = *(_OWORD *)&v37[16];
            *v42 = *(_OWORD *)v37;
            v21[1] = v22;
            *((_QWORD *)v21 + 4) = 0;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v21 + 6) = 0;
            *((_QWORD *)v21 + 7) = 0;
            v21[2] = *(_OWORD *)&v37[32];
            *((_QWORD *)v21 + 6) = *(_QWORD *)&v37[48];
            memset(&v37[32], 0, 24);
            *((_QWORD *)v21 + 8) = 0;
            *((_QWORD *)v21 + 9) = 0;
            *(_OWORD *)((char *)v21 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v21 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            v23 = v39[1];
            *(_QWORD *)((char *)v21 + 85) = *(_QWORD *)((char *)&v39[1] + 5);
            *((_QWORD *)v21 + 10) = v23;
            v42 = v21 + 6;
          }
          if (*(_QWORD *)&v37[32])
          {
            *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          v12 = v42;
          ++v13;
          if (v41 != v42)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_1826B5E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3;
  BOOL v4;
  std::vector<std::csub_match>::size_type v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v4 = __sz >= v3;
  v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826B6144(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826B6190(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 85);
  *((_QWORD *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_1826B62DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 - 11);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::__state<char>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (_QWORD *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::__compressed_pair<std::csub_match *> *p_end_cap;
  std::sub_match<const char *> *v7;
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  std::sub_match<const char *> *v15;
  std::vector<std::csub_match>::size_type v16;
  std::pair<const char *, const char *> v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> *v21;
  std::pair<const char *, const char *> v22;
  std::sub_match<const char *> *v23;
  std::sub_match<const char *> *end;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v26;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      v15 = &v9[__n];
      v16 = 24 * __n;
      do
      {
        v17 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&v9->matched = *(_QWORD *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>((uint64_t)p_end_cap, v13);
    else
      v14 = 0;
    v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    v19 = &v18[__n];
    v20 = 24 * __n;
    v21 = v18;
    do
    {
      v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      *v21 = v22;
      v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v26 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v18[-1].matched = *(_QWORD *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::__compressed_pair<std::pair<unsigned long, const char *> *, std::allocator<std::pair<unsigned long, const char *>>> *p_end_cap;
  std::pair<unsigned long, const char *> *v5;
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = (char *)v7 - (char *)this->__begin_;
    v9 = __n + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)p_end_cap, v12);
    else
      v13 = 0;
    v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    v16 = &v14[__n];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1826B68D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1826B6948(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5)
        return a2;
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &unk_1E0FDF598;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &unk_1E0FDF568;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826B6CF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = (char)*a2;
    v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x186DABFBCLL);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826B6E44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;

  if (a2 == a3)
    return a2;
  v4 = *a2;
  v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8)
    return a2;
  v6 = a3;
  v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 - 48) > 9)
        break;
      if (v5 >= 0x19999999)
        goto LABEL_16;
      ++v7;
      v5 = v8 + 10 * v5 - 48;
      if (v7 == a3)
        goto LABEL_12;
    }
    v6 = v7;
LABEL_12:
    if (!v5)
      goto LABEL_16;
  }
  if (v5 > a1->__marked_count_)
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  BOOL v5;
  BOOL v6;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v8;
  BOOL v9;
  std::__bracket_expression<char, std::regex_traits<char>> *v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100)
      return v3;
    v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      v6 = 1;
      goto LABEL_12;
    case 'S':
      v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      v5 = 1;
LABEL_15:
      v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  char v6;
  std::string *v7;
  std::basic_regex<char>::value_type locale;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  std::string::value_type v16;
  char v17;
  std::string::value_type v18;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v7 = a4;
            locale = 10;
            goto LABEL_50;
          }
          locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            v7 = a4;
            locale = 13;
            goto LABEL_50;
          }
          locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            v7 = a4;
            locale = 9;
            goto LABEL_50;
          }
          locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
            goto LABEL_64;
          v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_24;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6)
            goto LABEL_64;
          v11 = -87;
LABEL_24:
          v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_30;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6)
            goto LABEL_64;
          v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
            goto LABEL_35;
          v14 |= 0x20u;
          if ((v14 - 97) >= 6)
            goto LABEL_64;
          v15 = -87;
LABEL_35:
          v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4)
            std::string::operator=(a4, v16);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            v7 = a4;
            locale = 11;
            goto LABEL_50;
          }
          locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v7 = a4;
        locale = 0;
        goto LABEL_50;
      }
      locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v7 = a4;
          locale = 12;
LABEL_50:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v7 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_64;
    v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v17 & 0xDF) - 65) > 0x19u)
      goto LABEL_64;
    v18 = v17 & 0x1F;
    if (a4)
      std::string::operator=(a4, v18);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](v8, (uint64_t)this, v2, (uint64_t)this->__end_->__first_);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E0FDF320;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E0FDF110;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1826B73AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826B7408(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E0FDEFC8;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_1E0FDF290;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1826B7584(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E0FDF290;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E0FDF290;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E0FDF320;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E0FDF320;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E0FDF1A0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E0FDF1A0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E0FDF260;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E0FDF260;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = *(unsigned __int8 **)(a2 + 16);
      v10 = v6;
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v9++;
        if (v11 != v13)
          break;
        if (!--v10)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x186DABFBCLL);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  std::__bracket_expression<char, std::regex_traits<char>> *v4;

  v4 = (std::__bracket_expression<char, std::regex_traits<char>> *)operator new();
  std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v4, (uint64_t)this, (uint64_t)this->__end_->__first_, __negate, this->__flags_ & 1, (this->__flags_ & 8) != 0);
  this->__end_->__first_ = v4;
  this->__end_ = v4;
  return v4;
}

void sub_1826B7D98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_1826B80F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x186DABFBC](a1, 0x10F1C4061CF1F02);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  signed __int8 v6;
  signed __int8 v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  BOOL v22;
  int v23;
  size_t size;
  std::vector<std::pair<std::string, std::string>>::pointer v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  size_t v30;
  std::string *data;
  size_t v32;
  int v33;
  BOOL v34;
  int v35;
  _BOOL4 negate;
  uint64_t v37;
  size_t v38;
  unsigned __int8 v39;
  std::vector<char>::pointer v40;
  unint64_t v41;
  int v42;
  std::regex_traits<char>::char_class_type v43;
  int v44;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v46;
  char *v47;
  std::vector<std::pair<std::string, std::string>>::pointer v48;
  std::vector<std::pair<std::string, std::string>>::pointer v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  const void *v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  size_t v58;
  std::vector<std::pair<std::string, std::string>>::pointer v59;
  size_t v60;
  int v61;
  _BOOL4 v62;
  int v63;
  size_t v64;
  std::string *v65;
  size_t v66;
  int v67;
  BOOL v68;
  std::vector<std::string>::pointer v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  size_t v75;
  size_t v76;
  uint64_t v77;
  BOOL v78;
  std::string *v79;
  std::string::size_type v80;
  int v81;
  std::string *v82;
  void **v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  std::regex_traits<char>::char_class_type v87;
  int v88;
  std::vector<std::string>::pointer v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  unint64_t v93;
  size_t v94;
  void *v95;
  size_t v96;
  uint64_t v97;
  BOOL v98;
  std::string *v99;
  std::string::size_type v100;
  int v101;
  std::string *v102;
  void **v103;
  uint64_t v104;
  int v105;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v108;
  std::regex_traits<char>::char_class_type neg_mask;
  int v110;
  std::__node<char> *first;
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  _BOOL4 v116;
  _BOOL4 v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *__p;
  size_t v123;
  char v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint64_t v127;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v37 = 0;
    negate = this->__negate_;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_58;
  v6 = *current;
  v125 = *current;
  v7 = current[1];
  v126 = v7;
  if (this->__icase_)
  {
    v125 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    v126 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124)
      goto LABEL_8;
LABEL_58:
    negate = 0;
    v37 = 1;
    goto LABEL_59;
  }
  v38 = v123;
  operator delete(__p);
  if (!v38)
    goto LABEL_58;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    do
    {
      if (v125 == *(p_second - 1) && v126 == *p_second)
        goto LABEL_218;
      p_second += 2;
      --v11;
    }
    while (v11);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127);
    v14 = this->__ranges_.__begin_;
    v15 = v124;
    v16 = (char *)this->__ranges_.__end_ - (char *)v14;
    if (v16)
    {
      v17 = 0;
      v18 = v16 / 48;
      v113 = v124;
      if (v124 >= 0)
        v19 = v124;
      else
        v19 = v123;
      if (v124 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v18 <= 1)
        v21 = 1;
      else
        v21 = v16 / 48;
      v22 = 1;
      while (1)
      {
        v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v23 >= 0)
          size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        else
          size = v14->first.__r_.__value_.__l.__size_;
        if (v23 >= 0)
          v25 = v14;
        else
          v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
        if (size >= v19)
          v26 = v19;
        else
          v26 = size;
        v27 = memcmp(p_p, v25, v26);
        v28 = v19 >= size;
        if (v27)
          v28 = v27 >= 0;
        if (v28)
        {
          v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          if (v29 >= 0)
            v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          else
            v30 = v14->second.__r_.__value_.__l.__size_;
          if (v29 >= 0)
            data = &v14->second;
          else
            data = (std::string *)v14->second.__r_.__value_.__l.__data_;
          if (v19 >= v30)
            v32 = v30;
          else
            v32 = v19;
          v33 = memcmp(data, p_p, v32);
          v34 = v30 >= v19;
          if (v33)
            v34 = v33 >= 0;
          if (v34)
            break;
        }
        v22 = ++v17 < v18;
        ++v14;
        if (v21 == v17)
        {
          v35 = 0;
          negate = 0;
          goto LABEL_162;
        }
      }
      negate = 1;
      v35 = 5;
LABEL_162:
      p_traits = &this->__traits_;
      v15 = v113;
    }
    else
    {
      v22 = 0;
      v35 = 0;
      negate = 0;
    }
    if (v15 < 0)
      operator delete(__p);
    if (v22)
      goto LABEL_195;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_200;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  v89 = this->__equivalences_.__begin_;
  v90 = v124;
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (v91)
  {
    v92 = 0;
    v93 = v91 / 24;
    v95 = __p;
    v94 = v123;
    if (v124 >= 0)
      v96 = v124;
    else
      v96 = v123;
    if (v93 <= 1)
      v97 = 1;
    else
      v97 = v91 / 24;
    v98 = 1;
    while (1)
    {
      v99 = &v89[v92];
      v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
      v101 = (char)v100;
      if ((v100 & 0x80u) != 0)
        v100 = v99->__r_.__value_.__l.__size_;
      if (v96 == v100)
      {
        if (v101 >= 0)
          v102 = &v89[v92];
        else
          v102 = (std::string *)v99->__r_.__value_.__r.__words[0];
        if ((v90 & 0x80) == 0)
        {
          if ((_DWORD)v90)
          {
            v103 = &__p;
            v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != v102->__r_.__value_.__s.__data_[0])
                goto LABEL_188;
              v103 = (void **)((char *)v103 + 1);
              v102 = (std::string *)((char *)v102 + 1);
              --v104;
            }
            while (v104);
            negate = 1;
            v35 = 5;
            goto LABEL_192;
          }
          negate = 1;
          if (v98)
            goto LABEL_220;
LABEL_200:
          if ((char)v125 < 0)
          {
            neg_mask = this->__neg_mask_;
            goto LABEL_213;
          }
          mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          v108 = tab[v125];
          if ((v108 & mask) == 0 && (v125 != 95 || (mask & 0x80) == 0)
            || (char)v126 < 0
            || (tab[v126] & mask) == 0 && ((mask & 0x80) == 0 || v126 != 95))
          {
            neg_mask = this->__neg_mask_;
            if ((v108 & neg_mask) != 0 || v125 == 95 && (neg_mask & 0x80) != 0)
            {
LABEL_217:
              v110 = negate;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((this->__traits_.__ct_->__tab_[v126] & neg_mask) != 0)
                goto LABEL_217;
              v110 = 1;
              if (v126 == 95 && (neg_mask & 0x80) != 0)
                goto LABEL_217;
LABEL_219:
              negate = v110;
LABEL_220:
              v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          v110 = 1;
          goto LABEL_219;
        }
        v118 = v93;
        v121 = v90;
        v105 = memcmp(v95, v102, v94);
        v93 = v118;
        v90 = v121;
        if (!v105)
          break;
      }
LABEL_188:
      v98 = ++v92 < v93;
      if (v92 == v97)
        goto LABEL_191;
    }
    v35 = 5;
    negate = 1;
    goto LABEL_193;
  }
  v98 = 0;
LABEL_191:
  v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0)
LABEL_193:
    operator delete(__p);
  if (!v98)
    goto LABEL_200;
LABEL_195:
  if (v35)
    goto LABEL_220;
  v37 = 2;
LABEL_59:
  v39 = *a2->__current_;
  v125 = v39;
  if (this->__icase_)
  {
    v39 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    v125 = v39;
  }
  v40 = this->__chars_.__begin_;
  v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1)
      v41 = 1;
    while (1)
    {
      v42 = *v40++;
      if (v42 == v39)
        break;
      if (!--v41)
        goto LABEL_66;
    }
LABEL_77:
    negate = 1;
    goto LABEL_221;
  }
LABEL_66:
  v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0)
      v44 = (v39 == 95) & (v43 >> 7);
    else
      LOBYTE(v44) = 1;
    end = this->__neg_chars_.__end_;
    v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end)
      goto LABEL_77;
  }
  v49 = this->__ranges_.__begin_;
  v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126);
      v49 = this->__ranges_.__begin_;
      v48 = this->__ranges_.__end_;
    }
    else
    {
      v124 = 1;
      LOWORD(__p) = v39;
    }
    v50 = (char *)v48 - (char *)v49;
    if (v50)
    {
      v119 = v37;
      v116 = negate;
      v51 = 0;
      v52 = v50 / 48;
      v114 = v124;
      if (v124 >= 0)
        v53 = v124;
      else
        v53 = v123;
      if (v124 >= 0)
        v54 = &__p;
      else
        v54 = __p;
      if (v52 <= 1)
        v55 = 1;
      else
        v55 = v50 / 48;
      v56 = 1;
      while (1)
      {
        v57 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        if (v57 >= 0)
          v58 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        else
          v58 = v49->first.__r_.__value_.__l.__size_;
        if (v57 >= 0)
          v59 = v49;
        else
          v59 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
        if (v58 >= v53)
          v60 = v53;
        else
          v60 = v58;
        v61 = memcmp(v54, v59, v60);
        v62 = v53 >= v58;
        if (v61)
          v62 = v61 >= 0;
        if (v62)
        {
          v63 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          if (v63 >= 0)
            v64 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          else
            v64 = v49->second.__r_.__value_.__l.__size_;
          if (v63 >= 0)
            v65 = &v49->second;
          else
            v65 = (std::string *)v49->second.__r_.__value_.__l.__data_;
          if (v53 >= v64)
            v66 = v64;
          else
            v66 = v53;
          v67 = memcmp(v65, v54, v66);
          v68 = v64 >= v53;
          if (v67)
            v68 = v67 >= 0;
          if (v68)
            break;
        }
        v56 = ++v51 < v52;
        ++v49;
        if (v55 == v51)
        {
          negate = v116;
          goto LABEL_123;
        }
      }
      negate = 1;
LABEL_123:
      v37 = v119;
      if ((v114 & 0x80) == 0)
        goto LABEL_125;
    }
    else
    {
      v56 = 0;
      if ((v124 & 0x80) == 0)
        goto LABEL_125;
    }
    operator delete(__p);
LABEL_125:
    if (v56)
      goto LABEL_221;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_154;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  v69 = this->__equivalences_.__begin_;
  v70 = v124;
  v71 = (char *)this->__equivalences_.__end_ - (char *)v69;
  if (v71)
  {
    v120 = v37;
    v72 = 0;
    v73 = v71 / 24;
    v74 = __p;
    v75 = v123;
    if (v124 >= 0)
      v76 = v124;
    else
      v76 = v123;
    if (v73 <= 1)
      v77 = 1;
    else
      v77 = v71 / 24;
    v78 = 1;
    while (1)
    {
      v79 = &v69[v72];
      v80 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
      v81 = (char)v80;
      if ((v80 & 0x80u) != 0)
        v80 = v79->__r_.__value_.__l.__size_;
      if (v76 == v80)
      {
        if (v81 >= 0)
          v82 = &v69[v72];
        else
          v82 = (std::string *)v79->__r_.__value_.__r.__words[0];
        if ((v70 & 0x80) != 0)
        {
          v117 = negate;
          v85 = v73;
          v115 = v77;
          v86 = memcmp(v74, v82, v75);
          v77 = v115;
          v73 = v85;
          negate = v117;
          if (!v86)
          {
            negate = 1;
            v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!(_DWORD)v70)
          {
            negate = 1;
            v37 = v120;
            if (!v78)
              goto LABEL_154;
            goto LABEL_221;
          }
          v83 = &__p;
          v84 = v70;
          while (*(unsigned __int8 *)v83 == v82->__r_.__value_.__s.__data_[0])
          {
            v83 = (void **)((char *)v83 + 1);
            v82 = (std::string *)((char *)v82 + 1);
            if (!--v84)
            {
              negate = 1;
              goto LABEL_149;
            }
          }
        }
      }
      v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        v37 = v120;
        if ((v70 & 0x80) == 0)
          goto LABEL_153;
        goto LABEL_152;
      }
    }
  }
  v78 = 0;
  if (v124 < 0)
LABEL_152:
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0)
      goto LABEL_221;
    v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v125] & v87) == 0)
    {
      v88 = (v87 >> 7) & 1;
      if (v125 != 95)
        v88 = 0;
      if (v88 != 1)
        goto LABEL_221;
    }
    goto LABEL_77;
  }
LABEL_221:
  if (negate == this->__negate_)
  {
    first = 0;
    v112 = -993;
  }
  else
  {
    a2->__current_ += v37;
    first = this->__first_;
    v112 = -995;
  }
  a2->__do_ = v112;
  a2->__node_ = first;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1826B8DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1826B8F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1826B90F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826B914C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  std::string *v17;
  uint64_t v18;
  std::string::size_type size;
  char v20;
  uint64_t v22;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      v6 = v10;
      v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = (_BYTE *)v18;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_36;
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    v20 = 1;
    v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = (_BYTE *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if ((_DWORD)v16 == 92)
    {
      if (v11)
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      else
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v20 & 1) != 0)
    return v4;
  return (_BYTE *)v6;
}

void sub_1826B94AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  for (i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_33;
  }
  if (&a2[i] == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
    {
      v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v8 = v18;
  if (!v18)
    goto LABEL_34;
  v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, v9, &v9[v8], (uint64_t)__p);
  v10 = v16;
  if ((v16 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v11 = v19;
    if ((v19 & 0x80u) != 0)
      v11 = v18;
    if (v11 == 2)
    {
      v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v13 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v12 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v17);
  return (uint64_t)&a2[i + 2];
}

void sub_1826B96B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  int v7;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  for (i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_11;
  }
  if (&a2[i] == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(_BYTE *)(a1 + 24) & 1);
  if (!v7)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = a3[23]), v29 != 1))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if (a2[23] < 0)
        v30 = *(char **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (v4[23] < 0)
        v32 = *(_BYTE **)v4;
      *v32 = v31;
      v33 = v3;
      if (v3[23] < 0)
        v33 = *(char **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (v3[23] < 0)
        v35 = *(_BYTE **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_1826B9F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  _WORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;

  if (!*(_BYTE *)(a1 + 169))
  {
    v18 = a1 + 128;
    v19 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        v21 = v20 >> 1;
        v22 = v19 - (_QWORD)*v10;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = v22;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v24);
        else
          v25 = 0;
        v27 = &v25[2 * v21];
        v28 = &v25[2 * v24];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v38 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v38)
          goto LABEL_46;
        do
        {
          v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        v33 = v32 >> 1;
        v34 = v19 - (_QWORD)*v10;
        if (v34 <= (v32 >> 1) + 1)
          v35 = v33 + 1;
        else
          v35 = v34;
        if (v34 >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v36);
        else
          v37 = 0;
        v27 = &v37[2 * v33];
        v28 = &v37[2 * v36];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v40 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v40)
          goto LABEL_46;
        do
        {
          v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unsigned __int16)(v6 << 8);
  v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *v9 = v8;
    v26 = v9 + 1;
    goto LABEL_48;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3)
    goto LABEL_49;
  v13 = v12 >> 1;
  v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1)
    v15 = v13 + 1;
  else
    v15 = v14;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(a1 + 128, v16);
  else
    v17 = 0;
  v27 = &v17[2 * v13];
  v28 = &v17[2 * v16];
  *(_WORD *)v27 = v8;
  v26 = v27 + 2;
  v30 = *(char **)(a1 + 112);
  v29 = *(char **)(a1 + 120);
  if (v29 == v30)
    goto LABEL_46;
  do
  {
    v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  v29 = *v10;
LABEL_46:
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v28;
  if (v29)
    operator delete(v29);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826BA1B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1826BA364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1826BA470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1826BA4E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1826BA5F4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826BA850(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_1826BA900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 64);
  v5 = *(_BYTE **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *p_end_cap;
  std::pair<std::string, std::string> *v5;
  std::pair<std::string, std::string> *value;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::pair<std::string, std::string> *end;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::string, std::string> *v15;
  std::pair<std::string, std::string> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14)
      v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_1826BAC9C(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1826BAD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826BAD84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::pair<std::string, std::string> *v4;
  std::pair<std::string, std::string> *begin;
  std::pair<std::string, std::string> *end;
  std::pair<std::string, std::string> *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](this);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &unk_1E0FDF5C8;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&unk_1E0FDF230;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_1826BB2E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  int v4;
  int v5;
  int v6;

  if (a2 != a3)
  {
    v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38)
            break;
          if (v5 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3)
            return a3;
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826BB3E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826BB42C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E0FDF200;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E0FDF200;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x186DABFBCLL);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E0FDF200;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E0FDF200;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x186DABFBCLL);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(_QWORD *)(v7 - 8) = v5;
      *(_QWORD *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E0FDF200;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E0FDF200;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x186DABFBCLL);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x186DABE00](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1826BB8D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  unsigned int marked_count;
  char *v11;
  _BOOL4 v13;
  uint64_t v14;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      v8 = a2[1];
      if (v8 == 40)
      {
        v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        marked_count = a1->__marked_count_;
        do
        {
          v11 = (char *)v9;
          v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        v14 = 2;
        if (!v13)
          v14 = 0;
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  std::basic_regex<char> *v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = v8;
            v21 = v7;
            v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = v8;
          v21 = v7;
          v22 = this;
          v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v6;
  char *result;
  std::__node<char> *v9;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2)
      return result;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v9 = (std::__node<char> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<char>_vtbl *)&unk_1E0FDF0E0;
  v9[1].__vftable = (std::__node<char>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  return a2 + 1;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int locale_low;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char> *v18;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3)
    goto LABEL_12;
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v17 == a3 || (v18 = v17, LOBYTE(v17->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned __int8 *)a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  char *result;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
      }
      else
      {
        v7 = (std::__node<char> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_1E0FDF0E0;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        return (char *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int locale_low;
  uint64_t v5;

  v3 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    v5 = (locale_low - 36);
    if (v5 > 0x3A)
      goto LABEL_8;
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0)
      return v3;
    if (v5 == 5)
    {
      if (a1->__open_count_)
        return v3;
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2)
        return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  std::basic_regex<char>::value_type v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  v6 = *v4;
  v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    v10 = 2;
    if (!v9)
      v10 = 0;
    v3 += v10;
    return v3;
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

BOOL `anonymous namespace'::MessageDecoder::isValidFormatSpecifier(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  char v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  void *__p[2];
  _BYTE v15[25];
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;

  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (char *)a2;
  else
    v6 = *(char **)a2;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  v7 = &v6[v5];
  if (!a3)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    *(_OWORD *)__p = 0u;
    memset(v15, 0, sizeof(v15));
    v11 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v6, v7, (uint64_t)__p, a1 + 216, 0);
LABEL_17:
    v12 = v11;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v12 & 1) == 0)
      *(_DWORD *)(a1 + 288) = 1;
    return *(_DWORD *)(a1 + 288) == 0;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  *(_OWORD *)__p = 0u;
  memset(v15, 0, sizeof(v15));
  v8 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v6, v7, (uint64_t)__p, a1 + 88, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v8 & 1) == 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
    if ((v9 & 0x80u) == 0)
      v10 = (char *)a2;
    else
      v10 = *(char **)a2;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a2 + 8);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    *(_OWORD *)__p = 0u;
    memset(v15, 0, sizeof(v15));
    v11 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v10, &v10[v9], (uint64_t)__p, a1 + 152, 0);
    goto LABEL_17;
  }
  return *(_DWORD *)(a1 + 288) == 0;
}

void sub_1826BC454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(char *__f, char *__l, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5;
  int v9;
  uint64_t result;
  std::match_results<const char *> __p;

  v5 = a5;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, __f, __l, &__p, a5 | 0x1040u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)a3, (uint64_t)__f, (std::sub_match<std::__wrap_iter<const char *>> *)__l, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (!v9)
    return 0;
  if (!*(_BYTE *)(a3 + 88))
    return 1;
  result = 0;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  return result;
}

void sub_1826BC550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  int v9;
  std::match_results<const char *>::value_type *p_unmatched;
  const char *first;
  const char *second;
  uint64_t result;
  int v14;
  const char *v15;
  int v16;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_)
      p_unmatched = &this->__unmatched_;
    else
      p_unmatched = this->__matches_.__begin_;
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        begin = this->__matches_.__begin_;
        end = this->__matches_.__end_;
        if (v16)
          break;
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l)
          goto LABEL_14;
      }
      if (end == begin)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
  }
  result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *a1, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  std::vector<std::ssub_match>::pointer begin;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  std::vector<std::ssub_match>::pointer end;
  std::sub_match<std::__wrap_iter<const char *>> *v23;

  v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  begin = a1->__begin_;
  if (a1->__end_ != a1->__begin_)
  {
    v12 = 0;
    v13 = 0;
    v15 = *a4;
    v14 = a4[1];
    do
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      v17 = (_QWORD *)(v15 + v12 * 24);
      if (v16 <= v13)
        v18 = a4 + 3;
      else
        v18 = v17;
      begin[v12].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v18 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13)
        v19 = a4 + 3;
      else
        v19 = (uint64_t *)(*a4 + v12 * 24);
      a1->__begin_[v12].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + v19[1] - v10);
      v15 = *a4;
      v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13)
        v20 = a4 + 3;
      else
        v20 = (uint64_t *)(*a4 + v12 * 24);
      v21 = *((_BYTE *)v20 + 16);
      begin = a1->__begin_;
      end = a1->__end_;
      a1->__begin_[v12].matched = v21;
      ++v13;
      ++v12;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  }
  a1[1].__begin_ = a3;
  a1[1].__end_ = a3;
  LOBYTE(a1[1].__end_cap_.__value_) = 0;
  v23 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  a1[2].__begin_ = v23;
  a1[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(a1[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  a1[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  a1[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(a1[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    a1[4].__end_ = v23;
  LOBYTE(a1[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v55[40];
  __int128 v56;
  void *__p[2];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v55 = 0;
    memset(&v55[8], 0, 32);
    v56 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v58, 0, 21);
    std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v55[32])
    {
      *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }
    v12 = *((_QWORD *)&v59 + 1);
    v13 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    v53 = 0;
    v18 = 0;
    v51 = 0;
    v52 = a2;
    v19 = a3 - a2;
    v20 = *((_QWORD *)&v61 + 1);
    v21 = *((_QWORD *)&v59 + 1);
    v22 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v23 = v22 / 0x2A;
    v24 = 3 * (v22 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    v25 = *(_QWORD *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v27 = v20 + v61 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == a3;
          v36 = v33 != v52 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v33 - *(_QWORD *)(v28 + 96 * v29 + 8);
          v38 = v51;
          if ((v53 & (v51 >= v37)) == 0)
            v38 = v37;
          if (v38 != v19)
          {
            v51 = v38;
            std::deque<std::__state<char>>::pop_back(&v59);
            v53 = 1;
            goto LABEL_38;
          }
          v39 = (void **)*((_QWORD *)&v59 + 1);
          v40 = v60;
          if ((_QWORD)v60 == *((_QWORD *)&v59 + 1))
          {
            v40 = *((_QWORD *)&v59 + 1);
          }
          else
          {
            v41 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            v42 = (_QWORD *)(*v41 + 96 * ((unint64_t)v61 % 0x2A));
            v43 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) % 0x2AuLL);
            if (v42 != (_QWORD *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v61 + 8, v42);
                v42 += 12;
                if ((_QWORD *)((char *)v42 - *v41) == (_QWORD *)4032)
                {
                  v44 = (_QWORD *)v41[1];
                  ++v41;
                  v42 = v44;
                }
              }
              while (v42 != (_QWORD *)v43);
              v39 = (void **)*((_QWORD *)&v59 + 1);
              v40 = v60;
            }
          }
          *((_QWORD *)&v61 + 1) = 0;
          v47 = v40 - (_QWORD)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              v39 = (void **)(*((_QWORD *)&v59 + 1) + 8);
              *((_QWORD *)&v59 + 1) = v39;
              v47 = v60 - (_QWORD)v39;
            }
            while ((_QWORD)v60 - (_QWORD)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2)
              goto LABEL_53;
            v48 = 42;
          }
          *(_QWORD *)&v61 = v48;
LABEL_53:
          v53 = 1;
          v51 = v19;
LABEL_38:
          v20 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
            continue;
          if ((v53 & 1) != 0)
          {
            v49 = *a4;
            *(_QWORD *)v49 = v52;
            *(_QWORD *)(v49 + 8) = v52 + v51;
            v6 = 1;
            *(_BYTE *)(v49 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v45;
          v56 = 0uLL;
          *(_QWORD *)&v55[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v55[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v58[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v46 = *v32;
          *(_QWORD *)((char *)&v58[1] + 5) = *(_QWORD *)(v30 + 85);
          v58[1] = v46;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v58[1] + 24))(v58[1], 0, v55);
          std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v55[32])
          {
            *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v59);
  return v6;
}

void sub_1826BCDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((_QWORD *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  unsigned int v12;
  const char *v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  const char *v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  __int128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v41;
  const char *v42;
  char v43;
  _BYTE v46[56];
  void *__p[2];
  _QWORD v48[4];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v50[40];
  __int128 v51;
  void *v52[6];
  _OWORD *v53;
  _OWORD *v54;
  _QWORD v55[3];

  v53 = 0;
  v54 = 0;
  v55[0] = 0;
  *(_DWORD *)v50 = 0;
  memset(&v50[8], 0, 32);
  v51 = 0u;
  memset(v52, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_43;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v48, 0, 21);
  v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v46[32])
  {
    *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  v41 = a4;
  v11 = v54;
  *((_DWORD *)v54 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v54 - 40), *(unsigned int *)(a1 + 32));
  v42 = 0;
  v43 = 0;
  v12 = 0;
  v13 = (const char *)(a3 - a2);
  v14 = v54;
  *((_QWORD *)v54 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
    if (!v15)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v17 = v14 - 1;
    v16 = *((_QWORD *)v14 - 2);
    v18 = v14 - 6;
    if (v16)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        v19 = (const char *)*((_QWORD *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3)
          goto LABEL_19;
        v26 = &v19[-*((_QWORD *)v14 - 11)];
        v27 = v42;
        if ((v43 & ((uint64_t)v42 >= (uint64_t)v26)) == 0)
        {
          v28 = *(v14 - 5);
          *(_OWORD *)v50 = *(_OWORD *)v18;
          *(_OWORD *)&v50[16] = v28;
          if (v50 != v18)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v50[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v52, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          }
          v29 = (void *)*v17;
          *(void **)((char *)&v52[3] + 5) = *(void **)((char *)v14 - 11);
          v52[3] = v29;
          v27 = v26;
        }
        v30 = v54;
        if (v27 == v13)
        {
          v31 = (uint64_t)v53;
          while (v30 != (_QWORD *)v31)
          {
            v30 -= 12;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, v30);
          }
          v54 = (_OWORD *)v31;
          v43 = 1;
          v42 = (const char *)(a3 - a2);
        }
        else
        {
          v42 = v27;
          v32 = v54 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
          v54 = v32;
          v43 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        v20 = v54 - 6;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
        v54 = v20;
        break;
      case 0xFFFFFC20:
        v21 = *(v14 - 5);
        *(_OWORD *)v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v46[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v48[0] = 0;
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
        v22 = (void *)*v17;
        *(_QWORD *)((char *)&v48[1] + 5) = *(_QWORD *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v48[1] + 24))(v48[1], 0, v46);
        v23 = v54;
        if ((unint64_t)v54 >= v55[0])
        {
          v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v24 = *(_OWORD *)&v46[16];
          *v54 = *(_OWORD *)v46;
          v23[1] = v24;
          *((_QWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          v23[2] = *(_OWORD *)&v46[32];
          *((_QWORD *)v23 + 6) = *(_QWORD *)&v46[48];
          memset(&v46[32], 0, 24);
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v23 + 9) = v48[0];
          __p[0] = 0;
          __p[1] = 0;
          v48[0] = 0;
          v25 = v48[1];
          *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v48[1] + 5);
          *((_QWORD *)v23 + 10) = v25;
          v54 = v23 + 6;
        }
        if (*(_QWORD *)&v46[32])
        {
          *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v14 = v54;
  }
  while (v53 != v54);
  if ((v43 & 1) != 0)
  {
    v33 = *v41;
    *(_QWORD *)v33 = a2;
    *(_QWORD *)(v33 + 8) = &v42[(_QWORD)a2];
    *(_BYTE *)(v33 + 16) = 1;
    if ((_QWORD)v51 != *(_QWORD *)&v50[32])
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)&v50[32]) >> 3);
      v35 = (_BYTE *)(*(_QWORD *)&v50[32] + 16);
      v36 = 1;
      do
      {
        v37 = v33 + 24 * v36;
        *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
        v38 = *v35;
        v35 += 24;
        *(_BYTE *)(v37 + 16) = v38;
        v15 = v34 > v36++;
      }
      while (v15);
    }
    v39 = 1;
  }
  else
  {
LABEL_43:
    v39 = 0;
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (*(_QWORD *)&v50[32])
  {
    *(_QWORD *)&v51 = *(_QWORD *)&v50[32];
    operator delete(*(void **)&v50[32]);
  }
  *(_QWORD *)v50 = &v53;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  return v39;
}

void sub_1826BD330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a19);
  std::__state<char>::~__state(&a35);
  a35 = v35 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1827FCE30);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<ContextStack *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<ContextStack *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<ContextStack *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<ContextStack *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1826BD8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      std::__split_buffer<ContextStack *>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        std::__split_buffer<ContextStack *>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<ContextStack *>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<ContextStack *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1826BDC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<ContextStack *>::~__split_buffer((uint64_t)a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v19 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v19;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          *(_OWORD *)v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      v18 = v25 - result;
      v13 = result;
    }
    else
    {
      v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      v22 = v13;
      if (v21 != a3)
      {
        v23 = v13;
        do
        {
          v24 = *v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          v23 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        v17 = *v6;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v16 = v17;
        v16 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    v18 = v16 - v13;
  }
  *v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          *(_QWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v21;
          *((_QWORD *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (__int128 *)a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __sz)
{
  std::vector<std::ssub_match>::size_type v2;
  BOOL v3;
  std::vector<std::ssub_match>::size_type v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v3 = __sz >= v2;
  v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::__compressed_pair<std::ssub_match *> *p_end_cap;
  std::sub_match<std::__wrap_iter<const char *>> *v5;
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::sub_match<std::__wrap_iter<const char *>> *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::size_type v17;
  std::sub_match<std::__wrap_iter<const char *>> *v18;
  std::sub_match<std::__wrap_iter<const char *>> *v19;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &v7[__n];
      v14 = 24 * __n;
      do
      {
        v7->first.__i_ = 0;
        v7->second.__i_ = 0;
        v7->matched = 0;
        ++v7;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    v15 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v8];
    v16 = &v15[__n];
    v17 = 24 * __n;
    v18 = v15;
    do
    {
      v18->first.__i_ = 0;
      v18->second.__i_ = 0;
      v18->matched = 0;
      ++v18;
      v17 -= 24;
    }
    while (v17);
    v19 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v11];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v15[-1].matched = *(_QWORD *)&end[-1].matched;
        v15[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
        --v15;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v15;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v19;
    if (end)
      operator delete(end);
  }
}

void `anonymous namespace'::MessageDecoder::extract<char>(uint64_t a1)
{
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  size_t v6;
  uint64_t v7;
  std::vector<char> v8;

  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    v2 = (const char *)(a1 + 24);
    v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v3 = *(const char **)v2;
    v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(char *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0)
        v2 = *(const char **)v2;
      snprintf(v8.__begin_, v6, v2, *(char *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0)
      v7 = *(_QWORD *)(a1 + 8);
    else
      v7 = *(unsigned __int8 *)(a1 + 23);
    if ((unint64_t)(v7 + v4) > 0x2800)
      *(_BYTE *)(a1 + 84) = 1;
    else
      std::string::append((std::string *)a1, v8.__begin_);
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1826BE3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1826BE434(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void `anonymous namespace'::MessageDecoder::extract<short>(uint64_t a1)
{
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  size_t v6;
  uint64_t v7;
  std::vector<char> v8;

  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    v2 = (const char *)(a1 + 24);
    v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v3 = *(const char **)v2;
    v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(__int16 *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0)
        v2 = *(const char **)v2;
      snprintf(v8.__begin_, v6, v2, *(__int16 *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0)
      v7 = *(_QWORD *)(a1 + 8);
    else
      v7 = *(unsigned __int8 *)(a1 + 23);
    if ((unint64_t)(v7 + v4) > 0x2800)
      *(_BYTE *)(a1 + 84) = 1;
    else
      std::string::append((std::string *)a1, v8.__begin_);
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1826BE5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::MessageDecoder::extract<long>(uint64_t a1)
{
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  size_t v6;
  uint64_t v7;
  std::vector<char> v8;

  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    v2 = (const char *)(a1 + 24);
    v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v3 = *(const char **)v2;
    v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(_QWORD *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0)
        v2 = *(const char **)v2;
      snprintf(v8.__begin_, v6, v2, *(_QWORD *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0)
      v7 = *(_QWORD *)(a1 + 8);
    else
      v7 = *(unsigned __int8 *)(a1 + 23);
    if ((unint64_t)(v7 + v4) > 0x2800)
      *(_BYTE *)(a1 + 84) = 1;
    else
      std::string::append((std::string *)a1, v8.__begin_);
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1826BE724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::MessageDecoder::extract<int>(uint64_t a1)
{
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  size_t v6;
  uint64_t v7;
  std::vector<char> v8;

  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    v2 = (const char *)(a1 + 24);
    v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v3 = *(const char **)v2;
    v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(unsigned int *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0)
        v2 = *(const char **)v2;
      snprintf(v8.__begin_, v6, v2, *(unsigned int *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0)
      v7 = *(_QWORD *)(a1 + 8);
    else
      v7 = *(unsigned __int8 *)(a1 + 23);
    if ((unint64_t)(v7 + v4) > 0x2800)
      *(_BYTE *)(a1 + 84) = 1;
    else
      std::string::append((std::string *)a1, v8.__begin_);
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1826BE87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::MessageDecoder::extract<unsigned long long>(uint64_t a1)
{
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  size_t v6;
  uint64_t v7;
  std::vector<char> v8;

  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    v2 = (const char *)(a1 + 24);
    v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v3 = *(const char **)v2;
    v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(_QWORD *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0)
        v2 = *(const char **)v2;
      snprintf(v8.__begin_, v6, v2, *(_QWORD *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0)
      v7 = *(_QWORD *)(a1 + 8);
    else
      v7 = *(unsigned __int8 *)(a1 + 23);
    if ((unint64_t)(v7 + v4) > 0x2800)
      *(_BYTE *)(a1 + 84) = 1;
    else
      std::string::append((std::string *)a1, v8.__begin_);
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1826BE9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::MessageDecoder::extract<half>(uint64_t a1)
{
  const char *v2;
  const char *v3;
  int v10;
  int v11;
  size_t v12;
  uint64_t v15;
  std::vector<char> v16;

  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v16, 0x14uLL);
    v2 = (const char *)(a1 + 24);
    v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v3 = *(const char **)v2;
    _H0 = *(_WORD *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76));
    __asm { FCVT            D0, H0 }
    v10 = snprintf(v16.__begin_, v16.__end_cap_.__value_ - v16.__begin_, v3, _D0);
    v11 = v10 + 1;
    if ((char *)(v16.__end_cap_.__value_ - v16.__begin_) < (char *)(v10 + 1))
    {
      v12 = v11;
      std::vector<unsigned char>::reserve(&v16, v11);
      if (*(char *)(a1 + 47) < 0)
        v2 = *(const char **)v2;
      _H0 = *(_WORD *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76));
      __asm { FCVT            D0, H0 }
      snprintf(v16.__begin_, v12, v2, _D0);
    }
    if (*(char *)(a1 + 23) < 0)
      v15 = *(_QWORD *)(a1 + 8);
    else
      v15 = *(unsigned __int8 *)(a1 + 23);
    if ((unint64_t)(v15 + v10) > 0x2800)
      *(_BYTE *)(a1 + 84) = 1;
    else
      std::string::append((std::string *)a1, v16.__begin_);
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v16.__begin_)
    {
      v16.__end_ = v16.__begin_;
      operator delete(v16.__begin_);
    }
  }
}

void sub_1826BEB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::MessageDecoder::extract<float>(uint64_t a1)
{
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  size_t v6;
  uint64_t v7;
  std::vector<char> v8;

  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    v2 = (const char *)(a1 + 24);
    v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v3 = *(const char **)v2;
    v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(float *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0)
        v2 = *(const char **)v2;
      snprintf(v8.__begin_, v6, v2, *(float *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0)
      v7 = *(_QWORD *)(a1 + 8);
    else
      v7 = *(unsigned __int8 *)(a1 + 23);
    if ((unint64_t)(v7 + v4) > 0x2800)
      *(_BYTE *)(a1 + 84) = 1;
    else
      std::string::append((std::string *)a1, v8.__begin_);
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1826BEC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::MessageDecoder::extract<double>(uint64_t a1)
{
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  size_t v6;
  uint64_t v7;
  std::vector<char> v8;

  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    v2 = (const char *)(a1 + 24);
    v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v3 = *(const char **)v2;
    v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(_QWORD *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0)
        v2 = *(const char **)v2;
      snprintf(v8.__begin_, v6, v2, *(_QWORD *)(*(_QWORD *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0)
      v7 = *(_QWORD *)(a1 + 8);
    else
      v7 = *(unsigned __int8 *)(a1 + 23);
    if ((unint64_t)(v7 + v4) > 0x2800)
      *(_BYTE *)(a1 + 84) = 1;
    else
      std::string::append((std::string *)a1, v8.__begin_);
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1826BEDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

_BYTE *OUTLINED_FUNCTION_1_0(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

uint64_t MTLRangeAllocatorGetFragmentCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t MTLRangeAllocatorGetFragmentCapacity(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t MTLRangeAllocatorSetFragmentCapacityIncrement(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t MTLRangeAllocatorGetFreeCount(unsigned int *a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v4;

  v1 = a1[2];
  if (!(_DWORD)v1)
    return 0;
  result = 0;
  v4 = (_QWORD *)(*(_QWORD *)a1 + 8);
  do
  {
    result = result + *v4 - *(v4 - 1) + 1;
    v4 += 2;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t MTLRangeAllocatorGetFreeSize(unsigned int *a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v4;

  v1 = a1[2];
  if (!(_DWORD)v1)
    return 0;
  result = 0;
  v4 = (_QWORD *)(*(_QWORD *)a1 + 8);
  do
  {
    result = result + *v4 - *(v4 - 1) + 1;
    v4 += 2;
    --v1;
  }
  while (v1);
  return result;
}

void *MTLGetUnpackFloatFunction(uint64_t a1)
{
  void *result;
  void *v3;
  void *v4;
  uint64_t (*v5)(MTLGetUnpackFloatFunction::$_28 *, _OWORD *, float *);
  BOOL v6;
  uint64_t (*v7)(MTLGetUnpackFloatFunction::$_31 *, _OWORD *, float *);

  result = 0;
  if (a1 <= 104)
  {
    switch(a1)
    {
      case '7':
        result = MTLGetUnpackFloatFunction::$_9::__invoke;
        break;
      case '8':
      case '9':
      case ':':
      case ';':
      case '=':
      case '?':
      case '@':
      case 'C':
      case 'D':
      case 'E':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'R':
      case 'S':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case '[':
        return result;
      case '<':
        result = MTLGetUnpackFloatFunction::$_10::__invoke;
        break;
      case '>':
        result = MTLGetUnpackFloatFunction::$_11::__invoke;
        break;
      case 'A':
        result = MTLGetUnpackFloatFunction::$_12::__invoke;
        break;
      case 'B':
        result = MTLGetUnpackFloatFunction::$_46::__invoke;
        break;
      case 'F':
        result = MTLGetUnpackFloatFunction::$_13::__invoke;
        break;
      case 'G':
        result = MTLGetUnpackFloatFunction::$_14::__invoke;
        break;
      case 'H':
        result = MTLGetUnpackFloatFunction::$_15::__invoke;
        break;
      case 'P':
        result = MTLGetUnpackFloatFunction::$_16::__invoke;
        break;
      case 'Q':
        result = MTLGetUnpackFloatFunction::$_17::__invoke;
        break;
      case 'T':
        result = MTLGetUnpackFloatFunction::$_43::__invoke;
        break;
      case 'U':
        result = MTLGetUnpackFloatFunction::$_44::__invoke;
        break;
      case 'Z':
        result = MTLGetUnpackFloatFunction::$_18::__invoke;
        break;
      case '\\':
        result = MTLGetUnpackFloatFunction::$_19::__invoke;
        break;
      case ']':
        result = MTLGetUnpackFloatFunction::$_20::__invoke;
        break;
      case '^':
        result = MTLGetUnpackFloatFunction::$_21::__invoke;
        break;
      default:
        switch(a1)
        {
          case 10:
            result = MTLGetUnpackFloatFunction::$_1::__invoke;
            break;
          case 11:
            result = MTLGetUnpackFloatFunction::$_33::__invoke;
            break;
          case 12:
            result = MTLGetUnpackFloatFunction::$_2::__invoke;
            break;
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 21:
          case 23:
          case 24:
          case 27:
          case 28:
          case 29:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
            return result;
          case 20:
            result = MTLGetUnpackFloatFunction::$_3::__invoke;
            break;
          case 22:
            result = MTLGetUnpackFloatFunction::$_4::__invoke;
            break;
          case 25:
            result = MTLGetUnpackFloatFunction::$_5::__invoke;
            break;
          case 26:
            result = MTLGetUnpackFloatFunction::$_45::__invoke;
            break;
          case 30:
            result = MTLGetUnpackFloatFunction::$_6::__invoke;
            break;
          case 31:
            result = MTLGetUnpackFloatFunction::$_34::__invoke;
            break;
          case 32:
            result = MTLGetUnpackFloatFunction::$_7::__invoke;
            break;
          case 40:
            result = MTLGetUnpackFloatFunction::$_35::__invoke;
            break;
          case 41:
            result = MTLGetUnpackFloatFunction::$_36::__invoke;
            break;
          case 42:
            result = MTLGetUnpackFloatFunction::$_37::__invoke;
            break;
          case 43:
            result = MTLGetUnpackFloatFunction::$_8::__invoke;
            break;
          case 44:
            result = MTLGetUnpackFloatFunction::$_42::__invoke;
            break;
          default:
            if (a1 == 1)
              result = MTLGetUnpackFloatFunction::$_0::__invoke;
            else
              result = 0;
            break;
        }
        break;
    }
  }
  else
  {
    if (a1 <= 301)
    {
      if (a1 <= 124)
      {
        switch(a1)
        {
          case 'i':
            result = MTLGetUnpackFloatFunction::$_22::__invoke;
            break;
          case 'n':
            result = MTLGetUnpackFloatFunction::$_23::__invoke;
            break;
          case 'p':
            result = MTLGetUnpackFloatFunction::$_24::__invoke;
            break;
          case 's':
            result = MTLGetUnpackFloatFunction::$_25::__invoke;
            break;
          case 't':
            result = MTLGetUnpackFloatFunction::$_47::__invoke;
            break;
          default:
            return result;
        }
        return result;
      }
      v3 = MTLGetUnpackFloatFunction::$_26::__invoke;
      v4 = MTLGetUnpackFloatFunction::$_27::__invoke;
      v5 = MTLGetUnpackFloatFunction::$_28::__invoke;
      if (a1 != 301)
        v5 = 0;
      if (a1 != 300)
        v4 = v5;
      v6 = a1 == 125;
      goto LABEL_24;
    }
    if (a1 <= 551)
    {
      v3 = MTLGetUnpackFloatFunction::$_29::__invoke;
      v4 = MTLGetUnpackFloatFunction::$_30::__invoke;
      v7 = MTLGetUnpackFloatFunction::$_31::__invoke;
      if (a1 != 325)
        v7 = 0;
      if (a1 != 315)
        v4 = v7;
      v6 = a1 == 302;
LABEL_24:
      if (v6)
        return v3;
      else
        return v4;
    }
    switch(a1)
    {
      case 552:
        result = MTLGetUnpackFloatFunction::$_40::__invoke;
        break;
      case 553:
        result = MTLGetUnpackFloatFunction::$_41::__invoke;
        break;
      case 554:
        result = MTLGetUnpackFloatFunction::$_38::__invoke;
        break;
      case 555:
        result = MTLGetUnpackFloatFunction::$_39::__invoke;
        break;
      case 556:
        result = MTLGetUnpackFloatFunction::$_32::__invoke;
        break;
      default:
        return result;
    }
  }
  return result;
}

void *MTLGetUnpackUintFunction(uint64_t a1)
{
  void *v1;
  uint64_t (*v2)(MTLGetUnpackUintFunction::$_10 *, _OWORD *, unsigned int *);
  uint64_t (*v3)(MTLGetUnpackUintFunction::$_11 *, _OWORD *, unsigned int *);
  uint64_t (*v4)(MTLGetUnpackUintFunction::$_2 *, uint32x4_t *, unsigned int *, uint8x8_t);
  void *v5;
  uint64_t (*v6)(MTLGetUnpackUintFunction::$_9 *, _OWORD *, unsigned int *);
  uint64_t (*v7)(uint16x4_t *, uint32x4_t *, unsigned int *);
  BOOL v8;
  uint64_t (*v9)(MTLGetUnpackUintFunction::$_5 *, _OWORD *, unsigned int *);
  uint64_t (*v10)(MTLGetUnpackUintFunction::$_3 *, uint32x4_t *, unsigned int *, uint8x8_t);
  uint64_t (*v11)(MTLGetUnpackUintFunction::$_4 *, _OWORD *, unsigned int *);
  uint64_t (*v12)(MTLGetUnpackUintFunction::$_1 *, _OWORD *, unsigned int *);

  if (a1 <= 90)
  {
    v1 = MTLGetUnpackUintFunction::$_8::__invoke;
    v9 = MTLGetUnpackUintFunction::$_5::__invoke;
    v10 = MTLGetUnpackUintFunction::$_3::__invoke;
    if (a1 != 73)
      v10 = 0;
    if (a1 != 63)
      v9 = (uint64_t (*)(MTLGetUnpackUintFunction::$_5 *, _OWORD *, unsigned int *))v10;
    if (a1 != 53)
      v1 = v9;
    v5 = MTLGetUnpackUintFunction::$_0::__invoke;
    v11 = MTLGetUnpackUintFunction::$_4::__invoke;
    v12 = MTLGetUnpackUintFunction::$_1::__invoke;
    if (a1 != 33)
      v12 = 0;
    if (a1 != 23)
      v11 = v12;
    if (a1 != 13)
      v5 = v11;
    v8 = a1 <= 52;
  }
  else
  {
    v1 = MTLGetUnpackUintFunction::$_6::__invoke;
    v2 = MTLGetUnpackUintFunction::$_10::__invoke;
    if (a1 != 323)
      v2 = 0;
    if (a1 != 313)
      v1 = v2;
    v3 = MTLGetUnpackUintFunction::$_11::__invoke;
    v4 = MTLGetUnpackUintFunction::$_2::__invoke;
    if (a1 != 303)
      v4 = 0;
    if (a1 != 123)
      v3 = (uint64_t (*)(MTLGetUnpackUintFunction::$_11 *, _OWORD *, unsigned int *))v4;
    if (a1 <= 312)
      v1 = v3;
    v5 = MTLGetUnpackUintFunction::$_12::__invoke;
    v6 = MTLGetUnpackUintFunction::$_9::__invoke;
    v7 = MTLGetUnpackUintFunction::$_7::__invoke;
    if (a1 != 113)
      v7 = 0;
    if (a1 != 103)
      v6 = (uint64_t (*)(MTLGetUnpackUintFunction::$_9 *, _OWORD *, unsigned int *))v7;
    if (a1 != 91)
      v5 = v6;
    v8 = a1 <= 122;
  }
  if (v8)
    return v5;
  else
    return v1;
}

uint64_t (*MTLGetUnpackSintFunction(uint64_t a1))(MTLGetUnpackSintFunction::$_9 *this, _OWORD *a2, int *a3)
{
  void *v1;
  uint64_t (*v2)(MTLGetUnpackSintFunction::$_5 *, _OWORD *, int *);
  uint64_t (*v3)(MTLGetUnpackSintFunction::$_3 *, int32x4_t *, int *, int8x8_t);
  uint64_t (*v4)(MTLGetUnpackSintFunction::$_9 *, _OWORD *, int *);
  uint64_t (*v5)(MTLGetUnpackSintFunction::$_4 *, _OWORD *, int *);
  uint64_t (*v6)(MTLGetUnpackSintFunction::$_1 *, _OWORD *, int *);
  BOOL v7;
  uint64_t (*v8)(int16x4_t *, int32x4_t *, int *);
  uint64_t (*v9)(int16x4_t *, int32x4_t *, int *);
  uint64_t (*v10)(int16x4_t *, int32x4_t *, int *);
  uint64_t (*v11)(int16x4_t *, int32x4_t *, int *);

  if (a1 > 103)
  {
    v1 = MTLGetUnpackSintFunction::$_2::__invoke;
    v8 = MTLGetUnpackSintFunction::$_6::__invoke;
    v9 = (uint64_t (*)(int16x4_t *, int32x4_t *, int *))MTLGetUnpackSintFunction::$_10::__invoke;
    if (a1 != 324)
      v9 = 0;
    if (a1 != 314)
      v8 = v9;
    if (a1 != 304)
      v1 = v8;
    v4 = MTLGetUnpackSintFunction::$_9::__invoke;
    v10 = MTLGetUnpackSintFunction::$_7::__invoke;
    v11 = (uint64_t (*)(int16x4_t *, int32x4_t *, int *))MTLGetUnpackSintFunction::$_11::__invoke;
    if (a1 != 124)
      v11 = 0;
    if (a1 != 114)
      v10 = v11;
    if (a1 != 104)
      v4 = (uint64_t (*)(MTLGetUnpackSintFunction::$_9 *, _OWORD *, int *))v10;
    v7 = a1 <= 303;
  }
  else
  {
    v1 = MTLGetUnpackSintFunction::$_8::__invoke;
    v2 = MTLGetUnpackSintFunction::$_5::__invoke;
    v3 = MTLGetUnpackSintFunction::$_3::__invoke;
    if (a1 != 74)
      v3 = 0;
    if (a1 != 64)
      v2 = (uint64_t (*)(MTLGetUnpackSintFunction::$_5 *, _OWORD *, int *))v3;
    if (a1 != 54)
      v1 = v2;
    v4 = MTLGetUnpackSintFunction::$_0::__invoke;
    v5 = MTLGetUnpackSintFunction::$_4::__invoke;
    v6 = MTLGetUnpackSintFunction::$_1::__invoke;
    if (a1 != 34)
      v6 = 0;
    if (a1 != 24)
      v5 = v6;
    if (a1 != 14)
      v4 = v5;
    v7 = a1 <= 53;
  }
  if (v7)
    return v4;
  else
    return (uint64_t (*)(MTLGetUnpackSintFunction::$_9 *, _OWORD *, int *))v1;
}

uint64_t (*MTLUnpackColor(uint64_t a1, uint64_t a2, float64x2_t *a3))(uint64_t, float32x2_t *)
{
  uint64_t (*v6)(uint64_t, float32x2_t *);
  uint64_t (*result)(uint64_t, float32x2_t *);
  float64x2_t v8;
  float64x2_t v9;
  uint64_t (*v10)(uint64_t, float32x2_t *);
  uint64x2_t v11;
  int64x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t (*)(uint64_t, float32x2_t *))MTLGetUnpackFloatFunction(a1);
  if (v6)
  {
    result = (uint64_t (*)(uint64_t, float32x2_t *))v6(a2, &v13);
    v8 = vcvtq_f64_f32(v13);
    v9 = vcvtq_f64_f32(v14);
  }
  else
  {
    v10 = (uint64_t (*)(uint64_t, float32x2_t *))MTLGetUnpackUintFunction(a1);
    if (v10)
    {
      result = (uint64_t (*)(uint64_t, float32x2_t *))v10(a2, &v13);
      v11.i64[0] = v13.u32[0];
      v11.i64[1] = v13.u32[1];
      v8 = vcvtq_f64_u64(v11);
      v11.i64[0] = v14.u32[0];
      v11.i64[1] = v14.u32[1];
      v9 = vcvtq_f64_u64(v11);
    }
    else
    {
      result = (uint64_t (*)(uint64_t, float32x2_t *))MTLGetUnpackSintFunction(a1);
      if (!result)
        return result;
      result = (uint64_t (*)(uint64_t, float32x2_t *))result(a2, &v13);
      v12.i64[0] = v13.i32[0];
      v12.i64[1] = v13.i32[1];
      v8 = vcvtq_f64_s64(v12);
      v12.i64[0] = v14.i32[0];
      v12.i64[1] = v14.i32[1];
      v9 = vcvtq_f64_s64(v12);
    }
  }
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t MTLGetPackFloatFunction::$_0::__invoke(MTLGetPackFloatFunction::$_0 *this, float *a2, void *a3, uint32x4_t a4)
{
  float32x4_t v9;

  a4.i32[0] = *((_DWORD *)this + 3);
  __asm { FMOV            V1.4S, #1.0 }
  v9 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  *(_BYTE *)a2 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v9, _Q1), (int8x16_t)xmmword_1827FDF10, (int8x16_t)xmmword_1827FDF00), v9))).u8[0];
  return 1;
}

uint64_t MTLGetPackFloatFunction::$_1::__invoke(MTLGetPackFloatFunction::$_1 *this, float *a2, void *a3, uint32x4_t a4)
{
  float32x4_t v9;

  a4.i32[0] = *(_DWORD *)this;
  __asm { FMOV            V1.4S, #1.0 }
  v9 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  *(_BYTE *)a2 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v9, _Q1), (int8x16_t)xmmword_1827FDF10, (int8x16_t)xmmword_1827FDF00), v9))).u8[0];
  return 1;
}

uint64_t MTLGetPackFloatFunction::$_2::__invoke(MTLGetPackFloatFunction::$_2 *this, float *a2, void *a3, int8x16_t a4)
{
  float32x4_t v9;

  a4.i32[0] = *(_DWORD *)this;
  __asm { FMOV            V1.4S, #-1.0 }
  v9 = vmaxnmq_f32((float32x4_t)vandq_s8(a4, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a4), (int8x16_t)vcgezq_f32((float32x4_t)a4))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  *(_BYTE *)a2 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v9, _Q1), (float32x4_t)xmmword_1827FDF20))).u8[0];
  return 1;
}

uint64_t MTLGetPackFloatFunction::$_3::__invoke(MTLGetPackFloatFunction::$_3 *this, float *a2, void *a3, uint32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  __asm { FMOV            V1.4S, #1.0 }
  *(_WORD *)a2 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4)), (float32x4_t)xmmword_1827FDF30))).u16[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_4::__invoke(MTLGetPackFloatFunction::$_4 *this, float *a2, void *a3, int8x16_t a4)
{
  float32x4_t v9;

  a4.i32[0] = *(_DWORD *)this;
  __asm { FMOV            V1.4S, #-1.0 }
  v9 = vmaxnmq_f32((float32x4_t)vandq_s8(a4, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a4), (int8x16_t)vcgezq_f32((float32x4_t)a4))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  *(_WORD *)a2 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v9, _Q1), (float32x4_t)xmmword_1827FDF40))).u16[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_5::__invoke(MTLGetPackFloatFunction::$_5 *this, float *a2, void *a3, float32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *(_WORD *)a2 = vmovl_u16((uint16x4_t)vcvt_f16_f32(a4)).u16[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_6::__invoke(MTLGetPackFloatFunction::$_6 *this, float *a2, void *a3, uint32x4_t a4)
{
  float32x4_t v9;

  a4.i64[0] = *(_QWORD *)this;
  __asm { FMOV            V1.4S, #1.0 }
  v9 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  v9.i64[0] = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v9, _Q1), (int8x16_t)xmmword_1827FDF60, (int8x16_t)xmmword_1827FDF50), v9))).u64[0];
  *((_BYTE *)a2 + 1) = v9.i8[4];
  *(_BYTE *)a2 = v9.i8[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_7::__invoke(MTLGetPackFloatFunction::$_7 *this, float *a2, void *a3, int8x16_t a4)
{
  float32x4_t v9;

  a4.i64[0] = *(_QWORD *)this;
  __asm { FMOV            V1.4S, #-1.0 }
  v9 = vmaxnmq_f32((float32x4_t)vandq_s8(a4, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a4), (int8x16_t)vcgezq_f32((float32x4_t)a4))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  v9.i64[0] = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v9, _Q1), (float32x4_t)xmmword_1827FDF70))).u64[0];
  *((_BYTE *)a2 + 1) = v9.i8[4];
  *(_BYTE *)a2 = v9.i8[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_8::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3;
  uint32x4_t v4;
  int32x4_t v10;
  __int16 v11;
  __int16 v12;

  v3 = (int8x16_t)vrev64q_s32(*this);
  v4 = (uint32x4_t)vextq_s8(v3, v3, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  v10 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4)), (float32x4_t)xmmword_1827FDF80)));
  v11 = v10.i16[0];
  v12 = v10.i16[2];
  _Q1.i32[0] = v10.u16[4];
  _Q1.i32[1] = v10.u16[6];
  *(uint32x2_t *)v10.i8 = vshl_u32(*(uint32x2_t *)_Q1.i8, (uint32x2_t)0xF0000000ALL);
  *(_WORD *)a2 = v11 | (32 * v12) | v10.i16[0] | v10.i16[2];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_9::__invoke(MTLGetPackFloatFunction::$_9 *this, float *a2, void *a3)
{
  *a2 = *(float *)this;
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_10::__invoke(MTLGetPackFloatFunction::$_10 *this, float *a2, void *a3, uint32x4_t a4)
{
  unint64_t v9;

  a4.i64[0] = *(_QWORD *)this;
  __asm { FMOV            V1.4S, #1.0 }
  v9 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4)), (float32x4_t)xmmword_1827FDF90))).u64[0];
  *((_WORD *)a2 + 1) = WORD2(v9);
  *(_WORD *)a2 = v9;
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_11::__invoke(MTLGetPackFloatFunction::$_11 *this, float *a2, void *a3, int8x16_t a4)
{
  float32x4_t v9;

  a4.i64[0] = *(_QWORD *)this;
  __asm { FMOV            V1.4S, #-1.0 }
  v9 = vmaxnmq_f32((float32x4_t)vandq_s8(a4, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a4), (int8x16_t)vcgezq_f32((float32x4_t)a4))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  v9.i64[0] = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v9, _Q1), (float32x4_t)xmmword_1827FDFA0))).u64[0];
  *((_WORD *)a2 + 1) = v9.i16[2];
  *(_WORD *)a2 = v9.i16[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_12::__invoke(MTLGetPackFloatFunction::$_12 *this, float *a2, void *a3, float32x4_t a4)
{
  unint64_t v4;

  a4.i64[0] = *(_QWORD *)this;
  v4 = vmovl_u16((uint16x4_t)vcvt_f16_f32(a4)).u64[0];
  *((_WORD *)a2 + 1) = WORD2(v4);
  *(_WORD *)a2 = v4;
  return 4;
}

double GammaConstants<8u,false>::Pack(float32x4_t a1, int8x16_t a2)
{
  int32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int8x16_t v8;
  const float *v9;
  const float *v10;
  const float *v11;
  int32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  double result;

  v3 = vmulq_f32(a1, a1);
  v4 = vrsqrteq_f32(a1);
  v5 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBAA9D75E), (float32x4_t)vdupq_n_s32(0x3F92E71Fu), a1), (float32x4_t)vdupq_n_s32(0xBEAEE5DE), v3), (float32x4_t)vdupq_n_s32(0x3EA5D123u), vmulq_f32(v3, a1)), (float32x4_t)vdupq_n_s32(0xBE045E0B), vmulq_f32(v3, v3));
  v6 = vcvtq_s32_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBE5CF100), vmulq_f32(vmulq_f32(v4, vrsqrtsq_f32(a1, vmulq_f32(v4, v4))), (float32x4_t)vdupq_n_s32(0x437F0002u)), v5));
  v7 = vdupq_n_s32(0x180u);
  v8 = vbicq_s8((int8x16_t)vaddq_s32(vaddq_s32(v6, v6), v7), a2);
  v4.i64[0] = vextq_s8(v8, v8, 4uLL).u64[0];
  v9 = (const float *)((char *)&Gamma::kGamma + 4 * v8.u32[0]);
  v7.i64[0] = *(_OWORD *)vld2_f32(v9).val;
  v10 = (const float *)((char *)&Gamma::kGamma + 4 * v4.u32[0]);
  v5.i64[0] = *(_OWORD *)vld2_f32(v10).val;
  v11 = (const float *)((char *)&Gamma::kGamma + 4 * v4.u32[1]);
  v2.i64[0] = *(_OWORD *)vld2_f32(v11).val;
  v12 = vzip1q_s32(v7, v2);
  v13 = (float32x4_t)vzip1q_s32(v12, (int32x4_t)v5);
  v13.i32[3] = 0;
  v14 = (float32x4_t)vzip2q_s32(v12, vdupq_lane_s32(*(int32x2_t *)v5.f32, 1));
  v14.i32[3] = 0;
  v15 = vabdq_f32(v13, a1);
  v16 = vabdq_f32(v14, a1);
  *(_QWORD *)&result = vsubq_s32(v6, vceqq_f32(vminnmq_f32(v15, v16), v16)).u64[0];
  return result;
}

uint64_t MTLGetPackFloatFunction::$_15::__invoke(int8x16_t *this, float *a2, void *a3)
{
  float32x4_t v8;
  int16x8_t v10;

  __asm { FMOV            V1.4S, #-1.0 }
  v8 = vmaxnmq_f32((float32x4_t)vandq_s8(*this, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)this), (int8x16_t)vcgezq_f32(*(float32x4_t *)this))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  v10 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v8, _Q1), (float32x4_t)vdupq_n_s32(0x42FE0000u))));
  *(int16x4_t *)v10.i8 = vmovn_s32((int32x4_t)v10);
  *(_DWORD *)a2 = vmovn_s16(v10).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_17::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v4;
  uint32x4_t v5;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int8x16_t v17;
  int8x16_t v18;

  v4 = (int8x16_t)vrev64q_s32(*this);
  v5 = (uint32x4_t)vextq_s8(v4, v4, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  v11 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v5, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v5));
  v12 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1827FDFB0, v11);
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  v14 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v11, v13), (int8x16_t)xmmword_1827FDFD0, (int8x16_t)xmmword_1827FDFC0), v11)));
  if ((vminvq_u32((uint32x4_t)v12) & 0x80000000) == 0)
  {
    v17 = v12;
    v18 = (int8x16_t)v14;
    *(double *)v15.i64 = GammaConstants<8u,false>::Pack(v11, v12);
    v11 = (float32x4_t)vbicq_s8(v15, v17);
    v14 = (int32x4_t)vorrq_s8((int8x16_t)v11, vandq_s8(v18, v17));
  }
  *(int16x4_t *)v11.f32 = vmovn_s32(v14);
  *(_DWORD *)a2 = vmovn_s16((int16x8_t)v11).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_18::__invoke(uint32x4_t *this, float *a2, void *a3)
{
  int8x16_t v8;
  __int32 v9;
  __int32 v10;

  __asm { FMOV            V1.4S, #1.0 }
  v8 = (int8x16_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(*this, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), *this)), (float32x4_t)xmmword_1827FDFE0)));
  v9 = v8.i32[1];
  v10 = v8.i32[0];
  *(uint32x2_t *)v8.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (uint32x2_t)0x1E00000014);
  *(_DWORD *)a2 = v10 | (v9 << 10) | v8.i32[0] | v8.i32[1];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_19::__invoke(int8x16_t *this, float *a2, void *a3)
{
  int32x4_t v3;
  int8x16_t v4;
  int32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int8x16_t v11;

  v3 = vdupq_n_s32(0x7F800000u);
  v4.i64[0] = 0x7F0000007FLL;
  v4.i64[1] = 0x7F0000007FLL;
  v5 = (int32x4_t)vandq_s8(*this, v4);
  v6 = vbicq_s8((int8x16_t)vceqq_s32((int32x4_t)vandq_s8(*this, (int8x16_t)v3), v3), (int8x16_t)vceqzq_s32(v5));
  v7.i64[0] = 0xC8000000C8000000;
  v7.i64[1] = 0xC8000000C8000000;
  v8.i64[0] = __PAIR64__(HIDWORD(this->i64[0]), *this) & 0x7FFFFFFF7FFFFFFFLL;
  v8.i32[2] = this->i64[1] & 0x7FFFFFFF;
  v8.i32[3] = HIDWORD(this->i64[0]) & 0x7FFFFFFF;
  v9 = (int8x16_t)vceqq_s32(v8, v3);
  v8.i64[0] = 0x7100000071;
  v8.i64[1] = 0x7100000071;
  v10 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x38800000u), *(uint32x4_t *)this), (int8x16_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&v5 | __PAIR128__(0x80000000800000, 0x80000000800000)), (uint32x4_t)vsubq_s32((int32x4_t)vshrq_n_u32(*(uint32x4_t *)this, 0x17uLL), v8)), (int8x16_t)vaddq_s32(*(int32x4_t *)this, v7));
  v7.i64[0] = 0x100000001;
  v7.i64[1] = 0x100000001;
  v11 = vorrq_s8(vbicq_s8(vbslq_s8(v9, (int8x16_t)xmmword_1827FE030, vbslq_s8((int8x16_t)vcgtq_u32(*(uint32x4_t *)this, (uint32x4_t)xmmword_1827FDFF0), (int8x16_t)xmmword_1827FE020, (int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32(vaddq_s32(v10, (int32x4_t)xmmword_1827FE010), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)v10, (uint32x4_t)xmmword_1827FE000), (int8x16_t)v7)), (uint32x4_t)xmmword_1827FE000))), vorrq_s8(v6, (int8x16_t)vcltzq_s32(*(int32x4_t *)this))), vandq_s8(v6, (int8x16_t)xmmword_1827FE040));
  *(uint32x2_t *)v10.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 4uLL), (uint32x2_t)0x160000000BLL);
  *(_DWORD *)a2 = v10.i32[0] | v11.i32[0] | v10.i32[1];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_20::__invoke(uint32x4_t *this, float *a2, void *a3)
{
  uint32x4_t v3;
  float32x4_t v4;
  unsigned int v5;
  int32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;

  v3 = *this;
  v3.i32[3] = this->i64[1];
  v4 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v3, (uint32x4_t)vdupq_n_s32(0x477F8000u)), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v3));
  v5 = (vmaxvq_u32((uint32x4_t)v4) + 0x4000) >> 23;
  if (v5 <= 0x6F)
    v5 = 111;
  v6 = vcvtq_s32_f32(vmulq_f32((float32x4_t)vdupq_n_s32(-2088763392 - (v5 << 23)), v4));
  v7.i64[0] = 0x100000001;
  v7.i64[1] = 0x100000001;
  v8 = (int8x16_t)vsraq_n_s32((int32x4_t)vandq_s8((int8x16_t)v6, v7), v6, 1uLL);
  *(uint32x2_t *)v6.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 4uLL), (uint32x2_t)0x1200000009);
  *(_DWORD *)a2 = v8.i32[0] | ((v5 << 27) - 2013265920) | v6.i32[0] | v6.i32[1];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_21::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3;
  uint32x4_t v4;
  int8x16_t v10;
  __int32 v11;
  __int32 v12;

  v3 = (int8x16_t)vrev64q_s32(*this);
  v4 = (uint32x4_t)vextq_s8(v3, v3, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  v10 = (int8x16_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4)), (float32x4_t)xmmword_1827FDFE0)));
  v11 = v10.i32[1];
  v12 = v10.i32[0];
  *(uint32x2_t *)v10.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), (uint32x2_t)0x1E00000014);
  *(_DWORD *)a2 = v12 | (v11 << 10) | v10.i32[0] | v10.i32[1];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_22::__invoke(MTLGetPackFloatFunction::$_22 *this, float *a2, void *a3)
{
  *(_QWORD *)a2 = *(_QWORD *)this;
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_23::__invoke(uint32x4_t *this, int16x4_t *a2, void *a3)
{
  __asm { FMOV            V1.4S, #1.0 }
  *a2 = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(*this, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), *this)), (float32x4_t)vdupq_n_s32(0x477FFF00u)))));
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_24::__invoke(int8x16_t *this, int16x4_t *a2, void *a3)
{
  float32x4_t v8;

  __asm { FMOV            V1.4S, #-1.0 }
  v8 = vmaxnmq_f32((float32x4_t)vandq_s8(*this, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)this), (int8x16_t)vcgezq_f32(*(float32x4_t *)this))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  *a2 = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v8, _Q1), (float32x4_t)vdupq_n_s32(0x46FFFE00u)))));
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_25::__invoke(float32x4_t *this, float16x4_t *a2, void *a3)
{
  *a2 = vcvt_f16_f32(*this);
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_26::__invoke(MTLGetPackFloatFunction::$_26 *this, float *a2, void *a3)
{
  *(_OWORD *)a2 = *(_OWORD *)this;
  return 16;
}

uint64_t MTLGetPackFloatFunction::$_27::__invoke(uint32x4_t *this, float *a2, void *a3)
{
  float32x4_t v8;
  int16x8_t v9;

  __asm { FMOV            V1.4S, #1.0 }
  v8 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(*this, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), *this));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  v9 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v8, _Q1), (int8x16_t)xmmword_1827FE060, (int8x16_t)xmmword_1827FE050), v8)));
  *(int16x4_t *)v9.i8 = vmovn_s32((int32x4_t)v9);
  *(_DWORD *)a2 = vmovn_s16(v9).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_28::__invoke(uint32x4_t *this, float *a2, void *a3)
{
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v15;
  int8x16_t v16;

  __asm { FMOV            V1.4S, #1.0 }
  v9 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(*this, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), *this));
  v10 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1827FDFB0, v9);
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  v12 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v9, v11), (int8x16_t)xmmword_1827FE080, (int8x16_t)xmmword_1827FE070), v9)));
  if ((vminvq_u32((uint32x4_t)v10) & 0x80000000) == 0)
  {
    v15 = v10;
    v16 = (int8x16_t)v12;
    *(double *)v13.i64 = GammaConstants<8u,false>::Pack(v9, v10);
    v9 = (float32x4_t)vbicq_s8(v13, v15);
    v12 = (int32x4_t)vorrq_s8((int8x16_t)v9, vandq_s8(v16, v15));
  }
  *(int16x4_t *)v9.f32 = vmovn_s32(v12);
  *(_DWORD *)a2 = vmovn_s16((int16x8_t)v9).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_29::__invoke(int8x16_t *this, float *a2, void *a3)
{
  float32x4_t v8;
  int16x8_t v10;

  __asm { FMOV            V1.4S, #-1.0 }
  v8 = vmaxnmq_f32((float32x4_t)vandq_s8(*this, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)this), (int8x16_t)vcgezq_f32(*(float32x4_t *)this))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  v10 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v8, _Q1), (float32x4_t)xmmword_1827FE090)));
  *(int16x4_t *)v10.i8 = vmovn_s32((int32x4_t)v10);
  *(_DWORD *)a2 = vmovn_s16(v10).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_30::__invoke(float32x4_t *this, float16x4_t *a2, void *a3)
{
  *a2 = vcvt_f16_f32(*this);
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_31::__invoke(MTLGetPackFloatFunction::$_31 *this, float *a2, void *a3)
{
  *(_OWORD *)a2 = *(_OWORD *)this;
  return 16;
}

uint64_t MTLGetPackFloatFunction::$_32::__invoke(int8x16_t *this, float16x4_t *a2, void *a3)
{
  *a2 = vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32((float32x4_t)vandq_s8(*this, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)this), (int8x16_t)vcgezq_f32(*(float32x4_t *)this))), (float32x4_t)xmmword_1827FE0A0), (float32x4_t)xmmword_1827FE0B0));
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_33::__invoke(MTLGetPackFloatFunction::$_33 *this, float *a2, void *a3, uint32x4_t a4)
{
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int8x16_t v16;
  int8x16_t v17;

  a4.i32[0] = *(_DWORD *)this;
  __asm { FMOV            V1.4S, #1.0 }
  v10 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4));
  v11 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1827FE0C0, v10);
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  v13 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v10, v12), (int8x16_t)xmmword_1827FE0E0, (int8x16_t)xmmword_1827FE0D0), v10)));
  if ((vminvq_u32((uint32x4_t)v11) & 0x80000000) == 0)
  {
    v16 = v11;
    v17 = (int8x16_t)v13;
    *(double *)v14.i64 = GammaConstants<8u,false>::Pack(v10, v11);
    v13.i8[0] = vorrq_s8(vbicq_s8(v14, v16), vandq_s8(v17, v16)).u8[0];
  }
  *(_BYTE *)a2 = v13.i8[0];
  return 1;
}

uint64_t MTLGetPackFloatFunction::$_34::__invoke(MTLGetPackFloatFunction::$_34 *this, float *a2, void *a3, uint32x4_t a4)
{
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int8x16_t v16;
  int8x16_t v17;

  a4.i64[0] = *(_QWORD *)this;
  __asm { FMOV            V1.4S, #1.0 }
  v10 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4));
  v11 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1827FE0F0, v10);
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  v13 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v10, v12), (int8x16_t)xmmword_1827FE110, (int8x16_t)xmmword_1827FE100), v10)));
  if ((vminvq_u32((uint32x4_t)v11) & 0x80000000) == 0)
  {
    v16 = v11;
    v17 = (int8x16_t)v13;
    *(double *)v14.i64 = GammaConstants<8u,false>::Pack(v10, v11);
    v13 = (int32x4_t)vorrq_s8(vbicq_s8(v14, v16), vandq_s8(v17, v16));
  }
  *((_BYTE *)a2 + 1) = v13.i8[4];
  *(_BYTE *)a2 = v13.i8[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_35::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3;
  uint32x4_t v4;
  int32x4_t v10;
  __int16 v11;

  v3 = (int8x16_t)vrev64q_s32(*this);
  v4 = (uint32x4_t)vextq_s8(v3, v3, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  v10 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4)), (float32x4_t)xmmword_1827FE120)));
  v11 = v10.i16[0];
  _Q1.i32[0] = v10.u16[2];
  _Q1.i32[1] = v10.u16[4];
  *(uint32x2_t *)v10.i8 = vshl_u32(*(uint32x2_t *)_Q1.i8, (uint32x2_t)0xB00000005);
  *(_WORD *)a2 = v10.i16[0] | v11 | v10.i16[2];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_36::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3;
  uint32x4_t v4;
  int32x4_t v10;
  __int16 v11;
  __int16 v12;

  v3 = (int8x16_t)vrev64q_s32(*this);
  v4 = (uint32x4_t)vextq_s8(v3, v3, 8uLL);
  __asm { FMOV            V1.4S, #1.0 }
  v10 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4)), (float32x4_t)xmmword_1827FE130)));
  v11 = v10.i16[0];
  v12 = v10.i16[2];
  _Q1.i32[0] = v10.u16[4];
  _Q1.i32[1] = v10.u16[6];
  *(uint32x2_t *)v10.i8 = vshl_u32(*(uint32x2_t *)_Q1.i8, (uint32x2_t)0xB00000006);
  *(_WORD *)a2 = v11 | (2 * v12) | v10.i16[0] | v10.i16[2];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_37::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3;
  uint32x4_t v4;
  float32x4_t v10;
  int32x4_t v12;
  __int16 v13;
  __int16 v14;

  v3 = (int8x16_t)vrev64q_s32(*this);
  v4 = (uint32x4_t)vextq_s8(v3, v3, 8uLL);
  __asm { FMOV            V1.4S, #1.0 }
  v10 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V3.4S, #15.0 }
  v12 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v10, _Q1), (int8x16_t)vdupq_n_s32(0x416FFFFFu), _Q3), v10)));
  v13 = v12.i16[0];
  v14 = v12.i16[2];
  _Q1.i32[0] = v12.u16[4];
  _Q1.i32[1] = v12.u16[6];
  *(uint32x2_t *)v12.i8 = vshl_u32(*(uint32x2_t *)_Q1.f32, (uint32x2_t)0xC00000008);
  *(_WORD *)a2 = v13 | (16 * v14) | v12.i16[0] | v12.i16[2];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_38::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3;
  uint32x4_t v4;
  int8x16_t v5;
  uint32x2_t v6;

  v3 = (int8x16_t)vrev64q_s32(*this);
  v4 = (uint32x4_t)vaddq_f32((float32x4_t)vextq_s8(v3, v3, 0xCuLL), (float32x4_t)vdupq_n_s32(0x3F40C0C1u));
  v5 = (int8x16_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, (uint32x4_t)vdupq_n_s32(0x40006060u)), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4)), (float32x4_t)xmmword_1827FE140), (float32x4_t)vdupq_n_s32(0x43FF0000u))));
  v6 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 4uLL), (uint32x2_t)0x140000000ALL);
  *(_DWORD *)a2 = v6.i32[0] | v5.i32[0] | v6.i32[1];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_39::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint32x2_t v12;
  int32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;

  v4 = (int8x16_t)vrev64q_s32(*this);
  v5 = (float32x4_t)vextq_s8(v4, v4, 0xCuLL);
  v6 = vminnmq_f32(vmaxnmq_f32((float32x4_t)vandq_s8((int8x16_t)v5, vorrq_s8((int8x16_t)vcltzq_f32(v5), (int8x16_t)vcgezq_f32(v5))), (float32x4_t)xmmword_1827FE150), (float32x4_t)xmmword_1827FE160);
  v7 = vabsq_f32(v6);
  v8 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1827FDFB0, v7);
  v9 = (int8x16_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vaddq_f32(v6, (float32x4_t)xmmword_1827FE170), (float32x4_t)xmmword_1827FE180)));
  if ((vminvq_u32((uint32x4_t)v8) & 0x80000000) == 0)
  {
    v15 = v8;
    v16 = v9;
    v14 = (int32x4_t)v6;
    *(double *)v10.i64 = GammaConstants<10u,false>::Pack(v7, v8);
    v11.i64[0] = 0x30000000300;
    v11.i64[1] = 0x30000000300;
    v9 = vorrq_s8(vbicq_s8(vbslq_s8((int8x16_t)vcltzq_s32(v14), (int8x16_t)vsubq_s32(v11, v10), (int8x16_t)v10), v15), vandq_s8(v15, v16));
  }
  v12 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 4uLL), (uint32x2_t)0x140000000ALL);
  *(_DWORD *)a2 = v12.i32[0] | v9.i32[0] | v12.i32[1];
  return 4;
}

double GammaConstants<10u,false>::Pack(float32x4_t a1, int8x16_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  uint64_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  double result;

  v2 = vmulq_f32(a1, a1);
  v3 = vrsqrteq_f32(a1);
  v4 = vmulq_f32(v3, vrsqrtsq_f32(a1, vmulq_f32(v3, v3)));
  v5 = vcvtq_s32_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x43BFAB34u), vmulq_f32(vmulq_f32(v4, vrsqrtsq_f32(a1, vmulq_f32(v4, v4))), (float32x4_t)vdupq_n_s32(0x43FF0004u)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBA9E7BAC), (float32x4_t)vdupq_n_s32(0x3F91AA0Du), a1), (float32x4_t)vdupq_n_s32(0xBE870C2B), v2), (float32x4_t)vdupq_n_s32(0x3E2D0438u), vmulq_f32(v2, a1)), (float32x4_t)vdupq_n_s32(0xBD30A201), vmulq_f32(v2, v2))));
  v6 = vbicq_s8((int8x16_t)v5, a2);
  v4.i64[0] = vextq_s8(v6, v6, 4uLL).u64[0];
  v7 = *(int32x4_t *)((char *)&Gamma::kGamma + 4 * v6.u32[0]);
  v8 = v4.u32[1];
  v9 = *(int32x4_t *)((char *)&Gamma::kGamma + 4 * v4.u32[0]);
  v10 = *(int32x4_t *)((char *)&Gamma::kGamma + 4 * v8);
  v11 = vzip1q_s32(v7, v10);
  v12 = vzip2q_s32(v7, v10);
  v13 = vdupq_lane_s32(*(int32x2_t *)v9.i8, 1);
  v14 = vdupq_laneq_s32(v9, 2);
  v15 = (float32x4_t)vzip1q_s32(v11, v9);
  v16 = (float32x4_t)vzip1q_s32(v12, v14);
  v15.i32[3] = 0;
  v17 = vabdq_f32(v15, a1);
  v18 = (float32x4_t)vzip2q_s32(v11, v13);
  v18.i32[3] = 0;
  v16.i32[3] = 0;
  v19 = vabdq_f32(v18, a1);
  v20 = vabdq_f32(v16, a1);
  v21 = vminnmq_f32(vminnmq_f32(v17, v19), v20);
  v22 = vceqq_f32(v21, v19);
  v23 = vbicq_s8((int8x16_t)vceqq_f32(v21, v20), (int8x16_t)v22);
  v21.i64[0] = 0x200000002;
  v21.i64[1] = 0x200000002;
  *(_QWORD *)&result = vaddq_s32(vsubq_s32(v5, v22), (int32x4_t)vandq_s8(v23, (int8x16_t)v21)).u64[0];
  return result;
}

uint64_t MTLGetPackFloatFunction::$_41::__invoke(int32x4_t *this, int16x4_t *a2, void *a3)
{
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;

  v4 = (int8x16_t)vrev64q_s32(*this);
  v5 = (float32x4_t)vextq_s8(v4, v4, 0xCuLL);
  v6 = vminnmq_f32(vmaxnmq_f32((float32x4_t)vandq_s8((int8x16_t)v5, vorrq_s8((int8x16_t)vcltzq_f32(v5), (int8x16_t)vcgezq_f32(v5))), (float32x4_t)xmmword_1827FE150), (float32x4_t)xmmword_1827FE160);
  v7 = vabsq_f32(v6);
  v8 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1827FDFB0, v7);
  v9 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vaddq_f32(v6, (float32x4_t)xmmword_1827FE170), (float32x4_t)xmmword_1827FE180)));
  if ((vminvq_u32((uint32x4_t)v8) & 0x80000000) == 0)
  {
    v13 = (int32x4_t)v6;
    v14 = v8;
    v15 = (int8x16_t)v9;
    *(double *)v10.i64 = GammaConstants<10u,false>::Pack(v7, v8);
    v11.i64[0] = 0x30000000300;
    v11.i64[1] = 0x30000000300;
    v9 = (int32x4_t)vorrq_s8(vbicq_s8(vbslq_s8((int8x16_t)vcltzq_s32(v13), (int8x16_t)vsubq_s32(v11, v10), (int8x16_t)v10), v14), vandq_s8(v14, v15));
  }
  *a2 = vshl_n_s16(vmovn_s32(v9), 6uLL);
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_42::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3;
  uint32x4_t v4;
  float32x4_t v10;
  int32x4_t v12;
  __int16 v13;
  __int16 v14;

  v3 = (int8x16_t)vrev64q_s32(*this);
  v4 = (uint32x4_t)vextq_s8(v3, v3, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  v10 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V3.4S, #15.0 }
  v12 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v10, _Q1), (int8x16_t)vdupq_n_s32(0x416FFFFFu), _Q3), v10)));
  v13 = v12.i16[0];
  v14 = v12.i16[2];
  _Q1.i32[0] = v12.u16[4];
  _Q1.i32[1] = v12.u16[6];
  *(uint32x2_t *)v12.i8 = vshl_u32(*(uint32x2_t *)_Q1.f32, (uint32x2_t)0xC00000008);
  *(_WORD *)a2 = v13 | (16 * v14) | v12.i16[0] | v12.i16[2];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_43::__invoke(int8x16_t *this, float *a2, void *a3)
{
  uint32x4_t v3;
  float32x4_t v9;
  int16x8_t v10;

  v3 = (uint32x4_t)vextq_s8(*this, *this, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  v9 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v3, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v3));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  v10 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v9, _Q1), (int8x16_t)vdupq_n_s32(0x437EFFFFu), (int8x16_t)vdupq_n_s32(0x437F0000u)), v9)));
  *(int16x4_t *)v10.i8 = vmovn_s32((int32x4_t)v10);
  *(_DWORD *)a2 = vmovn_s16(v10).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_44::__invoke(int8x16_t *this, float *a2, void *a3)
{
  int8x16_t v4;
  uint32x4_t v5;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int16x8_t v16;
  int8x16_t v18;
  int8x16_t v19;

  v4 = vextq_s8(*this, *this, 0xCuLL);
  v5 = (uint32x4_t)v4;
  v5.i32[0] = v4.i32[3];
  v5.i32[3] = v4.i32[0];
  __asm { FMOV            V0.4S, #1.0 }
  v11 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v5, _Q0), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v5));
  v12 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1827FDFB0, v11);
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  v14 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v11, v13), (int8x16_t)xmmword_1827FDFD0, (int8x16_t)xmmword_1827FDFC0), v11)));
  if ((vminvq_u32((uint32x4_t)v12) & 0x80000000) == 0)
  {
    v18 = v12;
    v19 = (int8x16_t)v14;
    *(double *)v15.i64 = GammaConstants<8u,false>::Pack(v11, v12);
    v14 = (int32x4_t)vorrq_s8(vbicq_s8(v15, v18), vandq_s8(v19, v18));
  }
  v16 = (int16x8_t)v14;
  v16.i32[0] = v14.i32[3];
  v16.i32[3] = v14.i32[0];
  *(int16x4_t *)v16.i8 = vmovn_s32((int32x4_t)v16);
  *(_DWORD *)a2 = vmovn_s16(v16).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_45::__invoke(MTLGetPackFloatFunction::$_45 *this, float *a2, void *a3, uint32x4_t a4)
{
  int32x4_t v4;
  int8x16_t v5;
  int32x4_t v6;
  int8x16_t v7;

  a4.i32[0] = *(_DWORD *)this;
  v4 = vdupq_n_s32(0x7F800000u);
  v5.i64[0] = 0x100000001;
  v5.i64[1] = 0x100000001;
  v6 = (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(a4, 0x10uLL), v5);
  v5.i64[0] = 0x7F0000007FLL;
  v5.i64[1] = 0x7F0000007FLL;
  v7 = vbicq_s8((int8x16_t)vaddq_s32(v6, (int32x4_t)v5), (int8x16_t)vceqq_s32((int32x4_t)vandq_s8((int8x16_t)a4, (int8x16_t)v4), v4));
  v6.i64[0] = 0xFFFF0000FFFFLL;
  v6.i64[1] = 0xFFFF0000FFFFLL;
  *(_WORD *)a2 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vorrq_s8(v7, vandq_s8((int8x16_t)vceqq_s32((int32x4_t)vandq_s8((int8x16_t)a4, (int8x16_t)vdupq_n_s32(0x7FFF0000u)), v4), (int8x16_t)v6)), (int32x4_t)a4), 0x10uLL).u16[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_46::__invoke(int32x2_t *this, float *a2, void *a3, uint32x4_t a4)
{
  int32x4_t v4;
  uint32x2_t v5;

  *(int32x2_t *)a4.i8 = *this;
  v4 = vdupq_n_s32(0x7F800000u);
  v5 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vorr_s8(vbic_s8((int8x8_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)*(_OWORD *)&vshrq_n_u32(a4, 0x10uLL), (int8x8_t)0x100000001), (int32x2_t)0x7F0000007FLL), (int8x8_t)*(_OWORD *)&vceqq_s32((int32x4_t)vandq_s8((int8x16_t)a4, (int8x16_t)v4), v4)), vand_s8((int8x8_t)*(_OWORD *)&vceqq_s32((int32x4_t)vandq_s8((int8x16_t)a4, (int8x16_t)vdupq_n_s32(0x7FFF0000u)), v4), (int8x8_t)0xFFFF0000FFFFLL)), *this),
         0x10uLL);
  *((_WORD *)a2 + 1) = v5.i16[2];
  *(_WORD *)a2 = v5.i16[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_47::__invoke(uint32x4_t *this, int16x4_t *a2, void *a3)
{
  int32x4_t v3;
  int8x16_t v4;
  int32x4_t v5;
  int8x16_t v6;

  v3 = vdupq_n_s32(0x7F800000u);
  v4.i64[0] = 0x100000001;
  v4.i64[1] = 0x100000001;
  v5 = (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(*this, 0x10uLL), v4);
  v4.i64[0] = 0x7F0000007FLL;
  v4.i64[1] = 0x7F0000007FLL;
  v6 = vbicq_s8((int8x16_t)vaddq_s32(v5, (int32x4_t)v4), (int8x16_t)vceqq_s32((int32x4_t)vandq_s8(*(int8x16_t *)this, (int8x16_t)v3), v3));
  v5.i64[0] = 0xFFFF0000FFFFLL;
  v5.i64[1] = 0xFFFF0000FFFFLL;
  *a2 = vaddhn_s32((int32x4_t)vorrq_s8(v6, vandq_s8((int8x16_t)vceqq_s32((int32x4_t)vandq_s8(*(int8x16_t *)this, (int8x16_t)vdupq_n_s32(0x7FFF0000u)), v3), (int8x16_t)v5)), *(int32x4_t *)this);
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_0::__invoke(MTLGetUnpackFloatFunction::$_0 *this, float32x4_t *a2, float *a3)
{
  int32x4_t v3;

  v3.i64[0] = 0;
  v3.i32[2] = 0;
  v3.i32[3] = *(unsigned __int8 *)this;
  *a2 = vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x3B808081u));
  return 1;
}

uint64_t MTLGetUnpackFloatFunction::$_1::__invoke(MTLGetUnpackFloatFunction::$_1 *this, float32x4_t *a2, float *a3)
{
  int32x4_t v3;

  v3.i64[0] = *(unsigned __int8 *)this;
  v3.i64[1] = 0xFF00000000;
  *a2 = vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x3B808081u));
  return 1;
}

uint64_t MTLGetUnpackFloatFunction::$_2::__invoke(MTLGetUnpackFloatFunction::$_2 *this, float32x4_t *a2, float *a3)
{
  int32x4_t v3;

  v3.i64[0] = *(char *)this;
  v3.i64[1] = 0x7F00000000;
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
  return 1;
}

uint64_t MTLGetUnpackFloatFunction::$_3::__invoke(MTLGetUnpackFloatFunction::$_3 *this, float32x4_t *a2, float *a3)
{
  int32x4_t v3;

  v3.i64[0] = *(unsigned __int16 *)this;
  v3.i64[1] = 0xFFFF00000000;
  *a2 = vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x37800080u));
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_4::__invoke(MTLGetUnpackFloatFunction::$_4 *this, float32x4_t *a2, float *a3)
{
  int32x4_t v3;

  v3.i64[0] = *(__int16 *)this;
  v3.i64[1] = 0x7FFF00000000;
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x38000100u)), _Q1);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_5::__invoke(MTLGetUnpackFloatFunction::$_5 *this, float32x4_t *a2, float *a3)
{
  float16x4_t v3;

  v3.i32[0] = *(unsigned __int16 *)this;
  v3.i32[1] = 1006632960;
  *a2 = vcvtq_f32_f16(v3);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_6::__invoke(MTLGetUnpackFloatFunction::$_6 *this, float32x4_t *a2, float *a3)
{
  int32x4_t v3;

  v3.i32[0] = *(unsigned __int8 *)this;
  v3.i32[1] = *((unsigned __int8 *)this + 1);
  v3.i64[1] = 0xFF00000000;
  *a2 = vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x3B808081u));
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_7::__invoke(MTLGetUnpackFloatFunction::$_7 *this, float32x4_t *a2, float *a3)
{
  int32x4_t v3;

  v3.i32[0] = *(char *)this;
  v3.i32[1] = *((char *)this + 1);
  v3.i64[1] = 0x7F00000000;
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_8::__invoke(MTLGetUnpackFloatFunction::$_8 *this, int8x16_t *a2, float *a3, double a4, int8x8_t a5)
{
  unsigned __int32 v5;
  uint64_t v6;
  int8x8_t v7;
  int32x4_t v8;
  int8x16_t v9;

  v5 = *(unsigned __int16 *)this;
  a5.i32[0] = v5 >> 10;
  LODWORD(v6) = vand_s8(a5, (int8x8_t)0x1F0000001FLL).u32[0];
  a5.i32[1] = v5;
  v7.i32[0] = v5;
  v7.i32[1] = v5 >> 5;
  *(int8x8_t *)v8.i8 = vand_s8(v7, (int8x8_t)0x1F0000001FLL);
  HIDWORD(v6) = vshr_n_u32(*(uint32x2_t *)&a5, 0xFuLL).i32[1];
  v8.i64[1] = v6;
  v9 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_s32(v8), (float32x4_t)xmmword_1827FE1B0));
  *a2 = vextq_s8(v9, v9, 0xCuLL);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_9::__invoke(MTLGetUnpackFloatFunction::$_9 *this, _OWORD *a2, float *a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = *(unsigned int *)this;
  *((_QWORD *)&v3 + 1) = 0x3F80000000000000;
  *a2 = v3;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_10::__invoke(MTLGetUnpackFloatFunction::$_10 *this, float32x4_t *a2, float *a3)
{
  int32x4_t v3;

  v3.i32[0] = *(unsigned __int16 *)this;
  v3.i32[1] = *((unsigned __int16 *)this + 1);
  v3.i64[1] = 0xFFFF00000000;
  *a2 = vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x37800080u));
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_11::__invoke(MTLGetUnpackFloatFunction::$_11 *this, float32x4_t *a2, float *a3)
{
  int32x4_t v3;

  v3.i32[0] = *(__int16 *)this;
  v3.i32[1] = *((__int16 *)this + 1);
  v3.i64[1] = 0x7FFF00000000;
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x38000100u)), _Q1);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_12::__invoke(MTLGetUnpackFloatFunction::$_12 *this, float32x4_t *a2, float *a3, int32x4_t a4)
{
  a4.i32[0] = *(unsigned __int16 *)this;
  a4.i16[2] = *((_WORD *)this + 1);
  a4.i64[1] = 0x3C0000000000;
  *a2 = vcvtq_f32_f16((float16x4_t)vmovn_s32(a4));
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_13::__invoke(MTLGetUnpackFloatFunction::$_13 *this, float32x4_t *a2, float *a3, uint8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *a2 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4))), (float32x4_t)vdupq_n_s32(0x3B808081u));
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_14::__invoke(MTLGetUnpackFloatFunction::$_14 *this, _OWORD *a2, float *a3, double a4, float a5)
{
  __int128 v5;

  LODWORD(v5) = Gamma::kGamma[2 * *(unsigned __int8 *)this + 384];
  LOBYTE(a5) = *((_BYTE *)this + 3);
  DWORD1(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 1) + 384];
  DWORD2(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 2) + 384];
  *((float *)&v5 + 3) = (float)LODWORD(a5) * 0.0039216;
  *a2 = v5;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_15::__invoke(MTLGetUnpackFloatFunction::$_15 *this, float32x4_t *a2, float *a3, int8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a4))), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_16::__invoke(MTLGetUnpackFloatFunction::$_16 *this, int8x16_t *a2, float *a3, uint8x8_t a4)
{
  int8x16_t v4;

  a4.i32[0] = *(_DWORD *)this;
  v4 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4))), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *a2 = vextq_s8(v4, v4, 0xCuLL);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_17::__invoke(MTLGetUnpackFloatFunction::$_17 *this, _OWORD *a2, float *a3, double a4, float a5)
{
  __int128 v5;

  LODWORD(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 2) + 384];
  LOBYTE(a5) = *((_BYTE *)this + 3);
  DWORD1(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 1) + 384];
  DWORD2(v5) = Gamma::kGamma[2 * *(unsigned __int8 *)this + 384];
  *((float *)&v5 + 3) = (float)LODWORD(a5) * 0.0039216;
  *a2 = v5;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_18::__invoke(MTLGetUnpackFloatFunction::$_18 *this, float32x4_t *a2, float *a3, int8x8_t a4)
{
  uint64_t v4;
  int8x8_t v5;
  int32x4_t v6;

  a4.i32[0] = *(_DWORD *)this >> 20;
  LODWORD(v4) = vand_s8(a4, (int8x8_t)0x300000003).u32[0];
  a4.i32[1] = *(_DWORD *)this;
  v5.i32[0] = *(_DWORD *)this;
  v5.i32[1] = *(_DWORD *)this >> 10;
  *(int8x8_t *)v6.i8 = vand_s8(v5, (int8x8_t)0x300000003);
  HIDWORD(v4) = vshr_n_u32(*(uint32x2_t *)&a4, 0x1EuLL).i32[1];
  v6.i64[1] = v4;
  *a2 = vmulq_f32(vcvtq_f32_s32(v6), (float32x4_t)xmmword_1827FE1C0);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_19::__invoke(MTLGetUnpackFloatFunction::$_19 *this, float32x4_t *a2, float *a3)
{
  uint16x4_t v3;

  v3 = (uint16x4_t)vdup_n_s16(0x1E0u);
  v3.i16[0] = *(_DWORD *)this & 0x7FF;
  v3.i16[1] = (*(_DWORD *)this >> 11) & 0x7FF;
  v3.i16[2] = *(_DWORD *)this >> 22;
  *a2 = vcvtq_f32_f16((float16x4_t)vshl_u16(v3, (uint16x4_t)0x5000500040004));
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_20::__invoke(MTLGetUnpackFloatFunction::$_20 *this, float32x4_t *a2, float *a3, uint32x4_t a4)
{
  float32x4_t v4;

  a4.i32[0] = *(_DWORD *)this;
  a4.i32[1] = *(_DWORD *)this >> 9;
  *(int8x8_t *)a4.i8 = vand_s8(*(int8x8_t *)a4.i8, (int8x8_t)0x100000001);
  a4.i32[2] = (*(_DWORD *)this >> 18) & 0x1FF;
  v4 = vmulq_f32((float32x4_t)vdupq_n_s32((*(_DWORD *)this >> 27 << 23) + 864026624), vcvtq_f32_u32(a4));
  v4.i32[3] = 1.0;
  *a2 = v4;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_21::__invoke(MTLGetUnpackFloatFunction::$_21 *this, int8x16_t *a2, float *a3, double a4, int8x8_t a5)
{
  uint64_t v5;
  int8x8_t v6;
  int32x4_t v7;
  int8x16_t v8;

  a5.i32[0] = *(_DWORD *)this >> 20;
  LODWORD(v5) = vand_s8(a5, (int8x8_t)0x300000003).u32[0];
  a5.i32[1] = *(_DWORD *)this;
  v6.i32[0] = *(_DWORD *)this;
  v6.i32[1] = *(_DWORD *)this >> 10;
  *(int8x8_t *)v7.i8 = vand_s8(v6, (int8x8_t)0x300000003);
  HIDWORD(v5) = vshr_n_u32(*(uint32x2_t *)&a5, 0x1EuLL).i32[1];
  v7.i64[1] = v5;
  v8 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_s32(v7), (float32x4_t)xmmword_1827FE1C0));
  *a2 = vextq_s8(v8, v8, 0xCuLL);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_22::__invoke(MTLGetUnpackFloatFunction::$_22 *this, _OWORD *a2, float *a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = *(_QWORD *)this;
  *((_QWORD *)&v3 + 1) = 0x3F80000000000000;
  *a2 = v3;
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_23::__invoke(uint16x4_t *this, float32x4_t *a2, float *a3)
{
  *a2 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*this)), (float32x4_t)vdupq_n_s32(0x37800080u));
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_24::__invoke(int16x4_t *this, float32x4_t *a2, float *a3)
{
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16(*this)), (float32x4_t)vdupq_n_s32(0x38000100u)), _Q1);
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_25::__invoke(float16x4_t *this, float32x4_t *a2, float *a3)
{
  *a2 = vcvtq_f32_f16(*this);
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_26::__invoke(MTLGetUnpackFloatFunction::$_26 *this, _OWORD *a2, float *a3)
{
  *a2 = *(_OWORD *)this;
  return 16;
}

uint64_t MTLGetUnpackFloatFunction::$_27::__invoke(MTLGetUnpackFloatFunction::$_27 *this, float32x4_t *a2, float *a3, uint8x8_t a4)
{
  uint16x8_t v4;

  a4.i32[0] = *(_DWORD *)this;
  v4 = vmovl_u8(a4);
  v4.i32[0] &= 0xFF00FFu;
  v4.i16[2] = v4.u8[4];
  v4.i16[3] = 255;
  *a2 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v4.i8)), (float32x4_t)vdupq_n_s32(0x3B808081u));
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_28::__invoke(MTLGetUnpackFloatFunction::$_28 *this, _OWORD *a2, float *a3)
{
  __asm { FMOV            V0.4S, #1.0 }
  LODWORD(_Q0) = Gamma::kGamma[2 * *(unsigned __int8 *)this + 384];
  DWORD1(_Q0) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 1) + 384];
  DWORD2(_Q0) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 2) + 384];
  *a2 = _Q0;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_29::__invoke(MTLGetUnpackFloatFunction::$_29 *this, float32x4_t *a2, float *a3, uint8x8_t a4)
{
  uint16x8_t v4;

  a4.i32[0] = *(_DWORD *)this;
  v4 = vmovl_u8(a4);
  v4.i16[3] = 127;
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16(*(int16x4_t *)v4.i8, 8uLL), 8uLL))), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_30::__invoke(float16x4_t *this, float32x4_t *a2, float *a3)
{
  float16x4_t v3;

  v3 = *this;
  v3.i16[3] = 15360;
  *a2 = vcvtq_f32_f16(v3);
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_31::__invoke(MTLGetUnpackFloatFunction::$_31 *this, _OWORD *a2, float *a3)
{
  __int128 v3;

  v3 = *(_OWORD *)this;
  HIDWORD(v3) = 1065353216;
  *a2 = v3;
  return 16;
}

uint64_t MTLGetUnpackFloatFunction::$_32::__invoke(float16x4_t *this, float32x4_t *a2, float *a3)
{
  float32x4_t v3;

  v3 = vcvtq_f32_f16(*this);
  *a2 = vminnmq_f32(vmaxnmq_f32((float32x4_t)vandq_s8((int8x16_t)v3, vorrq_s8((int8x16_t)vcltzq_f32(v3), (int8x16_t)vcgezq_f32(v3))), (float32x4_t)xmmword_1827FE1D0), (float32x4_t)xmmword_1827FE1E0);
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_33::__invoke(MTLGetUnpackFloatFunction::$_33 *this, _OWORD *a2, float *a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = Gamma::kGamma[2 * *(unsigned __int8 *)this + 384];
  DWORD2(v3) = 0;
  HIDWORD(v3) = 1.0;
  *a2 = v3;
  return 1;
}

uint64_t MTLGetUnpackFloatFunction::$_34::__invoke(MTLGetUnpackFloatFunction::$_34 *this, _OWORD *a2, float *a3)
{
  __int128 v3;

  LODWORD(v3) = Gamma::kGamma[2 * *(unsigned __int8 *)this + 384];
  DWORD1(v3) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 1) + 384];
  DWORD2(v3) = 0;
  HIDWORD(v3) = 1.0;
  *a2 = v3;
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_35::__invoke(MTLGetUnpackFloatFunction::$_35 *this, float32x4_t *a2, float *a3)
{
  unsigned int v3;
  int32x4_t v4;

  v3 = *(unsigned __int16 *)this;
  v4.i32[3] = 31;
  v4.i32[0] = v3 >> 11;
  v4.i32[1] = (v3 >> 5) & 0x3F;
  v4.i32[2] = v3 & 0x1F;
  *a2 = vmulq_f32(vcvtq_f32_s32(v4), (float32x4_t)xmmword_1827FE1F0);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_36::__invoke(MTLGetUnpackFloatFunction::$_36 *this, int8x16_t *a2, float *a3, int8x8_t a4)
{
  unsigned __int32 v4;
  uint64_t v5;
  int8x8_t v6;
  int32x4_t v7;
  int8x16_t v8;

  v4 = *(unsigned __int16 *)this;
  a4.i32[0] = v4 >> 6;
  LODWORD(v5) = vand_s8(a4, (int8x8_t)0x1F0000001FLL).u32[0];
  a4.i32[1] = v4;
  v6.i32[0] = v4;
  v6.i32[1] = v4 >> 1;
  *(int8x8_t *)v7.i8 = vand_s8(v6, (int8x8_t)0x1F00000001);
  HIDWORD(v5) = vshr_n_u32(*(uint32x2_t *)&a4, 0xBuLL).i32[1];
  v7.i64[1] = v5;
  v8 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_s32(v7), (float32x4_t)xmmword_1827FE200));
  *a2 = vextq_s8(v8, v8, 8uLL);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_37::__invoke(MTLGetUnpackFloatFunction::$_37 *this, int8x16_t *a2, float *a3, int8x8_t a4)
{
  unsigned __int32 v4;
  uint64_t v5;
  int8x8_t v6;
  int32x4_t v7;
  int8x16_t v8;

  v4 = *(unsigned __int16 *)this;
  a4.i32[0] = v4 >> 8;
  LODWORD(v5) = vand_s8(a4, (int8x8_t)0xF0000000FLL).u32[0];
  a4.i32[1] = v4;
  v6.i32[0] = v4;
  v6.i32[1] = v4 >> 4;
  HIDWORD(v5) = vshr_n_u32(*(uint32x2_t *)&a4, 0xCuLL).i32[1];
  *(int8x8_t *)v7.i8 = vand_s8(v6, (int8x8_t)0xF0000000FLL);
  v7.i64[1] = v5;
  v8 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_s32(v7), (float32x4_t)vdupq_n_s32(0x3D888889u)));
  *a2 = vextq_s8(v8, v8, 8uLL);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_38::__invoke(MTLGetUnpackFloatFunction::$_38 *this, int8x16_t *a2, float *a3)
{
  int32x4_t v3;
  int8x16_t v4;

  v3 = vdupq_n_s32(0x37Eu);
  v3.i32[0] = *(_DWORD *)this & 0x3FF;
  v3.i32[1] = (*(_DWORD *)this >> 10) & 0x3FF;
  v3.i32[2] = (*(_DWORD *)this >> 20) & 0x3FF;
  v4 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vaddq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0xC3C00000)), (float32x4_t)vdupq_n_s32(0x3B008081u)));
  *a2 = vextq_s8(v4, v4, 0xCuLL);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_39::__invoke(MTLGetUnpackFloatFunction::$_39 *this, _OWORD *a2, float *a3)
{
  unint64_t v3;

  v3 = *(unsigned int *)this;
  __asm { FMOV            V0.4S, #1.0 }
  LODWORD(_Q0) = Gamma::kGamma[(v3 >> 20) & 0x3FF];
  DWORD1(_Q0) = Gamma::kGamma[(v3 >> 10) & 0x3FF];
  DWORD2(_Q0) = Gamma::kGamma[v3 & 0x3FF];
  *a2 = _Q0;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_40::__invoke(uint16x4_t *this, int8x16_t *a2, float *a3)
{
  int32x4_t v3;
  int8x16_t v4;

  v3 = (int32x4_t)vmulq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(vshr_n_u16(*this, 6uLL))), (float32x4_t)vdupq_n_s32(0xC3C00000)), (float32x4_t)vdupq_n_s32(0x3B008081u));
  v3.i32[3] = fminf(fmaxf(*(float *)&v3.i32[3], 0.0), 1.0);
  v4 = (int8x16_t)vrev64q_s32(v3);
  *a2 = vextq_s8(v4, v4, 0xCuLL);
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_41::__invoke(uint16x4_t *this, _OWORD *a2, float *a3)
{
  uint32x4_t v3;
  __int128 v4;

  v3 = vmovl_u16(vshr_n_u16(*this, 6uLL));
  LODWORD(v4) = Gamma::kGamma[v3.u32[2]];
  DWORD1(v4) = Gamma::kGamma[v3.u32[1]];
  DWORD2(v4) = Gamma::kGamma[v3.u32[0]];
  HIDWORD(v4) = fminf(fmaxf((float)((float)v3.i32[3] + -384.0) * 0.0019608, 0.0), 1.0);
  *a2 = v4;
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_42::__invoke(MTLGetUnpackFloatFunction::$_42 *this, int8x16_t *a2, float *a3, int8x8_t a4)
{
  unsigned __int32 v4;
  uint64_t v5;
  int8x8_t v6;
  int32x4_t v7;
  int8x16_t v8;

  v4 = *(unsigned __int16 *)this;
  a4.i32[0] = v4 >> 8;
  LODWORD(v5) = vand_s8(a4, (int8x8_t)0xF0000000FLL).u32[0];
  a4.i32[1] = v4;
  v6.i32[0] = v4;
  v6.i32[1] = v4 >> 4;
  HIDWORD(v5) = vshr_n_u32(*(uint32x2_t *)&a4, 0xCuLL).i32[1];
  *(int8x8_t *)v7.i8 = vand_s8(v6, (int8x8_t)0xF0000000FLL);
  v7.i64[1] = v5;
  v8 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_s32(v7), (float32x4_t)vdupq_n_s32(0x3D888889u)));
  *a2 = vextq_s8(v8, v8, 0xCuLL);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_43::__invoke(MTLGetUnpackFloatFunction::$_43 *this, int8x16_t *a2, float *a3, uint8x8_t a4)
{
  int8x16_t v4;

  a4.i32[0] = *(_DWORD *)this;
  v4 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4))), (float32x4_t)vdupq_n_s32(0x3B808081u));
  *a2 = vextq_s8(v4, v4, 4uLL);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_44::__invoke(MTLGetUnpackFloatFunction::$_44 *this, _OWORD *a2, float *a3, double a4, float a5)
{
  __int128 v5;

  LODWORD(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 1) + 384];
  LOBYTE(a5) = *(_BYTE *)this;
  DWORD1(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 2) + 384];
  DWORD2(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 3) + 384];
  *((float *)&v5 + 3) = (float)LODWORD(a5) * 0.0039216;
  *a2 = v5;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_45::__invoke(MTLGetUnpackFloatFunction::$_45 *this, _OWORD *a2, float *a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = *(unsigned __int16 *)this << 16;
  *((_QWORD *)&v3 + 1) = 0x3F80000000000000;
  *a2 = v3;
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_46::__invoke(MTLGetUnpackFloatFunction::$_46 *this, int32x4_t *a2, float *a3, int32x4_t a4)
{
  a4.i32[0] = *(unsigned __int16 *)this;
  a4.i16[2] = *((_WORD *)this + 1);
  a4.i64[1] = 0x3F8000000000;
  *a2 = vshlq_n_s32(a4, 0x10uLL);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_47::__invoke(int16x4_t *this, int32x4_t *a2, float *a3)
{
  *a2 = vshll_n_s16(*this, 0x10uLL);
  return 8;
}

uint64_t MTLGetPackUintFunction::$_0::__invoke(MTLGetPackUintFunction::$_0 *this, unsigned int *a2, void *a3, uint32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *(_BYTE *)a2 = vminq_u32(a4, (uint32x4_t)xmmword_1827FE210).u8[0];
  return 1;
}

uint64_t MTLGetPackUintFunction::$_1::__invoke(MTLGetPackUintFunction::$_1 *this, unsigned int *a2, void *a3, uint32x4_t a4)
{
  unint64_t v4;

  a4.i64[0] = *(_QWORD *)this;
  v4 = vminq_u32(a4, (uint32x4_t)xmmword_1827FE220).u64[0];
  *((_BYTE *)a2 + 1) = BYTE4(v4);
  *(_BYTE *)a2 = v4;
  return 2;
}

uint64_t MTLGetPackUintFunction::$_2::__invoke(uint32x4_t *this, unsigned int *a2, void *a3)
{
  int16x8_t v3;

  v3 = (int16x8_t)vminq_u32(*this, (uint32x4_t)xmmword_1827FE230);
  *(int16x4_t *)v3.i8 = vmovn_s32((int32x4_t)v3);
  *a2 = vmovn_s16(v3).u32[0];
  return 4;
}

uint64_t MTLGetPackUintFunction::$_3::__invoke(uint32x4_t *this, unsigned int *a2, void *a3)
{
  uint32x4_t v3;
  int16x8_t v4;

  v3.i64[0] = 0xFF000000FFLL;
  v3.i64[1] = 0xFF000000FFLL;
  v4 = (int16x8_t)vminq_u32(*this, v3);
  *(int16x4_t *)v4.i8 = vmovn_s32((int32x4_t)v4);
  *a2 = vmovn_s16(v4).u32[0];
  return 4;
}

uint64_t MTLGetPackUintFunction::$_4::__invoke(MTLGetPackUintFunction::$_4 *this, unsigned int *a2, void *a3, uint32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *(_WORD *)a2 = vminq_u32(a4, (uint32x4_t)xmmword_1827FE240).u16[0];
  return 2;
}

uint64_t MTLGetPackUintFunction::$_5::__invoke(MTLGetPackUintFunction::$_5 *this, unsigned int *a2, void *a3, uint32x4_t a4)
{
  unint64_t v4;

  a4.i64[0] = *(_QWORD *)this;
  v4 = vminq_u32(a4, (uint32x4_t)xmmword_1827FE250).u64[0];
  *((_WORD *)a2 + 1) = WORD2(v4);
  *(_WORD *)a2 = v4;
  return 4;
}

uint64_t MTLGetPackUintFunction::$_6::__invoke(uint32x4_t *this, int16x4_t *a2, void *a3)
{
  *a2 = vmovn_s32((int32x4_t)vminq_u32(*this, (uint32x4_t)xmmword_1827FE260));
  return 8;
}

uint64_t MTLGetPackUintFunction::$_7::__invoke(uint32x4_t *this, uint16x4_t *a2, void *a3)
{
  *a2 = vqmovn_u32(*this);
  return 8;
}

uint64_t MTLGetPackUintFunction::$_8::__invoke(MTLGetPackUintFunction::$_8 *this, unsigned int *a2, void *a3)
{
  *a2 = *(_DWORD *)this;
  return 4;
}

uint64_t MTLGetPackUintFunction::$_9::__invoke(MTLGetPackUintFunction::$_9 *this, unsigned int *a2, void *a3)
{
  *(_QWORD *)a2 = *(_QWORD *)this;
  return 8;
}

uint64_t MTLGetPackUintFunction::$_10::__invoke(uint32x4_t *this, uint32x4_t *a2, void *a3)
{
  *a2 = vminq_u32(*this, (uint32x4_t)xmmword_1827FE270);
  return 16;
}

uint64_t MTLGetPackUintFunction::$_11::__invoke(MTLGetPackUintFunction::$_11 *this, unsigned int *a2, void *a3)
{
  *(_OWORD *)a2 = *(_OWORD *)this;
  return 16;
}

uint64_t MTLGetPackUintFunction::$_12::__invoke(uint32x4_t *this, unsigned int *a2, void *a3)
{
  int8x16_t v3;
  __int32 v4;
  __int32 v5;

  v3 = (int8x16_t)vminq_u32(*this, (uint32x4_t)xmmword_1827FE280);
  v4 = v3.i32[1];
  v5 = v3.i32[0];
  *(uint32x2_t *)v3.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL), (uint32x2_t)0x1E00000014);
  *a2 = v5 | (v4 << 10) | v3.i32[0] | v3.i32[1];
  return 4;
}

uint64_t MTLGetUnpackUintFunction::$_0::__invoke(MTLGetUnpackUintFunction::$_0 *this, _OWORD *a2, unsigned int *a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = *(unsigned __int8 *)this;
  *((_QWORD *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 1;
}

uint64_t MTLGetUnpackUintFunction::$_1::__invoke(MTLGetUnpackUintFunction::$_1 *this, _OWORD *a2, unsigned int *a3)
{
  __int128 v3;

  LODWORD(v3) = *(unsigned __int8 *)this;
  DWORD1(v3) = *((unsigned __int8 *)this + 1);
  *((_QWORD *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 2;
}

uint64_t MTLGetUnpackUintFunction::$_2::__invoke(MTLGetUnpackUintFunction::$_2 *this, uint32x4_t *a2, unsigned int *a3, uint8x8_t a4)
{
  uint16x8_t v4;

  a4.i32[0] = *(_DWORD *)this;
  v4 = vmovl_u8(a4);
  v4.i16[3] = 1;
  *a2 = vmovl_u16(*(uint16x4_t *)v4.i8);
  return 4;
}

uint64_t MTLGetUnpackUintFunction::$_3::__invoke(MTLGetUnpackUintFunction::$_3 *this, uint32x4_t *a2, unsigned int *a3, uint8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *a2 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4));
  return 4;
}

uint64_t MTLGetUnpackUintFunction::$_4::__invoke(MTLGetUnpackUintFunction::$_4 *this, _OWORD *a2, unsigned int *a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = *(unsigned __int16 *)this;
  *((_QWORD *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 2;
}

uint64_t MTLGetUnpackUintFunction::$_5::__invoke(MTLGetUnpackUintFunction::$_5 *this, _OWORD *a2, unsigned int *a3)
{
  __int128 v3;

  LODWORD(v3) = *(unsigned __int16 *)this;
  DWORD1(v3) = *((unsigned __int16 *)this + 1);
  *((_QWORD *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 4;
}

uint64_t MTLGetUnpackUintFunction::$_6::__invoke(uint16x4_t *this, uint32x4_t *a2, unsigned int *a3)
{
  uint16x4_t v3;

  v3 = *this;
  v3.i16[3] = 1;
  *a2 = vmovl_u16(v3);
  return 8;
}

uint64_t MTLGetUnpackUintFunction::$_7::__invoke(uint16x4_t *this, uint32x4_t *a2, unsigned int *a3)
{
  *a2 = vmovl_u16(*this);
  return 8;
}

uint64_t MTLGetUnpackUintFunction::$_8::__invoke(MTLGetUnpackUintFunction::$_8 *this, _OWORD *a2, unsigned int *a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = *(unsigned int *)this;
  *((_QWORD *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 4;
}

uint64_t MTLGetUnpackUintFunction::$_9::__invoke(MTLGetUnpackUintFunction::$_9 *this, _OWORD *a2, unsigned int *a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = *(_QWORD *)this;
  *((_QWORD *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 8;
}

uint64_t MTLGetUnpackUintFunction::$_10::__invoke(MTLGetUnpackUintFunction::$_10 *this, _OWORD *a2, unsigned int *a3)
{
  __int128 v3;

  v3 = *(_OWORD *)this;
  HIDWORD(v3) = 1;
  *a2 = v3;
  return 16;
}

uint64_t MTLGetUnpackUintFunction::$_11::__invoke(MTLGetUnpackUintFunction::$_11 *this, _OWORD *a2, unsigned int *a3)
{
  *a2 = *(_OWORD *)this;
  return 16;
}

uint64_t MTLGetUnpackUintFunction::$_12::__invoke(MTLGetUnpackUintFunction::$_12 *this, _OWORD *a2, unsigned int *a3, double a4, int8x8_t a5)
{
  uint64_t v5;
  int8x8_t v6;
  __int128 v7;

  a5.i32[0] = *(_DWORD *)this >> 20;
  LODWORD(v5) = vand_s8(a5, (int8x8_t)0x300000003).u32[0];
  a5.i32[1] = *(_DWORD *)this;
  v6.i32[0] = *(_DWORD *)this;
  v6.i32[1] = *(_DWORD *)this >> 10;
  *(int8x8_t *)&v7 = vand_s8(v6, (int8x8_t)0x300000003);
  HIDWORD(v5) = vshr_n_u32(*(uint32x2_t *)&a5, 0x1EuLL).i32[1];
  *((_QWORD *)&v7 + 1) = v5;
  *a2 = v7;
  return 4;
}

uint64_t MTLGetPackSintFunction::$_0::__invoke(MTLGetPackSintFunction::$_0 *this, int *a2, void *a3, int32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *(_BYTE *)a2 = vminq_s32(vmaxq_s32(a4, (int32x4_t)xmmword_1827FE290), (int32x4_t)xmmword_1827FE2A0).u8[0];
  return 1;
}

uint64_t MTLGetPackSintFunction::$_1::__invoke(MTLGetPackSintFunction::$_1 *this, int *a2, void *a3, int32x4_t a4)
{
  unint64_t v4;

  a4.i64[0] = *(_QWORD *)this;
  v4 = vminq_s32(vmaxq_s32(a4, (int32x4_t)xmmword_1827FE2B0), (int32x4_t)xmmword_1827FE2C0).u64[0];
  *((_BYTE *)a2 + 1) = BYTE4(v4);
  *(_BYTE *)a2 = v4;
  return 2;
}

uint64_t MTLGetPackSintFunction::$_2::__invoke(int32x4_t *this, int *a2, void *a3)
{
  int16x8_t v3;

  v3 = (int16x8_t)vminq_s32(vmaxq_s32(*this, (int32x4_t)xmmword_1827FE2D0), (int32x4_t)xmmword_1827FE2E0);
  *(int16x4_t *)v3.i8 = vmovn_s32((int32x4_t)v3);
  *a2 = vmovn_s16(v3).u32[0];
  return 4;
}

uint64_t MTLGetPackSintFunction::$_3::__invoke(int32x4_t *this, int *a2, void *a3)
{
  int32x4_t v3;
  int16x8_t v4;

  v3.i64[0] = 0x7F0000007FLL;
  v3.i64[1] = 0x7F0000007FLL;
  v4 = (int16x8_t)vminq_s32(vmaxq_s32(*this, v3), v3);
  *(int16x4_t *)v4.i8 = vmovn_s32((int32x4_t)v4);
  *a2 = vmovn_s16(v4).u32[0];
  return 4;
}

uint64_t MTLGetPackSintFunction::$_4::__invoke(MTLGetPackSintFunction::$_4 *this, int *a2, void *a3, int32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *(_WORD *)a2 = vminq_s32(vmaxq_s32(a4, (int32x4_t)xmmword_1827FE2F0), (int32x4_t)xmmword_1827FE300).u16[0];
  return 2;
}

uint64_t MTLGetPackSintFunction::$_5::__invoke(MTLGetPackSintFunction::$_5 *this, int *a2, void *a3, int32x4_t a4)
{
  unint64_t v4;

  a4.i64[0] = *(_QWORD *)this;
  v4 = vminq_s32(vmaxq_s32(a4, (int32x4_t)xmmword_1827FE310), (int32x4_t)xmmword_1827FE320).u64[0];
  *((_WORD *)a2 + 1) = WORD2(v4);
  *(_WORD *)a2 = v4;
  return 4;
}

uint64_t MTLGetPackSintFunction::$_6::__invoke(int32x4_t *this, int16x4_t *a2, void *a3)
{
  *a2 = vmovn_s32(vminq_s32(vmaxq_s32(*this, (int32x4_t)xmmword_1827FE330), (int32x4_t)xmmword_1827FE340));
  return 8;
}

uint64_t MTLGetPackSintFunction::$_7::__invoke(int32x4_t *this, int16x4_t *a2, void *a3)
{
  *a2 = vqmovn_s32(*this);
  return 8;
}

uint64_t MTLGetPackSintFunction::$_8::__invoke(MTLGetPackSintFunction::$_8 *this, int *a2, void *a3)
{
  *a2 = *(_DWORD *)this;
  return 4;
}

uint64_t MTLGetPackSintFunction::$_9::__invoke(MTLGetPackSintFunction::$_9 *this, int *a2, void *a3)
{
  *(_QWORD *)a2 = *(_QWORD *)this;
  return 8;
}

uint64_t MTLGetPackSintFunction::$_10::__invoke(int32x4_t *this, int32x4_t *a2, void *a3)
{
  *a2 = vminq_s32(vmaxq_s32(*this, (int32x4_t)xmmword_1827FE350), (int32x4_t)xmmword_1827FE360);
  return 16;
}

uint64_t MTLGetPackSintFunction::$_11::__invoke(MTLGetPackSintFunction::$_11 *this, int *a2, void *a3)
{
  *(_OWORD *)a2 = *(_OWORD *)this;
  return 16;
}

uint64_t MTLGetUnpackSintFunction::$_0::__invoke(MTLGetUnpackSintFunction::$_0 *this, _OWORD *a2, int *a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = *(char *)this;
  *((_QWORD *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 1;
}

uint64_t MTLGetUnpackSintFunction::$_1::__invoke(MTLGetUnpackSintFunction::$_1 *this, _OWORD *a2, int *a3)
{
  __int128 v3;

  LODWORD(v3) = *(char *)this;
  DWORD1(v3) = *((char *)this + 1);
  *((_QWORD *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 2;
}

uint64_t MTLGetUnpackSintFunction::$_2::__invoke(MTLGetUnpackSintFunction::$_2 *this, int32x4_t *a2, int *a3, uint8x8_t a4)
{
  uint16x8_t v4;

  a4.i32[0] = *(_DWORD *)this;
  v4 = vmovl_u8(a4);
  v4.i16[3] = 1;
  *a2 = vshrq_n_s32(vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL), 0x18uLL);
  return 4;
}

uint64_t MTLGetUnpackSintFunction::$_3::__invoke(MTLGetUnpackSintFunction::$_3 *this, int32x4_t *a2, int *a3, int8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *a2 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a4));
  return 4;
}

uint64_t MTLGetUnpackSintFunction::$_4::__invoke(MTLGetUnpackSintFunction::$_4 *this, _OWORD *a2, int *a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = *(__int16 *)this;
  *((_QWORD *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 2;
}

uint64_t MTLGetUnpackSintFunction::$_5::__invoke(MTLGetUnpackSintFunction::$_5 *this, _OWORD *a2, int *a3)
{
  __int128 v3;

  LODWORD(v3) = *(__int16 *)this;
  DWORD1(v3) = *((__int16 *)this + 1);
  *((_QWORD *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 4;
}

uint64_t MTLGetUnpackSintFunction::$_6::__invoke(int16x4_t *this, int32x4_t *a2, int *a3)
{
  int16x4_t v3;

  v3 = *this;
  v3.i16[3] = 1;
  *a2 = vmovl_s16(v3);
  return 8;
}

uint64_t MTLGetUnpackSintFunction::$_7::__invoke(int16x4_t *this, int32x4_t *a2, int *a3)
{
  *a2 = vmovl_s16(*this);
  return 8;
}

uint64_t MTLGetUnpackSintFunction::$_8::__invoke(MTLGetUnpackSintFunction::$_8 *this, _OWORD *a2, int *a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = *(unsigned int *)this;
  *((_QWORD *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 4;
}

uint64_t MTLGetUnpackSintFunction::$_9::__invoke(MTLGetUnpackSintFunction::$_9 *this, _OWORD *a2, int *a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = *(_QWORD *)this;
  *((_QWORD *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 8;
}

uint64_t MTLGetUnpackSintFunction::$_10::__invoke(MTLGetUnpackSintFunction::$_10 *this, _OWORD *a2, int *a3)
{
  __int128 v3;

  v3 = *(_OWORD *)this;
  HIDWORD(v3) = 1;
  *a2 = v3;
  return 16;
}

uint64_t MTLGetUnpackSintFunction::$_11::__invoke(MTLGetUnpackSintFunction::$_11 *this, _OWORD *a2, int *a3)
{
  *a2 = *(_OWORD *)this;
  return 16;
}

__n64 to_simd(_MTLPackedFloat3 a1, double a2, float a3)
{
  __n64 result;

  result.n64_f32[1] = a3;
  return result;
}

double fast_vector_min(float32x4_t a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vminnmq_f32(a1, a2).u64[0];
  return result;
}

{
  a1.i32[3] = 0;
  a2.i32[3] = 0;
  a1.i64[0] = vminnmq_f32(a1, a2).u64[0];
  return *(double *)a1.i64;
}

double fast_vector_max(float32x4_t a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vmaxnmq_f32(a1, a2).u64[0];
  return result;
}

{
  a1.i32[3] = 0;
  a2.i32[3] = 0;
  a1.i64[0] = vmaxnmq_f32(a1, a2).u64[0];
  return *(double *)a1.i64;
}

double intersect@<D0>(_MTLAxisAlignedBoundingBox *a1@<X0>, _MTLAxisAlignedBoundingBox *a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  double result;

  v3.i64[0] = *(_QWORD *)&a1->min.x;
  v4.i64[0] = *(_QWORD *)&a2->min.x;
  v3.i64[1] = LODWORD(a1->min.z);
  v4.i64[1] = LODWORD(a2->min.z);
  v5 = vmaxnmq_f32(v3, v4);
  v4.i64[0] = *(_QWORD *)&a1->max.x;
  v6.i64[0] = *(_QWORD *)&a2->max.x;
  v4.i64[1] = LODWORD(a1->max.z);
  v6.i64[1] = LODWORD(a2->max.z);
  v7 = (int8x16_t)vminnmq_f32(v4, v6);
  v5.i32[3] = v7.i32[0];
  *(float32x4_t *)a3 = v5;
  *(_QWORD *)&result = vextq_s8(v7, v7, 4uLL).u64[0];
  *(double *)(a3 + 16) = result;
  return result;
}

float getSurfaceArea(_MTLAxisAlignedBoundingBox *a1, float32x4_t a2, float32x4_t a3)
{
  a2.i64[0] = *(_QWORD *)&a1->max.x;
  a2.i32[2] = LODWORD(a1->max.z);
  a3.i64[0] = *(_QWORD *)&a1->min.x;
  a3.i32[2] = LODWORD(a1->min.z);
  _Q0 = vsubq_f32(a2, a3);
  _S2 = _Q0.i32[2];
  __asm { FMLA            S3, S2, V0.S[1] }
  return _S3 + _S3;
}

float getSurfaceArea(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float32x4_t v6;

  a2.i64[0] = *(_QWORD *)(a1 + 12);
  a2.i32[2] = *(_DWORD *)(a1 + 20);
  a3.i64[0] = *(_QWORD *)(a1 + 40);
  a3.i32[2] = *(_DWORD *)(a1 + 48);
  v5 = vaddq_f32(a2, a3);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  a4.i64[0] = *(_QWORD *)a1;
  a4.i32[2] = *(_DWORD *)(a1 + 8);
  a5.i64[0] = *(_QWORD *)(a1 + 28);
  a5.i32[2] = *(_DWORD *)(a1 + 36);
  _Q0 = vsubq_f32(vmulq_f32(v5, v6), vmulq_f32(vaddq_f32(a4, a5), v6));
  v6.f32[0] = *(float *)(a1 + 52) - *(float *)(a1 + 24);
  _S3 = _Q0.i32[2];
  __asm { FMLA            S4, S3, V0.S[1] }
  return (float)(v6.f32[0] + v6.f32[0]) * _S4;
}

float getSurfaceAreaNoInterpolation(uint64_t a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;

  v1.i64[0] = *(_QWORD *)(a1 + 12);
  v2.i64[0] = *(_QWORD *)(a1 + 40);
  v1.i64[1] = *(unsigned int *)(a1 + 20);
  v2.i64[1] = *(unsigned int *)(a1 + 48);
  v3 = vmaxnmq_f32(v1, v2);
  v2.i64[0] = *(_QWORD *)a1;
  v4.i64[0] = *(_QWORD *)(a1 + 28);
  v2.i64[1] = *(unsigned int *)(a1 + 8);
  v4.i64[1] = *(unsigned int *)(a1 + 36);
  _Q0 = vsubq_f32(v3, vminnmq_f32(v2, v4));
  v2.f32[0] = *(float *)(a1 + 52) - *(float *)(a1 + 24);
  _S3 = _Q0.i32[2];
  __asm { FMLA            S4, S3, V0.S[1] }
  return (float)(v2.f32[0] + v2.f32[0]) * _S4;
}

BOOL isDegenerate(_MTLAxisAlignedBoundingBox *a1)
{
  return a1->max.x < a1->min.x || a1->max.y < a1->min.y || a1->max.z < a1->min.z;
}

BOOL isDegenerate(float *a1)
{
  return a1[3] < *a1
      || a1[4] < a1[1]
      || a1[5] < a1[2]
      || a1[10] < a1[7]
      || a1[11] < a1[8]
      || a1[12] < a1[9]
      || a1[13] < a1[6];
}

float evaluateLeafNodeSAH(unsigned int a1, float a2)
{
  return (float)a1 * a2;
}

uint64_t getBatchThreshold(void)
{
  return 0x2000;
}

unint64_t getBatchCountForFragmentCapacity(unint64_t a1, uint64_t a2)
{
  unint64_t v2;

  if (a1 <= 0x2000)
    return 0;
  v2 = (a2 + a1) / (a2 + 1);
  if (v2 >= 2)
    return 2 * v2;
  else
    return 2;
}

unint64_t getNumberOfNodesThatCanBeBatchedForFragmentCapacity(unint64_t a1, unint64_t a2)
{
  if (a1 <= 0x2000)
    return 0;
  if ((a1 + a2 - 1) / a2 <= 1)
    return 1;
  return (a1 + a2 - 1) / a2;
}

uint64_t useResourcesBatched(void *a1, uint64_t a2, void *a3)
{
  uint64_t result;
  uint64_t v7;
  _OWORD v8[4];
  _BYTE v9[128];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  memset(v8, 0, sizeof(v8));
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", v8, v9, 16);
  if (result)
  {
    v7 = result;
    do
    {
      objc_msgSend(a3, "useResources:count:usage:", *((_QWORD *)&v8[0] + 1), v7, a2);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", v8, v9, 16);
      v7 = result;
    }
    while (result);
  }
  return result;
}

unint64_t _MTLClampMaxDepthForDescriptor(MTLBVHDescriptor *a1)
{
  double v2;
  float v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v13;

  if (!-[MTLBVHDescriptor fragmentCount](a1, "fragmentCount"))
    return 1;
  v2 = (double)-[MTLBVHDescriptor fragmentCount](a1, "fragmentCount");
  -[MTLBVHDescriptor splitCapacity](a1, "splitCapacity");
  v4 = vcvtpd_u64_f64(v2 * v3);
  if (+[MTLBVHBuilder useTemporalSplitsForDescriptor:](MTLBVHBuilder, "useTemporalSplitsForDescriptor:", a1))
  {
    v5 = (-[MTLBVHDescriptor primitiveKeyframeCount](a1, "primitiveKeyframeCount") - 1) * v4;
    v4 = v5 * (1 << -[MTLBVHDescriptor maxSubKeyframeTemporalSplits](a1, "maxSubKeyframeTemporalSplits"));
  }
  v6 = v4 + -[MTLBVHDescriptor minPrimitivesPerLeaf](a1, "minPrimitivesPerLeaf") - 1;
  v7 = v6 / -[MTLBVHDescriptor minPrimitivesPerLeaf](a1, "minPrimitivesPerLeaf");
  v8 = -[MTLBVHDescriptor branchingFactor](a1, "branchingFactor");
  v9 = (double)-[MTLBVHDescriptor actualMaxDepth](a1, "actualMaxDepth");
  v10 = log((double)v7);
  if (v8 != 2)
  {
    v13 = v10 + v10;
    if (ceil((v10 + v10) / log((double)-[MTLBVHDescriptor branchingFactor](a1, "branchingFactor")) + 2.0) <= v9)
    {
      v11 = ceil(v13 / log((double)-[MTLBVHDescriptor branchingFactor](a1, "branchingFactor")) + 2.0);
      goto LABEL_11;
    }
LABEL_9:
    v11 = (double)-[MTLBVHDescriptor actualMaxDepth](a1, "actualMaxDepth");
    goto LABEL_11;
  }
  v11 = ceil((v10 / 0.693147181 + 2.0) * 1.35);
  if (v11 > v9)
    goto LABEL_9;
LABEL_11:
  if ((unint64_t)v11 <= 1)
    return 1;
  else
    return (unint64_t)v11;
}

BOOL deviceSupportsArgumentBuffersTier2(void *a1)
{
  return objc_msgSend(a1, "argumentBuffersSupport") != 0;
}

uint64_t getDefaultTGSize()
{
  return 64;
}

uint64_t getDispatchBinsSmallTGSize(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___Z26getDispatchBinsSmallTGSizePU19objcproto9MTLDevice11objc_object_block_invoke;
  block[3] = &unk_1E0FE2880;
  block[4] = a1;
  if (getDispatchBinsSmallTGSize(objc_object  {objcproto9MTLDevice}*)::onceToken != -1)
    dispatch_once(&getDispatchBinsSmallTGSize(objc_object  {objcproto9MTLDevice}*)::onceToken, block);
  if (getDispatchBinsSmallTGSize(objc_object  {objcproto9MTLDevice}*)::threadgroupSize)
    return 32;
  else
    return 64;
}

uint64_t ___Z26getDispatchBinsSmallTGSizePU19objcproto9MTLDevice11objc_object_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "supportsFamily:", 1009);
  if ((_DWORD)result)
    getDispatchBinsSmallTGSize(objc_object  {objcproto9MTLDevice}*)::threadgroupSize = 1;
  return result;
}

uint64_t getBinningTGSize(void *a1)
{
  if ((objc_msgSend((id)objc_msgSend(a1, "name"), "containsString:", CFSTR("Apple")) & 1) != 0)
  {
    getBinningTGSize(objc_object  {objcproto9MTLDevice}*)::threadgroupSize = 1;
    return 512;
  }
  else if (getBinningTGSize(objc_object  {objcproto9MTLDevice}*)::threadgroupSize)
  {
    return 512;
  }
  else
  {
    return 64;
  }
}

uint64_t getSpatialBinningTGSize(void *a1)
{
  if ((objc_msgSend((id)objc_msgSend(a1, "name"), "containsString:", CFSTR("Apple")) & 1) != 0)
  {
    getSpatialBinningTGSize(objc_object  {objcproto9MTLDevice}*)::threadgroupSize = 1;
    return 256;
  }
  else if (getSpatialBinningTGSize(objc_object  {objcproto9MTLDevice}*)::threadgroupSize)
  {
    return 256;
  }
  else
  {
    return 64;
  }
}

uint64_t getSplitTGSize(void *a1)
{
  if (objc_msgSend((id)objc_msgSend(a1, "name"), "containsString:", CFSTR("Apple")))
    return 256;
  else
    return 64;
}

uint64_t getBatchSize()
{
  return 512;
}

uint64_t newPipeline(void *a1, int *a2, uint64_t a3, int a4)
{
  MTLFunctionConstantValues *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  MTLComputePipelineDescriptor *v11;
  MTLFunctionDescriptor *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char v27;
  BOOL v28;
  char v29;
  BOOL v30;
  int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  char v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  int v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  int v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;

  v57 = a4;
  v7 = objc_alloc_init(MTLFunctionConstantValues);
  v8 = *(_QWORD *)(a2 + 1);
  v9 = *a2;
  v55 = (*a2 >> 10) & 0xF;
  v56 = 1 << ((v8 >> 13) & 0xF);
  v53 = (v8 >> 17);
  v54 = (v9 >> 14);
  v52 = (v9 & 0x4000000) != 0;
  v51 = (v9 & 0x8000000) != 0;
  v50 = (v8 & 0x10) != 0;
  v49 = (v9 & 0x10000000) != 0;
  v47 = (v9 >> 8) & 3;
  v48 = v8 & 0xF;
  v46 = (v8 >> 7) & 0x3F;
  v45 = (v8 & 0x20) != 0;
  v44 = (v8 & 0x2000000) != 0;
  v43 = (v8 & 0x4000000) != 0;
  v42 = (v8 & 0x40) != 0;
  v41 = (v8 & 0x8000000) != 0;
  v40 = a2[9];
  v39 = (v8 & 0x10000000) != 0;
  v38 = (v8 & 0x20000000) != 0;
  v37 = (v8 & 0x40000000) != 0;
  v36 = (v8 & 0x80000000) != 0;
  v35 = BYTE4(v8) & 1;
  v34 = (v8 & 0x200000000) != 0;
  v33 = (v8 & 0x400000000) != 0;
  v31 = (v8 >> 35) & 0xF;
  v32 = (v9 >> 22) & 0xF;
  v30 = (v8 & 0x8000000000) != 0;
  v29 = BYTE5(v8) & 1;
  v28 = (v8 & 0x20000000000) != 0;
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v55, 33, 0);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v54, 33, 1);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v53, 33, 19);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v44, 53, 20);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v43, 53, 21);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", a2 + 6, 3, 2);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", a2 + 7, 3, 3);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", a2 + 8, 3, 4);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", a2 + 4, 33, 5);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v32, 33, 6);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", a2 + 5, 33, 7);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v52, 53, 8);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v51, 53, 9);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v49, 53, 12);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v47, 33, 10);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v48, 33, 13);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v56, 33, 11);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v50, 53, 14);
  v27 = ((a2[1] & 0x10) != 0) | ((*a2 & 0x4000000u) >> 26);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v27, 53, 15);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v46, 33, 16);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v57, 33, 17);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v45, 53, 18);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v42, 53, 22);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v41, 53, 23);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v40, 3, 24);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v39, 53, 25);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v38, 53, 26);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v37, 53, 27);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v36, 49, 28);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v35, 53, 29);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v34, 53, 30);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v33, 53, 31);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v31, 33, 32);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v30, 53, 33);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v29, 53, 34);
  -[MTLFunctionConstantValues setConstantValue:type:atIndex:](v7, "setConstantValue:type:atIndex:", &v28, 53, 35);
  v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)a3);
  if (*(_BYTE *)(a3 + 8) && (a2[1] & 0x10) != 0)
  {
    v25 = v10;
    v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"));
  }
  if (*(_BYTE *)(a3 + 9))
  {
    v25 = v10;
    v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%llu"));
  }
  v11 = objc_alloc_init(MTLComputePipelineDescriptor);
  v26 = 0;
  v12 = objc_alloc_init(MTLFunctionDescriptor);
  -[MTLFunctionDescriptor setName:](v12, "setName:", v10);
  -[MTLFunctionDescriptor setConstantValues:](v12, "setConstantValues:", v7);
  -[MTLFunctionDescriptor setOptions:](v12, "setOptions:", -[MTLFunctionDescriptor options](v12, "options") | 0x10);
  v13 = (void *)objc_msgSend(a1, "newFunctionWithDescriptor:error:", v12, &v26);
  if (!v13)
  {
    v20 = objc_msgSend(v26, "description");
    MTLReportFailure(0, "newPipeline", 1708, (uint64_t)CFSTR("Failed to specialize function: %@"), v21, v22, v23, v24, v20);
  }

  -[MTLComputePipelineDescriptor setComputeFunction:](v11, "setComputeFunction:", v13);
  -[MTLComputePipelineDescriptor setThreadGroupSizeIsMultipleOfThreadExecutionWidth:](v11, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", 1);
  -[MTLComputePipelineDescriptor setMaxTotalThreadsPerThreadgroup:](v11, "setMaxTotalThreadsPerThreadgroup:", v56);
  -[MTLComputePipelineDescriptor setInternalPipeline:](v11, "setInternalPipeline:", 1);

  v18 = objc_msgSend((id)objc_msgSend(a1, "device"), "newComputePipelineStateWithDescriptor:options:reflection:error:", v11, 0, 0, &v26);
  if (!v18)
    MTLReportFailure(0, "newPipeline", 1742, (uint64_t)CFSTR("Failed to create compute pipeline state"), v14, v15, v16, v17, v25);

  return v18;
}

uint64_t getTmpFragmentBinBufferSize(uint64_t a1, MTLBVHDescriptor *a2)
{
  if (-[MTLBVHDescriptor maxSubKeyframeTemporalSplits](a2, "maxSubKeyframeTemporalSplits"))
    return 2 * a1;
  else
    return 0;
}

uint64_t setResourceBufferContents(uint64_t result, int a2, unsigned int a3, uint64_t a4, void *a5, uint64_t a6)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;
  uint64_t v82;
  uint64_t v83;

  if (a4)
  {
    v6 = a5;
    v7 = result;
    v75 = 0;
    v8 = 0;
    v82 = 16 * a3;
    v83 = 8 * a3;
    v76 = 136 * a4;
    v9 = result + 136 * a4;
    v10 = result + 136 * a4 + v83;
    v11 = v9;
    while (1)
    {
      v12 = (void *)objc_msgSend(v6, "objectAtIndexedSubscript:", v8);
      objc_msgSend(v6, "objectAtIndexedSubscript:", v8);
      v13 = (void *)objc_opt_class();
      if (objc_msgSend(v13, "isSubclassOfClass:", objc_opt_class()))
        break;
      objc_msgSend(v6, "objectAtIndexedSubscript:", v8);
      v17 = (void *)objc_opt_class();
      if (objc_msgSend(v17, "isSubclassOfClass:", objc_opt_class()))
      {
        if (a2)
        {
          if (a3)
          {
            v18 = 0;
            do
            {
              v19 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "boundingBoxBuffers"), "objectAtIndexedSubscript:", v18), "buffer"), "gpuAddress");
              *(_QWORD *)(v9 + 8 * v18) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "boundingBoxBuffers"), "objectAtIndexedSubscript:", v18), "offset")+ v19;
              ++v18;
            }
            while (a3 != v18);
          }
          v20 = v76 + v83 * v8 + a6;
          v6 = a5;
        }
        else
        {
          v44 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "boundingBoxBuffers"), "objectAtIndexedSubscript:", 0), "buffer"), "gpuAddress");
          v20 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "boundingBoxBuffers"), "objectAtIndexedSubscript:", 0), "offset")+ v44;
        }
        v45 = v7 + 136 * v8;
        *(_QWORD *)(v45 + 16) = v20;
        *(_DWORD *)(v45 + 48) = objc_msgSend(v12, "boundingBoxStride");
        goto LABEL_37;
      }
      objc_msgSend(v6, "objectAtIndexedSubscript:", v8);
      v34 = (void *)objc_opt_class();
      if (objc_msgSend(v34, "isSubclassOfClass:", objc_opt_class()))
      {
        if (a2)
        {
          v35 = v76 + v82 * v8;
          if (a3)
          {
            v73 = v76 + v82 * v8;
            v36 = 0;
            do
            {
              v37 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "controlPointBuffers", v73), "objectAtIndexedSubscript:", v36), "buffer"), "gpuAddress");
              *(_QWORD *)(v11 + 8 * v36) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "controlPointBuffers"), "objectAtIndexedSubscript:", v36), "offset")+ v37;
              ++v36;
            }
            while (a3 != v36);
            v38 = v7 + 136 * v8;
            *(_QWORD *)(v38 + 24) = v73 + a6;
            v74 = (uint64_t *)(v38 + 24);
            v39 = 0;
            do
            {
              v40 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "radiusBuffers", v74), "objectAtIndexedSubscript:", v39), "buffer"), "gpuAddress");
              *(_QWORD *)(v10 + 8 * v39) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "radiusBuffers"), "objectAtIndexedSubscript:", v39), "offset")+ v40;
              ++v39;
            }
            while (a3 != v39);
            v41 = *v74;
          }
          else
          {
            v41 = v35 + a6;
            *(_QWORD *)(v7 + 136 * v8 + 24) = v35 + a6;
          }
          v50 = v41 + v83;
        }
        else
        {
          v48 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "controlPointBuffers"), "objectAtIndexedSubscript:", 0), "buffer"), "gpuAddress");
          *(_QWORD *)(v7 + 136 * v8 + 24) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "controlPointBuffers"), "objectAtIndexedSubscript:", 0), "offset")+ v48;
          v49 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "radiusBuffers"), "objectAtIndexedSubscript:", 0), "buffer"), "gpuAddress");
          v50 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "radiusBuffers"), "objectAtIndexedSubscript:", 0), "offset")+ v49;
        }
        v51 = v7 + 136 * v8;
        *(_QWORD *)(v51 + 32) = v50;
        v52 = objc_msgSend((id)objc_msgSend(v12, "indexBuffer"), "gpuAddress");
        *(_QWORD *)(v51 + 8) = objc_msgSend(v12, "indexBufferOffset") + v52;
        *(_DWORD *)(v51 + 60) = objc_msgSend(v12, "controlPointFormat");
        v53 = (unsigned int *)(v51 + 60);
        *(_DWORD *)(v51 + 64) = objc_msgSend(v12, "radiusFormat");
        v54 = (unsigned int *)(v51 + 64);
        v55 = objc_msgSend(v12, "controlPointStride");
        if (!v55)
          LODWORD(v55) = MTLAttributeFormatSize((MTLAttributeFormat)*v53, v56, v57, v58, v59, v60, v61, v62);
        *(_DWORD *)(v7 + 136 * v8 + 52) = v55;
        v63 = objc_msgSend(v12, "radiusStride");
        if (!v63)
          LODWORD(v63) = MTLAttributeFormatSize((MTLAttributeFormat)*v54, v64, v65, v66, v67, v68, v69, v70);
        v71 = (_DWORD *)(v7 + 136 * v8);
        v71[14] = v63;
        v71[17] = v75;
        v71[18] = objc_msgSend(v12, "curveBasis");
        v71[19] = objc_msgSend(v12, "segmentControlPointCount");
        v71[20] = objc_msgSend(v12, "curveType");
        v71[21] = objc_msgSend(v12, "curveEndCaps");
        if (objc_msgSend(v12, "indexType"))
          v72 = 4;
        else
          v72 = 2;
        v71[11] = v72;
        v75 += objc_msgSend(v12, "controlPointCount");
        goto LABEL_34;
      }
LABEL_37:
      v46 = objc_msgSend((id)objc_msgSend(v12, "primitiveDataBuffer"), "gpuAddress");
      v47 = v7 + 136 * v8;
      *(_QWORD *)(v47 + 112) = objc_msgSend(v12, "primitiveDataBufferOffset") + v46;
      *(_DWORD *)(v47 + 120) = objc_msgSend(v12, "primitiveDataStride");
      *(_DWORD *)(v47 + 124) = objc_msgSend(v12, "primitiveDataElementSize");
      result = objc_msgSend(v12, "primitiveCount");
      *(_QWORD *)(v47 + 128) = result;
      ++v8;
      v11 += v82;
      v10 += v82;
      v9 += v83;
      if (v8 == a4)
        return result;
    }
    if (a2)
    {
      if (a3)
      {
        v14 = 0;
        do
        {
          v15 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "vertexBuffers"), "objectAtIndexedSubscript:", v14), "buffer"), "gpuAddress");
          *(_QWORD *)(v9 + 8 * v14) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "vertexBuffers"), "objectAtIndexedSubscript:", v14), "offset")+ v15;
          ++v14;
        }
        while (a3 != v14);
      }
      v16 = v76 + v83 * v8 + a6;
    }
    else
    {
      v21 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "vertexBuffers"), "objectAtIndexedSubscript:", 0), "buffer"), "gpuAddress");
      v16 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "vertexBuffers"), "objectAtIndexedSubscript:", 0), "offset")+ v21;
    }
    *(_QWORD *)(v7 + 136 * v8) = v16;
    if (objc_msgSend(v12, "indexBuffer"))
    {
      v22 = objc_msgSend((id)objc_msgSend(v12, "indexBuffer"), "gpuAddress");
      *(_QWORD *)(v7 + 136 * v8 + 8) = objc_msgSend(v12, "indexBufferOffset") + v22;
    }
    v23 = objc_msgSend(v12, "vertexFormat");
    v24 = objc_msgSend(v12, "vertexStride");
    v32 = v24;
    if (!v24)
      v32 = MTLAttributeFormatSize((MTLAttributeFormat)v23, v25, v26, v27, v28, v29, v30, v31);
    if (objc_msgSend(v12, "indexBuffer"))
    {
      if (objc_msgSend(v12, "indexType"))
        v33 = 4;
      else
        v33 = 2;
    }
    else
    {
      v33 = 0;
    }
    v42 = v7 + 136 * v8;
    *(_DWORD *)(v42 + 40) = v32;
    *(_DWORD *)(v42 + 44) = v33;
    *(_DWORD *)(v42 + 88) = v23;
    v43 = objc_msgSend((id)objc_msgSend(v12, "transformationMatrixBuffer"), "gpuAddress");
    *(_QWORD *)(v42 + 96) = objc_msgSend(v12, "transformationMatrixBufferOffset") + v43;
    *(_DWORD *)(v42 + 104) = objc_msgSend(v12, "transformationMatrixLayout") == 1;
LABEL_34:
    v6 = a5;
    goto LABEL_37;
  }
  return result;
}

uint64_t computeResourceBufferLength(int a1, unsigned int *a2, uint64_t a3, void *a4)
{
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v15;
  unsigned int v16;

  *a2 = 1;
  if (a1)
  {
    objc_msgSend(a4, "objectAtIndexedSubscript:", 0);
    v7 = (void *)objc_opt_class();
    LODWORD(v7) = objc_msgSend(v7, "isSubclassOfClass:", objc_opt_class());
    v8 = (void *)objc_msgSend(a4, "objectAtIndexedSubscript:", 0);
    if ((_DWORD)v7)
    {
      v9 = (void *)objc_msgSend(v8, "vertexBuffers");
    }
    else
    {
      v11 = (void *)objc_opt_class();
      LODWORD(v11) = objc_msgSend(v11, "isSubclassOfClass:", objc_opt_class());
      v12 = (void *)objc_msgSend(a4, "objectAtIndexedSubscript:", 0);
      if (!(_DWORD)v11)
      {
        v15 = (void *)objc_opt_class();
        if (objc_msgSend(v15, "isSubclassOfClass:", objc_opt_class()))
        {
          v16 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a4, "objectAtIndexedSubscript:", 0), "controlPointBuffers"), "count");
          *a2 = v16;
          v13 = 2 * v16;
        }
        else
        {
          v13 = 1;
        }
        goto LABEL_8;
      }
      v9 = (void *)objc_msgSend(v12, "boundingBoxBuffers");
    }
    v13 = objc_msgSend(v9, "count");
    *a2 = v13;
LABEL_8:
    v10 = 8 * v13 + 136;
    return v10 * a3;
  }
  v10 = 136;
  return v10 * a3;
}

float makeSortable(float result)
{
  if (result < 0.0)
    LODWORD(result) ^= 0x7FFFFFFFu;
  return result;
}

int8x8_t makeSortable(int32x2_t a1)
{
  return vbsl_s8((int8x8_t)vcltz_s32(a1), veor_s8((int8x8_t)a1, (int8x8_t)0x8000000080000000), (int8x8_t)a1);
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, unsigned __int8 a2, void *a3)
{
  _OWORD v5[2];
  uint64_t v6;
  int v7;

  v7 = 3;
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  PipelineCache<PipelineKey>::getPipelineKey((unsigned __int8 *)a1, a2, a3, *(_QWORD *)(a1 + 40), &v7, (uint64_t)v5);
  return PipelineCache<PipelineKey>::getPipeline(a1, (uint64_t)v5, 0);
}

void sub_1826C7D90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(_QWORD *)(v1 - 168) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, unsigned __int8 a2, void *a3, _DWORD *a4, _QWORD *a5)
{
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  PipelineCache<PipelineKey>::getPipelineKey((unsigned __int8 *)a1, a2, a3, *(_QWORD *)(a1 + 40), a4, (uint64_t)v8);
  return PipelineCache<PipelineKey>::getPipeline(a1, (uint64_t)v8, a5);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void PipelineCache<PipelineKey>::getPipelineKey(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, void *a3@<X2>, unint64_t a4@<X3>, _DWORD *a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)(a6 + 32) = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  if (a3)
  {
    objc_msgSend(a3, "cachedPipelineKey");
    v11 = *(_DWORD *)a6 & 0xFFFFFF00;
    v12 = *(_QWORD *)(a6 + 4) & 0xFFFFFE7879FFFFFFLL;
  }
  else
  {
    v12 = 0;
    v11 = 0;
    *(_OWORD *)(a6 + 24) = 0uLL;
    *(_OWORD *)(a6 + 8) = 0uLL;
  }
  *(_DWORD *)a6 = v11 | a2;
  v13 = v12 | (*a5 << 25) & 0x2000000 | (*a5 << 25) & 0x4000000 | (unint64_t)((*a5 << 29) & 0x80000000) | ((unint64_t)a1[80] << 32) | ((unint64_t)a1[81] << 33) | ((unint64_t)a1[82] << 34) | ((unint64_t)((*a5 >> 3) & 1) << 39) | ((unint64_t)((*a5 >> 4) & 1) << 40);
  if (a4)
    v13 = v13 & 0xFFFFFFFFFFFE1FFFLL | ((log2((double)a4) & 0xF) << 13);
  *(_QWORD *)(a6 + 4) = v13;
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  __int128 v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;

  v4 = (os_unfair_lock_s *)(a1 + 84);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 84));
  v5 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v5;
  v12 = *(_QWORD *)(a2 + 32);
  v6 = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::find<PipelineCache<PipelineKey>::HashKey>((_QWORD *)a1, (int *)v11);
  if (v6)
  {
    v7 = v6;
    os_unfair_lock_unlock(v4);
    return (void *)v7[7];
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 72);
    if (!v9)
      std::__throw_bad_function_call[abi:ne180100]();
    v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, a2);
    PipelineCache<PipelineKey>::addPipeline(a1, a2, v8);
    os_unfair_lock_unlock(v4);
  }
  return v8;
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, unsigned __int8 a2, void *a3, int a4, int a5)
{
  int v6;
  _OWORD v8[2];
  uint64_t v9;
  int v10;

  if (a5)
    v6 = 2;
  else
    v6 = 0;
  v10 = v6 | a4;
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  PipelineCache<PipelineKey>::getPipelineKey((unsigned __int8 *)a1, a2, a3, *(_QWORD *)(a1 + 40), &v10, (uint64_t)v8);
  return PipelineCache<PipelineKey>::getPipeline(a1, (uint64_t)v8, 0);
}

void *PipelineCache<PipelineKey>::getPipeline(unsigned __int8 *a1, unsigned __int8 a2, void *a3, unint64_t a4)
{
  _OWORD v6[2];
  uint64_t v7;
  int v8;

  v8 = 3;
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  PipelineCache<PipelineKey>::getPipelineKey(a1, a2, a3, a4, &v8, (uint64_t)v6);
  return PipelineCache<PipelineKey>::getPipeline((uint64_t)a1, (uint64_t)v6, 0);
}

uint64_t getMTLSWBVHType(MTLAccelerationStructureDescriptor *a1)
{
  void *v1;
  void *v3;

  v1 = (void *)objc_opt_class();
  if ((objc_msgSend(v1, "isSubclassOfClass:", objc_opt_class()) & 1) != 0)
    return 1;
  v3 = (void *)objc_opt_class();
  return objc_msgSend(v3, "isSubclassOfClass:", objc_opt_class());
}

BOOL getMTLSWBVHMotion(MTLAccelerationStructureDescriptor *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = (void *)objc_opt_class();
  if (objc_msgSend(v2, "isSubclassOfClass:", objc_opt_class()))
  {
    v3 = -[MTLAccelerationStructureDescriptor instanceDescriptorType](a1, "instanceDescriptorType");
    v4 = -[MTLAccelerationStructureDescriptor instanceDescriptorType](a1, "instanceDescriptorType");
    return v3 == 2 || v4 == 4;
  }
  else
  {
    v6 = (void *)objc_opt_class();
    if (!objc_msgSend(v6, "isSubclassOfClass:", objc_opt_class()))
      return (unint64_t)-[MTLAccelerationStructureDescriptor motionKeyframeCount](a1, "motionKeyframeCount") > 1;
    return -[MTLAccelerationStructureDescriptor instanceDescriptorType](a1, "instanceDescriptorType") == 4;
  }
}

uint64_t getMTLSWBVHPrimitiveType(MTLAccelerationStructureDescriptor *a1)
{
  void *v2;
  uint64_t result;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)objc_opt_class();
  if (objc_msgSend(v2, "isSubclassOfClass:", objc_opt_class()))
  {
    result = objc_msgSend((id)-[MTLAccelerationStructureDescriptor geometryDescriptors](a1, "geometryDescriptors"), "count");
    if (!result)
      return result;
    objc_msgSend((id)-[MTLAccelerationStructureDescriptor geometryDescriptors](a1, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
    v4 = (void *)objc_opt_class();
    if ((objc_msgSend(v4, "isSubclassOfClass:", objc_opt_class()) & 1) == 0)
    {
      v5 = (void *)objc_opt_class();
      if ((objc_msgSend(v5, "isSubclassOfClass:", objc_opt_class()) & 1) == 0)
      {
        v6 = (void *)objc_opt_class();
        if ((objc_msgSend(v6, "isSubclassOfClass:", objc_opt_class()) & 1) != 0)
          return 1;
        v7 = (void *)objc_opt_class();
        if ((objc_msgSend(v7, "isSubclassOfClass:", objc_opt_class()) & 1) != 0)
          return 1;
        v8 = (void *)objc_opt_class();
        if ((objc_msgSend(v8, "isSubclassOfClass:", objc_opt_class()) & 1) != 0)
          return 2;
        v9 = (void *)objc_opt_class();
        if ((objc_msgSend(v9, "isSubclassOfClass:", objc_opt_class()) & 1) != 0)
          return 2;
      }
    }
  }
  return 0;
}

MTLBVHDescriptor *MTLBVHDescriptorForMTLAccelerationStructureDescriptor(void *a1)
{
  BOOL v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  MTLBVHPolygonGeometryDescriptor *v15;
  MTLMotionKeyframeData *v16;
  uint64_t v17;
  MTLAttributeFormat v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  double v35;
  MTLBVHBoundingBoxGeometryDescriptor *v36;
  uint64_t v37;
  MTLBVHBoundingBoxGeometryDescriptor *v38;
  MTLBVHDescriptor *v39;
  void *v40;
  double v41;
  MTLBVHBoundingBoxGeometryDescriptor *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t j;
  void *v50;
  MTLBVHCurveGeometryDescriptor *v51;
  MTLMotionKeyframeData *v52;
  MTLMotionKeyframeData *v53;
  uint64_t v54;
  MTLAttributeFormat v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  MTLAttributeFormat v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  MTLBVHCurveGeometryDescriptor *v88;
  uint64_t v89;
  MTLMotionKeyframeData *v90;
  MTLMotionKeyframeData *v91;
  uint64_t v92;
  MTLAttributeFormat v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  MTLAttributeFormat v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  void *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t k;
  void *v125;
  uint64_t v126;
  MTLBVHPolygonGeometryDescriptor *v127;
  uint64_t v128;
  MTLMotionKeyframeData *v129;
  uint64_t v130;
  MTLAttributeFormat v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t m;
  void *v153;
  uint64_t v154;
  MTLBVHBoundingBoxGeometryDescriptor *v155;
  uint64_t v156;
  MTLMotionKeyframeData *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t n;
  void *v171;
  MTLBVHBoundingBoxGeometryDescriptor *v172;
  MTLMotionKeyframeData *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  id obj;
  id obja;
  MTLBVHDescriptor *v185;
  uint64_t v186;
  void *v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  MTLMotionKeyframeData *v212;
  MTLMotionKeyframeData *v213;
  _BYTE v214[128];
  _BYTE v215[128];
  _BYTE v216[128];
  _BYTE v217[128];
  _BYTE v218[128];
  _BYTE v219[128];
  uint64_t v220;

  v220 = *MEMORY[0x1E0C80C00];
  v185 = objc_alloc_init(MTLBVHDescriptor);
  -[MTLBVHDescriptor setPrimitiveKeyframeCount:](v185, "setPrimitiveKeyframeCount:", 1);
  -[MTLBVHDescriptor setBranchingFactor:](v185, "setBranchingFactor:", 2);
  -[MTLBVHDescriptor setMaxDepth:](v185, "setMaxDepth:", 32);
  -[MTLBVHDescriptor setUseFastBuild:](v185, "setUseFastBuild:", ((unint64_t)objc_msgSend(a1, "usage") >> 1) & 1);
  v2 = !-[MTLBVHDescriptor useFastBuild](v185, "useFastBuild") && (objc_msgSend(a1, "usage") & 1) == 0;
  v3 = (void *)objc_opt_class();
  if (!objc_msgSend(v3, "isSubclassOfClass:", objc_opt_class()))
  {
    v34 = (void *)objc_opt_class();
    if (objc_msgSend(v34, "isSubclassOfClass:", objc_opt_class()))
    {
      -[MTLBVHDescriptor setMaxPrimitivesPerLeaf:](v185, "setMaxPrimitivesPerLeaf:", 1);
      -[MTLBVHDescriptor setMinPrimitivesPerLeaf:](v185, "setMinPrimitivesPerLeaf:", 1);
      -[MTLBVHDescriptor setSplitHeuristic:](v185, "setSplitHeuristic:", 2);
      LODWORD(v35) = 1.0;
      -[MTLBVHDescriptor setSplitCapacity:](v185, "setSplitCapacity:", v35);
      -[MTLBVHDescriptor setDeterministic:](v185, "setDeterministic:", ((unint64_t)objc_msgSend(a1, "usage") >> 3) & 1);
      if (objc_msgSend(a1, "instanceDescriptorType") == 2 || objc_msgSend(a1, "instanceDescriptorType") == 4)
        -[MTLBVHDescriptor setMotion:](v185, "setMotion:", 1);
      v36 = objc_alloc_init(MTLBVHBoundingBoxGeometryDescriptor);
      v213 = objc_alloc_init(MTLMotionKeyframeData);
      -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxBuffers:](v36, "setBoundingBoxBuffers:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v213, 1));
      if (-[MTLBVHDescriptor motion](v185, "motion"))
        v37 = 56;
      else
        v37 = 24;
      -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxStride:](v36, "setBoundingBoxStride:", v37);
      -[MTLBVHGeometryDescriptor setPrimitiveCount:](v36, "setPrimitiveCount:", objc_msgSend(a1, "instanceCount"));
      -[MTLBVHDescriptor setGeometryDescriptors:](v185, "setGeometryDescriptors:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v36));
      v38 = v36;
      v39 = v185;
    }
    else
    {
      v40 = (void *)objc_opt_class();
      if (!objc_msgSend(v40, "isSubclassOfClass:", objc_opt_class()))
      {
        v44 = 0;
        v11 = 0;
        v39 = v185;
        goto LABEL_146;
      }
      v39 = v185;
      -[MTLBVHDescriptor setMaxPrimitivesPerLeaf:](v185, "setMaxPrimitivesPerLeaf:", 1);
      -[MTLBVHDescriptor setMinPrimitivesPerLeaf:](v185, "setMinPrimitivesPerLeaf:", 1);
      -[MTLBVHDescriptor setSplitHeuristic:](v185, "setSplitHeuristic:", 2);
      LODWORD(v41) = 1.0;
      -[MTLBVHDescriptor setSplitCapacity:](v185, "setSplitCapacity:", v41);
      -[MTLBVHDescriptor setMotion:](v185, "setMotion:", objc_msgSend(a1, "instanceDescriptorType") == 4);
      v42 = objc_alloc_init(MTLBVHBoundingBoxGeometryDescriptor);
      v212 = objc_alloc_init(MTLMotionKeyframeData);
      -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxBuffers:](v42, "setBoundingBoxBuffers:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v212, 1));
      if (-[MTLBVHDescriptor motion](v185, "motion"))
        v43 = 56;
      else
        v43 = 24;
      -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxStride:](v42, "setBoundingBoxStride:", v43);
      -[MTLBVHGeometryDescriptor setPrimitiveCount:](v42, "setPrimitiveCount:", objc_msgSend(a1, "maxInstanceCount"));
      -[MTLBVHDescriptor setGeometryDescriptors:](v185, "setGeometryDescriptors:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v42));
      v38 = v42;
    }
    v11 = -[MTLBVHGeometryDescriptor primitiveCount](v38, "primitiveCount");
    v44 = 0;
LABEL_146:
    -[MTLBVHDescriptor setFragmentCount:](v39, "setFragmentCount:", v11);
    -[MTLBVHDescriptor setPrimitiveDataSize:](v39, "setPrimitiveDataSize:", v44);
    return v185;
  }
  -[MTLBVHDescriptor setMinPrimitivesPerLeaf:](v185, "setMinPrimitivesPerLeaf:", 2);
  -[MTLBVHDescriptor setMaxPrimitivesPerLeaf:](v185, "setMaxPrimitivesPerLeaf:", 32);
  -[MTLBVHDescriptor setPrimitiveKeyframeCount:](v185, "setPrimitiveKeyframeCount:", objc_msgSend(a1, "motionKeyframeCount"));
  objc_msgSend(a1, "motionStartTime");
  -[MTLBVHDescriptor setPrimitiveMotionStartTime:](v185, "setPrimitiveMotionStartTime:");
  objc_msgSend(a1, "motionEndTime");
  -[MTLBVHDescriptor setPrimitiveMotionEndTime:](v185, "setPrimitiveMotionEndTime:");
  -[MTLBVHDescriptor setMotion:](v185, "setMotion:", -[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount") > 1);
  v4 = (void *)objc_msgSend(a1, "geometryDescriptors");
  v5 = objc_msgSend((id)objc_msgSend(a1, "geometryDescriptors"), "count");
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v4, "objectAtIndexedSubscript:", 0);
    v187 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v6);
    -[MTLBVHDescriptor setGeometryDescriptors:](v185, "setGeometryDescriptors:");
    v7 = (void *)objc_opt_class();
    if (objc_msgSend(v7, "isSubclassOfClass:", objc_opt_class()))
    {
      v210 = 0u;
      v211 = 0u;
      v208 = 0u;
      v209 = 0u;
      v8 = (void *)objc_msgSend(a1, "geometryDescriptors");
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v208, v219, 16);
      if (v9)
      {
        v10 = v9;
        v186 = 0;
        v11 = 0;
        v12 = *(_QWORD *)v209;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v209 != v12)
              objc_enumerationMutation(v8);
            v14 = *(void **)(*((_QWORD *)&v208 + 1) + 8 * i);
            if (v2
              && !objc_msgSend(*(id *)(*((_QWORD *)&v208 + 1) + 8 * i), "allowDuplicateIntersectionFunctionInvocation"))
            {
              v2 = 0;
            }
            if (-[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount") != 1)
            {
              v29 = -[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount");
              MTLReportFailure(0, "MTLBVHDescriptorForMTLAccelerationStructureDescriptor", 9387, (uint64_t)CFSTR("Motion keyframe count mismatch in MTLPrimitiveAccelerationStructureDescriptor (MTLPrimitiveAccelerationStructureDescriptor has %lu keyframes and MTLAccelerationStructureTriangleGeometryDescriptor which can have only one keyframe)."), v30, v31, v32, v33, v29);
            }
            v15 = objc_alloc_init(MTLBVHPolygonGeometryDescriptor);
            -[MTLBVHPolygonGeometryDescriptor setPolygonType:](v15, "setPolygonType:", 0);
            v16 = objc_alloc_init(MTLMotionKeyframeData);
            -[MTLMotionKeyframeData setBuffer:](v16, "setBuffer:", objc_msgSend(v14, "vertexBuffer"));
            -[MTLMotionKeyframeData setOffset:](v16, "setOffset:", objc_msgSend(v14, "vertexBufferOffset"));
            -[MTLBVHPolygonGeometryDescriptor setVertexBuffers:](v15, "setVertexBuffers:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v16));
            v17 = objc_msgSend(v14, "vertexStride");
            v18 = objc_msgSend(v14, "vertexFormat");
            if (!v17)
              v17 = MTLAttributeFormatSize(v18, v19, v20, v21, v22, v23, v24, v25);
            -[MTLBVHPolygonGeometryDescriptor setVertexStride:](v15, "setVertexStride:", v17);
            -[MTLBVHPolygonGeometryDescriptor setVertexFormat:](v15, "setVertexFormat:", objc_msgSend(v14, "vertexFormat"));
            -[MTLBVHPolygonGeometryDescriptor setTransformationMatrixBuffer:](v15, "setTransformationMatrixBuffer:", objc_msgSend(v14, "transformationMatrixBuffer"));
            -[MTLBVHPolygonGeometryDescriptor setTransformationMatrixBufferOffset:](v15, "setTransformationMatrixBufferOffset:", objc_msgSend(v14, "transformationMatrixBufferOffset"));
            -[MTLBVHPolygonGeometryDescriptor setTransformationMatrixLayout:](v15, "setTransformationMatrixLayout:", objc_msgSend(v14, "transformationMatrixLayout"));
            -[MTLBVHPolygonGeometryDescriptor setIndexBuffer:](v15, "setIndexBuffer:", objc_msgSend(v14, "indexBuffer"));
            -[MTLBVHPolygonGeometryDescriptor setIndexBufferOffset:](v15, "setIndexBufferOffset:", objc_msgSend(v14, "indexBufferOffset"));
            -[MTLBVHPolygonGeometryDescriptor setIndexType:](v15, "setIndexType:", objc_msgSend(v14, "indexType"));
            -[MTLBVHGeometryDescriptor setPrimitiveCount:](v15, "setPrimitiveCount:", objc_msgSend(v14, "triangleCount"));
            v26 = objc_msgSend(v14, "primitiveDataBuffer");
            if (v26)
            {
              -[MTLBVHGeometryDescriptor setPrimitiveDataBuffer:](v15, "setPrimitiveDataBuffer:", v26);
              -[MTLBVHGeometryDescriptor setPrimitiveDataBufferOffset:](v15, "setPrimitiveDataBufferOffset:", objc_msgSend(v14, "primitiveDataBufferOffset"));
              -[MTLBVHGeometryDescriptor setPrimitiveDataStride:](v15, "setPrimitiveDataStride:", objc_msgSend(v14, "primitiveDataStride"));
              -[MTLBVHGeometryDescriptor setPrimitiveDataElementSize:](v15, "setPrimitiveDataElementSize:", objc_msgSend(v14, "primitiveDataElementSize"));
            }
            objc_msgSend(v187, "addObject:", v15);
            v27 = -[MTLBVHGeometryDescriptor primitiveCount](v15, "primitiveCount");
            if (objc_msgSend(v14, "primitiveDataBuffer") && objc_msgSend(v14, "primitiveDataElementSize"))
            {
              v28 = -[MTLBVHGeometryDescriptor primitiveCount](v15, "primitiveCount");
              v186 += (objc_msgSend(v14, "primitiveDataElementSize") * v28 + 255) & 0xFFFFFFFFFFFFFF00;
            }
            v11 += v27;
          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v208, v219, 16);
        }
        while (v10);
        if (!v2)
          goto LABEL_144;
LABEL_87:
        v39 = v185;
        -[MTLBVHDescriptor setSplitHeuristic:](v185, "setSplitHeuristic:", 3);
        LODWORD(v118) = 2.0;
LABEL_145:
        -[MTLBVHDescriptor setSplitCapacity:](v39, "setSplitCapacity:", v118);
        v44 = v186;
        goto LABEL_146;
      }
      v186 = 0;
      v11 = 0;
      if (v2)
        goto LABEL_87;
    }
    else
    {
      v45 = (void *)objc_opt_class();
      if (objc_msgSend(v45, "isSubclassOfClass:", objc_opt_class()))
      {
        -[MTLBVHDescriptor setMaxPrimitivesPerLeaf:](v185, "setMaxPrimitivesPerLeaf:", 1);
        -[MTLBVHDescriptor setMinPrimitivesPerLeaf:](v185, "setMinPrimitivesPerLeaf:", 1);
        v206 = 0u;
        v207 = 0u;
        v204 = 0u;
        v205 = 0u;
        obj = (id)objc_msgSend(a1, "geometryDescriptors");
        v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v204, v218, 16);
        if (v46)
        {
          v47 = v46;
          v186 = 0;
          v11 = 0;
          v48 = *(_QWORD *)v205;
          do
          {
            for (j = 0; j != v47; ++j)
            {
              if (*(_QWORD *)v205 != v48)
                objc_enumerationMutation(obj);
              v50 = *(void **)(*((_QWORD *)&v204 + 1) + 8 * j);
              if (-[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount") != 1)
              {
                v75 = -[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount");
                MTLReportFailure(0, "MTLBVHDescriptorForMTLAccelerationStructureDescriptor", 9436, (uint64_t)CFSTR("Motion keyframe count mismatch in MTLPrimitiveAccelerationStructureDescriptor (MTLPrimitiveAccelerationStructureDescriptor has %lu keyframes and MTLAccelerationStructureCurveGeometryDescriptor which can have only one keyframe)."), v76, v77, v78, v79, v75);
              }
              v51 = objc_alloc_init(MTLBVHCurveGeometryDescriptor);
              v52 = objc_alloc_init(MTLMotionKeyframeData);
              -[MTLMotionKeyframeData setBuffer:](v52, "setBuffer:", objc_msgSend(v50, "controlPointBuffer"));
              -[MTLMotionKeyframeData setOffset:](v52, "setOffset:", objc_msgSend(v50, "controlPointBufferOffset"));
              -[MTLBVHCurveGeometryDescriptor setControlPointBuffers:](v51, "setControlPointBuffers:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v52));
              v53 = objc_alloc_init(MTLMotionKeyframeData);
              -[MTLMotionKeyframeData setBuffer:](v53, "setBuffer:", objc_msgSend(v50, "radiusBuffer"));
              -[MTLMotionKeyframeData setOffset:](v53, "setOffset:", objc_msgSend(v50, "radiusBufferOffset"));
              -[MTLBVHCurveGeometryDescriptor setRadiusBuffers:](v51, "setRadiusBuffers:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v53));
              v54 = objc_msgSend(v50, "controlPointStride");
              v55 = objc_msgSend(v50, "controlPointFormat");
              if (!v54)
                v54 = MTLAttributeFormatSize(v55, v56, v57, v58, v59, v60, v61, v62);
              -[MTLBVHCurveGeometryDescriptor setControlPointStride:](v51, "setControlPointStride:", v54);
              -[MTLBVHCurveGeometryDescriptor setControlPointFormat:](v51, "setControlPointFormat:", objc_msgSend(v50, "controlPointFormat"));
              v63 = objc_msgSend(v50, "radiusStride");
              v64 = objc_msgSend(v50, "radiusFormat");
              if (!v63)
                v63 = MTLAttributeFormatSize(v64, v65, v66, v67, v68, v69, v70, v71);
              -[MTLBVHCurveGeometryDescriptor setRadiusStride:](v51, "setRadiusStride:", v63);
              -[MTLBVHCurveGeometryDescriptor setRadiusFormat:](v51, "setRadiusFormat:", objc_msgSend(v50, "radiusFormat"));
              -[MTLBVHCurveGeometryDescriptor setControlPointCount:](v51, "setControlPointCount:", objc_msgSend(v50, "controlPointCount"));
              -[MTLBVHCurveGeometryDescriptor setIndexBuffer:](v51, "setIndexBuffer:", objc_msgSend(v50, "indexBuffer"));
              -[MTLBVHCurveGeometryDescriptor setIndexBufferOffset:](v51, "setIndexBufferOffset:", objc_msgSend(v50, "indexBufferOffset"));
              -[MTLBVHCurveGeometryDescriptor setIndexType:](v51, "setIndexType:", objc_msgSend(v50, "indexType"));
              -[MTLBVHGeometryDescriptor setPrimitiveCount:](v51, "setPrimitiveCount:", objc_msgSend(v50, "segmentCount"));
              -[MTLBVHCurveGeometryDescriptor setSegmentControlPointCount:](v51, "setSegmentControlPointCount:", objc_msgSend(v50, "segmentControlPointCount"));
              -[MTLBVHCurveGeometryDescriptor setCurveType:](v51, "setCurveType:", objc_msgSend(v50, "curveType"));
              -[MTLBVHCurveGeometryDescriptor setCurveBasis:](v51, "setCurveBasis:", objc_msgSend(v50, "curveBasis"));
              -[MTLBVHCurveGeometryDescriptor setCurveEndCaps:](v51, "setCurveEndCaps:", objc_msgSend(v50, "endCaps"));
              v72 = objc_msgSend(v50, "primitiveDataBuffer");
              if (v72)
              {
                -[MTLBVHGeometryDescriptor setPrimitiveDataBuffer:](v51, "setPrimitiveDataBuffer:", v72);
                -[MTLBVHGeometryDescriptor setPrimitiveDataBufferOffset:](v51, "setPrimitiveDataBufferOffset:", objc_msgSend(v50, "primitiveDataBufferOffset"));
                -[MTLBVHGeometryDescriptor setPrimitiveDataStride:](v51, "setPrimitiveDataStride:", objc_msgSend(v50, "primitiveDataStride"));
                -[MTLBVHGeometryDescriptor setPrimitiveDataElementSize:](v51, "setPrimitiveDataElementSize:", objc_msgSend(v50, "primitiveDataElementSize"));
              }
              objc_msgSend(v187, "addObject:", v51);
              v73 = -[MTLBVHGeometryDescriptor primitiveCount](v51, "primitiveCount");
              if (objc_msgSend(v50, "primitiveDataBuffer") && objc_msgSend(v50, "primitiveDataElementSize"))
              {
                v74 = -[MTLBVHGeometryDescriptor primitiveCount](v51, "primitiveCount");
                v186 += (objc_msgSend(v50, "primitiveDataElementSize") * v74 + 255) & 0xFFFFFFFFFFFFFF00;
              }
              v11 += v73;
            }
            v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v204, v218, 16);
          }
          while (v47);
          goto LABEL_144;
        }
      }
      else
      {
        v80 = (void *)objc_opt_class();
        if (objc_msgSend(v80, "isSubclassOfClass:", objc_opt_class()))
        {
          -[MTLBVHDescriptor setMaxPrimitivesPerLeaf:](v185, "setMaxPrimitivesPerLeaf:", 1);
          -[MTLBVHDescriptor setMinPrimitivesPerLeaf:](v185, "setMinPrimitivesPerLeaf:", 1);
          v202 = 0u;
          v203 = 0u;
          v200 = 0u;
          v201 = 0u;
          obja = (id)objc_msgSend(a1, "geometryDescriptors");
          v81 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v200, v217, 16);
          if (v81)
          {
            v82 = v81;
            v186 = 0;
            v11 = 0;
            v83 = *(_QWORD *)v201;
            do
            {
              v84 = 0;
              v85 = v186;
              do
              {
                if (*(_QWORD *)v201 != v83)
                  objc_enumerationMutation(obja);
                v86 = *(void **)(*((_QWORD *)&v200 + 1) + 8 * v84);
                v87 = -[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount");
                if (v87 != objc_msgSend((id)objc_msgSend(v86, "controlPointBuffers"), "count"))
                {
                  v113 = -[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount");
                  objc_msgSend((id)objc_msgSend(v86, "controlPointBuffers"), "count");
                  MTLReportFailure(0, "MTLBVHDescriptorForMTLAccelerationStructureDescriptor", 9490, (uint64_t)CFSTR("Motion keyframe count mismatch in MTLPrimitiveAccelerationStructureDescriptor (MTLPrimitiveAccelerationStructureDescriptor has %lu keyframes and and one of the MTLAccelerationStructureMotionCurveGeometryDescriptor has %lu keyframes)."), v114, v115, v116, v117, v113);
                }
                v88 = objc_alloc_init(MTLBVHCurveGeometryDescriptor);
                if (objc_msgSend((id)objc_msgSend(v86, "controlPointBuffers"), "count"))
                {
                  -[MTLBVHCurveGeometryDescriptor setControlPointBuffers:](v88, "setControlPointBuffers:", objc_msgSend(v86, "controlPointBuffers"));
                  v89 = objc_msgSend(v86, "radiusBuffers");
                }
                else
                {
                  v90 = objc_alloc_init(MTLMotionKeyframeData);
                  -[MTLMotionKeyframeData setBuffer:](v90, "setBuffer:", 0);
                  -[MTLMotionKeyframeData setOffset:](v90, "setOffset:", 0);
                  -[MTLBVHCurveGeometryDescriptor setControlPointBuffers:](v88, "setControlPointBuffers:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v90));
                  v91 = objc_alloc_init(MTLMotionKeyframeData);
                  -[MTLMotionKeyframeData setBuffer:](v91, "setBuffer:", 0);
                  -[MTLMotionKeyframeData setOffset:](v91, "setOffset:", 0);
                  v89 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v91);
                }
                -[MTLBVHCurveGeometryDescriptor setRadiusBuffers:](v88, "setRadiusBuffers:", v89);
                v92 = objc_msgSend(v86, "controlPointStride");
                v93 = objc_msgSend(v86, "controlPointFormat");
                if (!v92)
                  v92 = MTLAttributeFormatSize(v93, v94, v95, v96, v97, v98, v99, v100);
                -[MTLBVHCurveGeometryDescriptor setControlPointStride:](v88, "setControlPointStride:", v92);
                -[MTLBVHCurveGeometryDescriptor setControlPointFormat:](v88, "setControlPointFormat:", objc_msgSend(v86, "controlPointFormat"));
                v101 = objc_msgSend(v86, "radiusStride");
                v102 = objc_msgSend(v86, "radiusFormat");
                if (!v101)
                  v101 = MTLAttributeFormatSize(v102, v103, v104, v105, v106, v107, v108, v109);
                -[MTLBVHCurveGeometryDescriptor setRadiusStride:](v88, "setRadiusStride:", v101);
                -[MTLBVHCurveGeometryDescriptor setRadiusFormat:](v88, "setRadiusFormat:", objc_msgSend(v86, "radiusFormat"));
                -[MTLBVHCurveGeometryDescriptor setControlPointCount:](v88, "setControlPointCount:", objc_msgSend(v86, "controlPointCount"));
                -[MTLBVHCurveGeometryDescriptor setIndexBuffer:](v88, "setIndexBuffer:", objc_msgSend(v86, "indexBuffer"));
                -[MTLBVHCurveGeometryDescriptor setIndexBufferOffset:](v88, "setIndexBufferOffset:", objc_msgSend(v86, "indexBufferOffset"));
                -[MTLBVHCurveGeometryDescriptor setIndexType:](v88, "setIndexType:", objc_msgSend(v86, "indexType"));
                -[MTLBVHGeometryDescriptor setPrimitiveCount:](v88, "setPrimitiveCount:", objc_msgSend(v86, "segmentCount"));
                -[MTLBVHCurveGeometryDescriptor setSegmentControlPointCount:](v88, "setSegmentControlPointCount:", objc_msgSend(v86, "segmentControlPointCount"));
                -[MTLBVHCurveGeometryDescriptor setCurveType:](v88, "setCurveType:", objc_msgSend(v86, "curveType"));
                -[MTLBVHCurveGeometryDescriptor setCurveBasis:](v88, "setCurveBasis:", objc_msgSend(v86, "curveBasis"));
                -[MTLBVHCurveGeometryDescriptor setCurveEndCaps:](v88, "setCurveEndCaps:", objc_msgSend(v86, "endCaps"));
                v110 = objc_msgSend(v86, "primitiveDataBuffer");
                if (v110)
                {
                  -[MTLBVHGeometryDescriptor setPrimitiveDataBuffer:](v88, "setPrimitiveDataBuffer:", v110);
                  -[MTLBVHGeometryDescriptor setPrimitiveDataBufferOffset:](v88, "setPrimitiveDataBufferOffset:", objc_msgSend(v86, "primitiveDataBufferOffset"));
                  -[MTLBVHGeometryDescriptor setPrimitiveDataStride:](v88, "setPrimitiveDataStride:", objc_msgSend(v86, "primitiveDataStride"));
                  -[MTLBVHGeometryDescriptor setPrimitiveDataElementSize:](v88, "setPrimitiveDataElementSize:", objc_msgSend(v86, "primitiveDataElementSize"));
                }
                objc_msgSend(v187, "addObject:", v88);
                v111 = -[MTLBVHGeometryDescriptor primitiveCount](v88, "primitiveCount");
                if (objc_msgSend(v86, "primitiveDataBuffer") && objc_msgSend(v86, "primitiveDataElementSize"))
                {
                  v112 = -[MTLBVHGeometryDescriptor primitiveCount](v88, "primitiveCount");
                  v85 += (objc_msgSend(v86, "primitiveDataElementSize") * v112 + 255) & 0xFFFFFFFFFFFFFF00;
                }
                v11 += v111;
                ++v84;
              }
              while (v82 != v84);
              v186 = v85;
              v82 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v200, v217, 16);
            }
            while (v82);
            goto LABEL_144;
          }
        }
        else
        {
          v119 = (void *)objc_opt_class();
          if (objc_msgSend(v119, "isSubclassOfClass:", objc_opt_class()))
          {
            v198 = 0u;
            v199 = 0u;
            v196 = 0u;
            v197 = 0u;
            v120 = (void *)objc_msgSend(a1, "geometryDescriptors");
            v121 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v196, v216, 16);
            if (v121)
            {
              v122 = v121;
              v186 = 0;
              v11 = 0;
              v123 = *(_QWORD *)v197;
              do
              {
                for (k = 0; k != v122; ++k)
                {
                  if (*(_QWORD *)v197 != v123)
                    objc_enumerationMutation(v120);
                  v125 = *(void **)(*((_QWORD *)&v196 + 1) + 8 * k);
                  v126 = -[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount");
                  if (v126 != objc_msgSend((id)objc_msgSend(v125, "vertexBuffers"), "count"))
                  {
                    v142 = -[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount");
                    objc_msgSend((id)objc_msgSend(v125, "vertexBuffers"), "count");
                    MTLReportFailure(0, "MTLBVHDescriptorForMTLAccelerationStructureDescriptor", 9558, (uint64_t)CFSTR("Motion keyframe count mismatch in MTLPrimitiveAccelerationStructureDescriptor (MTLPrimitiveAccelerationStructureDescriptor has %lu keyframes and one of the MTLAccelerationStructureMotionTriangleGeometryDescriptor has %lu keyframes)."), v143, v144, v145, v146, v142);
                  }
                  v127 = objc_alloc_init(MTLBVHPolygonGeometryDescriptor);
                  -[MTLBVHPolygonGeometryDescriptor setPolygonType:](v127, "setPolygonType:", 0);
                  if (objc_msgSend((id)objc_msgSend(v125, "vertexBuffers"), "count"))
                  {
                    v128 = objc_msgSend(v125, "vertexBuffers");
                  }
                  else
                  {
                    v129 = objc_alloc_init(MTLMotionKeyframeData);
                    -[MTLMotionKeyframeData setBuffer:](v129, "setBuffer:", 0);
                    -[MTLMotionKeyframeData setOffset:](v129, "setOffset:", 0);
                    v128 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v129);
                  }
                  -[MTLBVHPolygonGeometryDescriptor setVertexBuffers:](v127, "setVertexBuffers:", v128);
                  v130 = objc_msgSend(v125, "vertexStride");
                  v131 = objc_msgSend(v125, "vertexFormat");
                  if (!v130)
                    v130 = MTLAttributeFormatSize(v131, v132, v133, v134, v135, v136, v137, v138);
                  -[MTLBVHPolygonGeometryDescriptor setVertexStride:](v127, "setVertexStride:", v130);
                  -[MTLBVHPolygonGeometryDescriptor setVertexFormat:](v127, "setVertexFormat:", objc_msgSend(v125, "vertexFormat"));
                  -[MTLBVHPolygonGeometryDescriptor setTransformationMatrixBuffer:](v127, "setTransformationMatrixBuffer:", objc_msgSend(v125, "transformationMatrixBuffer"));
                  -[MTLBVHPolygonGeometryDescriptor setTransformationMatrixBufferOffset:](v127, "setTransformationMatrixBufferOffset:", objc_msgSend(v125, "transformationMatrixBufferOffset"));
                  -[MTLBVHPolygonGeometryDescriptor setTransformationMatrixLayout:](v127, "setTransformationMatrixLayout:", objc_msgSend(v125, "transformationMatrixLayout"));
                  -[MTLBVHPolygonGeometryDescriptor setIndexBuffer:](v127, "setIndexBuffer:", objc_msgSend(v125, "indexBuffer"));
                  -[MTLBVHPolygonGeometryDescriptor setIndexBufferOffset:](v127, "setIndexBufferOffset:", objc_msgSend(v125, "indexBufferOffset"));
                  -[MTLBVHPolygonGeometryDescriptor setIndexType:](v127, "setIndexType:", objc_msgSend(v125, "indexType"));
                  -[MTLBVHGeometryDescriptor setPrimitiveCount:](v127, "setPrimitiveCount:", objc_msgSend(v125, "triangleCount"));
                  v139 = objc_msgSend(v125, "primitiveDataBuffer");
                  if (v139)
                  {
                    -[MTLBVHGeometryDescriptor setPrimitiveDataBuffer:](v127, "setPrimitiveDataBuffer:", v139);
                    -[MTLBVHGeometryDescriptor setPrimitiveDataBufferOffset:](v127, "setPrimitiveDataBufferOffset:", objc_msgSend(v125, "primitiveDataBufferOffset"));
                    -[MTLBVHGeometryDescriptor setPrimitiveDataStride:](v127, "setPrimitiveDataStride:", objc_msgSend(v125, "primitiveDataStride"));
                    -[MTLBVHGeometryDescriptor setPrimitiveDataElementSize:](v127, "setPrimitiveDataElementSize:", objc_msgSend(v125, "primitiveDataElementSize"));
                  }
                  objc_msgSend(v187, "addObject:", v127);
                  v140 = -[MTLBVHGeometryDescriptor primitiveCount](v127, "primitiveCount");
                  if (objc_msgSend(v125, "primitiveDataBuffer") && objc_msgSend(v125, "primitiveDataElementSize"))
                  {
                    v141 = -[MTLBVHGeometryDescriptor primitiveCount](v127, "primitiveCount");
                    v186 += (objc_msgSend(v125, "primitiveDataElementSize") * v141 + 255) & 0xFFFFFFFFFFFFFF00;
                  }
                  v11 += v140;
                }
                v122 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v196, v216, 16);
              }
              while (v122);
              goto LABEL_144;
            }
          }
          else
          {
            v147 = (void *)objc_opt_class();
            LODWORD(v147) = objc_msgSend(v147, "isSubclassOfClass:", objc_opt_class());
            -[MTLBVHDescriptor setMaxPrimitivesPerLeaf:](v185, "setMaxPrimitivesPerLeaf:", 1);
            -[MTLBVHDescriptor setMinPrimitivesPerLeaf:](v185, "setMinPrimitivesPerLeaf:", 1);
            if ((_DWORD)v147)
            {
              v194 = 0uLL;
              v195 = 0uLL;
              v192 = 0uLL;
              v193 = 0uLL;
              v148 = (void *)objc_msgSend(a1, "geometryDescriptors");
              v149 = objc_msgSend(v148, "countByEnumeratingWithState:objects:count:", &v192, v215, 16);
              if (v149)
              {
                v150 = v149;
                v186 = 0;
                v11 = 0;
                v151 = *(_QWORD *)v193;
                do
                {
                  for (m = 0; m != v150; ++m)
                  {
                    if (*(_QWORD *)v193 != v151)
                      objc_enumerationMutation(v148);
                    v153 = *(void **)(*((_QWORD *)&v192 + 1) + 8 * m);
                    v154 = -[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount");
                    if (v154 != objc_msgSend((id)objc_msgSend(v153, "boundingBoxBuffers"), "count"))
                    {
                      v161 = -[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount");
                      objc_msgSend((id)objc_msgSend(v153, "boundingBoxBuffers"), "count");
                      MTLReportFailure(0, "MTLBVHDescriptorForMTLAccelerationStructureDescriptor", 9620, (uint64_t)CFSTR("Motion keyframe count mismatch in MTLPrimitiveAccelerationStructureDescriptor (MTLPrimitiveAccelerationStructureDescriptor has %lu keyframes and one of the MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor has %lu keyframes)."), v162, v163, v164, v165, v161);
                    }
                    v155 = objc_alloc_init(MTLBVHBoundingBoxGeometryDescriptor);
                    if (objc_msgSend((id)objc_msgSend(v153, "boundingBoxBuffers"), "count"))
                    {
                      v156 = objc_msgSend(v153, "boundingBoxBuffers");
                    }
                    else
                    {
                      v157 = objc_alloc_init(MTLMotionKeyframeData);
                      -[MTLMotionKeyframeData setBuffer:](v157, "setBuffer:", 0);
                      -[MTLMotionKeyframeData setOffset:](v157, "setOffset:", 0);
                      v156 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v157);
                    }
                    -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxBuffers:](v155, "setBoundingBoxBuffers:", v156);
                    -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxStride:](v155, "setBoundingBoxStride:", objc_msgSend(v153, "boundingBoxStride"));
                    -[MTLBVHGeometryDescriptor setPrimitiveCount:](v155, "setPrimitiveCount:", objc_msgSend(v153, "boundingBoxCount"));
                    v158 = objc_msgSend(v153, "primitiveDataBuffer");
                    if (v158)
                    {
                      -[MTLBVHGeometryDescriptor setPrimitiveDataBuffer:](v155, "setPrimitiveDataBuffer:", v158);
                      -[MTLBVHGeometryDescriptor setPrimitiveDataBufferOffset:](v155, "setPrimitiveDataBufferOffset:", objc_msgSend(v153, "primitiveDataBufferOffset"));
                      -[MTLBVHGeometryDescriptor setPrimitiveDataStride:](v155, "setPrimitiveDataStride:", objc_msgSend(v153, "primitiveDataStride"));
                      -[MTLBVHGeometryDescriptor setPrimitiveDataElementSize:](v155, "setPrimitiveDataElementSize:", objc_msgSend(v153, "primitiveDataElementSize"));
                    }
                    objc_msgSend(v187, "addObject:", v155);
                    v159 = -[MTLBVHGeometryDescriptor primitiveCount](v155, "primitiveCount");
                    if (objc_msgSend(v153, "primitiveDataBuffer") && objc_msgSend(v153, "primitiveDataElementSize"))
                    {
                      v160 = -[MTLBVHGeometryDescriptor primitiveCount](v155, "primitiveCount");
                      v186 += (objc_msgSend(v153, "primitiveDataElementSize") * v160 + 255) & 0xFFFFFFFFFFFFFF00;
                    }
                    v11 += v159;
                  }
                  v150 = objc_msgSend(v148, "countByEnumeratingWithState:objects:count:", &v192, v215, 16);
                }
                while (v150);
                goto LABEL_144;
              }
            }
            else
            {
              v190 = 0uLL;
              v191 = 0uLL;
              v188 = 0uLL;
              v189 = 0uLL;
              v166 = (void *)objc_msgSend(a1, "geometryDescriptors");
              v167 = objc_msgSend(v166, "countByEnumeratingWithState:objects:count:", &v188, v214, 16);
              if (v167)
              {
                v168 = v167;
                v186 = 0;
                v11 = 0;
                v169 = *(_QWORD *)v189;
                do
                {
                  for (n = 0; n != v168; ++n)
                  {
                    if (*(_QWORD *)v189 != v169)
                      objc_enumerationMutation(v166);
                    v171 = *(void **)(*((_QWORD *)&v188 + 1) + 8 * n);
                    if (-[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount") != 1)
                    {
                      v177 = -[MTLBVHDescriptor primitiveKeyframeCount](v185, "primitiveKeyframeCount");
                      MTLReportFailure(0, "MTLBVHDescriptorForMTLAccelerationStructureDescriptor", 9655, (uint64_t)CFSTR("Motion keyframe count mismatch in MTLPrimitiveAccelerationStructureDescriptor (MTLPrimitiveAccelerationStructureDescriptor has %lu keyframes and MTLAccelerationStructureBoundingBoxGeometryDescriptor which can have only one keyframe)."), v178, v179, v180, v181, v177);
                    }
                    v172 = objc_alloc_init(MTLBVHBoundingBoxGeometryDescriptor);
                    v173 = objc_alloc_init(MTLMotionKeyframeData);
                    -[MTLMotionKeyframeData setBuffer:](v173, "setBuffer:", objc_msgSend(v171, "boundingBoxBuffer"));
                    -[MTLMotionKeyframeData setOffset:](v173, "setOffset:", objc_msgSend(v171, "boundingBoxBufferOffset"));
                    -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxBuffers:](v172, "setBoundingBoxBuffers:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v173));
                    -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxStride:](v172, "setBoundingBoxStride:", objc_msgSend(v171, "boundingBoxStride"));
                    -[MTLBVHGeometryDescriptor setPrimitiveCount:](v172, "setPrimitiveCount:", objc_msgSend(v171, "boundingBoxCount"));
                    v174 = objc_msgSend(v171, "primitiveDataBuffer");
                    if (v174)
                    {
                      -[MTLBVHGeometryDescriptor setPrimitiveDataBuffer:](v172, "setPrimitiveDataBuffer:", v174);
                      -[MTLBVHGeometryDescriptor setPrimitiveDataBufferOffset:](v172, "setPrimitiveDataBufferOffset:", objc_msgSend(v171, "primitiveDataBufferOffset"));
                      -[MTLBVHGeometryDescriptor setPrimitiveDataStride:](v172, "setPrimitiveDataStride:", objc_msgSend(v171, "primitiveDataStride"));
                      -[MTLBVHGeometryDescriptor setPrimitiveDataElementSize:](v172, "setPrimitiveDataElementSize:", objc_msgSend(v171, "primitiveDataElementSize"));
                    }
                    objc_msgSend(v187, "addObject:", v172);
                    v175 = -[MTLBVHGeometryDescriptor primitiveCount](v172, "primitiveCount");
                    if (objc_msgSend(v171, "primitiveDataBuffer") && objc_msgSend(v171, "primitiveDataElementSize"))
                    {
                      v176 = -[MTLBVHGeometryDescriptor primitiveCount](v172, "primitiveCount");
                      v186 += (objc_msgSend(v171, "primitiveDataElementSize") * v176 + 255) & 0xFFFFFFFFFFFFFF00;
                    }
                    v11 += v175;
                  }
                  v168 = objc_msgSend(v166, "countByEnumeratingWithState:objects:count:", &v188, v214, 16);
                }
                while (v168);
                goto LABEL_144;
              }
            }
          }
        }
      }
      v11 = 0;
      v186 = 0;
    }
LABEL_144:
    v39 = v185;
    -[MTLBVHDescriptor setSplitHeuristic:](v185, "setSplitHeuristic:", 2);
    LODWORD(v118) = 1.0;
    goto LABEL_145;
  }
  return v185;
}

uint64_t ___ZL41refitUpdatesOpacityAndFunctionTableOffsetv_block_invoke()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  refitUpdatesOpacityAndFunctionTableOffset(void)::useNewRefitBehavior = result;
  return result;
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  os_unfair_lock_s *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _OWORD v13[2];
  uint64_t v14;

  v6 = (os_unfair_lock_s *)(a1 + 84);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 84));
  v7 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v7;
  v14 = *(_QWORD *)(a2 + 32);
  v8 = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::find<PipelineCache<PipelineKey>::HashKey>((_QWORD *)a1, (int *)v13);
  if (v8)
  {
    v9 = v8;
    os_unfair_lock_unlock(v6);
    if (a3)
      *a3 = v9[8];
    return (void *)v9[7];
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 72);
    if (!v11)
      std::__throw_bad_function_call[abi:ne180100]();
    v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, a2);
    PipelineCache<PipelineKey>::addPipeline(a1, a2, v10);
    os_unfair_lock_unlock(v6);
    if (a3)
      *a3 = objc_msgSend(v10, "threadExecutionWidth");
  }
  return v10;
}

_QWORD *PipelineCache<PipelineKey>::addPipeline(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *result;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD *v12;

  v6 = a3;
  v7 = objc_msgSend(a3, "threadExecutionWidth");
  v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  v11 = *(_QWORD *)(a2 + 32);
  v12 = v10;
  result = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__emplace_unique_key_args<PipelineCache<PipelineKey>::HashKey,std::piecewise_construct_t const&,std::tuple<PipelineCache<PipelineKey>::HashKey&&>,std::tuple<>>(a1, (int *)v10, (uint64_t)&std::piecewise_construct, &v12);
  result[7] = v6;
  result[8] = v7;
  return result;
}

void sub_1826D37DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::find<PipelineCache<PipelineKey>::HashKey>(_QWORD *a1, int *a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = _MTLHashState(a2, 0x28uLL);
  v5 = a1[1];
  if (!v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v5 <= v4)
      v9 = v4 % v5;
  }
  else
  {
    v9 = ((_DWORD)v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (!memcmp(v11 + 2, a2, 0x28uLL))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= v5)
            v12 %= v5;
        }
        else
        {
          v12 &= v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x186DABFBCLL);
}

_QWORD *std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__emplace_unique_key_args<PipelineCache<PipelineKey>::HashKey,std::piecewise_construct_t const&,std::tuple<PipelineCache<PipelineKey>::HashKey&&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v8 = _MTLHashState(a2, 0x28uLL);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v10 <= v8)
        v4 = v8 % v10;
    }
    else
    {
      v4 = ((_DWORD)v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (!memcmp(v14 + 2, a2, 0x28uLL))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x48uLL);
  *v14 = 0;
  v14[1] = v9;
  v17 = (*a4)[1];
  v18 = *((_QWORD *)*a4 + 4);
  *((_OWORD *)v14 + 1) = **a4;
  *((_OWORD *)v14 + 2) = v17;
  v14[6] = v18;
  v14[7] = 0;
  v14[8] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v24);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *v14 = *v26;
LABEL_38:
    *v26 = v14;
    goto LABEL_39;
  }
  *v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v25 + 8 * v4) = v16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10)
        v27 %= v10;
    }
    else
    {
      v27 &= v10 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1826D3BA8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

_QWORD *std::__function::__value_func<objc_object  {objcproto23MTLComputePipelineState}* ()(PipelineKey const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1826D3E58(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, unsigned __int8 a2, unint64_t a3, int a4)
{
  double v6;
  uint64_t v7;
  int v9;
  _BYTE v10[20];
  __int128 v11;

  *(_OWORD *)&v10[4] = 0u;
  v11 = 0u;
  v9 = a2;
  if (!a3)
    a3 = *(_QWORD *)(a1 + 40);
  v6 = log2((double)a3);
  v7 = 16;
  if (!a4)
    v7 = 0;
  *(_QWORD *)v10 = v7 | ((v6 & 0xF) << 13);
  return PipelineCache<PipelineKey>::getPipeline(a1, (uint64_t)&v9);
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t PipelineCache<PipelineKey>::~PipelineCache(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::clear(a1);
  v2 = *(_QWORD **)(a1 + 72);
  if (v2 == (_QWORD *)(a1 + 48))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 48);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::~__hash_table(a1);
}

void std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t MTLCreateStructTypeFromArgumentDescriptors(void *a1)
{
  uint64_t v2;
  int v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  MTLBindingInternal *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  MTLStructMemberInternal *v16;
  MTLStructMemberInternal *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  const __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  MTLStructType *v29;
  uint64_t v30;
  unint64_t j;
  uint64_t v33;
  uint64_t v34;
  MTLArrayTypeInternal *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t Alignment;
  uint64_t Size;
  uint64_t v40;
  MTLBufferBindingInternal *v41;
  void *v42;
  void *__p[3];

  std::vector<MTLStructMember *>::vector(__p, objc_msgSend(a1, "count"));
  v2 = 0;
  v3 = 0;
  for (i = 0; i < objc_msgSend(a1, "count"); ++i)
  {
    v42 = (void *)objc_msgSend(a1, "objectAtIndexedSubscript:", i);
    v5 = objc_msgSend(v42, "dataType");
    if (v5 > 78)
    {
      switch(v5)
      {
        case 's':
          v10 = [MTLBindingInternal alloc];
          v40 = objc_msgSend(v42, "access");
          v11 = objc_msgSend(v42, "index");
          v12 = 24;
          break;
        case 't':
          v10 = [MTLBindingInternal alloc];
          v40 = objc_msgSend(v42, "access");
          v11 = objc_msgSend(v42, "index");
          v12 = 27;
          break;
        case 'u':
          v10 = [MTLBindingInternal alloc];
          v40 = objc_msgSend(v42, "access");
          v11 = objc_msgSend(v42, "index");
          v12 = 25;
          break;
        case 'v':
          v10 = [MTLBindingInternal alloc];
          v40 = objc_msgSend(v42, "access");
          v11 = objc_msgSend(v42, "index");
          v12 = 26;
          break;
        default:
          if (v5 == 79)
          {
            v10 = [MTLBindingInternal alloc];
            v40 = objc_msgSend(v42, "access");
            v11 = objc_msgSend(v42, "index");
            v12 = 20;
          }
          else
          {
            if (v5 != 80)
              goto LABEL_29;
            v10 = [MTLBindingInternal alloc];
            v40 = objc_msgSend(v42, "access");
            v11 = objc_msgSend(v42, "index");
            v12 = 21;
          }
          break;
      }
LABEL_22:
      v41 = -[MTLBindingInternal initWithName:type:access:index:active:arrayLength:](v10, "initWithName:type:access:index:active:arrayLength:", &stru_1E0FE5DC8, v12, v40, v11, 1, 1);
LABEL_23:
      v3 = 0;
      Alignment = 8;
      Size = 8;
      goto LABEL_24;
    }
    if (v5 > 59)
    {
      if (v5 == 60)
      {
        LOBYTE(v36) = 0;
        v41 = -[MTLBufferBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:]([MTLBufferBindingInternal alloc], "initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:", &stru_1E0FE5DC8, 0, objc_msgSend(v42, "access"), 1, objc_msgSend(v42, "index"), 1, 0, 0, 0, v36, 0, 1);
        goto LABEL_23;
      }
      if (v5 == 78)
      {
        v10 = [MTLBindingInternal alloc];
        v40 = objc_msgSend(v42, "access");
        v11 = objc_msgSend(v42, "index");
        v12 = 19;
        goto LABEL_22;
      }
    }
    else
    {
      if (v5 == 58)
      {
        LOBYTE(v34) = 0;
        v41 = -[MTLTextureBindingInternal initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:]([MTLTextureBindingInternal alloc], "initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:", &stru_1E0FE5DC8, objc_msgSend(v42, "access"), 1, objc_msgSend(v42, "index"), 1, 3, objc_msgSend(v42, "textureType"), v34);
        goto LABEL_23;
      }
      if (v5 == 59)
      {
        v10 = [MTLBindingInternal alloc];
        v40 = objc_msgSend(v42, "access");
        v11 = objc_msgSend(v42, "index");
        v12 = 3;
        goto LABEL_22;
      }
      if ((unint64_t)v5 < 3)
      {
        MTLReportFailure(0, "MTLCreateStructTypeFromArgumentDescriptors", 464, (uint64_t)CFSTR("Invalid argument type at index %lu"), v6, v7, v8, v9, i);
        abort();
      }
    }
LABEL_29:
    switch(objc_msgSend(v42, "dataType"))
    {
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 121:
      case 122:
      case 123:
      case 124:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
        break;
      default:
        v24 = MTLDataTypeString(objc_msgSend(v42, "dataType"));
        MTLReportFailure(0, "MTLCreateStructTypeFromArgumentDescriptors", 432, (uint64_t)CFSTR("dataType (%@) is not a valid data type"), v25, v26, v27, v28, (uint64_t)v24);
        break;
    }
    Size = MTLDataTypeGetSize(objc_msgSend(v42, "dataType"));
    Alignment = MTLDataTypeGetAlignment(objc_msgSend(v42, "dataType"));
    if (objc_msgSend(v42, "constantBlockAlignment"))
    {
      if (v3)
        MTLReportFailure(0, "MTLCreateStructTypeFromArgumentDescriptors", 440, (uint64_t)CFSTR("Constant block alignment can only be set the first constant in a constant block"), v18, v19, v20, v21, v33);
      v22 = objc_msgSend(v42, "constantBlockAlignment");
      v23 = Alignment;
      if (Alignment <= v22)
        v23 = v22;
      Alignment = v23;
    }
    v3 = 1;
    v41 = -[MTLIndirectConstantArgument initWithName:type:access:isActive:locationIndex:dataType:pixelFormat:aluType:dataSize:alignment:]([MTLIndirectConstantArgument alloc], "initWithName:type:access:isActive:locationIndex:dataType:pixelFormat:aluType:dataSize:alignment:", &stru_1E0FE5DC8, 4, objc_msgSend(v42, "access"), 1, objc_msgSend(v42, "index"), objc_msgSend(v42, "dataType"), 0, 0, Size, MTLDataTypeGetAlignment(objc_msgSend(v42, "dataType")));
LABEL_24:
    v13 = objc_msgSend(v42, "arrayLength");
    v14 = v2 + Alignment - 1;
    v15 = v14 & -(uint64_t)Alignment;
    if (v13)
    {
      v37 = v14 & -(uint64_t)Alignment;
      v34 = 0xFFFFFFFFLL;
      v35 = -[MTLArrayTypeInternal initWithArrayLength:elementType:stride:pixelFormat:aluType:details:]([MTLArrayTypeInternal alloc], "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", objc_msgSend(v42, "arrayLength"), 57, Size, 0, 0, v41);
      v33 = 0xFFFFFFFFLL;
      v16 = -[MTLStructMemberInternal initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:]([MTLStructMemberInternal alloc], "initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:", &stru_1E0FE5DC8, v37, 2, 0, 0, -[MTLBindingInternal index](v41, "index"));
      *((_QWORD *)__p[0] + i) = v16;

      Size *= objc_msgSend(v42, "arrayLength");
      v15 = v37;
    }
    else
    {
      v34 = 0xFFFFFFFFLL;
      v33 = 0xFFFFFFFFLL;
      v17 = -[MTLStructMemberInternal initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:]([MTLStructMemberInternal alloc], "initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:", &stru_1E0FE5DC8, v15, 57, 0, 0, -[MTLBindingInternal index](v41, "index"));
      *((_QWORD *)__p[0] + i) = v17;
    }

    v2 = Size + v15;
  }
  v29 = [MTLStructType alloc];
  v30 = -[MTLStructType initWithMembers:count:](v29, "initWithMembers:count:", __p[0], objc_msgSend(a1, "count"));
  for (j = 0; objc_msgSend(a1, "count") > j; ++j)

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v30;
}

void sub_1826D5B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLIndirectResourceEnumerator::collectIndirectResources(MTLIndirectResourceEnumerator *this, MTLPointerTypeInternal *a2)
{
  if (-[MTLPointerTypeInternal elementIsArgumentBuffer](a2, "elementIsArgumentBuffer")
    && -[MTLPointerTypeInternal elementTypeDescription](a2, "elementTypeDescription"))
  {
    (*(void (**)(void))(*(_QWORD *)this + 16))();
  }
  return 1;
}

unint64_t MTLIndirectResourceEnumerator::collectIndirectResources(MTLIndirectResourceEnumerator *this, MTLArrayType *a2, unint64_t a3)
{
  NSUInteger v6;
  NSUInteger v7;
  unint64_t v8;
  unint64_t v9;
  MTLDataType v10;
  void *v11;

  v6 = -[MTLArrayType arrayLength](a2, "arrayLength");
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = a3;
    while (1)
    {
      v10 = -[MTLArrayType elementType](a2, "elementType");
      if (v10 - 58 <= 0x16)
      {
        if (((1 << (v10 - 58)) & 0x700003) != 0)
          goto LABEL_5;
        if (v10 == MTLDataTypePointer)
          goto LABEL_15;
      }
      if (v10 == MTLDataTypeArray)
      {
        v9 += MTLIndirectResourceEnumerator::collectIndirectResources(this, -[MTLArrayType elementArrayType](a2, "elementArrayType"), v9);
LABEL_15:
        v11 = (void *)-[MTLArrayType elementTypeDescription](a2, "elementTypeDescription");
        if (objc_msgSend(v11, "elementIsArgumentBuffer") && objc_msgSend(v11, "elementTypeDescription"))
          (*(void (**)(void))(*(_QWORD *)this + 16))();
        goto LABEL_5;
      }
      if (v10 == MTLDataTypeStruct)
      {
        v9 += MTLIndirectResourceEnumerator::collectIndirectResources(this, -[MTLArrayType elementStructType](a2, "elementStructType"), v9);
        goto LABEL_6;
      }
LABEL_5:
      ++v9;
LABEL_6:
      if (v9 > v8)
        v8 = v9;
      if (!--v7)
        return v8 - a3;
    }
  }
  v8 = 0;
  return v8 - a3;
}

uint64_t MTLEnumerateIndirectResources(MTLStructType *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return MTLIndirectResourceEnumerator::collectIndirectResources((MTLIndirectResourceEnumerator *)&v3, a1, 0);
}

uint64_t ___ZN39_MTLIndirectArgumentBufferLayoutPrivateC2EP13MTLStructTypePU23objcproto12MTLDeviceSPI11objc_object_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  void *v6;
  unint64_t v8;
  unint64_t *v9;

  v8 = a3;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_msgSend(*(id *)(a1 + 32), "newIndirectArgumentBufferLayoutWithStructType:", a2);
  v9 = &v8;
  std::__hash_table<std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5 + 8, &v8, (uint64_t)&std::piecewise_construct, &v9)[3] = v6;
  return objc_msgSend(v6, "setStructType:withDevice:", a2, *(_QWORD *)(a1 + 32));
}

_QWORD *_MTLIndirectArgumentBufferLayoutPrivate::bufferLayoutForResourceAtIndex(_MTLIndirectArgumentBufferLayoutPrivate *this, unint64_t a2)
{
  _QWORD *result;
  unint64_t v3;

  v3 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::find<unsigned long>((_QWORD *)this + 1, &v3);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

uint64_t assignArgumentIndices(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;

  v6 = objc_msgSend(a2, "type");
  switch(v6)
  {
    case 0:
      if (objc_msgSend(a2, "arrayLength"))
      {
        v14 = 0;
        do
        {
          v15 = *a3;
          v16 = *(_QWORD *)(*a3 + 24);
          v37 = a1 + v14;
          v38 = &v37;
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v15, &v37, (uint64_t)&std::piecewise_construct, &v38)[3] = v16;
          ++v14;
        }
        while (objc_msgSend(a2, "arrayLength") > v14);
      }
      break;
    case 1:
LABEL_12:
      MTLReportFailure(0, "assignArgumentIndices", 1152, (uint64_t)CFSTR("Unexpected data type in indirect argument buffer"), v7, v8, v9, v10, v36);
      break;
    case 2:
      if (objc_msgSend(a2, "arrayLength"))
      {
        v17 = 0;
        do
        {
          v18 = a3[1];
          v19 = *(_QWORD *)(v18 + 24);
          v37 = a1 + v17;
          v38 = &v37;
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v18, &v37, (uint64_t)&std::piecewise_construct, &v38)[3] = v19;
          ++v17;
        }
        while (objc_msgSend(a2, "arrayLength") > v17);
      }
      break;
    case 3:
      if (objc_msgSend(a2, "arrayLength"))
      {
        v20 = 0;
        do
        {
          v21 = a3[2];
          v22 = *(_QWORD *)(v21 + 24);
          v37 = a1 + v20;
          v38 = &v37;
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21, &v37, (uint64_t)&std::piecewise_construct, &v38)[3] = v22;
          ++v20;
        }
        while (objc_msgSend(a2, "arrayLength") > v20);
      }
      break;
    case 4:
      if (objc_msgSend(a2, "arrayLength"))
      {
        v23 = 0;
        do
        {
          v24 = a3[3];
          v25 = *(_QWORD *)(v24 + 24);
          v37 = a1 + v23;
          v38 = &v37;
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24, &v37, (uint64_t)&std::piecewise_construct, &v38)[3] = v25;
          ++v23;
        }
        while (objc_msgSend(a2, "arrayLength") > v23);
      }
      break;
    default:
      switch(v6)
      {
        case 24:
          if (objc_msgSend(a2, "arrayLength"))
          {
            v11 = 0;
            do
            {
              v12 = a3[4];
              v13 = *(_QWORD *)(v12 + 24);
              v37 = a1 + v11;
              v38 = &v37;
              std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, &v37, (uint64_t)&std::piecewise_construct, &v38)[3] = v13;
              ++v11;
            }
            while (objc_msgSend(a2, "arrayLength") > v11);
          }
          break;
        case 25:
          if (objc_msgSend(a2, "arrayLength"))
          {
            v26 = 0;
            do
            {
              v27 = a3[6];
              v28 = *(_QWORD *)(v27 + 24);
              v37 = a1 + v26;
              v38 = &v37;
              std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27, &v37, (uint64_t)&std::piecewise_construct, &v38)[3] = v28;
              ++v26;
            }
            while (objc_msgSend(a2, "arrayLength") > v26);
          }
          break;
        case 26:
          if (objc_msgSend(a2, "arrayLength"))
          {
            v29 = 0;
            do
            {
              v30 = a3[7];
              v31 = *(_QWORD *)(v30 + 24);
              v37 = a1 + v29;
              v38 = &v37;
              std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v30, &v37, (uint64_t)&std::piecewise_construct, &v38)[3] = v31;
              ++v29;
            }
            while (objc_msgSend(a2, "arrayLength") > v29);
          }
          break;
        case 27:
          if (objc_msgSend(a2, "arrayLength"))
          {
            v32 = 0;
            do
            {
              v33 = a3[5];
              v34 = *(_QWORD *)(v33 + 24);
              v37 = a1 + v32;
              v38 = &v37;
              std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v33, &v37, (uint64_t)&std::piecewise_construct, &v38)[3] = v34;
              ++v32;
            }
            while (objc_msgSend(a2, "arrayLength") > v32);
          }
          break;
        default:
          goto LABEL_12;
      }
      break;
  }
  return objc_msgSend(a2, "arrayLength");
}

unint64_t assignArrayIndices(unint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;

  v5 = a1;
  v13 = a1;
  if (objc_msgSend(a2, "arrayLength"))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = objc_msgSend(a2, "elementType", v13);
      if (v8 > 114)
      {
        switch(v8)
        {
          case 's':
            v10 = a3[4];
            break;
          case 't':
            v10 = a3[5];
            break;
          case 'u':
            v10 = a3[6];
            break;
          case 'v':
            v10 = a3[7];
            break;
          default:
LABEL_19:
            v10 = a3[3];
            break;
        }
LABEL_20:
        v11 = *(_QWORD *)(v10 + 24);
        v14 = v5;
        v15 = &v14;
        std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v11;
        ++v5;
      }
      else
      {
        switch(v8)
        {
          case '9':
            v9 = assignArgumentIndices(v5, (void *)objc_msgSend(a2, "elementIndirectArgumentType"), a3);
            goto LABEL_18;
          case ':':
            v10 = a3[1];
            goto LABEL_20;
          case ';':
            v10 = a3[2];
            goto LABEL_20;
          case '<':
            v10 = *a3;
            goto LABEL_20;
          default:
            if (v8 == 1)
            {
              v9 = assignStructIndices(v5, objc_msgSend(a2, "elementStructType"), a3);
            }
            else
            {
              if (v8 != 2)
                goto LABEL_19;
              v9 = assignArrayIndices(v5, objc_msgSend(a2, "elementArrayType"), a3);
            }
LABEL_18:
            v5 += v9;
            break;
        }
      }
      if (v7 <= v5)
        v7 = v5;
      ++v6;
    }
    while (v6 < objc_msgSend(a2, "arrayLength"));
  }
  else
  {
    v7 = 0;
  }
  return v7 - v13;
}

uint64_t assignStructIndices(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t *v17;

  if (objc_msgSend((id)objc_msgSend(a2, "members"), "count"))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (void *)objc_msgSend((id)objc_msgSend(a2, "members"), "objectAtIndexedSubscript:", v6);
      v9 = objc_msgSend(v8, "indirectArgumentIndex") + a1;
      v10 = objc_msgSend(v8, "dataType");
      if (v10 > 114)
      {
        switch(v10)
        {
          case 's':
            v12 = a3[4];
            break;
          case 't':
            v12 = a3[5];
            break;
          case 'u':
            v12 = a3[6];
            break;
          case 'v':
            v12 = a3[7];
            break;
          default:
LABEL_19:
            v12 = a3[3];
            break;
        }
LABEL_20:
        v14 = *(_QWORD *)(v12 + 24);
        v13 = v9 + 1;
        v16 = v9;
        v17 = &v16;
        std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, &v16, (uint64_t)&std::piecewise_construct, &v17)[3] = v14;
      }
      else
      {
        switch(v10)
        {
          case '9':
            v11 = assignArgumentIndices(v9, (void *)objc_msgSend(v8, "indirectArgumentType"), a3);
            goto LABEL_18;
          case ':':
            v12 = a3[1];
            goto LABEL_20;
          case ';':
            v12 = a3[2];
            goto LABEL_20;
          case '<':
            v12 = *a3;
            goto LABEL_20;
          default:
            if (v10 == 1)
            {
              v11 = assignStructIndices(v9, objc_msgSend(v8, "structType"), a3);
            }
            else
            {
              if (v10 != 2)
                goto LABEL_19;
              v11 = assignArrayIndices(v9, (void *)objc_msgSend(v8, "arrayType"), a3);
            }
LABEL_18:
            v13 = v11 + v9;
            break;
        }
      }
      if (v7 <= v13)
        v7 = v13;
      ++v6;
    }
    while (v6 < objc_msgSend((id)objc_msgSend(a2, "members"), "count"));
  }
  else
  {
    v7 = 0;
  }
  return v7 - a1;
}

void countArgument(MTLArgument *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7, unint64_t *a8, uint64_t a9)
{
  MTLArgumentType v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = -[MTLArgument type](a1, "type");
  switch(v17)
  {
    case 0uLL:
      *a2 += -[MTLArgument arrayLength](a1, "arrayLength");
      break;
    case 1uLL:
LABEL_6:
      MTLReportFailure(0, "countArgument", 1317, (uint64_t)CFSTR("Unexpected data type in indirect argument buffer"), v18, v19, v20, v21, a9);
      break;
    case 2uLL:
      *a3 += -[MTLArgument arrayLength](a1, "arrayLength");
      break;
    case 3uLL:
      *a4 += -[MTLArgument arrayLength](a1, "arrayLength");
      break;
    case 4uLL:
      return;
    default:
      switch(v17)
      {
        case MTLArgumentTypeVisibleFunctionTable:
          *a5 += -[MTLArgument arrayLength](a1, "arrayLength");
          break;
        case MTLArgumentTypePrimitiveAccelerationStructure:
          *a7 += -[MTLArgument arrayLength](a1, "arrayLength");
          break;
        case MTLArgumentTypeInstanceAccelerationStructure:
          *a8 += -[MTLArgument arrayLength](a1, "arrayLength");
          break;
        case MTLArgumentTypeIntersectionFunctionTable:
          *a6 += -[MTLArgument arrayLength](a1, "arrayLength");
          break;
        default:
          goto LABEL_6;
      }
      break;
  }
}

NSUInteger countArrayArguments(MTLArrayType *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7, unint64_t *a8)
{
  NSUInteger result;
  unint64_t i;
  MTLDataType v18;
  uint64_t v19;

  result = -[MTLArrayType arrayLength](a1, "arrayLength");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      v18 = -[MTLArrayType elementType](a1, "elementType");
      if ((uint64_t)v18 > (uint64_t)(MTLDataTypeLong2|MTLDataTypeInt4))
      {
        switch(v18)
        {
          case MTLDataTypeVisibleFunctionTable:
            ++*a5;
            break;
          case MTLDataTypeIntersectionFunctionTable:
            ++*a6;
            break;
          case MTLDataTypePrimitiveAccelerationStructure:
            ++*a7;
            break;
          case MTLDataTypeInstanceAccelerationStructure:
            ++*a8;
            break;
          default:
            break;
        }
      }
      else
      {
        switch(v18)
        {
          case MTLDataTypeBool4|MTLDataTypeStruct:
            countArgument((MTLArgument *)-[MTLArrayType elementIndirectArgumentType](a1, "elementIndirectArgumentType"), a2, a3, a4, a5, a6, a7, a8, v19);
            break;
          case MTLDataTypeTexture:
            ++*a3;
            break;
          case MTLDataTypeSampler:
            ++*a4;
            break;
          case MTLDataTypePointer:
            ++*a2;
            break;
          default:
            if (v18 == MTLDataTypeStruct)
            {
              countStructArguments(-[MTLArrayType elementStructType](a1, "elementStructType"), a2, a3, a4, a5, a6, a7, a8);
            }
            else if (v18 == MTLDataTypeArray)
            {
              countArrayArguments(-[MTLArrayType elementArrayType](a1, "elementArrayType"), a2, a3, a4, a5, a6, a7, a8);
            }
            break;
        }
      }
      result = -[MTLArrayType arrayLength](a1, "arrayLength");
    }
  }
  return result;
}

NSUInteger countStructArguments(MTLStructType *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7, unint64_t *a8)
{
  NSUInteger result;
  unint64_t i;
  id v18;
  uint64_t v19;
  uint64_t v20;

  result = -[NSArray count](-[MTLStructType members](a1, "members"), "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      v18 = -[NSArray objectAtIndexedSubscript:](-[MTLStructType members](a1, "members"), "objectAtIndexedSubscript:", i);
      v19 = objc_msgSend(v18, "dataType");
      if (v19 > 114)
      {
        switch(v19)
        {
          case 's':
            ++*a5;
            break;
          case 't':
            ++*a6;
            break;
          case 'u':
            ++*a7;
            break;
          case 'v':
            ++*a8;
            break;
          default:
            break;
        }
      }
      else
      {
        switch(v19)
        {
          case '9':
            countArgument((MTLArgument *)objc_msgSend(v18, "indirectArgumentType"), a2, a3, a4, a5, a6, a7, a8, v20);
            break;
          case ':':
            ++*a3;
            break;
          case ';':
            ++*a4;
            break;
          case '<':
            ++*a2;
            break;
          default:
            if (v19 == 1)
            {
              countStructArguments((MTLStructType *)objc_msgSend(v18, "structType"), a2, a3, a4, a5, a6, a7, a8);
            }
            else if (v19 == 2)
            {
              countArrayArguments((MTLArrayType *)objc_msgSend(v18, "arrayType"), a2, a3, a4, a5, a6, a7, a8);
            }
            break;
        }
      }
      result = -[NSArray count](-[MTLStructType members](a1, "members"), "count");
    }
  }
  return result;
}

uint64_t alignTo(uint64_t a1, uint64_t a2)
{
  return (a1 + a2 - 1) & -a2;
}

uint64_t getArgumentSizeAndAlign(uint64_t a1, unint64_t *a2, unint64_t *a3, BOOL *a4)
{
  uint64_t result;

  *a2 = MTLDataTypeGetSize(a1);
  result = MTLDataTypeGetAlignment(a1);
  *a3 = result;
  return result;
}

NSUInteger getArraySizeAndAlign(MTLArrayType *a1, unint64_t *a2, unint64_t *a3, BOOL *a4)
{
  MTLDataType v8;
  NSUInteger result;
  MTLDataType v10;
  uint64_t Alignment;
  unint64_t Size;

  Alignment = 0;
  Size = 0;
  v8 = -[MTLArrayType elementType](a1, "elementType");
  if (v8 - 57 <= 0x3D)
  {
    if (((1 << (v8 - 57)) & 0x3C0000000000000ELL) != 0)
    {
      Alignment = 1;
      Size = 0;
      *a4 = 0;
      goto LABEL_4;
    }
    if (v8 == (MTLDataTypeBool4|MTLDataTypeStruct))
      goto LABEL_4;
  }
  if (v8 == MTLDataTypeStruct)
  {
    getStructSizeAndAlign(-[MTLArrayType elementStructType](a1, "elementStructType"), &Size, (unint64_t *)&Alignment, a4);
  }
  else if (v8 == MTLDataTypeArray)
  {
    getArraySizeAndAlign(-[MTLArrayType elementArrayType](a1, "elementArrayType"), &Size, (unint64_t *)&Alignment, a4);
  }
  else
  {
    *a4 = 1;
    v10 = -[MTLArrayType elementType](a1, "elementType");
    Size = MTLDataTypeGetSize(v10);
    Alignment = MTLDataTypeGetAlignment(v10);
  }
LABEL_4:
  result = -[MTLArrayType arrayLength](a1, "arrayLength", Alignment);
  *a2 = Size * result;
  *a3 = Alignment;
  return result;
}

NSUInteger getStructSizeAndAlign(MTLStructType *a1, unint64_t *a2, unint64_t *a3, BOOL *a4)
{
  unint64_t v8;
  NSUInteger result;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  unint64_t ConstantBlockAlignment;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;

  v8 = 1;
  *a4 = 1;
  result = -[NSArray count](-[MTLStructType members](a1, "members"), "count");
  if (result)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v8 = 1;
    do
    {
      v19 = 0;
      v20 = 0;
      v18 = 0;
      getStructMemberSizeAndAlignment((MTLStructMember *)-[NSArray objectAtIndexedSubscript:](-[MTLStructType members](a1, "members"), "objectAtIndexedSubscript:", v11), &v20, &v19, &v18);
      v13 = v18;
      if (v12 || !v18)
      {
        if (!v18)
          *a4 = 0;
        v16 = v19;
        v15 = (v10 + v19 - 1) & -(uint64_t)v19;
        v12 = v13;
      }
      else
      {
        ConstantBlockAlignment = getConstantBlockAlignment(-[MTLStructType members](a1, "members"), v11);
        v15 = (v10 + ConstantBlockAlignment - 1) & -(uint64_t)ConstantBlockAlignment;
        v12 = 1;
        v16 = v19;
      }
      v10 = v20 + v15;
      if (v8 <= v16)
        v8 = v16;
      ++v11;
      result = -[NSArray count](-[MTLStructType members](a1, "members"), "count");
    }
    while (v11 < result);
    v17 = v10 - 1;
  }
  else
  {
    v17 = -1;
  }
  *a2 = (v17 + v8) & -(uint64_t)v8;
  *a3 = v8;
  return result;
}

NSUInteger getStructMemberSizeAndAlignment(MTLStructMember *a1, unint64_t *a2, unint64_t *a3, BOOL *a4)
{
  NSUInteger result;
  MTLDataType v9;

  result = -[MTLStructMember dataType](a1, "dataType");
  if (result - 57 > 0x3D)
    goto LABEL_6;
  if (((1 << (result - 57)) & 0x3C0000000000000ELL) != 0)
  {
    *a2 = 0;
    *a3 = 1;
    *a4 = 0;
    return result;
  }
  if (result != 57)
  {
LABEL_6:
    if (result == 1)
    {
      return getStructSizeAndAlign(-[MTLStructMember structType](a1, "structType"), a2, a3, a4);
    }
    else if (result == 2)
    {
      return getArraySizeAndAlign(-[MTLStructMember arrayType](a1, "arrayType"), a2, a3, a4);
    }
    else
    {
      *a4 = 1;
      v9 = -[MTLStructMember dataType](a1, "dataType");
      *a2 = MTLDataTypeGetSize(v9);
      result = MTLDataTypeGetAlignment(v9);
      *a3 = result;
    }
  }
  return result;
}

unint64_t getConstantBlockAlignment(void *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  MTLStructMember *v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;

  v16 = 1;
  v15 = 1;
  getStructMemberSizeAndAlignment((MTLStructMember *)objc_msgSend(a1, "objectAtIndexedSubscript:", a2), &v14, &v15, &v16);
  v4 = objc_msgSend(a1, "count");
  v5 = v15;
  v6 = !v16 || a2 + 1 >= v4;
  if (!v6)
  {
    v7 = v4;
    v8 = a2 + 2;
    do
    {
      v9 = (MTLStructMember *)objc_msgSend(a1, "objectAtIndexedSubscript:", v8 - 1);
      v13 = 1;
      getStructMemberSizeAndAlignment(v9, &v12, &v13, &v16);
      v10 = v13;
      if (v5 > v13)
        v10 = v5;
      if (!v16)
        break;
      v5 = v10;
      v6 = v8++ >= v7;
    }
    while (!v6);
  }
  return v5;
}

void assignArgumentOffsets(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t Size;
  uint64_t Alignment;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;

  Size = MTLDataTypeGetSize(a1);
  Alignment = MTLDataTypeGetAlignment(a1);
  v8 = (Alignment + *a2 - 1) & -Alignment;
  *a2 = v8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v10 >= v9)
  {
    v12 = *(uint64_t **)a3;
    v13 = ((uint64_t)v10 - *(_QWORD *)a3) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v15 = v9 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(a3 + 16, v16);
      v12 = *(uint64_t **)a3;
      v10 = *(uint64_t **)(a3 + 8);
      v8 = *a2;
    }
    else
    {
      v17 = 0;
    }
    v18 = (uint64_t *)&v17[8 * v13];
    v19 = &v17[8 * v16];
    *v18 = v8;
    v11 = v18 + 1;
    while (v10 != v12)
    {
      v20 = *--v10;
      *--v18 = v20;
    }
    *(_QWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v11;
    *(_QWORD *)(a3 + 16) = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v10 = v8;
    v11 = v10 + 1;
  }
  *(_QWORD *)(a3 + 8) = v11;
  *a2 += Size;
}

unint64_t assignArrayOffsets(MTLArrayType *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  unint64_t i;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;

  v10 = 0;
  getArraySizeAndAlign(a1, &v11, &v10, &v9);
  *a2 = (*a2 + v10 - 1) & -(uint64_t)v10;
  result = -[MTLArrayType arrayLength](a1, "arrayLength");
  if (result)
  {
    for (i = 0; result > i; ++i)
    {
      v8 = -[MTLArrayType elementType](a1, "elementType");
      if (v8 > 114)
      {
        if ((unint64_t)(v8 - 115) >= 4)
          goto LABEL_9;
      }
      else if ((unint64_t)(v8 - 57) >= 4)
      {
        if (v8 == 1)
        {
          assignStructOffsets(-[MTLArrayType elementStructType](a1, "elementStructType"), a2, a3);
          goto LABEL_11;
        }
        if (v8 != 2)
        {
LABEL_9:
          assignArgumentOffsets(-[MTLArrayType elementType](a1, "elementType"), a2, a3);
          goto LABEL_11;
        }
        assignArrayOffsets(-[MTLArrayType elementArrayType](a1, "elementArrayType"), a2, a3);
      }
LABEL_11:
      result = -[MTLArrayType arrayLength](a1, "arrayLength");
    }
  }
  return result;
}

unint64_t assignStructOffsets(MTLStructType *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t result;
  BOOL v8;
  unint64_t i;
  MTLStructMember *v10;
  unint64_t ConstantBlockAlignment;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;

  v18 = 1;
  v19 = 0;
  getStructSizeAndAlign(a1, &v19, &v18, &v17);
  v6 = (*a2 + v18 - 1) & -(uint64_t)v18;
  *a2 = v6;
  result = -[NSArray count](-[MTLStructType members](a1, "members"), "count");
  if (result)
  {
    v8 = 0;
    for (i = 0; i < result; ++i)
    {
      v10 = -[NSArray objectAtIndexedSubscript:](-[MTLStructType members](a1, "members"), "objectAtIndexedSubscript:", i);
      v15 = 0;
      v14 = 0;
      getStructMemberSizeAndAlignment(v10, &v16, &v15, &v14);
      if (v8 || !v14)
      {
        v12 = (*a2 + v15 - 1) & -(uint64_t)v15;
        v8 = v14;
      }
      else
      {
        ConstantBlockAlignment = getConstantBlockAlignment(-[MTLStructType members](a1, "members"), i);
        v12 = (ConstantBlockAlignment + *a2 - 1) & -(uint64_t)ConstantBlockAlignment;
        v8 = 1;
      }
      *a2 = v12;
      v13 = -[MTLStructMember dataType](v10, "dataType");
      if (v13 > 114)
      {
        if ((unint64_t)(v13 - 115) >= 4)
          goto LABEL_13;
      }
      else if ((unint64_t)(v13 - 57) >= 4)
      {
        if (v13 == 1)
        {
          assignStructOffsets(-[MTLStructMember structType](v10, "structType"), a2, a3);
          goto LABEL_15;
        }
        if (v13 != 2)
        {
LABEL_13:
          assignArgumentOffsets(-[MTLStructMember dataType](v10, "dataType"), a2, a3);
          goto LABEL_15;
        }
        assignArrayOffsets(-[MTLStructMember arrayType](v10, "arrayType"), a2, a3);
      }
LABEL_15:
      result = -[NSArray count](-[MTLStructType members](a1, "members"), "count");
    }
  }
  *a2 = v19 + v6;
  return result;
}

uint64_t updatePointerType(void *a1, void *a2, void *a3)
{
  unint64_t v6;
  unint64_t v7;

  v6 = objc_msgSend(a2, "alignment");
  if (objc_msgSend(a1, "isConstantBuffer"))
  {
    v7 = objc_msgSend(a3, "minConstantBufferAlignmentBytes");
    if (v7 > v6)
      v6 = v7;
  }
  return objc_msgSend(a1, "setAlignment:dataSize:", v6, objc_msgSend(a2, "encodedLength"));
}

uint64_t makeOffsetRelative(MTLStructType *a1, uint64_t a2)
{
  NSArray *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = -[MTLStructType members](a1, "members", 0);
  result = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v7);
        v9 = objc_msgSend(v8, "offset");
        if (v9 != -1)
        {
          v10 = v9;
          v11 = objc_msgSend(v8, "dataType");
          if (v11 == 2)
          {
            makeOffsetRelative((MTLArrayType *)objc_msgSend(v8, "arrayType"), v10);
          }
          else if (v11 == 1)
          {
            makeOffsetRelative((MTLStructType *)objc_msgSend(v8, "structType"), v10);
          }
          objc_msgSend(v8, "setOffset:", v10 - a2);
        }
        ++v7;
      }
      while (v5 != v7);
      result = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t getGlobalConstantOffsets@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  uint64_t v19;

  v10 = objc_msgSend(a3, "bufferLayoutMatchesFrontEndLayout");
  *a5 = 1;
  a5[1] = -1;
  a5[2] = -1;
  v11 = objc_msgSend(a1, "elementType");
  if ((unint64_t)(v11 - 57) <= 0x3D)
  {
    if (((1 << (v11 - 57)) & 0x3C00000000E00006) != 0)
      goto LABEL_15;
    if (v11 == 60)
    {
      getGlobalConstantOffsets((void *)objc_msgSend(a1, "elementTypeDescription"), a4, &v18);
LABEL_10:
      *(_OWORD *)a5 = v18;
      a5[2] = v19;
      goto LABEL_15;
    }
    if (v11 == 57)
      abort();
  }
  if (v11 == 2)
  {
    getGlobalConstantOffsets(&v18, objc_msgSend(a1, "elementArrayType"), a2, a3, a4);
    goto LABEL_10;
  }
  if (v11 == 1)
  {
    getGlobalConstantOffsets(&v18, objc_msgSend(a1, "elementStructType"), a2, a3, a4);
    goto LABEL_10;
  }
  if ((v10 & 1) != 0)
    v12 = 0;
  else
    v12 = objc_msgSend(a3, "constantOffsetAtIndex:", a2);
  a5[1] = v12;
  a5[2] = a2;
  *a5 = 1;
LABEL_15:
  v13 = a5[2];
  if (v13 == -1)
  {
    v16 = 0;
    v15 = *a5;
    goto LABEL_21;
  }
  v14 = objc_msgSend(a1, "arrayLength");
  v15 = *a5;
  if (v14 < 2)
  {
    v16 = 0;
    goto LABEL_21;
  }
  if ((v10 & 1) == 0)
  {
    v16 = objc_msgSend(a3, "constantOffsetAtIndex:", v15 + v13) - a5[1];
LABEL_21:
    objc_msgSend(a1, "setStride:", v16);
  }
  result = objc_msgSend(a1, "arrayLength");
  *a5 = result * v15;
  return result;
}

MTLDataType makeOffsetRelative(MTLArrayType *a1, unint64_t a2)
{
  MTLArrayType *v3;
  MTLDataType result;

  while (1)
  {
    v3 = a1;
    result = -[MTLArrayType elementType](a1, "elementType");
    if (result != MTLDataTypeArray)
      break;
    a1 = -[MTLArrayType elementArrayType](v3, "elementArrayType");
  }
  if (result == MTLDataTypeStruct)
    return makeOffsetRelative(-[MTLArrayType elementStructType](v3, "elementStructType"), a2);
  return result;
}

_QWORD *std::vector<MTLStructMember *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1826D8714(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826D8938(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826D8B54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<std::unordered_map<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*>>>>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1826D99D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Block_object_dispose((const void *)(v17 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1826D9BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MTLHashKey *a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1826D9D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MTLHashKey *a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1826D9E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1826DB594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  flatbuffers::IDLOptions::~IDLOptions((void **)&a9);
  _Unwind_Resume(a1);
}

BOOL hasFileExtension(const char *a1, const char *a2)
{
  size_t v4;
  size_t v5;

  v4 = strlen(a1);
  v5 = strlen(a2);
  return v4 >= v5 && strcmp(&a1[v4 - v5], a2) == 0;
}

void sub_1826DBB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1826DC87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&a41);
  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1826DCC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__split_buffer<machOEntry>::~__split_buffer((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1826DCE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::__split_buffer<machOEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1826DD6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *__p, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, MTLHashKey *__pa, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1826DD9B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1826DDE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v54);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v53);
  _Block_object_dispose(&a46, 8);
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v55 - 184), 8);
  _Block_object_dispose((const void *)(v55 - 152), 8);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v55 - 120);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__172(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__173(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1826DEB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_96c70_ZTSNSt3__110shared_ptrINS_6vectorI10machOEntryNS_9allocatorIS2_EEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 104) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_96c70_ZTSNSt3__110shared_ptrINS_6vectorI10machOEntryNS_9allocatorIS2_EEEEEE(uint64_t a1)
{
  return std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](a1 + 96);
}

uint64_t __copy_helper_block_e8_104c70_ZTSNSt3__110shared_ptrINS_6vectorI10machOEntryNS_9allocatorIS2_EEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(result + 112) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_104c70_ZTSNSt3__110shared_ptrINS_6vectorI10machOEntryNS_9allocatorIS2_EEEEEE(uint64_t a1)
{
  return std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](a1 + 104);
}

void sub_1826DF984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  if (a25 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)&a26);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table(v32 - 144);
  _Unwind_Resume(a1);
}

uint64_t Air::PipelineScript::pipeline_as_tile_render(Air::PipelineScript *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 3) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::PipelineScript::pipeline_as_mesh_render(Air::PipelineScript *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 4) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

void sub_1826E25B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<MTLHashKey>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1826E3FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  if (__p)
    operator delete(__p);
  v30 = *(void **)(v28 - 128);
  if (v30)
  {
    *(_QWORD *)(v28 - 120) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Air::FunctionStitching::Node::node_as_BufferAddressNode(Air::FunctionStitching::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::FunctionStitching::Node::node_as_ThreadgroupNode(Air::FunctionStitching::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 8) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::FunctionStitching::Node::node_as_BuiltinNode(Air::FunctionStitching::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 10) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t Air::FunctionStitching::Node::node_as_EarlyReturnNode(Air::FunctionStitching::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 11) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

void sub_1826E47F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1826E49E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1826E6168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;
  void *v49;

  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&a31);
  _Block_object_dispose(&a47, 8);
  v49 = *(void **)(v47 - 240);
  if (v49)
  {
    *(_QWORD *)(v47 - 232) = v49;
    operator delete(v49);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__234(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__235(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void std::vector<MTLLoaderMachOPayload>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 112;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLLoaderMachOPayload>>(v3, a2);
    v7 = &v6[112 * v5];
    v9 = &v6[112 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 7);
        v14 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v14;
        *((_OWORD *)v12 - 7) = v13;
        v15 = *((_OWORD *)v10 - 4);
        v16 = *((_OWORD *)v10 - 3);
        v17 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v17;
        *((_OWORD *)v12 - 4) = v15;
        *((_OWORD *)v12 - 3) = v16;
        v12 -= 112;
        v10 -= 112;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1826E6A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, MTLHashKey *a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, MTLHashKey *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  a9 = &a14;
  std::vector<MTLHashKey>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a28);
  _Unwind_Resume(a1);
}

void sub_1826E6AD4()
{
  JUMPOUT(0x1826E6ACCLL);
}

void sub_1826E7374(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1826E78C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1826E8140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1826E821C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1826E83D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MTLHashKey *a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1826E8498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MTLHashKey *a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1826E879C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10B0C40DA8BEAA3);
  _Unwind_Resume(a1);
}

void sub_1826E88CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1826E8C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1826E8E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  _Block_object_dispose((const void *)(v25 - 64), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__526(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__527(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1826E9514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1826E99FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x1020C405FF5E128);
  _Unwind_Resume(a1);
}

uint64_t getRequiredStagesPresentMask(const Air::PipelineScript *this)
{
  unsigned __int16 *v1;
  uint64_t v2;
  int v4;
  int *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  char *v8;
  int *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  char *v13;
  int *v14;
  unsigned __int16 *v15;
  int v16;
  int *v17;
  unsigned __int16 *v18;
  _BOOL4 v19;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 < 9u)
    return 0;
  v2 = v1[4];
  if (!v2)
    return 0;
  v4 = *((unsigned __int8 *)this + v2);
  if ((v4 - 2) < 2)
    return 2;
  if (v4 != 1)
  {
    if (v4 == 4)
    {
      v5 = (int *)Air::PipelineScript::pipeline_as_mesh_render(this);
      v6 = (unsigned __int16 *)((char *)v5 - *v5);
      if (*v6 >= 9u && (v7 = v6[4]) != 0)
        v8 = (char *)v5 + v7 + *(unsigned int *)((char *)v5 + v7);
      else
        v8 = 0;
      v14 = (int *)Air::PipelineScript::pipeline_as_mesh_render(this);
      v15 = (unsigned __int16 *)((char *)v14 - *v14);
      v16 = 2;
      if (*v15 >= 5u)
      {
        if (v15[2])
          v16 = 6;
        else
          v16 = 2;
      }
      return v16 | (v8 != 0);
    }
    return 0;
  }
  v10 = (int *)Air::PipelineScript::pipeline_as_render(this);
  v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 5u && (v12 = v11[2]) != 0)
    v13 = (char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12);
  else
    v13 = 0;
  v17 = (int *)Air::PipelineScript::pipeline_as_render(this);
  v18 = (unsigned __int16 *)((char *)v17 - *v17);
  v19 = *v18 >= 7u && v18[3] != 0;
  return v19 | (2 * (v13 != 0));
}

void sub_1826EA244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a9);
  _Block_object_dispose((const void *)(v36 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__530(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__531(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 48);
}

void sub_1826EA96C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1826EABD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 72), 8);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<MTLUINT256_t,objc_object  {objcproto13MTLLibrarySPI}*,UnorderedContainerHash,std::__unordered_map_hasher,true>,std::__unordered_map_equal<MTLUINT256_t,objc_object  {objcproto13MTLLibrarySPI}*,std::__unordered_map_hasher,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *i = *v24;
LABEL_48:
    *v24 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826EAF88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void MTLAirNTObject::~MTLAirNTObject(MTLAirNTObject *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_QWORD **)this != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x186DABFBC](*v2, 0x1070C40E40EFFFALL);
      ++v2;
    }
    while (v2 != v3);
    v2 = *(_QWORD **)this;
  }
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void MTLProgramObject::~MTLProgramObject(MTLProgramObject *this)
{
  NSObject *v2;
  void *v3;

  dispatch_release(*((dispatch_object_t *)this + 55));
  v2 = *((_QWORD *)this + 53);
  if (v2)
    dispatch_release(v2);
  v3 = (void *)*((_QWORD *)this + 54);
  if (v3)

  VariantList<4u>::~VariantList((uint64_t)this);
}

uint64_t VariantList<4u>::~VariantList(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t j;

  v2 = *(_QWORD *)(a1 + 328);
  if (v2 != a1)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 320);
      for (i = 240; i != -80; i -= 80)
        VariantEntry::~VariantEntry((VariantEntry *)(v2 + i));
      MEMORY[0x186DABFBC](v2, 0x10B0C4094D98C36);
      *(_QWORD *)(a1 + 328) = v3;
      v2 = v3;
    }
    while (v3 != a1);
  }
  VariantEntry::~VariantEntry((VariantEntry *)(a1 + 344));
  for (j = 240; j != -80; j -= 80)
    VariantEntry::~VariantEntry((VariantEntry *)(a1 + j));
  return a1;
}

void VariantEntry::~VariantEntry(VariantEntry *this)
{
  NSObject *var5;
  NSObject *var9;

  free(this->var0);
  var5 = this->var5;
  if (var5)
    dispatch_release(var5);

  var9 = this->var9;
  if (var9)
    dispatch_release(var9);
}

flatbuffers::IDLOptions *flatbuffers::IDLOptions::IDLOptions(flatbuffers::IDLOptions *this)
{
  *(_DWORD *)((char *)this + 3) = 0;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 2) = 2;
  *((_DWORD *)this + 3) = 257;
  *((_BYTE *)this + 16) = 1;
  *(_QWORD *)((char *)this + 17) = 0;
  *((_BYTE *)this + 25) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 4, "std::unique_ptr");
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 14, "T");
  *((_QWORD *)this + 18) = 0;
  *((_WORD *)this + 68) = 1;
  *((_BYTE *)this + 138) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *(_QWORD *)((char *)this + 165) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 56) = 1;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *(_DWORD *)((char *)this + 255) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 41) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 42, "_generated");
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 1;
  *((_QWORD *)this + 49) = 0;
  *((_WORD *)this + 200) = 257;
  return this;
}

void sub_1826EB27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 335) < 0)
    operator delete(*(void **)(v2 + 312));
  if (*(char *)(v2 + 311) < 0)
    operator delete(*(void **)(v2 + 288));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 255) < 0)
    operator delete(*v9);
  if (*(char *)(v2 + 223) < 0)
    operator delete(*(void **)(v2 + 200));
  if (*(char *)(v2 + 199) < 0)
    operator delete(*v8);
  if (*(char *)(v2 + 167) < 0)
    operator delete(*v7);
  if (*(char *)(v2 + 135) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 111) < 0)
    operator delete(*v6);
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

flatbuffers::Parser *flatbuffers::Parser::Parser(flatbuffers::Parser *this, const flatbuffers::IDLOptions *a2)
{
  char *v4;
  _OWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char **v20;
  void *__p[2];
  char v22;
  void **v23;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0xFFFFFFFF00000000;
  *((_BYTE *)this + 24) = 1;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = (char *)this + 136;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = (char *)this + 232;
  *((_QWORD *)this + 30) = 0;
  v20 = (char **)((char *)this + 272);
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_BYTE *)this + 344) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 22) = xmmword_182809F30;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 1;
  *((_WORD *)this + 208) = 256;
  v4 = (char *)this + 432;
  *((_QWORD *)this + 53) = 0;
  std::vector<unsigned char>::vector((_QWORD *)this + 54, 0x100uLL);
  *((_BYTE *)this + 480) = 0;
  *((_QWORD *)this + 59) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_QWORD *)((char *)this + 484) = 7;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_QWORD *)this + 65) = v4;
  *((_QWORD *)this + 62) = (char *)this + 504;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_QWORD *)this + 69) = v4;
  *((_QWORD *)this + 66) = (char *)this + 536;
  *((_QWORD *)this + 55) = *((_QWORD *)this + 54);
  *((_QWORD *)this + 70) = 0;
  *((_WORD *)this + 284) = 0;
  *((_OWORD *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 604) = 0u;
  *(_OWORD *)((char *)this + 588) = 0u;
  *(_OWORD *)((char *)this + 572) = 0u;
  *((_QWORD *)this + 79) = (char *)this + 640;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_QWORD *)this + 82) = (char *)this + 664;
  *((_QWORD *)this + 87) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = (char *)this + 712;
  *((_QWORD *)this + 90) = 0;
  flatbuffers::IDLOptions::IDLOptions((flatbuffers::Parser *)((char *)this + 728), a2);
  *((_BYTE *)this + 1136) = 0;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  if (*((_BYTE *)this + 984))
    *((_BYTE *)this + 416) = 1;
  v5 = (_OWORD *)operator new();
  *v5 = 0u;
  v5[1] = 0u;
  *((_QWORD *)this + 38) = v5;
  v7 = (_QWORD *)*((_QWORD *)this + 35);
  v6 = *((_QWORD *)this + 36);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - *v20) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*v20;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 288, v12);
      v5 = (_OWORD *)*((_QWORD *)this + 38);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v5;
    v8 = v14 + 8;
    v17 = (char *)*((_QWORD *)this + 34);
    v16 = (char *)*((_QWORD *)this + 35);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *v20;
    }
    *((_QWORD *)this + 34) = v14;
    *((_QWORD *)this + 35) = v8;
    *((_QWORD *)this + 36) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 35) = v8;
  *((_QWORD *)this + 37) = *((_QWORD *)this + 38);
  std::string::basic_string[abi:ne180100]<0>(__p, "deprecated");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "required");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "key");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "shared");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "hash");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "id");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "force_align");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "bit_flags");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "bit_flags_all");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "bit_flags_none");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "original_order");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nested_flatbuffer");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "csharp_partial");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "streaming");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "idempotent");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cpp_type");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cpp_ptr_type");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cpp_ptr_type_get");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cpp_str_type");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cpp_str_flex_ctor");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "native_inline");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "native_custom_alloc");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "native_type");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "native_default");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "flexbuffer");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "private");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "apple_internal");
  v23 = __p;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 88, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23)+ 56) = 1;
  if (v22 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_1826EBE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  flexbuffers::Builder *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *v27;

  if (a17 < 0)
    operator delete(__p);
  __p = (void *)(v17 + 1176);
  std::vector<std::pair<flatbuffers::Value,flatbuffers::FieldDef *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v17 + 1175) < 0)
    operator delete(*(void **)(v17 + 1152));
  flatbuffers::IDLOptions::~IDLOptions(v25);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(v24, *(char **)(v17 + 712));
  __p = a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v23, *(_QWORD **)(v17 + 664));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v17 + 632, *(_QWORD **)(v17 + 640));
  if (*(char *)(v17 + 631) < 0)
    operator delete(*(void **)(v17 + 608));
  if (*(char *)(v17 + 607) < 0)
    operator delete(*(void **)(v17 + 584));
  flexbuffers::Builder::~Builder(v22);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)(v20 + 152));
  if (*(char *)(v17 + 335) < 0)
    operator delete(*(void **)(v17 + 312));
  v27 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v17 + 280) = v27;
    operator delete(v27);
  }
  flatbuffers::SymbolTable<flatbuffers::ServiceDef>::~SymbolTable(v21);
  flatbuffers::SymbolTable<flatbuffers::EnumDef>::~SymbolTable(v20 - 8);
  flatbuffers::SymbolTable<flatbuffers::StructDef>::~SymbolTable(v19);
  flatbuffers::SymbolTable<flatbuffers::Type>::~SymbolTable(v18);
  flatbuffers::ParserState::~ParserState((void **)v17);
  _Unwind_Resume(a1);
}

